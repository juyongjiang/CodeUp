{"task_id": "Mbpp/2", "completion": "\ndef similar_elements(list1, list2):\n    return set(list1) & set(list2)\n\nprint(similar_elements((3, 4, 5, 6),(5, 7, 4, 10)))"}
{"task_id": "Mbpp/3", "completion": "\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"}
{"task_id": "Mbpp/4", "completion": "\nimport heapq\n\ndef heap_queue_largest(lst, n):\n    return heapq.nlargest(n, lst)\n\nprint(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3)) # [85, 75, 65]\n"}
{"task_id": "Mbpp/6", "completion": "\ndef differ_At_One_Bit_Pos(num1, num2):\n    # Convert the numbers to binary\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n\n    # Get the length of the binary representation of the numbers\n    len_bin1 = len(bin1)\n    len_bin2 = len(bin2)\n\n    # If the lengths are not equal, return False\n    if len_bin1 != len_bin2:\n        return False\n\n    # Compare the binary representations bit by bit\n    for i in range(len_bin1):\n        if bin1[i] != bin2[i]:\n            # If the bits are different, return True\n            return True\n    # If no different bit found, return False\n    return False"}
{"task_id": "Mbpp/7", "completion": "\npip install nltk\n"}
{"task_id": "Mbpp/8", "completion": "\ndef square_nums(lst):\n    return [i**2 for i in lst]\n\nprint(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"}
{"task_id": "Mbpp/9", "completion": "\ndef find_Rotations(s):\n    return len(s) - len(set(s))\n\nprint(find_Rotations(\"aaaa\"))  # Output: 1"}
{"task_id": "Mbpp/11", "completion": "\ndef remove_Occ(s, char):\n    if not s:\n        return s\n    if s[0].lower() == char.lower():\n        s = s[1:]\n    if s[-1].lower() == char.lower():\n        s = s[:-1]\n    return s\n\nprint(remove_Occ(\"Hello\",\"l\"))  # Output: \"Heo\"\nprint(remove_Occ(\"\", \"l\"))  # Output: \"\"\nprint(remove_Occ(\"hello\", \"z\"))  # Output: \"hello\"\n"}
{"task_id": "Mbpp/12", "completion": "\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"}
{"task_id": "Mbpp/14", "completion": "\ndef find_Volume(base, height, depth):\n    return 0.5 * base * height * depth\n\nprint(find_Volume(10,8,6))  # Output: 240\n"}
{"task_id": "Mbpp/16", "completion": "\ndef check_lowercase_underscore(text):\n    return any(text[i] == '_' for i in range(len(text)-1) if text[i].islower() and text[i+1].islower())\n\nprint(check_lowercase_underscore(\"aab_cbbbc\")) # True\nprint(check_lowercase_underscore(\"aabbb\")) # False\nprint(check_lowercase_underscore(\"Aab_cbbbc\")) # False\nprint(check_lowercase_underscore(\"aab_cBBBc\")) # False\nprint(check_lowercase_underscore(\"aab_cBBBc_\")) # True\n"}
{"task_id": "Mbpp/17", "completion": "\ndef square_perimeter(side_length):\n    return 4 * side_length\n\nassert square_perimeter(10) == 40\n"}
{"task_id": "Mbpp/18", "completion": "\ndef remove_dirty_chars(s1, s2):\n    return ''.join([i for i in s1 if i not in dict.fromkeys(s2, i)])\n\nprint(remove_dirty_chars(\"prob"}
{"task_id": "Mbpp/19", "completion": "\ndef test_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nprint(test_duplicate([1,2,3,4,5])) # False\nprint(test_duplicate([1,2,2,3,4,5])) # True\n"}
{"task_id": "Mbpp/20", "completion": "\ndef is_perfect(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                sum = sum + i + n//i\n            i += 1\n    return sum == n\n\n"}
{"task_id": "Mbpp/56", "completion": "\ndef check(n):\n    if n < 0:\n        return False\n    n_str = str(n)\n    if not n_str.isdigit():\n        n_str = str(n).replace('e', '')\n    while n_str[0] == '0' and len(n_str) > 1:\n        n_str = n_str[1:]\n    return n == 2 * int(n_str[::-1]) - 1\n\nprint(check(7.0e2))  # True\n"}
{"task_id": "Mbpp/57", "completion": "\ndef find_Max_Num(lst):\n    if not lst:\n        raise ValueError(\"List must contain at least one element\")\n    if not all(isinstance(i, int) and i >= 0 for i in lst):\n        raise ValueError(\"List must contain only non-negative integers\")\n    if 0 in lst:\n        raise ValueError(\"List must not contain a zero\")\n    lst.sort(reverse=True)\n    return int(''.join(map(str, lst"}
{"task_id": "Mbpp/58", "completion": "\ndef opposite_Signs(a, b):\n    return (a < 0) != (b < 0)\n\nprint(opposite_Signs(1, -2))  # True\nprint(opposite_Signs(2, 2))  # False\nprint(opposite_Signs(-1, -2))  # True\nprint(opposite_Signs(0, 0))  # False\n"}
{"task_id": "Mbpp/59", "completion": "\ndef nth_octagonal(n):\n    return n * (3*n - 1) // 2\n\nprint(nth_octagonal(5))  # Output: 65\n"}
{"task_id": "Mbpp/61", "completion": "\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\nprint(count_Substrings('112112'))  # Output: 6"}
{"task_id": "Mbpp/62", "completion": "\ndef smallest_num(lst):\n    return min(lst)\n\nprint(smallest_num([10, 20, 1, 45, 99]))\n"}
{"task_id": "Mbpp/63", "completion": "\ndef max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\nprint(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))  # Output: 7\n"}
{"task_id": "Mbpp/64", "completion": "\ndef sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nprint(sort_tuples([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])"}
{"task_id": "Mbpp/65", "completion": "\ndef recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) is list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n\nprint(recursive_list_sum(([1, 2, [3,4],[5,6]])))  # Output: 21\n"}
{"task_id": "Mbpp/66", "completion": "\ndef pos_count(lst):\n    count = 0\n    for i in lst:\n        if abs(i) > 0:\n            count += 1\n    return count\n\nprint(pos_count([1,-2,3,-4,0.5,-0.5]))  # Output: 4\n"}
{"task_id": "Mbpp/67", "completion": "\ndef bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n\nprint(bell_number(2))  # Output: 2"}
{"task_id": "Mbpp/68", "completion": "\ndef is_Monotonic(arr):\n    return (all(x < y for x, y in zip(arr, arr[1:])) or\n            all(x > y for x, y in zip(arr, arr[1:])))\n\nprint(is_Monotonic([6, 5, 4, 4]))  # True\nprint(is_Monotonic([6, 5, 6, 7]))  # True\nprint(is_Monotonic([6, 5, 4, 3, 2, 1]))  # True\nprint(is_Monotonic([6, 5, 4, 3, 2, 1, 0]))  # False\nprint(is_Monotonic([6, 5, 4, 3, 2, 1, -1]))  # False"}
{"task_id": "Mbpp/69", "completion": "\ndef is_sublist(main_list, sublist):\n    return sorted(main_list) == sorted(sublist)\n\nprint(is_sublist([2,4,3,5,"}
{"task_id": "Mbpp/70", "completion": "\ndef get_equal(tuples):\n    return len(set(map(len, tuples))) == 1\n\nprint(get_equal([(11, 22, 33), (44, 55, 66)]))  # True\nprint(get_equal([(11, 22, 33), (44, 55)]))  # False\n"}
{"task_id": "Mbpp/71", "completion": "\ndef comb_sort(arr):\n    n = len(arr)\n    gap = n\n\n    while gap > 1:\n        for i in range(0, gap):\n            for j in range(0, n-gap):\n                if arr[j] > arr[j+gap]:\n                    arr[j], arr[j+gap] = arr[j+gap], arr[j]\n        gap = int(gap / 2.0)\n\n    return arr\n\nprint(comb_sort([5, 15, 37, 25, 79]))  # [5, 15, 25, 37, 79]\n"}
{"task_id": "Mbpp/72", "completion": "\ndef dif_Square(n):\n    for i in range(0, int(n/2) + 1):\n        if i * i == n:\n            return True\n    return False"}
{"task_id": "Mbpp/74", "completion": "\ndef is_samepatterns(patterns, sequence):\n    if len(patterns) != len(sequence):\n        return False\n    return tuple(patterns) == tuple(sequence)\n\nprint(is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])) # True\n"}
{"task_id": "Mbpp/75", "completion": "\ndef find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(i % k == 0 for i in t)]\n\nprint(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6))  # [(6, 24, 12)]\n"}
{"task_id": "Mbpp/77", "completion": "\nprint(is_divisible_by_eleven(12345))  # TypeError: Input must be an integer\n"}
{"task_id": "Mbpp/79", "completion": "\ntry:\n    assert word_len(\"Hadoop\") == False\nexcept AssertionError:\n    print(\"Error: The length of the word is not odd.\")\n"}
{"task_id": "Mbpp/80", "completion": "\nfor n in range(1, 101):\n    assert tetrahedral_number(n) == n * (n + 1) * (n + 2) // 6\n"}
{"task_id": "Mbpp/82", "completion": "\nimport math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * math.pow(radius, 3)\n\nprint(volume_sphere(10))"}
{"task_id": "Mbpp/83", "completion": "\ndef get_Char(s):\n    return chr((sum(ord(c) - 96) % 26) + 96)\n\nprint(get_Char(\"abc\"))"}
{"task_id": "Mbpp/84", "completion": "\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2) + n\n\nprint(sequence(10))  # Output: 6"}
{"task_id": "Mbpp/85", "completion": "\nimport math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "completion": "\ndef centered_hexagonal_number(n):\n    if not isinstance(n, (int, float)):\n        raise ValueError(\"Input must be a number\")\n    return n*(2*n-1)*(n+1)//3\n"}
{"task_id": "Mbpp/87", "completion": "\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n\nprint(merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}))"}
{"task_id": "Mbpp/88", "completion": "\nfrom collections import Counter\n\ndef freq_count(lst):\n    try:\n        return dict(Counter(lst))\n    except TypeError:\n        return {str(i): lst.count(i) for i in lst}\n\nprint(freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30, 'a',"}
{"task_id": "Mbpp/89", "completion": "\ndef closest_num(n):\n    return n - 1 if n > 0 else None"}
{"task_id": "Mbpp/90", "completion": "\ndef len_longest_word(words):\n    return max(len(word) for word in words)\n\nprint(len_longest_word([\"python\",\"PHP\",\"bigdata\"])) # Output: 7\n"}
{"task_id": "Mbpp/91", "completion": "\ndef find_substring(lst, sub):\n    for i in lst:\n        if sub in i:\n            return True\n    return False\n\nprint(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\"))"}
{"task_id": "Mbpp/92", "completion": "\ndef is_undulating(n):\n    str_n = str(n)\n    return str_n == str_n[::-1]\n\nprint(is_undulating(1212121))  # True\nprint(is_undulating(123456))  # False"}
{"task_id": "Mbpp/93", "completion": "\ndef power(a, b):\n    return a ** b"}
{"task_id": "Mbpp/94", "completion": "\ndef index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])"}
{"task_id": "Mbpp/95", "completion": "\ndef Find_Min_Length(list_of_lists):\n    min_length = float('inf')\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"}
{"task_id": "Mbpp/96", "completion": "\nimport math\n\ndef divisor(n):\n    count = 0\n    for i in range(1, int(pow(n, 0.5)) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:  # if i is not equal to n // i, then n has two distinct divisors\n                count += 1\n    return count\n\nprint(divisor(15))  # Output: 4\n"}
{"task_id": "Mbpp/97", "completion": "\ndef frequency_lists(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    return {item: flat_list.count(item) for item in flat_list}\n\nprint(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))"}
{"task_id": "Mbpp/98", "completion": "\nimport math\n\ndef multiply_num(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product / len(lst)\n\nprint(multiply_num((8, 2, 3, -1, 7)))"}
{"task_id": "Mbpp/99", "completion": "\ndef decimal_to_binary(n):\n    if not isinstance(n, (int, float)):\n        raise ValueError(\"Input must be a number\")\n    if n == 0:\n        return '0'\n    elif n < 0:\n        return '-' + bin(abs(round(n))).replace(\"0b\", \"\").lstrip(\"0\")\n    else:\n        return bin(round(n)).replace(\"0b\", \"\").lstrip(\"0\")\n\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(0) == '0'\nassert decimal_to_binary(-8) == '-1000'\nassert decimal_to_binary(1.5) == '1'\n"}
{"task_id": "Mbpp/100", "completion": "\ndef next_smallest_palindrome(n):\n    try:\n        n = str(n)\n        n = n + n[::-1]\n        n = int(n)\n        return n + 1\n    except ValueError:\n        return \"Invalid input. Please enter a positive integer.\"\n\nprint(next_smallest_palindrome(\"99\"))  # Outputs: Invalid input. Please enter a positive integer.\n"}
{"task_id": "Mbpp/101", "completion": "\ndef kth_element(arr, k):\n    if arr is None:\n        raise ValueError(\"Array is None\")\n    if not arr:\n        raise ValueError(\"Array is empty\")\n    if not isinstance(k, int):\n        raise ValueError(\"k must be an integer\")\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return arr[k-1]\n\nprint(kth_element(None, 2))  # Raises ValueError: Array is None\nprint(kth_element([], 2))  # Raises ValueError: Array is empty\nprint(kth_element([12,3,5,7,19], 2))  # Output: 3\nprint(kth_element([12,3,5,7,19], 2.5))  # Raises ValueError: k must be an"}
{"task_id": "Mbpp/102", "completion": "\ndef snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n\nprint(snake_to_camel('python_program'))  # Output: PythonProgram\n"}
{"task_id": "Mbpp/103", "completion": "\ndef eulerian_num(n, m):\n    if n < m:\n        return 0\n    else:\n        return (n - m + 1) * eulerian_num(n - 1, m) + (n - m + 1) * eulerian_num(n - 1, m - 1)\n\nprint(eulerian_num(3, 1))  # Output: 4"}
{"task_id": "Mbpp/104", "completion": "\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nprint(sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))"}
{"task_id": "Mbpp/105", "completion": "\ndef count_true_booleans(lst):\n    if not all(isinstance(i, bool) for i in lst):\n        raise ValueError(\"All elements in the list must be booleans\")\n    return sum(1 for i in lst if i)\n"}
{"task_id": "Mbpp/106", "completion": "\ndef add_lists(lst, tup):\n    return tup + tuple(lst)\n\nprint(add_lists([5, 6, 7], (9, 10)))"}
{"task_id": "Mbpp/108", "completion": "\ndef merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n\nprint(merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]))"}
{"task_id": "Mbpp/109", "completion": "\ndef odd_Equivalent(s, n):\n    binary = list(s)\n    for _ in range(n):\n        binary = binary[1:] + [binary[0]]\n    return sum(1 for c in binary if c == '1')\n\nprint(odd_Equivalent(\"011001\",6))  # Output: 3"}
{"task_id": "Mbpp/111", "completion": "\ndef common_in_nested_lists(nested_lists):\n    common = set()\n    for lst in nested_lists:\n        common = common.union(set(lst))\n    return common\n\nprint(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))"}
{"task_id": "Mbpp/113", "completion": "\ndef check_integer(s):\n    return s == str(int(s))\n\nprint(check_integer(\"python\"))  # False\nprint(check_integer(\"123\"))  # True\n"}
{"task_id": "Mbpp/115", "completion": "\nprint(empty_dit([]))  # This should print: True\nprint(empty_dit([{},{},{}]))  # This should print: False\n"}
{"task_id": "Mbpp/116", "completion": "\ndef tuple_to_int(t):\n    return int(''.join(map(str, t)))\n\nprint(tuple_to_int((1,2,3))) # Output: 123\n"}
{"task_id": "Mbpp/117", "completion": "\ndef list_to_float(lst):\n    return [(float(i[0]), float(i[1])) if isinstance(i[0], (int, float)) and isinstance(i[1], (int, float)) else i for i in lst]\n\nprint(list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]))"}
{"task_id": "Mbpp/118", "completion": "\ndef string_to_list(s):\n    return s.split()\n\nassert string_to_list(\"python programming\")==['python','programming']\n"}
{"task_id": "Mbpp/119", "completion": "\ndef search(arr):\n    for i in range(len(arr)):\n        if arr[i] != arr[i-1]:\n            return arr[i]\n    return -1\n\nprint(search([1,1,2,2,3]))  # Output: 3\n"}
{"task_id": "Mbpp/120", "completion": "\ndef max_product_tuple(lst):\n    max_product = 0\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 72"}
{"task_id": "Mbpp/123", "completion": "\ndef sum_of_proper_divisors(n):\n    sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == (n / i):\n                sum = sum + i\n            else:\n                sum = sum + i + n / i\n    return sum - n\n\ndef amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if sum_of_proper_divisors(sum_of_proper_divisors(i)) == i and sum_of_proper_divisors(i) != i:\n            sum += i\n    return sum\n\nprint(amicable_numbers_sum(999))"}
{"task_id": "Mbpp/124", "completion": "\nimport cmath\n\ndef angle_complex(a, b):\n    return cmath.phase(complex(a, b))\n\nprint(angle_complex(0, 1))"}
{"task_id": "Mbpp/125", "completion": "\ndef find_length(s):\n    max_diff = 0\n    max_length = 0\n    current_diff = 0\n    current_length = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            current_diff += 1\n            current_length += 1\n        else:\n            current_diff -= 1\n            current_length += 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n            max_length = current_length\n    return max_length\n\nprint(find_length(\"11000010001\"))  # Output: 6"}
{"task_id": "Mbpp/126", "completion": "\ndef sum_of_common_divisors(num1, num2):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def sum_of_divisors(n):\n        i = 1\n        sum = 0\n        while i <= n:\n            if n % i == 0:\n                sum += i\n            i += 1\n        return sum\n\n    return sum_of_divisors(gcd(num1, num2)) + sum_of_divisors(num1) + sum_of_divisors(num2) - num1 - num2\n\nprint(sum_of_common_divisors(10, 15))"}
{"task_id": "Mbpp/127", "completion": "\nprint(multiply_int(\"10\", 20)) # Output: Error: Both inputs must be integers.\nprint(multiply_int(10, \"20\")) # Output: Error: Both inputs must be integers.\nprint(multiply_int([10], 20)) # Output: Error: Both inputs must be integers.\n"}
{"task_id": "Mbpp/128", "completion": "\ndef long_words(n, words):\n    return [word for word in words if len(word.lower()) > n]\n\nassert long_words(3,[\"Python\", \"is\", \"a\", \"Programming\", \"Language\"])==['Python','Programming','Language']\n"}
{"task_id": "Mbpp/129", "completion": "\ndef magic_square_test(matrix):\n    # Check if the matrix is a square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # Check if the sum of each row, column and diagonal is the same\n    row_sum = sum(matrix[0])\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != row_sum:\n            return False\n    if matrix[0][0] + matrix[1][1] + matrix[2][2] != row_sum:\n        return False\n    if matrix[0][2] + matrix[1][1] + matrix[2][0] != row_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "completion": "\ndef max_occurrences(lst):\n    from collections import Counter\n    return max(Counter(lst).values())\n"}
{"task_id": "Mbpp/131", "completion": "\ndef reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)\n\nprint(reverse_vowels(\"Python\"))  # Output: \"Ptoyn\"\n"}
{"task_id": "Mbpp/132", "completion": "\nassert tuple_to_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\"\n"}
{"task_id": "Mbpp/133", "completion": "\ndef sum_negativenum(lst):\n    return sum(x for x in lst if x < 0)\n\nprint(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))"}
{"task_id": "Mbpp/135", "completion": "\ndef hexagonal_num(n):\n    return n * (2*n - 1)\n\nprint(hexagonal_num(10))"}
{"task_id": "Mbpp/137", "completion": "\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n\nprint(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))"}
{"task_id": "Mbpp/138", "completion": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0:\n        return False\n    else:\n        for i in range(1, n+1):\n            if n == 2**i:\n                return True\n            elif n < 2**i:\n                return False\n        return False\n\nprint(is_Sum_Of_Powers_Of_Two(10))  # True\nprint(is_Sum_Of_Powers_Of_Two(15))  # False\nprint(is_Sum_Of_Powers_Of_Two(0))  # False\nprint(is_Sum_Of_Powers_Of"}
{"task_id": "Mbpp/139", "completion": "\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "completion": "\ndef extract_singly(lst):\n    return set().union(*lst)\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n"}
{"task_id": "Mbpp/141", "completion": "\narr = [15, 79, 25, 38, 69]\narr.sort(reverse=True)\nprint(arr)  # [79, 69, 38, 25, 15]\n"}
{"task_id": "Mbpp/142", "completion": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\nprint(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))  # Output: 3\n"}
{"task_id": "Mbpp/143", "completion": "\ndef find_lists(t):\n    return len(t)\n\nprint(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))"}
{"task_id": "Mbpp/145", "completion": "\ndef max_Abs_Diff(arr):\n    arr.sort()\n    return abs(arr[-1] - arr[0])\n\nprint(max_Abs_Diff((2,1,5,3)))"}
{"task_id": "Mbpp/160", "completion": "\ndef find_solution(a, b, n):\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"}
{"task_id": "Mbpp/161", "completion": "\ndef remove_elements(main_list, remove_list):\n    return [i for i in main_list if i not in remove_list]\n\nprint(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]))"}
{"task_id": "Mbpp/162", "completion": "\ndef sum_series(n):\n    return n * (n + 1) // 2 - n\n\nassert sum_series(6) == 12\n"}
{"task_id": "Mbpp/164", "completion": "\ndef are_equivalent(a, b):\n    def sum_of_divisors(n):\n        sum = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                sum += i\n        return sum\n\n    return sum_of_divisors(a) == sum_of_divisors(b)"}
{"task_id": "Mbpp/165", "completion": "\ndef count_char_position(s):\n    count = 0\n    s = s.lower()  # Convert to lowercase\n    for char in s:\n        count += 1\n    return count\n\nprint(count_char_position(\"xbcefg\"))  # Output: 6\n"}
{"task_id": "Mbpp/166", "completion": "\ndef find_even_pair(lst):\n    even_count = 0\n    odd"}
{"task_id": "Mbpp/167", "completion": "\ndef next_power_of_2(n):\n    if n < 0:\n        return 1\n    else:\n        return 2 ** (len(repr(n)) - 1)\n"}
{"task_id": "Mbpp/168", "completion": "\ndef flatten(lst):\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.extend(flatten(i))\n        else:\n            result.append(i)\n    return result\n\ndef frequency(lst, num):\n    return flatten(lst).count(num)\n\nprint(frequency([[1,2,3], [4,5,6], [7,8,9]], 4))  # Output: 1\n"}
{"task_id": "Mbpp/170", "completion": "\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\nprint(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10))"}
{"task_id": "Mbpp/171", "completion": "\ndef perimeter_pentagon(sides):\n    return 5 * sides"}
{"task_id": "Mbpp/172", "completion": "\ndef count_occurance(s):\n    return s.lower().count('std')\n\nprint(count_occurance(\"Letstdlenstdporstd\"))  # Output: 3\n"}
{"task_id": "Mbpp/222", "completion": "\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((5, 6, 7, 3, 5, 6.0) ) == True\nassert check_type((5, 6, 7, 3, "}
{"task_id": "Mbpp/223", "completion": "\ndef is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "completion": "\ndef count_Set_Bits(n):\n"}
{"task_id": "Mbpp/226", "completion": "\ndef odd_values_string(s):\n    if len(s) < 2:\n        return ''\n    try:\n        return ''.join(c for c in s if isinstance(c, str) and s.index(c) % 2 == 0)\n    except ValueError:\n        return ''\n"}
{"task_id": "Mbpp/227", "completion": "\nprint(min_of_three(10, 20, 30, 40, 50, 60, 70, 80)) # Output: 10\n"}
{"task_id": "Mbpp/229", "completion": "\ndef re_arrange_array(arr, n):\n    # Separate the array into two lists: negative and positive\n    negative = [i for i in arr[:n] if i < 0]\n    positive = [i for i in arr[:n] if i >= 0]\n\n    # Combine the two lists, preserving the relative order\n    result = negative + positive\n\n    # If the length of the array is greater than n, append the remaining elements\n    if len(arr) > n:\n        result += arr[n:]\n\n    return result\n\nprint(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))"}
{"task_id": "Mbpp/230", "completion": "\ndef replace_blank(s, c):\n    return s.replace(\" \", c).upper()\n\nprint(replace_blank(\"Hello People\",'@'))  # Output: \"HELLO@PEOPLE\"\n"}
{"task_id": "Mbpp/232", "completion": "\ndef largest_n_items(lst, n):\n    return sorted(lst, reverse=True)[:n]\n\nprint(largest_n_items([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))"}
{"task_id": "Mbpp/233", "completion": "\nimport math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nprint(lateralsurface_cylinder(10,5))"}
{"task_id": "Mbpp/234", "completion": "\ntry:\n    print(volume_cube(3))\n    print(volume_cube(4))\n    print(volume_cube(5))\n    print(volume_cube(-3))\n    print(volume_cube('a'))\n    print(volume_cube(1j))\nexcept Exception as e:\n    print(str(e))\n"}
{"task_id": "Mbpp/235", "completion": "\ndef even_bit_set_number(n):\n    return n | (n & -n)\n\nprint(even_bit_set_number(10))  # Output: 14"}
{"task_id": "Mbpp/237", "completion": "\ndef check_occurences(lst):\n    return {t: lst.count(t) for t in set(lst)}\n\nprint(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]))"}
{"task_id": "Mbpp/238", "completion": "\ndef number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]:\n                count += 1\n    return count\n\nprint(number_of_substrings(\"abc\"))"}
{"task_id": "Mbpp/239", "completion": "\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        return m + get_total_number_of_sequences(m-1, n-1)\n\nprint(get_total_number_of_sequences(10, 4))  # Output: 4"}
{"task_id": "Mbpp/240", "completion": "\ndef replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1\n\nprint(replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]))"}
{"task_id": "Mbpp/242", "completion": "\ndef count_charac(s):\n    words = s.split()\n    return [len(word) for word in words]\n\nprint(count_charac(\"python programming\"))\n"}
{"task_id": "Mbpp/244", "completion": "\ndef next_Perfect_Square(n):\n    i = n + 1\n    while True:\n        if i * i == n + 1:\n            return i * i\n        i += 1\n\nprint(next_Perfect_Square(35))"}
{"task_id": "Mbpp/245", "completion": "\ndef max_sum_bitonic_subsequence(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], arr[i])\n    max_val = dp[-1]\n    dp = [0] * n\n    dp[-1] = arr[-1]\n    for i in range(n-2, -1, -1):\n        dp[i] = max(dp[i+1], arr[i])\n    for i in range(1, n-1):\n        max_val = max(max_val, dp[i-1] + dp[i+1] - arr[i])\n    return max_val\n\nprint(max_sum_bitonic_subsequence([1, 15, 51, 45, 33, 100, 12, 18, 9]))  # Output: 194\n"}
{"task_id": "Mbpp/247", "completion": "\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n\nprint(lps(\"TENS FOR TENS\"))"}
{"task_id": "Mbpp/249", "completion": "\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nprint(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9]))"}
{"task_id": "Mbpp/250", "completion": "\ndef count_X(tup, x):\n    return tup.count(x)\n\nprint(count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4))"}
{"task_id": "Mbpp/251", "completion": "\ndef insert_element(lst, element):\n    return [element] + [element] + lst\n\nprint(insert_element(['Red', 'Green', 'Black'], 'c'))"}
{"task_id": "Mbpp/252", "completion": "\ndef convert(complex_num):\n    real, imag = complex_num.real, complex_num.imag\n    magnitude = (real**2 + imag**2)**0.5\n    angle = cmath.phase(complex_num)\n    return (magnitude, angle)\n\nprint(convert(1))  # (1.0, 0.0)\n"}
{"task_id": "Mbpp/253", "completion": "\ndef count_integer(lst):\n    return len([i for i in lst if isinstance(i, (int, float, complex)) or (isinstance(i, str) and i.isdigit()) or (isinstance(i, str) and i[0] == '-')"}
{"task_id": "Mbpp/255", "completion": "\nfrom itertools import product\n\ndef combinations_colors(colors, n):\n    return list(product(colors, repeat=n))\n\nprint(combinations_colors([\"Red\",\"Green\",\"Blue\"],1))"}
{"task_id": "Mbpp/256", "completion": "\nprint(count_Primes_nums(12))  # Output: 5\n"}
{"task_id": "Mbpp/257", "completion": "\nassert swap_numbers('a', 'b') == ('b', 'a')\n"}
{"task_id": "Mbpp/259", "completion": "\ndef maximize_elements(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(max(t1[i], t2[i]))\n    return tuple(result)\n\nprint(maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))))"}
{"task_id": "Mbpp/260", "completion": "\ndef newman_prime(n):\n    def is_prime(num):\n        if num > 1:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n        return False\n\n    def newman_shanks_williams_prime(n):\n        i = 1\n        count = 0\n        while count < n:\n            i += 1\n            if is_prime(i):\n                count += 1\n        return i\n\n    return newman_shanks_williams_prime(n)\n\nprint(newman_prime(3))  # Output: 7\n"}
{"task_id": "Mbpp/261", "completion": "\ndef division_elements(t1, t2):\n    if not t1 or not t2:\n        return None\n    if len(t1) != len(t2):\n        return False\n    return tuple(a / b for a, b in zip(t1, t2) if isinstance(a, (int,"}
{"task_id": "Mbpp/262", "completion": "\nprint(split_two_parts([1,1,2], -3))  # Output: (["}
{"task_id": "Mbpp/264", "completion": "\ndef dog_age(years):\n    if years < 2:\n        return years * 10.5\n    else:\n        return 21 + (years - 2) * 4\n\nprint(dog_age(12))"}
{"task_id": "Mbpp/265", "completion": "\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\nprint(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3))"}
{"task_id": "Mbpp/266", "completion": "\ndef lateralsurface_cube(side_length):\n    if not isinstance(side_length, (int, float)):\n        raise ValueError(\"Side length must be a number.\")\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative.\")\n    if side_length == 0:\n        raise ValueError(\"Side length cannot be zero.\")\n    return 4 * side_length ** 2\n"}
{"task_id": "Mbpp/267", "completion": "\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum\n\nprint(square_Sum(2))  # Output: 10\n"}
{"task_id": "Mbpp/268", "completion": "\ndef find_star_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 7\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 17\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 23\n    else:\n        return None\n\nprint(find_star_num(3))  # Output: 3"}
{"task_id": "Mbpp/269", "completion": "\ndef ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A') == 65\n"}
{"task_id": "Mbpp/270", "completion": "\ndef sum_even_and_even_index(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0)\n\nprint(sum_even_and_even_index([5, 6, 12, 1, 18, 8]))"}
{"task_id": "Mbpp/271", "completion": "\ndef even_Power_Sum(n):\n    return (2*(n*(n+1))//2)**5\n\nprint(even_Power_Sum(2))  # Output: 1056\n"}
{"task_id": "Mbpp/272", "completion": "\ndef rear_extract(lst):\n    return [tup[2] for tup in lst]\n\nprint(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]))  # Output: [21, 20, 19]\n"}
{"task_id": "Mbpp/273", "completion": "\ndef substract_elements(t1, t2):\n    return tuple(a - b for a, b in zip(t1, t2))\n\nprint(substract_elements((10, 4, 5), (2, 5, 18)))"}
{"task_id": "Mbpp/274", "completion": "\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += binomial_coefficient(i, i)\n    return sum\n\ndef binomial_coefficient(n, k):\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\nprint(even_binomial_Coeff_Sum(4))"}
{"task_id": "Mbpp/276", "completion": "\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height\n\nprint(volume_cylinder(10,5))"}
{"task_id": "Mbpp/277", "completion": "\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\nprint(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170))"}
{"task_id": "Mbpp/278", "completion": "\ndef count_first_elements(t):\n    count = 0\n    for i in t:\n        if isinstance(i, tuple):\n            count += count_first_elements(i)\n        else:\n            count += 1\n    return count\n\nprint(count_first_elements((1, 5, 7, (4, 6), 10)))"}
{"task_id": "Mbpp/279", "completion": "\nprint(is_num_decagonal(0))  # Output: Error: n must be a positive integer\n"}
{"task_id": "Mbpp/280", "completion": "\ndef linear_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n"}
{"task_id": "Mbpp/281", "completion": "\ndef all_unique(lst):\n    for element in lst:\n        if not isinstance(element, (int,"}
{"task_id": "Mbpp/282", "completion": "\ndef sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n\nprint(sub_list([1, 2, 3],[4,5,6])) # Output: [-3, -3, -3]\n"}
{"task_id": "Mbpp/283", "completion": "\ndef validate(n):\n    str_n = str(n)\n    for digit in str_n:\n        if int(digit) > int(str_n.count(digit)):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "completion": "\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n\nprint(check_element([\"green\", \"orange\", \"black\", \"white\"],'blue'))"}
{"task_id": "Mbpp/285", "completion": "\ndef text_match_two_three(text):\n    return 'a' in text and (text.count('b') >= 2)\n\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"abbb\")==(True)\nassert text_match_two_three(\"abbbccc\")==(True)\nassert text_match_two_three(\"ab\")==(False)\nassert text_match_two_three(\"abc\")==(False)\nassert text_match_two_three(\"abbbcc\")==(True)\nassert text_match_two_three(\"abbbccc\")==(True)\nassert text_match_two_three(\"abbbcccc\")==(True)\nassert text_match_two_three(\"abbbbb\")==(True)\nassert text_match_two_three(\"abbbbbcc\")==(True)\nassert text_match_two_three(\"abbbbbccc\")==(True)\nassert text_match_two_three(\"abbbbbcccc\")==(True)\nassert text_match_two_three(\"abbbbbccccc\")==(True)\nassert text_match_two_three(\"abbbbbccccc\")==(True)\nassert text_match_two_three(\"abbbbbcccc\")==(True)\nassert text_match_two_three(\"abbbbbccc\")==(True)\nassert text_match_two_three(\"abbbbbcc\")==(True)\nassert text_match_two_three(\"abbbbbc\")==(True)\nassert text_match_two_three(\"abbbbb\")==(True)\nassert text_match_two_three(\"abbb\")==(True)\nassert text_match_two_three(\"ab\")==(False)\nassert text_match_two_three(\"abc\")==(False)\nassert text_match_two_three(\"abcd\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three(\"abcde\")==(False)\nassert text_match_two_three"}
{"task_id": "Mbpp/286", "completion": "\ndef max_sub_array_sum_repeated(arr, k, m):\n    # Initialize the sum of the array\n    total_sum = sum(arr)\n    # Initialize the maximum sum\n    max_sum = float('-inf')\n    # Initialize the current sum\n    curr_sum = 0\n    # Initialize the start index\n    start = 0\n    # Initialize the end index\n    end = 0\n    # Initialize the result\n    result = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # Add the current element to the current sum\n        curr_sum += arr[i]\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            # If the current sum is greater than the total sum, update the total sum\n            if curr_sum > total_sum:\n                total_sum = curr_sum\n            # If the current sum is greater than the result, update the result\n            if curr_sum > result:\n                result = curr_sum\n        # If the current sum is greater than or equal to the total sum, reset the current sum and start index\n        if curr_sum >= total_sum:\n            curr_sum = 0\n            start = i + 1\n        # If the current sum is greater than or equal to the total sum, reset the current sum and start index\n        if curr_sum >= total_sum:\n            curr_sum = 0\n            start = i + 1\n    # Return the result\n    return result\n\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Output: 30\n"}
{"task_id": "Mbpp/287", "completion": "\nprint(square_Sum(4))  # Output: 100\nprint(square_Sum(6))  # Output: 364\n"}
{"task_id": "Mbpp/290", "completion": "\ndef max_length(lst):\n    max_len = 0\n    max_lists = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_lists = [sublist]\n        elif len(sublist) == max_len:\n            max_lists.append(sublist)\n    return max_len, max_lists\n\nprint(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [13, 15, 16]]))  # (3, [(13, 15, 17), (13, 15, 16)])\n"}
{"task_id": "Mbpp/292", "completion": "\ndef find(n1, n2):\n    if n2 == 0:\n        return \"Error: Division by zero is not allowed\"\n    else:\n       "}
{"task_id": "Mbpp/293", "completion": "\nimport math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n\nprint(otherside_rightangle(7,8))"}
{"task_id": "Mbpp/294", "completion": "\ndef max_val(lst):\n    return max(lst)\n\nprint(max_val(['Python', 3, 2, 4, 5, 'version']))"}
{"task_id": "Mbpp/295", "completion": "\nimport math\n\ndef sum_proper_div(n):\n    divisors = set()\n    for i in range(1, math.isqrt(n) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            if n // i != i:  # If i is not a perfect square, add its corresponding divisor\n                divisors.add(n // i)\n    return sum(divisors)\n\nprint(sum_proper_div(8))  # Output: 3\n"}
{"task_id": "Mbpp/296", "completion": "\ndef get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\nprint(get_Inv_Count([1,20,6,4,5]))"}
{"task_id": "Mbpp/297", "completion": "\ndef flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\nprint(flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]))"}
{"task_id": "Mbpp/299", "completion": "\ndef max_aggregate(lst):\n    max_value = max(lst, key=lambda x: x[1])\n    return max_value\n\nprint(max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])"}
{"task_id": "Mbpp/300", "completion": "\nimport math\n\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 * count_binary_seq(n - 1)\n\nprint(count_binary_seq(1))"}
{"task_id": "Mbpp/301", "completion": "\ndef dict_depth(d):\n    depth = 0\n    for k, v in d.items():\n        if not isinstance(k, dict) and not isinstance(v, dict) and not isinstance(v, Iterable) and not isinstance(v, Hashable):\n            continue\n        if isinstance(v, dict):\n            depth = max(depth, 1 + dict_depth(v))\n        else:\n            depth += 1\n    return depth\n"}
{"task_id": "Mbpp/305", "completion": "\ndef start_withp(words):\n    return [word for word in words if word.startswith('p')]\n\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))"}
{"task_id": "Mbpp/306", "completion": "\ndef max_sum_increasing_subseq(arr, i, k, n):\n    dp = [0] * (n + 1)\n    for j in range(i, n):\n        dp[j] = max(dp[j], dp[j - 1] + arr[j])\n    max_sum = dp[i]\n    for j in range(i + 1, n):\n        if arr[j] > arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    return max_sum\n\narr = [1, 101, 2, 3, 100, 4, 5]\ni = 7\nk = 4\nn = len(arr)\nprint(max_sum_increasing_subseq(arr, i, k, n))"}
{"task_id": "Mbpp/308", "completion": "\ndef large_product(list1, list2, n):\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    result = []\n    for i in range(n):\n        result.append(list1[i] * list2[i])\n    return result\n\nprint(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3))"}
{"task_id": "Mbpp/309", "completion": "\ndef test_maximum():\n    assert maximum(5, 10) == 10\n    assert maximum(3, 7) == 7\n"}
{"task_id": "Mbpp/310", "completion": "\ndef string_to_tuple(s):\n    return tuple(s)\n\nprint(string_to_tuple(\"python 3.0\"))"}
{"task_id": "Mbpp/311", "completion": "\ndef set_left_most_unset_bit(n):\n    return n | (n + 1)\n\nprint(set_left_most_unset_bit(10))  # Output: 14"}
{"task_id": "Mbpp/312", "completion": "\nimport math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "completion": "\ndef highest_Power_of_2(n):\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return (1 << (i - 1))\n\nprint(highest_Power_of_2(10))  # Output: 8\n"}
{"task_id": "Mbpp/389", "completion": "\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\nprint(find_lucas(9))  # Output: 76\n"}
{"task_id": "Mbpp/390", "completion": "\ndef add_string(lst, format_str):\n    return [format_str.format(i) for i in lst]\n\nprint(add_string([1,2,3,4],'temp{}'))"}
{"task_id": "Mbpp/391", "completion": "\ndef convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]\n\nprint(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))"}
{"task_id": "Mbpp/392", "completion": "\ndef get_max_sum(n):\n    memo = [0] * (n + 1)\n    memo[0] = 0\n    memo[1] = 1\n    for i in range(2, n + 1):\n        memo[i] = max(memo[i - 1], i, memo[i // 2] + memo[i // 3] + memo[i // 4] + memo[i // 5])\n    return memo[n]\n\nprint(get_max_sum(60))  # Output: 106\n"}
{"task_id": "Mbpp/394", "completion": "\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6, 1, [4])) == False\nassert check_distinct((1, 4, 5, 6, 1, {'a': 1})) == False\n"}
{"task_id": "Mbpp/395", "completion": "\ndef first_non_repeating_character(s):\n    char_dict = {}\n    for char in s:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for i in range(len(s)):\n        if char_dict[s[i]] == 1:\n            return i\n    return None\n\nprint(first_non_repeating_character(\"abcabc\"))"}
{"task_id": "Mbpp/396", "completion": "\ndef check_char(s):\n    if len(s) < 2:\n        return \"Invalid\"\n    elif s[0].lower() == s[-1].lower():\n        return \""}
{"task_id": "Mbpp/397", "completion": "\ndef median_numbers(a, b, c):\n    numbers = [float(a), float(b), float(c)]\n    numbers.sort()\n    if numbers[1] == numbers[0] and numbers[1] == numbers[2]:\n        return (numbers[0] + numbers[1]) / 2.0\n    else:\n        return numbers[1]\n"}
{"task_id": "Mbpp/398", "completion": "\ndef sum_of_digits(num_list):\n    return sum(int(digit) for digit in str(num_list))\n\nprint(sum_of_digits([10,2,56]))  # Output: 14\n"}
{"task_id": "Mbpp/400", "completion": "\ndef extract_freq(lst):\n    s = set()\n    for sub in lst:\n        s.add(tuple(sub))\n    return len(sorted(list(s)))\n\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))  # Output: 4\n"}
{"task_id": "Mbpp/404", "completion": "\nprint(minimum(\"5\", 5))  # Raises ValueError: Both inputs must be numbers\n"}
{"task_id": "Mbpp/405", "completion": "\nassert 1==1\n"}
{"task_id": "Mbpp/406", "completion": "\ndef find_Parity(n):\n    if n == 0:\n        return \"Even\"\n    elif n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(find_Parity(12))  # Even\nprint(find_Parity(13))  # Odd\n"}
{"task_id": "Mbpp/407", "completion": "\ndef rearrange_bigger(n):\n    n = str(n)\n    n = sorted(n, key=lambda x: int(x), reverse=True)\n    if n[0] < n[1]:\n        n[0], n[1] = n[1], n[0]\n    return int(''.join(n))\n\nprint(rearrange_bigger(123))  # Output: 132\n"}
{"task_id": "Mbpp/409", "completion": "\ndef min_product_tuple(lst):\n    if not lst:\n        return None\n    return min(x[0]*x[1] for x in lst if x[0]*x[1] >= 0)\n\nprint(min_product"}
{"task_id": "Mbpp/410", "completion": "\ndef find_min_value(lst):\n    return min(lst)\n\nprint(find_min_value(['Python', 3, 2, 4, 5, 'version']))"}
{"task_id": "Mbpp/412", "completion": "\ndef remove_odd(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\nprint(remove_odd([1,2,3]))\n"}
{"task_id": "Mbpp/413", "completion": "\ndef extract_nth_element(lst, n):\n    return [t[n] for t in lst]\n\nprint(extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0))"}
{"task_id": "Mbpp/414", "completion": "\ndef overlapping(seq1, seq2):\n    seq1 = sorted([str(i) for i in seq1 if isinstance(i, (int, str))])\n    seq2 = sorted([str(i) for i in seq2 if isinstance(i, ("}
{"task_id": "Mbpp/415", "completion": "\ndef max_product(arr):\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_pair = None\n    min_pair = None\n    for num in arr:\n        if num == 0:\n            max_product = min_product = 0\n            max_pair = min_pair = (num, num)\n        else:\n            if num < 0:\n                max_product, max_pair = -min_product, -min_pair\n                min_product = max_product * num\n                min_pair = (min_pair[0] * num, min_pair[1] * num)\n            else:\n                max_product = max(max_product, num * min_product)\n                min_product = min(min_product, num * max_product)\n    return max_pair\n\nprint(max_product([1,2,3,4,7,0,8,4]))  # (7, 8)"}
{"task_id": "Mbpp/418", "completion": "\ndef Find_Max(lst):\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element\n\nprint(Find_Max([['A'],['A','B'],['A','B','C']]))"}
{"task_id": "Mbpp/419", "completion": "\ndef round_and_sum(lst):\n    return round(sum(lst), 0) * len(lst)\n\nprint(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))"}
{"task_id": "Mbpp/420", "completion": "\ndef cube_Sum(n"}
{"task_id": "Mbpp/421", "completion": "\ndef concatenate_tuple(tup, delimiter):\n    return delimiter.join(str(i) for i in tup)\n\nprint(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), \"-\"))"}
{"task_id": "Mbpp/422", "completion": "\ndef find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n\nprint(find_Average_Of_Cube(2))  # Output: 4.5\n"}
{"task_id": "Mbpp/424", "completion": "\ndef extract_rear(t):\n    return [s[-1] for s in t]\n\nprint(extract_rear(('Mers', 'for', 'Vers')))"}
{"task_id": "Mbpp/425", "completion": "\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\nprint(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1))"}
{"task_id": "Mbpp/426", "completion": "\ndef filter_oddnumbers(lst):\n    return [num for num in lst if num % 2 != 0]\n\nprint(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"}
{"task_id": "Mbpp/427", "completion": "\nfrom datetime import datetime\n\ndef change_date_format(date):\n    dt = datetime.strptime(date, \"%Y-%m-%d\")\n    return dt.strftime(\"%d-%m-%Y\")\n\nprint(change_date_format(\"2026-01-02\"))  # Output: 02-01-2026\n"}
{"task_id": "Mbpp/428", "completion": "\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nprint(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))"}
{"task_id": "Mbpp/429", "completion": "\ndef and_tuples(t"}
{"task_id": "Mbpp/430", "completion": "\ndef parabola_directrix(a, h, k):\n    return -a**2 + k\n\nprint(parabola_directrix(5,3,2))"}
{"task_id": "Mbpp/431", "completion": "\ndef common_element(list1, list2):\n    if not list1 and not list2:\n        return False\n    return len(set(list1) & set(list2)) > 0\n"}
{"task_id": "Mbpp/432", "completion": "\ndef median_trapezium(a, b, c, d):\n    # Calculate the perimeter of the trapezium\n    perimeter = a + b + c + d\n\n    # Calculate the median length\n    median_length = perimeter / 2\n\n    return median_length\n\nprint(median_trapezium(15, 25, 35))"}
{"task_id": "Mbpp/433", "completion": "\ndef check_greater(arr"}
{"task_id": "Mbpp/435", "completion": "\ndef last_Digit(n):\n    n = int(n)  # Convert the number to an integer\n    return n % 10\n"}
{"task_id": "Mbpp/436", "completion": "\ndef neg_nos(lst):\n    return [i for i in lst if i < 0]\n\nprint(neg_nos([-1,4,5,-6]))"}
{"task_id": "Mbpp/437", "completion": "\nprint(remove_odd(\"python\\u2665\"))  # Output: \"yhn\"\n"}
{"task_id": "Mbpp/438", "completion": "\ndef count_bidirectional(tuples):\n    count ="}
{"task_id": "Mbpp/439", "completion": "\ndef multiple_to_single(lst):\n    return int(''.join(map(str, lst)))\n\nprint(multiple_to_single([11, 33, 50]))\n"}
{"task_id": "Mbpp/440", "completion": "\ndef find_adverb_position(sentence):\n    adverbs = ['clearly', 'certainly', 'definitely', 'probably', 'possibly', 'surely', 'certainly', 'absolutely', 'undoubtedly', 'necessarily', 'potentially', 'presumably', 'presumptuously', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively', 'presumptively"}
{"task_id": "Mbpp/441", "completion": "\nsurfacearea_cube(5)  # returns 150\nsurfacearea_cube(3.5)  # returns 40.5\nsurfacearea_cube(-5)  # raises ValueError: Input must be a positive number\nsurfacearea_cube(\"hello\")  # raises ValueError: Input must be a number\n"}
{"task_id": "Mbpp/442", "completion": "\nassert positive_count([]) == 0\nassert positive_count([-1, -2, -3]) == 0\nassert positive_count([0, 0, 0]) == 0\nassert positive_count([1, 2, 3]) == 1\nassert positive_count([1, -1, 2, -2, 3, -3]) == 0.5\n"}
{"task_id": "Mbpp/445", "completion": "\ndef index_multiplication(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(tuple(a*b for a, b in zip(t1[i], t2[i])))\n    return tuple(result)\n\nprint(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))))"}
{"task_id": "Mbpp/446", "completion": "\ndef count_Occurrence(tup, lst):\n    count = 0\n    for i in tup:\n        if i in lst:\n            count += 1\n    return count\n\nprint(count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']))"}
{"task_id": "Mbpp/447", "completion": "\ndef cube_nums(lst):\n    return [i**3 for i in lst]\n\nprint(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"}
{"task_id": "Mbpp/448", "completion": "\ndef cal_sum(n):\n    perrin_numbers = [0, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903]\n    return sum(perrin_numbers[:n+1])\n\nprint(cal_sum(9))"}
{"task_id": "Mbpp/450", "completion": "\ndef extract_string(lst, size):\n    return [i for i in lst if len(i) == size]\n\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))"}
{"task_id": "Mbpp/451", "completion": "\ndef remove_whitespaces(s):\n    try:\n        assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    except AssertionError:\n        print(\"The function does not return the expected output.\")\n"}
{"task_id": "Mbpp/453", "completion": "\nimport math\n\ndef sumofFactors(n):\n    if n < 1: return 0\n    sum = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n != i and n // i % 2 == 0:\n                sum += n // i\n        i += 1\n    return sum\n\nprint(sumofFactors(18))  # Output: 26\n"}
{"task_id": "Mbpp/454", "completion": "\ndef text_match_wordz(text):\n    if text:\n        return 'z' in text.lower()\n    else:\n        return False\n\nassert text_match_wordz(\"PythonZ.\")==True\n"}
{"task_id": "Mbpp/455", "completion": "\ndef check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "completion": "\ndef reverse_string_list(lst):\n    return [s[::-1] for s in lst]\n\nprint(reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']))"}
{"task_id": "Mbpp/457", "completion": "\ndef Find_Min(lst):\n    if not lst or not any(isinstance(i, list) for i in lst):\n        return []\n    min_len = min(len(i) for i in lst if isinstance(i, list))\n    return [sublist for sublist in lst if isinstance(sublist, list) and len(sublist) == min_len]\n"}
{"task_id": "Mbpp/458", "completion": "\nprint(rectangle_area(10,"}
{"task_id": "Mbpp/459", "completion": "\ndef remove_uppercase(s):\n    return ''.join(c for c in s.lower() if c.isalpha())\n\nprint(remove_uppercase('cAstyoUrFavoRitETVshoWs'))  # Output: 'cstyoravoitshos'\n"}
{"task_id": "Mbpp/460", "completion": "\ndef test_extract_with_empty_list(self):\n    self.assertEqual(Extract([]), [])\n\ndef test_extract_with_one_sublist(self):\n    self.assertEqual(Extract([[1]]), [1])\n\ndef test_extract_with_sublists_of_different_lengths(self):\n    self.assertEqual(Extract([[1, 2, 3], [4, 5], [6]]), [1, 4, 6])\n"}
{"task_id": "Mbpp/461", "completion": "\nupper_ctr('Python')\n"}
{"task_id": "Mbpp/462", "completion": "\nfrom itertools import chain, combinations\n\ndef combinations_list(lst):\n    return list(chain(*[combinations(lst, i) for i in range(len(lst) + 1)]))\n\nprint(combinations_list(['orange', 'red', 'green', 'blue']))"}
{"task_id": "Mbpp/463", "completion": "\ndef max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n        if current_product == 0:\n            current_product = 1\n    return max_product\n\nprint(max_subarray_product([1, -2, -3, 0, 7, -8, -2]))  # Output: 112\n"}
{"task_id": "Mbpp/465", "completion": "\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n"}
{"task_id": "Mbpp/468", "completion": "\narr.sort()\nmax_product(arr)\n"}
{"task_id": "Mbpp/470", "completion": "\ndef add_pairwise(t):\n    return tuple(a + b for a, b in zip(t, t[1:]))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n"}
{"task_id": "Mbpp/471", "completion": "\ndef find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n\nprint(find_remainder([ 100, 10, 5, 25, 35, 14 ],11))"}
{"task_id": "Mbpp/472", "completion": "\ndef check_Consecutive(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] + 1 != lst[i + 1]:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "completion": "\ndef tuple_intersection(tuples_list):\n    intersection = set()\n    for t in tuples_list:\n        intersection = intersection.union(t)\n    return intersection\n\nprint(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]))"}
{"task_id": "Mbpp/474", "completion": "\ndef replace_char(s, old, new):\n    return s.lower().replace(old, new).upper()\n\nprint(replace_char(\"Polygon\",'y','l'))  # Output: \"pollgon\"\n"}
{"task_id": "Mbpp/475", "completion": "\ndef sort_dict_by_value(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\nprint(sort_dict_by_value({'Math':81, 'Physics':83, 'Chemistry':87}))"}
{"task_id": "Mbpp/476", "completion": "\ndef big_sum(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        if not isinstance(arr[0], (int, float)):\n            return \""}
{"task_id": "Mbpp/477", "completion": "\ndef is_lower(s):\n    return s.lower()\n"}
{"task_id": "Mbpp/478", "completion": "\ndef remove_lowercase(s):\n    return ''.join(c for c in s if c.isupper())\n\nprint(remove_lowercase(\"PYTHon\"))"}
{"task_id": "Mbpp/479", "completion": "\nimport unittest\n\nclass TestFirstDigit(unittest.TestCase):\n\n    def test_positive_integer(self):\n        self.assertEqual(first_Digit(123), 1)\n\n    def test_negative_integer(self):\n        self.assertEqual(first_Digit(-123), 0)\n\n    def test_float(self):\n        self.assertEqual(first_Digit(123.456), 1)\n\n    def test_string(self):\n        self.assertEqual(first_Digit('123'), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"}
{"task_id": "Mbpp/554", "completion": "\ndef split_odd_numbers(lst):\n    return [num for num in lst if num % 2 != 0]\n\nprint(split_odd_numbers([1,2,3,4,5,6]))"}
{"task_id": "Mbpp/555", "completion": "\ndef difference(n):\n    sum_of_cubes = n**2 * (n + 1) ** 2 / 4\n    sum_of_numbers = n * (n + 1) / 2\n    return sum_of_cubes - sum_of_numbers\n\nprint(difference(3))  # Output: 30\n"}
{"task_id": "Mbpp/556", "completion": "\ndef find_Odd_Pair(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\nprint(find_Odd_Pair([5,4,7,2,1],5))"}
{"task_id": "Mbpp/557", "completion": "\ndef toggle_string(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n\nprint(toggle_string(\"Python\"))  # Output: pYTHON\n"}
{"task_id": "Mbpp/558", "completion": "\ndef digit_distance_nums(num1, num2):\n    # convert the numbers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # find the length of the strings\n    len1 = len(str_num1)\n    len2 = len(str_num2)\n    \n    # find the maximum length\n    max_len = max(len1, len2)\n    \n    # pad the shorter string with zeros\n    if len1 < max_len:\n        str_num1 = str_num1.zfill(max_len)\n    elif len2 < max_len:\n        str_num2 = str_num2.zfill(max_len)\n    \n    # calculate the difference between the digits\n    diff = [abs(int(str_num1[i]) - int(str_num2[i])) for i in range(max_len)]\n    \n    # return the sum of the differences\n    return sum(diff)"}
{"task_id": "Mbpp/559", "completion": "\ndef max_sub_array_sum(arr, s):\n    if len(arr) < s:\n        return None\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        if curr_sum > s:\n            curr_sum -= arr[i-s+1]\n    return max_sum\n\nprint(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8))"}
{"task_id": "Mbpp/560", "completion": "\ndef union_elements(t1, t2):\n    return sorted(set(t1 + t2))\n\nprint(union_elements((3, 4, 5, 6),(5, 7, 4, 10)))"}
{"task_id": "Mbpp/562", "completion": "\ndef Find_Max_Length(lst):\n    max_length = 0\n    for element in lst:\n        if isinstance(element, list):\n            sublist_length = Find_Max_Length(element)\n            if sublist_length > max_length:\n                max_length = sublist_length\n        elif isinstance(element, int) or isinstance(element, str):\n            if len(str(element)) > max_length:\n                max_length = len(str(element))\n    return max_length\n\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 1\nprint(Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"}
{"task_id": "Mbpp/563", "completion": "\ndef extract_values(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must"}
{"task_id": "Mbpp/564", "completion": "\ndef count_Pairs(lst, k):\n    n = len(lst)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count // 2\n\nprint(count_Pairs([1,2,1],3))"}
{"task_id": "Mbpp/565", "completion": "\ndef split_string(s):\n    return list(s)\n\nprint(split_string('python'))"}
{"task_id": "Mbpp/566", "completion": "\ndef sum_digits(n):\n    if n < 0:\n        return 0\n    if n < 10:\n        return n\n   "}
{"task_id": "Mbpp/567", "completion": "\ndef issort_list(lst):\n    return lst == sorted(lst, key=len) and len(lst) == len(set(lst)) and all(isinstance(i, str) for i in lst)\n"}
{"task_id": "Mbpp/568", "completion": "\ndef empty_list(n):\n    return [{'empty': 'dictionary'} for _ in range(n)]\n"}
{"task_id": "Mbpp/569", "completion": "\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\nprint(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))"}
{"task_id": "Mbpp/572", "completion": "\ndef two_unique_nums(lst):\n    return list(set(lst))\n\nprint(two_unique_nums([1,2,3,2,3,4,5]))"}
{"task_id": "Mbpp/573", "completion": "\ndef unique_product(lst):\n    unique_lst = list(set(lst))\n    product = 1\n    for num in unique_lst:\n        product *= num\n    return product\n\nprint(unique_product([10, 20, 30, 40, 20, 50, 60, 40]))"}
{"task_id": "Mbpp/574", "completion": "\nimport math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n\nprint(surfacearea_cylinder(10,5))"}
{"task_id": "Mbpp/576", "completion": "\ndef is_Sub_Array(main_list, sub_list):\n    main_list.sort(key=lambda x: str(x) if isinstance(x, (int"}
{"task_id": "Mbpp/577", "completion": "\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n * last_Digit_Factorial(n - 1)) % 10\n\nprint(last_Digit_Factorial(4))  # Output: 4"}
{"task_id": "Mbpp/578", "completion": "\ndef interleave_lists(list1, list2, list3):\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must be the same length\")\n    return [i for sublist in zip(list1, list2, list3) for i in sublist if i is not None]\n\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, "}
{"task_id": "Mbpp/579", "completion": "\ndef find_dissimilar(t1, t2):\n    return tuple(x for x in t1 if x not in t2)\n\nprint(find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)))"}
{"task_id": "Mbpp/580", "completion": "\ndef extract_even(t):\n    result = []\n    for i in t:\n        if isinstance(i, tuple):\n            result.append(extract_even(i))\n        elif i % 2 == 0:\n            result.append(i)\n    return tuple(result)\n\nprint(extract_even((4, 5, (7, 6, (2, 4)), 6, 8)))"}
{"task_id": "Mbpp/581", "completion": "\ndef surface_Area(base_edge, height):\n    return base_edge**2 + 4 * (base_edge**2) * (height**2) / 3\n\nprint(surface_Area(3,4))"}
{"task_id": "Mbpp/582", "completion": "\nassert is_empty({10}) == False\n"}
{"task_id": "Mbpp/583", "completion": "\ndef catalan_number(n):\n    catalan = [0 for _ in range(n+1)]\n    catalan[0] = 1\n    for i in range(1, n+1):\n        catalan[i] = sum(catalan[j] * catalan[i-j-1] for j in range(i))\n    return catalan[n]\n\nprint(catalan_number(10))  # Output: 16796"}
{"task_id": "Mbpp/585", "completion": "\ndef expensive_items(data, n):\n    return sorted(data, key=lambda x: x['price'], reverse=True)[:n]\n"}
{"task_id": "Mbpp/586", "completion": "\ndef split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\nprint(split_Arr([12,10,5,6,52,36],2))"}
{"task_id": "Mbpp/587", "completion": "\nassert list_tuple([1, 2, 3, 4, 5])==(1, 2, 3, 4, 5)\nassert list_tuple([])==()\n"}
{"task_id": "Mbpp/588", "completion": "\ndef big_diff(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        max_val = min_val = lst[0]\n        for num in lst"}
{"task_id": "Mbpp/589", "completion": "\ndef perfect_squares(start, end):\n    return [i**2 for i in range(start, end+1) if i**2 <= end]\n\nprint(perfect_squares(1,30))"}
{"task_id": "Mbpp/590", "completion": "\ndef polar_rect(r, theta):\n    return (r * math.cos(theta), r * math.sin(theta))\n\nimport math\nprint(polar_rect(3, 4))"}
{"task_id": "Mbpp/591", "completion": "\ndef swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\nprint(swap_List([12, 35, 9, 56, 24]))"}
{"task_id": "Mbpp/592", "completion": "\ndef sum_Of_product(n):\n    result = 0\n    for i in range(1, n+1):\n        result += binomial_coefficient(i, i)\n    return result\n\ndef binomial_coefficient(n, k):\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\nprint(sum_Of_product(3))  # Output: 15"}
{"task_id": "Mbpp/593", "completion": "\ndef removezero_ip(ip):\n    return '.'.join(str(int(x)) for x in ip.split('.'))\n\nprint(removezero_ip(\"216.08.094.196\"))"}
{"task_id": "Mbpp/594", "completion": "\ndef diff_even_odd(lst):\n    for i, x in enumerate(lst):\n        if x % 2 == 0:\n            even = x\n            break\n    for i, x in enumerate(lst):\n        if x % 2 != 0:\n            odd = x\n            break\n    return even - odd\n"}
{"task_id": "Mbpp/595", "completion": "\ndef min_Swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            for j in range(i+1, len(s2)):\n                if s1[i] == s2[j]:\n                    s1 = s1[:i] + s2[j] + s1[i+1:j] + s1[i] + s1[j+1:]\n                    s2 = s2[:j] + s1[i] + s2[j+1:]\n                    count += 1\n                    break\n    return count\n\nprint(min_Swaps(\"1101\",\"1110\"))  # Output: 1"}
{"task_id": "Mbpp/596", "completion": "\nimport sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "completion": "\ndef find_kth(arr1, arr2, k):\n    merged = arr1 + arr2\n    merged.sort()\n    return merged[k-1]\n\nprint(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5))  # Output: 6"}
{"task_id": "Mbpp/598", "completion": "\ndef armstrong_number(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum\n\nassert armstrong_number(153)==True\n"}
{"task_id": "Mbpp/599", "completion": "\ndef sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n\nprint(sum_average(10))"}
{"task_id": "Mbpp/600", "completion": "\ndef is_Even(n):\n    return n % 2 == 0\n\nprint(is_Even(1))  # prints: False\nprint(is_Even(2))  # prints: True\nprint(is_Even(3))  # prints: False\nprint(is_Even(4))  # prints: True\n"}
{"task_id": "Mbpp/602", "completion": "\ndef first_repeated_char(s):\n    char_map = {}\n    for i in range(len(s)):\n        if s[i] in char_map:\n            return s[i]\n        else:\n            char_map[s[i]] = i\n    return None\n\nprint(first_repeated_char(\"abcabc\"))  # Output: a"}
{"task_id": "Mbpp/603", "completion": "\ndef get_lucid(n):\n    lucids = [i for i in range(1, n+1) if all(int(str(i).count(digit) % 2 == 0 for digit in str(i))]\n    return lucids\n\nprint(get_lucid(10))  # [1, 2, 3, 5, 7]\n"}
{"task_id": "Mbpp/604", "completion": "\ndef reverse_words(s):\n    return ' '.join(s.split()[::-1])\n\nprint(reverse_words(\"python program\"))"}
{"task_id": "Mbpp/605", "completion": "\ndef prime_num(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif"}
{"task_id": "Mbpp/606", "completion": "\nradians = math.radians(90)\n"}
{"task_id": "Mbpp/607", "completion": "\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\nprint(find_literals('The quick brown fox jumps over the lazy dog.', 'fox'))"}
{"task_id": "Mbpp/608", "completion": "\ndef bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n))\n\nprint(bell_number(2))  # Output: 2\n"}
{"task_id": "Mbpp/610", "completion": "\ndef remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\nprint(remove_kth_element([1,1,2,3,4,4,5,1],3))"}
{"task_id": "Mbpp/611", "completion": "\ndef max_of_nth(matrix, n):\n    if not matrix:\n        raise ValueError(\"Matrix is empty\")\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"n is not a valid index for the matrix\")\n    return max([row[n] for row in matrix])\n"}
{"task_id": "Mbpp/612", "completion": "\ndef merge(lst):\n    first = [x[0] for x in lst]\n    second = [x[1] for x in lst]\n    return [first, second]\n\nprint(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]))"}
{"task_id": "Mbpp/614", "completion": "\nprint(sum_elements_in_tuples([(1, 3), (5, 6, 7), (2, 6)]))  # Output: 30\n"}
{"task_id": "Mbpp/615", "completion": "\ndef average_tuple(tuples):\n    return [sum(t)/len(t) for t in tuples]\n\nprint(average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))))"}
{"task_id": "Mbpp/616", "completion": "\ndef tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))\n\nprint(tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)))"}
{"task_id": "Mbpp/618", "completion": "\ndef div_list(list1, list2):\n    return [i/j for i, j in zip(list1, list2)]\n\nprint(div_list([4,5,6],[1, 2, 3]))"}
{"task_id": "Mbpp/619", "completion": "\ndef move_num(s):\n    nums = '0123456789'\n    letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    for char in s:\n        if char in letters:\n            result += char\n        else:\n            result += '0' * (len(letters) - len(nums) + nums.index(char))\n    return result\n\nprint(move_num('I1love143you55three3000thousand'))  # 'Iloveyouthreethousand1143553000'\n"}
{"task_id": "Mbpp/620", "completion": "\ndef largest_subset(lst):\n    n = len(lst)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] % lst[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\nprint(largest_subset([1, 3, 6, 13, 17, 18]))"}
{"task_id": "Mbpp/622", "completion": "\ndef get_median(list1, list2, size):\n    merged = sorted(list1 + list2)\n    return merged[size // 2] if size % 2 == 1 else (merged[size // 2 - 1] + merged[size // 2]) / 2\n\nprint(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))  # 16.0\n"}
{"task_id": "Mbpp/623", "completion": "\ndef nth_nums(lst, n):\n    return [i**n for i in lst]\n\nprint(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2))"}
{"task_id": "Mbpp/624", "completion": "\ndef convert_to_uppercase(s):\n    return s.upper()\n\nassert convert_to_uppercase(\"person\") == \"PERSON\"\n"}
{"task_id": "Mbpp/626", "completion": "\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 0.5 * radius * radius * math.sqrt(4 * radius * radius - 0.25)\n\nprint(triangle_area(5))"}
{"task_id": "Mbpp/628", "completion": "\ndef replace_spaces(s):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i"}
{"task_id": "Mbpp/629", "completion": "\nimport unittest\n\nclass TestFindEvenNumbers(unittest.TestCase):\n    def test_find_even_numbers(self):\n        self.assertEqual(find_even_numbers([1,2,3,4,5]), [2,4])\n\nif __name__ == '__main__':\n    unittest.main()\n"}
{"task_id": "Mbpp/630", "completion": "\ndef get_coordinates(coord, grid_size):\n    x, y = coord"}
{"task_id": "Mbpp/631", "completion": "\ndef replace_spaces(string):\n    return string.replace(' ', '_').replace('_', ' ')\n\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n"}
{"task_id": "Mbpp/632", "completion": "\ndef move_zeroes(nums):\n    zero_count = nums.count(0)\n    nums = [i for i in nums if i != 0]\n    nums.extend([0]*zero_count)\n    return nums\n\nprint(move_zeroes([1,0,2,0,3,4]))"}
{"task_id": "Mbpp/633", "completion": "\ndef pair_xor_Sum(lst, target):\n    xor_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            xor_sum ^= lst[i] ^ lst[j]\n    return xor_sum ^ target\n\nprint(pair_xor_Sum([5,9,7,6],4))"}
{"task_id": "Mbpp/635", "completion": "\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\narr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nheap_sort(arr)\nprint(arr)"}
{"task_id": "Mbpp/637", "completion": "\ndef noprofit_noloss(amount, cost):\n    return amount == cost\n\nprint(noprofit_noloss(1500,1200))"}
{"task_id": "Mbpp/638", "completion": "\ndef wind_chill(velocity, temperature):\n    if velocity < 1 or temperature < -58:\n        return \"Invalid input\"\n    else:\n        return round(35.74 + 0.6215*temperature - 35.75*velocity**0.16 + 0.4275*temperature*velocity**0.16)\n\nprint(wind_chill(120,35))"}
{"task_id": "Mbpp/639", "completion": "\ndef sum_length_of_names(names):\n    return sum(len(name) for name in names if name[0].isupper())\n\nassert sum_length_of_names(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n"}
{"task_id": "Mbpp/640", "completion": "\nimport re\n\ndef remove_parenthesis(s):\n    return re.sub(r'\\([^)]*\\)', '', s)\n\nprint(remove_parenthesis(\"python (chrome) (test)\"))  # Output: python test\n"}
{"task_id": "Mbpp/641", "completion": "\nprint(is_nonagonal(10))  # Output: 325\nprint(is_nonagonal(-1))  # Raises ValueError: Input must be a positive integer\nprint(is_nonagonal(0))  # Raises ValueError: Input must be a positive integer\nprint(is_nonagonal(1.5))  # Raises ValueError: Input must be a positive integer\n"}
{"task_id": "Mbpp/643", "completion": "\ndef text_match_wordz_middle(text):\n    if not isinstance(text, str) or not text.isalpha():\n        raise ValueError(\"Input must be a string of characters that does not contain any non-alphabetic characters and"}
{"task_id": "Mbpp/644", "completion": "\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\nprint(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4))"}
{"task_id": "Mbpp/720", "completion": "\ndef add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n\nprint(add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}))"}
{"task_id": "Mbpp/721", "completion": "\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0]*N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(matrix[i][j] + dp[i-1][j], matrix[i][j] + dp[i][j-1])\n    max_sum = dp[-1][-1]\n    max_avg = max_sum / (N*N)\n    return max_avg"}
{"task_id": "Mbpp/722", "completion": "\ndef filter_data(data, min_height, min_weight):\n    return {k: v for k, v in data.items() if v[0] > min_height and v[1] > min_weight}\n\ndata = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nprint(filter_data(data, 6.0, 70))"}
{"task_id": "Mbpp/723", "completion": "\ndef count_same_pair(list1, list2):\n    return sum(1 for i in range(len(list1)) if list1[i] == list2[i])\n\nprint(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]))"}
{"task_id": "Mbpp/724", "completion": "\ndef power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n\nprint(power_base_sum(2, 100))  # Output: 115\n"}
{"task_id": "Mbpp/725", "completion": "\ndef extract_quotation(s):\n    return [word for word in s.split(' ') if word[0] == '\"' and word[-1] == '\"']\n\nprint(extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'))"}
{"task_id": "Mbpp/726", "completion": "\ndef multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n"}
{"task_id": "Mbpp/728", "completion": "\ndef sum_list(a, b):\n    return list(map(lambda x, y: x + y, a, b))\n"}
{"task_id": "Mbpp/730", "completion": "\ndef remove_consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result\n\nprint(remove_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]))"}
{"task_id": "Mbpp/731", "completion": "\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n\nprint(lateralsurface_cone(5,12))"}
{"task_id": "Mbpp/732", "completion": "\ndef replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n\nprint(replace_specialchar('Python language, Programming language.'))"}
{"task_id": "Mbpp/733", "completion": "\ndef find_all_occurrences_unsorted(arr, num):\n    arr.sort()\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == num:\n            indices.append(i)\n    return indices\n\nprint(find_all_occurrences_unsorted([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # [1, 2, 3]\n"}
{"task_id": "Mbpp/734", "completion": "\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_of_products = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            sum_of_products += arr[i] * arr[j]\n    return sum_of_products\n\nprint(sum_Of_Subarray_Prod([1,2,3]))  # Output: 20"}
{"task_id": "Mbpp/735", "completion": "\ndef toggle_middle_bits(n):\n    # Get the first and last bit\n    first_bit = n & 1\n    last_bit = n & 2\n\n    # Remove the first and last bit\n    n = n & 3\n\n    # Toggle the middle bits\n    n = n | 2\n\n    # Add the first and last bit back\n    n = n | first_bit\n    n = n | last_bit\n\n    return n\n\nprint(toggle_middle_bits(9))  # Output: 15"}
{"task_id": "Mbpp/736", "completion": "\ndef left_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] > val:\n            return i\n    return len(arr)\n\nprint(left_insertion([1,2,4,5],6))  # Output: 4"}
{"task_id": "Mbpp/737", "completion": "\nimport re\n\ndef check_str(s):\n    if re.match('^[aeiouAEIOU]', s):\n        return True\n    else:\n        return False\n\nprint(check_str(\"annie\"))"}
{"task_id": "Mbpp/739", "completion": "\ndef find_Index(n):\n    i = 1\n    while True:\n        t = i * (i + 1) // 2\n        if len(str(t)) == n:\n            return i\n        i += 1\n\nprint(find_Index(2))  # Output: 4"}
{"task_id": "Mbpp/740", "completion": "\ndef tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}\n\nprint(tuple_to_dict((1, 5, 7, 10, 13, 5)))"}
{"task_id": "Mbpp/741", "completion": "\ndef all_Characters_Same(s):\n    if not s:\n        return True\n    return len(set(s)) == 1\n"}
{"task_id": "Mbpp/742", "completion": "\nimport math\n\ndef area_tetrahedron(a, b, c, d):\n    # Calculate the semi-perimeter of the base\n    s = (a + b + c + d) / 2\n\n    # Calculate the area of the base\n    base_area = math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d))\n\n    # Calculate the height of the tetrahedron\n    height = math.sqrt((a - d) ** 2 + (b - c) ** 2)\n\n    # Calculate the area of the tetrahedron\n    area = base_area * height / 2\n\n    return area\n\nprint(area_tetrahedron(3, 4, 5, 6))"}
{"task_id": "Mbpp/743", "completion": "\ndef rotate_right(lst, k):\n    n = len(lst)\n    k = k % n\n    return lst[-k:] + lst[:k]\n\nprint(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3))"}
{"task_id": "Mbpp/744", "completion": "\ndef check_none(t):\n    for i in t:\n        if i is not None:\n"}
{"task_id": "Mbpp/745", "completion": "\ndef divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(i % int(digit) == 0 for digit in str(i))]\n\nprint(divisible_by_digits(1,22))"}
{"task_id": "Mbpp/746", "completion": "\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360) * math.pi * radius**2\n\nprint(sector_area(4,45))"}
{"task_id": "Mbpp/748", "completion": "\ndef capital_words_spaces(s):\n    return ' '.join(word[0].upper() + word[1:] for word in s.split())\n\nprint(capital_words_spaces(\"Python\"))"}
{"task_id": "Mbpp/749", "completion": "\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))\n"}
{"task_id": "Mbpp/750", "completion": "\ndef add_tuple(lst, tup):\n    return sum(lst, list(tup))\n\nprint(add_tuple([1, 2, 3], (4, 5)))  # This will print 10\n"}
{"task_id": "Mbpp/751", "completion": "\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        if i*2 + 1 < n and arr[i] > arr[i*2 + 1]:\n            return False\n        if i*2 + 2 < n and arr[i] > arr[i*2 + 2]:\n            return False\n    return True\n\nprint(check_min_heap([1, 2, 3, 4, 5, 6]))  # True\nprint(check_min_heap([1, 2, 3, 4, 5, 6, 7]))  # False"}
{"task_id": "Mbpp/752", "completion": "\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\nprint(jacobsthal_num(5))  # Output: 11\n"}
{"task_id": "Mbpp/753", "completion": "\ndef min_k(records, k):\n    # Sort the list of tuples based on the second element of the tuple\n    records.sort(key=lambda x: x[1])\n    # Return the first k elements\n    return records[:k]\n\n# Test cases\nprint(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2))  # [('Akash', 2), ('Akshat', 4)]\nprint(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 3))  # [('Akash', 2), ('Akshat', 4), ('Manjeet', 10)]\nprint(min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 1))  # [('Akash', 2)]\n"}
{"task_id": "Mbpp/754", "completion": "\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\nprint(extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])) # [1, 7]\n"}
{"task_id": "Mbpp/755", "completion": "\ndef second_smallest(numbers):\n    first, second = float('inf'), float('inf')\n    for num in numbers:\n        if num <= first:\n            first, second = num, first\n        elif num < second:\n            second = num\n    return second\n\nprint(second_smallest([1, 2, -8, -2, 0, -2])) # -2"}
{"task_id": "Mbpp/757", "completion": "\ndef count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count\n\nprint(count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])) # Output: 2"}
{"task_id": "Mbpp/758", "completion": "\ndef count_sublists(lst):\n    return {tuple(sorted(sublist)): lst.count(sublist) for sublist in lst}\n\nprint(count_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]))"}
{"task_id": "Mbpp/759", "completion": "\ndef is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\nprint(is_decimal('123.11'))  # True\nprint(is_decimal('123.111'))  # True\nprint(is_decimal('123.1111'))  # True\nprint(is_decimal('123.11111'))  # True\nprint(is_decimal('123.111111'))  # True\nprint(is_decimal('123.1111111'))  # True\nprint(is_decimal('123.11111111'))  # True\nprint(is_decimal('123.111111111'))  # True\nprint(is_decimal('123.1111111111'))  # True\nprint(is_decimal('123.11111111111'))  # True\nprint(is_decimal('123.111111111111'))  # True\nprint(is_decimal('123.1111111111111'))  # True\nprint(is_decimal('123.11111111111111'))  # True\nprint(is_decimal('123.111111111111111'))  # True\nprint(is_decimal('123.1111111111111111'))  # True\nprint(is_decimal('123.11111111111111111'))  # True\nprint(is_decimal('123.111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.1111111111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.11111111111111111111111111111111111111111111111111'))  # True\nprint(is_decimal('123.111111111111111111111111111111111111111"}
{"task_id": "Mbpp/760", "completion": "\ndef unique_Element(lst):\n    return len(lst) == len(set(lst))\n\nprint(unique_Element([1,1,1])) # True\nprint(unique_Element([1,2,3])) # False\n"}
{"task_id": "Mbpp/762", "completion": "\ndef check_monthnumber_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "completion": "\ndef find_min_diff(arr, target):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n    return min_diff\n\nprint(find_min_diff((1,5,3,19,18,25),6))"}
{"task_id": "Mbpp/764", "completion": "\ndef number_ctr(s):\n    return len(s) - len(s.translate(str.maketrans('', '', string.digits)))\n\nprint(number_ctr('program2bedone'))  # Output: 1\n"}
{"task_id": "Mbpp/765", "completion": "\ndef is_polite(n):\n    def is_prime(num):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def is_polite_number(num):\n        for i in range(2, num):\n            if is_prime(i) and is_prime(num - i):\n                return True\n        return False\n\n    return is_polite_number(n)\n\nprint(is_polite(7))  # Returns: True"}
{"task_id": "Mbpp/766", "completion": "\ndef pair_wise(lst):\n    if not lst or len(lst) < 2:\n        return []\n    else:\n        return [(lst[i], lst[i+1]) for i in"}
{"task_id": "Mbpp/767", "completion": "\ndef get_pairs_count(lst, sum):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count\n\nprint(get_pairs_count([1,1,1,1],2))"}
{"task_id": "Mbpp/769", "completion": "\ndef diff(list1, list2):\n    return [i for i in list1 if i not in list2]\n\nprint(diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))"}
{"task_id": "Mbpp/770", "completion": "\ndef odd_num_sum(n):\n    if n < 1:\n        return 0\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n"}
{"task_id": "Mbpp/771", "completion": "\ndef check_expression(expression):\n    stack = []\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return len(stack) == 0\n\nprint(check_expression(\"{()}[{}]\"))  # True\n"}
{"task_id": "Mbpp/772", "completion": "\ndef remove_length(s, k):\n    words = s.split()\n    return ' '.join(word for word in words if len(word) != k)\n\nprint(remove_length('The person is most value tet', 3))"}
{"task_id": "Mbpp/773", "completion": "\ndef occurance_substring(main_string, sub_string):\n    if sub_string in main_string:\n        return sub_string, main_string.index(sub_string), main_string.index(sub_string) + len(sub_string)\n    else:\n        return None\n\nprint(occurance_substring('python programming, python language','python'))"}
{"task_id": "Mbpp/775", "completion": "\ndef odd_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "completion": "\ndef find_sum(lst):\n    if all(isinstance(i, (int, float)) for i in lst):\n        unique_elements = set(lst)\n        return sum(unique_elements)\n    else:\n        return \"Error: List contains non-numeric elements\"\n"}
{"task_id": "Mbpp/778", "completion": "\ndef pack_consecutive_duplicates(lst):\n    result = []\n    temp = []\n    for i in lst:\n        if i != lst[0]:\n            temp.append(i)\n        else:\n            result.append(temp)\n            temp = []\n    result.append(temp)\n    return result\n\nprint(pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))"}
{"task_id": "Mbpp/780", "completion": "\nfrom itertools import combinations\n\ndef find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result\n\nprint(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])"}
{"task_id": "Mbpp/781", "completion": "\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef check_even_divisors(n):\n    return count_divisors(n) % 2 == 0\n\nassert check_even_divisors(10)"}
{"task_id": "Mbpp/782", "completion": "\ndef odd_length_sum(arr):\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if (j-i) % 2 != 0:\n                total += sum(arr[i:j])\n    return total\n\nprint(odd_length_sum([1,2,4])) # 14"}
{"task_id": "Mbpp/783", "completion": "\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_color, min_color, diff = max(r, g, b), min(r, g, b), max(r, g, b) - min(r, g, b)\n    h, s, v = 0, 0, v = max_color\n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n        s = diff / max_color\n    elif max_color == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n        s = diff / max_color\n    elif max_color == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n        s = diff / max_color\n    if min_color == 0:\n        s = 0\n    return h, s, v\n\nprint(rgb_to_hsv(255, 255, 255))  # (0, 0.0, 1.0)"}
{"task_id": "Mbpp/784", "completion": "\ndef mul_even_odd(lst):\n    product = 1\n    even = 1\n    for i in lst:\n        if i % 2 == 0:\n            even *= i\n        else:\n            product *= i\n    return even * product\n"}
{"task_id": "Mbpp/785", "completion": "\ndef tuple_str_int(s):\n    return tuple(int(i) for i in s[1:-1].split(','))\n\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n"}
{"task_id": "Mbpp/786", "completion": "\ndef right_insertion(arr, val):\n    for i in range(len(arr)):\n        if arr[i] > val:\n            return i\n    return len(arr)\n\nprint(right_insertion([1,2,4,5],6))"}
{"task_id": "Mbpp/787", "completion": "\ndef text_match_three(text):\n    return 'abbb' in text\n\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/788", "completion": "\ndef new_tuple(string, list):\n    return tuple(string) + tuple(list)\n\nprint(new_tuple([\"WEB\", \"is\"], \"best\"))"}
{"task_id": "Mbpp/790", "completion": "\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "completion": "\ndef remove_nested(tup):\n    new_tup = ()\n    for i in tup:\n        if isinstance(i, tuple):\n            new_tup += remove_nested(i)\n        else:\n            new_tup += (i,)\n    return new_tup\n\nprint(remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10))"}
{"task_id": "Mbpp/792", "completion": "\ndef count_list(lst):\n    return len(lst)\n\nprint(count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]))"}
{"task_id": "Mbpp/793", "completion": "\ndef last(array, element):\n    array = [x.lower() for x in array]\n    if element.islower"}
{"task_id": "Mbpp/794", "completion": "\nimport unittest\n\nclass TestTextStartAEndB(unittest.TestCase):\n\n    def test_text_starta_endb(self):\n        self.assertTrue(text_starta_endb(\"aabbbb\"))\n        self.assertFalse(text_starta_endb(\"abc\"))\n        self.assertFalse(text_starta_endb(\"aabb\"))\n\nif __name__ == \"__main__\":\n    unittest.main()\n"}
{"task_id": "Mbpp/796", "completion": "\ndef sum_dict_items(dictionary):\n    return sum(v for v in dictionary.values() if isinstance(v, (int, float)))\n\nassert sum_dict_items({'a': 100, 'b':200, 'c':300}) == 600\nassert sum_dict_items({'a': '100', 'b':200"}
{"task_id": "Mbpp/797", "completion": "\ndef sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)\n\nprint(sum_in_range(2,5))  # Output: 8\n"}
{"task_id": "Mbpp/798", "completion": "\ndef sum_array(arr):\n    result = sum(arr)\n    if result != 6:\n        raise ValueError(f\"The sum of the array is not correct. Expected: 6, but got: {result}\")\n    return result\n"}
{"task_id": "Mbpp/799", "completion": "\ndef left_rotate(n, d):\n    return (n << d) % (1 << 32)\n\nprint(left_rotate(16,2))  # Output: 64"}
{"task_id": "Mbpp/800", "completion": "\nprint(remove_all_spaces('   Multiple   Spaces   '))  # Output: 'MultipleSpaces'\n"}
{"task_id": "Mbpp/801", "completion": "\ndef test_three_equal(a, b,"}
{"task_id": "Mbpp/803", "completion": "\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    else:\n        x = n\n        while x * x > n:\n            x = (x + n // x) // 2\n        return x * x == n\n\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "completion": "\ndef is_product_even(lst):\n    if not lst:\n        return True\n    product = 1\n    for num in flatten(lst):\n        if not isinstance(num, (int, float)):\n            return False\n        if num == 0:\n            return True\n        product *= num\n    return product % 2 == 0\n\ndef flatten(lst):\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.extend(flatten(i))\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "Mbpp/805", "completion": "\ndef max_sum_list(lst):\n    max_sum = max(sum(sublist) for sublist in lst)\n    return [sublist for sublist in lst if sum(sublist) == max_sum]\n\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n"}
{"task_id": "Mbpp/806", "completion": "\ndef max_run_uppercase(s):\n    if not s:\n        return 0\n    s = s.upper()\n    max_length = 0\n    current_length = 0\n    for char in s:\n        if char.isupper():\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n    if current_length > max_length:\n        max_length = current_length\n    if all(char.islower() for char in s):\n        return 0\n    return max_length\n"}
{"task_id": "Mbpp/807", "completion": "\nprint(first_odd(['1', '3', '5']))  # Output: 1\n"}
{"task_id": "Mbpp/808", "completion": "\ndef check_K(tup, k):\n    return k in tup\n\nprint(check_K((10, 4, 5, 6, 8), 6))"}
{"task_id": "Mbpp/809", "completion": "\ndef check_smaller(t1, t2):\n    if len(t1) != len(t2):\n        return False\n    return all(x < y for x, y in zip(t1, t2[::-1]))\n"}
