{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                group += char\n                stack.pop()\n                if not stack:\n                    result.append(group)\n                    group = ''\n    return result"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    import math\n    if not isinstance(number, (int, float)):\n        raise ValueError(\"Input must be a number\")\n    if number == float('inf') or number == float('-inf') or math.isnan(number):\n       "}
{"task_id": "HumanEval/3", "completion": "\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "\ndef intersperse(numbers: List[int], delimeter: int) -> None:\n    numbers = [delimeter] + numbers + [delimeter]\n"}
{"task_id": "HumanEval/6", "completion": "\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    paren_string = paren_string.split()\n    result = []\n    for group in paren_string:\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n        result.append(level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return sorted([s for s in strings if substring in s])\n"}
{"task_id": "HumanEval/8", "completion": "\nfrom typing import List, Tuple\nfrom functools import reduce\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers) if len(numbers) > 1 else numbers[0])\n"}
{"task_id": "HumanEval/9", "completion": "\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('cat'))  # 'catac'\nprint(make_palindrome('cata'))  # 'catac'\n"}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n# Test cases\nprint(string_xor('010', '110'))  # Output: '100'\nprint(string_xor('1010', '1010'))  # Output: '000'\nprint(string_xor('1111', '0000'))  # Output: '1111'\n"}
{"task_id": "HumanEval/12", "completion": "\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\nprint(greatest_common_divisor(3, 5))  # Output: 1\nprint(greatest_common_divisor(25, 15))  # Output: 5\n"}
{"task_id": "HumanEval/14", "completion": "\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n > 10**6:  # assuming maximum string length is 10**6 characters\n        raise ValueError(\"n is too large, resulting string would be too long\")\n    return ' '.join(map(str, range(n+1)))\n"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nprint(count_distinct_characters('xyzXYZ'))\nprint(count_distinct_characters('Jerry'))"}
{"task_id": "HumanEval/17", "completion": "\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = [4, 2, 1]  # beats for whole, half, quarter notes\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(beats[0])\n        elif note == 'o|':\n            result.append(beats[1])\n        elif note == '.|':\n            result.append(beats[2])\n    return result"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "\ndef sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x[:-1]))\n    return ' '.join(numbers)\n\nprint(sort_numbers('three one five'))"}
{"task_id": "HumanEval/20", "completion": "\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\npip install doctest\n"}
{"task_id": "HumanEval/24", "completion": "\nprint(largest_divisor(2))  # Output: 2\n"}
{"task_id": "HumanEval/25", "completion": "\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "\nprint(flip_case('Hello'))  # Output: 'hELLO'\nprint(flip_case('WORLD'))  # Output: 'wORLD'\nprint(flip_case('Python'))  # Output: 'pYTHON'\n"}
{"task_id": "HumanEval/28", "completion": "\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(s for s in strings if isinstance(s, str))\n"}
{"task_id": "HumanEval/29", "completion": "\n[]\n['abc', 'array']\n"}
{"task_id": "HumanEval/30", "completion": "\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 5.0, 3.0, -5.0, 2.0, -3.0, 3.0, 9.0, 0.0, 123.0, 1.0, -10.0, 'a', 'b',"}
{"task_id": "HumanEval/31", "completion": "\nif n % 2 == 0 or n % 3 == 0:\n    return False\n"}
{"task_id": "HumanEval/32", "completion": "\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"Invalid input\")\n\n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    def derivative(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n\n    def newton_method(x):\n        return x - poly(x) / derivative(x)\n\n    return round(newton_method(0), 2)"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Create a new list to store the values at the indices divisible by 3\n    third_indices = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the values at the indices divisible by 3\n    third_indices.sort()\n    # Create a new list to store the final result\n    result = []\n    # Iterate over the original list\n    for i in range(len(l)):\n        # If the index is divisible by 3, add the sorted value\n        if i % 3 == 0:\n            result.append(third_indices.pop(0))\n        # If the index is not divisible by 3, add the original value\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list):\n    return sorted(set(l))\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "\nprint(max_element([1, 2, 3]))  # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123\n"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\ndef sort_even(l: list):\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l"}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n    return b\n\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int) -> int:\n    return n * n\n\n# Test the function\nprint(car_race_collision(5))  # Output: 25"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    return [i + 1 for i in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'\n"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Both a and h must be positive numbers.\")\n    if a + h <= 0:\n        raise ValueError(\"a and h must form a valid triangle.\")\n    if a == h:\n        raise ValueError(\"a and h must be different numbers.\")\n    return 0.5 * a * h\n\nprint(triangle_area(5, 3))  # Output: 7.5\n"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 2\n    fib4_sequence = [0, 0, 2]\n    for i in range(3, n+1):\n        fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n    return fib4_sequence[n]\n\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14\n"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n\nprint(median([3, 1, 2, 4, 5]))\nprint(median([-10, 4, 6, 1000, 10, 20]))"}
{"task_id": "HumanEval/48", "completion": "\nimport string\n\ndef is_palindrome(text: str) -> bool:\n    text = ''.join(c for c in text if c.isalnum()).lower()\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int) -> int:\n    return pow(n, p-1, p)\n\nprint(modp(3, 5))  # 3\nprint(modp(1101, 101))  # 2\nprint(modp(0, 101))  # 1\nprint(modp(3, 11))  # 8\nprint(modp(100, 101))  # 1"}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOUn !,.;:?'\n    return ''.join([char for"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l: list, t: int) -> bool:\n    if not l:\n        return True\n    if not all(isinstance(num, (int, float)) for num in l):\n        return False\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: Fraction, y: Fraction) -> Fraction:\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str) -> bool:\n    if s0 is None or s1 is None:\n        return False\n    if not s0 and not s1:\n        return True\n    return sorted(s0.lower()) == sorted(s1.lower())\n"}
{"task_id": "HumanEval/55", "completion": "\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21\n"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))  # False\n"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    return l == sorted(l) or l == sorted(l, reverse=True)"}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))"}
{"task_id": "HumanEval/59", "completion": "\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2\nprint(largest_prime_factor(2))      # Output: 2\nprint(largest_prime_factor(1))      # Output: Error: Input must be a positive integer\nprint(largest_prime_factor(-1))     # Output: Error: Input must be a positive integer\n"}
{"task_id": "HumanEval/60", "completion": "\nprint(sum_to_n(10) - sum_to_n(5))  # Output: 165\n"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\nprint(correct_bracketing(\"(\"))  # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False\n"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\nprint(derivative([3, 1, 2, 4, 5]))  # [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # [2, 6]\n"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\n# Add more test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"Hello\"))  # Expected output: 3\nprint(vowels_count(\"Y\"))  # Expected output: 1\nprint(vowels_count(\"Yay\"))  # Expected output: 2\n"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    if shift >= len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[len(str(x)) - shift:] + str(x)[:len(str(x)) - shift]"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases\nprint(digitSum(\"\")) # 0\nprint(digitSum(\"abAB\")) # 131\nprint(digitSum(\"abcCd\")) # 67\nprint(digitSum(\"helloE\")) # 69\nprint(digitSum(\"woArBld\")) # 131\nprint(digitSum(\"aAaaaXa\")) # 153\n"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    s = s.replace(\" \", \"\")\n    s = s.split(\"and\")\n    apples = int(s[0].split(\" \")[0])\n    oranges = int(s[1].split(\" \")[0])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    if not arr:\n        return []\n    min_val = min([i for i in arr if i % 2 == 0])\n    min_index = [i for i, j in enumerate(arr) if j == min_val]\n    return [min_val, min_index[0]]"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    for num in sorted(count, reverse=True):\n        if count[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    if not lst:\n        return []\n    else:\n        return sorted(lst, key=lambda x: (x, -x)[len(lst) % 2], reverse=True)"}
{"task_id": "HumanEval/71", "completion": "\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        # calculate semi-perimeter\n        s = (a + b + c) / 2\n        # calculate area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    # Check if the input is a list of integers\n    if not isinstance(q, list) or not all(isinstance(i, int) for i in q):\n        raise TypeError(\"The first argument must be a list of integers.\")\n    # Check if the input is a positive integer\n    if not isinstance(w, int) or w <= 0:\n        raise TypeError(\"The second argument must be a positive integer.\")\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) > w:\n        return False\n    return True\n"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    count = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            count += 1\n    return count\n\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # 0"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    if not all(isinstance(i, str) for i in lst1 + lst2):\n        raise ValueError(\"All elements in the lists must be strings.\")\n    if not lst1 and not lst2:\n        raise ValueError(\"The lists must not be empty.\")\n    total1 = sum(len(i) for i in lst1)\n    total2 = sum(len(i) for i in lst2)\n    if total1 < total2:\n        return lst1\n    elif total1 > total2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a = a // i\n            if len(factors) == 3:\n                break\n\n    return len(factors) == 3 and all(is_prime(f) for f in factors)\n\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(100))  # False"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    if x == 0 and n == 0:\n        return False\n    if x == 0 and n == 1:\n        return True\n    return x == n ** int(round(x ** (1. / n)))\n\nprint(is_simple_power(0, 0))  # False\n"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    import math\n    return math.isqrt(a) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    primes = set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47])\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n\nprint(decimal_to_binary(15))   # returns \"db1111db\"\nprint(decimal_to_binary(32))   # returns \"db100000db\"\n"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))"}
{"task_id": "HumanEval/82", "completion": "\nimport re\n\ndef prime_length(string):\n    if not string:\n        return False\n    string = re.sub(r'\\W+', '', string).lower()  # remove non-alphanumeric characters and convert to lower case\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    binary = bin(N)[2:]\n    return sum(int(digit) for digit in binary)\n\nprint(solve(1000))  # Output: 1\nprint(solve(150))    # Output: 6\nprint(solve(147))    # Output: 12"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)\n\nprint(anti_shuffle('Hi'))  # returns 'Hi'\nprint(anti_shuffle('hello'))  # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # returns 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.isupper():\n                result += chr((ascii_val - 65 + 2*2) % 26 + 65)\n            else:\n                result += chr((ascii_val - 97 + 2*2) % 26 + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    count = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    max_prime = max((x for x in lst if is_prime(x)), default=None)\n    return sum_of_digits(max_prime) if max_prime is not None else 0"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    result = []\n    while n > 0:\n        result.append(n)\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        n -= 1\n    return result[::-1]\n\nprint(make_a_pile(3))"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    return s.split()\n\nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        avg = round(avg)\n        return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    return sorted([i for i in x if all(int(digit) % 2 != 0 for digit in str(i))]\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    # Filter out the numbers between 1 and 9\n    arr = [i for i in arr if 1 <= i <= 9]\n    # Sort the array\n    arr.sort()\n    # Reverse the array\n    arr.reverse()\n    # Convert the numbers to their corresponding names\n    return [str(i) for i in arr]"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    # Check if all elements in lst1 are odd\n    if all(i % 2 != 0 for i in lst1):\n        # If all elements in lst1 are odd, check if there are even numbers in lst2\n        if any(i % 2 == 0 for i in lst2):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    from collections import Counter\n    return Counter(test.split()).most_common(1)[0]\n\n# Test cases\nprint(histogram('a b c')) # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a')) # {'a': 2, 'b': 2}\nprint(histogram('a b c a b')) # {'a': 2, 'b': 2}\nprint(histogram('b b b b a')) # {'b': 4}\nprint(histogram('')) # {}"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    result = [i for i in s if i not in c]\n    return (''.join(result), result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        odd_digits = sum(int(digit) % 2 for digit in s)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {i} of the {i}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\nprint(sort_array([1, 5, 2, 3, 4]))\nprint(sort_array([-2, -3, -4, -5, -6]))\nprint(sort_array([1, 0, 2, 3, 4]))"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for word in words:\n        if len([char for char in word if char.lower() in consonants]) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i+1] not in vowels and word[i+2] not in vowels:\n                return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\"))  # \"u\"\nprint(get_closest_vowel(\"FULL\"))  # \"U\"\nprint(get_closest_vowel(\"quick\"))  # \"\"\nprint(get_closest_vowel(\"ab\"))  # \"\""}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    stack = []\n    for char in s1 + s2:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)\n\n# Test the function\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 4))  # Output: 24"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([i for i in sequence if i % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    import re\n    date_pattern = re.compile(r\"^(0[1-9]|1[0-9]|2[0-9]|3[01])-(0[1-9]|1[0-2])-\\d{4}$\")\n    if date_pattern.match(date):\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month == 2:\n            if year % 4 == 0:\n                if year % 100 == 0:\n                    if year % 400 == 0:\n                        if day < 1 or day > 29:\n                            return False\n                    else:\n                        if day < 1 or day > 28:\n                            return False\n                else:\n                    if day < 1 or day > 29:\n                        return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    if ',' in txt:\n        return sum(1 for c in txt if c.islower())\n    elif ' ' in txt:\n        return txt.split()\n    else:\n        return txt\n\nprint(split_words(\"Hello world!\")) # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\")) # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\")) # 3\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1] or lst[i] == lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length == 1:\n        return \"NO\"\n    if length == 2:\n        return \"YES\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\""}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        product_of_signs = 1\n        for num in arr:\n            product_of_signs *= num // abs(num)\n        return sum(arr) * product_of_signs"}
{"task_id": "HumanEval/129", "completion": "\nfrom collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    visited = [[0]*N for _ in range(N)]\n    queue = deque([(grid[i][j], i, j) for i in range(N) for j in range(N)])\n    visited[i][j] = 1\n    path = []\n    while len(queue) > 0:\n        val, i, j = queue.popleft()\n        if len(path) == k:\n            return path\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < N and 0 <= y < N and not visited[x][y]:\n                visited[x][y] = 1\n                queue.append((val, x, y))\n                path.append(val)\n                break\n    return path"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        sequence = [1, 3, 2, 8]\n        for i in range(4, n):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "\ndef sum_squares(lst):\n    return sum([int(ceil(x))**2 for x in lst])\n\nimport math\nprint(sum_squares([1,2,3])) # 14\nprint(sum_squares([1,4,9])) # 98\nprint(sum_squares([1,3,5,7])) # 84\nprint(sum_squares([1.4,4.2,0])) # 29\nprint(sum_squares([-2.4,1,1])) # 6\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if txt[-2] == ' ':\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "\nprint(largest_smallest_integers([2, 4, "}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        try:\n            a = float(a.replace(\",\", \".\"))\n            b = float(b.replace(\",\", \".\"))\n        except ValueError:\n            return \"Error: Both inputs must be real numbers.\"\n    elif isinstance(a, str):\n        try:\n            a = float(a)\n        except ValueError:\n            return \"Error: First input must be a real number.\"\n    elif isinstance(b, str):\n        try:\n            b = float(b.replace(\",\", \".\"))\n        except ValueError:\n            return \"Error: Second input must be a real number.\"\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    for i in range(2, n//2 + 1, 2):\n        if n - i < 2:\n            return False\n        if (n - i) % 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n\nprint(special_factorial(4))  # Output: 24"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    return text\n\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"\n"}
{"task_id": "HumanEval/141", "completion": "\ndef file_name_check(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name.split('.')[0].isalpha():\n        return 'No'\n    if not file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i]**3\n    return result"}
{"task_id": "HumanEval/143", "completion": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    return ' '.join(word for word in words if is_prime(len(word)))\n\n# Test cases\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    # Convert the fractions to integers\n    x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n\n    # Calculate the gcd of the numerators and denominators\n    gcd = lambda a, b: a if b == 0 else gcd(b, a % b)\n    gcd_num = gcd(x_num, n_num)\n    gcd_den = gcd(x_den, n_den)\n\n    # Simplify the fractions\n    x_num //= gcd_num\n    x_den //= gcd_den\n    n_num //= gcd_num\n    n_den //= gcd_den\n\n    # Check if the result is a whole number\n    return x_num == n_num and x_den == n_den\n\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    # Sort the list based on the sum of digits and index\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(planets[planets.index(planet1) + 1:planets.index(planet2)])\n\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    # Filter out strings of odd length\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))  # Output: 0\nprint(double_the_difference([9, -2]))  # Output: 81\nprint(double_the_difference([0]))  # Output: 0\nprint(double_the_difference('123'))  # Output: TypeError: Input"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game,guess):\n    return [abs(a-b) for a,b in zip(game,guess)]"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    strengths = [(len([char for char in extension if char.isupper()]) - len([char for char in extension if char.islower()]), extension) for extension in extensions]\n    strongest_extension = min(strengths, key=lambda x: x[0])\n    return f\"{class_name}.{strongest_extension[1]}\"\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    if not isinstance(num, (int, float)):\n        num = int(num)\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    result = ''\n    for i in range(len(values)):\n        while number >= values[i]:\n            result += numerals[i]\n            number -= values[i]\n    return result.lower()\n\nprint(int_to_mini_roman(19))  # Output: 'xix'\nprint(int_to_mini_roman(152))  # Output: 'clii'\nprint(int_to_mini_roman(426))  # Output: 'cdxxvi'\n"}
{"task_id": "HumanEval/157", "completion": "\nimport math\n\ndef right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    total = number + need\n    if total > remaining:\n        return [total, 0]\n    else:\n        return [total, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i+1])\n    result = eval(expression)\n    return result"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not result[0].isalpha():\n        return result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\nprint(string_to_md5('Hello world'))  # Output: 3e25960a79dbc69b674cd4ec67a72c62\n"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
