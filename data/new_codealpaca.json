[
    {
        "instruction": "Write a C++ program that calculates the area of a rectangle, given its width and height.",
        "input": "width: 5, height: 8",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int width = 5;\n    int height = 8;\n    int area = width * height;\n\n    cout << \"Area of rectangle: \" << area << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int width = 5;\n    int height = 8;\n    int area = width * height;\n\n    cout << \"Area of rectangle: \" << area << endl;\n    return 0;}"
    },
    {
        "instruction": "How can you implement a basic web server using Node.js and the Express.js framework?",
        "input": "port: 3000",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n    res.send('Hello, World!');});\n\napp.listen(port, () => {\n    console.log(`Server is running on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n    res.send('Hello, World!');});\n\napp.listen(port, () => {\n    console.log(`Server is running on port ${port}`);});"
    },
    {
        "instruction": "Design a Python class to represent a bank account with the functionality to deposit and withdraw funds.",
        "input": "account_number: '12345678', initial_balance: 1000",
        "response": "class BankAccount:\n    def __init__(self, account_number, initial_balance):\n        self.account_number = account_number\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            raise ValueError('Insufficient funds')\n\naccount = BankAccount('12345678', 1000)\naccount.deposit(500)\naccount.withdraw(300)\nprint(account.balance)",
        "output": "class BankAccount:\n    def __init__(self, account_number, initial_balance):\n        self.account_number = account_number\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            raise ValueError('Insufficient funds')\n\naccount = BankAccount('12345678', 1000)\naccount.deposit(500)\naccount.withdraw(300)\nprint(account.balance)"
    },
    {
        "instruction": "Implement a basic shell script that prints all files in a directory.",
        "input": "directory: '/home/user/documents'",
        "response": "#!/bin/sh\n\ndirectory=\"/home/user/documents\"\nfor file in \"$directory\"/*\ndo\n    echo \"$file\"\ndone",
        "output": "#!/bin/sh\n\ndirectory=\"/home/user/documents\"\nfor file in \"$directory\"/*\ndo\n    echo \"$file\"\ndone"
    },
    {
        "instruction": "Design a Python program that reads a CSV file and prints the average of numbers in a specified column.",
        "input": "example.csv:\n10,20,30\n15,25,35\n12,22,32",
        "response": "import csv\n\ndef average_of_column(file_name, column):\n    with open(file_name, 'r') as csv_file:\n        csv_reader = csv.reader(csv_file)\n        column_sum = 0\n        row_count = 0\n\n        for row in csv_reader:\n            column_sum += int(row[column])\n            row_count += 1\n\n    return column_sum / row_count\n\naverage = average_of_column('example.csv', 1)\nprint(average)",
        "output": "import csv\n\ndef average_of_column(file_name, column):\n    with open(file_name, 'r') as csv_file:\n        csv_reader = csv.reader(csv_file)\n        column_sum = 0\n        row_count = 0\n\n        for row in csv_reader:\n            column_sum += int(row[column])\n            row_count += 1\n\n    return column_sum / row_count\n\naverage = average_of_column('example.csv', 1)\nprint(average)"
    },
    {
        "instruction": "Implement a Java function that accepts an integer array and returns the square of each element in a new array.",
        "input": "int[] arr = {4, 5, 6};",
        "response": "public int[] squareArrayElements(int[] arr) {\n    int[] squaredArray = new int[arr.length];\n\n    for (int i = 0; i < arr.length; i++) {\n        squaredArray[i] = arr[i] * arr[i];\n    }\n\n    return squaredArray;}\n\nint[] arr = {4, 5, 6};\nint[] squaredArray = squareArrayElements(arr);",
        "output": "public int[] squareArrayElements(int[] arr) {\n    int[] squaredArray = new int[arr.length];\n\n    for (int i = 0; i < arr.length; i++) {\n        squaredArray[i] = arr[i] * arr[i];\n    }\n\n    return squaredArray;}\n\nint[] arr = {4, 5, 6};\nint[] squaredArray = squareArrayElements(arr);"
    },
    {
        "instruction": "In JavaScript, how can you filter out only even numbers from an array?",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "function filterEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst evenNumbers = filterEvenNumbers(arr);\nconsole.log(evenNumbers);",
        "output": "function filterEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst evenNumbers = filterEvenNumbers(arr);\nconsole.log(evenNumbers);"
    },
    {
        "instruction": "Write a shell script that takes a directory path as an argument, and outputs the number of files present in the directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndirectory_path=$1\nfile_count=$(find $directory_path -type f | wc -l)\necho \"Number of files in the directory: $file_count\"",
        "output": "#!/bin/bash\n\ndirectory_path=$1\nfile_count=$(find $directory_path -type f | wc -l)\necho \"Number of files in the directory: $file_count\""
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "How can I implement a simple REST API using Node.js and Express?",
        "input": "GET /users => Return a list of users",
        "response": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nconst users = [\n    {id: 1, name: 'John'},\n    {id: 2, name: 'Jane'}\n];\n\napp.get('/users', (req, res) => {\n    res.send(users);});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n    console.log(`Server started on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nconst users = [\n    {id: 1, name: 'John'},\n    {id: 2, name: 'Jane'}\n];\n\napp.get('/users', (req, res) => {\n    res.send(users);});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n    console.log(`Server started on port ${port}`);});"
    },
    {
        "instruction": "Write a Python program that reads the contents of the file 'employees.txt' line by line and prints the lines not containing the word 'Manager'.",
        "input": "employees.txt contents:\nJohn Doe|Software Engineer\nJane Smith|Manager\nMichael Brown|Developer",
        "response": "with open('employees.txt', 'r') as file:\n    for line in file:\n        if 'Manager' not in line:\n            print(line.strip())",
        "output": "with open('employees.txt', 'r') as file:\n    for line in file:\n        if 'Manager' not in line:\n            print(line.strip())"
    },
    {
        "instruction": "Fix the shell script which should grab a list of files from the directory '/path/to/dir', count the number of lines for each file, and output the results.",
        "input": "Broken shell script:\n\nfor file in 'ls /path/to/dir'; do\nwc -l $file\ndone",
        "response": "for file in /path/to/dir/*; do\n    wc -l \"$file\"\ndone",
        "output": "for file in /path/to/dir/*; do\n    wc -l \"$file\"\ndone"
    },
    {
        "instruction": "Write a Python function to calculate the factorial of a given number using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    return 1 if n == 0 or n == 1 else n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    return 1 if n == 0 or n == 1 else n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Design a JavaScript function to format a given number as US currency (USD), considering two decimal places and a preceding dollar sign.",
        "input": "1234.5678",
        "response": "function formatUSDCurrency(amount) {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);}\n\nconst result = formatUSDCurrency(1234.5678);\nconsole.log(result);",
        "output": "function formatUSDCurrency(amount) {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);}\n\nconst result = formatUSDCurrency(1234.5678);\nconsole.log(result);"
    },
    {
        "instruction": "In C, implement a function to search for an integer in a sorted array using the binary search algorithm.",
        "input": "int arr[] = {1, 3, 5, 7, 9}; int target = 5;",
        "response": "#include <stdio.h>\n\nint binary_search(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;}\n\nint main() {\n    int arr[] = {1, 3, 5, 7, 9};\n    int target = 5;\n    int result = binary_search(arr, 0, 4, target);\n    printf('Element found at index: %d\n', result);\n    return 0;}",
        "output": "#include <stdio.h>\n\nint binary_search(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;}\n\nint main() {\n    int arr[] = {1, 3, 5, 7, 9};\n    int target = 5;\n    int result = binary_search(arr, 0, 4, target);\n    printf('Element found at index: %d\n', result);\n    return 0;}"
    },
    {
        "instruction": "Write a Python script that reads a text file line by line and counts the total number of words in the file.",
        "input": "'sample.txt'",
        "response": "def count_words_in_file(file):\n    word_count = 0\n    with open(file, 'r') as f:\n        for line in f:\n            words = line.split()\n            word_count += len(words)\n    return word_count\n\nfile_name = 'sample.txt'\ntotal_words = count_words_in_file(file_name)\nprint(f'Total words in file {file_name}: {total_words}')",
        "output": "def count_words_in_file(file):\n    word_count = 0\n    with open(file, 'r') as f:\n        for line in f:\n            words = line.split()\n            word_count += len(words)\n    return word_count\n\nfile_name = 'sample.txt'\ntotal_words = count_words_in_file(file_name)\nprint(f'Total words in file {file_name}: {total_words}')"
    },
    {
        "instruction": "Develop a C++ program that reads a text file and counts the number of words in it.",
        "input": "File path: 'example.txt'\nContent: 'The quick brown fox jumps over the lazy dog.'",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    string filePath = \"example.txt\";\n    ifstream file(filePath);\n    string word;\n    int wordCount = 0;\n\n    if (!file) {\n        cerr << \"Cannot open file.\" << endl;\n        return 1;\n    }\n\n    while (file >> word) {\n        wordCount++;\n    }\n\n    cout << \"Number of words: \" << wordCount << endl;\n    file.close();\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    string filePath = \"example.txt\";\n    ifstream file(filePath);\n    string word;\n    int wordCount = 0;\n\n    if (!file) {\n        cerr << \"Cannot open file.\" << endl;\n        return 1;\n    }\n\n    while (file >> word) {\n        wordCount++;\n    }\n\n    cout << \"Number of words: \" << wordCount << endl;\n    file.close();\n    return 0;\n}"
    },
    {
        "instruction": "Write a PHP script that calculates the factorial of a given number using recursion.",
        "input": "Number: 5",
        "response": "<?php\n\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\n$number = 5;\n$result = factorial($number);\necho \"Factorial of $number is $result\";\n\n?>",
        "output": "<?php\n\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\n$number = 5;\n$result = factorial($number);\necho \"Factorial of $number is $result\";\n\n?>"
    },
    {
        "instruction": "How can I implement a simple HTTP server in Python that serves a static HTML file?",
        "input": "HTML file path: 'index.html'",
        "response": "import http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\n# Navigate to the directory containing the index.html file\nHandler.extensions_map.update({\"\": \"text/html\"})\n\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    print(f'Serving on port {PORT}')\n    httpd.serve_forever()",
        "output": "import http.server\nimport socketserver\n\nPORT = 8000\n\nHandler = http.server.SimpleHTTPRequestHandler\n\n# Navigate to the directory containing the index.html file\nHandler.extensions_map.update({\"\": \"text/html\"})\n\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    print(f'Serving on port {PORT}')\n    httpd.serve_forever()"
    },
    {
        "instruction": "Develop a JavaScript function that accepts a string and a character, then returns the number of occurrences of the character in the string.",
        "input": "String: 'hello world', Character: 'l'",
        "response": "function countOccurrences(str, char) {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === char) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst inputStr = 'hello world';\nconst charToCount = 'l';\nconst occurrences = countOccurrences(inputStr, charToCount);\nconsole.log(`Occurrences of '${charToCount}' in '${inputStr}': ${occurrences}`);",
        "output": "function countOccurrences(str, char) {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === char) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst inputStr = 'hello world';\nconst charToCount = 'l';\nconst occurrences = countOccurrences(inputStr, charToCount);\nconsole.log(`Occurrences of '${charToCount}' in '${inputStr}': ${occurrences}`);"
    },
    {
        "instruction": "Write a C++ program that can read a text file and display the number of words in the file.",
        "input": "example.txt",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"example.txt\");\n    std::string word;\n    int count = 0;\n\n    while (file >> word) {\n        ++count;\n    }\n\n    std::cout << \"The file has \" << count << \" words.\" << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"example.txt\");\n    std::string word;\n    int count = 0;\n\n    while (file >> word) {\n        ++count;\n    }\n\n    std::cout << \"The file has \" << count << \" words.\" << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "How do you find the length of the longest common subsequence for two given strings in Python?",
        "input": "string1: \"ABCDE\", string2: \"ACDFE\"",
        "response": "def lcs_length(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\nresult = lcs_length(\"ABCDE\", \"ACDFE\")\nprint(result)",
        "output": "def lcs_length(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\nresult = lcs_length(\"ABCDE\", \"ACDFE\")\nprint(result)"
    },
    {
        "instruction": "Design a PHP function to check if a given string contains only alphabetical characters.",
        "input": "\"Transformative2021\"",
        "response": "<?php\nfunction is_alpha($str) {\n    return ctype_alpha($str);}\n\n$str = \"Transformative2021\";\n$result = is_alpha($str);\nprint($result ? 'True' : 'False');\n?>",
        "output": "<?php\nfunction is_alpha($str) {\n    return ctype_alpha($str);}\n\n$str = \"Transformative2021\";\n$result = is_alpha($str);\nprint($result ? 'True' : 'False');\n?>"
    },
    {
        "instruction": "Perform a GET request to the given REST API URL in JavaScript and log the response to the console.",
        "input": "URL: \"https://jsonplaceholder.typicode.com/todos/1\"",
        "response": "async function getRequest(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);}\n\ngetRequest('https://jsonplaceholder.typicode.com/todos/1');",
        "output": "async function getRequest(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);}\n\ngetRequest('https://jsonplaceholder.typicode.com/todos/1');"
    },
    {
        "instruction": "Implement a C++ function to find the greatest common divisor (GCD) of two positive integers using the Euclidean Algorithm.",
        "input": "56, 98",
        "response": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;}\n\nint main() {\n    int num1 = 56;\n    int num2 = 98;\n    cout << \"GCD(\" << num1 << \", \" << num2 << \") = \" << gcd(num1, num2) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;}\n\nint main() {\n    int num1 = 56;\n    int num2 = 98;\n    cout << \"GCD(\" << num1 << \", \" << num2 << \") = \" << gcd(num1, num2) << endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python program that reads a CSV file and outputs the average value of the 'age' column to the console.",
        "input": "name,age\nAlice,30\nBob,25\nCharlie,35",
        "response": "import csv\n\ndef read_csv_and_average_age(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        age_sum = 0\n        num_rows = 0\n        for row in reader:\n            age_sum += int(row['age'])\n            num_rows += 1\n        return age_sum / num_rows\n\nexample_csv = 'example.csv'\nwith open(example_csv, 'w') as temp_csv:\n    temp_csv.write('name,age\\nAlice,30\\nBob,25\\nCharlie,35')\n\naverage_age = read_csv_and_average_age(example_csv)\nprint('Average age:', average_age)",
        "output": "import csv\n\ndef read_csv_and_average_age(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        age_sum = 0\n        num_rows = 0\n        for row in reader:\n            age_sum += int(row['age'])\n            num_rows += 1\n        return age_sum / num_rows\n\nexample_csv = 'example.csv'\nwith open(example_csv, 'w') as temp_csv:\n    temp_csv.write('name,age\\nAlice,30\\nBob,25\\nCharlie,35')\n\naverage_age = read_csv_and_average_age(example_csv)\nprint('Average age:', average_age)"
    },
    {
        "instruction": "In JavaScript, create a function that accepts an array of strings and returns an array of the same strings in alphabetical order.",
        "input": "[\"banana\", \"apple\", \"kiwi\"]",
        "response": "function sortStringsAlphabetically(arr) {\n    return arr.sort();}\n\nconst fruits = ['banana', 'apple', 'kiwi'];\nconst sortedFruits = sortStringsAlphabetically(fruits);\nconsole.log(sortedFruits);",
        "output": "function sortStringsAlphabetically(arr) {\n    return arr.sort();}\n\nconst fruits = ['banana', 'apple', 'kiwi'];\nconst sortedFruits = sortStringsAlphabetically(fruits);\nconsole.log(sortedFruits);"
    },
    {
        "instruction": "Develop a shell script that counts the number of files and directories in a specified directory.",
        "input": "~/Documents",
        "response": "#!/bin/bash\n\ndir=\"${1}\"\n\nif [[ -d \"${dir}\" ]]; then\n    num_files=$(find \"${dir}\" -type f | wc -l)\n    num_dirs=$(find \"${dir}\" -type d | wc -l)\n    echo \"Files: ${num_files}\"\n    echo \"Directories: ${num_dirs}\"\nelse\n    echo \"Error: Directory not found\"\n    exit 1\nfi",
        "output": "#!/bin/bash\n\ndir=\"${1}\"\n\nif [[ -d \"${dir}\" ]]; then\n    num_files=$(find \"${dir}\" -type f | wc -l)\n    num_dirs=$(find \"${dir}\" -type d | wc -l)\n    echo \"Files: ${num_files}\"\n    echo \"Directories: ${num_dirs}\"\nelse\n    echo \"Error: Directory not found\"\n    exit 1\nfi"
    },
    {
        "instruction": "Implement a recursive factorial function in Haskell.",
        "input": "5",
        "response": "factorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n\nmain :: IO ()\nmain = print (factorial 5)",
        "output": "factorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n\nmain :: IO ()\nmain = print (factorial 5)"
    },
    {
        "instruction": "Design a C++ function that reverses a given string in place without using any additional data structures or libraries.",
        "input": "\"codegen\"",
        "response": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    for (size_t i = 0, j = str.length() - 1; i < j; ++i, --j) {\n        std::swap(str[i], str[j]);\n    }\n}\n\nint main() {\n    std::string input = \"codegen\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    for (size_t i = 0, j = str.length() - 1; i < j; ++i, --j) {\n        std::swap(str[i], str[j]);\n    }\n}\n\nint main() {\n    std::string input = \"codegen\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How do you convert a Unix timestamp to a human-readable date in a Python script?",
        "input": "1633972405",
        "response": "from datetime import datetime\n\nunix_timestamp = 1633972405\nhuman_readable_date = datetime.fromtimestamp(unix_timestamp).strftime('%Y-%m-%d %H:%M:%S')\n\nprint(human_readable_date)",
        "output": "from datetime import datetime\n\nunix_timestamp = 1633972405\nhuman_readable_date = datetime.fromtimestamp(unix_timestamp).strftime('%Y-%m-%d %H:%M:%S')\n\nprint(human_readable_date)"
    },
    {
        "instruction": "Write a shell script that counts the number of lines in a file.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfile='file.txt'\nline_count=$(cat $file | wc -l)\n\necho \"Number of lines: $line_count\"",
        "output": "#!/bin/bash\n\nfile='file.txt'\nline_count=$(cat $file | wc -l)\n\necho \"Number of lines: $line_count\""
    },
    {
        "instruction": "Write a Python program that counts the number of occurrences of each word in a given text and prints the results to console.",
        "input": "GPT-3 is an artificial intelligence language model created by OpenAI. OpenAI designed GPT-3 for various natural language processing tasks.",
        "response": "text = \"GPT-3 is an artificial intelligence language model created by OpenAI. OpenAI designed GPT-3 for various natural language processing tasks.\"\nword_count = {}\nwords = text.split()\n\nfor word in words:\n    word = word.lower().strip('.!,?;-')\n    word_count[word] = word_count.get(word, 0) + 1\n\nfor key, value in word_count.items():\n    print(f'{key}: {value}')",
        "output": "text = \"GPT-3 is an artificial intelligence language model created by OpenAI. OpenAI designed GPT-3 for various natural language processing tasks.\"\nword_count = {}\nwords = text.split()\n\nfor word in words:\n    word = word.lower().strip('.!,?;-')\n    word_count[word] = word_count.get(word, 0) + 1\n\nfor key, value in word_count.items():\n    print(f'{key}: {value}')"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of user objects and returns only those users who are older than 30 years.",
        "input": "[{\"name\": \"Sarah\", \"age\": 45}, {\"name\": \"Tom\", \"age\": 25}, {\"name\": \"Samantha\", \"age\": 31}]",
        "response": "function getOlderUsers(usersArray) {\n    return usersArray.filter(user => user.age > 30);}\n\nconst users = [\n  {\"name\": \"Sarah\", \"age\": 45},\n  {\"name\": \"Tom\", \"age\": 25},\n  {\"name\": \"Samantha\", \"age\": 31}\n];\n\nconst olderUsers = getOlderUsers(users);\nconsole.log(olderUsers);",
        "output": "function getOlderUsers(usersArray) {\n    return usersArray.filter(user => user.age > 30);}\n\nconst users = [\n  {\"name\": \"Sarah\", \"age\": 45},\n  {\"name\": \"Tom\", \"age\": 25},\n  {\"name\": \"Samantha\", \"age\": 31}\n];\n\nconst olderUsers = getOlderUsers(users);\nconsole.log(olderUsers);"
    },
    {
        "instruction": "How would you implement a C++ class representing a rectangle with methods to compute the area and perimeter?",
        "input": "",
        "response": "#include <iostream>\n\nclass Rectangle {\nprivate:\n    double width;\n    double height;\n\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n\n    double area() {\n        return width * height;\n    }\n\n    double perimeter() {\n        return 2 * (width + height);\n    }};\n\nint main() {\n    Rectangle rect(5, 10);\n    std::cout << \"Area: \" << rect.area() << std::endl;\n    std::cout << \"Perimeter: \" << rect.perimeter() << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nclass Rectangle {\nprivate:\n    double width;\n    double height;\n\npublic:\n    Rectangle(double w, double h) : width(w), height(h) {}\n\n    double area() {\n        return width * height;\n    }\n\n    double perimeter() {\n        return 2 * (width + height);\n    }};\n\nint main() {\n    Rectangle rect(5, 10);\n    std::cout << \"Area: \" << rect.area() << std::endl;\n    std::cout << \"Perimeter: \" << rect.perimeter() << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a shell script that takes multiple file paths as input and appends the content of all files into a single output file.",
        "input": "file1.txt file2.txt file3.txt - output.txt",
        "response": "#!/bin/bash\n\nif [ \"$#\" -lt 3 ]; then\n  echo \"Usage: $0 file1.txt file2.txt ... - output.txt\"\n  exit 1\nfi\n\noutput=\"\"\nfor arg in \"$@\"\ndo\n  if [ \"$arg\" == \"-\" ]; then\n    shift\n    output=\"$1\"\n    break\n  fi\n  shift\ndone\n\nif [ -z \"$output\" ]; then\n  echo \"Missing output file. Use '-' to separate input files from output file.\"\n  exit 1\nfi\n\n: > \"$output\"\n\nwhile [ $# -gt 0 ]; do\n  cat \"$1\" >> \"$output\"\n  shift\ndone",
        "output": "#!/bin/bash\n\nif [ \"$#\" -lt 3 ]; then\n  echo \"Usage: $0 file1.txt file2.txt ... - output.txt\"\n  exit 1\nfi\n\noutput=\"\"\nfor arg in \"$@\"\ndo\n  if [ \"$arg\" == \"-\" ]; then\n    shift\n    output=\"$1\"\n    break\n  fi\n  shift\ndone\n\nif [ -z \"$output\" ]; then\n  echo \"Missing output file. Use '-' to separate input files from output file.\"\n  exit 1\nfi\n\n: > \"$output\"\n\nwhile [ $# -gt 0 ]; do\n  cat \"$1\" >> \"$output\"\n  shift\ndone"
    },
    {
        "instruction": "Write a C++ function that finds the largest element in an array of integers.",
        "input": "int arr[] = {12, 4, 7, 45, 23};",
        "response": "#include <iostream>\n#include <algorithm>\n\nint find_largest(int arr[], int size) {\n    int largest = arr[0];\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n    }\n    return largest;}\n\nint main() {\n    int arr[] = {12, 4, 7, 45, 23};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int largest_element = find_largest(arr, size);\n    std::cout << \"Largest element is: \" << largest_element << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n\nint find_largest(int arr[], int size) {\n    int largest = arr[0];\n    for (int i = 1; i < size; ++i) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n    }\n    return largest;}\n\nint main() {\n    int arr[] = {12, 4, 7, 45, 23};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int largest_element = find_largest(arr, size);\n    std::cout << \"Largest element is: \" << largest_element << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a PHP function that reverses a given string without using built-in functions.",
        "input": "\"OpenAI\"",
        "response": "<?php\n\nfunction reverse_string($str) {\n    $reversed = '';\n    for ($i = strlen($str) - 1; $i >= 0; $i--) {\n        $reversed .= $str[$i];\n    }\n    return $reversed;}\n\n$input = \"OpenAI\";\n$reversed_input = reverse_string($input);\necho \"Reversed string: \" . $reversed_input;\n\n?>",
        "output": "<?php\n\nfunction reverse_string($str) {\n    $reversed = '';\n    for ($i = strlen($str) - 1; $i >= 0; $i--) {\n        $reversed .= $str[$i];\n    }\n    return $reversed;}\n\n$input = \"OpenAI\";\n$reversed_input = reverse_string($input);\necho \"Reversed string: \" . $reversed_input;\n\n?>"
    },
    {
        "instruction": "How would you design a Python program that calculates the factorial of a given positive number?",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnum = 6\nresult = factorial(num)\nprint(f\"Factorial of {num} is: {result}\")",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnum = 6\nresult = factorial(num)\nprint(f\"Factorial of {num} is: {result}\")"
    },
    {
        "instruction": "Create a JavaScript function that takes two input arrays and returns a new array containing the union of the two input arrays.",
        "input": "const arr1 = [1, 2, 3];\nconst arr2 = [2, 3, 4, 5];",
        "response": "function arrayUnion(arr1, arr2) {\n    const union = new Set([...arr1, ...arr2]);\n    return Array.from(union);}\n\nconst arr1 = [1, 2, 3];\nconst arr2 = [2, 3, 4, 5];\nconst unionArray = arrayUnion(arr1, arr2);\nconsole.log(\"Union: \" + unionArray);",
        "output": "function arrayUnion(arr1, arr2) {\n    const union = new Set([...arr1, ...arr2]);\n    return Array.from(union);}\n\nconst arr1 = [1, 2, 3];\nconst arr2 = [2, 3, 4, 5];\nconst unionArray = arrayUnion(arr1, arr2);\nconsole.log(\"Union: \" + unionArray);"
    },
    {
        "instruction": "Design a C++ function to calculate the factorial of a non-negative integer.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    std::cout << 'Factorial of ' << num << ' is ' << factorial(num) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    std::cout << 'Factorial of ' << num << ' is ' << factorial(num) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you create an API in Node.js using Express to retrieve a user's profile given their username?",
        "input": "GET /users/:username",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\nconst exampleUsers = {\n    'john': { name: 'John Doe', age: 28 },\n    'jane': { name: 'Jane Smith', age: 32 }\n};\n\napp.get('/users/:username', (req, res) => {\n    const user = exampleUsers[req.params.username];\n    if (user) {\n        res.json(user);\n    } else {\n        res.status(404).send('User not found');\n    }\n});\n\napp.listen(port, () => {\n    console.log(`API listening at http://localhost:${port}`);\n});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\nconst exampleUsers = {\n    'john': { name: 'John Doe', age: 28 },\n    'jane': { name: 'Jane Smith', age: 32 }\n};\n\napp.get('/users/:username', (req, res) => {\n    const user = exampleUsers[req.params.username];\n    if (user) {\n        res.json(user);\n    } else {\n        res.status(404).send('User not found');\n    }\n});\n\napp.listen(port, () => {\n    console.log(`API listening at http://localhost:${port}`);\n});"
    },
    {
        "instruction": "Write a PHP script that takes a string input and calculates the number of vowels and consonants in it.",
        "input": "This is a test",
        "response": "<?php\n\nfunction count_vowels_consonants($str) {\n    $vowels_count = 0;\n    $consonants_count = 0;\n    $vowels = 'aeiouAEIOU';\n\n    for ($i = 0; $i < strlen($str); $i++) {\n        if (ctype_alpha($str[$i])) {\n            if (strpos($vowels, $str[$i]) !== false) {\n                $vowels_count++;\n            } else {\n                $consonants_count++;\n            }\n        }\n    }\n\n    return array('vowels' => $vowels_count, 'consonants' => $consonants_count);\n}\n\n$input_string = 'This is a test';\n$result = count_vowels_consonants($input_string);\n\necho 'Vowels: ', $result['vowels'], '\\n';\necho 'Consonants: ', $result['consonants'], '\\n';",
        "output": "<?php\n\nfunction count_vowels_consonants($str) {\n    $vowels_count = 0;\n    $consonants_count = 0;\n    $vowels = 'aeiouAEIOU';\n\n    for ($i = 0; $i < strlen($str); $i++) {\n        if (ctype_alpha($str[$i])) {\n            if (strpos($vowels, $str[$i]) !== false) {\n                $vowels_count++;\n            } else {\n                $consonants_count++;\n            }\n        }\n    }\n\n    return array('vowels' => $vowels_count, 'consonants' => $consonants_count);\n}\n\n$input_string = 'This is a test';\n$result = count_vowels_consonants($input_string);\n\necho 'Vowels: ', $result['vowels'], '\\n';\necho 'Consonants: ', $result['consonants'], '\\n';"
    },
    {
        "instruction": "Implement a function in Swift that takes an array of integers and reverses the order of elements.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "func reverseArray(array: [Int]) -> [Int] {\n    return array.reversed()\n}\n\nlet exampleArray = [1, 2, 3, 4, 5]\nlet reversedArray = reverseArray(array: exampleArray)\nprint(reversedArray)",
        "output": "func reverseArray(array: [Int]) -> [Int] {\n    return array.reversed()\n}\n\nlet exampleArray = [1, 2, 3, 4, 5]\nlet reversedArray = reverseArray(array: exampleArray)\nprint(reversedArray)"
    },
    {
        "instruction": "Write a Python function that takes a list of numbers and returns their average.",
        "input": "[5, 8, 13, 21]",
        "response": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nnums = [5, 8, 13, 21]\nresult = average(nums)\nprint(result)",
        "output": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nnums = [5, 8, 13, 21]\nresult = average(nums)\nprint(result)"
    },
    {
        "instruction": "In C++, implement a program that reads an input text file and counts the number of words in it.",
        "input": "Input file: \"hello.txt\" (content: \"Hello world! This is a test file.\")",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inputFile(\"hello.txt\");\n    std::string word;\n    int wordCount = 0;\n\n    if (inputFile.is_open()) {\n        while (inputFile >> word) {\n            wordCount++;\n        }\n        inputFile.close();\n    } else {\n        std::cout << \"Unable to open file\";\n        return 1;\n    }\n\n    std::cout << \"Word count: \" << wordCount << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inputFile(\"hello.txt\");\n    std::string word;\n    int wordCount = 0;\n\n    if (inputFile.is_open()) {\n        while (inputFile >> word) {\n            wordCount++;\n        }\n        inputFile.close();\n    } else {\n        std::cout << \"Unable to open file\";\n        return 1;\n    }\n\n    std::cout << \"Word count: \" << wordCount << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you demonstrate how to compute the factorial of a non-negative integer using JavaScript?",
        "input": "5",
        "response": "function factorial(num) {\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    return num * factorial(num - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(num) {\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    return num * factorial(num - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Create a simple web server in Node.js that listens on port 3000 and responds with 'Hello, World!' to any request.",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!');});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!');});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});"
    },
    {
        "instruction": "Implement a C++ program to calculate the factorial of a given integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    cout << factorial(n) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    cout << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Python function to get the list of square numbers from 1 to N by using a lambda function?",
        "input": "5",
        "response": "squares = lambda n: [x ** 2 for x in range(1, n + 1)]\n\nn = 5\nprint(squares(n))",
        "output": "squares = lambda n: [x ** 2 for x in range(1, n + 1)]\n\nn = 5\nprint(squares(n))"
    },
    {
        "instruction": "In JavaScript, create a function that can group an array of objects by a specified property.",
        "input": "[{id: 1, type: 'cat'}, {id: 2, type: 'dog'}, {id: 3, type: 'cat'}, {id: 4, type: 'dog'}], 'type'",
        "response": "function groupBy(arr, key) {\n    return arr.reduce((acc, obj) => {\n        (acc[obj[key]] = acc[obj[key]] || []).push(obj);\n        return acc;\n    }, {});}\n\nconst data = [{id : 1, type : 'cat'}, {id : 2, type : 'dog'}, {id : 3, type : 'cat'}, {id : 4, type : 'dog'}];\nconst groupedData = groupBy(data, 'type');\nconsole.log(groupedData);",
        "output": "function groupBy(arr, key) {\n    return arr.reduce((acc, obj) => {\n        (acc[obj[key]] = acc[obj[key]] || []).push(obj);\n        return acc;\n    }, {});}\n\nconst data = [{id : 1, type : 'cat'}, {id : 2, type : 'dog'}, {id : 3, type : 'cat'}, {id : 4, type : 'dog'}];\nconst groupedData = groupBy(data, 'type');\nconsole.log(groupedData);"
    },
    {
        "instruction": "Write a Shell script that lists files in a directory and sorts them by their last modification time.",
        "input": "",
        "response": "#!/bin/bash\n\nls -lt",
        "output": "#!/bin/bash\n\nls -lt"
    },
    {
        "instruction": "Implement a C++ function that reads a file and counts the number of lines.",
        "input": "\"example.txt\"",
        "response": "#include<iostream>\n#include<fstream>\n#include<string>\n\nint count_lines(const std::string &file_name) {\n    std::ifstream file(file_name);\n    std::string line;\n    int count = 0;\n    while (std::getline(file, line)) {\n        ++count;\n    }\n    file.close();\n    return count;}\n\nint main() {\n    int line_count = count_lines(\"example.txt\");\n    std::cout << \"Number of lines: \" << line_count << std::endl;}",
        "output": "#include<iostream>\n#include<fstream>\n#include<string>\n\nint count_lines(const std::string &file_name) {\n    std::ifstream file(file_name);\n    std::string line;\n    int count = 0;\n    while (std::getline(file, line)) {\n        ++count;\n    }\n    file.close();\n    return count;}\n\nint main() {\n    int line_count = count_lines(\"example.txt\");\n    std::cout << \"Number of lines: \" << line_count << std::endl;}"
    },
    {
        "instruction": "How do you encode a URL in JavaScript?",
        "input": "\"https://example.com/test input.html\"",
        "response": "const url = \"https://example.com/test input.html\";\nconst encodedUrl = encodeURIComponent(url);\nconsole.log(encodedUrl);",
        "output": "const url = \"https://example.com/test input.html\";\nconst encodedUrl = encodeURIComponent(url);\nconsole.log(encodedUrl);"
    },
    {
        "instruction": "Create a PHP function that converts a string to Title Case.",
        "input": "\"this is a test\"",
        "response": "<?php\nfunction to_title_case($str) {\n    return ucwords(strtolower($str));}\n\n$str_to_convert = \"this is a test\";\n$result = to_title_case($str_to_convert);\necho $result;\n?>",
        "output": "<?php\nfunction to_title_case($str) {\n    return ucwords(strtolower($str));}\n\n$str_to_convert = \"this is a test\";\n$result = to_title_case($str_to_convert);\necho $result;\n?>"
    },
    {
        "instruction": "Write a Bash script that displays all even numbers from 1 to 20.",
        "input": "",
        "response": "#!/bin/bash\n\nfor i in {1..20}; do\n    if ((i % 2 == 0)); then\n        echo $i\n    fi\ndone",
        "output": "#!/bin/bash\n\nfor i in {1..20}; do\n    if ((i % 2 == 0)); then\n        echo $i\n    fi\ndone"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a given non-negative integer.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int result = factorial(6);\n    std::cout << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int result = factorial(6);\n    std::cout << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a PHP script that reverses a given string.",
        "input": "'OpenAI is amazing!'",
        "response": "<?php\n\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input = 'OpenAI is amazing!';\n$result = reverse_string($input);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input = 'OpenAI is amazing!';\n$result = reverse_string($input);\necho $result;\n\n?>"
    },
    {
        "instruction": "What would be the SQL query to fetch all records from a table called 'customers' where the 'city' column matches 'New York'?",
        "input": "customers, city, New York",
        "response": "SELECT * FROM customers WHERE city = 'New York';",
        "output": "SELECT * FROM customers WHERE city = 'New York';"
    },
    {
        "instruction": "Write a Bash script that checks if a directory named 'archive' exists in the current directory and creates it if it doesn't.",
        "input": "archive",
        "response": "#!/bin/bash\n\nif [ ! -d \"archive\" ]; then\n    mkdir \"archive\"\n    echo \"Directory 'archive' created.\"\nelse\n    echo \"Directory 'archive' already exists.\"\nfi",
        "output": "#!/bin/bash\n\nif [ ! -d \"archive\" ]; then\n    mkdir \"archive\"\n    echo \"Directory 'archive' created.\"\nelse\n    echo \"Directory 'archive' already exists.\"\nfi"
    },
    {
        "instruction": "Implement a C++ function that takes a character string as input and generates a map of characters and their frequency.",
        "input": "Hello, World!",
        "response": "#include <iostream>\n#include <string>\n#include <map>\n\nstd::map<char, int> count_chars(const std::string &input) {\n    std::map<char, int> char_count;\n    for (auto ch : input) {\n        char_count[ch]++;\n    }\n    return char_count;}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    std::map<char, int> result = count_chars(input);\n\n    for (const auto &pair : result) {\n        std::cout << pair.first << ' ' << pair.second << std::endl;\n    }\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <map>\n\nstd::map<char, int> count_chars(const std::string &input) {\n    std::map<char, int> char_count;\n    for (auto ch : input) {\n        char_count[ch]++;\n    }\n    return char_count;}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    std::map<char, int> result = count_chars(input);\n\n    for (const auto &pair : result) {\n        std::cout << pair.first << ' ' << pair.second << std::endl;\n    }\n    return 0;}"
    },
    {
        "instruction": "How would you write a JavaScript function that takes an array of strings and returns an array with the lengths of each string?",
        "input": "[\"apple\", \"banana\", \"cherry\"]",
        "response": "function getStringLengths(arr) {\n    return arr.map(str => str.length);}\n\nconst input = [\"apple\", \"banana\", \"cherry\"];\nconst lengths = getStringLengths(input);\nconsole.log(lengths);",
        "output": "function getStringLengths(arr) {\n    return arr.map(str => str.length);}\n\nconst input = [\"apple\", \"banana\", \"cherry\"];\nconst lengths = getStringLengths(input);\nconsole.log(lengths);"
    },
    {
        "instruction": "Write a shell script that iterates through a list of filenames and reports if the file is read, write, or execute permissions for the user.",
        "input": "file1.txt file2.txt file3.txt",
        "response": "#!/bin/sh\n\nfile_list=\"file1.txt file2.txt file3.txt\"\n\nfor file in $file_list\ndo\n    perms=\"\"\n    if [ -r \"$file\" ]; then\n        perms=\"${perms}read \"\n    fi\n    if [ -w \"$file\" ]; then\n        perms=\"${perms}write \"\n    fi\n    if [ -x \"$file\" ]; then\n        perms=\"${perms}execute\"\n    fi\n\n    echo \"$file: $perms\"\ndone",
        "output": "#!/bin/sh\n\nfile_list=\"file1.txt file2.txt file3.txt\"\n\nfor file in $file_list\ndo\n    perms=\"\"\n    if [ -r \"$file\" ]; then\n        perms=\"${perms}read \"\n    fi\n    if [ -w \"$file\" ]; then\n        perms=\"${perms}write \"\n    fi\n    if [ -x \"$file\" ]; then\n        perms=\"${perms}execute\"\n    fi\n\n    echo \"$file: $perms\"\ndone"
    },
    {
        "instruction": "Develop a Python function that reads a CSV file using the 'csv' module and prints the sum of a specific column, specified by its header.",
        "input": "example.csv\nheader1,header2,header3\n1,3,5\n2,4,6\n3,5,7\ncolumn_header: header2",
        "response": "import csv\n\ndef sum_column(csv_filename, column_header):\n    with open(csv_filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        total = 0\n        for row in reader:\n            total += float(row[column_header])\n    return total\n\ncsv_filename = 'example.csv'\ncolumn_header = 'header2'\nresult = sum_column(csv_filename, column_header)\nprint(f'Total of column {column_header}: {result}')",
        "output": "import csv\n\ndef sum_column(csv_filename, column_header):\n    with open(csv_filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        total = 0\n        for row in reader:\n            total += float(row[column_header])\n    return total\n\ncsv_filename = 'example.csv'\ncolumn_header = 'header2'\nresult = sum_column(csv_filename, column_header)\nprint(f'Total of column {column_header}: {result}')"
    },
    {
        "instruction": "Develop a Python function that takes a list of integers and returns the maximum and minimum values as a tuple.",
        "input": "[56, 23, 89, 12, 74]",
        "response": "def find_min_max(numbers):\n    return (min(numbers), max(numbers))\n\nresult = find_min_max([56, 23, 89, 12, 74])\nprint(result)",
        "output": "def find_min_max(numbers):\n    return (min(numbers), max(numbers))\n\nresult = find_min_max([56, 23, 89, 12, 74])\nprint(result)"
    },
    {
        "instruction": "Can you write a JavaScript function that converts Fahrenheit to Celsius?",
        "input": "77",
        "response": "function fahrenheitToCelsius(fahrenheit) {\n    let celsius = (fahrenheit - 32) * 5 / 9;\n    return celsius;}\n\nconst convertedValue = fahrenheitToCelsius(77);\nconsole.log(convertedValue);",
        "output": "function fahrenheitToCelsius(fahrenheit) {\n    let celsius = (fahrenheit - 32) * 5 / 9;\n    return celsius;}\n\nconst convertedValue = fahrenheitToCelsius(77);\nconsole.log(convertedValue);"
    },
    {
        "instruction": "Create a C# program that takes an input string and reverses its characters.",
        "input": "\"hello\"",
        "response": "using System;\n\nclass ReverseString {\n    static void Main() {\n        string input = \"hello\";\n        char[] reversedCharArray = GetReversedCharArray(input);\n        string reversedString = new string(reversedCharArray);\n        Console.WriteLine(reversedString);\n    }\n\n    static char[] GetReversedCharArray(string original) {\n        char[] arr = original.ToCharArray();\n        Array.Reverse(arr);\n        return arr;\n    }}",
        "output": "using System;\n\nclass ReverseString {\n    static void Main() {\n        string input = \"hello\";\n        char[] reversedCharArray = GetReversedCharArray(input);\n        string reversedString = new string(reversedCharArray);\n        Console.WriteLine(reversedString);\n    }\n\n    static char[] GetReversedCharArray(string original) {\n        char[] arr = original.ToCharArray();\n        Array.Reverse(arr);\n        return arr;\n    }}"
    },
    {
        "instruction": "Develop a Bash script to count the number of files in a given directory.",
        "input": "~/Documents",
        "response": "#!/bin/bash\n\nDIRECTORY=\"~/Documents\"\nfile_count=$(ls -1 $DIRECTORY | wc -l)\necho \"There are $file_count files in $DIRECTORY\"",
        "output": "#!/bin/bash\n\nDIRECTORY=\"~/Documents\"\nfile_count=$(ls -1 $DIRECTORY | wc -l)\necho \"There are $file_count files in $DIRECTORY\""
    },
    {
        "instruction": "Write a C program to find the factorial of a given number using a recursive function.",
        "input": "5",
        "response": "#include<stdio.h>\n\nlong int factorial(int n);\n\nint main() {\n    int n = 5;\n    printf(\"Factorial of %d is %ld\\n\", n, factorial(n));\n    return 0;}\n\nlong int factorial(int n) {\n    if(n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}",
        "output": "#include<stdio.h>\n\nlong int factorial(int n);\n\nint main() {\n    int n = 5;\n    printf(\"Factorial of %d is %ld\\n\", n, factorial(n));\n    return 0;}\n\nlong int factorial(int n) {\n    if(n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}"
    },
    {
        "instruction": "How would you implement a LinkedList data structure in Python?",
        "input": "",
        "response": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next:\n                curr = curr.next\n            curr.next = new_node\n\n    def display(self):\n        curr = self.head\n        while curr:\n            print(curr.data, end=' -> ')\n            curr = curr.next\n        print('None')",
        "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next:\n                curr = curr.next\n            curr.next = new_node\n\n    def display(self):\n        curr = self.head\n        while curr:\n            print(curr.data, end=' -> ')\n            curr = curr.next\n        print('None')"
    },
    {
        "instruction": "Create a JavaScript function that sorts an array of strings by length, in ascending order.",
        "input": "[\"apple\", \"banana\", \"cherry\", \"date\"]",
        "response": "function sortByLength(arr) {\n    return arr.sort((a, b) => a.length - b.length);}\n\nconst fruits = [\"apple\", \"banana\", \"cherry\", \"date\"];\nconst sortedFruits = sortByLength(fruits);\nconsole.log(sortedFruits);",
        "output": "function sortByLength(arr) {\n    return arr.sort((a, b) => a.length - b.length);}\n\nconst fruits = [\"apple\", \"banana\", \"cherry\", \"date\"];\nconst sortedFruits = sortByLength(fruits);\nconsole.log(sortedFruits);"
    },
    {
        "instruction": "Write a C++ program that reads a file line by line and counts the number of characters in each line.",
        "input": "example.txt (contents): \"Hello, World!\\nWelcome to OpenAI.\\n\"",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inputFile(\"example.txt\");\n    if (!inputFile) {\n        std::cerr << \"Cannot open file.\\n\";\n        return 1;\n    }\n\n    std::string line;\n    while (std::getline(inputFile, line)) {\n        std::cout << \"Line length: \" << line.length() << std::endl;\n    }\n\n    inputFile.close();\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inputFile(\"example.txt\");\n    if (!inputFile) {\n        std::cerr << \"Cannot open file.\\n\";\n        return 1;\n    }\n\n    std::string line;\n    while (std::getline(inputFile, line)) {\n        std::cout << \"Line length: \" << line.length() << std::endl;\n    }\n\n    inputFile.close();\n    return 0;}"
    },
    {
        "instruction": "Develop a C++ function that determines if a provided number is prime.",
        "input": "97",
        "response": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i <= sqrt(num); ++i) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int number = 97;\n    std::cout << (is_prime(number) ? \"Prime\" : \"Not Prime\") << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i <= sqrt(num); ++i) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int number = 97;\n    std::cout << (is_prime(number) ? \"Prime\" : \"Not Prime\") << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python script that reads the content of a text file and writes its reversed version into a new file.",
        "input": "Input file: 'input.txt', Output file: 'reversed.txt'",
        "response": "def reverse_file_content(input_file, output_file):\n    with open(input_file, 'r') as file:\n        content = file.read()\n    reversed_content = content[::-1]\n    with open(output_file, 'w') as file:\n        file.write(reversed_content)\n\ninput_path = 'input.txt'\noutput_path = 'reversed.txt'\nreverse_file_content(input_path, output_path)",
        "output": "def reverse_file_content(input_file, output_file):\n    with open(input_file, 'r') as file:\n        content = file.read()\n    reversed_content = content[::-1]\n    with open(output_file, 'w') as file:\n        file.write(reversed_content)\n\ninput_path = 'input.txt'\noutput_path = 'reversed.txt'\nreverse_file_content(input_path, output_path)"
    },
    {
        "instruction": "Implement a shell script that takes a file or directory name as an argument and counts the number of characters in it.",
        "input": "Argument: 'sample.txt'",
        "response": "#!/bin/bash\n\ntarget=$1\n\nif [ -f \"$target\" ]; then\n    char_count=$(cat \"$target\" | wc -m)\n    echo \"File '$target' contains $char_count characters.\"\nelif [ -d \"$target\" ]; then\n    char_count=$(find \"$target\" -type f -exec cat {} \\; | wc -m)\n    echo \"Directory '$target' contains $char_count characters.\"\nelse\n    echo \"'$target' is not a valid file or directory.\"\nfi",
        "output": "#!/bin/bash\n\ntarget=$1\n\nif [ -f \"$target\" ]; then\n    char_count=$(cat \"$target\" | wc -m)\n    echo \"File '$target' contains $char_count characters.\"\nelif [ -d \"$target\" ]; then\n    char_count=$(find \"$target\" -type f -exec cat {} \\; | wc -m)\n    echo \"Directory '$target' contains $char_count characters.\"\nelse\n    echo \"'$target' is not a valid file or directory.\"\nfi"
    },
    {
        "instruction": "What would be the JavaScript code to create an express server that responds with a JSON object containing a message 'Welcome to the API' on a GET request to '/', and with a message 'Invalid path' for any other request path?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n    res.json({message: 'Welcome to the API'});});\n\napp.use('*', (req, res) => {\n    res.status(404).json({message: 'Invalid path'});});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n    res.json({message: 'Welcome to the API'});});\n\napp.use('*', (req, res) => {\n    res.status(404).json({message: 'Invalid path'});});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});"
    },
    {
        "instruction": "How would you implement a Shell script that takes a directory name as an argument and prints the number of files in it?",
        "input": "/home/test_directory",
        "response": "#!/bin/bash\n\ndirectory=$1\nfile_count=$(find \"$directory\" -type f | wc -l)\n\necho \"Number of files in '\"$directory\"' is: $file_count\"",
        "output": "#!/bin/bash\n\ndirectory=$1\nfile_count=$(find \"$directory\" -type f | wc -l)\n\necho \"Number of files in '\"$directory\"' is: $file_count\""
    },
    {
        "instruction": "Please create a Python script that reads a text file line by line and prints the line number and content of each line.",
        "input": "myfile.txt",
        "response": "with open('myfile.txt', 'r') as file:\n    for index, line in enumerate(file, start=1):\n        print(f'Line {index}: {line.strip()}')",
        "output": "with open('myfile.txt', 'r') as file:\n    for index, line in enumerate(file, start=1):\n        print(f'Line {index}: {line.strip()}')"
    },
    {
        "instruction": "Design a simple web server in Node.js that returns a JSON object containing a greeting and the current date and time.",
        "input": "",
        "response": "const http = require('http');\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({\n        greeting: 'Hello, the current date and time are:',\n        dateTime: new Date().toISOString()\n    }));});\n\nserver.listen(port, () => {\n    console.log(`Server running at port ${port}`);});",
        "output": "const http = require('http');\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({\n        greeting: 'Hello, the current date and time are:',\n        dateTime: new Date().toISOString()\n    }));});\n\nserver.listen(port, () => {\n    console.log(`Server running at port ${port}`);});"
    },
    {
        "instruction": "Implement a C++ function that takes a string and reverses its characters.",
        "input": "\"Hello, world!\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nstd::string reverse_string(const std::string &input) {\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string input = \"Hello, world!\";\n    std::string result = reverse_string(input);\n    std::cout << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nstd::string reverse_string(const std::string &input) {\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string input = \"Hello, world!\";\n    std::string result = reverse_string(input);\n    std::cout << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Develop a Python script that reads a file and prints the number of occurrences of a given word.",
        "input": "filename: \"example.txt\", word: \"apple\"",
        "response": "def count_word_occurrences(filename, word):\n    with open(filename, 'r') as file:\n        content = file.read()\n        words = content.split()\n        count = words.count(word)\n    return count\n\nfilename = \"example.txt\"\nword = \"apple\"\noccurrences = count_word_occurrences(filename, word)\nprint(f'\"{word}\" occurs {occurrences} times in the file.')",
        "output": "def count_word_occurrences(filename, word):\n    with open(filename, 'r') as file:\n        content = file.read()\n        words = content.split()\n        count = words.count(word)\n    return count\n\nfilename = \"example.txt\"\nword = \"apple\"\noccurrences = count_word_occurrences(filename, word)\nprint(f'\"{word}\" occurs {occurrences} times in the file.')"
    },
    {
        "instruction": "How would you create a function in JavaScript that, when given an HTML element id, sets the content of that element to a particular string?",
        "input": "element_id: \"example\", content: \"Hello, world!\"",
        "response": "function setContentById(element_id, content) {\n    document.getElementById(element_id).innerHTML = content;}\n\nconst element_id = 'example';\nconst content = 'Hello, world!';\nsetContentById(element_id, content);",
        "output": "function setContentById(element_id, content) {\n    document.getElementById(element_id).innerHTML = content;}\n\nconst element_id = 'example';\nconst content = 'Hello, world!';\nsetContentById(element_id, content);"
    },
    {
        "instruction": "Write a Shell script that creates a new directory, moves into it and creates a blank file with a given file name.",
        "input": "directory_name: \"new_directory\", file_name: \"file.txt\"",
        "response": "#!/bin/bash\n\ndirectory_name=\"new_directory\"\nfile_name=\"file.txt\"\n\nmkdir \"$directory_name\"\ncd \"$directory_name\"\ntouch \"$file_name\"",
        "output": "#!/bin/bash\n\ndirectory_name=\"new_directory\"\nfile_name=\"file.txt\"\n\nmkdir \"$directory_name\"\ncd \"$directory_name\"\ntouch \"$file_name\""
    },
    {
        "instruction": "Design a C++ function that calculates the factorial of a given number using a recursive approach.",
        "input": "5",
        "response": "long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    long long result = factorial(number);\n    cout << \"The factorial of \" << number << \" is \" << result << endl;\n    return 0;}",
        "output": "long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    long long result = factorial(number);\n    cout << \"The factorial of \" << number << \" is \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Python script that fetches data from a RESTful API and filters the JSON results based on a given attribute value?",
        "input": "https://api.example.com/data, {\"type\": \"fruit\", \"color\": \"red\"}",
        "response": "import requests\n\ndef fetch_and_filter_data(api_url, filter_by):\n    response = requests.get(api_url)\n    if response.status_code == 200:\n        data = response.json()\n        filtered_data = [item for item in data if all(item[key] == value for key, value in filter_by.items())]\n        return filtered_data\n    else:\n        raise ValueError('Failed to fetch data from API')\n\napi_url = 'https://api.example.com/data'\nfilter_by = {\"type\": \"fruit\", \"color\": \"red\"}\nresult = fetch_and_filter_data(api_url, filter_by)\nprint(result)",
        "output": "import requests\n\ndef fetch_and_filter_data(api_url, filter_by):\n    response = requests.get(api_url)\n    if response.status_code == 200:\n        data = response.json()\n        filtered_data = [item for item in data if all(item[key] == value for key, value in filter_by.items())]\n        return filtered_data\n    else:\n        raise ValueError('Failed to fetch data from API')\n\napi_url = 'https://api.example.com/data'\nfilter_by = {\"type\": \"fruit\", \"color\": \"red\"}\nresult = fetch_and_filter_data(api_url, filter_by)\nprint(result)"
    },
    {
        "instruction": "Develop a JavaScript function that converts a camelCase string to a snake_case string.",
        "input": "\"convertThisString\"",
        "response": "function camelToSnake(str) {\n    return str.replace(/[A-Z]/g, match => '_'+match.toLowerCase());}\n\nlet input_string = 'convertThisString';\nlet snake_case_string = camelToSnake(input_string);\nconsole.log(snake_case_string);",
        "output": "function camelToSnake(str) {\n    return str.replace(/[A-Z]/g, match => '_'+match.toLowerCase());}\n\nlet input_string = 'convertThisString';\nlet snake_case_string = camelToSnake(input_string);\nconsole.log(snake_case_string);"
    },
    {
        "instruction": "Implement a shell script that takes a directory as an argument and finds the number of files and subdirectories present in that directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/sh\n\ndirectory=\"$1\"\nif [ -d \"$directory\" ]; then\n    file_count=$(find \"$directory\" -type f | wc -l)\n    dir_count=$(find \"$directory\" -type d | wc -l)\n    echo \"Number of files: $file_count\"\n    echo \"Number of subdirectories: $(($dir_count-1))\"\nelse\n    echo \"Invalid directory path\"\nfi",
        "output": "#!/bin/sh\n\ndirectory=\"$1\"\nif [ -d \"$directory\" ]; then\n    file_count=$(find \"$directory\" -type f | wc -l)\n    dir_count=$(find \"$directory\" -type d | wc -l)\n    echo \"Number of files: $file_count\"\n    echo \"Number of subdirectories: $(($dir_count-1))\"\nelse\n    echo \"Invalid directory path\"\nfi"
    },
    {
        "instruction": "Write a C++ function to calculate the factorial of a given positive integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \": \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \": \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a function in JavaScript that reverses the words in a given sentence?",
        "input": "\"This is a test sentence.\"",
        "response": "function reverseWords(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.reverse().join(' ');\n    return reversedWords;}\n\nconst input = \"This is a test sentence.\";\nconsole.log(reverseWords(input));",
        "output": "function reverseWords(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.reverse().join(' ');\n    return reversedWords;}\n\nconst input = \"This is a test sentence.\";\nconsole.log(reverseWords(input));"
    },
    {
        "instruction": "Develop a Python program that reads a file named 'input.txt' and counts the number of lines, words, and characters in the file.",
        "input": "input.txt content: \"First line of the file\nSecond line of the file\nThird line, last one.\"",
        "response": "def count_file_content(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n        line_count = len(lines)\n        word_count = sum(len(line.split()) for line in lines)\n        char_count = sum(len(line.replace('\\n', '')) for line in lines)\n    \n    return line_count, word_count, char_count\n\nfilename = 'input.txt'\nline_count, word_count, char_count = count_file_content(filename)\nprint(f'Line count: {line_count}\\nWord count: {word_count}\\nCharacter count: {char_count}')",
        "output": "def count_file_content(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n        line_count = len(lines)\n        word_count = sum(len(line.split()) for line in lines)\n        char_count = sum(len(line.replace('\\n', '')) for line in lines)\n    \n    return line_count, word_count, char_count\n\nfilename = 'input.txt'\nline_count, word_count, char_count = count_file_content(filename)\nprint(f'Line count: {line_count}\\nWord count: {word_count}\\nCharacter count: {char_count}')"
    },
    {
        "instruction": "Create a PHP script to find all prime numbers within a given range.",
        "input": "2, 50",
        "response": "<?php\nfunction is_prime($num) {\n    if ($num <= 1) return false;\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) return false;\n    }\n    return true;}\n\nfunction find_primes_in_range($start, $end) {\n    $primes = [];\n    for ($i = $start; $i <= $end; $i++) {\n        if (is_prime($i)) {\n            $primes[] = $i;\n        }\n    }\n    return $primes;}\n\n$primes = find_primes_in_range(2, 50);\necho implode(', ', $primes);\n?>",
        "output": "<?php\nfunction is_prime($num) {\n    if ($num <= 1) return false;\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) return false;\n    }\n    return true;}\n\nfunction find_primes_in_range($start, $end) {\n    $primes = [];\n    for ($i = $start; $i <= $end; $i++) {\n        if (is_prime($i)) {\n            $primes[] = $i;\n        }\n    }\n    return $primes;}\n\n$primes = find_primes_in_range(2, 50);\necho implode(', ', $primes);\n?>"
    },
    {
        "instruction": "Develop a C++ function to calculate the factorial of a given number.",
        "input": "4",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int number = 4;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int number = 4;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a JavaScript function to sort a given array of numbers in descending order using the bubble sort algorithm.",
        "input": "[8, 2, 6, 10, 4]",
        "response": "function bubbleSortDescending(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n            if (arr[j] < arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;}\n\nconst result = bubbleSortDescending([8, 2, 6, 10, 4]);\nconsole.log(result);",
        "output": "function bubbleSortDescending(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n            if (arr[j] < arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;}\n\nconst result = bubbleSortDescending([8, 2, 6, 10, 4]);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Python program that reads the content of a text file, reverses the order of lines, and writes the reversed content back to the same file.",
        "input": "sample.txt (Content: 'Line1\\nLine2\\nLine3\\nLine4')",
        "response": "def reverse_file_lines(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n    lines.reverse()\n\n    with open(filename, 'w') as file:\n        for line in lines:\n            file.write(line)\n\nreverse_file_lines('sample.txt')",
        "output": "def reverse_file_lines(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n    lines.reverse()\n\n    with open(filename, 'w') as file:\n        for line in lines:\n            file.write(line)\n\nreverse_file_lines('sample.txt')"
    },
    {
        "instruction": "How would you implement a basic REST API in Go that supports a GET request to fetch user information by user ID?",
        "input": "https://example.com/api/users/3",
        "response": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"github.com/gorilla/mux\" // Install using: go get -u github.com/gorilla/mux\n)\n\ntype User struct {\n    ID   string\n    Name string}\n\nvar users = []User{\n    {ID: \"1\", Name: \"John Doe\"},\n    {ID: \"2\", Name: \"Jane Doe\"},\n    {ID: \"3\", Name: \"Bob Smith\"},}\n\nfunc getUser(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    idStr := vars[\"id\"]\n    \n    for _, user := range users {\n        if user.ID == idStr {\n            fmt.Fprintf(w, \"ID: %s, Name: %s\\n\", user.ID, user.Name)\n            break\n        }\n    }}\n\nfunc main() {\n    router := mux.NewRouter()\n    router.HandleFunc(\"/api/users/{id}\", getUser).Methods(\"GET\")\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))}",
        "output": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"github.com/gorilla/mux\" // Install using: go get -u github.com/gorilla/mux\n)\n\ntype User struct {\n    ID   string\n    Name string}\n\nvar users = []User{\n    {ID: \"1\", Name: \"John Doe\"},\n    {ID: \"2\", Name: \"Jane Doe\"},\n    {ID: \"3\", Name: \"Bob Smith\"},}\n\nfunc getUser(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    idStr := vars[\"id\"]\n    \n    for _, user := range users {\n        if user.ID == idStr {\n            fmt.Fprintf(w, \"ID: %s, Name: %s\\n\", user.ID, user.Name)\n            break\n        }\n    }}\n\nfunc main() {\n    router := mux.NewRouter()\n    router.HandleFunc(\"/api/users/{id}\", getUser).Methods(\"GET\")\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))}"
    },
    {
        "instruction": "Design a Python function that accepts a list of integers as input and filters out the even numbers.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def filter_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\nresult = filter_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(result)",
        "output": "def filter_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\nresult = filter_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(result)"
    },
    {
        "instruction": "How would you implement a simple counter using JavaScript that keeps track of clicks on a button?",
        "input": "<button id='myButton'>Click me</button>",
        "response": "let clickCounter = 0;\nconst button = document.getElementById('myButton');\n\nbutton.addEventListener('click', () => {\n    clickCounter++;\n    console.log(`Button has been clicked ${clickCounter} times.`);});",
        "output": "let clickCounter = 0;\nconst button = document.getElementById('myButton');\n\nbutton.addEventListener('click', () => {\n    clickCounter++;\n    console.log(`Button has been clicked ${clickCounter} times.`);});"
    },
    {
        "instruction": "Write C++ code to create a class called Person with a constructor that takes a string for the person's name, an integer for their age, and a method called 'greet' that prints a greeting with the person's name and age.",
        "input": "John Doe, 30",
        "response": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    Person(std::string n, int a) : name(n), age(a) {}\n    void greet() {\n        std::cout << \"Hello, my name is \" << name << \" and I am \" << age << \" years old.\" << std::endl;\n    }\n\nprivate:\n    std::string name;\n    int age;};\n\nint main() {\n    Person p(\"John Doe\", 30);\n    p.greet();\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    Person(std::string n, int a) : name(n), age(a) {}\n    void greet() {\n        std::cout << \"Hello, my name is \" << name << \" and I am \" << age << \" years old.\" << std::endl;\n    }\n\nprivate:\n    std::string name;\n    int age;};\n\nint main() {\n    Person p(\"John Doe\", 30);\n    p.greet();\n    return 0;}"
    },
    {
        "instruction": "Create a function in PHP that takes a string as input and reverses its characters.",
        "input": "\"Hello, world!\"",
        "response": "<?php\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$reversed_string = reverse_string(\"Hello, world!\");\necho $reversed_string;\n?>",
        "output": "<?php\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$reversed_string = reverse_string(\"Hello, world!\");\necho $reversed_string;\n?>"
    },
    {
        "instruction": "Write a C++ function that reads a file and stores its lines into a vector of strings.",
        "input": "example.txt",
        "response": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFile(std::string file_name) {\n    std::ifstream file(file_name);\n    std::vector<std::string> lines;\n    std::string line;\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    file.close();\n    return lines;}\n\nint main() {\n    std::vector<std::string> lines = readFile(\"example.txt\");\n    for (const auto &line : lines) {\n        std::cout << line << std::endl;\n    }}",
        "output": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFile(std::string file_name) {\n    std::ifstream file(file_name);\n    std::vector<std::string> lines;\n    std::string line;\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    file.close();\n    return lines;}\n\nint main() {\n    std::vector<std::string> lines = readFile(\"example.txt\");\n    for (const auto &line : lines) {\n        std::cout << line << std::endl;\n    }}"
    },
    {
        "instruction": "How would you implement a Python program that calculates the average of a given list of numbers?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def calculate_average(numbers):\n    return sum(numbers) / len(numbers)\n\nnumbers_list = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers_list)\nprint(average)",
        "output": "def calculate_average(numbers):\n    return sum(numbers) / len(numbers)\n\nnumbers_list = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers_list)\nprint(average)"
    },
    {
        "instruction": "Design a JavaScript function that takes a string input and returns the count of vowels and consonants in an object.",
        "input": "\"sample text\"",
        "response": "function countVowelsAndConsonants(str) {\n    const vowels = 'aeiouAEIOU';\n    let vowelCount = 0;\n    let consonantCount = 0;\n\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            vowelCount++;\n        } else if (char.match(/[a-zA-Z]/)) {\n            consonantCount++;\n        }\n    }\n\n    return { vowels: vowelCount, consonants: consonantCount };}\n\nconst inputString = 'sample text';\nconst result = countVowelsAndConsonants(inputString);\nconsole.log(result);",
        "output": "function countVowelsAndConsonants(str) {\n    const vowels = 'aeiouAEIOU';\n    let vowelCount = 0;\n    let consonantCount = 0;\n\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            vowelCount++;\n        } else if (char.match(/[a-zA-Z]/)) {\n            consonantCount++;\n        }\n    }\n\n    return { vowels: vowelCount, consonants: consonantCount };}\n\nconst inputString = 'sample text';\nconst result = countVowelsAndConsonants(inputString);\nconsole.log(result);"
    },
    {
        "instruction": "Develop a shell script that takes a directory path as input and finds all files within the directory with a given extension, then prints their names.",
        "input": "/path/to/directory .txt",
        "response": "#!/bin/bash\n\ndirectory=\"$1\"\nextension=\"*${2}\"\n\nfind \"$directory\" -type f -name \"$extension\" -print",
        "output": "#!/bin/bash\n\ndirectory=\"$1\"\nextension=\"*${2}\"\n\nfind \"$directory\" -type f -name \"$extension\" -print"
    },
    {
        "instruction": "Design a C++ function that accepts a vector of integers and returns the average value of its elements.",
        "input": "{5, 8, 10, 20}",
        "response": "#include <iostream>\n#include <vector>\n\ndouble average(const std::vector<int>& v) {\n    double sum = 0;\n    for (int num : v) {\n        sum += num;\n    }\n    return sum / v.size();}\n\nint main() {\n    std::vector<int> input{5, 8, 10, 20};\n    double result = average(input);\n    std::cout << \"Average: \" << result << std::endl;}",
        "output": "#include <iostream>\n#include <vector>\n\ndouble average(const std::vector<int>& v) {\n    double sum = 0;\n    for (int num : v) {\n        sum += num;\n    }\n    return sum / v.size();}\n\nint main() {\n    std::vector<int> input{5, 8, 10, 20};\n    double result = average(input);\n    std::cout << \"Average: \" << result << std::endl;}"
    },
    {
        "instruction": "How would you implement a Python function that takes a sentence as input and returns a dictionary containing the count of each word?",
        "input": "\"Hello world, welcome to the universe.\"",
        "response": "def word_count(sentence):\n    word_list = sentence.lower().split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\ninput_sentence = \"Hello world, welcome to the universe.\"\nresult = word_count(input_sentence)\nprint(result)",
        "output": "def word_count(sentence):\n    word_list = sentence.lower().split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\ninput_sentence = \"Hello world, welcome to the universe.\"\nresult = word_count(input_sentence)\nprint(result)"
    },
    {
        "instruction": "Write a C# method that takes a string input and reverses it, without using any built-in reverse methods.",
        "input": "\"abcdefg\"",
        "response": "using System;\n\nclass Program {\n    static string ReverseString(string input) {\n        char[] inputChars = input.ToCharArray();\n        int left = 0, right = input.Length - 1;\n        while (left < right) {\n            char temp = inputChars[left];\n            inputChars[left] = inputChars[right];\n            inputChars[right] = temp;\n            left++;\n            right--;\n        }\n        return new string(inputChars);\n    }\n\n    static void Main() {\n        string input = \"abcdefg\";\n        string reversed = ReverseString(input);\n        Console.WriteLine(reversed);\n    }}",
        "output": "using System;\n\nclass Program {\n    static string ReverseString(string input) {\n        char[] inputChars = input.ToCharArray();\n        int left = 0, right = input.Length - 1;\n        while (left < right) {\n            char temp = inputChars[left];\n            inputChars[left] = inputChars[right];\n            inputChars[right] = temp;\n            left++;\n            right--;\n        }\n        return new string(inputChars);\n    }\n\n    static void Main() {\n        string input = \"abcdefg\";\n        string reversed = ReverseString(input);\n        Console.WriteLine(reversed);\n    }}"
    },
    {
        "instruction": "Create a SQL query that retrieves all employees older than 50 years from the 'employees' table.",
        "input": "employees (id, name, age)",
        "response": "SELECT *\nFROM employees\nWHERE age > 50;",
        "output": "SELECT *\nFROM employees\nWHERE age > 50;"
    },
    {
        "instruction": "Write a C# function that reverses the words in a given sentence.",
        "input": "\"Hello, how are you?\"",
        "response": "using System;\n\nclass Program {\n    static void Main(string[] args) {\n        string input = \"Hello, how are you?\";\n        Console.WriteLine(ReverseWords(input));\n    }\n\n    static string ReverseWords(string sentence) {\n        string[] words = sentence.Split(' ');\n        Array.Reverse(words);\n        return string.Join(' ', words);\n    }}",
        "output": "using System;\n\nclass Program {\n    static void Main(string[] args) {\n        string input = \"Hello, how are you?\";\n        Console.WriteLine(ReverseWords(input));\n    }\n\n    static string ReverseWords(string sentence) {\n        string[] words = sentence.Split(' ');\n        Array.Reverse(words);\n        return string.Join(' ', words);\n    }}"
    },
    {
        "instruction": "Implement a C++ function that reads data from a given file and prints its contents.",
        "input": "\"example.txt\"",
        "response": "#include<iostream>\n#include<fstream>\n#include<string>\n\nvoid readFileAndPrintContents(const std::string &filename) {\n    std::ifstream inputFile(filename);\n    if (inputFile.is_open()) {\n        std::string line;\n        while(getline(inputFile, line)) {\n            std::cout << line << std::endl;\n        }\n        inputFile.close();\n    } else {\n        std::cout << \"Could not open the file.\" << std::endl;\n    }}\n\nint main() {\n    readFileAndPrintContents(\"example.txt\");\n    return 0;}",
        "output": "#include<iostream>\n#include<fstream>\n#include<string>\n\nvoid readFileAndPrintContents(const std::string &filename) {\n    std::ifstream inputFile(filename);\n    if (inputFile.is_open()) {\n        std::string line;\n        while(getline(inputFile, line)) {\n            std::cout << line << std::endl;\n        }\n        inputFile.close();\n    } else {\n        std::cout << \"Could not open the file.\" << std::endl;\n    }}\n\nint main() {\n    readFileAndPrintContents(\"example.txt\");\n    return 0;}"
    },
    {
        "instruction": "How can I create a Python script that downloads a file from a URL and saves it locally?",
        "input": "\"https://example.com/file.txt\", \"file.txt\"",
        "response": "import requests\n\ndef download_file(url, local_filename):\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(local_filename, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n\nurl = 'https://example.com/file.txt'\nlocal_filename = 'file.txt'\ndownload_file(url, local_filename)",
        "output": "import requests\n\ndef download_file(url, local_filename):\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(local_filename, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n\nurl = 'https://example.com/file.txt'\nlocal_filename = 'file.txt'\ndownload_file(url, local_filename)"
    },
    {
        "instruction": "Write a shell script that lists all files in the current directory with a given extension.",
        "input": "\".txt\"",
        "response": "#!/bin/bash\n\nextension=\".txt\"\n\nfor file in *$extension; do\n    echo \"$file\"\ndone",
        "output": "#!/bin/bash\n\nextension=\".txt\"\n\nfor file in *$extension; do\n    echo \"$file\"\ndone"
    },
    {
        "instruction": "Develop a C++ function that finds the maximum value in a vector of integers.",
        "input": "std::vector<int> numbers = {1, 3, 7, 2, 5};",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint find_max_value(std::vector<int> &nums) {\n    return *std::max_element(nums.begin(), nums.end());}\n\nint main() {\n    std::vector<int> numbers = {1, 3, 7, 2, 5};\n    int max_value = find_max_value(numbers);\n    std::cout << \"Max value: \" << max_value << std::endl;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint find_max_value(std::vector<int> &nums) {\n    return *std::max_element(nums.begin(), nums.end());}\n\nint main() {\n    std::vector<int> numbers = {1, 3, 7, 2, 5};\n    int max_value = find_max_value(numbers);\n    std::cout << \"Max value: \" << max_value << std::endl;}"
    },
    {
        "instruction": "How would you implement a simple REST API in Node.js that returns the result of basic arithmetic operations?",
        "input": "Available operations: addition, subtraction, multiplication, and division.",
        "response": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/calculate', (req, res) => {\n    const { operation, num1, num2 } = req.body;\n    let result;\n    switch (operation) {\n        case 'addition':\n            result = num1 + num2;\n            break;\n        case 'subtraction':\n            result = num1 - num2;\n            break;\n        case 'multiplication':\n            result = num1 * num2;\n            break;\n        case 'division':\n            if (num2 === 0) {\n                return res.status(400).send('Division by zero is not allowed.');\n            }\n            result = num1 / num2;\n            break;\n        default:\n            res.status(400).send('Invalid operation.');\n            return;\n    }\n    res.json({ result });});\n\napp.listen(3000, () => {\n    console.log('App is running on port 3000');});",
        "output": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.post('/calculate', (req, res) => {\n    const { operation, num1, num2 } = req.body;\n    let result;\n    switch (operation) {\n        case 'addition':\n            result = num1 + num2;\n            break;\n        case 'subtraction':\n            result = num1 - num2;\n            break;\n        case 'multiplication':\n            result = num1 * num2;\n            break;\n        case 'division':\n            if (num2 === 0) {\n                return res.status(400).send('Division by zero is not allowed.');\n            }\n            result = num1 / num2;\n            break;\n        default:\n            res.status(400).send('Invalid operation.');\n            return;\n    }\n    res.json({ result });});\n\napp.listen(3000, () => {\n    console.log('App is running on port 3000');});"
    },
    {
        "instruction": "Design a Python function that concatenates a list of strings and returns the result.",
        "input": "[\"hello\", \"world\", \"test\"]",
        "response": "def concatenate_strings(strings):\n    return ''.join(strings)\n\nresult = concatenate_strings([\"hello\", \"world\", \"test\"])\nprint(result)",
        "output": "def concatenate_strings(strings):\n    return ''.join(strings)\n\nresult = concatenate_strings([\"hello\", \"world\", \"test\"])\nprint(result)"
    },
    {
        "instruction": "Provide a shell script that counts the number of files and directories in the current directory.",
        "input": "",
        "response": "#!/bin/sh\n\nfile_count=0\ndir_count=0\n\nfor entry in ./*; do\n    if [ -f \"${entry}\" ]; then\n        file_count=$((file_count + 1))\n    elif [ -d \"${entry}\" ]; then\n        dir_count=$((dir_count + 1))\n    fi\ndone\n\necho \"Files: ${file_count}\"\necho \"Directories: ${dir_count}\"",
        "output": "#!/bin/sh\n\nfile_count=0\ndir_count=0\n\nfor entry in ./*; do\n    if [ -f \"${entry}\" ]; then\n        file_count=$((file_count + 1))\n    elif [ -d \"${entry}\" ]; then\n        dir_count=$((dir_count + 1))\n    fi\ndone\n\necho \"Files: ${file_count}\"\necho \"Directories: ${dir_count}\""
    },
    {
        "instruction": "Write a C++ function that calculates the area of a circle when given its radius.",
        "input": "6.0",
        "response": "#include<iostream>\n#include<cmath>\n\n#define PI 3.14159265\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double r = 6.0;\n    std::cout << \"The area of the circle is: \" << circle_area(r) << std::endl;\n    return 0;}",
        "output": "#include<iostream>\n#include<cmath>\n\n#define PI 3.14159265\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double r = 6.0;\n    std::cout << \"The area of the circle is: \" << circle_area(r) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How to create a Python script that reads a CSV file and displays the data in a table-like format?",
        "input": "Name,Age,Occupation\nAlice,30,Engineer\nBob,25,Designer\nCarol,35,Manager",
        "response": "import csv\n\ncsv_data = \"\"\"Name,Age,Occupation\nAlice,30,Engineer\nBob,25,Designer\nCarol,35,Manager\"\"\"\n\ndef display_csv(data):\n    rows = csv.reader(data.splitlines())\n    longest_cols = [max(len(str(value)) for value in col) for col in zip(*rows)]\n\n    data.seek(0)\n    for row in rows:\n        print('{:<{}}  {:<{}}  {:<{}}'.format(*row, *longest_cols))\n\ncsv_file = StringIO(csv_data)\ndisplay_csv(csv_file)",
        "output": "import csv\n\ncsv_data = \"\"\"Name,Age,Occupation\nAlice,30,Engineer\nBob,25,Designer\nCarol,35,Manager\"\"\"\n\ndef display_csv(data):\n    rows = csv.reader(data.splitlines())\n    longest_cols = [max(len(str(value)) for value in col) for col in zip(*rows)]\n\n    data.seek(0)\n    for row in rows:\n        print('{:<{}}  {:<{}}  {:<{}}'.format(*row, *longest_cols))\n\ncsv_file = StringIO(csv_data)\ndisplay_csv(csv_file)"
    },
    {
        "instruction": "Construct a JavaScript snippet that filters out all odd numbers from an array of integers.",
        "input": "[13, 5, 24, 19, 47, 98, 12, 4]",
        "response": "function filterEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst input = [13, 5, 24, 19, 47, 98, 12, 4];\nconst result = filterEvenNumbers(input);\nconsole.log(result);",
        "output": "function filterEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst input = [13, 5, 24, 19, 47, 98, 12, 4];\nconst result = filterEvenNumbers(input);\nconsole.log(result);"
    },
    {
        "instruction": "Write a shell script that recursively finds all the '*.txt' files in a directory and prints their content.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nsearch_directory=\"/path/to/directory\"\n\nfind \"$search_directory\" -type f -iname \"*.txt\" -exec cat {} \\;\n\n# Usage: Save the script as 'view_txt_files.sh', and run it using 'sh view_txt_files.sh' or 'bash view_txt_files.sh' from the terminal.",
        "output": "#!/bin/bash\n\nsearch_directory=\"/path/to/directory\"\n\nfind \"$search_directory\" -type f -iname \"*.txt\" -exec cat {} \\;\n\n# Usage: Save the script as 'view_txt_files.sh', and run it using 'sh view_txt_files.sh' or 'bash view_txt_files.sh' from the terminal."
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given positive integer.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "In JavaScript, create a function to carry out the Bubble Sort algorithm on an array of integers.",
        "input": "[5, 2, 9, 1, 5, 6]",
        "response": "function bubbleSort(arr) {\n    let swap;\n    let n = arr.length;\n\n    do {\n        swap = false;\n        for (let i = 0; i < n - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                const temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                swap = true;\n            }\n        }\n        n--;\n    } while (swap);\n\n    return arr;}\n\nconst sortedArr = bubbleSort([5, 2, 9, 1, 5, 6]);\nconsole.log(sortedArr);",
        "output": "function bubbleSort(arr) {\n    let swap;\n    let n = arr.length;\n\n    do {\n        swap = false;\n        for (let i = 0; i < n - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                const temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                swap = true;\n            }\n        }\n        n--;\n    } while (swap);\n\n    return arr;}\n\nconst sortedArr = bubbleSort([5, 2, 9, 1, 5, 6]);\nconsole.log(sortedArr);"
    },
    {
        "instruction": "Write a Python function that converts a text string to Pig Latin, moving the first letter of each word to the end of the word followed by 'ay'.",
        "input": "\"This is an example\"",
        "response": "def pig_latin(sentence):\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        pig_word = word[1:] + word[0] + 'ay'\n        result.append(pig_word)\n\n    return ' '.join(result)\n\nconverted_text = pig_latin(\"This is an example\")\nprint(converted_text)",
        "output": "def pig_latin(sentence):\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        pig_word = word[1:] + word[0] + 'ay'\n        result.append(pig_word)\n\n    return ' '.join(result)\n\nconverted_text = pig_latin(\"This is an example\")\nprint(converted_text)"
    },
    {
        "instruction": "Write a SQL query to retrieve all records from the 'employees' table where the employee's salary is greater than a specified value.",
        "input": "50000",
        "response": "SELECT *\nFROM employees\nWHERE salary > 50000;",
        "output": "SELECT *\nFROM employees\nWHERE salary > 50000;"
    },
    {
        "instruction": "Write a C++ function to calculate the factorial of a given integer.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Design a JavaScript program that calculates the Fibonacci sequence up to a given number of iterations.",
        "input": "8",
        "response": "function fibonacci(n) {\n    const fibSeq = [0, 1];\n    for (let i = 2; i < n; i++) {\n        fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n    }\n    return fibSeq;}\n\nconst numIterations = 8;\nconsole.log(\"Fibonacci sequence after \" + numIterations + \" iterations: \" + fibonacci(numIterations));",
        "output": "function fibonacci(n) {\n    const fibSeq = [0, 1];\n    for (let i = 2; i < n; i++) {\n        fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n    }\n    return fibSeq;}\n\nconst numIterations = 8;\nconsole.log(\"Fibonacci sequence after \" + numIterations + \" iterations: \" + fibonacci(numIterations));"
    },
    {
        "instruction": "Create a Bash script that lists all the files in a given directory, along with their size, and sorts them by size.",
        "input": "/path/to/example_directory",
        "response": "#!/bin/bash\n\ndir=\"/path/to/example_directory\"\nls -lSh \"${dir}\"",
        "output": "#!/bin/bash\n\ndir=\"/path/to/example_directory\"\nls -lSh \"${dir}\""
    },
    {
        "instruction": "How can you implement a basic web server using Python?",
        "input": "Doc_root: './htdocs'",
        "response": "# Python 3.x\nimport http.server\nimport socketserver\n\ndoc_root = './htdocs'\nport = 8000\n\nhandler = http.server.SimpleHTTPRequestHandler\nhandler.directory = doc_root\nhttpd = socketserver.TCPServer(('', port), handler)\n\nprint(f'Serving on port {port}')\nhttpd.serve_forever()",
        "output": "# Python 3.x\nimport http.server\nimport socketserver\n\ndoc_root = './htdocs'\nport = 8000\n\nhandler = http.server.SimpleHTTPRequestHandler\nhandler.directory = doc_root\nhttpd = socketserver.TCPServer(('', port), handler)\n\nprint(f'Serving on port {port}')\nhttpd.serve_forever()"
    },
    {
        "instruction": "Develop a C++ program that reads a text file and outputs the number of lines in the file.",
        "input": "example.txt containing:\nThis is a text file.\nIt has multiple lines.\nThis is the third line.",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"example.txt\");\n    std::string line;\n    int line_count = 0;\n\n    while (std::getline(file, line)) {\n        line_count++;\n    }\n\n    std::cout << \"Number of lines: \" << line_count << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"example.txt\");\n    std::string line;\n    int line_count = 0;\n\n    while (std::getline(file, line)) {\n        line_count++;\n    }\n\n    std::cout << \"Number of lines: \" << line_count << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "How can you implement a Python RESTful API using the Flask framework that accepts a GET request and returns the message 'Hello, World!'?",
        "input": "GET request to '/' endpoint",
        "response": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET'])\ndef hello_world():\n    return jsonify(message='Hello, World!')\n\nif __name__ == '__main__':\n    app.run()",
        "output": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET'])\ndef hello_world():\n    return jsonify(message='Hello, World!')\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Write a shell script that lists all files in the directory and saves the output to a text file.",
        "input": "Directory containing files: file1.txt, file2.txt, file3.txt",
        "response": "#!/bin/sh\n\nls > file_list.txt",
        "output": "#!/bin/sh\n\nls > file_list.txt"
    },
    {
        "instruction": "Create a JavaScript function that takes a string input and reverses the words in the string without using any built-in reverse methods.",
        "input": "\"This is an example of reversing words\"",
        "response": "function reverseWords(str) {\n    const words = str.split(' ');\n    let reversed = [];\n\n    for (let i = words.length - 1, j = 0; i >= 0; i--, j++) {\n        reversed[j] = words[i];\n    }\n\n    return reversed.join(' ');\n}\n\nconsole.log(reverseWords(\"This is an example of reversing words\"));",
        "output": "function reverseWords(str) {\n    const words = str.split(' ');\n    let reversed = [];\n\n    for (let i = words.length - 1, j = 0; i >= 0; i--, j++) {\n        reversed[j] = words[i];\n    }\n\n    return reversed.join(' ');\n}\n\nconsole.log(reverseWords(\"This is an example of reversing words\"));"
    },
    {
        "instruction": "Write a C program that takes a user input string, reverses it, and prints the reversed string.",
        "input": "\"Hello, World!\"",
        "response": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char user_input[100], reversed[100];\n    printf(\"Enter a string: \");\n    fgets(user_input, 100, stdin);\n    size_t len = strlen(user_input);\n    for (size_t i = 0; i < len; i++) {\n        reversed[i] = user_input[len - i - 1];\n    }\n    reversed[len] = '\\0';\n    printf(\"Reversed string: %s\", reversed);\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char user_input[100], reversed[100];\n    printf(\"Enter a string: \");\n    fgets(user_input, 100, stdin);\n    size_t len = strlen(user_input);\n    for (size_t i = 0; i < len; i++) {\n        reversed[i] = user_input[len - i - 1];\n    }\n    reversed[len] = '\\0';\n    printf(\"Reversed string: %s\", reversed);\n    return 0;\n}"
    },
    {
        "instruction": "How can we implement a simple API request using JavaScript's Fetch API?",
        "input": "https://jsonplaceholder.typicode.com/users",
        "response": "async function fetchApiData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nfetchApiData('https://jsonplaceholder.typicode.com/users');",
        "output": "async function fetchApiData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nfetchApiData('https://jsonplaceholder.typicode.com/users');"
    },
    {
        "instruction": "Develop a Python script that reads information from a CSV file and calculates the average of a specific column.",
        "input": "data.csv\nid,name,score\n1,John,75\n2,Jane,85\n3,Jim,90",
        "response": "import csv\n\nfilename = 'data.csv'\ncolumn_name = 'score'\n\nsum_scores = 0\nrow_count = 0\n\nwith open(filename, 'r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        sum_scores += int(row[column_name])\n        row_count += 1\n\naverage_score = sum_scores / row_count if row_count > 0 else 0\nprint('Average score:', average_score)",
        "output": "import csv\n\nfilename = 'data.csv'\ncolumn_name = 'score'\n\nsum_scores = 0\nrow_count = 0\n\nwith open(filename, 'r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        sum_scores += int(row[column_name])\n        row_count += 1\n\naverage_score = sum_scores / row_count if row_count > 0 else 0\nprint('Average score:', average_score)"
    },
    {
        "instruction": "Write a PHP script that receives an array of integers and calculates the sum of even numbers.",
        "input": "[5, 10, 13, 22, 28]",
        "response": "<?php\n\nfunction sum_even_numbers($arr) {\n    $sum = 0;\n    foreach ($arr as $num) {\n        if ($num % 2 == 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\n\n$numbers = array(5, 10, 13, 22, 28);\n$sum = sum_even_numbers($numbers);\n\necho \"Sum of even numbers: \" . $sum;\n?>",
        "output": "<?php\n\nfunction sum_even_numbers($arr) {\n    $sum = 0;\n    foreach ($arr as $num) {\n        if ($num % 2 == 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\n\n$numbers = array(5, 10, 13, 22, 28);\n$sum = sum_even_numbers($numbers);\n\necho \"Sum of even numbers: \" . $sum;\n?>"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a non-negative integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Python program that reads a CSV file and prints the values of a specified column?",
        "input": "file.csv, \"age\"",
        "response": "import csv\n\ndef print_column_values(file_name, column_name):\n    with open(file_name, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            print(row[column_name])\n\nprint_column_values('file.csv', 'age')",
        "output": "import csv\n\ndef print_column_values(file_name, column_name):\n    with open(file_name, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            print(row[column_name])\n\nprint_column_values('file.csv', 'age')"
    },
    {
        "instruction": "Develop a JavaScript function that, when given a string, determines the most frequent character in the string.",
        "input": "\"hello world\"",
        "response": "function mostFrequentChar(str) {\n    const charCount = {};\n    let maxCount = 0;\n    let maxChar = '';\n\n    for (const char of str) {\n        if (charCount[char]) {\n            charCount[char]++;\n        } else {\n            charCount[char] = 1;\n        }\n\n        if (charCount[char] > maxCount) {\n            maxCount = charCount[char];\n            maxChar = char;\n        }\n    }\n\n    return maxChar;}\n\nconst result = mostFrequentChar('hello world');\nconsole.log(result);",
        "output": "function mostFrequentChar(str) {\n    const charCount = {};\n    let maxCount = 0;\n    let maxChar = '';\n\n    for (const char of str) {\n        if (charCount[char]) {\n            charCount[char]++;\n        } else {\n            charCount[char] = 1;\n        }\n\n        if (charCount[char] > maxCount) {\n            maxCount = charCount[char];\n            maxChar = char;\n        }\n    }\n\n    return maxChar;}\n\nconst result = mostFrequentChar('hello world');\nconsole.log(result);"
    },
    {
        "instruction": "Write a PHP function that takes an associative array and replaces all the values with the given value.",
        "input": "{'a': 1, 'b': 2, 'c': 3}, 0",
        "response": "<?php\n\nfunction replaceValuesWith($array, $value) {\n    $result = [];\n    foreach ($array as $key => $val) {\n        $result[$key] = $value;\n    }\n    return $result;}\n\n$array = array('a' => 1, 'b' => 2, 'c' => 3);\n$replacedArray = replaceValuesWith($array, 0);\n\nprint_r($replacedArray);\n\n?>",
        "output": "<?php\n\nfunction replaceValuesWith($array, $value) {\n    $result = [];\n    foreach ($array as $key => $val) {\n        $result[$key] = $value;\n    }\n    return $result;}\n\n$array = array('a' => 1, 'b' => 2, 'c' => 3);\n$replacedArray = replaceValuesWith($array, 0);\n\nprint_r($replacedArray);\n\n?>"
    },
    {
        "instruction": "Write a C++ program that calculates the area of a circle given the radius.",
        "input": "7.0",
        "response": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.14159265358979323846;\n\ndouble area_of_circle(double radius) {\n    return PI * std::pow(radius, 2);}\n\nint main() {\n    double radius = 7.0;\n    double area = area_of_circle(radius);\n    std::cout << \"The area of the circle with radius \" << radius << \" is: \" << area << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.14159265358979323846;\n\ndouble area_of_circle(double radius) {\n    return PI * std::pow(radius, 2);}\n\nint main() {\n    double radius = 7.0;\n    double area = area_of_circle(radius);\n    std::cout << \"The area of the circle with radius \" << radius << \" is: \" << area << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Design a simple REST API using Flask that allows users to get a list of items and add an item to the list.",
        "input": "GET /items, POST /items with {\"name\": \"Example item\"}",
        "response": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\nitems = []\n\n@app.route('/items', methods=['GET', 'POST'])\ndef handle_items():\n    if request.method == 'GET':\n        return jsonify(items)\n\n    if request.method == 'POST':\n        item = request.json.get('name')\n        items.append(item)\n        return jsonify({'message': 'Item added successfully'}), 201\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\nitems = []\n\n@app.route('/items', methods=['GET', 'POST'])\ndef handle_items():\n    if request.method == 'GET':\n        return jsonify(items)\n\n    if request.method == 'POST':\n        item = request.json.get('name')\n        items.append(item)\n        return jsonify({'message': 'Item added successfully'}), 201\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "How can I implement a simple linked list data structure in JavaScript?",
        "input": "",
        "response": "class LinkedListNode {\n    constructor(value) {\n        this.value = value;\n        this.next = null;\n    }}\n\nclass LinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n    }\n\n    append(value) {\n        const newNode = new LinkedListNode(value);\n\n        if (!this.head) {\n            this.head = newNode;\n            this.tail = newNode;\n            return;\n        }\n\n        this.tail.next = newNode;\n        this.tail = newNode;\n    }}\n\nconst myList = new LinkedList();\nmyList.append(1);\nmyList.append(2);\nmyList.append(3);",
        "output": "class LinkedListNode {\n    constructor(value) {\n        this.value = value;\n        this.next = null;\n    }}\n\nclass LinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n    }\n\n    append(value) {\n        const newNode = new LinkedListNode(value);\n\n        if (!this.head) {\n            this.head = newNode;\n            this.tail = newNode;\n            return;\n        }\n\n        this.tail.next = newNode;\n        this.tail = newNode;\n    }}\n\nconst myList = new LinkedList();\nmyList.append(1);\nmyList.append(2);\nmyList.append(3);"
    },
    {
        "instruction": "Implement a Python function that takes a list of strings and returns a list of unique strings with each string reversed.",
        "input": "[\"hello\", \"world\"]",
        "response": "def reverse_unique_strings(strings):\n    unique_reversed = {s[::-1] for s in strings}\n    return list(unique_reversed)\n\ninput_strings = [\"hello\", \"world\"]\noutput_strings = reverse_unique_strings(input_strings)\nprint(output_strings)",
        "output": "def reverse_unique_strings(strings):\n    unique_reversed = {s[::-1] for s in strings}\n    return list(unique_reversed)\n\ninput_strings = [\"hello\", \"world\"]\noutput_strings = reverse_unique_strings(input_strings)\nprint(output_strings)"
    },
    {
        "instruction": "Design a C++ function that computes the factorial of a given non-negative integer.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0|| n == 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0|| n == 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "How to remove odd numbers from a JavaScript array?",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "function removeOddNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst result = removeOddNumbers(numbers);\nconsole.log(result);",
        "output": "function removeOddNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst result = removeOddNumbers(numbers);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Python script that retrieves the current weather data from OpenWeatherMap API for a specific city using its name and prints the weather description and temperature in Celsius.",
        "input": "{\"city_name\": \"London\", \"api_key\": \"YOUR_API_KEY\"}",
        "response": "import requests\n\ndef get_weather_data(city_name, api_key):\n    url = f'http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={api_key}&units=metric'\n    response = requests.get(url)\n    data = response.json()\n    return data\n\ndef main():\n    city_name = 'London'\n    api_key = 'YOUR_API_KEY'\n    weather_data = get_weather_data(city_name, api_key)\n    weather_description = weather_data['weather'][0]['description']\n    temperature = weather_data['main']['temp']\n    print(f'Weather in {city_name}: {weather_description}')\n    print(f'Temperature: {temperature} Celsius')\n\nif __name__ == '__main__':\n    main()",
        "output": "import requests\n\ndef get_weather_data(city_name, api_key):\n    url = f'http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={api_key}&units=metric'\n    response = requests.get(url)\n    data = response.json()\n    return data\n\ndef main():\n    city_name = 'London'\n    api_key = 'YOUR_API_KEY'\n    weather_data = get_weather_data(city_name, api_key)\n    weather_description = weather_data['weather'][0]['description']\n    temperature = weather_data['main']['temp']\n    print(f'Weather in {city_name}: {weather_description}')\n    print(f'Temperature: {temperature} Celsius')\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "instruction": "Fix the following C# code which should reverse a given string.",
        "input": "string exampleString = \"reverse this string\";\n\nchar[] stringArray = exampleString.ToCharArray();\nfor (int i = 0; i < stringArray.Length / 2; ++i)\n{\n    char tempChar = stringArray[i];\n    stringArray[i] = stringArray[stringArray.Length - 1 - i];\n    stringArray[stringArray.Length - 1 - i] = tempChar;\n}\n\nstring resultString = stringArray.ToString();\nConsole.WriteLine(resultString);",
        "response": "string exampleString = \"reverse this string\";\n\nchar[] stringArray = exampleString.ToCharArray();\nfor (int i = 0; i < stringArray.Length / 2; ++i)\n{\n    char tempChar = stringArray[i];\n    stringArray[i] = stringArray[stringArray.Length - 1 - i];\n    stringArray[stringArray.Length - 1 - i] = tempChar;\n}\n\nstring resultString = new string(stringArray);\nConsole.WriteLine(resultString);",
        "output": "string exampleString = \"reverse this string\";\n\nchar[] stringArray = exampleString.ToCharArray();\nfor (int i = 0; i < stringArray.Length / 2; ++i)\n{\n    char tempChar = stringArray[i];\n    stringArray[i] = stringArray[stringArray.Length - 1 - i];\n    stringArray[stringArray.Length - 1 - i] = tempChar;\n}\n\nstring resultString = new string(stringArray);\nConsole.WriteLine(resultString);"
    },
    {
        "instruction": "Implement a Python function that counts the occurrences of a specific character in a string.",
        "input": "'hello', 'l'",
        "response": "def character_count(text, char_to_count):\n    return text.count(char_to_count)\n\ncount = character_count('hello', 'l')\nprint(count)",
        "output": "def character_count(text, char_to_count):\n    return text.count(char_to_count)\n\ncount = character_count('hello', 'l')\nprint(count)"
    },
    {
        "instruction": "Write a C program that calculates the factorial of a given non-negative integer.",
        "input": "5",
        "response": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    int result = factorial(number);\n    printf('Factorial of %d is %d\n', number, result);\n    return 0;}",
        "output": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    int result = factorial(number);\n    printf('Factorial of %d is %d\n', number, result);\n    return 0;}"
    },
    {
        "instruction": "What is a PHP script that can calculate the area of a circle given its radius?",
        "input": "10",
        "response": "<?php\nfunction calculate_area($radius) {\n    $area = pi() * pow($radius, 2);\n    return $area;}\n\n$radius = 10;\n$area = calculate_area($radius);\necho 'The area of the circle with radius ' . $radius . ' is: ' . $area;\n?>",
        "output": "<?php\nfunction calculate_area($radius) {\n    $area = pi() * pow($radius, 2);\n    return $area;}\n\n$radius = 10;\n$area = calculate_area($radius);\necho 'The area of the circle with radius ' . $radius . ' is: ' . $area;\n?>"
    },
    {
        "instruction": "Demonstrate a JavaScript function that accepts a sentence and returns the longest word in it.",
        "input": "'The quick brown fox jumps over the lazy dog'",
        "response": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst input = 'The quick brown fox jumps over the lazy dog';\nconst longestWord = findLongestWord(input);\nconsole.log('Longest word:', longestWord);",
        "output": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst input = 'The quick brown fox jumps over the lazy dog';\nconst longestWord = findLongestWord(input);\nconsole.log('Longest word:', longestWord);"
    },
    {
        "instruction": "Write a C++ program that reads input from a text file and counts the number of lines, words, and characters in it.",
        "input": "Lines of text\nin a sample\nfile for reading\nwith C++.",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main() {\n    ifstream input_file(\"input.txt\");\n    string line;\n    int line_count = 0, word_count = 0, char_count = 0;\n\n    if (!input_file.is_open()) {\n        cout << \"Error opening file\" << endl;\n        return 1;\n    }\n\n    while (getline(input_file, line)) {\n        line_count++;\n        char_count += line.size();\n        string word;\n        istringstream line_stream(line);\n        while (line_stream >> word) {\n            word_count++;\n        }\n    }\n\n    cout << \"Lines: \" << line_count << endl;\n    cout << \"Words: \" << word_count << endl;\n    cout << \"Characters: \" << char_count << endl;\n    input_file.close();\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main() {\n    ifstream input_file(\"input.txt\");\n    string line;\n    int line_count = 0, word_count = 0, char_count = 0;\n\n    if (!input_file.is_open()) {\n        cout << \"Error opening file\" << endl;\n        return 1;\n    }\n\n    while (getline(input_file, line)) {\n        line_count++;\n        char_count += line.size();\n        string word;\n        istringstream line_stream(line);\n        while (line_stream >> word) {\n            word_count++;\n        }\n    }\n\n    cout << \"Lines: \" << line_count << endl;\n    cout << \"Words: \" << word_count << endl;\n    cout << \"Characters: \" << char_count << endl;\n    input_file.close();\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a SQL query to select all rows and columns from a table named 'products', where the 'price' column is greater than 50?",
        "input": "products: {id: 1, name: 'Laptop', price: 750}, {id: 2, name: 'Mobile', price: 40}, {id: 3, name: 'Tablet', price: 250}",
        "response": "SELECT * FROM products WHERE price > 50;",
        "output": "SELECT * FROM products WHERE price > 50;"
    },
    {
        "instruction": "Design a Python function that takes a list of integers and a target value, and returns a list of tuples containing pairs of integers from the input list, whose sum is equal to the target value.",
        "input": "[3, 5, 1, 6, 9], 10",
        "response": "def find_pairs(numbers, target):\n    result_pairs = []\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            if num1 + num2 == target:\n                result_pairs.append((num1, num2))\n    return result_pairs\n\npairs = find_pairs([3, 5, 1, 6, 9], 10)\nprint(pairs)",
        "output": "def find_pairs(numbers, target):\n    result_pairs = []\n    for i, num1 in enumerate(numbers):\n        for j, num2 in enumerate(numbers[i+1:]):\n            if num1 + num2 == target:\n                result_pairs.append((num1, num2))\n    return result_pairs\n\npairs = find_pairs([3, 5, 1, 6, 9], 10)\nprint(pairs)"
    },
    {
        "instruction": "Create a simple Bash shell script to find and replace a specific string in a text file with a new string.",
        "input": "Source file: \"source.txt\", Find: \"old_text\", Replace: \"new_text\"",
        "response": "#!/bin/bash\n\nsrc_file=\"source.txt\"\nfind_str=\"old_text\"\nreplace_str=\"new_text\"\nsed \"s/$find_str/$replace_str/g\" \"$src_file\" > \"temp\"\nmv \"temp\" \"$src_file\"",
        "output": "#!/bin/bash\n\nsrc_file=\"source.txt\"\nfind_str=\"old_text\"\nreplace_str=\"new_text\"\nsed \"s/$find_str/$replace_str/g\" \"$src_file\" > \"temp\"\nmv \"temp\" \"$src_file\""
    },
    {
        "instruction": "Develop a C program to calculate the area of a circle given its radius.",
        "input": "6.5",
        "response": "#include <stdio.h>\n#define PI 3.141592653589793238\n\ndouble calculate_area(double radius) {\n    return PI * radius * radius;}\n\nint main() {\n    double radius = 6.5;\n    double area = calculate_area(radius);\n    printf(\"Area of the circle with radius %.2f is: %.2f\\n\", radius, area);\n    return 0;}",
        "output": "#include <stdio.h>\n#define PI 3.141592653589793238\n\ndouble calculate_area(double radius) {\n    return PI * radius * radius;}\n\nint main() {\n    double radius = 6.5;\n    double area = calculate_area(radius);\n    printf(\"Area of the circle with radius %.2f is: %.2f\\n\", radius, area);\n    return 0;}"
    },
    {
        "instruction": "How can I implement a Python function that takes a list of integers and returns the maximum and minimum values?",
        "input": "[15, 4, 20, 52, 7, 29]",
        "response": "def find_min_max(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return min_val, max_val\n\nresult = find_min_max([15, 4, 20, 52, 7, 29])\nprint('Minimum:', result[0], ',', 'Maximum:', result[1])",
        "output": "def find_min_max(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return min_val, max_val\n\nresult = find_min_max([15, 4, 20, 52, 7, 29])\nprint('Minimum:', result[0], ',', 'Maximum:', result[1])"
    },
    {
        "instruction": "Construct a C# method that takes a string as an input and counts the number of uppercase and lowercase letters.",
        "input": "\"The Quick Brown Fox Jumps Over The Lazy Dog\"",
        "response": "using System;\n\nclass LetterCount\n{\n    public static void CountLetters(string input, out int upperCount, out int lowerCount)\n    {\n        upperCount = 0;\n        lowerCount = 0;\n\n        foreach (char c in input)\n        {\n            if (char.IsUpper(c))\n                upperCount++;\n            else if (char.IsLower(c))\n                lowerCount++;\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        string input = \"The Quick Brown Fox Jumps Over The Lazy Dog\";\n        int upperCount, lowerCount;\n        CountLetters(input, out upperCount, out lowerCount);\n        Console.WriteLine(\"Uppercase letters: \" + upperCount + \"\\nLowercase letters: \" + lowerCount);\n    }}",
        "output": "using System;\n\nclass LetterCount\n{\n    public static void CountLetters(string input, out int upperCount, out int lowerCount)\n    {\n        upperCount = 0;\n        lowerCount = 0;\n\n        foreach (char c in input)\n        {\n            if (char.IsUpper(c))\n                upperCount++;\n            else if (char.IsLower(c))\n                lowerCount++;\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        string input = \"The Quick Brown Fox Jumps Over The Lazy Dog\";\n        int upperCount, lowerCount;\n        CountLetters(input, out upperCount, out lowerCount);\n        Console.WriteLine(\"Uppercase letters: \" + upperCount + \"\\nLowercase letters: \" + lowerCount);\n    }}"
    },
    {
        "instruction": "Design a JavaScript function that takes a dictionary of {language: proficiency} pairs and returns the language with the highest proficiency.",
        "input": "{\"JavaScript\": 80, \"Python\": 95, \"Ruby\": 70, \"Java\": 85}",
        "response": "function findBestLanguage(langProficiencyDict) {\n    let maxProficiency = 0;\n    let bestLanguage = '';\n\n    for (const [language, proficiency] of Object.entries(langProficiencyDict)) {\n        if (proficiency > maxProficiency) {\n            maxProficiency = proficiency;\n            bestLanguage = language;\n        }\n    }\n\n    return bestLanguage;}\n\nconst languages = {\n    \"JavaScript\": 80,\n    \"Python\": 95,\n    \"Ruby\": 70,\n    \"Java\": 85};\n\nconsole.log(findBestLanguage(languages));",
        "output": "function findBestLanguage(langProficiencyDict) {\n    let maxProficiency = 0;\n    let bestLanguage = '';\n\n    for (const [language, proficiency] of Object.entries(langProficiencyDict)) {\n        if (proficiency > maxProficiency) {\n            maxProficiency = proficiency;\n            bestLanguage = language;\n        }\n    }\n\n    return bestLanguage;}\n\nconst languages = {\n    \"JavaScript\": 80,\n    \"Python\": 95,\n    \"Ruby\": 70,\n    \"Java\": 85};\n\nconsole.log(findBestLanguage(languages));"
    },
    {
        "instruction": "Implement a C function that calculates the factorial of a given positive integer.",
        "input": "5",
        "response": "#include<stdio.h>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    printf(\"Factorial of %d is %d\", n, factorial(n));\n    return 0;}",
        "output": "#include<stdio.h>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    printf(\"Factorial of %d is %d\", n, factorial(n));\n    return 0;}"
    },
    {
        "instruction": "How would you write a SQL query that selects all rows from the 'employees' table where the 'salary' column is greater than 50000?",
        "input": "",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "Design a Python class that represents a circle, taking the radius as an input, and includes a method to calculate the area.",
        "input": "8",
        "response": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculate_area(self):\n        return math.pi * (self.radius ** 2)\n\nmy_circle = Circle(8)\nprint('Circle area:', my_circle.calculate_area())",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculate_area(self):\n        return math.pi * (self.radius ** 2)\n\nmy_circle = Circle(8)\nprint('Circle area:', my_circle.calculate_area())"
    },
    {
        "instruction": "Create a JavaScript function that takes a string of text and returns the number of words in it.",
        "input": "\"The quick brown fox jumps over the lazy dog.\"",
        "response": "function countWords(text) {\n    let words = text.trim().split(/\\s+/);\n    return words.length;}\n\nconst exampleText = \"The quick brown fox jumps over the lazy dog.\";\nconsole.log(countWords(exampleText));",
        "output": "function countWords(text) {\n    let words = text.trim().split(/\\s+/);\n    return words.length;}\n\nconst exampleText = \"The quick brown fox jumps over the lazy dog.\";\nconsole.log(countWords(exampleText));"
    },
    {
        "instruction": "Write a C program that reads an integer from the user and finds the factorial of the input number.",
        "input": "5",
        "response": "#include<stdio.h>\n\nint main() {\n  int num, i, factorial = 1;\n  printf(\"Enter a positive integer: \");\n  scanf(\"%d\", &num);\n\n  for(i = 1; i <= num; ++i) {\n    factorial *= i;\n  }\n\n  printf(\"Factorial of %d: %d\", num, factorial);\n  return 0;\n}",
        "output": "#include<stdio.h>\n\nint main() {\n  int num, i, factorial = 1;\n  printf(\"Enter a positive integer: \");\n  scanf(\"%d\", &num);\n\n  for(i = 1; i <= num; ++i) {\n    factorial *= i;\n  }\n\n  printf(\"Factorial of %d: %d\", num, factorial);\n  return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function to find and replace a specific word in a given string with another word.",
        "input": "originalText: \"JavaScript is an amazing language.\", searchWord: \"amazing\", replaceWord: \"awesome\"",
        "response": "function findAndReplace(text, search, replace) {\n  return text.split(search).join(replace);\n}\n\nconst originalText = 'JavaScript is an amazing language.';\nconst searchWord = 'amazing';\nconst replaceWord = 'awesome';\nconst result = findAndReplace(originalText, searchWord, replaceWord);\nconsole.log(result);",
        "output": "function findAndReplace(text, search, replace) {\n  return text.split(search).join(replace);\n}\n\nconst originalText = 'JavaScript is an amazing language.';\nconst searchWord = 'amazing';\nconst replaceWord = 'awesome';\nconst result = findAndReplace(originalText, searchWord, replaceWord);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a Java class representing a simple calculator that can perform addition, subtraction, multiplication, and division.",
        "input": "Calculator calc = new Calculator();\ncalc.add(5, 3);\ncalc.subtract(9, 5);\ncalc.multiply(3, 3);\ncalc.divide(12, 4);",
        "response": "public class Calculator {\n\n  public int add(int a, int b) {\n    return a + b;\n  }\n\n  public int subtract(int a, int b) {\n    return a - b;\n  }\n\n  public int multiply(int a, int b) {\n    return a * b;\n  }\n\n  public double divide(int a, int b) {\n    if (b == 0) {\n      throw new IllegalArgumentException(\"Cannot divide by zero\");\n    }\n    return (double) a / b;\n  }\n}\n\nCalculator calc = new Calculator();\nSystem.out.println(calc.add(5, 3));\nSystem.out.println(calc.subtract(9, 5));\nSystem.out.println(calc.multiply(3, 3));\nSystem.out.println(calc.divide(12, 4));",
        "output": "public class Calculator {\n\n  public int add(int a, int b) {\n    return a + b;\n  }\n\n  public int subtract(int a, int b) {\n    return a - b;\n  }\n\n  public int multiply(int a, int b) {\n    return a * b;\n  }\n\n  public double divide(int a, int b) {\n    if (b == 0) {\n      throw new IllegalArgumentException(\"Cannot divide by zero\");\n    }\n    return (double) a / b;\n  }\n}\n\nCalculator calc = new Calculator();\nSystem.out.println(calc.add(5, 3));\nSystem.out.println(calc.subtract(9, 5));\nSystem.out.println(calc.multiply(3, 3));\nSystem.out.println(calc.divide(12, 4));"
    },
    {
        "instruction": "How would you create a Python script that reads data from a CSV file and prints the content to the console?",
        "input": "sample.csv\nName, Age, City\nAlice, 30, New York\nBob, 25, San Francisco\nCarol, 35, Los Angeles",
        "response": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, mode='r') as file:\n  reader = csv.reader(file)\n  for row in reader:\n    print(', '.join(row))\n\n# Output:\n# Name, Age, City\n# Alice, 30, New York\n# Bob, 25, San Francisco\n# Carol, 35, Los Angeles",
        "output": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, mode='r') as file:\n  reader = csv.reader(file)\n  for row in reader:\n    print(', '.join(row))\n\n# Output:\n# Name, Age, City\n# Alice, 30, New York\n# Bob, 25, San Francisco\n# Carol, 35, Los Angeles"
    },
    {
        "instruction": "Implement a C++ function that merges two sorted vectors and returns a sorted vector as a result.",
        "input": "std::vector<int> a = {1, 3, 5}; std::vector<int> b = {2, 4, 6};",
        "response": "#include <vector>\n#include <iostream>\n\nstd::vector<int> merge_sorted_vectors(std::vector<int>& a, std::vector<int>& b) {\n    std::vector<int> merged;\n    int i = 0, j = 0;\n\n    while (i < a.size() && j < b.size()) {\n        if(a[i] <= b[j]) {\n            merged.push_back(a[i]);\n            i++;\n        } else {\n            merged.push_back(b[j]);\n            j++;\n        }\n    }\n\n    while (i < a.size()) {\n        merged.push_back(a[i]);\n        i++;\n    }\n\n    while (j < b.size()) {\n        merged.push_back(b[j]);\n        j++;\n    }\n\n    return merged;}\n\nint main() {\n    std::vector<int> a = {1, 3, 5};\n    std::vector<int> b = {2, 4, 6};\n    std::vector<int> result = merge_sorted_vectors(a, b);\n\n    for (const int& num : result) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <vector>\n#include <iostream>\n\nstd::vector<int> merge_sorted_vectors(std::vector<int>& a, std::vector<int>& b) {\n    std::vector<int> merged;\n    int i = 0, j = 0;\n\n    while (i < a.size() && j < b.size()) {\n        if(a[i] <= b[j]) {\n            merged.push_back(a[i]);\n            i++;\n        } else {\n            merged.push_back(b[j]);\n            j++;\n        }\n    }\n\n    while (i < a.size()) {\n        merged.push_back(a[i]);\n        i++;\n    }\n\n    while (j < b.size()) {\n        merged.push_back(b[j]);\n        j++;\n    }\n\n    return merged;}\n\nint main() {\n    std::vector<int> a = {1, 3, 5};\n    std::vector<int> b = {2, 4, 6};\n    std::vector<int> result = merge_sorted_vectors(a, b);\n\n    for (const int& num : result) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "How would you write a Python function to convert a given temperature from Fahrenheit to Celsius?",
        "input": "32",
        "response": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\n\ntemperature_in_fahrenheit = 32\nresult = fahrenheit_to_celsius(temperature_in_fahrenheit)\nprint(result)",
        "output": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\n\ntemperature_in_fahrenheit = 32\nresult = fahrenheit_to_celsius(temperature_in_fahrenheit)\nprint(result)"
    },
    {
        "instruction": "Write a Go program that calculates and prints the first 10 numbers in the Fibonacci sequence.",
        "input": "",
        "response": "package main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n-1) + fibonacci(n-2)}\n\nfunc main() {\n    numFibonacci := 10\n    for i := 0; i < numFibonacci; i++ {\n        fmt.Println(fibonacci(i))\n    }}",
        "output": "package main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n-1) + fibonacci(n-2)}\n\nfunc main() {\n    numFibonacci := 10\n    for i := 0; i < numFibonacci; i++ {\n        fmt.Println(fibonacci(i))\n    }}"
    },
    {
        "instruction": "Develop a shell script that reads a file line by line and outputs the line number and content for each line.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfilename=\"file.txt\"\nlineno=1\nwhile read -r line; do\n    echo \"Line $lineno: $line\"\n    lineno=$((lineno + 1))\ndone < \"$filename\"",
        "output": "#!/bin/bash\n\nfilename=\"file.txt\"\nlineno=1\nwhile read -r line; do\n    echo \"Line $lineno: $line\"\n    lineno=$((lineno + 1))\ndone < \"$filename\""
    },
    {
        "instruction": "Design a C++ function that reverses a provided string and outputs the result.",
        "input": "\"OpenAI\"",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverse_string(const std::string &input) {\n    std::string result(input);\n    std::reverse(result.begin(), result.end());\n    return result;}\n\nint main() {\n    std::string input = \"OpenAI\";\n    std::string output = reverse_string(input);\n    std::cout << output << std::endl;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverse_string(const std::string &input) {\n    std::string result(input);\n    std::reverse(result.begin(), result.end());\n    return result;}\n\nint main() {\n    std::string input = \"OpenAI\";\n    std::string output = reverse_string(input);\n    std::cout << output << std::endl;}"
    },
    {
        "instruction": "Can you demonstrate creating an API with Node.js using Express that returns a list of users?",
        "input": "GET /users",
        "response": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\nconst users = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 3, name: 'Charlie' },\n];\n\napp.get('/users', (req, res) => {\n    res.json(users);});\n\napp.listen(PORT, () => {\n    console.log(`Server running on PORT ${PORT}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\nconst users = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n    { id: 3, name: 'Charlie' },\n];\n\napp.get('/users', (req, res) => {\n    res.json(users);});\n\napp.listen(PORT, () => {\n    console.log(`Server running on PORT ${PORT}`);});"
    },
    {
        "instruction": "In Python, implement a function to calculate the area of a triangle given its base and height.",
        "input": "10, 5",
        "response": "def triangle_area(base, height):\n    return 0.5 * base * height\n\narea = triangle_area(10, 5)\nprint(area)",
        "output": "def triangle_area(base, height):\n    return 0.5 * base * height\n\narea = triangle_area(10, 5)\nprint(area)"
    },
    {
        "instruction": "Create a PHP script that checks if a number is prime or not.",
        "input": "11",
        "response": "<?php\nfunction is_prime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i * $i <= $number; ++$i) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\n$number = 11;\necho is_prime($number) ? \"Prime\" : \"Not prime\";\n?>",
        "output": "<?php\nfunction is_prime($number) {\n    if ($number <= 1) {\n        return false;\n    }\n    for ($i = 2; $i * $i <= $number; ++$i) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\n$number = 11;\necho is_prime($number) ? \"Prime\" : \"Not prime\";\n?>"
    },
    {
        "instruction": "Construct a Python function that takes a list of strings and concatenates them together using the given delimiter.",
        "input": "['apple', 'banana', 'orange'], '|'",
        "response": "def concatenate_strings(string_list, delimiter):\n    return delimiter.join(string_list)\n\nresult = concatenate_strings(['apple', 'banana', 'orange'], '|')\nprint(result)",
        "output": "def concatenate_strings(string_list, delimiter):\n    return delimiter.join(string_list)\n\nresult = concatenate_strings(['apple', 'banana', 'orange'], '|')\nprint(result)"
    },
    {
        "instruction": "Implement a JavaScript function that removes duplicates from an array and returns a new array with unique elements.",
        "input": "[1, 2, 3, 2, 1, 5, 3]",
        "response": "function removeDuplicates(arr) {\n    return [...new Set(arr)];}\n\nconst uniqueArray = removeDuplicates([1, 2, 3, 2, 1, 5, 3])\nconsole.log(uniqueArray);",
        "output": "function removeDuplicates(arr) {\n    return [...new Set(arr)];}\n\nconst uniqueArray = removeDuplicates([1, 2, 3, 2, 1, 5, 3])\nconsole.log(uniqueArray);"
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of a given number.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nlong long factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    cout << factorial(number) << endl;\n\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nlong long factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    cout << factorial(number) << endl;\n\n    return 0;}"
    },
    {
        "instruction": "Can you create a PHP script that counts the number of words in a given sentence?",
        "input": "\"Hello, how are you doing today?\"",
        "response": "<?php\n\nfunction count_words($sentence) {\n    return str_word_count($sentence);}\n\n$sentence = \"Hello, how are you doing today?\";\necho count_words($sentence);\n\n?>",
        "output": "<?php\n\nfunction count_words($sentence) {\n    return str_word_count($sentence);}\n\n$sentence = \"Hello, how are you doing today?\";\necho count_words($sentence);\n\n?>"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "In Shell Script, write a script that renames all '.txt' files in a directory to '.bak' extension.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *.txt; do\n    mv \"$file\" \"${file%.txt}.bak\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt; do\n    mv \"$file\" \"${file%.txt}.bak\"\ndone"
    },
    {
        "instruction": "Construct a Python program that utilizes a dictionary to count the frequency of words in a given text.",
        "input": "\"To be or not to be, that is the question.\"",
        "response": "def word_frequency(text):\n    words = text.split()\n    frequency = {}\n    \n    for word in words:\n        word = word.lower().strip(',.?!')\n        frequency[word] = frequency.get(word, 0) + 1\n    \n    return frequency\n\ntext = \"To be or not to be, that is the question.\"\nresult = word_frequency(text)\nprint(result)",
        "output": "def word_frequency(text):\n    words = text.split()\n    frequency = {}\n    \n    for word in words:\n        word = word.lower().strip(',.?!')\n        frequency[word] = frequency.get(word, 0) + 1\n    \n    return frequency\n\ntext = \"To be or not to be, that is the question.\"\nresult = word_frequency(text)\nprint(result)"
    },
    {
        "instruction": "Design a Java method that takes an input string and returns a reversed version of the input string.",
        "input": "\"Hello, world!\"",
        "response": "public class ReverseString {\n    public static String reverseString(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String inputString = \"Hello, world!\";\n        System.out.println(reverseString(inputString));\n    }}",
        "output": "public class ReverseString {\n    public static String reverseString(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String inputString = \"Hello, world!\";\n        System.out.println(reverseString(inputString));\n    }}"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given integer.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "What would a shell script look like that counts the number of lines in a file and prints the result?",
        "input": "file.txt",
        "response": "#!/bin/bash\nfile=\"file.txt\"\nline_count=$(wc -l < \"$file\")\necho \"The file $file has $line_count lines.\"",
        "output": "#!/bin/bash\nfile=\"file.txt\"\nline_count=$(wc -l < \"$file\")\necho \"The file $file has $line_count lines.\""
    },
    {
        "instruction": "Construct a Python script that reads a CSV file and calculates the average value in a specific column.",
        "input": "data.csv, temperature_column",
        "response": "import csv\n\ndef average_temperature(csv_file_path, column_name):\n    total_temperature = 0\n    row_count = 0\n\n    with open(csv_file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total_temperature += float(row[column_name])\n            row_count += 1\n\n    return total_temperature / row_count\n\naverage_temp = average_temperature('data.csv', 'temperature_column')\nprint(\"Average temperature: \", average_temp)",
        "output": "import csv\n\ndef average_temperature(csv_file_path, column_name):\n    total_temperature = 0\n    row_count = 0\n\n    with open(csv_file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total_temperature += float(row[column_name])\n            row_count += 1\n\n    return total_temperature / row_count\n\naverage_temp = average_temperature('data.csv', 'temperature_column')\nprint(\"Average temperature: \", average_temp)"
    },
    {
        "instruction": "Design a JavaScript function that takes a string, reverses the order of the words, and returns the result.",
        "input": "\"This is an example sentence\"",
        "response": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');}\n\nconst inputStr = \"This is an example sentence\";\nconst reversed = reverseWords(inputStr);\nconsole.log(reversed);",
        "output": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');}\n\nconst inputStr = \"This is an example sentence\";\nconst reversed = reverseWords(inputStr);\nconsole.log(reversed);"
    },
    {
        "instruction": "Write a C++ program that prompts the user to input two integer values, then outputs their greatest common divisor.",
        "input": "Enter two integer values: 42, 56",
        "response": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two integer values: \";\n    cin >> num1 >> num2;\n\n    int result = gcd(num1, num2);\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << result << endl;\n\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two integer values: \";\n    cin >> num1 >> num2;\n\n    int result = gcd(num1, num2);\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << result << endl;\n\n    return 0;}"
    },
    {
        "instruction": "Implement a shell script that takes a filename as its argument and displays the total number of non-empty lines in the file.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfilename=$1\nnon_empty_lines=$(grep -cv '^$' \"$filename\")\necho \"Total non-empty lines in $filename: $non_empty_lines\"",
        "output": "#!/bin/bash\n\nfilename=$1\nnon_empty_lines=$(grep -cv '^$' \"$filename\")\necho \"Total non-empty lines in $filename: $non_empty_lines\""
    },
    {
        "instruction": "How can you write a Python function that receives a dictionary of student names and their corresponding scores, and returns the name of the student with the highest score?",
        "input": "{\"Alice\": 85, \"Bob\": 90, \"Charlie\": 92, \"Diana\": 88}",
        "response": "def get_max_score_student(scores_dict):\n    return max(scores_dict, key=scores_dict.get)\n\nstudent_scores = {\"Alice\": 85, \"Bob\": 90, \"Charlie\": 92, \"Diana\": 88}\nresult = get_max_score_student(student_scores)\nprint(result)",
        "output": "def get_max_score_student(scores_dict):\n    return max(scores_dict, key=scores_dict.get)\n\nstudent_scores = {\"Alice\": 85, \"Bob\": 90, \"Charlie\": 92, \"Diana\": 88}\nresult = get_max_score_student(student_scores)\nprint(result)"
    },
    {
        "instruction": "Construct a JavaScript function that accepts a string and returns the number of vowels in it.",
        "input": "\"hello world\"",
        "response": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n  \n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n  \n    return count;}\n\nconst inputStr = 'hello world';\nconst result = countVowels(inputStr);\nconsole.log(result);",
        "output": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n  \n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n  \n    return count;}\n\nconst inputStr = 'hello world';\nconst result = countVowels(inputStr);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a given non-negative integer.",
        "input": "4",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 4;\n    int result = factorial(n);\n    std::cout << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 4;\n    int result = factorial(n);\n    std::cout << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you construct a basic REST API endpoint using Node.js and Express?",
        "input": "GET /users/:userId",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/users/:userId', (req, res) => {\n    const userId = req.params.userId;\n    // Logic for fetching user data based on userId\n    res.send(`User ID: ${userId}`);});\n\napp.listen(port, () => {\n    console.log(`Server listening at http://localhost:${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/users/:userId', (req, res) => {\n    const userId = req.params.userId;\n    // Logic for fetching user data based on userId\n    res.send(`User ID: ${userId}`);});\n\napp.listen(port, () => {\n    console.log(`Server listening at http://localhost:${port}`);});"
    },
    {
        "instruction": "Develop a shell script to find and display files modified within the last day in the current directory.",
        "input": "",
        "response": "#!/bin/sh\n\nfind . -type f -mtime -1 -print",
        "output": "#!/bin/sh\n\nfind . -type f -mtime -1 -print"
    },
    {
        "instruction": "Construct a basic SQL query to retrieve all records from the 'employees' table where the 'salary' is greater than 50000.",
        "input": "",
        "response": "SELECT *\nFROM employees\nWHERE salary > 50000;",
        "output": "SELECT *\nFROM employees\nWHERE salary > 50000;"
    },
    {
        "instruction": "Write a C++ function that computes the factorial of a given integer.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Create a Python script using the requests library to make a GET request to an API and print the JSON response.",
        "input": "https://api.chucknorris.io/jokes/random",
        "response": "import requests\n\nurl = 'https://api.chucknorris.io/jokes/random'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    json_data = response.json()\n    print(json_data)\nelse:\n    print(f\"Error: {response.status_code}\")",
        "output": "import requests\n\nurl = 'https://api.chucknorris.io/jokes/random'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    json_data = response.json()\n    print(json_data)\nelse:\n    print(f\"Error: {response.status_code}\")"
    },
    {
        "instruction": "How would you implement a simple HTTP server in Node.js that serves a static HTML file?",
        "input": "<html><head><title>My Title</title></head><body><h1>Hello, World!</h1></body></html>",
        "response": "const http = require('http');\nconst fs = require('fs');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n    const htmlContent = '<html><head><title>My Title</title></head><body><h1>Hello, World!</h1></body></html>';\n    res.end(htmlContent);});\n\nconst port = 3000;\nserver.listen(port, () => {\n    console.log(`Server running on port ${port}`);});",
        "output": "const http = require('http');\nconst fs = require('fs');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n    const htmlContent = '<html><head><title>My Title</title></head><body><h1>Hello, World!</h1></body></html>';\n    res.end(htmlContent);});\n\nconst port = 3000;\nserver.listen(port, () => {\n    console.log(`Server running on port ${port}`);});"
    },
    {
        "instruction": "Implement a shell script to find and delete all files with a specific extension in a given directory.",
        "input": "directory_path='/home/user/path/to/directory', file_extension='log'",
        "response": "#!/bin/bash\n\ndirectory_path=\"/home/user/path/to/directory\"\nfile_extension=\"log\"\n\nfind \"$directory_path\" -type f -name \"*.$file_extension\" -exec rm -f {} \\;\n\necho \"All .$file_extension files deleted from $directory_path\"",
        "output": "#!/bin/bash\n\ndirectory_path=\"/home/user/path/to/directory\"\nfile_extension=\"log\"\n\nfind \"$directory_path\" -type f -name \"*.$file_extension\" -exec rm -f {} \\;\n\necho \"All .$file_extension files deleted from $directory_path\""
    },
    {
        "instruction": "Write a C++ function to calculate the factorial of a given integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;}"
    },
    {
        "instruction": "Design a Python class that represents a point in 3D space and implements a distance method to calculate the distance between two points.",
        "input": "point1 = Point3D(1, 2, 3); point2 = Point3D(4, 5, 6)",
        "response": "import math\n\nclass Point3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def distance(self, other_point):\n        return math.sqrt((self.x - other_point.x)**2 +\n                         (self.y - other_point.y)**2 +\n                         (self.z - other_point.z)**2)\n\npoint1 = Point3D(1, 2, 3)\npoint2 = Point3D(4, 5, 6)\nprint(point1.distance(point2))",
        "output": "import math\n\nclass Point3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def distance(self, other_point):\n        return math.sqrt((self.x - other_point.x)**2 +\n                         (self.y - other_point.y)**2 +\n                         (self.z - other_point.z)**2)\n\npoint1 = Point3D(1, 2, 3)\npoint2 = Point3D(4, 5, 6)\nprint(point1.distance(point2))"
    },
    {
        "instruction": "How would you write a JavaScript function that accepts a string of space-separated numbers and returns the largest and smallest numbers in that sequence?",
        "input": "\"3 9 5 2 11 1\"",
        "response": "function minMaxFromString(str) {\n    const numbers = str.split(' ').map(Number);\n    return {min: Math.min(...numbers), max: Math.max(...numbers)};}\n\nconst inputStr = \"3 9 5 2 11 1\";\nconst result = minMaxFromString(inputStr);\nconsole.log(`Min: ${result.min}, Max: ${result.max}`);",
        "output": "function minMaxFromString(str) {\n    const numbers = str.split(' ').map(Number);\n    return {min: Math.min(...numbers), max: Math.max(...numbers)};}\n\nconst inputStr = \"3 9 5 2 11 1\";\nconst result = minMaxFromString(inputStr);\nconsole.log(`Min: ${result.min}, Max: ${result.max}`);"
    },
    {
        "instruction": "Construct a Shell script that takes a filename as an input and counts the number of lines in that file.",
        "input": "input.txt",
        "response": "#!/bin/bash\n\nfilename=\"$1\"\n\nif [ -f \"$filename\" ]; then\n    num_lines=$(wc -l < \"$filename\")\n    echo \"Number of lines in $filename: $num_lines\"\nelse\n    echo \"Error: $filename does not exist\"\nfi\n\n# Usage: ./count_lines.sh input.txt",
        "output": "#!/bin/bash\n\nfilename=\"$1\"\n\nif [ -f \"$filename\" ]; then\n    num_lines=$(wc -l < \"$filename\")\n    echo \"Number of lines in $filename: $num_lines\"\nelse\n    echo \"Error: $filename does not exist\"\nfi\n\n# Usage: ./count_lines.sh input.txt"
    },
    {
        "instruction": "Write a C# function that sorts a list of strings in alphabetical order and displays the sorted list.",
        "input": "['Orange', 'Apple', 'Banana']",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass StringSorter\n{\n    static void Main()\n    {\n        List<string> list = new List<string> { \"Orange\", \"Apple\", \"Banana\" };\n        SortAndDisplay(list);\n    }\n\n    static void SortAndDisplay(List<string> list)\n    {\n        list.Sort();\n        foreach (string item in list)\n        {\n            Console.WriteLine(item);\n        }\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass StringSorter\n{\n    static void Main()\n    {\n        List<string> list = new List<string> { \"Orange\", \"Apple\", \"Banana\" };\n        SortAndDisplay(list);\n    }\n\n    static void SortAndDisplay(List<string> list)\n    {\n        list.Sort();\n        foreach (string item in list)\n        {\n            Console.WriteLine(item);\n        }\n    }}"
    },
    {
        "instruction": "Implement a Java method that reads a text file and returns the number of lines.",
        "input": "example.txt (a file containing the text)",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class LineCounter {\n\n    public static void main(String[] args) throws IOException {\n        String filePath = \"example.txt\";\n        int lineCount = countTextFileLines(filePath);\n        System.out.println(\"Number of lines: \" + lineCount);\n    }\n\n    public static int countTextFileLines(String filePath) throws IOException {\n        int lineCount = 0;\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            while (reader.readLine() != null) {\n                lineCount++;\n            }\n        }\n        return lineCount;\n    }}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class LineCounter {\n\n    public static void main(String[] args) throws IOException {\n        String filePath = \"example.txt\";\n        int lineCount = countTextFileLines(filePath);\n        System.out.println(\"Number of lines: \" + lineCount);\n    }\n\n    public static int countTextFileLines(String filePath) throws IOException {\n        int lineCount = 0;\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            while (reader.readLine() != null) {\n                lineCount++;\n            }\n        }\n        return lineCount;\n    }}"
    },
    {
        "instruction": "Create a Python function that calculates the factorial of a given integer. The function returns the factorial result.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "How would you implement a bash script that iterates through all .txt files in a directory and prints the number of words in each file?",
        "input": "A directory including files: file1.txt, file2.txt",
        "response": "#!/bin/bash\n\nfor file in *.txt; do\n    word_count=$(wc -w < \"$file\")\n    echo \"File: ${file}, Words: ${word_count}\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt; do\n    word_count=$(wc -w < \"$file\")\n    echo \"File: ${file}, Words: ${word_count}\"\ndone"
    },
    {
        "instruction": "Implement a C# class for a bank account, with deposit and withdraw methods, and include a main method for testing.",
        "input": "Initial balance: 1000, Deposit: 500, Withdraw: 250",
        "response": "using System;\n\n    public class BankAccount\n    {\n        private decimal balance;\n\n        public BankAccount(decimal initialBalance)\n        {\n            balance = initialBalance;\n        }\n\n        public void Deposit(decimal amount)\n        {\n            balance += amount;\n        }\n\n        public void Withdraw(decimal amount)\n        {\n            if (balance >= amount)\n                balance -= amount;\n            else\n                Console.WriteLine(\"Insufficient balance.\");\n        }\n\n        public decimal GetBalance()\n        {\n            return balance;\n        }\n\n        public static void Main(string[] args)\n        {\n            BankAccount account = new BankAccount(1000);\n            account.Deposit(500);\n            account.Withdraw(250);\n            Console.WriteLine(\"Final balance: \" + account.GetBalance());\n        }\n    }",
        "output": "using System;\n\n    public class BankAccount\n    {\n        private decimal balance;\n\n        public BankAccount(decimal initialBalance)\n        {\n            balance = initialBalance;\n        }\n\n        public void Deposit(decimal amount)\n        {\n            balance += amount;\n        }\n\n        public void Withdraw(decimal amount)\n        {\n            if (balance >= amount)\n                balance -= amount;\n            else\n                Console.WriteLine(\"Insufficient balance.\");\n        }\n\n        public decimal GetBalance()\n        {\n            return balance;\n        }\n\n        public static void Main(string[] args)\n        {\n            BankAccount account = new BankAccount(1000);\n            account.Deposit(500);\n            account.Withdraw(250);\n            Console.WriteLine(\"Final balance: \" + account.GetBalance());\n        }\n    }"
    },
    {
        "instruction": "How would you create a Python script to find the common elements between two lists of integers?",
        "input": "List1: [1, 3, 5, 7, 9], List2: [2, 3, 4, 7, 8]",
        "response": "def find_common_elements(list1, list2):\n    return set(list1).intersection(list2)\n\nlist1 = [1, 3, 5, 7, 9]\nlist2 = [2, 3, 4, 7, 8]\ncommon_elements = find_common_elements(list1, list2)\nprint(common_elements)",
        "output": "def find_common_elements(list1, list2):\n    return set(list1).intersection(list2)\n\nlist1 = [1, 3, 5, 7, 9]\nlist2 = [2, 3, 4, 7, 8]\ncommon_elements = find_common_elements(list1, list2)\nprint(common_elements)"
    },
    {
        "instruction": "Design a SQL query to retrieve employee data from two tables \u2013 one containing employee details and the other storing department details.",
        "input": "Employee table columns: emp_id, name, position, dept_id \nDepartment table columns: dept_id, dept_name",
        "response": "SELECT e.emp_id, e.name, e.position, d.dept_name\n    FROM Employee AS e\n    JOIN Department AS d ON e.dept_id = d.dept_id;",
        "output": "SELECT e.emp_id, e.name, e.position, d.dept_name\n    FROM Employee AS e\n    JOIN Department AS d ON e.dept_id = d.dept_id;"
    },
    {
        "instruction": "Write a JavaScript function to calculate the factorial of a non-negative integer.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Design a C++ function that calculates the factorial of a given integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    return (n == 0 || n == 1) ? 1 : n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"The factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    return (n == 0 || n == 1) ? 1 : n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"The factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a Python script that reads a CSV file and outputs the number of lines and words in the file?",
        "input": "data.csv (example content: \"Name,Age,Location\nAlice,25,New York\nBob,30,San Francisco\")",
        "response": "import csv\n\ndef count_lines_and_words(filename):\n    lines = 0\n    words = 0\n    with open(filename, 'r') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            lines += 1\n            words += len(row)\n\n    return lines, words\n\nlines, words = count_lines_and_words('data.csv')\nprint(f'Total lines: {lines}')\nprint(f'Total words: {words}')",
        "output": "import csv\n\ndef count_lines_and_words(filename):\n    lines = 0\n    words = 0\n    with open(filename, 'r') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            lines += 1\n            words += len(row)\n\n    return lines, words\n\nlines, words = count_lines_and_words('data.csv')\nprint(f'Total lines: {lines}')\nprint(f'Total words: {words}')"
    },
    {
        "instruction": "Write a Shell script that retrieves the current weather information for a given city using OpenWeatherMap API.",
        "input": "API_KEY='your_api_key'\nCITY_NAME='Los Angeles'",
        "response": "#!/bin/bash\n\nAPI_KEY='your_api_key'\nCITY_NAME='Los Angeles'\nWEATHER_URL=\"http://api.openweathermap.org/data/2.5/weather?q=${CITY_NAME}&appid=${API_KEY}&units=metric\"\n\nweather_data=$(curl -s ${WEATHER_URL})\necho \"Weather Information for ${CITY_NAME}: \"\necho ${weather_data} | jq '.weather[0].description, .main.temp, .main.humidity, .wind.speed'",
        "output": "#!/bin/bash\n\nAPI_KEY='your_api_key'\nCITY_NAME='Los Angeles'\nWEATHER_URL=\"http://api.openweathermap.org/data/2.5/weather?q=${CITY_NAME}&appid=${API_KEY}&units=metric\"\n\nweather_data=$(curl -s ${WEATHER_URL})\necho \"Weather Information for ${CITY_NAME}: \"\necho ${weather_data} | jq '.weather[0].description, .main.temp, .main.humidity, .wind.speed'"
    },
    {
        "instruction": "Implement a JavaScript function that extracts all the unique words from a given string and returns them as an array.",
        "input": "\"This is a sample string. This string contains sample words.\"",
        "response": "function extractUniqueWords(str) {\n    const words = str.match(/\\b\\w+\\b/g);\n    return [...new Set(words)];}\n\nconst inputStr = 'This is a sample string. This string contains sample words.';\nconst uniqueWords = extractUniqueWords(inputStr);\nconsole.log(uniqueWords);",
        "output": "function extractUniqueWords(str) {\n    const words = str.match(/\\b\\w+\\b/g);\n    return [...new Set(words)];}\n\nconst inputStr = 'This is a sample string. This string contains sample words.';\nconst uniqueWords = extractUniqueWords(inputStr);\nconsole.log(uniqueWords);"
    },
    {
        "instruction": "Implement a Python script to find the longest word in a given text, ignoring punctuation and capitalization.",
        "input": "The quick brown fox jumped over traffic which was incredibly slow!",
        "response": "import re\n\ndef longest_word(text):\n    words = re.findall('\\w+', text.lower())\n    longest = max(words, key=len)\n    return longest\n\ninput_text = 'The quick brown fox jumped over traffic which was incredibly slow!'\nresult = longest_word(input_text)\nprint(result)",
        "output": "import re\n\ndef longest_word(text):\n    words = re.findall('\\w+', text.lower())\n    longest = max(words, key=len)\n    return longest\n\ninput_text = 'The quick brown fox jumped over traffic which was incredibly slow!'\nresult = longest_word(input_text)\nprint(result)"
    },
    {
        "instruction": "Develop a JavaScript function that generates a Fibonacci sequence of a given length as an array.",
        "input": "5",
        "response": "function generateFibonacci(n) {\n    const sequence = [0, 1];\n    for (let i = 2; i < n; i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2]);\n    }\n    return sequence.slice(0, n);}\n\nconst n = 5;\nconst result = generateFibonacci(n);\nconsole.log(result);",
        "output": "function generateFibonacci(n) {\n    const sequence = [0, 1];\n    for (let i = 2; i < n; i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2]);\n    }\n    return sequence.slice(0, n);}\n\nconst n = 5;\nconst result = generateFibonacci(n);\nconsole.log(result);"
    },
    {
        "instruction": "Could you write a bash script that renames all files in a directory by adding a given prefix to the filenames?",
        "input": "Directory: '/tmp/files', Prefix: 'foobar_'",
        "response": "#!/bin/bash\n\ndirectory='/tmp/files'\nprefix='foobar_'\n\nfor file in \"$directory\"/*; do\n    filename=$(basename \"$file\")\n    mv \"$file\" \"$directory/$prefix$filename\"\ndone",
        "output": "#!/bin/bash\n\ndirectory='/tmp/files'\nprefix='foobar_'\n\nfor file in \"$directory\"/*; do\n    filename=$(basename \"$file\")\n    mv \"$file\" \"$directory/$prefix$filename\"\ndone"
    },
    {
        "instruction": "Design a Python function that accepts a list of strings and returns a new concatenated string with the first character of each string.",
        "input": "['apple', 'banana', 'cherry']",
        "response": "def concatenate_first_chars(strings):\n    result = ''\n    for s in strings:\n        result += s[0]\n    return result\n\noutput = concatenate_first_chars(['apple', 'banana', 'cherry'])\nprint(output)",
        "output": "def concatenate_first_chars(strings):\n    result = ''\n    for s in strings:\n        result += s[0]\n    return result\n\noutput = concatenate_first_chars(['apple', 'banana', 'cherry'])\nprint(output)"
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of a given positive integer.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int n = 5;\n    unsigned long long factorial = 1;\n\n    for(int i = 1; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    cout << \"Factorial of \" << n << \" = \" << factorial;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int n = 5;\n    unsigned long long factorial = 1;\n\n    for(int i = 1; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    cout << \"Factorial of \" << n << \" = \" << factorial;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a JavaScript function that takes a string as input and replaces all instances of a specific character with another character?",
        "input": "('hello world', 'l', 'x')",
        "response": "function replaceCharacter(inputString, targetChar, replacementChar) {\n    return inputString.split(targetChar).join(replacementChar);}\n\nconst result = replaceCharacter('hello world', 'l', 'x');\nconsole.log(result);",
        "output": "function replaceCharacter(inputString, targetChar, replacementChar) {\n    return inputString.split(targetChar).join(replacementChar);}\n\nconst result = replaceCharacter('hello world', 'l', 'x');\nconsole.log(result);"
    },
    {
        "instruction": "Generate a PHP function that takes a number as input and returns the n-th Fibonacci number.",
        "input": "8",
        "response": "<?php\nfunction getFibonacciNumber($n) {\n    if ($n <= 1) {\n        return $n;\n    }\n    return getFibonacciNumber($n - 1) + getFibonacciNumber($n - 2);}\n\n$fibNumber = getFibonacciNumber(8);\necho $fibNumber;\n?>",
        "output": "<?php\nfunction getFibonacciNumber($n) {\n    if ($n <= 1) {\n        return $n;\n    }\n    return getFibonacciNumber($n - 1) + getFibonacciNumber($n - 2);}\n\n$fibNumber = getFibonacciNumber(8);\necho $fibNumber;\n?>"
    },
    {
        "instruction": "Implement a C function that calculates the result of raising an integer x to the power of an integer y.",
        "input": "3, 4",
        "response": "#include <stdio.h>\n#include <math.h>\n\nint power(int x, int y) {\n    return pow(x, y);}\n\nint main() {\n    int x = 3;\n    int y = 4;\n    int result = power(x, y);\n    printf(\"%d^%d = %d\", x, y, result);\n    return 0;}",
        "output": "#include <stdio.h>\n#include <math.h>\n\nint power(int x, int y) {\n    return pow(x, y);}\n\nint main() {\n    int x = 3;\n    int y = 4;\n    int result = power(x, y);\n    printf(\"%d^%d = %d\", x, y, result);\n    return 0;}"
    },
    {
        "instruction": "How would you remove all non-numeric characters from a string in PHP?",
        "input": "th1s2_i3s4a5s7t8r",
        "response": "<?php\n\nfunction remove_non_numeric($str) {\n    return preg_replace('/\\D/', '', $str);}\n\n$str = \"th1s2_i3s4a5s7t8r\";\n$result = remove_non_numeric($str);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction remove_non_numeric($str) {\n    return preg_replace('/\\D/', '', $str);}\n\n$str = \"th1s2_i3s4a5s7t8r\";\n$result = remove_non_numeric($str);\necho $result;\n\n?>"
    },
    {
        "instruction": "Write a Python program that reads a text file, reverses its content, and saves the reversed content to a new file.",
        "input": "Input file content: \"GPT-3 is quite impressive!\", Output file name: \"reversed.txt\"",
        "response": "def reverse_file_content(input_file, output_file):\n    with open(input_file, 'r') as file:\n        content = file.read()\n    reversed_content = content[::-1]\n\n    with open(output_file, 'w') as file:\n        file.write(reversed_content)\n\ninput_file = 'input.txt'\noutput_file = 'reversed.txt'\nreverse_file_content(input_file, output_file)",
        "output": "def reverse_file_content(input_file, output_file):\n    with open(input_file, 'r') as file:\n        content = file.read()\n    reversed_content = content[::-1]\n\n    with open(output_file, 'w') as file:\n        file.write(reversed_content)\n\ninput_file = 'input.txt'\noutput_file = 'reversed.txt'\nreverse_file_content(input_file, output_file)"
    },
    {
        "instruction": "Construct a JavaScript program that reads the content of a user-selected CSV file and transforms its data into a JSON format.",
        "input": "CSV data: \"id,name,age\\n1,John,32\\n2,Jane,28\"",
        "response": "<!DOCTYPE html>\n<html>\n<body>\n\n<input type=\"file\" id=\"csvFile\" accept=\".csv\">\n<pre id=\"jsonData\"></pre>\n\n<script>\nfunction csvToJson(csv) {\n    const lines = csv.split('\\n');\n    const headers = lines[0].split(',');\n    const jsonData = [];\n\n    for (let i = 1; i < lines.length; i++) {\n        const obj = {};\n        const currentLine = lines[i].split(',');\n\n        for (let j = 0; j < headers.length; j++) {\n            obj[headers[j]] = currentLine[j];\n        }\n\n        jsonData.push(obj);\n    }\n\n    return jsonData;}\n\ndocument.getElementById('csvFile').addEventListener('change', (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n        const jsonData = csvToJson(e.target.result);\n        document.getElementById('jsonData').textContent = JSON.stringify(jsonData, null, 2);\n    };\n\n    reader.readAsText(file);});\n</script>\n\n</body>\n</html>",
        "output": "<!DOCTYPE html>\n<html>\n<body>\n\n<input type=\"file\" id=\"csvFile\" accept=\".csv\">\n<pre id=\"jsonData\"></pre>\n\n<script>\nfunction csvToJson(csv) {\n    const lines = csv.split('\\n');\n    const headers = lines[0].split(',');\n    const jsonData = [];\n\n    for (let i = 1; i < lines.length; i++) {\n        const obj = {};\n        const currentLine = lines[i].split(',');\n\n        for (let j = 0; j < headers.length; j++) {\n            obj[headers[j]] = currentLine[j];\n        }\n\n        jsonData.push(obj);\n    }\n\n    return jsonData;}\n\ndocument.getElementById('csvFile').addEventListener('change', (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n        const jsonData = csvToJson(e.target.result);\n        document.getElementById('jsonData').textContent = JSON.stringify(jsonData, null, 2);\n    };\n\n    reader.readAsText(file);});\n</script>\n\n</body>\n</html>"
    },
    {
        "instruction": "Develop a Python script that reads data from a CSV file and finds the average of specific column.",
        "input": "filename: 'data.csv', column: 'price'",
        "response": "import csv\n\ndef average_of_column(file_name, column_name):\n    data = []\n    with open(file_name, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            data.append(float(row[column_name]))\n    return sum(data) / len(data)\n\nresult = average_of_column('data.csv', 'price')\nprint(result)",
        "output": "import csv\n\ndef average_of_column(file_name, column_name):\n    data = []\n    with open(file_name, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            data.append(float(row[column_name]))\n    return sum(data) / len(data)\n\nresult = average_of_column('data.csv', 'price')\nprint(result)"
    },
    {
        "instruction": "Write a C++ function that finds the factorial of a given positive integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0)\n        return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    unsigned long long result = factorial(num);\n    cout << \"Factorial of \" << num << \" is: \" << result << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0)\n        return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    unsigned long long result = factorial(num);\n    cout << \"Factorial of \" << num << \" is: \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a JavaScript function to recursively display the Fibonacci sequence up to the nth element?",
        "input": "10",
        "response": "function fibonacci(n) {\n    if (n <= 1) \n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nfunction displayFibonacciSequence(n) {\n    for (let i = 0; i < n; i++) {\n        console.log(fibonacci(i));\n    }}\n\ndisplayFibonacciSequence(10);",
        "output": "function fibonacci(n) {\n    if (n <= 1) \n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nfunction displayFibonacciSequence(n) {\n    for (let i = 0; i < n; i++) {\n        console.log(fibonacci(i));\n    }}\n\ndisplayFibonacciSequence(10);"
    },
    {
        "instruction": "Design a PHP function that sanitizes user input by removing both HTML and JavaScript tags.",
        "input": "<script>alert('Hello!');</script><b>User input text</b>",
        "response": "<?php\n\nfunction sanitize_input($input) {\n    return htmlspecialchars(strip_tags(trim($input)));}\n\n$raw_input = \"<script>alert('Hello!');</script><b>User input text</b>\";\n$sanitized_input = sanitize_input($raw_input);\n\necho $sanitized_input;\n\n?>",
        "output": "<?php\n\nfunction sanitize_input($input) {\n    return htmlspecialchars(strip_tags(trim($input)));}\n\n$raw_input = \"<script>alert('Hello!');</script><b>User input text</b>\";\n$sanitized_input = sanitize_input($raw_input);\n\necho $sanitized_input;\n\n?>"
    },
    {
        "instruction": "Write a C program that reads the user's age and, if the user is older than 18, prints 'You are allowed to vote'.",
        "input": "21",
        "response": "#include <stdio.h>\n\nint main() {\n    int age;\n    printf(\"Enter your age: \");\n    scanf(\"%d\", &age);\n\n    if (age > 18) {\n        printf(\"You are allowed to vote.\\n\");\n    }\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    int age;\n    printf(\"Enter your age: \");\n    scanf(\"%d\", &age);\n\n    if (age > 18) {\n        printf(\"You are allowed to vote.\\n\");\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Develop a Shell script that takes a CSV file as input, sorts it by the second column, and saves the result in a new file.",
        "input": "input.csv, output.csv",
        "response": "#!/bin/bash\n\nif [ $# -ne 2 ]; then\n    echo \"Usage: $0 inputfile outputfile\"\n    exit 1\nfi\n\ninputfile=$1\noutputfile=$2\n\n# Sort the input CSV file by the second column\nsort -t',' -k2,2 \"$inputfile\" > \"$outputfile\"",
        "output": "#!/bin/bash\n\nif [ $# -ne 2 ]; then\n    echo \"Usage: $0 inputfile outputfile\"\n    exit 1\nfi\n\ninputfile=$1\noutputfile=$2\n\n# Sort the input CSV file by the second column\nsort -t',' -k2,2 \"$inputfile\" > \"$outputfile\""
    },
    {
        "instruction": "Write a Python function that accepts a list of words and returns a dictionary with the words as keys and the word lengths as values.",
        "input": "['apple', 'banana', 'orange']",
        "response": "def words_lengths(words):\n    return {word: len(word) for word in words}\n\nresult = words_lengths(['apple', 'banana', 'orange'])\nprint(result)",
        "output": "def words_lengths(words):\n    return {word: len(word) for word in words}\n\nresult = words_lengths(['apple', 'banana', 'orange'])\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function that receives a string expressing time in 12-hour format and returns this time string in 24-hour format.",
        "input": "'02:30:00PM'",
        "response": "function convertTo24Hour(time) {\n  const [hours, minutes, secondsWithSuffix] = time.split(':');\n  const [seconds, suffix] = [secondsWithSuffix.slice(0, 2), secondsWithSuffix.slice(2)];\n\n  let newHours = parseInt(hours);\n  if (suffix === 'AM' && newHours === 12) newHours = 0;\n  if (suffix === 'PM' && newHours !== 12) newHours += 12;\n\n  return `${newHours.toString().padStart(2, '0')}:${minutes}:${seconds}`;\n}\n\nconsole.log(convertTo24Hour('02:30:00PM'));",
        "output": "function convertTo24Hour(time) {\n  const [hours, minutes, secondsWithSuffix] = time.split(':');\n  const [seconds, suffix] = [secondsWithSuffix.slice(0, 2), secondsWithSuffix.slice(2)];\n\n  let newHours = parseInt(hours);\n  if (suffix === 'AM' && newHours === 12) newHours = 0;\n  if (suffix === 'PM' && newHours !== 12) newHours += 12;\n\n  return `${newHours.toString().padStart(2, '0')}:${minutes}:${seconds}`;\n}\n\nconsole.log(convertTo24Hour('02:30:00PM'));"
    },
    {
        "instruction": "How would you determine the length of a string in C without using the 'strlen' function?",
        "input": "\"hello, world\"",
        "response": "#include <stdio.h>\n\nint get_string_length(const char* str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;}\n\nint main() {\n    char input[] = \"hello, world\";\n    int length = get_string_length(input);\n    printf(\"The length of the string is: %d\\n\", length);\n    return 0;}",
        "output": "#include <stdio.h>\n\nint get_string_length(const char* str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;}\n\nint main() {\n    char input[] = \"hello, world\";\n    int length = get_string_length(input);\n    printf(\"The length of the string is: %d\\n\", length);\n    return 0;}"
    },
    {
        "instruction": "Create a Python script that reads a CSV file and calculates the average of numbers found in one of its columns.",
        "input": "filename: 'data.csv', column: 2\nContent of 'data.csv':\n\"Timestamp\", \"Category\", \"Price\"\n\"2021-01-01 00:00:00\",\"A\",32.5\n\"2021-01-01 01:00:00\",\"B\",25.0\n\"2021-01-01 02:00:00\",\"A\",27.75\n\"2021-01-01 03:00:00\",\"C\",19.95",
        "response": "import csv\n\nfilename = 'data.csv'\ncolumn = 2\n\nwith open(filename, 'r') as file:\n    reader = csv.reader(file)\n    header = next(reader)  # Skip header row\n\n    total_value = 0\n    num_rows = 0\n    for row in reader:\n        value = float(row[column])\n        total_value += value\n        num_rows += 1\n\naverage = total_value / num_rows\nprint(f\"The average of column {column} is: {average}\")",
        "output": "import csv\n\nfilename = 'data.csv'\ncolumn = 2\n\nwith open(filename, 'r') as file:\n    reader = csv.reader(file)\n    header = next(reader)  # Skip header row\n\n    total_value = 0\n    num_rows = 0\n    for row in reader:\n        value = float(row[column])\n        total_value += value\n        num_rows += 1\n\naverage = total_value / num_rows\nprint(f\"The average of column {column} is: {average}\")"
    },
    {
        "instruction": "Write a shell script that takes a directory path as a command line argument and prints the number of files within the directory.",
        "input": "/usr/local/my_files",
        "response": "#!/bin/bash\n\ndirectory=\"$1\"\nnum_files=$(find \"$directory\" -type f | wc -l)\n\necho \"There are $num_files files in the directory $directory.\"",
        "output": "#!/bin/bash\n\ndirectory=\"$1\"\nnum_files=$(find \"$directory\" -type f | wc -l)\n\necho \"There are $num_files files in the directory $directory.\""
    },
    {
        "instruction": "Develop a C++ function that takes a vector of integers and arranges them in increasing order using the Bubble Sort algorithm.",
        "input": "std::vector<int> v = {6, 8, 1, 5, 3}",
        "response": "#include <iostream>\n#include <vector>\n\nvoid bubble_sort(std::vector<int>& v) {\n    for (std::size_t i = 0; i < v.size() - 1; ++i) {\n        for (std::size_t j = 0; j < v.size() - i - 1; ++j) {\n            if (v[j] > v[j + 1]) {\n                std::swap(v[j], v[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    std::vector<int> v = {6, 8, 1, 5, 3};\n    bubble_sort(v);\n    \n    for (int num : v) {\n        std::cout << num << ' ';\n    }\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nvoid bubble_sort(std::vector<int>& v) {\n    for (std::size_t i = 0; i < v.size() - 1; ++i) {\n        for (std::size_t j = 0; j < v.size() - i - 1; ++j) {\n            if (v[j] > v[j + 1]) {\n                std::swap(v[j], v[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    std::vector<int> v = {6, 8, 1, 5, 3};\n    bubble_sort(v);\n    \n    for (int num : v) {\n        std::cout << num << ' ';\n    }\n    return 0;}"
    },
    {
        "instruction": "Can you write a Python script that reads a CSV file and calculates the average value of a specified column?",
        "input": "filename: 'data.csv', specified_column: 1",
        "response": "import csv\n\ndef calculate_average(filename, specified_column):\n    total = 0\n    count = 0\n\n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            total += float(row[specified_column])\n            count += 1\n\n    return total / count\n\naverage_value = calculate_average('data.csv', 1)\nprint(average_value)",
        "output": "import csv\n\ndef calculate_average(filename, specified_column):\n    total = 0\n    count = 0\n\n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            total += float(row[specified_column])\n            count += 1\n\n    return total / count\n\naverage_value = calculate_average('data.csv', 1)\nprint(average_value)"
    },
    {
        "instruction": "Write a JavaScript function that accepts an array of user objects, each containing an 'id' and a 'name', and returns a new array with the names sorted alphabetically.",
        "input": "[{id: 3, name: \"John\"}, {id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}]",
        "response": "function sortUsersByName(users) {\n    return users.sort((a, b) => a.name.localeCompare(b.name)).map(user => user.name);}\n\nconst users = [{id: 3, name: \"John\"}, {id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}];\nconst sorted_names = sortUsersByName(users);\nconsole.log(sorted_names);",
        "output": "function sortUsersByName(users) {\n    return users.sort((a, b) => a.name.localeCompare(b.name)).map(user => user.name);}\n\nconst users = [{id: 3, name: \"John\"}, {id: 1, name: \"Alice\"}, {id: 2, name: \"Bob\"}];\nconst sorted_names = sortUsersByName(users);\nconsole.log(sorted_names);"
    },
    {
        "instruction": "Create a PHP function that receives an associative array with key-value pairs and returns a new array with the keys and values swapped.",
        "input": "array('a' => 1, 'b' => 2, 'c' => 3)",
        "response": "<?php\n\nfunction swap_keys_and_values($arr) {\n    return array_flip($arr);}\n\n$input_array = array('a' => 1, 'b' => 2, 'c' => 3);\n$result_array = swap_keys_and_values($input_array);\nprint_r($result_array);\n\n?>",
        "output": "<?php\n\nfunction swap_keys_and_values($arr) {\n    return array_flip($arr);}\n\n$input_array = array('a' => 1, 'b' => 2, 'c' => 3);\n$result_array = swap_keys_and_values($input_array);\nprint_r($result_array);\n\n?>"
    },
    {
        "instruction": "Implement a C++ function that computes the factorial of a given positive integer.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Construct a SQL query to retrieve all rows from the Employees table where the employees' salaries are greater than $50,000.",
        "input": "Employees table with columns: EmployeeID, FirstName, LastName, Salary",
        "response": "SELECT *\nFROM Employees\nWHERE Salary > 50000;",
        "output": "SELECT *\nFROM Employees\nWHERE Salary > 50000;"
    },
    {
        "instruction": "Create a PHP script that reads data from a text file and outputs its content.",
        "input": "data.txt - a file containing text",
        "response": "<?php\n$filename = \"data.txt\";\n$file = fopen($filename, \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line . \"<br />\";\n    }\n    fclose($file);} else {\n    echo \"Error: Unable to open the file.\";}\n?>",
        "output": "<?php\n$filename = \"data.txt\";\n$file = fopen($filename, \"r\");\n\nif ($file) {\n    while (($line = fgets($file)) !== false) {\n        echo $line . \"<br />\";\n    }\n    fclose($file);} else {\n    echo \"Error: Unable to open the file.\";}\n?>"
    },
    {
        "instruction": "Write a bash script that extracts the 5th field separated by a comma from each line of a CSV file and echoes the output.",
        "input": "sample.csv - a CSV file with multiple fields separated by commas",
        "response": "#!/bin/bash\nfilename=\"sample.csv\"\n\nwhile IFS=',' read -ra FIELDS\ndo\n    echo \"${FIELDS[4]}\"\ndone < \"$filename\"",
        "output": "#!/bin/bash\nfilename=\"sample.csv\"\n\nwhile IFS=',' read -ra FIELDS\ndo\n    echo \"${FIELDS[4]}\"\ndone < \"$filename\""
    },
    {
        "instruction": "Write a C++ function that reverses a string in place.",
        "input": "Hello, World!",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Construct a Python program that reads a CSV file and calculates the average of a specific column.",
        "input": "example.csv\nName,Age,Score\nAlice,30,85\nBob,25,90",
        "response": "import csv\n\ndef calculate_average(file_path, column_name):\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        total = 0\n        count = 0\n        for row in reader:\n            total += float(row[column_name])\n            count += 1\n    return total / count\n\naverage = calculate_average('example.csv', 'Score')\nprint('Average Score:', average)",
        "output": "import csv\n\ndef calculate_average(file_path, column_name):\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        total = 0\n        count = 0\n        for row in reader:\n            total += float(row[column_name])\n            count += 1\n    return total / count\n\naverage = calculate_average('example.csv', 'Score')\nprint('Average Score:', average)"
    },
    {
        "instruction": "How would you implement a function in JavaScript that accepts a string as input and returns the string without any vowels?",
        "input": "I am a GPT-3 AI model!",
        "response": "function removeVowels(str) {\n    return str.replace(/[aeiou]/ig, '');}\n\nconst input = 'I am a GPT-3 AI model!';\nconst result = removeVowels(input);\nconsole.log(result);",
        "output": "function removeVowels(str) {\n    return str.replace(/[aeiou]/ig, '');}\n\nconst input = 'I am a GPT-3 AI model!';\nconst result = removeVowels(input);\nconsole.log(result);"
    },
    {
        "instruction": "Design a SQL query to retrieve rows from a table named 'employees' where the annual salary is between 50000 and 70000, inclusive.",
        "input": "Table: employees\nColumns: id, first_name, last_name, annual_salary",
        "response": "SELECT * FROM employees WHERE annual_salary >= 50000 AND annual_salary <= 70000;",
        "output": "SELECT * FROM employees WHERE annual_salary >= 50000 AND annual_salary <= 70000;"
    },
    {
        "instruction": "Implement a Python class to represent a bank account with methods to deposit, withdraw, and display the current balance.",
        "input": "account = BankAccount('John Doe', 500)\naccount.deposit(200)\naccount.withdraw(100)\naccount.display_balance()",
        "response": "class BankAccount:\n    def __init__(self, owner, balance):\n        self.owner = owner\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print('Insufficient funds.')\n\n    def display_balance(self):\n        print(f'Current balance: ${self.balance}')\n\naccount = BankAccount('John Doe', 500)\naccount.deposit(200)\naccount.withdraw(100)\naccount.display_balance()",
        "output": "class BankAccount:\n    def __init__(self, owner, balance):\n        self.owner = owner\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print('Insufficient funds.')\n\n    def display_balance(self):\n        print(f'Current balance: ${self.balance}')\n\naccount = BankAccount('John Doe', 500)\naccount.deposit(200)\naccount.withdraw(100)\naccount.display_balance()"
    },
    {
        "instruction": "How would you implement a program in C++ that reverses the order of words in a given sentence?",
        "input": "My name is John Doe",
        "response": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::string sentence = \"My name is John Doe\";\n    std::istringstream iss(sentence);\n    std::vector<std::string> words;\n\n    for (std::string word; iss >> word; ) {\n        words.push_back(word);\n    }\n\n    std::reverse(words.begin(), words.end());\n    for (const auto& word: words) {\n        std::cout << word << ' ';\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::string sentence = \"My name is John Doe\";\n    std::istringstream iss(sentence);\n    std::vector<std::string> words;\n\n    for (std::string word; iss >> word; ) {\n        words.push_back(word);\n    }\n\n    std::reverse(words.begin(), words.end());\n    for (const auto& word: words) {\n        std::cout << word << ' ';\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Develop a JavaScript function to perform the Caesar cipher on a given string, shifting the characters by an integer offset.",
        "input": "cipher('Hello, World!', 3)",
        "response": "function caesarCipher(str, offset) {\n    return str.replace(/[a-zA-Z]/g, function(c) {\n        const charCode = c.charCodeAt(0);\n        const base = charCode >= 97 && charCode <= 122 ? 97 : 65;\n        return String.fromCharCode(((charCode - base + offset) % 26) + base);\n    });\n}\n\nconst cipheredText = caesarCipher('Hello, World!', 3);\nconsole.log(cipheredText);",
        "output": "function caesarCipher(str, offset) {\n    return str.replace(/[a-zA-Z]/g, function(c) {\n        const charCode = c.charCodeAt(0);\n        const base = charCode >= 97 && charCode <= 122 ? 97 : 65;\n        return String.fromCharCode(((charCode - base + offset) % 26) + base);\n    });\n}\n\nconst cipheredText = caesarCipher('Hello, World!', 3);\nconsole.log(cipheredText);"
    },
    {
        "instruction": "Write a PHP function that takes an array of integers as input and returns the array with duplicates removed.",
        "input": "[1, 2, 3, 3, 4, 5, 5]",
        "response": "<?php\n\nfunction removeDuplicates($arr) {\n    return array_unique($arr);\n}\n\n$input = [1, 2, 3, 3, 4, 5, 5];\n$result = removeDuplicates($input);\n\nprint_r($result);\n\n?>",
        "output": "<?php\n\nfunction removeDuplicates($arr) {\n    return array_unique($arr);\n}\n\n$input = [1, 2, 3, 3, 4, 5, 5];\n$result = removeDuplicates($input);\n\nprint_r($result);\n\n?>"
    },
    {
        "instruction": "Design a C++ program that reads a file containing lines with numbers and outputs the average at the end.",
        "input": "5\n7\n9\n",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string line;\n    std::ifstream inputFile(\"numbers.txt\");\n    int sum = 0;\n    int count = 0;\n\n    if (inputFile.is_open()) {\n        while (getline(inputFile, line)) {\n            sum += std::stoi(line);\n            count++;\n        }\n        inputFile.close();\n    }\n\n    double average = static_cast<double>(sum) / count;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string line;\n    std::ifstream inputFile(\"numbers.txt\");\n    int sum = 0;\n    int count = 0;\n\n    if (inputFile.is_open()) {\n        while (getline(inputFile, line)) {\n            sum += std::stoi(line);\n            count++;\n        }\n        inputFile.close();\n    }\n\n    double average = static_cast<double>(sum) / count;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a Python function that calculates the factorial of a positive integer n?",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Write a shell script that echoes the current date and time in the format YYYY-MM-DD HH:MM:SS.",
        "input": "",
        "response": "#!/bin/bash\n\ndate '+%Y-%m-%d %H:%M:%S'",
        "output": "#!/bin/bash\n\ndate '+%Y-%m-%d %H:%M:%S'"
    },
    {
        "instruction": "Create a JavaScript function to generate a random UUID (Universally Unique Identifier) in the format XXXXXXXX-XXXX-4XXX-YXXX-XXXXXXXXXXXX.",
        "input": "",
        "response": "function generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nconsole.log(generateUUID());",
        "output": "function generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nconsole.log(generateUUID());"
    },
    {
        "instruction": "Design a Python program that reads a CSV file and prints the number of rows and columns.",
        "input": "example.csv content:\ncountry, population\nUSA, 331000000\nCanada, 37500000",
        "response": "import csv\n\ndef get_csv_dimensions(file_name):\n    with open(file_name, 'r') as file:\n        reader = csv.reader(file)\n        rows = len(list(reader))\n        file.seek(0)\n        columns = len(next(reader))\n    return rows, columns\n\nrows, columns = get_csv_dimensions('example.csv')\nprint(f'Rows: {rows}, Columns: {columns}')",
        "output": "import csv\n\ndef get_csv_dimensions(file_name):\n    with open(file_name, 'r') as file:\n        reader = csv.reader(file)\n        rows = len(list(reader))\n        file.seek(0)\n        columns = len(next(reader))\n    return rows, columns\n\nrows, columns = get_csv_dimensions('example.csv')\nprint(f'Rows: {rows}, Columns: {columns}')"
    },
    {
        "instruction": "Write a C++ function that sorts an array of integers in descending order.",
        "input": "{9, 4, 6, 2, 8}",
        "response": "#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nvoid sort_descending(int arr[], int size) {\n    sort(arr, arr + size, greater<int>());}\n\nint main() {\n    int arr[] = {9, 4, 6, 2, 8};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    sort_descending(arr, size);\n\n    for (int i = 0; i < size; i++) {\n        cout << arr[i] << ' ';\n    }\n\n    return 0;}",
        "output": "#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nvoid sort_descending(int arr[], int size) {\n    sort(arr, arr + size, greater<int>());}\n\nint main() {\n    int arr[] = {9, 4, 6, 2, 8};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    sort_descending(arr, size);\n\n    for (int i = 0; i < size; i++) {\n        cout << arr[i] << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "How would you create a JavaScript function to fetch details of a GitHub user and return their profile information as an object?",
        "input": "'openai'",
        "response": "async function fetchGitHubUserProfile(username) {\n    const response = await fetch(`https://api.github.com/users/${username}`);\n    const profile = await response.json();\n    return profile;}\n\nfetchGitHubUserProfile('openai').then((profile) => {\n    console.log(profile);});",
        "output": "async function fetchGitHubUserProfile(username) {\n    const response = await fetch(`https://api.github.com/users/${username}`);\n    const profile = await response.json();\n    return profile;}\n\nfetchGitHubUserProfile('openai').then((profile) => {\n    console.log(profile);});"
    },
    {
        "instruction": "Can you write a PHP function to find the minimum, maximum, and average values in an associative array of numbers?",
        "input": "$numbers = array('one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5);",
        "response": "<?php\nfunction find_min_max_avg($numbers) {\n    $min = min($numbers);\n    $max = max($numbers);\n    $avg = array_sum($numbers) / count($numbers);\n    return array('min' => $min, 'max' => $max, 'avg' => $avg);}\n\n$numbers = array('one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5);\n$result = find_min_max_avg($numbers);\nprint_r($result);\n\n?>",
        "output": "<?php\nfunction find_min_max_avg($numbers) {\n    $min = min($numbers);\n    $max = max($numbers);\n    $avg = array_sum($numbers) / count($numbers);\n    return array('min' => $min, 'max' => $max, 'avg' => $avg);}\n\n$numbers = array('one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5);\n$result = find_min_max_avg($numbers);\nprint_r($result);\n\n?>"
    },
    {
        "instruction": "Develop a C++ function that takes a vector of integers and sorts them in ascending order using the Bubble Sort algorithm.",
        "input": "{5, 9, 1, 8, 2}",
        "response": "#include <iostream>\n#include <vector>\n\nvoid bubbleSort(std::vector<int>& arr) {\n    for (std::size_t i = 0; i < arr.size(); ++i) {\n        for (std::size_t j = 0; j < arr.size() - i - 1; ++j) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    std::vector<int> arr = {5, 9, 1, 8, 2};\n    bubbleSort(arr);\n    \n    for (int num : arr) {\n        std::cout << num << ' ';\n    }}\n",
        "output": "#include <iostream>\n#include <vector>\n\nvoid bubbleSort(std::vector<int>& arr) {\n    for (std::size_t i = 0; i < arr.size(); ++i) {\n        for (std::size_t j = 0; j < arr.size() - i - 1; ++j) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    std::vector<int> arr = {5, 9, 1, 8, 2};\n    bubbleSort(arr);\n    \n    for (int num : arr) {\n        std::cout << num << ' ';\n    }}\n"
    },
    {
        "instruction": "Implement a JavaScript function that takes a string and returns a boolean indicating whether the provided string consists of balanced parentheses.",
        "input": "{([])}",
        "response": "function isBalanced(s) {\n    const stack = [];\n    const pairs = {')': '(', '}': '{', ']': '['};\n    \n    for (const char of s) {\n        if (char in pairs) {\n            if (stack.length === 0 || stack.pop() !== pairs[char]) {\n                return false;\n            }\n        } else {\n            stack.push(char);\n        }\n    }\n    \n    return stack.length === 0;}\n\nconsole.log(isBalanced('{([])}'));",
        "output": "function isBalanced(s) {\n    const stack = [];\n    const pairs = {')': '(', '}': '{', ']': '['};\n    \n    for (const char of s) {\n        if (char in pairs) {\n            if (stack.length === 0 || stack.pop() !== pairs[char]) {\n                return false;\n            }\n        } else {\n            stack.push(char);\n        }\n    }\n    \n    return stack.length === 0;}\n\nconsole.log(isBalanced('{([])}'));"
    },
    {
        "instruction": "Design a Python script reads a .csv file and outputs the total number of rows and columns of the file.",
        "input": "sample.csv",
        "response": "import csv\n\ndef analyze_csv(filename):\n    with open(filename, mode='r') as csvfile:\n        csv_reader = csv.reader(csvfile)\n        \n        row_count = 0\n        col_count = 0\n        \n        for row in csv_reader:\n            if row_count == 0:\n                col_count = len(row)\n            \n            row_count += 1\n        \n        return row_count, col_count\n\nsample_file = 'sample.csv'\nrows, columns = analyze_csv(sample_file)\nprint(f'Rows: {rows}, Columns: {columns}')",
        "output": "import csv\n\ndef analyze_csv(filename):\n    with open(filename, mode='r') as csvfile:\n        csv_reader = csv.reader(csvfile)\n        \n        row_count = 0\n        col_count = 0\n        \n        for row in csv_reader:\n            if row_count == 0:\n                col_count = len(row)\n            \n            row_count += 1\n        \n        return row_count, col_count\n\nsample_file = 'sample.csv'\nrows, columns = analyze_csv(sample_file)\nprint(f'Rows: {rows}, Columns: {columns}')"
    },
    {
        "instruction": "Can you write a shell script that accepts a filename as an argument and prints the number of lines in the file?",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfilename=$1\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\"",
        "output": "#!/bin/bash\n\nfilename=$1\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\""
    },
    {
        "instruction": "Write a C# function that converts a given hexadecimal string to an integer value.",
        "input": "1A3B",
        "response": "using System;\n\nclass HexConverter {\n    public static int HexToInt(string hex) {\n        return Convert.ToInt32(hex, 16);\n    }\n    \n    public static void Main() {\n        string hexInput = \"1A3B\";\n        int intValue = HexToInt(hexInput);\n        Console.WriteLine(intValue);\n    }}",
        "output": "using System;\n\nclass HexConverter {\n    public static int HexToInt(string hex) {\n        return Convert.ToInt32(hex, 16);\n    }\n    \n    public static void Main() {\n        string hexInput = \"1A3B\";\n        int intValue = HexToInt(hexInput);\n        Console.WriteLine(intValue);\n    }}"
    },
    {
        "instruction": "Create a Python function that takes an array of integers and sorts them using the bubble sort algorithm.",
        "input": "[34, 7, 23, 12, 67]",
        "response": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr_to_sort = [34, 7, 23, 12, 67]\nsorted_arr = bubble_sort(arr_to_sort)\nprint(sorted_arr)",
        "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr_to_sort = [34, 7, 23, 12, 67]\nsorted_arr = bubble_sort(arr_to_sort)\nprint(sorted_arr)"
    },
    {
        "instruction": "How would you implement a simple REST API endpoint in node.js with Express.js that listens for GET requests and returns the current date and time as a JSON object?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/datetime', (req, res) => {\n    const currentDateTime = new Date();\n    res.json({ 'date_and_time': currentDateTime });});\n\napp.listen(port, () => {\n    console.log(`Server listening at http://localhost:${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/datetime', (req, res) => {\n    const currentDateTime = new Date();\n    res.json({ 'date_and_time': currentDateTime });});\n\napp.listen(port, () => {\n    console.log(`Server listening at http://localhost:${port}`);});"
    },
    {
        "instruction": "Create a shell script that takes a filename as a command line argument and outputs the number of lines in the file.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nif [ $# -eq 1 ]; then\n    filename=$1\n    if [ -f \"$filename\" ]; then\n        line_count=$(wc -l < \"$filename\")\n        echo \"Number of lines in $filename: $line_count\"\n    else\n        echo \"Error: File does not exist.\"\n    fi\nelse\n    echo \"Usage: bash count_lines.sh <filename>\"\nfi",
        "output": "#!/bin/bash\n\nif [ $# -eq 1 ]; then\n    filename=$1\n    if [ -f \"$filename\" ]; then\n        line_count=$(wc -l < \"$filename\")\n        echo \"Number of lines in $filename: $line_count\"\n    else\n        echo \"Error: File does not exist.\"\n    fi\nelse\n    echo \"Usage: bash count_lines.sh <filename>\"\nfi"
    },
    {
        "instruction": "Implement a C++ program to reverse a string input by the user.",
        "input": "OpenAI",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input = \"OpenAI\";\n    std::reverse(input.begin(), input.end());\n    std::cout << input << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input = \"OpenAI\";\n    std::reverse(input.begin(), input.end());\n    std::cout << input << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you develop a PHP function that downloads a file from a given URL to a specified folder?",
        "input": "https://example.com/file.pdf, downloads/",
        "response": "function downloadFile($url, $destination_folder) {\n    $file_name = basename($url);\n    $full_destination_path = rtrim($destination_folder, '/') . '/' . $file_name;\n    $file_contents = file_get_contents($url);\n    return file_put_contents($full_destination_path, $file_contents) !== false;}\n\n$url = 'https://example.com/file.pdf';\n$destination_folder = 'downloads/';\ndownloadFile($url, $destination_folder);",
        "output": "function downloadFile($url, $destination_folder) {\n    $file_name = basename($url);\n    $full_destination_path = rtrim($destination_folder, '/') . '/' . $file_name;\n    $file_contents = file_get_contents($url);\n    return file_put_contents($full_destination_path, $file_contents) !== false;}\n\n$url = 'https://example.com/file.pdf';\n$destination_folder = 'downloads/';\ndownloadFile($url, $destination_folder);"
    },
    {
        "instruction": "Design a shell script that finds duplicated files within a chosen folder and lists them in a text file.",
        "input": "folder_path: /path/to/folder, output_file: duplicates.txt",
        "response": "#!/bin/bash\nfolder_path=\"/path/to/folder\"\noutput_file=\"duplicates.txt\"\n\nfind \"$folder_path\" -type f -exec md5sum {} \\; | sort | uniq -w32 -dD > \"$output_file\"",
        "output": "#!/bin/bash\nfolder_path=\"/path/to/folder\"\noutput_file=\"duplicates.txt\"\n\nfind \"$folder_path\" -type f -exec md5sum {} \\; | sort | uniq -w32 -dD > \"$output_file\""
    },
    {
        "instruction": "Construct a SQL query that returns the top 5 highest-scoring users from a 'users' table with columns 'id', 'username', and 'score'.",
        "input": "Table: users, Columns: id, username, score",
        "response": "SELECT id, username, score\nFROM users\nORDER BY score DESC\nLIMIT 5;",
        "output": "SELECT id, username, score\nFROM users\nORDER BY score DESC\nLIMIT 5;"
    },
    {
        "instruction": "Design a C++ function that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num);\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num);\n    return 0;}"
    },
    {
        "instruction": "Write a Python script making use of pandas library to read a CSV file and filter rows with a specific value in a given column.",
        "input": "data.csv, column_name=\"age\", value=30",
        "response": "import pandas as pd\n\nfile_path = 'data.csv'\ncolumn_name = 'age'\nvalue = 30\n\ndataframe = pd.read_csv(file_path)\nfiltered_rows = dataframe[dataframe[column_name] == value]\nprint(filtered_rows)",
        "output": "import pandas as pd\n\nfile_path = 'data.csv'\ncolumn_name = 'age'\nvalue = 30\n\ndataframe = pd.read_csv(file_path)\nfiltered_rows = dataframe[dataframe[column_name] == value]\nprint(filtered_rows)"
    },
    {
        "instruction": "Implement a Java function that merges two sorted arrays into a single sorted array without using in-built functions.",
        "input": "array1: [1, 3, 5], array2: [2, 4, 6]",
        "response": "public int[] mergeSortedArrays(int[] arr1, int[] arr2) {\n    int i = 0, j = 0, k = 0;\n    int[] result = new int[arr1.length + arr2.length];\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            result[k++] = arr1[i++];\n        } else {\n            result[k++] = arr2[j++];\n        }\n    }\n\n    while (i < arr1.length) {\n        result[k++] = arr1[i++];\n    }\n\n    while (j < arr2.length) {\n        result[k++] = arr2[j++];\n    }\n\n    return result;}",
        "output": "public int[] mergeSortedArrays(int[] arr1, int[] arr2) {\n    int i = 0, j = 0, k = 0;\n    int[] result = new int[arr1.length + arr2.length];\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            result[k++] = arr1[i++];\n        } else {\n            result[k++] = arr2[j++];\n        }\n    }\n\n    while (i < arr1.length) {\n        result[k++] = arr1[i++];\n    }\n\n    while (j < arr2.length) {\n        result[k++] = arr2[j++];\n    }\n\n    return result;}"
    },
    {
        "instruction": "How would you write a Shell script to list all directories in the current path?",
        "input": "",
        "response": "#!/bin/bash\nfor directory in */; do\n    echo $directory\ndone",
        "output": "#!/bin/bash\nfor directory in */; do\n    echo $directory\ndone"
    },
    {
        "instruction": "Construct a query to find all employees with a salary greater than 50,000 from a SQL database.",
        "input": "employee: [{'id': 1, 'name': 'Alice', 'salary': 60000}, {'id': 2, 'name': 'Bob', 'salary': 45000}]",
        "response": "SELECT * FROM employee WHERE salary > 50000;",
        "output": "SELECT * FROM employee WHERE salary > 50000;"
    },
    {
        "instruction": "Write a C function that reads a text file and counts the number of words in it.",
        "input": "filename: 'sample.txt', file_content: 'This is a sample file with some text.'",
        "response": "#include <stdio.h>\n#include <stdbool.h>\n#include <ctype.h>\n\nint count_words(const char *filename);\n\nint main() {\n    int word_count = count_words('sample.txt');\n    printf('The file contains %d words.', word_count);\n\n    return 0;}\n\nint count_words(const char *filename) {\n    FILE *file = fopen(filename, 'r');\n    if (!file) {\n        printf('Error opening file.\\n');\n        return -1;\n    }\n\n    int word_count = 0;\n    bool in_word = false;\n    \n    int c;\n    while ((c = fgetc(file)) != EOF) {\n        if (isspace(c)) {\n            in_word = false;\n        } else if (!in_word) {\n            in_word = true;\n            word_count++;\n        }\n    }\n\n    fclose(file);\n    return word_count;}",
        "output": "#include <stdio.h>\n#include <stdbool.h>\n#include <ctype.h>\n\nint count_words(const char *filename);\n\nint main() {\n    int word_count = count_words('sample.txt');\n    printf('The file contains %d words.', word_count);\n\n    return 0;}\n\nint count_words(const char *filename) {\n    FILE *file = fopen(filename, 'r');\n    if (!file) {\n        printf('Error opening file.\\n');\n        return -1;\n    }\n\n    int word_count = 0;\n    bool in_word = false;\n    \n    int c;\n    while ((c = fgetc(file)) != EOF) {\n        if (isspace(c)) {\n            in_word = false;\n        } else if (!in_word) {\n            in_word = true;\n            word_count++;\n        }\n    }\n\n    fclose(file);\n    return word_count;}"
    },
    {
        "instruction": "Create a JavaScript function that takes a callback as a parameter and executes it after a delay of 2 seconds.",
        "input": "",
        "response": "function executeWithDelay(callback) {\n    setTimeout(callback, 2000);}\n\nexecuteWithDelay(function() {\n    console.log('Delayed execution');});",
        "output": "function executeWithDelay(callback) {\n    setTimeout(callback, 2000);}\n\nexecuteWithDelay(function() {\n    console.log('Delayed execution');});"
    },
    {
        "instruction": "How would you implement a simple server in Python that listens on port 8000 and returns the current date when a client connects?",
        "input": "",
        "response": "import socket\nfrom datetime import datetime\n\ndef serve_date(port):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('0.0.0.0', port))\n    server_socket.listen(1)\n\n    print(f'Serving date on port {port}...')\n\n    while True:\n        client_socket, _ = server_socket.accept()\n        date_string = datetime.now().strftime('%Y-%m-%d')\n        client_socket.sendall(date_string.encode('utf-8'))\n        client_socket.close()\n\nserve_date(8000)",
        "output": "import socket\nfrom datetime import datetime\n\ndef serve_date(port):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('0.0.0.0', port))\n    server_socket.listen(1)\n\n    print(f'Serving date on port {port}...')\n\n    while True:\n        client_socket, _ = server_socket.accept()\n        date_string = datetime.now().strftime('%Y-%m-%d')\n        client_socket.sendall(date_string.encode('utf-8'))\n        client_socket.close()\n\nserve_date(8000)"
    },
    {
        "instruction": "Design a Python function that receives a string and checks if it's a valid email address using regular expressions.",
        "input": "someone@example.com",
        "response": "import re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))\n\nemail = 'someone@example.com'\nprint(is_valid_email(email))",
        "output": "import re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))\n\nemail = 'someone@example.com'\nprint(is_valid_email(email))"
    },
    {
        "instruction": "Create a JavaScript code snippet that changes the text color of a specific HTML element with a given ID.",
        "input": "elementID: 'sampleText', color: 'blue'",
        "response": "function changeTextColor(elementID, color) {\n    const element = document.getElementById(elementID);\n    if (element) {\n        element.style.color = color;\n    }}\n\nchangeTextColor('sampleText', 'blue');",
        "output": "function changeTextColor(elementID, color) {\n    const element = document.getElementById(elementID);\n    if (element) {\n        element.style.color = color;\n    }}\n\nchangeTextColor('sampleText', 'blue');"
    },
    {
        "instruction": "Can you show me the code to connect to a MySQL database using Java, given the following connection details: database url = 'jdbc:mysql://localhost:3306/myDatabase', username = 'root', password = 'mypassword'?",
        "input": "database url: 'jdbc:mysql://localhost:3306/myDatabase', username: 'root', password: 'mypassword'",
        "response": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class MySQLConnection {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/myDatabase\";\n        String username = \"root\";\n        String password = \"mypassword\";\n\n        try {\n            Connection connection = DriverManager.getConnection(url, username, password);\n            System.out.println(\"Connected to the database successfully\");\n            connection.close();\n        } catch (SQLException e) {\n            System.out.println(\"Error connecting to the database\");\n            e.printStackTrace();\n        }\n    }}",
        "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class MySQLConnection {\n    public static void main(String[] args) {\n        String url = \"jdbc:mysql://localhost:3306/myDatabase\";\n        String username = \"root\";\n        String password = \"mypassword\";\n\n        try {\n            Connection connection = DriverManager.getConnection(url, username, password);\n            System.out.println(\"Connected to the database successfully\");\n            connection.close();\n        } catch (SQLException e) {\n            System.out.println(\"Error connecting to the database\");\n            e.printStackTrace();\n        }\n    }}"
    },
    {
        "instruction": "Write a C++ code snippet that sorts an array of integers in descending order using the STL sort function.",
        "input": "array: {10, 3, 7, 22, 6}",
        "response": "#include <algorithm>\n#include <iostream>\n#include <vector>\n\nvoid sort_descending(std::vector<int>& arr) {\n    std::sort(arr.begin(), arr.end(), std::greater<int>());}\n\nint main() {\n    std::vector<int> arr = {10, 3, 7, 22, 6};\n    sort_descending(arr);\n\n    for (const auto& num : arr) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <algorithm>\n#include <iostream>\n#include <vector>\n\nvoid sort_descending(std::vector<int>& arr) {\n    std::sort(arr.begin(), arr.end(), std::greater<int>());}\n\nint main() {\n    std::vector<int> arr = {10, 3, 7, 22, 6};\n    sort_descending(arr);\n\n    for (const auto& num : arr) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a given positive integer using recursion.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nunsigned long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nunsigned long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Create a JavaScript promise that resolves after a given number of milliseconds with a specified message.",
        "input": "2000, 'Operation successful'",
        "response": "function delay(ms, message) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(message), ms);\n    });}\n\ndelay(2000, 'Operation successful').then(console.log);",
        "output": "function delay(ms, message) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(message), ms);\n    });}\n\ndelay(2000, 'Operation successful').then(console.log);"
    },
    {
        "instruction": "In Python, can you implement a function that finds the longest contiguous subarray of a given list of integers, within which the difference between the maximum and minimum element is at most k?",
        "input": "[3, 4, 6, 2, 8, 5], 3",
        "response": "def longest_subarray(arr, k):\n    n = len(arr)\n    i, j = 0, 0\n    max_len = 0\n\n    while i < n:\n        while max(arr[i:j + 1]) - min(arr[i:j + 1]) <= k:\n            j += 1\n            if j == n:\n                break\n        max_len = max(max_len, j - i)\n        i = i + 1\n\n    return max_len\n\narr = [3, 4, 6, 2, 8, 5]\nk = 3\nprint(longest_subarray(arr, k))",
        "output": "def longest_subarray(arr, k):\n    n = len(arr)\n    i, j = 0, 0\n    max_len = 0\n\n    while i < n:\n        while max(arr[i:j + 1]) - min(arr[i:j + 1]) <= k:\n            j += 1\n            if j == n:\n                break\n        max_len = max(max_len, j - i)\n        i = i + 1\n\n    return max_len\n\narr = [3, 4, 6, 2, 8, 5]\nk = 3\nprint(longest_subarray(arr, k))"
    },
    {
        "instruction": "Write a PHP script that takes an associative array, replaces a specified key with a new key, and keeps the rest of the array intact.",
        "input": "['a' => 1, 'b' => 2, 'c' => 3], 'b', 'd'",
        "response": "<?php\n\nfunction replace_key($arr, $old_key, $new_key) {\n    if (!array_key_exists($old_key, $arr)) {\n        return $arr;\n    }\n\n    $new_arr = [];\n    foreach ($arr as $key => $value) {\n        $new_key_to_use = $key == $old_key ? $new_key : $key;\n        $new_arr[$new_key_to_use] = $value;\n    }\n\n    return $new_arr;}\n\n$array = ['a' => 1, 'b' => 2, 'c' => 3];\n$result = replace_key($array, 'b', 'd');\nprint_r($result);\n\n?>",
        "output": "<?php\n\nfunction replace_key($arr, $old_key, $new_key) {\n    if (!array_key_exists($old_key, $arr)) {\n        return $arr;\n    }\n\n    $new_arr = [];\n    foreach ($arr as $key => $value) {\n        $new_key_to_use = $key == $old_key ? $new_key : $key;\n        $new_arr[$new_key_to_use] = $value;\n    }\n\n    return $new_arr;}\n\n$array = ['a' => 1, 'b' => 2, 'c' => 3];\n$result = replace_key($array, 'b', 'd');\nprint_r($result);\n\n?>"
    },
    {
        "instruction": "Design a Python program that reads an input text file containing a list of positive integers, one per line, and outputs the average of those integers.",
        "input": "file.txt (contents):\n12\n15\n18\n20",
        "response": "def file_input_average(filename):\n    with open(filename, 'r') as file:\n        numbers = [int(line.strip()) for line in file]\n    return sum(numbers) / len(numbers)\n\naverage = file_input_average('file.txt')\nprint(average)",
        "output": "def file_input_average(filename):\n    with open(filename, 'r') as file:\n        numbers = [int(line.strip()) for line in file]\n    return sum(numbers) / len(numbers)\n\naverage = file_input_average('file.txt')\nprint(average)"
    },
    {
        "instruction": "Write a JavaScript function that takes a list of dictionaries containing 'name' and 'age' keys, and returns the dictionary with the oldest age.",
        "input": "[{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 40}, {'name': 'Carol', 'age': 25}]",
        "response": "function oldestPerson(list) {\n    return list.reduce((oldest, person) => {\n        return person.age > oldest.age ? person : oldest;\n    });}\n\nconst people = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 40}, {'name': 'Carol', 'age': 25}];\nconst oldest = oldestPerson(people);\nconsole.log(oldest);",
        "output": "function oldestPerson(list) {\n    return list.reduce((oldest, person) => {\n        return person.age > oldest.age ? person : oldest;\n    });}\n\nconst people = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 40}, {'name': 'Carol', 'age': 25}];\nconst oldest = oldestPerson(people);\nconsole.log(oldest);"
    },
    {
        "instruction": "Create a C program that reads a line of input from the console and then outputs whether the given input is a valid IPv4 address.",
        "input": "192.168.1.1",
        "response": "#include <stdio.h>\n#include <string.h>\n\nint is_valid_ip(const char* ip) {\n    int nums[4];\n    if (sscanf(ip, \"%u.%u.%u.%u\", &nums[0], &nums[1], &nums[2], &nums[3]) != 4) return 0;\n    for (int i = 0; i < 4; i++) if (nums[i] > 255) return 0;\n    if (strspn(ip, \"0123456789.\") < strlen(ip)) return 0;\n    return 1;\n}\n\nint main() {\n    char input[20];\n    printf(\"Enter IPv4 address: \");\n    fgets(input, 20, stdin);\n    input[strcspn(input, \"\\r\\n\")] = '\\0';\n    printf(\"Result: %s\\n\", is_valid_ip(input) ? \"Valid IPv4 address\" : \"Invalid IPv4 address\");\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <string.h>\n\nint is_valid_ip(const char* ip) {\n    int nums[4];\n    if (sscanf(ip, \"%u.%u.%u.%u\", &nums[0], &nums[1], &nums[2], &nums[3]) != 4) return 0;\n    for (int i = 0; i < 4; i++) if (nums[i] > 255) return 0;\n    if (strspn(ip, \"0123456789.\") < strlen(ip)) return 0;\n    return 1;\n}\n\nint main() {\n    char input[20];\n    printf(\"Enter IPv4 address: \");\n    fgets(input, 20, stdin);\n    input[strcspn(input, \"\\r\\n\")] = '\\0';\n    printf(\"Result: %s\\n\", is_valid_ip(input) ? \"Valid IPv4 address\" : \"Invalid IPv4 address\");\n    return 0;\n}"
    },
    {
        "instruction": "Provide a shell script that reads a directory path from the user and displays a sorted list of files and directories within the specified path.",
        "input": "/usr/local/bin",
        "response": "#!/bin/sh\n\nread -p 'Enter directory path: ' dir_path\n\nif [ -d \"$dir_path\" ]; then\n    find \"$dir_path\" -maxdepth 1 -type f,d | sort\nelse\n    echo 'Invalid directory path'\nfi",
        "output": "#!/bin/sh\n\nread -p 'Enter directory path: ' dir_path\n\nif [ -d \"$dir_path\" ]; then\n    find \"$dir_path\" -maxdepth 1 -type f,d | sort\nelse\n    echo 'Invalid directory path'\nfi"
    },
    {
        "instruction": "Write a C++ function to calculate the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you create a Python script that downloads an image from a URL and saves it on your local machine?",
        "input": "https://example.com/sample_image.jpg",
        "response": "import urllib.request\n\nurl = 'https://example.com/sample_image.jpg'\nfile_name = 'sample_image.jpg'\n\nurllib.request.urlretrieve(url, file_name)\nprint('Image downloaded and saved as', file_name)",
        "output": "import urllib.request\n\nurl = 'https://example.com/sample_image.jpg'\nfile_name = 'sample_image.jpg'\n\nurllib.request.urlretrieve(url, file_name)\nprint('Image downloaded and saved as', file_name)"
    },
    {
        "instruction": "Design a Java class representing a simple bank account with methods for depositing, withdrawing, and checking the balance.",
        "input": "Initial balance: 1000\nDeposit: 500\nWithdraw: 200",
        "response": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds.\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(1000);\n        account.deposit(500);\n        account.withdraw(200);\n        System.out.println(\"Current balance: \" + account.getBalance());\n    }}",
        "output": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds.\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(1000);\n        account.deposit(500);\n        account.withdraw(200);\n        System.out.println(\"Current balance: \" + account.getBalance());\n    }}"
    },
    {
        "instruction": "Implement a shell script to count the number of lines, words, and characters in a file.",
        "input": "example_file.txt",
        "response": "#!/bin/sh\n\nfile='example_file.txt'\n\nlines=$(wc -l < $file)\nwords=$(wc -w < $file)\ncharacters=$(wc -m < $file)\n\necho \"File: $file\"\necho \"Lines: $lines\"\necho \"Words: $words\"\necho \"Characters: $characters\"",
        "output": "#!/bin/sh\n\nfile='example_file.txt'\n\nlines=$(wc -l < $file)\nwords=$(wc -w < $file)\ncharacters=$(wc -m < $file)\n\necho \"File: $file\"\necho \"Lines: $lines\"\necho \"Words: $words\"\necho \"Characters: $characters\""
    },
    {
        "instruction": "Develop a C++ function to compute the factorial of a given non-negative integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\n    using namespace std;\n\n    int factorial(int n) {\n        if (n == 0)\n            return 1;\n        else\n            return n * factorial(n - 1);\n    }\n\n    int main() {\n        int num = 6;\n        cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n        return 0;\n    }",
        "output": "#include <iostream>\n    using namespace std;\n\n    int factorial(int n) {\n        if (n == 0)\n            return 1;\n        else\n            return n * factorial(n - 1);\n    }\n\n    int main() {\n        int num = 6;\n        cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n        return 0;\n    }"
    },
    {
        "instruction": "Write a Python function to merge two dictionaries, choosing the greater value for a key if it exists in both dicts.",
        "input": "dict1 = {\"A\": 10, \"B\": 20}, dict2 = {\"A\": 30, \"C\": 50}",
        "response": "def merge_dicts(dict1, dict2):\n    merged = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged:\n            merged[key] = max(merged[key], value)\n        else:\n            merged[key] = value\n    return merged\n\ndict1 = {\"A\": 10, \"B\": 20}\ndict2 = {\"A\": 30, \"C\": 50}\nresult = merge_dicts(dict1, dict2)\nprint(result)",
        "output": "def merge_dicts(dict1, dict2):\n    merged = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged:\n            merged[key] = max(merged[key], value)\n        else:\n            merged[key] = value\n    return merged\n\ndict1 = {\"A\": 10, \"B\": 20}\ndict2 = {\"A\": 30, \"C\": 50}\nresult = merge_dicts(dict1, dict2)\nprint(result)"
    },
    {
        "instruction": "How would you implement a Stack class in PHP using an array?",
        "input": "Push 5, 10, 15 and then pop two elements.",
        "response": "<?php\n    class Stack {\n        private $elements;\n\n        public function __construct() {\n            $this->elements = array();\n        }\n\n        public function push($value) {\n            array_push($this->elements, $value);\n        }\n\n        public function pop() {\n            if (!$this->isEmpty()) {\n                return array_pop($this->elements);\n            }\n            return false;\n        }\n\n        public function isEmpty() {\n            return empty($this->elements);\n        }\n    }\n\n    $stack = new Stack();\n    $stack->push(5);\n    $stack->push(10);\n    $stack->push(15);\n\n    echo $stack->pop() . \"\\n\";\n    echo $stack->pop() . \"\\n\";\n?>",
        "output": "<?php\n    class Stack {\n        private $elements;\n\n        public function __construct() {\n            $this->elements = array();\n        }\n\n        public function push($value) {\n            array_push($this->elements, $value);\n        }\n\n        public function pop() {\n            if (!$this->isEmpty()) {\n                return array_pop($this->elements);\n            }\n            return false;\n        }\n\n        public function isEmpty() {\n            return empty($this->elements);\n        }\n    }\n\n    $stack = new Stack();\n    $stack->push(5);\n    $stack->push(10);\n    $stack->push(15);\n\n    echo $stack->pop() . \"\\n\";\n    echo $stack->pop() . \"\\n\";\n?>"
    },
    {
        "instruction": "Create a JavaScript function that filters an array of strings by removing any words that are shorter than a given length.",
        "input": "words = [\"apple\", \"bat\", \"peach\", \"dog\", \"cat\"], length = 4",
        "response": "function filterByLength(words, minLength) {\n    return words.filter(word => word.length >= minLength);}\n\nconst words = [\"apple\", \"bat\", \"peach\", \"dog\", \"cat\"];\nconst minLength = 4;\nconst filtered = filterByLength(words, minLength);\nconsole.log(filtered);",
        "output": "function filterByLength(words, minLength) {\n    return words.filter(word => word.length >= minLength);}\n\nconst words = [\"apple\", \"bat\", \"peach\", \"dog\", \"cat\"];\nconst minLength = 4;\nconst filtered = filterByLength(words, minLength);\nconsole.log(filtered);"
    },
    {
        "instruction": "Implement a C++ program that calculates the factorial of a number using recursion.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int n = 6;\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n    return 0;}\n\nint factorial(int n) {\n    return (n == 1 || n == 0) ? 1 : n * factorial(n - 1);}\n",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int n = 6;\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n    return 0;}\n\nint factorial(int n) {\n    return (n == 1 || n == 0) ? 1 : n * factorial(n - 1);}\n"
    },
    {
        "instruction": "Write a Python function to convert a given temperature in Celsius to Fahrenheit.",
        "input": "37",
        "response": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius = 37\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(f'{celsius} Celsius is equivalent to {fahrenheit} Fahrenheit.')\n",
        "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius = 37\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(f'{celsius} Celsius is equivalent to {fahrenheit} Fahrenheit.')\n"
    },
    {
        "instruction": "How would you create a shell script to count the number of lines in a text file?",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfile='file.txt'\nline_count=$(wc -l < \"$file\")\necho \"Number of lines in $file: $line_count\"",
        "output": "#!/bin/bash\n\nfile='file.txt'\nline_count=$(wc -l < \"$file\")\necho \"Number of lines in $file: $line_count\""
    },
    {
        "instruction": "Construct a JavaScript function that receives a string with the date format 'YYYY-MM-DD' and returns the day of the week as a string.",
        "input": "2021-11-09",
        "response": "function getDayOfWeek(dateStr) {\n    const date = new Date(dateStr);\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return daysOfWeek[date.getDay()];}\n\nconst dateString = '2021-11-09';\nconst dayOfWeek = getDayOfWeek(dateString);\nconsole.log(dayOfWeek);",
        "output": "function getDayOfWeek(dateStr) {\n    const date = new Date(dateStr);\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return daysOfWeek[date.getDay()];}\n\nconst dateString = '2021-11-09';\nconst dayOfWeek = getDayOfWeek(dateString);\nconsole.log(dayOfWeek);"
    },
    {
        "instruction": "Implement a C++ function that finds the factorial of a non-negative integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you reverse the words in a sentence using C#?",
        "input": "\"The quick brown fox jumps over the lazy dog\"",
        "response": "using System;\n\nclass Program {\n    static void Main() {\n        string sentence = \"The quick brown fox jumps over the lazy dog\";\n        \n        string[] words = sentence.Split(' ');\n        Array.Reverse(words);\n        string newSentence = string.Join(\" \", words);\n        \n        Console.WriteLine(newSentence);\n    }}",
        "output": "using System;\n\nclass Program {\n    static void Main() {\n        string sentence = \"The quick brown fox jumps over the lazy dog\";\n        \n        string[] words = sentence.Split(' ');\n        Array.Reverse(words);\n        string newSentence = string.Join(\" \", words);\n        \n        Console.WriteLine(newSentence);\n    }}"
    },
    {
        "instruction": "Devise a Bash script to count the number of files in a directory, excluding hidden files.",
        "input": "",
        "response": "#!/bin/bash\nshopt -s nullglob\nfiles=( * )\necho \"Number of files: ${#files[@]}\"",
        "output": "#!/bin/bash\nshopt -s nullglob\nfiles=( * )\necho \"Number of files: ${#files[@]}\""
    },
    {
        "instruction": "What is a Python code snippet to convert Fahrenheit to Celsius and print the result?",
        "input": "32",
        "response": "def fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5 / 9\n\nfahrenheit = 32\ncelsius = fahrenheit_to_celsius(fahrenheit)\nprint(f'The temperature in Celsius is: {celsius}')",
        "output": "def fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5 / 9\n\nfahrenheit = 32\ncelsius = fahrenheit_to_celsius(fahrenheit)\nprint(f'The temperature in Celsius is: {celsius}')"
    },
    {
        "instruction": "Develop a C++ function that accepts a string, reverses its characters, and outputs the result.",
        "input": "\"Hello, World!\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string &str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    reverse_string(input);\n    std::cout << input;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string &str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    reverse_string(input);\n    std::cout << input;}"
    },
    {
        "instruction": "How would you write a SQL query that selects all columns from a table named 'employees' where the salary is greater than 50000?",
        "input": "employees, salary > 50000",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "Write a JavaScript code snippet that recursively calculates the factorial of a given number.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Build a Python script that reads the contents of a CSV file, modifies a specific column and writes the updated data into a new CSV file.",
        "input": "input.csv, output.csv, column_name",
        "response": "import csv\n\ndef modify_column(input_file, output_file, column_name):\n    with open(input_file, 'r') as in_file, open(output_file, 'w', newline='') as out_file:\n        reader = csv.DictReader(in_file)\n        fieldnames = reader.fieldnames\n        writer = csv.DictWriter(out_file, fieldnames=fieldnames)\n\n        writer.writeheader()\n        for row in reader:\n            if column_name in row:\n                # Modify the column value here (example: add 1 to the value)\n                row[column_name] = float(row[column_name]) + 1\n            writer.writerow(row)\n\nmodify_column('input.csv', 'output.csv', 'column_name')",
        "output": "import csv\n\ndef modify_column(input_file, output_file, column_name):\n    with open(input_file, 'r') as in_file, open(output_file, 'w', newline='') as out_file:\n        reader = csv.DictReader(in_file)\n        fieldnames = reader.fieldnames\n        writer = csv.DictWriter(out_file, fieldnames=fieldnames)\n\n        writer.writeheader()\n        for row in reader:\n            if column_name in row:\n                # Modify the column value here (example: add 1 to the value)\n                row[column_name] = float(row[column_name]) + 1\n            writer.writerow(row)\n\nmodify_column('input.csv', 'output.csv', 'column_name')"
    },
    {
        "instruction": "Write a C program to calculate the factorial of a given number.",
        "input": "6",
        "response": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    printf(\"%d! is: %d\n\", number, factorial(number));\n    return 0;}",
        "output": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    printf(\"%d! is: %d\n\", number, factorial(number));\n    return 0;}"
    },
    {
        "instruction": "Design a Python function that merges two sorted lists into a new sorted list.",
        "input": "[1, 3, 4], [2, 5, 6]",
        "response": "def merge_sorted_lists(list1, list2):\n    result = []\n    i = j = 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n\n    return result\n\nmerged_list = merge_sorted_lists([1, 3, 4], [2, 5, 6])\nprint(merged_list)",
        "output": "def merge_sorted_lists(list1, list2):\n    result = []\n    i = j = 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n\n    return result\n\nmerged_list = merge_sorted_lists([1, 3, 4], [2, 5, 6])\nprint(merged_list)"
    },
    {
        "instruction": "In JavaScript, create a function that filters out duplicates in an array and return a new array with unique elements.",
        "input": "[1, 2, 2, 3, 4, 4, 5]",
        "response": "function removeDuplicates(arr) {\n    return [...new Set(arr)];}\n\nconst uniqueArray = removeDuplicates([1, 2, 2, 3, 4, 4, 5]);\nconsole.log(uniqueArray);",
        "output": "function removeDuplicates(arr) {\n    return [...new Set(arr)];}\n\nconst uniqueArray = removeDuplicates([1, 2, 2, 3, 4, 4, 5]);\nconsole.log(uniqueArray);"
    },
    {
        "instruction": "Fix the SQL query to display the names of employees with a salary between 50000 and 80000, ordered by their last name.",
        "input": "SELECT first_name, last_name FROM employees WHERE salary = 50000 AND salary = 80000 ORDER BY last_name;",
        "response": "SELECT first_name, last_name\nFROM employees\nWHERE salary >= 50000 AND salary <= 80000\nORDER BY last_name;",
        "output": "SELECT first_name, last_name\nFROM employees\nWHERE salary >= 50000 AND salary <= 80000\nORDER BY last_name;"
    },
    {
        "instruction": "How would you write a Python script that reads a CSV file and prints the total number of rows in the file?",
        "input": "file.csv (with content: Name,Age\\nAlice,30\\nBob,25\\n)",
        "response": "import csv\n\nfilename = 'file.csv'\n\nwith open(filename, 'r') as file:\n    reader = csv.reader(file)\n    row_count = sum(1 for row in reader) - 1 # Subtract 1 for the header row\n\nprint('Total number of rows:', row_count)",
        "output": "import csv\n\nfilename = 'file.csv'\n\nwith open(filename, 'r') as file:\n    reader = csv.reader(file)\n    row_count = sum(1 for row in reader) - 1 # Subtract 1 for the header row\n\nprint('Total number of rows:', row_count)"
    },
    {
        "instruction": "Develop a JavaScript function that takes a string input, and reverses its words while maintaining the characters' order within each word.",
        "input": "this is a test",
        "response": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');}\n\nconst input = 'this is a test';\nconst result = reverseWords(input);\nconsole.log(result);",
        "output": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');}\n\nconst input = 'this is a test';\nconst result = reverseWords(input);\nconsole.log(result);"
    },
    {
        "instruction": "Create a shell script that retrieves the current date and time, and writes it to a log file.",
        "input": "",
        "response": "#!/bin/sh\n\ncurrent_date_time=$(date '+%Y-%m-%d %H:%M:%S')\nlog_file='log.txt'\n\necho \"[$current_date_time] Log entry\" >> $log_file",
        "output": "#!/bin/sh\n\ncurrent_date_time=$(date '+%Y-%m-%d %H:%M:%S')\nlog_file='log.txt'\n\necho \"[$current_date_time] Log entry\" >> $log_file"
    },
    {
        "instruction": "Write a C program that calculates the area of a circle given its radius.",
        "input": "5",
        "response": "#include <stdio.h>\n#include <math.h>\n\nfloat calculate_area(float radius) {\n    return M_PI * radius * radius;}\n\nint main() {\n    float radius = 5.0;\n    float area = calculate_area(radius);\n    printf(\"Area of the circle with radius %.2f is %.2f\\n\", radius, area);\n    return 0;}",
        "output": "#include <stdio.h>\n#include <math.h>\n\nfloat calculate_area(float radius) {\n    return M_PI * radius * radius;}\n\nint main() {\n    float radius = 5.0;\n    float area = calculate_area(radius);\n    printf(\"Area of the circle with radius %.2f is %.2f\\n\", radius, area);\n    return 0;}"
    },
    {
        "instruction": "How would you implement a basic HTTP server using Node.js?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, World!\\n');});\n\nconst port = 3000;\nserver.listen(port, () => {\n    console.log(`Server is running at http://localhost:${port}`);});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, World!\\n');});\n\nconst port = 3000;\nserver.listen(port, () => {\n    console.log(`Server is running at http://localhost:${port}`);});"
    },
    {
        "instruction": "Create a Bash script that displays the string 'Hello, shell!' on the command line.",
        "input": "",
        "response": "#!/bin/bash\necho \"Hello, shell!\"",
        "output": "#!/bin/bash\necho \"Hello, shell!\""
    },
    {
        "instruction": "Develop a Python function to implement the Fibonacci sequence up to a given number of iterations.",
        "input": "10",
        "response": "def fibonacci(n):\n    sequence = [0, 1]\n    for _ in range(n - 2):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nnumber_of_iterations = 10\nfibonacci_sequence = fibonacci(number_of_iterations)\nprint(fibonacci_sequence)",
        "output": "def fibonacci(n):\n    sequence = [0, 1]\n    for _ in range(n - 2):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nnumber_of_iterations = 10\nfibonacci_sequence = fibonacci(number_of_iterations)\nprint(fibonacci_sequence)"
    },
    {
        "instruction": "Design a Python script that reads a CSV file, sorts its rows based on a specified column, and writes the sorted data to a new CSV file.",
        "input": "Input: 'data.csv', Column Index: 2",
        "response": "import csv\n\ndef sort_csv(input_file, column_index, output_file='sorted_data.csv'):\n    with open(input_file, 'r') as csv_file:\n        reader = csv.reader(csv_file)\n        header = next(reader)\n        data = list(reader)\n    data.sort(key=lambda row: row[column_index])\n\n    with open(output_file, 'w') as output_csv:\n        writer = csv.writer(output_csv)\n        writer.writerow(header)\n        writer.writerows(data)\n\nsort_csv('data.csv', 2)",
        "output": "import csv\n\ndef sort_csv(input_file, column_index, output_file='sorted_data.csv'):\n    with open(input_file, 'r') as csv_file:\n        reader = csv.reader(csv_file)\n        header = next(reader)\n        data = list(reader)\n    data.sort(key=lambda row: row[column_index])\n\n    with open(output_file, 'w') as output_csv:\n        writer = csv.writer(output_csv)\n        writer.writerow(header)\n        writer.writerows(data)\n\nsort_csv('data.csv', 2)"
    },
    {
        "instruction": "Write a JavaScript function that fetches data from a given API, and after receiving the data, it should calculate the average of a specific property in the received objects.",
        "input": "API url: 'https://api.example.com/data', Property Name: 'score'",
        "response": "async function fetchAndCalculateAverage(apiUrl, propertyName) {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    let sum = 0;\n    let count = 0;\n\n    for (const item of data) {\n        if (item.hasOwnProperty(propertyName)) {\n            sum += item[propertyName];\n            count++;\n        }\n    }\n\n    return count > 0 ? sum / count : 0;}\n\nfetchAndCalculateAverage('https://api.example.com/data', 'score').then(average => {\n    console.log(average);});",
        "output": "async function fetchAndCalculateAverage(apiUrl, propertyName) {\n    const response = await fetch(apiUrl);\n    const data = await response.json();\n    let sum = 0;\n    let count = 0;\n\n    for (const item of data) {\n        if (item.hasOwnProperty(propertyName)) {\n            sum += item[propertyName];\n            count++;\n        }\n    }\n\n    return count > 0 ? sum / count : 0;}\n\nfetchAndCalculateAverage('https://api.example.com/data', 'score').then(average => {\n    console.log(average);});"
    },
    {
        "instruction": "Create a C# program that reads a text file, replaces all occurrences of a specific word with another word, and saves the modified content to a new file.",
        "input": "Input: 'input.txt', Word to replace: 'apple', Replacement word: 'banana'",
        "response": "using System;\nusing System.IO;\n\nclass Program {\n    static void Main() {\n        string inputFile = 'input.txt';\n        string outputFile = 'output.txt';\n        string wordToReplace = 'apple';\n        string replacementWord = 'banana';\n\n        string content = File.ReadAllText(inputFile);\n        content = content.Replace(wordToReplace, replacementWord);\n        File.WriteAllText(outputFile, content);\n\n        Console.WriteLine('File modification completed.');\n    }}",
        "output": "using System;\nusing System.IO;\n\nclass Program {\n    static void Main() {\n        string inputFile = 'input.txt';\n        string outputFile = 'output.txt';\n        string wordToReplace = 'apple';\n        string replacementWord = 'banana';\n\n        string content = File.ReadAllText(inputFile);\n        content = content.Replace(wordToReplace, replacementWord);\n        File.WriteAllText(outputFile, content);\n\n        Console.WriteLine('File modification completed.');\n    }}"
    },
    {
        "instruction": "Develop a shell script that grabs the list of all files in the current directory, removes any text files ending with '.txt', and outputs the file names without '.txt' extension.",
        "input": "Files in the directory: ['file1.txt', 'file2.txt', 'image.jpg']",
        "response": "#!/bin/bash\nfor file in *.txt; do\n    if [ -f \"$file\" ]; then\n        file_without_ext=$(basename \"$file\" .txt)\n        echo \"$file_without_ext\"\n        rm \"$file\"\n    fi\ndone",
        "output": "#!/bin/bash\nfor file in *.txt; do\n    if [ -f \"$file\" ]; then\n        file_without_ext=$(basename \"$file\" .txt)\n        echo \"$file_without_ext\"\n        rm \"$file\"\n    fi\ndone"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given non-negative integer using recursion.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Can you write a JavaScript code to remove duplicates from an array?",
        "input": "[1, 2, 3, 2, 1, 4, 3]",
        "response": "function removeDuplicates(arr) {\n    let uniqueArray = [...new Set(arr)];\n    return uniqueArray;}\n\nlet inputArray = [1, 2, 3, 2, 1, 4, 3];\nlet outputArray = removeDuplicates(inputArray);\nconsole.log(outputArray);",
        "output": "function removeDuplicates(arr) {\n    let uniqueArray = [...new Set(arr)];\n    return uniqueArray;}\n\nlet inputArray = [1, 2, 3, 2, 1, 4, 3];\nlet outputArray = removeDuplicates(inputArray);\nconsole.log(outputArray);"
    },
    {
        "instruction": "What would be the Python code to count the frequency of words in a given text?",
        "input": "this is a test, this is also a test.",
        "response": "from collections import Counter\nimport re\n\ndef count_word_frequencies(text):\n    words = re.findall(r'\\w+', text.lower())\n    return Counter(words)\n\nsample_text = 'this is a test, this is also a test.'\nword_freqs = count_word_frequencies(sample_text)\nprint(word_freqs)",
        "output": "from collections import Counter\nimport re\n\ndef count_word_frequencies(text):\n    words = re.findall(r'\\w+', text.lower())\n    return Counter(words)\n\nsample_text = 'this is a test, this is also a test.'\nword_freqs = count_word_frequencies(sample_text)\nprint(word_freqs)"
    },
    {
        "instruction": "Show me how to implement a Shell script to list all files with '.txt' extension in the current directory and their size in kilobytes.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *.txt; do\n    size=$(du -shk \"${file}\" | cut -f 1)\n    echo \"${file} - ${size}KB\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt; do\n    size=$(du -shk \"${file}\" | cut -f 1)\n    echo \"${file} - ${size}KB\"\ndone"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given non-negative integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int result = factorial(6);\n    cout << result << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int result = factorial(6);\n    cout << result << endl;\n    return 0;}"
    },
    {
        "instruction": "In Java, write a method that reverses a list of integers.",
        "input": "[9, 7, 5, 3, 1]",
        "response": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class ReverseList {\n    public static ArrayList<Integer> reverse(ArrayList<Integer> list) {\n        Collections.reverse(list);\n        return list;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> myList = new ArrayList<>();\n        myList.add(9);\n        myList.add(7);\n        myList.add(5);\n        myList.add(3);\n        myList.add(1);\n\n        ArrayList<Integer> reversedList = reverse(myList);\n        System.out.println(reversedList);\n    }}",
        "output": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class ReverseList {\n    public static ArrayList<Integer> reverse(ArrayList<Integer> list) {\n        Collections.reverse(list);\n        return list;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> myList = new ArrayList<>();\n        myList.add(9);\n        myList.add(7);\n        myList.add(5);\n        myList.add(3);\n        myList.add(1);\n\n        ArrayList<Integer> reversedList = reverse(myList);\n        System.out.println(reversedList);\n    }}"
    },
    {
        "instruction": "How would you write a PHP script that receives a string containing a comma-separated list of names and outputs the list sorted in ascending order?",
        "input": "John,Mary,Steve,Alice,Andrew",
        "response": "<?php\n\nfunction sortNames($input) {\n    $namesArray = explode(',', $input);\n    sort($namesArray);\n    return implode(',', $namesArray);}\n\n$inputString = 'John,Mary,Steve,Alice,Andrew';\n$result = sortNames($inputString);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction sortNames($input) {\n    $namesArray = explode(',', $input);\n    sort($namesArray);\n    return implode(',', $namesArray);}\n\n$inputString = 'John,Mary,Steve,Alice,Andrew';\n$result = sortNames($inputString);\necho $result;\n\n?>"
    },
    {
        "instruction": "Design a Python script to calculate the number of occurrences of each character in a given string excluding spaces.",
        "input": "the quick brown fox jumps over",
        "response": "def character_count(input_string):\n    char_count = {}\n    for char in input_string:\n        if char != ' ':\n            char_count[char] = char_count.get(char, 0) + 1\n    return char_count\n\n\ntext = 'the quick brown fox jumps over'\nresult = character_count(text)\nprint(result)",
        "output": "def character_count(input_string):\n    char_count = {}\n    for char in input_string:\n        if char != ' ':\n            char_count[char] = char_count.get(char, 0) + 1\n    return char_count\n\n\ntext = 'the quick brown fox jumps over'\nresult = character_count(text)\nprint(result)"
    },
    {
        "instruction": "Implement a C++ function that checks if a given integer is prime.",
        "input": "17",
        "response": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); ++i) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int n = 17;\n    if (is_prime(n)) {\n        std::cout << n << \" is prime.\" << std::endl;\n    } else {\n        std::cout << n << \" is not prime.\" << std::endl;\n    }\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(num); ++i) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int n = 17;\n    if (is_prime(n)) {\n        std::cout << n << \" is prime.\" << std::endl;\n    } else {\n        std::cout << n << \" is not prime.\" << std::endl;\n    }\n    return 0;}"
    },
    {
        "instruction": "What would be the C# code for a method that calculates the factorial of a number?",
        "input": "5",
        "response": "using System;\n\nclass Factorial {\n    static int CalculateFactorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * CalculateFactorial(n - 1);\n    }\n\n    static void Main() {\n        int result = CalculateFactorial(5);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\n\nclass Factorial {\n    static int CalculateFactorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * CalculateFactorial(n - 1);\n    }\n\n    static void Main() {\n        int result = CalculateFactorial(5);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "Write a Python script to download CSV data from a given URL and save the file to the local disk.",
        "input": "\"https://example.com/data.csv\", \"data.csv\"",
        "response": "import urllib.request\n\ndef download_csv(url, file_name):\n    with urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\nurl = \"https://example.com/data.csv\"\nfile_name = \"data.csv\"\ndownload_csv(url, file_name)\nprint(\"CSV file downloaded and saved.\")",
        "output": "import urllib.request\n\ndef download_csv(url, file_name):\n    with urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\nurl = \"https://example.com/data.csv\"\nfile_name = \"data.csv\"\ndownload_csv(url, file_name)\nprint(\"CSV file downloaded and saved.\")"
    },
    {
        "instruction": "Create a JavaScript function to sort a list of strings alphabetically and display it in the web page.",
        "input": "[\"apple\", \"banana\", \"kiwi\", \"grape\"]",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction sortAndDisplayStrings(strings) {\n    strings.sort();\n    const listElem = document.createElement('ul');\n    for (const str of strings) {\n        const itemElem = document.createElement('li');\n        itemElem.textContent = str;\n        listElem.appendChild(itemElem);\n    }\n    document.body.appendChild(listElem);}\n\nconst strings = [\"apple\", \"banana\", \"kiwi\", \"grape\"];\nsortAndDisplayStrings(strings);\n</script>\n</head>\n<body>\n</body>\n</html>",
        "output": "<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction sortAndDisplayStrings(strings) {\n    strings.sort();\n    const listElem = document.createElement('ul');\n    for (const str of strings) {\n        const itemElem = document.createElement('li');\n        itemElem.textContent = str;\n        listElem.appendChild(itemElem);\n    }\n    document.body.appendChild(listElem);}\n\nconst strings = [\"apple\", \"banana\", \"kiwi\", \"grape\"];\nsortAndDisplayStrings(strings);\n</script>\n</head>\n<body>\n</body>\n</html>"
    },
    {
        "instruction": "Design a SQL query to select the employee names from the 'employees' table with a salary greater than 50000.",
        "input": "tablename: employees, columns: name, salary",
        "response": "SELECT name FROM employees WHERE salary > 50000;",
        "output": "SELECT name FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "How would you implement a function in C++ that reverses a given string?",
        "input": "'Hello, World!'",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nstd::string reverse_string(const std::string& input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    std::string result = reverse_string(input);\n    std::cout << result << std::endl;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nstd::string reverse_string(const std::string& input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    std::string result = reverse_string(input);\n    std::cout << result << std::endl;}"
    },
    {
        "instruction": "Create a PHP script that reads a CSV file and prints the sum of values in the second column.",
        "input": "CSV file content:\n1,5,3\n2,10,2\n3,8,1",
        "response": "<?php\nfunction sum_second_column($csv_file_path) {\n    $file_handle = fopen($csv_file_path, 'r');\n    $sum = 0;\n    while (($row = fgetcsv($file_handle, 0, ',')) !== FALSE) {\n        $sum += $row[1];\n    }\n    fclose($file_handle);\n    return $sum;}\n\n$csv_file_path = 'input.csv';\n$total = sum_second_column($csv_file_path);\necho \"Sum of values in the second column: \" . $total . PHP_EOL;\n?>",
        "output": "<?php\nfunction sum_second_column($csv_file_path) {\n    $file_handle = fopen($csv_file_path, 'r');\n    $sum = 0;\n    while (($row = fgetcsv($file_handle, 0, ',')) !== FALSE) {\n        $sum += $row[1];\n    }\n    fclose($file_handle);\n    return $sum;}\n\n$csv_file_path = 'input.csv';\n$total = sum_second_column($csv_file_path);\necho \"Sum of values in the second column: \" . $total . PHP_EOL;\n?>"
    },
    {
        "instruction": "Construct a Haskell function that removes all vowels from a given string.",
        "input": "'Functional Programming'",
        "response": "import Data.Char\n\nremoveVowels :: String -> String\nremoveVowels = filter (`notElem` \"aeiouAEIOU\")\n\nmain :: IO ()\nmain = putStrLn . removeVowels $ \"Functional Programming\"",
        "output": "import Data.Char\n\nremoveVowels :: String -> String\nremoveVowels = filter (`notElem` \"aeiouAEIOU\")\n\nmain :: IO ()\nmain = putStrLn . removeVowels $ \"Functional Programming\""
    },
    {
        "instruction": "Develop a Python script to merge two dictionaries, where dictionary 'a' values should be incremented by the values of dictionary 'b' for the same key.",
        "input": "a = {'apple': 1, 'banana': 2, 'orange': 3}, b = {'apple': 2, 'banana': 1, 'grapes': 4}",
        "response": "def merge_dicts(a, b):\n    for key, value in b.items():\n        a[key] = a.get(key, 0) + value\n    return a\n\na = {'apple': 1, 'banana': 2, 'orange': 3}\nb = {'apple': 2, 'banana': 1, 'grapes': 4}\nresult = merge_dicts(a, b)\nprint(result)",
        "output": "def merge_dicts(a, b):\n    for key, value in b.items():\n        a[key] = a.get(key, 0) + value\n    return a\n\na = {'apple': 1, 'banana': 2, 'orange': 3}\nb = {'apple': 2, 'banana': 1, 'grapes': 4}\nresult = merge_dicts(a, b)\nprint(result)"
    },
    {
        "instruction": "In JavaScript, implement a function which accepts an integer and returns the sum of all the integers up to and including the given integer.",
        "input": "4",
        "response": "function sumIntegers(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;}\n\nconst result = sumIntegers(4);\nconsole.log(result);",
        "output": "function sumIntegers(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;}\n\nconst result = sumIntegers(4);\nconsole.log(result);"
    },
    {
        "instruction": "How can you search for a specific value in a JavaScript array and return the index of that value?",
        "input": "[5, 8, 1, 3, 9], 3",
        "response": "function findValueIndex(arr, value) {\n    return arr.indexOf(value);}\n\nconst arrayWithValues = [5, 8, 1, 3, 9];\nconst valueToSearch = 3;\nconst valueIndex = findValueIndex(arrayWithValues, valueToSearch);\nconsole.log(valueIndex);",
        "output": "function findValueIndex(arr, value) {\n    return arr.indexOf(value);}\n\nconst arrayWithValues = [5, 8, 1, 3, 9];\nconst valueToSearch = 3;\nconst valueIndex = findValueIndex(arrayWithValues, valueToSearch);\nconsole.log(valueIndex);"
    },
    {
        "instruction": "Write a simple C++ program that calculates the factorial of a given number using a recursive approach.",
        "input": "5",
        "response": "#include<iostream>\n\nusing namespace std;\n\nlong long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 5;\n    long long result = factorial(number);\n    cout << \"Factorial of \" << number << \" is: \" << result << endl;\n    return 0;}",
        "output": "#include<iostream>\n\nusing namespace std;\n\nlong long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 5;\n    long long result = factorial(number);\n    cout << \"Factorial of \" << number << \" is: \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python script to read the text from a file and display the most frequent word and its frequency.",
        "input": "text.txt containing 'Hello world, welcome to the new world, a world filled with opportunities.'",
        "response": "import collections\n\ndef find_most_frequent_word(file_path):\n    with open(file_path, 'r') as file:\n        words = file.read().lower().split()\n        word_counts = collections.Counter(words)\n        most_common_word, frequency = word_counts.most_common(1)[0]\n        return most_common_word, frequency\n\nword, freq = find_most_frequent_word('text.txt')\nprint(f'Most frequent word: {word}\nFrequency: {freq}')",
        "output": "import collections\n\ndef find_most_frequent_word(file_path):\n    with open(file_path, 'r') as file:\n        words = file.read().lower().split()\n        word_counts = collections.Counter(words)\n        most_common_word, frequency = word_counts.most_common(1)[0]\n        return most_common_word, frequency\n\nword, freq = find_most_frequent_word('text.txt')\nprint(f'Most frequent word: {word}\nFrequency: {freq}')"
    },
    {
        "instruction": "Convert the following pseudocode into a working C++ program that calculates the factorial of a number.",
        "input": "BEGIN\n    declare integer n, factorial, i\n    assign n = 5\n    assign factorial = 1\n    for i = n to 1 step -1\n        multiply factorial by i\n    end for\n    output factorial\nEND",
        "response": "#include <iostream>\n\nint main() {\n    int n = 5;\n    int factorial = 1;\n\n    for (int i = n; i >= 1; i--) {\n        factorial *= i;\n    }\n\n    std::cout << factorial << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int n = 5;\n    int factorial = 1;\n\n    for (int i = n; i >= 1; i--) {\n        factorial *= i;\n    }\n\n    std::cout << factorial << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array and counts the occurrences of each element in the array, then returns an object with the elements as keys and the respective counts as values.",
        "input": "['a', 'b', 'a', 'c', 'b', 'a']",
        "response": "function countOccurrences(arr) {\n    const countsObj = {};\n\n    arr.forEach(element => {\n        if (!countsObj[element]) {\n            countsObj[element] = 1;\n        } else {\n            countsObj[element]++;\n        }\n    });\n\n    return countsObj;\n}\n\nconst result = countOccurrences(['a', 'b', 'a', 'c', 'b', 'a']);\nconsole.log(result);",
        "output": "function countOccurrences(arr) {\n    const countsObj = {};\n\n    arr.forEach(element => {\n        if (!countsObj[element]) {\n            countsObj[element] = 1;\n        } else {\n            countsObj[element]++;\n        }\n    });\n\n    return countsObj;\n}\n\nconst result = countOccurrences(['a', 'b', 'a', 'c', 'b', 'a']);\nconsole.log(result);"
    },
    {
        "instruction": "In PHP, write a function to validate an email address using regular expressions.",
        "input": "'example.email@example.com'",
        "response": "<?php\n\nfunction is_valid_email($email) {\n    $pattern = '/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/';\n    return preg_match($pattern, $email) === 1;\n}\n\n$email = 'example.email@example.com';\nif (is_valid_email($email)) {\n    echo 'Valid email';\n} else {\n    echo 'Invalid email';\n}\n?>",
        "output": "<?php\n\nfunction is_valid_email($email) {\n    $pattern = '/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/';\n    return preg_match($pattern, $email) === 1;\n}\n\n$email = 'example.email@example.com';\nif (is_valid_email($email)) {\n    echo 'Valid email';\n} else {\n    echo 'Invalid email';\n}\n?>"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given positive integer using recursion.",
        "input": "4",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    return (n <= 1) ? 1 : n * factorial(n - 1);}\n\nint main() {\n    int num = 4;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    return (n <= 1) ? 1 : n * factorial(n - 1);}\n\nint main() {\n    int num = 4;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Construct a SQL query that selects all columns from a table called 'Employees' where the salary is greater than 50000.",
        "input": "TableName: Employees, Column: salary, Threshold: 50000",
        "response": "SELECT * FROM Employees WHERE salary > 50000;",
        "output": "SELECT * FROM Employees WHERE salary > 50000;"
    },
    {
        "instruction": "Can you write a Python script that reads a CSV file and prints the total number of rows and columns?",
        "input": "example.csv",
        "response": "import csv\n\nfilename = 'example.csv'\n\nwith open(filename, 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    row_count = sum(1 for row in reader)\n    csvfile.seek(0)\n    col_count = len(next(reader))\n\nprint(f'Total rows: {row_count}')\nprint(f'Total columns: {col_count}')",
        "output": "import csv\n\nfilename = 'example.csv'\n\nwith open(filename, 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    row_count = sum(1 for row in reader)\n    csvfile.seek(0)\n    col_count = len(next(reader))\n\nprint(f'Total rows: {row_count}')\nprint(f'Total columns: {col_count}')"
    },
    {
        "instruction": "Create a Bash script that takes a file as an argument and prints the number of lines and words present in the file.",
        "input": "filename.txt",
        "response": "#!/bin/bash\n\nfilename=$1\nlines=$(wc -l < $filename)\nwords=$(wc -w < $filename)\n\necho \"Number of lines: $lines\"\necho \"Number of words: $words\"",
        "output": "#!/bin/bash\n\nfilename=$1\nlines=$(wc -l < $filename)\nwords=$(wc -w < $filename)\n\necho \"Number of lines: $lines\"\necho \"Number of words: $words\""
    },
    {
        "instruction": "Write a Python function that reads a CSV file, calculates the average of the elements in each row, and writes the results to a new CSV file.",
        "input": "input.csv: '3, 4, 5\\n6, 7, 8'",
        "response": "import csv\n\ndef avg_row_values(input_file, output_file):\n    with open(input_file, 'r') as csvfile, open(output_file, 'w', newline='') as output:\n        reader = csv.reader(csvfile)\n        writer = csv.writer(output)\n        for row in reader:\n            avg = sum(map(float, row)) / len(row)\n            writer.writerow([avg])\n\navg_row_values('input.csv', 'output.csv')",
        "output": "import csv\n\ndef avg_row_values(input_file, output_file):\n    with open(input_file, 'r') as csvfile, open(output_file, 'w', newline='') as output:\n        reader = csv.reader(csvfile)\n        writer = csv.writer(output)\n        for row in reader:\n            avg = sum(map(float, row)) / len(row)\n            writer.writerow([avg])\n\navg_row_values('input.csv', 'output.csv')"
    },
    {
        "instruction": "Create a JavaScript function that receives a list of key-value pairs and converts it into a JSON object.",
        "input": "key-value pairs: [['a', 1], ['b', 2], ['c', 3]]",
        "response": "function keyValuePairsToObject(pairs) {\n    const obj = {};\n    for (const [key, value] of pairs) {\n        obj[key] = value;\n    }\n    return obj;}\n\nconst keyValueList = [['a', 1], ['b', 2], ['c', 3]];\nconst jsonObject = keyValuePairsToObject(keyValueList);\nconsole.log(jsonObject);",
        "output": "function keyValuePairsToObject(pairs) {\n    const obj = {};\n    for (const [key, value] of pairs) {\n        obj[key] = value;\n    }\n    return obj;}\n\nconst keyValueList = [['a', 1], ['b', 2], ['c', 3]];\nconst jsonObject = keyValuePairsToObject(keyValueList);\nconsole.log(jsonObject);"
    },
    {
        "instruction": "How can I implement a queue in C++ using the STL (Standard Template Library)?",
        "input": "enqueue: 5, 6, 7; dequeue: 2 times",
        "response": "#include <iostream>\n#include <queue>\n\nint main() {\n    std::queue<int> q;\n\n    q.push(5);\n    q.push(6);\n    q.push(7);\n\n    for (int i = 0; i < 2; ++i) {\n        std::cout << q.front() << ' ';\n        q.pop();\n    }\n    std::cout << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <queue>\n\nint main() {\n    std::queue<int> q;\n\n    q.push(5);\n    q.push(6);\n    q.push(7);\n\n    for (int i = 0; i < 2; ++i) {\n        std::cout << q.front() << ' ';\n        q.pop();\n    }\n    std::cout << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Please provide a shell script that retrieves the exit code of the last executed command and prints it on the screen.",
        "input": "echo 'Hello, World!'; echo 'Exit code: $?';",
        "response": "#!/bin/bash\n\necho 'Hello, World!'\nprevious_cmd_exit_code=$?\n\necho 'Exit code: ' $previous_cmd_exit_code",
        "output": "#!/bin/bash\n\necho 'Hello, World!'\nprevious_cmd_exit_code=$?\n\necho 'Exit code: ' $previous_cmd_exit_code"
    },
    {
        "instruction": "Design a C++ function that finds the largest element in a given vector of integers.",
        "input": "{4, 2, 9, 7, 5}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint find_largest_element(const std::vector<int>& nums) {\n    return *std::max_element(nums.begin(), nums.end());}\n\nint main() {\n    std::vector<int> input = {4, 2, 9, 7, 5};\n    int largest = find_largest_element(input);\n    std::cout << \"Largest element is: \" << largest << std::endl;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint find_largest_element(const std::vector<int>& nums) {\n    return *std::max_element(nums.begin(), nums.end());}\n\nint main() {\n    std::vector<int> input = {4, 2, 9, 7, 5};\n    int largest = find_largest_element(input);\n    std::cout << \"Largest element is: \" << largest << std::endl;}"
    },
    {
        "instruction": "Implement a Shell script that takes a filename as input and outputs the number of lines in the file.",
        "input": "testfile.txt",
        "response": "#!/bin/sh\n\nfilename=\"$1\"\nline_count=`wc -l < \"$filename\"`\necho \"Number of lines in $filename: $line_count\"",
        "output": "#!/bin/sh\n\nfilename=\"$1\"\nline_count=`wc -l < \"$filename\"`\necho \"Number of lines in $filename: $line_count\""
    },
    {
        "instruction": "How can one create a Python class that represents a point in 3D space and has a method to compute the distance from the origin?",
        "input": "Point(1, 2, 3)",
        "response": "import math\n\nclass Point:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def distance_from_origin(self):\n        return math.sqrt(self.x**2 + self.y**2 + self.z**2)\n\npoint = Point(1, 2, 3)\ndistance = point.distance_from_origin()\nprint('Distance from origin:', distance)",
        "output": "import math\n\nclass Point:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def distance_from_origin(self):\n        return math.sqrt(self.x**2 + self.y**2 + self.z**2)\n\npoint = Point(1, 2, 3)\ndistance = point.distance_from_origin()\nprint('Distance from origin:', distance)"
    },
    {
        "instruction": "Write a JavaScript program that takes an array of strings and filters out all strings that have a length less than 5.",
        "input": "['apple', 'banana', 'pear', 'grape', 'kiwi']",
        "response": "function filterShortWords(arr) {\n    return arr.filter(word => word.length >= 5);}\n\nconst words = ['apple', 'banana', 'pear', 'grape', 'kiwi'];\nconst filteredWords = filterShortWords(words);\nconsole.log(filteredWords);",
        "output": "function filterShortWords(arr) {\n    return arr.filter(word => word.length >= 5);}\n\nconst words = ['apple', 'banana', 'pear', 'grape', 'kiwi'];\nconst filteredWords = filterShortWords(words);\nconsole.log(filteredWords);"
    },
    {
        "instruction": "Convert a temperature from Fahrenheit to Celsius using a Python function.",
        "input": "212",
        "response": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius\n\ntemp_fahrenheit = 212\ntemp_celsius = fahrenheit_to_celsius(temp_fahrenheit)\nprint(temp_celsius)",
        "output": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius\n\ntemp_fahrenheit = 212\ntemp_celsius = fahrenheit_to_celsius(temp_fahrenheit)\nprint(temp_celsius)"
    },
    {
        "instruction": "How would you implement a simple server in Node.js that listens on port 3000 and responds with 'Hello, World!'?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!');});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!');});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});"
    },
    {
        "instruction": "In Java, write a method that accepts an ArrayList of integers and returns the sum of all the elements.",
        "input": "ArrayList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));",
        "response": "import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class SumArrayList {\n    public static int sumArrayListElements(ArrayList<Integer> numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int sum = sumArrayListElements(numbers);\n        System.out.println(sum);\n    }}",
        "output": "import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class SumArrayList {\n    public static int sumArrayListElements(ArrayList<Integer> numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int sum = sumArrayListElements(numbers);\n        System.out.println(sum);\n    }}"
    },
    {
        "instruction": "Design a PHP function that reverses the order of the words in a given sentence.",
        "input": "\"This is a test sentence\"",
        "response": "<?php\n\nfunction reverse_words($sentence) {\n    $words = explode(' ', $sentence);\n    $reversed_words = array_reverse($words);\n    $reversed_sentence = implode(' ', $reversed_words);\n    return $reversed_sentence;}\n\n$sentence = 'This is a test sentence';\n$reversed_sentence = reverse_words($sentence);\necho $reversed_sentence;\n\n?>",
        "output": "<?php\n\nfunction reverse_words($sentence) {\n    $words = explode(' ', $sentence);\n    $reversed_words = array_reverse($words);\n    $reversed_sentence = implode(' ', $reversed_words);\n    return $reversed_sentence;}\n\n$sentence = 'This is a test sentence';\n$reversed_sentence = reverse_words($sentence);\necho $reversed_sentence;\n\n?>"
    },
    {
        "instruction": "Implement a simple C++ program to find the largest element in an integer vector.",
        "input": "vector<int> nums = {10, 42, 15, 23, 8};",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> nums = {10, 42, 15, 23, 8};\n    \n    int max_element = *std::max_element(nums.begin(), nums.end());\n    std::cout << \"Largest element: \" << max_element << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> nums = {10, 42, 15, 23, 8};\n    \n    int max_element = *std::max_element(nums.begin(), nums.end());\n    std::cout << \"Largest element: \" << max_element << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "How can a Python function be written to calculate the factorial of a non-negative integer?",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Create a Java method to count the number of occurrences of a specified character in a given string.",
        "input": "String text = \"mississippi\"; char target = 's';",
        "response": "public class CharCounter {\n    public static int countOccurrences(String text, char target) {\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == target) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String text = \"mississippi\";\n        char target = 's';\n        int count = countOccurrences(text, target);\n        System.out.println(\"Occurrences of '\" + target + \"': \" + count);\n    }}",
        "output": "public class CharCounter {\n    public static int countOccurrences(String text, char target) {\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == target) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String text = \"mississippi\";\n        char target = 's';\n        int count = countOccurrences(text, target);\n        System.out.println(\"Occurrences of '\" + target + \"': \" + count);\n    }}"
    },
    {
        "instruction": "Design a JavaScript function to merge two sorted arrays without using built-in functions.",
        "input": "let arr1 = [1, 3, 5]; let arr2 = [2, 4, 6];",
        "response": "function mergeSortedArrays(arr1, arr2) {\n    let result = [];\n    let i = 0, j = 0;\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] < arr2[j]) {\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n\n    while (i < arr1.length) {\n        result.push(arr1[i]);\n        i++;\n    }\n\n    while (j < arr2.length) {\n        result.push(arr2[j]);\n        j++;\n    }\n\n    return result;}\n\nlet arr1 = [1, 3, 5];\nlet arr2 = [2, 4, 6];\nlet mergedArray = mergeSortedArrays(arr1, arr2);\nconsole.log(mergedArray);",
        "output": "function mergeSortedArrays(arr1, arr2) {\n    let result = [];\n    let i = 0, j = 0;\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] < arr2[j]) {\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n\n    while (i < arr1.length) {\n        result.push(arr1[i]);\n        i++;\n    }\n\n    while (j < arr2.length) {\n        result.push(arr2[j]);\n        j++;\n    }\n\n    return result;}\n\nlet arr1 = [1, 3, 5];\nlet arr2 = [2, 4, 6];\nlet mergedArray = mergeSortedArrays(arr1, arr2);\nconsole.log(mergedArray);"
    },
    {
        "instruction": "Implement a C++ function named count_vowels which takes a string as input and returns the number of vowels in that string.",
        "input": "Hello, I am an AI language model!",
        "response": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint count_vowels(string text) {\n    int count = 0;\n    for (char c : text) {\n        c = tolower(c);\n        if (c=='a' || c=='e' || c=='i' || c=='o' || c=='u') {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    string text = \"Hello, I am an AI language model!\";\n    int result = count_vowels(text);\n    cout << \"Number of vowels: \" << result << endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint count_vowels(string text) {\n    int count = 0;\n    for (char c : text) {\n        c = tolower(c);\n        if (c=='a' || c=='e' || c=='i' || c=='o' || c=='u') {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    string text = \"Hello, I am an AI language model!\";\n    int result = count_vowels(text);\n    cout << \"Number of vowels: \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Python script to download an image from a URL and save it to your local machine?",
        "input": "https://www.example.com/image.jpg",
        "response": "import requests\nfrom pathlib import Path\n\ndef download_image(url, save_path):\n    response = requests.get(url)\n    response.raise_for_status()\n    Path(save_path).write_bytes(response.content)\n\nurl = 'https://www.example.com/image.jpg'\nsave_path = 'image.jpg'\n\ndownload_image(url, save_path)",
        "output": "import requests\nfrom pathlib import Path\n\ndef download_image(url, save_path):\n    response = requests.get(url)\n    response.raise_for_status()\n    Path(save_path).write_bytes(response.content)\n\nurl = 'https://www.example.com/image.jpg'\nsave_path = 'image.jpg'\n\ndownload_image(url, save_path)"
    },
    {
        "instruction": "Create a JavaScript function called is_even that determines whether a given number is even or odd.",
        "input": "42",
        "response": "function is_even(num) {\n    return num % 2 === 0;}\n\nconst number = 42;\nconst result = is_even(number);\nconsole.log(result);",
        "output": "function is_even(num) {\n    return num % 2 === 0;}\n\nconst number = 42;\nconst result = is_even(number);\nconsole.log(result);"
    },
    {
        "instruction": "Write a shell script to count the number of files in a specified directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndir_path=\"/path/to/directory\"\n\nfile_count=$(find \"$dir_path\" -type f | wc -l)\n\necho \"Number of files in directory: $file_count\"",
        "output": "#!/bin/bash\n\ndir_path=\"/path/to/directory\"\n\nfile_count=$(find \"$dir_path\" -type f | wc -l)\n\necho \"Number of files in directory: $file_count\""
    },
    {
        "instruction": "Design a C++ function to calculate the factorial of a given non-negative integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Shell script that checks whether a file exists in a directory and prints a message.",
        "input": "/path/to/directory/filename.txt",
        "response": "#!/bin/bash\n\nFILE_PATH=\"/path/to/directory/filename.txt\"\n\nif [ -e \"$FILE_PATH\" ]; then\n    echo \"File exists.\"\nelse\n    echo \"File does not exist.\"\nfi",
        "output": "#!/bin/bash\n\nFILE_PATH=\"/path/to/directory/filename.txt\"\n\nif [ -e \"$FILE_PATH\" ]; then\n    echo \"File exists.\"\nelse\n    echo \"File does not exist.\"\nfi"
    },
    {
        "instruction": "How would you implement a recursive function in JavaScript to find the Fibonacci number at a given position?",
        "input": "10",
        "response": "function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst position = 10;\nconsole.log(`Fibonacci number at position ${position} is: ${fibonacci(position)}`);",
        "output": "function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst position = 10;\nconsole.log(`Fibonacci number at position ${position} is: ${fibonacci(position)}`);"
    },
    {
        "instruction": "Create a Python code snippet that extracts the domain name from a given URL string.",
        "input": "https://example.com/page?query=value",
        "response": "from urllib.parse import urlparse\n\nurl = 'https://example.com/page?query=value'\nparsed_url = urlparse(url)\ndomain = parsed_url.netloc\n\nprint(f'Domain name: {domain}')",
        "output": "from urllib.parse import urlparse\n\nurl = 'https://example.com/page?query=value'\nparsed_url = urlparse(url)\ndomain = parsed_url.netloc\n\nprint(f'Domain name: {domain}')"
    },
    {
        "instruction": "Write a Python function that calculates the factorial of a given non-negative integer.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Can you create a JavaScript function to find the first repeated word in a sentence?",
        "input": "This is a test to find the first repeated word in this sentence.",
        "response": "function findFirstRepeatedWord(sentence) {\n    const words = sentence.split(' ');\n    const wordSet = new Set();\n    for (const word of words) {\n        if (wordSet.has(word.toLowerCase())) {\n            return word;\n        }\n        wordSet.add(word.toLowerCase());\n    }\n    return null;}\n\nconst result = findFirstRepeatedWord('This is a test to find the first repeated word in this sentence.');\nconsole.log(result);",
        "output": "function findFirstRepeatedWord(sentence) {\n    const words = sentence.split(' ');\n    const wordSet = new Set();\n    for (const word of words) {\n        if (wordSet.has(word.toLowerCase())) {\n            return word;\n        }\n        wordSet.add(word.toLowerCase());\n    }\n    return null;}\n\nconst result = findFirstRepeatedWord('This is a test to find the first repeated word in this sentence.');\nconsole.log(result);"
    },
    {
        "instruction": "Create a C++ program that iterates through a vector of integers and prints the square of each number.",
        "input": "1, 2, 3, 4, 5",
        "response": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    \n    for (int number : numbers) {\n        std::cout << number * number << std::endl;\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    \n    for (int number : numbers) {\n        std::cout << number * number << std::endl;\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Construct a PHP function that takes a string and replaces all vowels with an asterisk.",
        "input": "Hello, World!",
        "response": "<?php\nfunction replace_vowels($str) {\n    return preg_replace('/[aeiou]/i', '*', $str);}\n\n$result = replace_vowels('Hello, World!');\necho $result;\n?>",
        "output": "<?php\nfunction replace_vowels($str) {\n    return preg_replace('/[aeiou]/i', '*', $str);}\n\n$result = replace_vowels('Hello, World!');\necho $result;\n?>"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a non-negative integer.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    std::cout << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    std::cout << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "In Python, write a script that requests a user to input their name and returns a greeting message.",
        "input": "Alice",
        "response": "def greet_user(name):\n    return f'Hello, {name}!'\n\nuser_name = input('Please enter your name: ')\ngreeting_message = greet_user(user_name)\nprint(greeting_message)",
        "output": "def greet_user(name):\n    return f'Hello, {name}!'\n\nuser_name = input('Please enter your name: ')\ngreeting_message = greet_user(user_name)\nprint(greeting_message)"
    },
    {
        "instruction": "How would you create a JavaScript function that takes a string input and reverses the letters?",
        "input": "\"hello world\"",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst input = 'hello world';\nconst reversed = reverseString(input);\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst input = 'hello world';\nconst reversed = reverseString(input);\nconsole.log(reversed);"
    },
    {
        "instruction": "Please write a shell script that lists all the files in the current directory, sorted by file size.",
        "input": "",
        "response": "#!/bin/bash\n\nls -lS",
        "output": "#!/bin/bash\n\nls -lS"
    },
    {
        "instruction": "Implement a C++ function which takes a vector of integers and returns the average of the elements.",
        "input": "{1, 5, 8, 13, 21}",
        "response": "#include <iostream>\n#include <vector>\n#include <numeric>\n\ndouble average(const std::vector<int>& nums) {\n    double sum = std::accumulate(nums.begin(), nums.end(), 0);\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {1, 5, 8, 13, 21};\n    double avg = average(numbers);\n    std::cout << 'Average: ' << avg << std::endl;}",
        "output": "#include <iostream>\n#include <vector>\n#include <numeric>\n\ndouble average(const std::vector<int>& nums) {\n    double sum = std::accumulate(nums.begin(), nums.end(), 0);\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {1, 5, 8, 13, 21};\n    double avg = average(numbers);\n    std::cout << 'Average: ' << avg << std::endl;}"
    },
    {
        "instruction": "Write a shell script that takes a filename as input, checks if the file exists and prints the number of lines in the file.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfilename=$1\n\nif [ -f $filename ]; then\n    line_count=$(wc -l < $filename)\n    echo 'Number of lines:' $line_count\nelse\n    echo 'File not found:' $filename\nfi",
        "output": "#!/bin/bash\n\nfilename=$1\n\nif [ -f $filename ]; then\n    line_count=$(wc -l < $filename)\n    echo 'Number of lines:' $line_count\nelse\n    echo 'File not found:' $filename\nfi"
    },
    {
        "instruction": "Create a C# program that reads a CSV file and prints the second column of each row.",
        "input": "data.csv",
        "response": "using System;\nusing System.IO;\n\nclass SecondColumnPrinter\n{\n    static void Main(string[] args)\n    {\n        string filePath = 'data.csv';\n        \n        using (StreamReader sr = new StreamReader(filePath))\n        {\n            string line;\n            while ((line = sr.ReadLine()) != null)\n            {\n                string[] columns = line.Split(',');\n                Console.WriteLine(columns[1]);\n            }\n        }\n    }}",
        "output": "using System;\nusing System.IO;\n\nclass SecondColumnPrinter\n{\n    static void Main(string[] args)\n    {\n        string filePath = 'data.csv';\n        \n        using (StreamReader sr = new StreamReader(filePath))\n        {\n            string line;\n            while ((line = sr.ReadLine()) != null)\n            {\n                string[] columns = line.Split(',');\n                Console.WriteLine(columns[1]);\n            }\n        }\n    }}"
    },
    {
        "instruction": "How would you design a Python class that represents a circle with a radius and a method to calculate its area?",
        "input": "Radius: 7",
        "response": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * (self.radius ** 2)\n\nmy_circle = Circle(7)\nprint(my_circle.area())",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * (self.radius ** 2)\n\nmy_circle = Circle(7)\nprint(my_circle.area())"
    },
    {
        "instruction": "Write a C# code snippet that reads a CSV file line by line and prints each row.",
        "input": "Path to CSV file: \"C:\\Users\\user\\Documents\\data.csv\"",
        "response": "using System;\nusing System.IO;\n\nclass ReadCSV\n{\n    static void Main()\n    {\n        string path = \"C:\\\\Users\\\\user\\\\Documents\\\\data.csv\";\n        using (var reader = new StreamReader(path))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = reader.ReadLine();\n                Console.WriteLine(line);\n            }\n        }\n    }}",
        "output": "using System;\nusing System.IO;\n\nclass ReadCSV\n{\n    static void Main()\n    {\n        string path = \"C:\\\\Users\\\\user\\\\Documents\\\\data.csv\";\n        using (var reader = new StreamReader(path))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = reader.ReadLine();\n                Console.WriteLine(line);\n            }\n        }\n    }}"
    },
    {
        "instruction": "Implement a Python 3 function to calculate the factorial of a non-negative integer using recursion.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "How do I write a JavaScript function that swaps the values of two variables without using a third variable?",
        "input": "a = 10, b = 20",
        "response": "function swapValues(a, b) {\n    a = a + b;\n    b = a - b;\n    a = a - b;\n\n    return [a, b];}\n\nconst [swappedA, swappedB] = swapValues(10, 20);\nconsole.log(`a: ${swappedA}, b: ${swappedB}`);",
        "output": "function swapValues(a, b) {\n    a = a + b;\n    b = a - b;\n    a = a - b;\n\n    return [a, b];}\n\nconst [swappedA, swappedB] = swapValues(10, 20);\nconsole.log(`a: ${swappedA}, b: ${swappedB}`);"
    },
    {
        "instruction": "Create a shell script that lists all files in a given directory and sorts them by file size in descending order.",
        "input": "Directory path: \"/home/user/documents\"",
        "response": "#!/bin/bash\n\ndir=\"/home/user/documents\"\nls -lS --block-size=K \"$dir\"",
        "output": "#!/bin/bash\n\ndir=\"/home/user/documents\"\nls -lS --block-size=K \"$dir\""
    },
    {
        "instruction": "Write a C program that reads two integer inputs and displays their division result.",
        "input": "10, 5",
        "response": "#include <stdio.h>\n\nint main() {\n    int a = 10, b = 5;\n    float result = (float) a / b;\n    printf(\"%f\", result);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    int a = 10, b = 5;\n    float result = (float) a / b;\n    printf(\"%f\", result);\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a recursive algorithm in C++ to calculate the factorial of a positive integer?",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned n) {\n    if (n == 0) { return 1; }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned n = 6;\n    cout << factorial(n) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned n) {\n    if (n == 0) { return 1; }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned n = 6;\n    cout << factorial(n) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a PHP function that reads the content of a given file and returns the number of lines.",
        "input": "/path/to/your/file.txt",
        "response": "<?php\nfunction countLines($filename) {\n    $file_handle = fopen($filename, 'r');\n    if (!$file_handle) { return 0; }\n\n    $line_count = 0;\n    while (!feof($file_handle)) {\n        fgets($file_handle);\n        $line_count++;\n    }\n\n    fclose($file_handle);\n    return $line_count;\n}\n\necho countLines('/path/to/your/file.txt'); ?>",
        "output": "<?php\nfunction countLines($filename) {\n    $file_handle = fopen($filename, 'r');\n    if (!$file_handle) { return 0; }\n\n    $line_count = 0;\n    while (!feof($file_handle)) {\n        fgets($file_handle);\n        $line_count++;\n    }\n\n    fclose($file_handle);\n    return $line_count;\n}\n\necho countLines('/path/to/your/file.txt'); ?>"
    },
    {
        "instruction": "Design a Bash script that receives a list of file paths and outputs the size of each file in bytes.",
        "input": "/path/to/your/file1.txt /path/to/your/file2.txt",
        "response": "#!/bin/bash\n\nIFS=' ' read -r -a file_paths <<< \"/path/to/your/file1.txt /path/to/your/file2.txt\"\n\nfor file_path in \"${file_paths[@]}\"; do\n    file_size=$(stat -c%s \"$file_path\")\n    echo \"Size of $file_path: $file_size bytes\"\ndone",
        "output": "#!/bin/bash\n\nIFS=' ' read -r -a file_paths <<< \"/path/to/your/file1.txt /path/to/your/file2.txt\"\n\nfor file_path in \"${file_paths[@]}\"; do\n    file_size=$(stat -c%s \"$file_path\")\n    echo \"Size of $file_path: $file_size bytes\"\ndone"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given non-negative integer recursively.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main()\n{\n    int n = 6;\n    int result = factorial(n);\n    cout << \"Factorial of \" << n << \" is: \" << result << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main()\n{\n    int n = 6;\n    int result = factorial(n);\n    cout << \"Factorial of \" << n << \" is: \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Bash script that takes user input for a directory and lists the files inside that directory?",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\necho \"Enter the directory path:\"\nread directory_path\n\nif [ -d \"$directory_path\" ]; then\n    echo \"Files inside the directory:\"\n    ls \"$directory_path\"\nelse\n    echo \"Directory not found\"\nfi",
        "output": "#!/bin/bash\n\necho \"Enter the directory path:\"\nread directory_path\n\nif [ -d \"$directory_path\" ]; then\n    echo \"Files inside the directory:\"\n    ls \"$directory_path\"\nelse\n    echo \"Directory not found\"\nfi"
    },
    {
        "instruction": "Design a C# class called 'Car' with properties for make, model, and year, and create a constructor to initialize the properties.",
        "input": "Toyota, Camry, 2020",
        "response": "using System;\n\npublic class Car\n{\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public int Year { get; set; }\n\n    public Car(string make, string model, int year)\n    {\n        Make = make;\n        Model = model;\n        Year = year;\n    }}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Car car = new Car(\"Toyota\", \"Camry\", 2020);\n        Console.WriteLine(\"Make: \" + car.Make + \", Model: \" + car.Model + \", Year: \" + car.Year);\n    }}",
        "output": "using System;\n\npublic class Car\n{\n    public string Make { get; set; }\n    public string Model { get; set; }\n    public int Year { get; set; }\n\n    public Car(string make, string model, int year)\n    {\n        Make = make;\n        Model = model;\n        Year = year;\n    }}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Car car = new Car(\"Toyota\", \"Camry\", 2020);\n        Console.WriteLine(\"Make: \" + car.Make + \", Model: \" + car.Model + \", Year: \" + car.Year);\n    }}"
    },
    {
        "instruction": "Construct a simple Python program that calculates the area of a rectangle and prints the result to the console.",
        "input": "4, 7",
        "response": "def rectangle_area(width, height):\n    return width * height\n\nwidth = 4\nheight = 7\narea = rectangle_area(width, height)\nprint(f\"The area of the rectangle with width {width} and height {height} is: {area}\")",
        "output": "def rectangle_area(width, height):\n    return width * height\n\nwidth = 4\nheight = 7\narea = rectangle_area(width, height)\nprint(f\"The area of the rectangle with width {width} and height {height} is: {area}\")"
    },
    {
        "instruction": "Implement a function in C++ that computes the factorial using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned int factorial(unsigned int n)\n{\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main()\n{\n    unsigned int n = 5;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned int factorial(unsigned int n)\n{\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main()\n{\n    unsigned int n = 5;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python API to query a list of users and filter them based on certain criteria.",
        "input": "[{\"id\":1,\"name\":\"Alice\",\"age\":30,\"city\":\"New York\"},{\"id\":2,\"name\":\"Bob\",\"age\":25,\"city\":\"Los Angeles\"},{\"id\":3,\"name\":\"Charlie\",\"age\":22,\"city\":\"New York\"}]\ncriteria:{\"min_age\":25,\"city\":\"New York\"}",
        "response": "import json\n\nUSER_DATA = '[{\"id\":1,\"name\":\"Alice\",\"age\":30,\"city\":\"New York\"},{\"id\":2,\"name\":\"Bob\",\"age\":25,\"city\":\"Los Angeles\"},{\"id\":3,\"name\":\"Charlie\",\"age\":22,\"city\":\"New York\"}]\n\ndef filter_users(users, criteria):\n    filtered_users = []\n    for user in users:\n        if user['age'] >= criteria['min_age'] and user['city'] == criteria['city']:\n            filtered_users.append(user)\n    return filtered_users\n\n\ndef main():\n    users = json.loads(USER_DATA)\n    criteria = {\"min_age\": 25, \"city\": \"New York\"}\n    filtered_users = filter_users(users, criteria)\n    print(filtered_users)\n\nif __name__ == '__main__':\n    main()",
        "output": "import json\n\nUSER_DATA = '[{\"id\":1,\"name\":\"Alice\",\"age\":30,\"city\":\"New York\"},{\"id\":2,\"name\":\"Bob\",\"age\":25,\"city\":\"Los Angeles\"},{\"id\":3,\"name\":\"Charlie\",\"age\":22,\"city\":\"New York\"}]\n\ndef filter_users(users, criteria):\n    filtered_users = []\n    for user in users:\n        if user['age'] >= criteria['min_age'] and user['city'] == criteria['city']:\n            filtered_users.append(user)\n    return filtered_users\n\n\ndef main():\n    users = json.loads(USER_DATA)\n    criteria = {\"min_age\": 25, \"city\": \"New York\"}\n    filtered_users = filter_users(users, criteria)\n    print(filtered_users)\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "instruction": "How do I calculate the area of a rectangle in JavaScript?",
        "input": "length: 10, width: 20",
        "response": "function calculateArea(length, width) {\n    return length * width;\n}\n\nconst length = 10;\nconst width = 20;\nconst area = calculateArea(length, width);\nconsole.log('Area of rectangle:', area);",
        "output": "function calculateArea(length, width) {\n    return length * width;\n}\n\nconst length = 10;\nconst width = 20;\nconst area = calculateArea(length, width);\nconsole.log('Area of rectangle:', area);"
    },
    {
        "instruction": "Design a simple user database system using SQLite and Python that allows for adding and retrieving user details.",
        "input": "username: johndoe, email: john@example.com",
        "response": "import sqlite3\n\n\ndef create_table(conn):\n    cur = conn.cursor()\n    cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, email TEXT)')\n\n\ndef insert_user(conn, username, email):\n    cur = conn.cursor()\n    cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))\n    conn.commit()\n\n\ndef get_users(conn):\n    cur = conn.cursor()\n    cur.execute('SELECT * FROM users')\n    return cur.fetchall()\n\n\ndef main():\n    conn = sqlite3.connect('user_database.db')\n\n    create_table(conn)\n\n    username = 'johndoe'\n    email = 'john@example.com'\n    insert_user(conn, username, email)\n\n    users = get_users(conn)\n    print('User list:', users)\n    conn.close()\n\nif __name__ == '__main__':\n    main()",
        "output": "import sqlite3\n\n\ndef create_table(conn):\n    cur = conn.cursor()\n    cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, email TEXT)')\n\n\ndef insert_user(conn, username, email):\n    cur = conn.cursor()\n    cur.execute('INSERT INTO users (username, email) VALUES (?, ?)', (username, email))\n    conn.commit()\n\n\ndef get_users(conn):\n    cur = conn.cursor()\n    cur.execute('SELECT * FROM users')\n    return cur.fetchall()\n\n\ndef main():\n    conn = sqlite3.connect('user_database.db')\n\n    create_table(conn)\n\n    username = 'johndoe'\n    email = 'john@example.com'\n    insert_user(conn, username, email)\n\n    users = get_users(conn)\n    print('User list:', users)\n    conn.close()\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "instruction": "Construct a C++ program that reads user input integers n and then calculates the factorial of n.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num;\n    cout << \"Enter a number: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num;\n    cout << \"Enter a number: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Design a Python function that takes a sentence and returns the word count.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "def word_count(sentence):\n    return len(sentence.split())\n\ninput_sentence = \"The quick brown fox jumps over the lazy dog\"\nprint(word_count(input_sentence))",
        "output": "def word_count(sentence):\n    return len(sentence.split())\n\ninput_sentence = \"The quick brown fox jumps over the lazy dog\"\nprint(word_count(input_sentence))"
    },
    {
        "instruction": "Write a Bash script that finds and deletes all files with the extension '.log' in the current directory and its subdirectories.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -type f -name '*.log' -exec rm -f {} +",
        "output": "#!/bin/bash\n\nfind . -type f -name '*.log' -exec rm -f {} +"
    },
    {
        "instruction": "Can you implement a JavaScript function that receives an array of integers and returns an array containing the even numbers sorted in ascending order?",
        "input": "[67, 2, 34, 18, 9, 42]",
        "response": "function evenNumbersSorted(arr) {\n    return arr.filter((num) => num % 2 === 0).sort((a, b) => a - b);\n}\n\nconst inputArray = [67, 2, 34, 18, 9, 42];\nconsole.log(evenNumbersSorted(inputArray));",
        "output": "function evenNumbersSorted(arr) {\n    return arr.filter((num) => num % 2 === 0).sort((a, b) => a - b);\n}\n\nconst inputArray = [67, 2, 34, 18, 9, 42];\nconsole.log(evenNumbersSorted(inputArray));"
    },
    {
        "instruction": "Write a C++ program that reads a file line by line and outputs the number of characters in each line.",
        "input": "filename: 'example.txt'",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string filename = \"example.txt\";\n    std::ifstream file(filename);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            std::cout << \"Line length: \" << line.length() << std::endl;\n        }\n        file.close();\n    } else {\n        std::cout << \"Unable to open file\" << std::endl;\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string filename = \"example.txt\";\n    std::ifstream file(filename);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            std::cout << \"Line length: \" << line.length() << std::endl;\n        }\n        file.close();\n    } else {\n        std::cout << \"Unable to open file\" << std::endl;\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Can you show me an example PHP code to connect to a MySQL database using PDO?",
        "input": "host: 'localhost', dbname: 'my_database', username: 'username', password: 'password'",
        "response": "<?php\n$host = 'localhost';\n$dbname = 'my_database';\n$username = 'username';\n$password = 'password';\n\ntry {\n    $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    echo \"Connected successfully\";} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();}\n?>",
        "output": "<?php\n$host = 'localhost';\n$dbname = 'my_database';\n$username = 'username';\n$password = 'password';\n\ntry {\n    $connection = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    echo \"Connected successfully\";} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();}\n?>"
    },
    {
        "instruction": "Build a simple REST API using Express.js that returns a 'Hello, world!' response for GET requests.",
        "input": "endpoint: '/hello'",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/hello', (req, res) => {\n    res.send('Hello, world!');});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/hello', (req, res) => {\n    res.send('Hello, world!');});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);});"
    },
    {
        "instruction": "Write a Bash script that counts the number of words in a file.",
        "input": "file_path: '~/sample.txt'",
        "response": "#!/bin/bash\n\nfile_path=\"~/sample.txt\"\nword_count=$(< \"$file_path\" wc -w)\n\necho \"Word count: $word_count\"",
        "output": "#!/bin/bash\n\nfile_path=\"~/sample.txt\"\nword_count=$(< \"$file_path\" wc -w)\n\necho \"Word count: $word_count\""
    },
    {
        "instruction": "Write a Python function that takes a list of strings and returns a list of strings containing only the unique elements, maintaining their original order.",
        "input": "['apple', 'banana', 'apple', 'orange', 'banana']",
        "response": "def unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\nresult = unique_elements(['apple', 'banana', 'apple', 'orange', 'banana'])\nprint(result)",
        "output": "def unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\nresult = unique_elements(['apple', 'banana', 'apple', 'orange', 'banana'])\nprint(result)"
    },
    {
        "instruction": "Create a C++ program that calculates the area of a circle given its radius.",
        "input": "Radius: 5",
        "response": "#include <iostream>\n#include <cmath>\n\nconstexpr double PI = 3.14159265359;\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double radius = 5;\n    double area = circle_area(radius);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nconstexpr double PI = 3.14159265359;\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double radius = 5;\n    double area = circle_area(radius);\n    std::cout << \"Area: \" << area << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a basic HTTP server in Node.js that responds with 'Hello, World!' on every request?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!');});\n\nconst PORT = 3000;\n\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!');});\n\nconst PORT = 3000;\n\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);});"
    },
    {
        "instruction": "Create a Bash script that finds all files with the '.txt' extension in the current directory and moves them to a 'text_files' directory.",
        "input": "",
        "response": "#!/bin/bash\nmkdir -p text_files\nfind . -maxdepth 1 -type f -name '*.txt' -exec mv {} text_files \\;",
        "output": "#!/bin/bash\nmkdir -p text_files\nfind . -maxdepth 1 -type f -name '*.txt' -exec mv {} text_files \\;"
    },
    {
        "instruction": "Design a C++ function to calculate the factorial of a positive integer.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you, using JavaScript, filter an array of objects to only keep those with a certain property?",
        "input": "[{ name: 'Alice', age: 30 }, { name: 'Bob', age: 25 }, { name: 'Charlie', age: 30 }], 'age', 30",
        "response": "function filterObjects(arr, key, value) {\n    return arr.filter(obj => obj[key] === value);}\n\nconst data = [\n    { name: 'Alice', age: 30 },\n    { name: 'Bob', age: 25 },\n    { name: 'Charlie', age: 30 }\n];\n\nconst filteredData = filterObjects(data, 'age', 30);\nconsole.log(filteredData);",
        "output": "function filterObjects(arr, key, value) {\n    return arr.filter(obj => obj[key] === value);}\n\nconst data = [\n    { name: 'Alice', age: 30 },\n    { name: 'Bob', age: 25 },\n    { name: 'Charlie', age: 30 }\n];\n\nconst filteredData = filterObjects(data, 'age', 30);\nconsole.log(filteredData);"
    },
    {
        "instruction": "Implement a Python program that reads a CSV file and prints each row in reverse.",
        "input": "example.csv",
        "response": "import csv\n\ndef reverse_print_csv(file_name):\n    with open(file_name, mode='r') as csv_file:\n        csv_reader = csv.reader(csv_file)\n\n        for row in csv_reader:\n            print(row[::-1])\n\nfile_name = 'example.csv'\nreverse_print_csv(file_name)",
        "output": "import csv\n\ndef reverse_print_csv(file_name):\n    with open(file_name, mode='r') as csv_file:\n        csv_reader = csv.reader(csv_file)\n\n        for row in csv_reader:\n            print(row[::-1])\n\nfile_name = 'example.csv'\nreverse_print_csv(file_name)"
    },
    {
        "instruction": "Write a Shell script to print all files in a directory along with their sizes in a human-readable format.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nDIRECTORY='/path/to/directory'\n\nfor file in \"$DIRECTORY\"/*; do\n    if [ -f \"$file\" ]; then\n        size=$(du -sh \"$file\" | cut -f1)\n        printf '\"%s\"\t%s\n' \"$(basename \"$file\")\" \"$size\"\n    fi\ndone",
        "output": "#!/bin/bash\n\nDIRECTORY='/path/to/directory'\n\nfor file in \"$DIRECTORY\"/*; do\n    if [ -f \"$file\" ]; then\n        size=$(du -sh \"$file\" | cut -f1)\n        printf '\"%s\"\t%s\n' \"$(basename \"$file\")\" \"$size\"\n    fi\ndone"
    },
    {
        "instruction": "Write a Python function to reverse a given string.",
        "input": "\"Hello, World!\"",
        "response": "def reverse_string(s):\n    return s[::-1]\n\ninput_str = 'Hello, World!'\nreversed_str = reverse_string(input_str)\nprint(reversed_str)",
        "output": "def reverse_string(s):\n    return s[::-1]\n\ninput_str = 'Hello, World!'\nreversed_str = reverse_string(input_str)\nprint(reversed_str)"
    },
    {
        "instruction": "What would be a shell script that lists all files in the current directory, sorted by size?",
        "input": "",
        "response": "#!/bin/bash\n\nls -lSh",
        "output": "#!/bin/bash\n\nls -lSh"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of strings and returns an array of their lengths.",
        "input": "[\"apple\", \"banana\", \"cherry\"]",
        "response": "function stringLengths(arr) {\n    return arr.map(str => str.length);}\n\nconst input_array = ['apple', 'banana', 'cherry'];\nconst lengths = stringLengths(input_array);\nconsole.log(lengths);",
        "output": "function stringLengths(arr) {\n    return arr.map(str => str.length);}\n\nconst input_array = ['apple', 'banana', 'cherry'];\nconst lengths = stringLengths(input_array);\nconsole.log(lengths);"
    },
    {
        "instruction": "Write a Python function to find the longest common prefix of a list of strings.",
        "input": "['flower', 'flow', 'flight']",
        "response": "def longest_common_prefix(strings):\n    if not strings:\n        return ''\n\n    prefix = strings[0]\n    for s in strings:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n\n    return prefix\n\nstrings = ['flower', 'flow', 'flight']\nresult = longest_common_prefix(strings)\nprint(result)",
        "output": "def longest_common_prefix(strings):\n    if not strings:\n        return ''\n\n    prefix = strings[0]\n    for s in strings:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n\n    return prefix\n\nstrings = ['flower', 'flow', 'flight']\nresult = longest_common_prefix(strings)\nprint(result)"
    },
    {
        "instruction": "Design a C++ function that takes a 2D vector of integers and transposes the matrix represented by it.",
        "input": "{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}",
        "response": "#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<int>> transpose_matrix(const std::vector<std::vector<int>>& matrix) {\n    size_t rows = matrix.size();\n    size_t cols = matrix[0].size();\n    std::vector<std::vector<int>> transposed_matrix(cols, std::vector<int>(rows));\n\n    for (size_t row = 0; row < rows; ++row) {\n        for (size_t col = 0; col < cols; ++col) {\n            transposed_matrix[col][row] = matrix[row][col];\n        }\n    }\n\n    return transposed_matrix;}\n\nint main() {\n    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    std::vector<std::vector<int>> transposed = transpose_matrix(matrix);\n\n    // Output the transposed matrix\n    for (const auto& row: transposed) {\n        for (const int value : row) {\n            std::cout << value << ' ';\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<int>> transpose_matrix(const std::vector<std::vector<int>>& matrix) {\n    size_t rows = matrix.size();\n    size_t cols = matrix[0].size();\n    std::vector<std::vector<int>> transposed_matrix(cols, std::vector<int>(rows));\n\n    for (size_t row = 0; row < rows; ++row) {\n        for (size_t col = 0; col < cols; ++col) {\n            transposed_matrix[col][row] = matrix[row][col];\n        }\n    }\n\n    return transposed_matrix;}\n\nint main() {\n    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    std::vector<std::vector<int>> transposed = transpose_matrix(matrix);\n\n    // Output the transposed matrix\n    for (const auto& row: transposed) {\n        for (const int value : row) {\n            std::cout << value << ' ';\n        }\n        std::cout << std::endl;\n    }\n\n    return 0;}"
    },
    {
        "instruction": "How would you implement a JavaScript function for recursively calculating the greatest common divisor (GCD) of two integers?",
        "input": "56, 98",
        "response": "function gcd(a, b) {\n    if (b === 0) {\n        return a;\n    }\n    return gcd(b, a % b);}\n\nlet result = gcd(56, 98);\nconsole.log(result);",
        "output": "function gcd(a, b) {\n    if (b === 0) {\n        return a;\n    }\n    return gcd(b, a % b);}\n\nlet result = gcd(56, 98);\nconsole.log(result);"
    },
    {
        "instruction": "Build a shell script that calculates the disk usage of a specified directory and its subdirectories as a percentage of the total disk size.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ntarget_dir=$1\n\nif [ -z \"$target_dir\" ]; then\n    echo \"Usage: $0 <target_directory>\"\n    exit 1\nfi\n\ntotal_disk_space=$(df -k . | awk '{if (NR!=1) print $2}')\ndir_disk_usage=$(du -s -k $target_dir | awk '{print $1}')\n\npercentage=$(echo \"scale=2; $dir_disk_usage * 100 / $total_disk_space\" | bc)\n\necho \"The \"$target_dir\" directory accounts for $percentage% of the total disk space.\"\n",
        "output": "#!/bin/bash\n\ntarget_dir=$1\n\nif [ -z \"$target_dir\" ]; then\n    echo \"Usage: $0 <target_directory>\"\n    exit 1\nfi\n\ntotal_disk_space=$(df -k . | awk '{if (NR!=1) print $2}')\ndir_disk_usage=$(du -s -k $target_dir | awk '{print $1}')\n\npercentage=$(echo \"scale=2; $dir_disk_usage * 100 / $total_disk_space\" | bc)\n\necho \"The \"$target_dir\" directory accounts for $percentage% of the total disk space.\"\n"
    },
    {
        "instruction": "Write a C++ function that converts an integer array into a vector of even numbers.",
        "input": "int arr[] = {1, 2, 3, 4, 5, 6}; int size = 6;",
        "response": "#include <iostream>\n#include <vector>\n\nstd::vector<int> filter_even_numbers(int arr[], int size) {\n    std::vector<int> even_numbers;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] % 2 == 0) {\n            even_numbers.push_back(arr[i]);\n        }\n    }\n    return even_numbers;}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5, 6};\n    int size = 6;\n    std::vector<int> even_nums = filter_even_numbers(arr, size);\n    for (int num : even_nums) {\n        std::cout << num << ' ';\n    }\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nstd::vector<int> filter_even_numbers(int arr[], int size) {\n    std::vector<int> even_numbers;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] % 2 == 0) {\n            even_numbers.push_back(arr[i]);\n        }\n    }\n    return even_numbers;}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5, 6};\n    int size = 6;\n    std::vector<int> even_nums = filter_even_numbers(arr, size);\n    for (int num : even_nums) {\n        std::cout << num << ' ';\n    }\n    return 0;}"
    },
    {
        "instruction": "How can I write a Python script that collects user inputs for first name and last name, then combines them to form a full name?",
        "input": "firstName: 'Ada', lastName: 'Lovelace'",
        "response": "def collect_user_name():\n    first_name = input('Enter your first name: ')\n    last_name = input('Enter your last name: ')\n    full_name = first_name + ' ' + last_name\n    return full_name\n\nif __name__ == '__main__':\n    user_full_name = collect_user_name()\n    print('Hello, ' + user_full_name)",
        "output": "def collect_user_name():\n    first_name = input('Enter your first name: ')\n    last_name = input('Enter your last name: ')\n    full_name = first_name + ' ' + last_name\n    return full_name\n\nif __name__ == '__main__':\n    user_full_name = collect_user_name()\n    print('Hello, ' + user_full_name)"
    },
    {
        "instruction": "Create a PHP script that checks if the given year is a leap year or not.",
        "input": "$year = 2024;",
        "response": "<?php\n\nfunction is_leap_year(int $year): bool {\n    return ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;}\n\n$year = 2024;\nif (is_leap_year($year)) {\n    echo $year . ' is a leap year.';} else {\n    echo $year . ' is not a leap year.';}\n\n?>",
        "output": "<?php\n\nfunction is_leap_year(int $year): bool {\n    return ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;}\n\n$year = 2024;\nif (is_leap_year($year)) {\n    echo $year . ' is a leap year.';} else {\n    echo $year . ' is not a leap year.';}\n\n?>"
    },
    {
        "instruction": "Develop a Swift function to calculate the factorial of a given non-negative integer.",
        "input": "n: 5",
        "response": "func factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 1)}\n\nlet n = 5\nlet result = factorial(n)\nprint('Factorial of', n, 'is', result)",
        "output": "func factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 1)}\n\nlet n = 5\nlet result = factorial(n)\nprint('Factorial of', n, 'is', result)"
    },
    {
        "instruction": "Construct a Python program to convert a list of strings into a dictionary with the strings as keys and their lengths as values.",
        "input": "['hello', 'world', 'python']",
        "response": "def strings_to_dict(strings_list):\n    result = {}\n    for string in strings_list:\n        result[string] = len(string)\n    return result\n\nstrings_list = ['hello', 'world', 'python']\ndictionary = strings_to_dict(strings_list)\nprint(dictionary)",
        "output": "def strings_to_dict(strings_list):\n    result = {}\n    for string in strings_list:\n        result[string] = len(string)\n    return result\n\nstrings_list = ['hello', 'world', 'python']\ndictionary = strings_to_dict(strings_list)\nprint(dictionary)"
    },
    {
        "instruction": "How would you write a PHP function that, given an associative array, returns the keys of the array as a comma-separated string?",
        "input": "{'fruit': 'apple', 'color': 'red', 'size': 'medium'}",
        "response": "<?php\nfunction keys_to_csv($assoc_array) {\n    return implode(',', array_keys($assoc_array));}\n\n$assoc_array = array('fruit' => 'apple', 'color' => 'red', 'size' => 'medium');\n$csv_keys = keys_to_csv($assoc_array);\necho $csv_keys;\n?>",
        "output": "<?php\nfunction keys_to_csv($assoc_array) {\n    return implode(',', array_keys($assoc_array));}\n\n$assoc_array = array('fruit' => 'apple', 'color' => 'red', 'size' => 'medium');\n$csv_keys = keys_to_csv($assoc_array);\necho $csv_keys;\n?>"
    },
    {
        "instruction": "Write a JavaScript function to find the longest word in an input string, considering only alphabetical characters and ignoring any whitespace or punctuation.",
        "input": "The quick, brown fox? What does it jump over!",
        "response": "function findLongestWord(str) {\n    const words = str.match(/[a-z]+/gi);\n    let longestWord;\n    let maxLength = 0;\n\n    for (const word of words) {\n        if (word.length > maxLength) {\n            maxLength = word.length;\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst inputStr = 'The quick, brown fox? What does it jump over!';\nconst longestWord = findLongestWord(inputStr);\nconsole.log(longestWord);",
        "output": "function findLongestWord(str) {\n    const words = str.match(/[a-z]+/gi);\n    let longestWord;\n    let maxLength = 0;\n\n    for (const word of words) {\n        if (word.length > maxLength) {\n            maxLength = word.length;\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst inputStr = 'The quick, brown fox? What does it jump over!';\nconst longestWord = findLongestWord(inputStr);\nconsole.log(longestWord);"
    },
    {
        "instruction": "Implement a function in C++ that calculates the factorial of a given integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n-1);}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n-1);}"
    },
    {
        "instruction": "Design a simple REST API in JavaScript using the Express.js framework, which accepts a GET request and returns a JSON object containing a list of users.",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\nconst users = [\n    { id: 1, name: 'John Doe' },\n    { id: 2, name: 'Jane Smith' },\n];\n\napp.get('/users', (req, res) => {\n    res.json(users);});\n\napp.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\nconst users = [\n    { id: 1, name: 'John Doe' },\n    { id: 2, name: 'Jane Smith' },\n];\n\napp.get('/users', (req, res) => {\n    res.json(users);});\n\napp.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}`);});"
    },
    {
        "instruction": "How can I create a Python script that reads a text file, counts the occurrences of each word, and outputs the results in descending order?",
        "input": "example.txt",
        "response": "import collections\nimport re\n\ndef count_words(file_name):\n    with open(file_name, 'r') as f:\n        text = f.read().lower()\n    words = re.findall(r'\\w+', text)\n    word_count = collections.Counter(words)\n    \n    for word, count in word_count.most_common():\n        print(word, count)\n\nfilename = 'example.txt'\ncount_words(filename)",
        "output": "import collections\nimport re\n\ndef count_words(file_name):\n    with open(file_name, 'r') as f:\n        text = f.read().lower()\n    words = re.findall(r'\\w+', text)\n    word_count = collections.Counter(words)\n    \n    for word, count in word_count.most_common():\n        print(word, count)\n\nfilename = 'example.txt'\ncount_words(filename)"
    },
    {
        "instruction": "Write a Python program that parses a given CSV file and prints the total number of rows and columns.",
        "input": "data.csv",
        "response": "import csv\n\ndef print_csv_dimensions(file_name):\n    with open(file_name, 'r') as f:\n        data = list(csv.reader(f))\n        total_rows = len(data)\n        total_columns = len(data[0])\n\n    print(f'Total Rows: {total_rows}')\n    print(f'Total Columns: {total_columns}')\n\nfilename = 'data.csv'\nprint_csv_dimensions(filename)",
        "output": "import csv\n\ndef print_csv_dimensions(file_name):\n    with open(file_name, 'r') as f:\n        data = list(csv.reader(f))\n        total_rows = len(data)\n        total_columns = len(data[0])\n\n    print(f'Total Rows: {total_rows}')\n    print(f'Total Columns: {total_columns}')\n\nfilename = 'data.csv'\nprint_csv_dimensions(filename)"
    },
    {
        "instruction": "Write a C++ function that takes a string and reverses its characters.",
        "input": "\"Hello, World!\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nstd::string reverse_string(std::string input) {\n    std::reverse(input.begin(), input.end());\n    return input;}\n\nint main() {\n    std::string result = reverse_string(\"Hello, World!\");\n    std::cout << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nstd::string reverse_string(std::string input) {\n    std::reverse(input.begin(), input.end());\n    return input;}\n\nint main() {\n    std::string result = reverse_string(\"Hello, World!\");\n    std::cout << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Develop a Python script that reads the contents of a file, replaces all vowels with an asterisk (*) character, and writes the modified text to a new file.",
        "input": "Input file: 'sample.txt'\nOutput file: 'output.txt'\nSample content: 'This is a text file.'",
        "response": "def replace_vowels_with_asterisks(file_name):\n    with open(file_name, 'r') as f:\n        content = f.read()\n    vowels = 'AEIOUaeiou'\n    modified_content = ''.join(['*' if c in vowels else c for c in content])\n    return modified_content\n\ndef write_modified_content_to_file(output_file, modified_content):\n    with open(output_file, 'w') as f:\n        f.write(modified_content)\n\ninput_file = 'sample.txt'\noutput_file = 'output.txt'\nmodified_content = replace_vowels_with_asterisks(input_file)\nwrite_modified_content_to_file(output_file, modified_content)",
        "output": "def replace_vowels_with_asterisks(file_name):\n    with open(file_name, 'r') as f:\n        content = f.read()\n    vowels = 'AEIOUaeiou'\n    modified_content = ''.join(['*' if c in vowels else c for c in content])\n    return modified_content\n\ndef write_modified_content_to_file(output_file, modified_content):\n    with open(output_file, 'w') as f:\n        f.write(modified_content)\n\ninput_file = 'sample.txt'\noutput_file = 'output.txt'\nmodified_content = replace_vowels_with_asterisks(input_file)\nwrite_modified_content_to_file(output_file, modified_content)"
    },
    {
        "instruction": "Implement a JavaScript function that takes two date objects and finds the difference in days between them.",
        "input": "date1 = new Date('2022-03-01')\ndate2 = new Date('2022-03-12')",
        "response": "function daysDifference(date1, date2) {\n    const millisecondsPerDay = 24 * 60 * 60 * 1000;\n    const differenceInMilliseconds = Math.abs(date2 - date1);\n    const daysDifference = Math.round(differenceInMilliseconds / millisecondsPerDay);\n    return daysDifference;}\n\nconst date1 = new Date('2022-03-01');\nconst date2 = new Date('2022-03-12');\nconst result = daysDifference(date1, date2);\nconsole.log(result);",
        "output": "function daysDifference(date1, date2) {\n    const millisecondsPerDay = 24 * 60 * 60 * 1000;\n    const differenceInMilliseconds = Math.abs(date2 - date1);\n    const daysDifference = Math.round(differenceInMilliseconds / millisecondsPerDay);\n    return daysDifference;}\n\nconst date1 = new Date('2022-03-01');\nconst date2 = new Date('2022-03-12');\nconst result = daysDifference(date1, date2);\nconsole.log(result);"
    },
    {
        "instruction": "Compose a Shell script that takes a directory path as an argument and lists all files with '.txt' extension, including the file size in bytes, sorted by ascending file size.",
        "input": "Directory path: '/home/user/documents'",
        "response": "#!/bin/bash\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <directory_path>\"\n    exit 1\nfi\n\ndirectory_path=$1\n\nfind \"$directory_path\" -name '*.txt' -printf '%s %p\n' | sort -n | awk '{print $1 \" bytes - \" $2}'",
        "output": "#!/bin/bash\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <directory_path>\"\n    exit 1\nfi\n\ndirectory_path=$1\n\nfind \"$directory_path\" -name '*.txt' -printf '%s %p\n' | sort -n | awk '{print $1 \" bytes - \" $2}'"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a non-negative integer.",
        "input": "4",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 4;\n    cout << \"Factorial of \" << n << \" is: \" << factorial(n);\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 4;\n    cout << \"Factorial of \" << n << \" is: \" << factorial(n);\n    return 0;}"
    },
    {
        "instruction": "How would you implement a recursive function in PHP that computes the nth Fibonacci number?",
        "input": "6",
        "response": "<?php\nfunction fibonacci($n) {\n    if ($n <= 1) {\n        return $n;\n    }\n    return fibonacci($n - 1) + fibonacci($n - 2);}\n\n$n = 6;\necho \"The \" . $n . \"th Fibonacci number is: \" . fibonacci($n);\n?>",
        "output": "<?php\nfunction fibonacci($n) {\n    if ($n <= 1) {\n        return $n;\n    }\n    return fibonacci($n - 1) + fibonacci($n - 2);}\n\n$n = 6;\necho \"The \" . $n . \"th Fibonacci number is: \" . fibonacci($n);\n?>"
    },
    {
        "instruction": "In JavaScript, design a class representing a point in 2D space with two properties, x and y. Add a method to calculate the Euclidean distance between two points.",
        "input": "{\"x\": 3, \"y\": 4}, {\"x\": 6, \"y\": 8}",
        "response": "class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    distanceTo(other) {\n        const dx = this.x - other.x;\n        const dy = this.y - other.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }}\n\nconst point1 = new Point(3, 4);\nconst point2 = new Point(6, 8);\nconsole.log(`Distance between points: ${point1.distanceTo(point2)}`);",
        "output": "class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    distanceTo(other) {\n        const dx = this.x - other.x;\n        const dy = this.y - other.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }}\n\nconst point1 = new Point(3, 4);\nconst point2 = new Point(6, 8);\nconsole.log(`Distance between points: ${point1.distanceTo(point2)}`);"
    },
    {
        "instruction": "Implement a Python script that reads a text file and calculates the frequency of each word in the file. Print the top 5 most frequent words.",
        "input": "sample_text.txt",
        "response": "from collections import Counter\n\ndef count_words(file_name):\n    with open(file_name, 'r') as file:\n        text = file.read().lower()\n        words = text.split()\n\n    word_counts = Counter(words)\n    return word_counts.most_common(5)\n\nfile_name = 'sample_text.txt'\nmost_frequent_words = count_words(file_name)\nprint('Top 5 most frequent words:')\nfor word, count in most_frequent_words:\n    print(f'{word}: {count}')",
        "output": "from collections import Counter\n\ndef count_words(file_name):\n    with open(file_name, 'r') as file:\n        text = file.read().lower()\n        words = text.split()\n\n    word_counts = Counter(words)\n    return word_counts.most_common(5)\n\nfile_name = 'sample_text.txt'\nmost_frequent_words = count_words(file_name)\nprint('Top 5 most frequent words:')\nfor word, count in most_frequent_words:\n    print(f'{word}: {count}')"
    },
    {
        "instruction": "Design a C# function that takes a list of integers as input and computes the average.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program {\n    public static double GetAverage(List<int> numbers) {\n        double sum = 0;\n        foreach (int number in numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    public static void Main() {\n        List<int> numbers = new List<int> {1, 2, 3, 4, 5};\n        double average = GetAverage(numbers);\n        Console.WriteLine(\"The average is: \" + average);\n    }}\n```",
        "output": "```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program {\n    public static double GetAverage(List<int> numbers) {\n        double sum = 0;\n        foreach (int number in numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    public static void Main() {\n        List<int> numbers = new List<int> {1, 2, 3, 4, 5};\n        double average = GetAverage(numbers);\n        Console.WriteLine(\"The average is: \" + average);\n    }}\n```"
    },
    {
        "instruction": "Build a Python function that creates a dictionary from two lists, where the first list contains the keys and the second list contains the values.",
        "input": "keys = ['a', 'b', 'c']; values = [1, 2, 3]",
        "response": "```python\ndef create_dict(keys, values):\n    return dict(zip(keys, values))\n\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nresult = create_dict(keys, values)\nprint(result)\n```",
        "output": "```python\ndef create_dict(keys, values):\n    return dict(zip(keys, values))\n\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nresult = create_dict(keys, values)\nprint(result)\n```"
    },
    {
        "instruction": "How would you write a JavaScript function that reverses a string?",
        "input": "\"hello world\"",
        "response": "```javascript\nfunction reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst inputStr = 'hello world';\nconst reversedStr = reverseString(inputStr);\nconsole.log(reversedStr);\n```",
        "output": "```javascript\nfunction reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst inputStr = 'hello world';\nconst reversedStr = reverseString(inputStr);\nconsole.log(reversedStr);\n```"
    },
    {
        "instruction": "Write a C++ program that reads 3 integers from the user, calculates their average, and prints the result.",
        "input": "10, 20, 30",
        "response": "#include <iostream>\n\nint main() {\n    int a, b, c;\n    std::cout << \"Enter three integers: \";\n    std::cin >> a >> b >> c;\n\n    double average = (a + b + c) / 3.0;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int a, b, c;\n    std::cout << \"Enter three integers: \";\n    std::cin >> a >> b >> c;\n\n    double average = (a + b + c) / 3.0;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Given a list of strings, implement a Python function that sorts the list based on the length of each string in descending order.",
        "input": "['Apple', 'Banana', 'Cherry', 'Dates']",
        "response": "def sort_list_by_length_desc(arr):\n    return sorted(arr, key=lambda x: len(x), reverse=True)\n\ninput_list = ['Apple', 'Banana', 'Cherry', 'Dates']\nsorted_list = sort_list_by_length_desc(input_list)\nprint(sorted_list)",
        "output": "def sort_list_by_length_desc(arr):\n    return sorted(arr, key=lambda x: len(x), reverse=True)\n\ninput_list = ['Apple', 'Banana', 'Cherry', 'Dates']\nsorted_list = sort_list_by_length_desc(input_list)\nprint(sorted_list)"
    },
    {
        "instruction": "Create a shell script that outputs the total number of lines in all text files within a given directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nDIRECTORY=\"$1\"\n\nif [ -d \"$DIRECTORY\" ]; then\n    total_lines=0\n    for file in \"$DIRECTORY\"/*.txt; do\n        num_lines=$(wc -l < \"$file\")\n        total_lines=$((total_lines + num_lines))\n    done\n    echo \"Total lines in all text files: $total_lines\"\nelse\n    echo \"Invalid directory: $DIRECTORY\"\nfi",
        "output": "#!/bin/bash\n\nDIRECTORY=\"$1\"\n\nif [ -d \"$DIRECTORY\" ]; then\n    total_lines=0\n    for file in \"$DIRECTORY\"/*.txt; do\n        num_lines=$(wc -l < \"$file\")\n        total_lines=$((total_lines + num_lines))\n    done\n    echo \"Total lines in all text files: $total_lines\"\nelse\n    echo \"Invalid directory: $DIRECTORY\"\nfi"
    },
    {
        "instruction": "How would you write a Java method that reverses the order of words in a given sentence?",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "public static String reverseWords(String sentence) {\n    String[] words = sentence.split(\" \");\n    StringBuilder reversed = new StringBuilder();\n\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversed.append(words[i]);\n        if (i > 0) {\n            reversed.append(\" \");\n        }\n    }\n\n    return reversed.toString();\n}\n\nString sentence = \"The quick brown fox jumps over the lazy dog\";\nString reversedSentence = reverseWords(sentence);\nSystem.out.println(reversedSentence);",
        "output": "public static String reverseWords(String sentence) {\n    String[] words = sentence.split(\" \");\n    StringBuilder reversed = new StringBuilder();\n\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversed.append(words[i]);\n        if (i > 0) {\n            reversed.append(\" \");\n        }\n    }\n\n    return reversed.toString();\n}\n\nString sentence = \"The quick brown fox jumps over the lazy dog\";\nString reversedSentence = reverseWords(sentence);\nSystem.out.println(reversedSentence);"
    },
    {
        "instruction": "Design a Python program that reads a text file line by line and prints the number of words in each line.",
        "input": "file.txt",
        "response": "def count_words_in_file(file_name):\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n        for index, line in enumerate(lines):\n            word_count = len(line.split())\n            print(f'Line {index + 1}: {word_count} words')\n\n\ncount_words_in_file('file.txt')",
        "output": "def count_words_in_file(file_name):\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n        for index, line in enumerate(lines):\n            word_count = len(line.split())\n            print(f'Line {index + 1}: {word_count} words')\n\n\ncount_words_in_file('file.txt')"
    },
    {
        "instruction": "Construct an SQL query to get the total sales for each product category in a database with two tables: 'product' (id, name, category_id) and 'order' (id, product_id, quantity, total_price)",
        "input": "product and order tables with sample data",
        "response": "SELECT p.category_id, SUM(o.total_price) AS total_sales\nFROM product AS p\nJOIN order AS o ON p.id = o.product_id\nGROUP BY p.category_id",
        "output": "SELECT p.category_id, SUM(o.total_price) AS total_sales\nFROM product AS p\nJOIN order AS o ON p.id = o.product_id\nGROUP BY p.category_id"
    },
    {
        "instruction": "How would you implement a JavaScript function that receives an array of objects with a property 'name', sorts the objects alphabetically by the 'name' property, and returns the sorted array?",
        "input": "[{name: 'Zoe'}, {name: 'Alexander'}, {name: 'Jenny'}, {name: 'Lisa'}]",
        "response": "function sortObjectsByName(arr) {\n    return arr.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nconst sorted = sortObjectsByName([{name: 'Zoe'}, {name: 'Alexander'}, {name: 'Jenny'}, {name: 'Lisa'}]);\nconsole.log(sorted);",
        "output": "function sortObjectsByName(arr) {\n    return arr.sort((a, b) => a.name.localeCompare(b.name));\n}\n\nconst sorted = sortObjectsByName([{name: 'Zoe'}, {name: 'Alexander'}, {name: 'Jenny'}, {name: 'Lisa'}]);\nconsole.log(sorted);"
    },
    {
        "instruction": "Develop a Python script that finds the longest consecutive sequence of a given character in a string.",
        "input": "character: 'a', string: 'aabaaabaaa'",
        "response": "def longest_consecutive_char(char, s):\n    count = 0\n    max_count = 0\n    \n    for c in s:\n        if c == char:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    \n    return max(count, max_count)\n\nresult = longest_consecutive_char('a', 'aabaaabaaa')\nprint(result)",
        "output": "def longest_consecutive_char(char, s):\n    count = 0\n    max_count = 0\n    \n    for c in s:\n        if c == char:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    \n    return max(count, max_count)\n\nresult = longest_consecutive_char('a', 'aabaaabaaa')\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function that reverses the words in a sentence while keeping their original order.",
        "input": "sentence: 'I am a JavaScript developer'",
        "response": "function reverseWords(sentence) {\n    return sentence.split(' ').map(word => word.split('').reverse().join('')).join(' ');}\n\nconst reversedSentence = reverseWords('I am a JavaScript developer');\nconsole.log(reversedSentence);",
        "output": "function reverseWords(sentence) {\n    return sentence.split(' ').map(word => word.split('').reverse().join('')).join(' ');}\n\nconst reversedSentence = reverseWords('I am a JavaScript developer');\nconsole.log(reversedSentence);"
    },
    {
        "instruction": "Write a C++ function that checks if a number is prime and returns a Boolean as a result.",
        "input": "number: 7",
        "response": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int number = 7;\n    bool result = is_prime(number);\n    std::cout << result;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int number = 7;\n    bool result = is_prime(number);\n    std::cout << result;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a shell script that computes the factorial of a given input number?",
        "input": "number: 5",
        "response": "#!/bin/bash\n\nfactorial() {\n    local n=$1\n    if [ $n -le 1 ]; then\n        echo 1\n    else\n        echo $(( n * $(factorial $((n - 1))) ))\n    fi}\n\nnumber=5\nresult=$(factorial $number)\necho $result",
        "output": "#!/bin/bash\n\nfactorial() {\n    local n=$1\n    if [ $n -le 1 ]; then\n        echo 1\n    else\n        echo $(( n * $(factorial $((n - 1))) ))\n    fi}\n\nnumber=5\nresult=$(factorial $number)\necho $result"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a positive integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Bash script that counts the number of lines containing a specific word in a file?",
        "input": "word: 'error', file: 'log.txt'",
        "response": "#!/bin/bash\n\nword='error'\nfile='log.txt'\n\ncount=$(grep -c -w \"$word\" \"$file\")\necho \"The word '$word' appears in $count lines in the file '$file'.\"",
        "output": "#!/bin/bash\n\nword='error'\nfile='log.txt'\n\ncount=$(grep -c -w \"$word\" \"$file\")\necho \"The word '$word' appears in $count lines in the file '$file'.\""
    },
    {
        "instruction": "Create a Java function that determines if a given number is prime.",
        "input": "13",
        "response": "public class PrimeChecker {\n    public static void main(String[] args) {\n        int num = 13;\n        System.out.println(isPrime(num) ? num + \" is prime.\" : num + \" is not prime.\");\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }}",
        "output": "public class PrimeChecker {\n    public static void main(String[] args) {\n        int num = 13;\n        System.out.println(isPrime(num) ? num + \" is prime.\" : num + \" is not prime.\");\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }}"
    },
    {
        "instruction": "Construct a Python script to read a CSV file and output the average of values in a specific column.",
        "input": "csv_file: 'data.csv', column: 'score'",
        "response": "import csv\n\ndef average_of_column(file_name, column_name):\n    sum_values = 0\n    count = 0\n\n    with open(file_name, 'r') as csv_file:\n        reader = csv.DictReader(csv_file)\n        for row in reader:\n            sum_values += float(row[column_name])\n            count += 1\n\n    return sum_values / count if count > 0 else 0\n\ncsv_file = 'data.csv'\ncolumn = 'score'\naverage = average_of_column(csv_file, column)\nprint(f'Average of {column} values in the {csv_file} is {average}')",
        "output": "import csv\n\ndef average_of_column(file_name, column_name):\n    sum_values = 0\n    count = 0\n\n    with open(file_name, 'r') as csv_file:\n        reader = csv.DictReader(csv_file)\n        for row in reader:\n            sum_values += float(row[column_name])\n            count += 1\n\n    return sum_values / count if count > 0 else 0\n\ncsv_file = 'data.csv'\ncolumn = 'score'\naverage = average_of_column(csv_file, column)\nprint(f'Average of {column} values in the {csv_file} is {average}')"
    },
    {
        "instruction": "Implement a C# method that accepts a string and returns the number of vowels in that string.",
        "input": "input: 'Hello, World!'",
        "response": "using System;\nusing System.Linq;\n\npublic class VowelCounter\n{\n    public static int CountVowels(string input)\n    {\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        return input.ToLower().Count(c => vowels.Contains(c));\n    }}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int vowelCount = VowelCounter.CountVowels('Hello, World!');\n        Console.WriteLine(vowelCount);\n    }}",
        "output": "using System;\nusing System.Linq;\n\npublic class VowelCounter\n{\n    public static int CountVowels(string input)\n    {\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        return input.ToLower().Count(c => vowels.Contains(c));\n    }}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int vowelCount = VowelCounter.CountVowels('Hello, World!');\n        Console.WriteLine(vowelCount);\n    }}"
    },
    {
        "instruction": "What code would you use to reverse the order of the elements in an array in Python?",
        "input": "input: [5, 7, 3, 9, 1]",
        "response": "def reverse_array(arr):\n    return arr[::-1]\n\ninput_array = [5, 7, 3, 9, 1]\nreversed_array = reverse_array(input_array)\nprint(reversed_array)",
        "output": "def reverse_array(arr):\n    return arr[::-1]\n\ninput_array = [5, 7, 3, 9, 1]\nreversed_array = reverse_array(input_array)\nprint(reversed_array)"
    },
    {
        "instruction": "Construct a JavaScript snippet that uses the Fetch API to obtain data from an external API and outputs the results.",
        "input": "API Endpoint: 'https://jsonplaceholder.typicode.com/todos/1'",
        "response": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => {\n        console.log('Data:', data);\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });",
        "output": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => {\n        console.log('Data:', data);\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });"
    },
    {
        "instruction": "Implement a Java class for a simple stack with push and pop methods.",
        "input": "push(1), push(2), push(3), pop(), push(4)",
        "response": "public class SimpleStack {\n    private List<Integer> stack;\n\n    public SimpleStack() {\n        stack = new ArrayList<>();\n    }\n\n    public void push(int value) {\n        stack.add(value);\n    }\n\n    public int pop() throws NoSuchElementException {\n        if (stack.isEmpty()) {\n            throw new NoSuchElementException('Stack is empty.');\n        }\n        int value = stack.get(stack.size() - 1);\n        stack.remove(stack.size() - 1);\n        return value;\n    }}\n\nclass Demo {\n    public static void main(String[] args) {\n        SimpleStack stack = new SimpleStack();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        System.out.println(stack.pop());\n        stack.push(4);\n    }}",
        "output": "public class SimpleStack {\n    private List<Integer> stack;\n\n    public SimpleStack() {\n        stack = new ArrayList<>();\n    }\n\n    public void push(int value) {\n        stack.add(value);\n    }\n\n    public int pop() throws NoSuchElementException {\n        if (stack.isEmpty()) {\n            throw new NoSuchElementException('Stack is empty.');\n        }\n        int value = stack.get(stack.size() - 1);\n        stack.remove(stack.size() - 1);\n        return value;\n    }}\n\nclass Demo {\n    public static void main(String[] args) {\n        SimpleStack stack = new SimpleStack();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        System.out.println(stack.pop());\n        stack.push(4);\n    }}"
    },
    {
        "instruction": "Design a C++ function that accepts a vector of integers and sorts the vector in ascending order using the bubble sort algorithm.",
        "input": "std::vector<int> v = {34, 12, 65, 2, 99, 7};",
        "response": "void bubbleSort(std::vector<int>& v) {\n    bool swapped;\n    for (size_t i = 0; i < v.size() - 1; ++i) {\n        swapped = false;\n        for (size_t j = 0; j < v.size() - i - 1; ++j) {\n            if (v[j] > v[j + 1]) {\n                std::swap(v[j], v[j + 1]);\n                swapped = true;\n            }\n        }\n        if (!swapped) break;\n    }}\n\nstd::vector<int> v = {34, 12, 65, 2, 99, 7};\nbubbleSort(v);",
        "output": "void bubbleSort(std::vector<int>& v) {\n    bool swapped;\n    for (size_t i = 0; i < v.size() - 1; ++i) {\n        swapped = false;\n        for (size_t j = 0; j < v.size() - i - 1; ++j) {\n            if (v[j] > v[j + 1]) {\n                std::swap(v[j], v[j + 1]);\n                swapped = true;\n            }\n        }\n        if (!swapped) break;\n    }}\n\nstd::vector<int> v = {34, 12, 65, 2, 99, 7};\nbubbleSort(v);"
    },
    {
        "instruction": "What's a Perl script that reads a CSV file and prints the first column of each row?",
        "input": "CSV file contents: \nfirst_name,last_name,email\nJohn,Doe,john.doe@example.com\nJane,Smith,jane.smith@example.com",
        "response": "use strict;\nuse warnings;\nuse Text::CSV;\n\nmy $csv = Text::CSV->new();\n\nopen my $fh, '<', 'input.csv' or die $!;\n\nwhile (my $row = $csv->getline($fh)) {\n    print $row->[0], \"\n\";}\n\nclose $fh;",
        "output": "use strict;\nuse warnings;\nuse Text::CSV;\n\nmy $csv = Text::CSV->new();\n\nopen my $fh, '<', 'input.csv' or die $!;\n\nwhile (my $row = $csv->getline($fh)) {\n    print $row->[0], \"\n\";}\n\nclose $fh;"
    },
    {
        "instruction": "Write a Bash script to sum a list of integers separated by spaces given as command line arguments.",
        "input": "3 5 1 7 2",
        "response": "#!/bin/bash\n\ntotal=0\nfor num in \"$@\"\ndo\n    total=$((total + num))\ndone\n\necho \"Sum: $total\"",
        "output": "#!/bin/bash\n\ntotal=0\nfor num in \"$@\"\ndo\n    total=$((total + num))\ndone\n\necho \"Sum: $total\""
    },
    {
        "instruction": "How to implement a Node.js server with Express that listens to a 'GET' request at '/users' and returns a JSON object containing a list of users?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\n\nconst users = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n];\n\napp.get('/users', (req, res) => {\n    res.json(users);});\n\nconst port = 3000;\napp.listen(port, () => {\n    console.log(`Server started and listening on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\n\nconst users = [\n    { id: 1, name: 'Alice' },\n    { id: 2, name: 'Bob' },\n];\n\napp.get('/users', (req, res) => {\n    res.json(users);});\n\nconst port = 3000;\napp.listen(port, () => {\n    console.log(`Server started and listening on port ${port}`);});"
    },
    {
        "instruction": "Write a C++ program that takes an integer n as input and prints the sum of first n natural numbers.",
        "input": "10",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n    cout << \"Enter the value of n: \";\n    cin >> n;\n\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n\n    cout << \"Sum of first \" << n << \" natural numbers is: \" << sum << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n    cout << \"Enter the value of n: \";\n    cin >> n;\n\n    for (int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n\n    cout << \"Sum of first \" << n << \" natural numbers is: \" << sum << endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a JavaScript function to sort an array of numbers in ascending order and provide an example of its usage.",
        "input": "[34, 6, 92, 15, 74]",
        "response": "function sortArray(arr) {\n    return arr.sort((a, b) => a - b);}\n\nconst sortedArray = sortArray([34, 6, 92, 15, 74]);\nconsole.log(sortedArray);",
        "output": "function sortArray(arr) {\n    return arr.sort((a, b) => a - b);}\n\nconst sortedArray = sortArray([34, 6, 92, 15, 74]);\nconsole.log(sortedArray);"
    },
    {
        "instruction": "In Python, provide a function to calculate the factorial of a given positive integer n and demonstrate its use with an input example.",
        "input": "5",
        "response": "def factorial(n):\n    return 1 if n == 0 or n == 1 else n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    return 1 if n == 0 or n == 1 else n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Create a Bash script that takes a directory path as an argument and lists all files in the directory. Include sample input to demonstrate your script.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndirectory=$1\nif [[ -d $directory ]]; then\n    echo \"Files in $directory:\"\n    for file in \"$directory\"/*; do\n        echo \"$(basename \"$file\")\"\n    done\nelse\n    echo \"Invalid directory\"\nfi\n\n# Save the script in a file called list_files.sh and make it executable with 'chmod +x list_files.sh'\n# Then run it with './list_files.sh /home/user/documents'",
        "output": "#!/bin/bash\n\ndirectory=$1\nif [[ -d $directory ]]; then\n    echo \"Files in $directory:\"\n    for file in \"$directory\"/*; do\n        echo \"$(basename \"$file\")\"\n    done\nelse\n    echo \"Invalid directory\"\nfi\n\n# Save the script in a file called list_files.sh and make it executable with 'chmod +x list_files.sh'\n# Then run it with './list_files.sh /home/user/documents'"
    },
    {
        "instruction": "Implement a Python function that takes a list of strings and counts the occurrences of a specific character in each string. The function should return a dictionary where keys represent the input strings and values represent the counts.",
        "input": "['apple', 'banana', 'pear'], 'a'",
        "response": "def count_char_in_list(strings, char):\n    result = {}\n    for string in strings:\n        count = string.count(char)\n        result[string] = count\n    return result\n\ninput_list = ['apple', 'banana', 'pear']\ntarget_char = 'a'\noutput_dict = count_char_in_list(input_list, target_char)\nprint(output_dict)",
        "output": "def count_char_in_list(strings, char):\n    result = {}\n    for string in strings:\n        count = string.count(char)\n        result[string] = count\n    return result\n\ninput_list = ['apple', 'banana', 'pear']\ntarget_char = 'a'\noutput_dict = count_char_in_list(input_list, target_char)\nprint(output_dict)"
    },
    {
        "instruction": "In C++, write a program that finds the smallest number among three entered integers, and displays the result in the console.",
        "input": "8, 5, 2",
        "response": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int a = 8, b = 5, c = 2;\n    int minVal = min({a, b, c});\n    cout << \"Smallest number is: \" << minVal << endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int a = 8, b = 5, c = 2;\n    int minVal = min({a, b, c});\n    cout << \"Smallest number is: \" << minVal << endl;\n    return 0;}"
    },
    {
        "instruction": "How can I generate a JavaScript code that removes duplicates from an input array?",
        "input": "[8, 3, 8, 2, 3]",
        "response": "function removeDuplicates(arr) {\n    return [...new Set(arr)];}\n\nconst inputArray = [8, 3, 8, 2, 3];\nconst uniqueArray = removeDuplicates(inputArray);\nconsole.log(uniqueArray);",
        "output": "function removeDuplicates(arr) {\n    return [...new Set(arr)];}\n\nconst inputArray = [8, 3, 8, 2, 3];\nconst uniqueArray = removeDuplicates(inputArray);\nconsole.log(uniqueArray);"
    },
    {
        "instruction": "Create a Shell script that takes a file as an argument and counts the number of lines in the file.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfile_name=\"file.txt\"\nnumber_of_lines=$(wc -l < \"$file_name\")\necho \"Number of lines in $file_name: $number_of_lines\"",
        "output": "#!/bin/bash\n\nfile_name=\"file.txt\"\nnumber_of_lines=$(wc -l < \"$file_name\")\necho \"Number of lines in $file_name: $number_of_lines\""
    },
    {
        "instruction": "Write a Python function that accepts a string and returns a dictionary containing the count of each unique word in the string.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "def word_counter(text):\n    words = text.split()\n    word_count_dict = {}\n\n    for word in words:\n        if word.lower() in word_count_dict:\n            word_count_dict[word.lower()] += 1\n        else:\n            word_count_dict[word.lower()] = 1\n    return word_count_dict\n\ninput_text = 'The quick brown fox jumps over the lazy dog'\nresult = word_counter(input_text)\nprint(result)",
        "output": "def word_counter(text):\n    words = text.split()\n    word_count_dict = {}\n\n    for word in words:\n        if word.lower() in word_count_dict:\n            word_count_dict[word.lower()] += 1\n        else:\n            word_count_dict[word.lower()] = 1\n    return word_count_dict\n\ninput_text = 'The quick brown fox jumps over the lazy dog'\nresult = word_counter(input_text)\nprint(result)"
    },
    {
        "instruction": "How can you implement a shell script to list all the directories in the current working directory?",
        "input": "",
        "response": "#!/bin/bash\n\nfor dir in */\ndo\n    echo ${dir%/}\ndone",
        "output": "#!/bin/bash\n\nfor dir in */\ndo\n    echo ${dir%/}\ndone"
    },
    {
        "instruction": "Develop a C++ program that takes a user-provided integer N and computes the sum of all the even numbers between 1 and N (inclusive).",
        "input": "10",
        "response": "#include<iostream>\n\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n\n    cout << \"Enter a number: \";\n    cin >> n;\n\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n\n    cout << \"Sum of even numbers between 1 and \" << n << \": \" << sum << endl;\n    return 0;}",
        "output": "#include<iostream>\n\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n\n    cout << \"Enter a number: \";\n    cin >> n;\n\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n\n    cout << \"Sum of even numbers between 1 and \" << n << \": \" << sum << endl;\n    return 0;}"
    },
    {
        "instruction": "Construct a JavaScript function that takes an HTML form with an id attribute \"myForm\" and submits its data to a specified URL using the Fetch API.",
        "input": "<form id=\"myForm\"><input name=\"myData\" value=\"testdata\"><button type=\"submit\">Submit</button></form>",
        "response": "document.getElementById('myForm').addEventListener('submit', async (event) => {\n    event.preventDefault();\n\n    const formData = new FormData(event.target);\n    const url = 'https://yoururlhere.com/submit-data';\n\n    const response = await fetch(url, {\n        method: 'POST',\n        body: formData\n    });\n\n    if (response.ok) {\n        console.log('Form data submitted successfully');\n    } else {\n        console.log('There was an issue submitting the form data');\n    }});",
        "output": "document.getElementById('myForm').addEventListener('submit', async (event) => {\n    event.preventDefault();\n\n    const formData = new FormData(event.target);\n    const url = 'https://yoururlhere.com/submit-data';\n\n    const response = await fetch(url, {\n        method: 'POST',\n        body: formData\n    });\n\n    if (response.ok) {\n        console.log('Form data submitted successfully');\n    } else {\n        console.log('There was an issue submitting the form data');\n    }});"
    },
    {
        "instruction": "Implement a PHP function that removes duplicates from an array and returns the unique elements.",
        "input": "[1, 2, 3, 2, 1]",
        "response": "<?php\n\nfunction remove_duplicates($arr) {\n    return array_unique($arr);}\n\n$input_array = array(1, 2, 3, 2, 1);\n$result = remove_duplicates($input_array);\nprint_r($result);\n\n?>",
        "output": "<?php\n\nfunction remove_duplicates($arr) {\n    return array_unique($arr);}\n\n$input_array = array(1, 2, 3, 2, 1);\n$result = remove_duplicates($input_array);\nprint_r($result);\n\n?>"
    },
    {
        "instruction": "How would you write a simple HTTP server with a single endpoint in Node.js that responds to a GET request with a 'Hello, World!' message?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    if (req.method === 'GET' && req.url === '/hello') {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('Hello, World!');\n    } else {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('Not Found');\n    }});\n\nconst PORT = 3000;\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    if (req.method === 'GET' && req.url === '/hello') {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('Hello, World!');\n    } else {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('Not Found');\n    }});\n\nconst PORT = 3000;\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);});"
    },
    {
        "instruction": "In Swift, write a function that checks if a given year is a leap year or not.",
        "input": "2024",
        "response": "func isLeapYear(year: Int) -> Bool {\n    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))}\n\nlet year = 2024\nlet leapYearStatus = isLeapYear(year: year)\nprint(\"Year \\(year) is\\(leapYearStatus ? \"\" : \" not\") a leap year.\")",
        "output": "func isLeapYear(year: Int) -> Bool {\n    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))}\n\nlet year = 2024\nlet leapYearStatus = isLeapYear(year: year)\nprint(\"Year \\(year) is\\(leapYearStatus ? \"\" : \" not\") a leap year.\")"
    },
    {
        "instruction": "Write a C++ function that computes the factorial of a given non-negative integer.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Develop a Python script that reads a text file line by line and prints the reversed lines.",
        "input": "file.txt containing the lines: Hello\nWorld\nOf\nCode",
        "response": "with open('file.txt', 'r') as file:\n    for line in file:\n        reversed_line = line.strip()[::-1]\n        print(reversed_line)",
        "output": "with open('file.txt', 'r') as file:\n    for line in file:\n        reversed_line = line.strip()[::-1]\n        print(reversed_line)"
    },
    {
        "instruction": "How would you implement a function in JavaScript to find the smallest common multiple between two numbers?",
        "input": "12, 15",
        "response": "function gcd(a, b) {\n    if (b === 0) {\n        return a;\n    }\n    return gcd(b, a % b);}\n\nfunction lcm(a, b) {\n    return a * b / gcd(a, b);}\n\nconst num1 = 12;\nconst num2 = 15;\nconsole.log('LCM of', num1, 'and', num2, 'is:', lcm(num1, num2));",
        "output": "function gcd(a, b) {\n    if (b === 0) {\n        return a;\n    }\n    return gcd(b, a % b);}\n\nfunction lcm(a, b) {\n    return a * b / gcd(a, b);}\n\nconst num1 = 12;\nconst num2 = 15;\nconsole.log('LCM of', num1, 'and', num2, 'is:', lcm(num1, num2));"
    },
    {
        "instruction": "Construct a shell script that finds all files larger than a specific size and moves them to a specified directory.",
        "input": "100K, /path/to/move",
        "response": "#!/bin/bash\n\nmin_size='100K'\ntarget_dir='/path/to/move'\n\nfind . -type f -size +$min_size -exec mv {} $target_dir \\;",
        "output": "#!/bin/bash\n\nmin_size='100K'\ntarget_dir='/path/to/move'\n\nfind . -type f -size +$min_size -exec mv {} $target_dir \\;"
    },
    {
        "instruction": "Design a C++ program that calculates the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long int factorial(unsigned int n) {\n    if (n == 0)\n        return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long int factorial(unsigned int n) {\n    if (n == 0)\n        return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you perform user input validation in a Python script? Write a function that takes user input for a person's age and ensures the input is a valid age.",
        "input": "23",
        "response": "def input_age():\n    while True:\n        try:\n            age = int(input('Enter your age: '))\n        except ValueError:\n            print('Invalid input. Please enter a valid number.')\n            continue\n        if age < 0 or age > 120:\n            print('Age must be between 0 and 120.')\n            continue\n        return age\n\n\nage = input_age()\nprint(f'You entered: {age}')",
        "output": "def input_age():\n    while True:\n        try:\n            age = int(input('Enter your age: '))\n        except ValueError:\n            print('Invalid input. Please enter a valid number.')\n            continue\n        if age < 0 or age > 120:\n            print('Age must be between 0 and 120.')\n            continue\n        return age\n\n\nage = input_age()\nprint(f'You entered: {age}')"
    },
    {
        "instruction": "Create a Java function that takes an ArrayList of integers and returns the sum of squares for all elements greater than 10.",
        "input": "[3, 12, 8, 22, 5]",
        "response": "import java.util.ArrayList;\n\nclass SumOfSquares {\n    public static int sumSquares(ArrayList<Integer> numbers) {\n        int sum = 0;\n        for (int num : numbers) {\n            if (num > 10) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        nums.add(3);\n        nums.add(12);\n        nums.add(8);\n        nums.add(22);\n        nums.add(5);\n\n        int sum = sumSquares(nums);\n        System.out.println(\"Sum of squares: \" + sum);\n    }\n}",
        "output": "import java.util.ArrayList;\n\nclass SumOfSquares {\n    public static int sumSquares(ArrayList<Integer> numbers) {\n        int sum = 0;\n        for (int num : numbers) {\n            if (num > 10) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n        nums.add(3);\n        nums.add(12);\n        nums.add(8);\n        nums.add(22);\n        nums.add(5);\n\n        int sum = sumSquares(nums);\n        System.out.println(\"Sum of squares: \" + sum);\n    }\n}"
    },
    {
        "instruction": "Implement a shell script that finds all .txt files in a directory and its subdirectories, and moves them to a specified destination folder.",
        "input": "/home/user/documents, /home/user/txt_files",
        "response": "#!/bin/sh\n\nsrc=\"/home/user/documents\"\ndest=\"/home/user/txt_files\"\n\nfind \"$src\" -type f -iname '*.txt' -exec cp -v --parents --target-directory=\"$dest\" '{}' +\n\n# Optional: Uncomment the following line to delete the original .txt files after moving\n# find \"$src\" -type f -iname '*.txt' -exec rm '{}' +",
        "output": "#!/bin/sh\n\nsrc=\"/home/user/documents\"\ndest=\"/home/user/txt_files\"\n\nfind \"$src\" -type f -iname '*.txt' -exec cp -v --parents --target-directory=\"$dest\" '{}' +\n\n# Optional: Uncomment the following line to delete the original .txt files after moving\n# find \"$src\" -type f -iname '*.txt' -exec rm '{}' +"
    },
    {
        "instruction": "How would you write a shell script that counts the number of lines in a text file?",
        "input": "sample.txt",
        "response": "#!/bin/bash\nfilename=\"sample.txt\"\nline_count=$(wc -l < \"$filename\")\necho \"Total lines in $filename: $line_count\"",
        "output": "#!/bin/bash\nfilename=\"sample.txt\"\nline_count=$(wc -l < \"$filename\")\necho \"Total lines in $filename: $line_count\""
    },
    {
        "instruction": "Design a SQL query to retrieve a list of employee names and their respective department names from two tables, 'employees' and 'departments'.",
        "input": "Employees: id, first_name, last_name, department_id. Departments: id, department_name",
        "response": "SELECT employees.first_name, employees.last_name, departments.department_name\nFROM employees\nINNER JOIN departments ON employees.department_id = departments.id;",
        "output": "SELECT employees.first_name, employees.last_name, departments.department_name\nFROM employees\nINNER JOIN departments ON employees.department_id = departments.id;"
    },
    {
        "instruction": "Create a PHP script that reads data from a JSON file and outputs the content in a formatted and readable manner.",
        "input": "{\"name\":\"John Doe\",\"age\":30,\"city\":\"New York\"}",
        "response": "<?php\n$json_filename = 'data.json';\n$json_data = file_get_contents($json_filename);\n$data = json_decode($json_data, true);\n\necho '<pre>';\nprint_r($data);\necho '</pre>';\n?>",
        "output": "<?php\n$json_filename = 'data.json';\n$json_data = file_get_contents($json_filename);\n$data = json_decode($json_data, true);\n\necho '<pre>';\nprint_r($data);\necho '</pre>';\n?>"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a non-negative integer.",
        "input": "4",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 4;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 4;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}"
    },
    {
        "instruction": "Write a shell script that counts the number of lines in a given text file.",
        "input": "filename.txt",
        "response": "#!/bin/bash\n\nfilename=\"filename.txt\"\nlines=$(wc -l < \"$filename\")\necho \"There are $lines lines in $filename\"",
        "output": "#!/bin/bash\n\nfilename=\"filename.txt\"\nlines=$(wc -l < \"$filename\")\necho \"There are $lines lines in $filename\""
    },
    {
        "instruction": "How would you create a Python script to extract and print every other word from a given sentence?",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "def print_every_other_word(sentence):\n    words = sentence.split()\n    for i in range(0, len(words), 2):\n        print(words[i])\n\ninput_sentence = \"The quick brown fox jumps over the lazy dog\"\nprint_every_other_word(input_sentence)",
        "output": "def print_every_other_word(sentence):\n    words = sentence.split()\n    for i in range(0, len(words), 2):\n        print(words[i])\n\ninput_sentence = \"The quick brown fox jumps over the lazy dog\"\nprint_every_other_word(input_sentence)"
    },
    {
        "instruction": "Construct a JavaScript function that compares two strings for case-insensitive alphabetical order and returns the one that comes first.",
        "input": "\"helLo WoRLd\", \"JavaScript\"",
        "response": "function compareStringsCaseInsensitive(str1, str2) {\n    const result = str1.localeCompare(str2, undefined, { sensitivity: 'base' });\n    return result < 0 ? str1 : str2;}\n\nconst a = \"helLo WoRLd\";\nconst b = \"JavaScript\";\n\nconsole.log(compareStringsCaseInsensitive(a, b));",
        "output": "function compareStringsCaseInsensitive(str1, str2) {\n    const result = str1.localeCompare(str2, undefined, { sensitivity: 'base' });\n    return result < 0 ? str1 : str2;}\n\nconst a = \"helLo WoRLd\";\nconst b = \"JavaScript\";\n\nconsole.log(compareStringsCaseInsensitive(a, b));"
    },
    {
        "instruction": "Develop a C++ program to prompt the user to enter two integers and compare them, outputting if they are equal or not.",
        "input": "12, 13",
        "response": "#include <iostream>\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n    if(num1 == num2) {\n        std::cout << \"The two numbers are equal.\";\n    } else {\n        std::cout << \"The two numbers are not equal.\";\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n    if(num1 == num2) {\n        std::cout << \"The two numbers are equal.\";\n    } else {\n        std::cout << \"The two numbers are not equal.\";\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python script to download an image from a given URL and save it to the local disk with a specified file name.",
        "input": "\"https://example.com/image.jpg\", \"saved_image.jpg\"",
        "response": "import requests\n\nurl = \"https://example.com/image.jpg\"\nfilename = \"saved_image.jpg\"\n\nresponse = requests.get(url, stream=True)\nresponse.raise_for_status()\n\nwith open(filename, 'wb') as file:\n    for chunk in response.iter_content(chunk_size=8192):\n        file.write(chunk)",
        "output": "import requests\n\nurl = \"https://example.com/image.jpg\"\nfilename = \"saved_image.jpg\"\n\nresponse = requests.get(url, stream=True)\nresponse.raise_for_status()\n\nwith open(filename, 'wb') as file:\n    for chunk in response.iter_content(chunk_size=8192):\n        file.write(chunk)"
    },
    {
        "instruction": "Can you write a JavaScript function to check if an email address is in the proper format using regular expressions?",
        "input": "\"johndoe@example.com\"",
        "response": "function validateEmail(email) {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(email);\n}\n\nconsole.log(validateEmail(\"johndoe@example.com\"));",
        "output": "function validateEmail(email) {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return regex.test(email);\n}\n\nconsole.log(validateEmail(\"johndoe@example.com\"));"
    },
    {
        "instruction": "Write a Bash script that receives a list of arguments and prints the total number of arguments and the last argument entered.",
        "input": "\"arg1\", \"arg2\", \"arg3\"",
        "response": "#!/bin/bash\n\ncount=$#\nlast_arg=${!count}\necho \"Total number of arguments: $count\"\necho \"Last argument: $last_arg\"\n\n#Usage: Save the script as 'count_args.sh' and run with './count_args.sh arg1 arg2 arg3'",
        "output": "#!/bin/bash\n\ncount=$#\nlast_arg=${!count}\necho \"Total number of arguments: $count\"\necho \"Last argument: $last_arg\"\n\n#Usage: Save the script as 'count_args.sh' and run with './count_args.sh arg1 arg2 arg3'"
    },
    {
        "instruction": "Write a Python function that receives a list of words and returns a dictionary with the frequency of each word.",
        "input": "['apple', 'banana', 'apple', 'orange', 'banana', 'apple']",
        "response": "def word_frequencies(words):\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\nresult = word_frequencies(words)\nprint(result)",
        "output": "def word_frequencies(words):\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\nresult = word_frequencies(words)\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function to calculate and return the area of a triangle given its base and height.",
        "input": "10, 5",
        "response": "function triangleArea(base, height) {\n    return 0.5 * base * height;}\n\nconst base = 10;\nconst height = 5;\nconst area = triangleArea(base, height);\nconsole.log(area);",
        "output": "function triangleArea(base, height) {\n    return 0.5 * base * height;}\n\nconst base = 10;\nconst height = 5;\nconst area = triangleArea(base, height);\nconsole.log(area);"
    },
    {
        "instruction": "Debug the following C++ code snippet which is meant to compute the factorial of a number.",
        "input": "#include <iostream>\nusing namespace std;\nint main() {\nint num = 5;\nint factorial = 1;\nfor (int i = 0; i <= num; ++i) {\nfactorial *= i;\n}\ncout << \"Factorial of \" << num << \" is: \" << factorial << endl;\nreturn 0;\n}",
        "response": "#include <iostream>\nusing namespace std;\nint main() {\nint num = 5;\nint factorial = 1;\nfor (int i = 1; i <= num; ++i) {\nfactorial *= i;\n}\ncout << \"Factorial of \" << num << \" is: \" << factorial << endl;\nreturn 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\nint main() {\nint num = 5;\nint factorial = 1;\nfor (int i = 1; i <= num; ++i) {\nfactorial *= i;\n}\ncout << \"Factorial of \" << num << \" is: \" << factorial << endl;\nreturn 0;\n}"
    },
    {
        "instruction": "How would you implement a PHP function to reverse a string without using the built-in strrev() function?",
        "input": "'hello world'",
        "response": "<?php\nfunction reverse_string($str) {\n$reversed_str = '';\nfor ($i = strlen($str) - 1; $i >= 0; $i--) {\n$reversed_str .= $str[$i];\n}\nreturn $reversed_str;\n}\n\n$input = 'hello world';\n$output = reverse_string($input);\necho $output;\n?>",
        "output": "<?php\nfunction reverse_string($str) {\n$reversed_str = '';\nfor ($i = strlen($str) - 1; $i >= 0; $i--) {\n$reversed_str .= $str[$i];\n}\nreturn $reversed_str;\n}\n\n$input = 'hello world';\n$output = reverse_string($input);\necho $output;\n?>"
    },
    {
        "instruction": "Write a C++ function to find the n-th Fibonacci number using recursion.",
        "input": "10",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }}\n\nint main() {\n    int n = 10;\n    std::cout << fibonacci(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }}\n\nint main() {\n    int n = 10;\n    std::cout << fibonacci(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Using JavaScript, implement a simple debounce function that delays the invoking of a provided function after given milliseconds.",
        "input": "function () { console.log('Hello, Debounce!'); }, 500",
        "response": "function debounce(func, delay) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), delay);\n    };}\n\nconst debouncedHello = debounce(function() {\n    console.log('Hello, Debounce!');}, 500);",
        "output": "function debounce(func, delay) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), delay);\n    };}\n\nconst debouncedHello = debounce(function() {\n    console.log('Hello, Debounce!');}, 500);"
    },
    {
        "instruction": "Implement a PHP function that validates an email address using Regular Expression.",
        "input": "\"example@example.com\"",
        "response": "<?php\nfunction isValidEmail($email) {\n    $regex = '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/';\n    return preg_match($regex, $email);}\n\n$email = 'example@example.com';\n$result = isValidEmail($email);\necho $result ? 'Valid Email' : 'Invalid Email';\n?>",
        "output": "<?php\nfunction isValidEmail($email) {\n    $regex = '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/';\n    return preg_match($regex, $email);}\n\n$email = 'example@example.com';\n$result = isValidEmail($email);\necho $result ? 'Valid Email' : 'Invalid Email';\n?>"
    },
    {
        "instruction": "Can you write a shell script to download a file from given URL and save the file with a specific name?",
        "input": "https://example.com/file.txt, downloaded_file.txt",
        "response": "#!/bin/bash\n\nurl='https://example.com/file.txt'\noutput_file='downloaded_file.txt'\n\ncurl -L -o $output_file $url\n\necho 'File downloaded as' $output_file",
        "output": "#!/bin/bash\n\nurl='https://example.com/file.txt'\noutput_file='downloaded_file.txt'\n\ncurl -L -o $output_file $url\n\necho 'File downloaded as' $output_file"
    },
    {
        "instruction": "Implement a recursive function in C++ to compute the factorial of a given non-negative integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;}"
    },
    {
        "instruction": "How would you create a Python function that reverses a given list of integers?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def reverse_list(input_list):\n    return input_list[::-1]\n\ndata = [1, 2, 3, 4, 5]\nresult = reverse_list(data)\nprint(result)",
        "output": "def reverse_list(input_list):\n    return input_list[::-1]\n\ndata = [1, 2, 3, 4, 5]\nresult = reverse_list(data)\nprint(result)"
    },
    {
        "instruction": "Design a C# class for a simple calculator that supports addition, subtraction, multiplication, and division.",
        "input": "",
        "response": "public class SimpleCalculator {\n    public double Add(double a, double b) {\n        return a + b;\n    }\n\n    public double Subtract(double a, double b) {\n        return a - b;\n    }\n    \n    public double Multiply(double a, double b) {\n        return a * b;\n    }\n\n    public double Divide(double a, double b) {\n        if (b != 0) {\n            return a / b;\n        }\n        throw new ArgumentException(\"Division by zero not allowed\");\n    }}",
        "output": "public class SimpleCalculator {\n    public double Add(double a, double b) {\n        return a + b;\n    }\n\n    public double Subtract(double a, double b) {\n        return a - b;\n    }\n    \n    public double Multiply(double a, double b) {\n        return a * b;\n    }\n\n    public double Divide(double a, double b) {\n        if (b != 0) {\n            return a / b;\n        }\n        throw new ArgumentException(\"Division by zero not allowed\");\n    }}"
    },
    {
        "instruction": "Create a Bash script to count the number of lines in a given file.",
        "input": "file.txt",
        "response": "#!/bin/bash\nfilename=\"file.txt\"\nline_count=$(wc -l <\"$filename\")\necho \"Number of lines in $filename: $line_count\"",
        "output": "#!/bin/bash\nfilename=\"file.txt\"\nline_count=$(wc -l <\"$filename\")\necho \"Number of lines in $filename: $line_count\""
    },
    {
        "instruction": "Construct a Python script that shuffles the order of words in a given sentence, while maintaining the order of characters within each word.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "import random\n\ndef shuffle_words(sentence):\n    words = sentence.split()\n    random.shuffle(words)\n    return ' '.join(words)\n\nsentence = 'The quick brown fox jumps over the lazy dog'\nshuffled_sentence = shuffle_words(sentence)\nprint(shuffled_sentence)",
        "output": "import random\n\ndef shuffle_words(sentence):\n    words = sentence.split()\n    random.shuffle(words)\n    return ' '.join(words)\n\nsentence = 'The quick brown fox jumps over the lazy dog'\nshuffled_sentence = shuffle_words(sentence)\nprint(shuffled_sentence)"
    },
    {
        "instruction": "Can you write an SQL query that selects the top 10 highest-scoring users along with their scores from a 'users' table, assuming the table structure is (id INTEGER, name TEXT, score INTEGER)?",
        "input": "",
        "response": "SELECT name, score\nFROM users\nORDER BY score DESC\nLIMIT 10;",
        "output": "SELECT name, score\nFROM users\nORDER BY score DESC\nLIMIT 10;"
    },
    {
        "instruction": "Design a JavaScript function using Promises that reads the contents of a text file given a file path, and logs the total number of lines in the console.",
        "input": "example.txt",
        "response": "const fs = require('fs').promises;\n\nfunction countLines(filePath) {\n    return fs.readFile(filePath, 'utf-8')\n        .then(data => {\n            const lines = data.split('\\n');\n            console.log(`Total lines: ${lines.length}`);\n        })\n        .catch(err => {\n            console.error('Error reading file:', err);\n        });\n}\n\ncountLines('example.txt');",
        "output": "const fs = require('fs').promises;\n\nfunction countLines(filePath) {\n    return fs.readFile(filePath, 'utf-8')\n        .then(data => {\n            const lines = data.split('\\n');\n            console.log(`Total lines: ${lines.length}`);\n        })\n        .catch(err => {\n            console.error('Error reading file:', err);\n        });\n}\n\ncountLines('example.txt');"
    },
    {
        "instruction": "Design a C++ function that calculates the factorial of a given non-negative integer.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    cout << factorial(n) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    cout << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write an HTTP GET request in Python using the Requests library?",
        "input": "https://api.example.com/data",
        "response": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print(response.json())\nelse:\n    print('Error:', response.status_code)",
        "output": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print(response.json())\nelse:\n    print('Error:', response.status_code)"
    },
    {
        "instruction": "Implement a JavaScript function that reverses the words in a given sentence.",
        "input": "The quick brown fox",
        "response": "function reverseWords(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.map(word => word.split('').reverse().join(''));\n    return reversedWords.join(' ');}\n\nconst result = reverseWords('The quick brown fox');\nconsole.log(result);",
        "output": "function reverseWords(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.map(word => word.split('').reverse().join(''));\n    return reversedWords.join(' ');}\n\nconst result = reverseWords('The quick brown fox');\nconsole.log(result);"
    },
    {
        "instruction": "Fix the following SQL query to prevent SQL injection: SELECT name FROM students WHERE age = ?",
        "input": "26",
        "response": "-- Using PHP and MySQL as an example, with the PDO library:\n\n$age = 26;\n$sql = 'SELECT name FROM students WHERE age = :age';\n\ntry {\n    $stmt = $pdo->prepare($sql);\n    $stmt->bindParam(':age', $age, PDO::PARAM_INT);\n    $stmt->execute();\n\n    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        echo $row['name'] . '\\n';\n    }} catch (PDOException $e) {\n    echo 'Error: ' . $e->getMessage();}",
        "output": "-- Using PHP and MySQL as an example, with the PDO library:\n\n$age = 26;\n$sql = 'SELECT name FROM students WHERE age = :age';\n\ntry {\n    $stmt = $pdo->prepare($sql);\n    $stmt->bindParam(':age', $age, PDO::PARAM_INT);\n    $stmt->execute();\n\n    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        echo $row['name'] . '\\n';\n    }} catch (PDOException $e) {\n    echo 'Error: ' . $e->getMessage();}"
    },
    {
        "instruction": "Develop a C++ function that calculates n-th element of the Fibonacci sequence using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nint main() {\n    int n = 6;\n    std::cout << \"Fibonacci(\" << n << \") = \" << fibonacci(n);\n    return 0;}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nint main() {\n    int n = 6;\n    std::cout << \"Fibonacci(\" << n << \") = \" << fibonacci(n);\n    return 0;}"
    },
    {
        "instruction": "How would you write a C# method that reverses a string?",
        "input": "\"Hello, World!\"",
        "response": "using System;\n\nclass StringReverser {\n    public static string ReverseString(string input) {\n        char[] chars = input.ToCharArray();\n        Array.Reverse(chars);\n        return new string(chars);\n    }\n\n    public static void Main() {\n        string input = \"Hello, World!\";\n        string reversed = ReverseString(input);\n        Console.WriteLine(reversed);\n    }}",
        "output": "using System;\n\nclass StringReverser {\n    public static string ReverseString(string input) {\n        char[] chars = input.ToCharArray();\n        Array.Reverse(chars);\n        return new string(chars);\n    }\n\n    public static void Main() {\n        string input = \"Hello, World!\";\n        string reversed = ReverseString(input);\n        Console.WriteLine(reversed);\n    }}"
    },
    {
        "instruction": "Implement a bash script to count words in a given text file.",
        "input": "example.txt (contains 'This is an example text file for word counting.')",
        "response": "#!/bin/bash\n\n# Read file and store in a variable\nfileContent=$(cat example.txt)\n\n# Use awk utility to count the words\necho \"$fileContent\" | awk '{ wordCount += NF } END { print wordCount }'",
        "output": "#!/bin/bash\n\n# Read file and store in a variable\nfileContent=$(cat example.txt)\n\n# Use awk utility to count the words\necho \"$fileContent\" | awk '{ wordCount += NF } END { print wordCount }'"
    },
    {
        "instruction": "Please provide an example of SQL code to insert data into a table.",
        "input": "Table: users (id, name, email) \\n Values: (1, 'John Doe', 'john.doe@example.com')",
        "response": "INSERT INTO users (id, name, email)\nVALUES (1, 'John Doe', 'john.doe@example.com');",
        "output": "INSERT INTO users (id, name, email)\nVALUES (1, 'John Doe', 'john.doe@example.com');"
    },
    {
        "instruction": "Develop a C function that reverses an input string and prints the reversed string.",
        "input": "\"example\"",
        "response": "#include <stdio.h>\n#include <string.h>\n\nvoid reverse_string(char *str) {\n    int len = strlen(str);\n    for (int i = 0, j = len - 1; i < j; ++i, --j) {\n        char temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n    }\n}\n\nint main() {\n    char input[] = \"example\";\n    reverse_string(input);\n    printf(\"%s\\n\", input);\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <string.h>\n\nvoid reverse_string(char *str) {\n    int len = strlen(str);\n    for (int i = 0, j = len - 1; i < j; ++i, --j) {\n        char temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n    }\n}\n\nint main() {\n    char input[] = \"example\";\n    reverse_string(input);\n    printf(\"%s\\n\", input);\n    return 0;\n}"
    },
    {
        "instruction": "Write a Swift function that computes the Fibonacci sequence up to a specified number.",
        "input": "8",
        "response": "func fibonacci(n: Int) -> [Int] {\n    var sequence = [Int]()\n    var a = 0, b = 1\n    while sequence.count < n {\n        sequence.append(a)\n        let nextValue = a + b\n        a = b\n        b = nextValue\n    }\n    return sequence\n}\n\nlet result = fibonacci(n: 8)\nprint(result)",
        "output": "func fibonacci(n: Int) -> [Int] {\n    var sequence = [Int]()\n    var a = 0, b = 1\n    while sequence.count < n {\n        sequence.append(a)\n        let nextValue = a + b\n        a = b\n        b = nextValue\n    }\n    return sequence\n}\n\nlet result = fibonacci(n: 8)\nprint(result)"
    },
    {
        "instruction": "How would you create a dictionary in Python to store the frequency of each character in a given string?",
        "input": "\"abracadabra\"",
        "response": "def character_frequency(input_string):\n    frequency_dict = {}\n    for char in input_string:\n        if char in frequency_dict:\n            frequency_dict[char] += 1\n        else:\n            frequency_dict[char] = 1\n    return frequency_dict\n\nresult = character_frequency(\"abracadabra\")\nprint(result)",
        "output": "def character_frequency(input_string):\n    frequency_dict = {}\n    for char in input_string:\n        if char in frequency_dict:\n            frequency_dict[char] += 1\n        else:\n            frequency_dict[char] = 1\n    return frequency_dict\n\nresult = character_frequency(\"abracadabra\")\nprint(result)"
    },
    {
        "instruction": "Implement a JavaScript function to convert a given Unix timestamp to a human-readable date and time.",
        "input": "1618250391",
        "response": "function unixTimestampToHumanReadable(unixTimestamp) {\n    let dateTime = new Date(unixTimestamp * 1000);\n    return dateTime.toString();\n}\n\nlet timestamp = 1618250391;\nlet result = unixTimestampToHumanReadable(timestamp);\nconsole.log(result);",
        "output": "function unixTimestampToHumanReadable(unixTimestamp) {\n    let dateTime = new Date(unixTimestamp * 1000);\n    return dateTime.toString();\n}\n\nlet timestamp = 1618250391;\nlet result = unixTimestampToHumanReadable(timestamp);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C program that reads a text file and counts the number of lines in it.",
        "input": "filename.txt",
        "response": "#include <stdio.h>\n\nint main() {\n    FILE *file;\n    char ch;\n    int lines = 0;\n\n    file = fopen(\"filename.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Cannot open file\\n\");\n        return 0;\n    }\n    \n    while ((ch = fgetc(file)) != EOF) {\n        if (ch == '\\n') {\n            lines++;\n        }\n    }\n\n    fclose(file);\n\n    printf(\"Number of lines: %d\\n\", lines);\n\n    return 0;}",
        "output": "#include <stdio.h>\n\nint main() {\n    FILE *file;\n    char ch;\n    int lines = 0;\n\n    file = fopen(\"filename.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Cannot open file\\n\");\n        return 0;\n    }\n    \n    while ((ch = fgetc(file)) != EOF) {\n        if (ch == '\\n') {\n            lines++;\n        }\n    }\n\n    fclose(file);\n\n    printf(\"Number of lines: %d\\n\", lines);\n\n    return 0;}"
    },
    {
        "instruction": "What would be a Python code to calculate and display the factorial of a given integer?",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n-1)\n\nnum = 6\nresult = factorial(num)\nprint(f\"Factorial of {num}: {result}\")",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n-1)\n\nnum = 6\nresult = factorial(num)\nprint(f\"Factorial of {num}: {result}\")"
    },
    {
        "instruction": "Implement a JavaScript function to determine if a given number is prime or not.",
        "input": "13",
        "response": "function isPrime(num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;}\n\nconst number = 13;\nconst result = isPrime(number);\nconsole.log(`${number} is ${result ? \"prime\" : \"not prime\"}`);",
        "output": "function isPrime(num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;}\n\nconst number = 13;\nconst result = isPrime(number);\nconsole.log(`${number} is ${result ? \"prime\" : \"not prime\"}`);"
    },
    {
        "instruction": "Develop a recursive Java function to compute the nth Fibonacci number.",
        "input": "8",
        "response": "public class Fibonacci {\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n\n    public static void main(String[] args) {\n        int n = 8;\n        int result = fibonacci(n);\n        System.out.println(\"Fibonacci of \" + n + \": \" + result);\n    }}",
        "output": "public class Fibonacci {\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n\n    public static void main(String[] args) {\n        int n = 8;\n        int result = fibonacci(n);\n        System.out.println(\"Fibonacci of \" + n + \": \" + result);\n    }}"
    },
    {
        "instruction": "Implement a C++ program that reads the content of a text file and counts how many times a specific word appears.",
        "input": "textFile.txt, 'example'",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint count_word_occurrences(const std::string& file_path, const std::string& word) {\n    std::ifstream file(file_path);\n    std::string line;\n    int count = 0;\n\n    while (std::getline(file, line)) {\n        std::size_t pos = 0;\n        while ((pos = line.find(word, pos)) != std::string::npos) {\n            count++;\n            pos += word.length();\n        }\n    }\n\n    return count;}\n\nint main() {\n    std::string file_path = \"textFile.txt\";\n    std::string word = \"example\";\n\n    int occurrences = count_word_occurrences(file_path, word);\n    std::cout << \"The word '\" << word << \"' appears \" << occurrences << \" times in the file.\" << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint count_word_occurrences(const std::string& file_path, const std::string& word) {\n    std::ifstream file(file_path);\n    std::string line;\n    int count = 0;\n\n    while (std::getline(file, line)) {\n        std::size_t pos = 0;\n        while ((pos = line.find(word, pos)) != std::string::npos) {\n            count++;\n            pos += word.length();\n        }\n    }\n\n    return count;}\n\nint main() {\n    std::string file_path = \"textFile.txt\";\n    std::string word = \"example\";\n\n    int occurrences = count_word_occurrences(file_path, word);\n    std::cout << \"The word '\" << word << \"' appears \" << occurrences << \" times in the file.\" << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a Shell Script that loops through the files in the current directory and display the name of the files with '.txt' extension.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in ./*; do\n    if [ \"${file##*.}\" == \"txt\" ]; then\n        echo \"$(basename \"$file\")\"\n    fi\ndone",
        "output": "#!/bin/bash\n\nfor file in ./*; do\n    if [ \"${file##*.}\" == \"txt\" ]; then\n        echo \"$(basename \"$file\")\"\n    fi\ndone"
    },
    {
        "instruction": "How can I create a Python program that fetches data from an API and saves the response data into a CSV file?",
        "input": "https://jsonplaceholder.typicode.com/posts",
        "response": "import requests\nimport csv\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n\n    with open('data.csv', 'w', newline='') as csvfile:\n        fieldnames = ['userId', 'id', 'title', 'body']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        \n        for item in data:\n            writer.writerow(item)",
        "output": "import requests\nimport csv\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n\n    with open('data.csv', 'w', newline='') as csvfile:\n        fieldnames = ['userId', 'id', 'title', 'body']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        \n        for item in data:\n            writer.writerow(item)"
    },
    {
        "instruction": "Develop a JavaScript function that calculates the factorial of a given integer.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Create a C# function that takes a list of integers and filters out the even numbers, then returns the list of odd numbers.",
        "input": "List<int> numbers = new List<int> {1, 2, 3, 4, 5, 6, 7, 8, 9};",
        "response": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static List<int> FilterOddNumbers(List<int> numbers)\n{\n    return numbers.Where(num => num % 2 != 0).ToList();}\n\nList<int> oddNumbers = FilterOddNumbers(numbers);\nforeach (int number in oddNumbers)\n{\n    Console.WriteLine(number);}",
        "output": "using System.Collections.Generic;\nusing System.Linq;\n\npublic static List<int> FilterOddNumbers(List<int> numbers)\n{\n    return numbers.Where(num => num % 2 != 0).ToList();}\n\nList<int> oddNumbers = FilterOddNumbers(numbers);\nforeach (int number in oddNumbers)\n{\n    Console.WriteLine(number);}"
    },
    {
        "instruction": "Can you write a PHP script that reads a CSV file and outputs its content in an HTML table?",
        "input": "filename.csv",
        "response": "<?php\n$filename = 'filename.csv';\n$csvData = file_get_contents($filename);\n$rows = array_map('str_getcsv', explode('\\n', $csvData));\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>CSV to HTML Table</title>\n</head>\n<body>\n    <table border='1'>\n        <?php foreach ($rows as $row): ?>\n            <tr>\n                <?php foreach ($row as $cell): ?>\n                    <td><?= htmlspecialchars($cell) ?></td>\n                <?php endforeach ?>\n            </tr>\n        <?php endforeach ?>\n    </table>\n</body>\n</html>",
        "output": "<?php\n$filename = 'filename.csv';\n$csvData = file_get_contents($filename);\n$rows = array_map('str_getcsv', explode('\\n', $csvData));\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>CSV to HTML Table</title>\n</head>\n<body>\n    <table border='1'>\n        <?php foreach ($rows as $row): ?>\n            <tr>\n                <?php foreach ($row as $cell): ?>\n                    <td><?= htmlspecialchars($cell) ?></td>\n                <?php endforeach ?>\n            </tr>\n        <?php endforeach ?>\n    </table>\n</body>\n</html>"
    },
    {
        "instruction": "Write a JavaScript function that takes a callback and an array, applies the callback to each element of the array, and prints the result.",
        "input": "let numbers = [1, 2, 3, 4];\nfunction double(n) {\n    return n * 2;\n}",
        "response": "function mapAndPrint(arr, callback) {\n    for (let i = 0; i < arr.length; i++) {\n        console.log(callback(arr[i]));\n    }}\n\nmapAndPrint(numbers, double);",
        "output": "function mapAndPrint(arr, callback) {\n    for (let i = 0; i < arr.length; i++) {\n        console.log(callback(arr[i]));\n    }}\n\nmapAndPrint(numbers, double);"
    },
    {
        "instruction": "Please write a bash script that takes a directory path as input, counts the number of files in it, and outputs the result.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndir_path=$1\nfile_count=$(ls -l $dir_path | grep -v ^d | wc -l)\n\necho \"File count: $file_count\"\n\n# Usage: ./count_files.sh /home/user/documents",
        "output": "#!/bin/bash\n\ndir_path=$1\nfile_count=$(ls -l $dir_path | grep -v ^d | wc -l)\n\necho \"File count: $file_count\"\n\n# Usage: ./count_files.sh /home/user/documents"
    },
    {
        "instruction": "Write a Python function that receives a list of words and returns the longest word.",
        "input": "['apple', 'banana', 'cherry']",
        "response": "def find_longest_word(words_list):\n    longest_word = ''\n    for word in words_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nwords = ['apple', 'banana', 'cherry']\nresult = find_longest_word(words)\nprint(result)",
        "output": "def find_longest_word(words_list):\n    longest_word = ''\n    for word in words_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nwords = ['apple', 'banana', 'cherry']\nresult = find_longest_word(words)\nprint(result)"
    },
    {
        "instruction": "Design a JavaScript function that takes an integer and returns a function that adds the integer to its argument.",
        "input": "5",
        "response": "function addWith(num) {\n    return function(numToAdd) {\n        return num + numToAdd;\n    }}\n\nconst addWith5 = addWith(5);\nconsole.log(addWith5(3));",
        "output": "function addWith(num) {\n    return function(numToAdd) {\n        return num + numToAdd;\n    }}\n\nconst addWith5 = addWith(5);\nconsole.log(addWith5(3));"
    },
    {
        "instruction": "Develop a C++ program that calculates the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << 'Factorial of ' << num << ' is ' << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << 'Factorial of ' << num << ' is ' << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Can you write a shell script that receives a file name as an argument and prints its line count?",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfile_name=$1\nline_count=$(wc -l < $file_name)\necho 'Number of lines in ' $file_name ': ' $line_count",
        "output": "#!/bin/bash\n\nfile_name=$1\nline_count=$(wc -l < $file_name)\necho 'Number of lines in ' $file_name ': ' $line_count"
    },
    {
        "instruction": "Write a Python class representing a 2D point, including methods to calculate the distance between two points and to print the coordinates.",
        "input": "point1 = (3, 4), point2 = (6, 8)",
        "response": "import math\n\nclass Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, other):\n        return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n\npoint1 = Point2D(3, 4)\npoint2 = Point2D(6, 8)\nprint(point1.distance(point2))\nprint(point1)",
        "output": "import math\n\nclass Point2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, other):\n        return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n\npoint1 = Point2D(3, 4)\npoint2 = Point2D(6, 8)\nprint(point1.distance(point2))\nprint(point1)"
    },
    {
        "instruction": "How would you create a server using Node.js and Express that listens on port 3000 and returns 'Hello, World!' on the root route?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);});"
    },
    {
        "instruction": "Generate a C++ program that demonstrates the use of virtual functions to calculate the area of a rectangle and a circle.",
        "input": "Rectangle length: 5, width: 4, Circle radius: 8",
        "response": "#include <iostream>\n#include <cmath>\n\nclass Shape {\npublic:\n    virtual double area() = 0;};\n\nclass Rectangle : public Shape {\nprivate:\n    double length;\n    double width;\n\npublic:\n    Rectangle(double l, double w) : length(l), width(w) {}\n\n    double area() override {\n        return length * width;\n    }};\n\nclass Circle : public Shape {\nprivate:\n    double radius;\n\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() override {\n        return 3.14159 * pow(radius, 2);\n    }};\n\nint main() {\n    Rectangle rect(5, 4);\n    Circle circ(8);\n\n    std::cout << \"Rectangle area: \" << rect.area() << std::endl;\n    std::cout << \"Circle area: \" << circ.area() << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nclass Shape {\npublic:\n    virtual double area() = 0;};\n\nclass Rectangle : public Shape {\nprivate:\n    double length;\n    double width;\n\npublic:\n    Rectangle(double l, double w) : length(l), width(w) {}\n\n    double area() override {\n        return length * width;\n    }};\n\nclass Circle : public Shape {\nprivate:\n    double radius;\n\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() override {\n        return 3.14159 * pow(radius, 2);\n    }};\n\nint main() {\n    Rectangle rect(5, 4);\n    Circle circ(8);\n\n    std::cout << \"Rectangle area: \" << rect.area() << std::endl;\n    std::cout << \"Circle area: \" << circ.area() << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Can you design a SQL query that retrieves the total number of orders for each customer in a table named 'orders', where each row contains the columns 'order_id', 'customer_id', and 'order_total'?",
        "input": "",
        "response": "SELECT customer_id, COUNT(order_id) as num_orders, SUM(order_total) as total_amount\nFROM orders\nGROUP BY customer_id\nORDER BY num_orders DESC;",
        "output": "SELECT customer_id, COUNT(order_id) as num_orders, SUM(order_total) as total_amount\nFROM orders\nGROUP BY customer_id\nORDER BY num_orders DESC;"
    },
    {
        "instruction": "Develop a C++ program that calculates the factorial of a given non-negative integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 5;\n    cout << \"Factorial of \" << n << \": \" << factorial(n) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 5;\n    cout << \"Factorial of \" << n << \": \" << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "Construct a Python script that counts the occurrences of each word in a given string, ignoring punctuation and capitalization.",
        "input": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        "response": "import string\n\ndef count_words(text):\n    text = text.lower().translate(str.maketrans('', '', string.punctuation))\n    words_dict = {}\n    for word in text.split():\n        words_dict[word] = words_dict.get(word, 0) + 1\n    return words_dict\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nword_counts = count_words(text)\nprint(word_counts)",
        "output": "import string\n\ndef count_words(text):\n    text = text.lower().translate(str.maketrans('', '', string.punctuation))\n    words_dict = {}\n    for word in text.split():\n        words_dict[word] = words_dict.get(word, 0) + 1\n    return words_dict\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nword_counts = count_words(text)\nprint(word_counts)"
    },
    {
        "instruction": "In JavaScript, write a function that takes an array of integers, and returns a new array containing the squared values of the input array.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function squareArrayElements(arr) {\n    return arr.map(num => num * num);}\n\nconst inputArray = [1, 2, 3, 4, 5];\nconst squaredArray = squareArrayElements(inputArray);\nconsole.log(squaredArray);",
        "output": "function squareArrayElements(arr) {\n    return arr.map(num => num * num);}\n\nconst inputArray = [1, 2, 3, 4, 5];\nconst squaredArray = squareArrayElements(inputArray);\nconsole.log(squaredArray);"
    },
    {
        "instruction": "Implement a function in C# that determines if a given number is prime. If it is prime, the function should return \"Prime\". If it is not prime, it should return \"Not Prime\".",
        "input": "13",
        "response": "using System;\n\nclass PrimeChecker {\n    public static string IsPrime(int number) {\n        if (number <= 1) {\n            return \"Not Prime\";\n        }\n        for (int i = 2; i < Math.Sqrt(number) + 1; i++) {\n            if (number % i == 0) {\n                return \"Not Prime\";\n            }\n        }\n        return \"Prime\";\n    }\n\n    static void Main() {\n        int number = 13;\n        Console.WriteLine(IsPrime(number));\n    }}",
        "output": "using System;\n\nclass PrimeChecker {\n    public static string IsPrime(int number) {\n        if (number <= 1) {\n            return \"Not Prime\";\n        }\n        for (int i = 2; i < Math.Sqrt(number) + 1; i++) {\n            if (number % i == 0) {\n                return \"Not Prime\";\n            }\n        }\n        return \"Prime\";\n    }\n\n    static void Main() {\n        int number = 13;\n        Console.WriteLine(IsPrime(number));\n    }}"
    },
    {
        "instruction": "Develop a C++ function that reads a file and returns the number of lines in it.",
        "input": "file.txt (Contents: \"Line 1\\nLine 2\\nLine 3\\nLine 4\\n\")",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint count_lines(const std::string &filename) {\n    std::ifstream file(filename);\n    if (!file) {\n        std::cerr << \"Unable to open file.\\n\";\n        return -1;\n    }\n\n    int lines = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines++;\n    }\n    file.close();\n    return lines;}\n\nint main() {\n    std::string filename = \"file.txt\";\n    int num_lines = count_lines(filename);\n    std::cout << \"Number of lines: \" << num_lines << std::endl;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint count_lines(const std::string &filename) {\n    std::ifstream file(filename);\n    if (!file) {\n        std::cerr << \"Unable to open file.\\n\";\n        return -1;\n    }\n\n    int lines = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines++;\n    }\n    file.close();\n    return lines;}\n\nint main() {\n    std::string filename = \"file.txt\";\n    int num_lines = count_lines(filename);\n    std::cout << \"Number of lines: \" << num_lines << std::endl;}"
    },
    {
        "instruction": "How would you implement a PHP function to calculate the factorial of a given number?",
        "input": "6",
        "response": "<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$number = 6;\n$result = factorial($number);\necho \"Factorial of $number is $result\";\n?>",
        "output": "<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$number = 6;\n$result = factorial($number);\necho \"Factorial of $number is $result\";\n?>"
    },
    {
        "instruction": "Write a Bash script that takes a directory path as a command-line argument and displays the total number of files in that directory (including subdirectories).",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndirectory=\"$1\"\n\nif [ -d \"$directory\" ]; then\n    files_count=$(find \"$directory\" -type f | wc -l)\n    echo \"Total number of files in $directory: $files_count\"\nelse\n    echo \"The provided path is not a directory.\"\nfi",
        "output": "#!/bin/bash\n\ndirectory=\"$1\"\n\nif [ -d \"$directory\" ]; then\n    files_count=$(find \"$directory\" -type f | wc -l)\n    echo \"Total number of files in $directory: $files_count\"\nelse\n    echo \"The provided path is not a directory.\"\nfi"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of strings as input and returns a new array without duplicate values.",
        "input": "[\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"]",
        "response": "function removeDuplicates(arr) {\n    return [...new Set(arr)];}\n\nconst inputArray = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"];\nconst noDuplicatesArray = removeDuplicates(inputArray);\nconsole.log(noDuplicatesArray);",
        "output": "function removeDuplicates(arr) {\n    return [...new Set(arr)];}\n\nconst inputArray = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"];\nconst noDuplicatesArray = removeDuplicates(inputArray);\nconsole.log(noDuplicatesArray);"
    },
    {
        "instruction": "Implement a C++ function that takes a string and a character, and displays the count of occurrences of the character in the string.",
        "input": "Input: 'programming' and 'g'",
        "response": "#include <iostream>\n#include <string>\n\nint count_char_occurrences(const std::string& s, char c) {\n    int count = 0;\n    for (char ch : s) {\n        if (ch == c) {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    std::string s = \"programming\";\n    char c = 'g';\n    int count = count_char_occurrences(s, c);\n    std::cout << \"The character '\" << c << \"' appears \" << count << \" times in the string '\" << s << \"'.\" << std::endl;}",
        "output": "#include <iostream>\n#include <string>\n\nint count_char_occurrences(const std::string& s, char c) {\n    int count = 0;\n    for (char ch : s) {\n        if (ch == c) {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    std::string s = \"programming\";\n    char c = 'g';\n    int count = count_char_occurrences(s, c);\n    std::cout << \"The character '\" << c << \"' appears \" << count << \" times in the string '\" << s << \"'.\" << std::endl;}"
    },
    {
        "instruction": "Could you write an SQL query that selects all rows from the 'employees' table where the employee's salary is greater than 50000?",
        "input": "Table: employees (id, first_name, last_name, salary)",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "Design a Python class to represent a coffee machine, with methods for adding water, coffee beans, and turning the machine on. Display the status of water and coffee beans when brewing.",
        "input": "Initial water level: 1000ml, Initial beans level: 500g, Add 250ml water, Add 200g beans",
        "response": "class CoffeeMachine:\n    def __init__(self, water, beans):\n        self.water = water\n        self.beans = beans\n\n    def add_water(self, amount):\n        self.water += amount\n\n    def add_beans(self, amount):\n        self.beans += amount\n\n    def brew(self):\n        print(f\"Brewing with {self.water}ml water and {self.beans}g coffee beans.\")\n\nmachine = CoffeeMachine(1000, 500)\nmachine.add_water(250)\nmachine.add_beans(200)\nmachine.brew()",
        "output": "class CoffeeMachine:\n    def __init__(self, water, beans):\n        self.water = water\n        self.beans = beans\n\n    def add_water(self, amount):\n        self.water += amount\n\n    def add_beans(self, amount):\n        self.beans += amount\n\n    def brew(self):\n        print(f\"Brewing with {self.water}ml water and {self.beans}g coffee beans.\")\n\nmachine = CoffeeMachine(1000, 500)\nmachine.add_water(250)\nmachine.add_beans(200)\nmachine.brew()"
    },
    {
        "instruction": "Write a shell script that takes a directory path as an argument and displays the total number of files and directories within it.",
        "input": "/home/user/test_directory",
        "response": "#!/bin/bash\n\nDIR_PATH=\"$1\"\nFILES_COUNT=$(find \"$DIR_PATH\" -type f | wc -l)\nDIRS_COUNT=$(find \"$DIR_PATH\" -type d | wc -l)\n\necho \"Total files: $FILES_COUNT\"\necho \"Total directories: $DIRS_COUNT\"",
        "output": "#!/bin/bash\n\nDIR_PATH=\"$1\"\nFILES_COUNT=$(find \"$DIR_PATH\" -type f | wc -l)\nDIRS_COUNT=$(find \"$DIR_PATH\" -type d | wc -l)\n\necho \"Total files: $FILES_COUNT\"\necho \"Total directories: $DIRS_COUNT\""
    },
    {
        "instruction": "Implement a C++ program that uses a recursive function to calculate the factorial of a given integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    cout << \"Factorial of \" << num << \" is: \" << result << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    cout << \"Factorial of \" << num << \" is: \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "Design a Python function that takes a list of integers and a target sum, then returns the indices of two numbers from the list which add up to the target sum.",
        "input": "[3, 7, 1, 5], 8",
        "response": "def two_sum(nums, target):\n    num_dict = {}\n    for index, num in enumerate(nums):\n        difference = target - num\n        if difference in num_dict:\n            return [num_dict[difference], index]\n        num_dict[num] = index\n\nnums = [3, 7, 1, 5]\ntarget = 8\nresult = two_sum(nums, target)\nprint(result)",
        "output": "def two_sum(nums, target):\n    num_dict = {}\n    for index, num in enumerate(nums):\n        difference = target - num\n        if difference in num_dict:\n            return [num_dict[difference], index]\n        num_dict[num] = index\n\nnums = [3, 7, 1, 5]\ntarget = 8\nresult = two_sum(nums, target)\nprint(result)"
    },
    {
        "instruction": "How can we write a JavaScript function that reverses the words in a given sentence, but keeps the sentence in its original order?",
        "input": "\"this is a test\"",
        "response": "function reverseWords(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.map(word => word.split('').reverse().join(''));\n    return reversedWords.join(' ');}\n\nconst input = \"this is a test\";\nconst reversedSentence = reverseWords(input);\nconsole.log(reversedSentence);",
        "output": "function reverseWords(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.map(word => word.split('').reverse().join(''));\n    return reversedWords.join(' ');}\n\nconst input = \"this is a test\";\nconst reversedSentence = reverseWords(input);\nconsole.log(reversedSentence);"
    },
    {
        "instruction": "Construct a shell script that evaluates disk usage in percentage for the root directory and prints the output.",
        "input": "",
        "response": "#!/bin/sh\n\nDISK_USAGE=$(df / | tail -1 | awk '{print $5}')\necho \"Root directory disk usage: $DISK_USAGE\"",
        "output": "#!/bin/sh\n\nDISK_USAGE=$(df / | tail -1 | awk '{print $5}')\necho \"Root directory disk usage: $DISK_USAGE\""
    },
    {
        "instruction": "Implement a C++ function that takes a string and returns a new string with all vowels removed.",
        "input": "\"Eliminate all vowels from this string.\"",
        "response": "#include <iostream>\n#include <string>\n\nstd::string remove_vowels(const std::string& str) {\n    std::string result;\n    for (char c : str) {\n        if (c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U' &&\n            c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            result += c;\n        }\n    }\n    return result;}\n\nint main() {\n    std::string input = \"Eliminate all vowels from this string.\";\n    std::string result = remove_vowels(input);\n    std::cout << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nstd::string remove_vowels(const std::string& str) {\n    std::string result;\n    for (char c : str) {\n        if (c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U' &&\n            c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            result += c;\n        }\n    }\n    return result;}\n\nint main() {\n    std::string input = \"Eliminate all vowels from this string.\";\n    std::string result = remove_vowels(input);\n    std::cout << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Shell script that counts the number of files in a directory provided as an argument.",
        "input": "/home/user/documents/",
        "response": "#!/bin/sh\n\nDIRECTORY=\"$1\"\nFILE_COUNT=$(ls $DIRECTORY | wc -l)\n\necho \"File count in $DIRECTORY: $FILE_COUNT\"",
        "output": "#!/bin/sh\n\nDIRECTORY=\"$1\"\nFILE_COUNT=$(ls $DIRECTORY | wc -l)\n\necho \"File count in $DIRECTORY: $FILE_COUNT\""
    },
    {
        "instruction": "How would you design a Python class that represents a simple calculator capable of addition, subtraction, multiplication, and division?",
        "input": "calculator = Calculator()\ncalculator.add(5, 4)\ncalculator.subtract(9, 3)\ncalculator.multiply(4, 5)\ncalculator.divide(20, 4)",
        "response": "class Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b if b != 0 else None\n\ncalculator = Calculator()\nprint(calculator.add(5, 4))\nprint(calculator.subtract(9, 3))\nprint(calculator.multiply(4, 5))\nprint(calculator.divide(20, 4))",
        "output": "class Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b if b != 0 else None\n\ncalculator = Calculator()\nprint(calculator.add(5, 4))\nprint(calculator.subtract(9, 3))\nprint(calculator.multiply(4, 5))\nprint(calculator.divide(20, 4))"
    },
    {
        "instruction": "Construct a PHP function that merges two associative arrays and returns the result as a new array.",
        "input": "$array1 = array('a' => 1, 'b' => 2);\n$array2 = array('b' => 3, 'c' => 4);",
        "response": "<?php\n\nfunction merge_arrays($arr1, $arr2) {\n    foreach ($arr2 as $key => $value) {\n        if (isset($arr1[$key])) {\n            $arr1[$key] = $arr1[$key] + $value;\n        } else {\n            $arr1[$key] = $value;\n        }\n    }\n    return $arr1;}\n\n$array1 = array('a' => 1, 'b' => 2);\n$array2 = array('b' => 3, 'c' => 4);\n$merged_array = merge_arrays($array1, $array2);\nprint_r($merged_array);\n\n?>",
        "output": "<?php\n\nfunction merge_arrays($arr1, $arr2) {\n    foreach ($arr2 as $key => $value) {\n        if (isset($arr1[$key])) {\n            $arr1[$key] = $arr1[$key] + $value;\n        } else {\n            $arr1[$key] = $value;\n        }\n    }\n    return $arr1;}\n\n$array1 = array('a' => 1, 'b' => 2);\n$array2 = array('b' => 3, 'c' => 4);\n$merged_array = merge_arrays($array1, $array2);\nprint_r($merged_array);\n\n?>"
    },
    {
        "instruction": "Develop a C# function that calculates the factorial of an integer.",
        "input": "6",
        "response": "using System;\n\nclass FactorialCalculation\n{\n    public static int CalculateFactorial(int n)\n    {\n        if (n == 1)\n            return 1;\n        else\n            return n * CalculateFactorial(n - 1);\n    }\n\n    static void Main(string[] args)\n    {\n        int num = 6;\n        Console.WriteLine(CalculateFactorial(num));\n    }}",
        "output": "using System;\n\nclass FactorialCalculation\n{\n    public static int CalculateFactorial(int n)\n    {\n        if (n == 1)\n            return 1;\n        else\n            return n * CalculateFactorial(n - 1);\n    }\n\n    static void Main(string[] args)\n    {\n        int num = 6;\n        Console.WriteLine(CalculateFactorial(num));\n    }}"
    },
    {
        "instruction": "How would you implement a Python script that reads the content of a specified file and prints its lines in reverse order?",
        "input": "'example.txt'",
        "response": "def reverse_lines(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n        \n    for line in reversed(lines):\n        print(line.strip())\n\nfilename = 'example.txt'\nreverse_lines(filename)",
        "output": "def reverse_lines(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n        \n    for line in reversed(lines):\n        print(line.strip())\n\nfilename = 'example.txt'\nreverse_lines(filename)"
    },
    {
        "instruction": "Conceive a Java program that takes an input string and outputs a string processed according to the Caesar cipher (shift of 3).",
        "input": "'hello, world!'",
        "response": "public class CaesarCipher {\n    public static String encrypt(String text, int shift) {\n        StringBuilder encryptedText = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int base = Character.isLowerCase(c) ? 'a' : 'A';\n                c = (char) ((c - base + shift) % 26 + base);\n            }\n            encryptedText.append(c);\n        }\n        return encryptedText.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello, world!\";\n        String shiftedText = encrypt(input, 3);\n        System.out.println(shiftedText);\n    }}",
        "output": "public class CaesarCipher {\n    public static String encrypt(String text, int shift) {\n        StringBuilder encryptedText = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c)) {\n                int base = Character.isLowerCase(c) ? 'a' : 'A';\n                c = (char) ((c - base + shift) % 26 + base);\n            }\n            encryptedText.append(c);\n        }\n        return encryptedText.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello, world!\";\n        String shiftedText = encrypt(input, 3);\n        System.out.println(shiftedText);\n    }}"
    },
    {
        "instruction": "Create a shell script that lists all files in the current directory that contain a specific string.",
        "input": "'search_string'",
        "response": "#!/bin/sh\n\nsearch_string=\"search_string\"\ngrep -rl \"$search_string\" .",
        "output": "#!/bin/sh\n\nsearch_string=\"search_string\"\ngrep -rl \"$search_string\" ."
    },
    {
        "instruction": "Design a C++ function that reverses a given string and verifies if it is a palindrome.",
        "input": "\"level\"",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool is_palindrome(std::string input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    return input == reversed;}\n\nint main() {\n    std::string text = \"level\";\n    std::cout << (is_palindrome(text) ? \"Palindrome\" : \"Not palindrome\") << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool is_palindrome(std::string input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    return input == reversed;}\n\nint main() {\n    std::string text = \"level\";\n    std::cout << (is_palindrome(text) ? \"Palindrome\" : \"Not palindrome\") << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a Python script that reads the content of a CSV file and outputs the count of rows?",
        "input": "data.csv (containing rows of data separated by commas)",
        "response": "import csv\n\ndef count_rows(file_path):\n    with open(file_path, 'r') as file:\n        csv_reader = csv.reader(file)\n        row_count = sum(1 for _ in csv_reader)\n    return row_count\n\nfile_path = 'data.csv'\nprint(f'Number of rows: {count_rows(file_path)}')",
        "output": "import csv\n\ndef count_rows(file_path):\n    with open(file_path, 'r') as file:\n        csv_reader = csv.reader(file)\n        row_count = sum(1 for _ in csv_reader)\n    return row_count\n\nfile_path = 'data.csv'\nprint(f'Number of rows: {count_rows(file_path)}')"
    },
    {
        "instruction": "Construct a JavaScript function that, when given an array of objects containing names and ages, orders the objects by ascending age and returns the array.",
        "input": "[{ name: \"Alice\", age: 30 }, { name: \"Dave\", age: 25 }, { name: \"Carol\", age: 35 }]",
        "response": "function sortByAge(arr) {\n    return arr.sort((a, b) => a.age - b.age);}\n\nconst people = [\n    { name: \"Alice\", age: 30 },\n    { name: \"Dave\", age: 25 },\n    { name: \"Carol\", age: 35 },\n];\n\nconst sortedPeople = sortByAge(people);\nconsole.log(sortedPeople);",
        "output": "function sortByAge(arr) {\n    return arr.sort((a, b) => a.age - b.age);}\n\nconst people = [\n    { name: \"Alice\", age: 30 },\n    { name: \"Dave\", age: 25 },\n    { name: \"Carol\", age: 35 },\n];\n\nconst sortedPeople = sortByAge(people);\nconsole.log(sortedPeople);"
    },
    {
        "instruction": "Write a shell script that prints the result of the last three commands executed in the terminal.",
        "input": "last_option=3",
        "response": "#!/bin/bash\n\nlast_option=3\nhistory | tail -n$last_option",
        "output": "#!/bin/bash\n\nlast_option=3\nhistory | tail -n$last_option"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a positive integer.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    unsigned long long result = factorial(num);\n    std::cout << \"The factorial of \" << num << \" is: \" << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    unsigned long long result = factorial(num);\n    std::cout << \"The factorial of \" << num << \" is: \" << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "What is an optimal SQL query to retrieve the count of all rows in a table named 'employees'?",
        "input": "table: employees",
        "response": "SELECT COUNT(*) FROM employees;",
        "output": "SELECT COUNT(*) FROM employees;"
    },
    {
        "instruction": "Implement a Python script that reads and prints the content of a CSV file.",
        "input": "sample.csv (content: \"Name,Age,Job\\nAlice,32,Engineer\\nBob,28,Designer\")",
        "response": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, newline='') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        print(', '.join(row))",
        "output": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, newline='') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        print(', '.join(row))"
    },
    {
        "instruction": "Fix the following buggy JavaScript code that intends to return the largest among three input numbers: function max(a, b, c) { return max(a, max(b, c)); }",
        "input": "max(4, 2, 7)",
        "response": "function max(a, b, c) {\n    return Math.max(a, Math.max(b, c));}\n\nconsole.log(max(4, 2, 7));",
        "output": "function max(a, b, c) {\n    return Math.max(a, Math.max(b, c));}\n\nconsole.log(max(4, 2, 7));"
    },
    {
        "instruction": "Implement a C++ function that determines if a given string has all unique characters.",
        "input": "Example: \"GPTModel\"",
        "response": "#include <iostream>\n#include <string>\n#include <unordered_set>\n\nbool has_unique_characters(const std::string &str) {\n    std::unordered_set<char> char_set;\n    for (const char &c : str) {\n        if (char_set.count(c) > 0) {\n            return false;\n        }\n        char_set.insert(c);\n    }\n    return true;}\n\nint main() {\n    std::string example = \"GPTModel\";\n    std::cout << \"Has unique characters: \" << has_unique_characters(example) << std::endl;}\n",
        "output": "#include <iostream>\n#include <string>\n#include <unordered_set>\n\nbool has_unique_characters(const std::string &str) {\n    std::unordered_set<char> char_set;\n    for (const char &c : str) {\n        if (char_set.count(c) > 0) {\n            return false;\n        }\n        char_set.insert(c);\n    }\n    return true;}\n\nint main() {\n    std::string example = \"GPTModel\";\n    std::cout << \"Has unique characters: \" << has_unique_characters(example) << std::endl;}\n"
    },
    {
        "instruction": "How would you implement a Bash script that calculates the factorial of a given input number?",
        "input": "Example: 4",
        "response": "#!/bin/bash\n\nfactorial() {\n    if [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $1 * $(factorial $(( $1 - 1 ))) ))\n    fi}\n\necho \"Factorial of 4: $(factorial 4)\"\n",
        "output": "#!/bin/bash\n\nfactorial() {\n    if [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $1 * $(factorial $(( $1 - 1 ))) ))\n    fi}\n\necho \"Factorial of 4: $(factorial 4)\"\n"
    },
    {
        "instruction": "Develop a C# function that accepts a list of integers and returns their average as a double.",
        "input": "Example: [1, 5, 7, 12]",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    public static double CalculateAverage(List<int> numbers) {\n        int sum = 0;\n        foreach (int number in numbers) {\n            sum += number;\n        }\n        return (double)sum / numbers.Count;\n    }\n\n    public static void Main() {\n        List<int> example = new List<int>{1, 5, 7, 12};\n        Console.WriteLine \"Average: \" + CalculateAverage(example);\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    public static double CalculateAverage(List<int> numbers) {\n        int sum = 0;\n        foreach (int number in numbers) {\n            sum += number;\n        }\n        return (double)sum / numbers.Count;\n    }\n\n    public static void Main() {\n        List<int> example = new List<int>{1, 5, 7, 12};\n        Console.WriteLine \"Average: \" + CalculateAverage(example);\n    }}"
    },
    {
        "instruction": "Construct a PHP function that evaluates if a given year is a leap year.",
        "input": "Example: 2024",
        "response": "<?php\n\nfunction is_leap_year($year) {\n    return (($year % 4 == 0) && ($year % 100 != 0)) || ($year % 400 == 0);}\n\n$example = 2024;\necho \"Is leap year: \" . (is_leap_year($example) ? \"true\" : \"false\");\n",
        "output": "<?php\n\nfunction is_leap_year($year) {\n    return (($year % 4 == 0) && ($year % 100 != 0)) || ($year % 400 == 0);}\n\n$example = 2024;\necho \"Is leap year: \" . (is_leap_year($example) ? \"true\" : \"false\");\n"
    },
    {
        "instruction": "Construct a C++ function that computes the factorial of a given positive integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python function to compute the area of a rectangle given its length and width.",
        "input": "length: 10, width: 20",
        "response": "def rectangle_area(length, width):\n    return length * width\n\narea = rectangle_area(10, 20)\nprint(f'The area of the rectangle is {area}')",
        "output": "def rectangle_area(length, width):\n    return length * width\n\narea = rectangle_area(10, 20)\nprint(f'The area of the rectangle is {area}')"
    },
    {
        "instruction": "Develop a SQL query that retrieves all records from a 'Users' table, ordered by 'Lastname' in ascending order.",
        "input": "Table: Users, Columns: Id, Firstname, Lastname, Email",
        "response": "SELECT * FROM Users\nORDER BY Lastname ASC;",
        "output": "SELECT * FROM Users\nORDER BY Lastname ASC;"
    },
    {
        "instruction": "Create a shell script that outputs the number of lines in a file.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfilename=\"file.txt\"\nline_count=$(wc -l < \"$filename\")\necho \"There are $line_count lines in $filename\"",
        "output": "#!/bin/bash\n\nfilename=\"file.txt\"\nline_count=$(wc -l < \"$filename\")\necho \"There are $line_count lines in $filename\""
    },
    {
        "instruction": "Develop a C++ function that accepts a string argument and reverses its contents.",
        "input": "\"Hello, World!\"",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverseString(std::string input) {\n    std::reverse(input.begin(), input.end());\n    return input;}\n\nint main() {\n    std::string s = \"Hello, World!\";\n    std::cout << reverseString(s) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverseString(std::string input) {\n    std::reverse(input.begin(), input.end());\n    return input;}\n\nint main() {\n    std::string s = \"Hello, World!\";\n    std::cout << reverseString(s) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you create a PHP script that reads a CSV file and calculates the average of numbers in the first column?",
        "input": "sample.csv: \n1,John,25\n3,Jane,30\n5,Mary,37\n8,Tom,24",
        "response": "<?php\nfunction calculateAverageFromCSV($filename) {\n    $file = fopen($filename, 'r');\n    $sum = $count = 0;\n    \n    while (($data = fgetcsv($file)) !== FALSE) {\n        $sum += $data[0];\n        $count++;\n    }\n\n    fclose($file);\n    return $sum / $count;}\n\n$filename = 'sample.csv';\necho 'Average: ' . calculateAverageFromCSV($filename);\n?>",
        "output": "<?php\nfunction calculateAverageFromCSV($filename) {\n    $file = fopen($filename, 'r');\n    $sum = $count = 0;\n    \n    while (($data = fgetcsv($file)) !== FALSE) {\n        $sum += $data[0];\n        $count++;\n    }\n\n    fclose($file);\n    return $sum / $count;}\n\n$filename = 'sample.csv';\necho 'Average: ' . calculateAverageFromCSV($filename);\n?>"
    },
    {
        "instruction": "Construct a Python script that finds the most common word in a given list of words, while ignoring a list of specified words.",
        "input": "words = ['apple', 'banana', 'apple', 'orange', 'banana'], ignore_list = ['banana']",
        "response": "from collections import Counter\n\ndef most_common_word(words, ignore_list):\n    filtered_words = [word for word in words if word not in ignore_list]\n    count = Counter(filtered_words)\n    return count.most_common(1)[0]\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana']\nignore_list = ['banana']\n\nresult = most_common_word(words, ignore_list)\nprint(result)",
        "output": "from collections import Counter\n\ndef most_common_word(words, ignore_list):\n    filtered_words = [word for word in words if word not in ignore_list]\n    count = Counter(filtered_words)\n    return count.most_common(1)[0]\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana']\nignore_list = ['banana']\n\nresult = most_common_word(words, ignore_list)\nprint(result)"
    },
    {
        "instruction": "Please design a shell script that will accept a filename as an argument, and if the file exists, print the file's size in bytes.",
        "input": "sample.txt",
        "response": "#!/bin/sh\n\nfilename=$1\n\nif [ -e $filename ]\nthen\n    echo \"File size: $(wc -c < $filename) bytes\"\nelse\n    echo \"File not found\"\nfi\n\n# Usage: ./check_filesize.sh sample.txt",
        "output": "#!/bin/sh\n\nfilename=$1\n\nif [ -e $filename ]\nthen\n    echo \"File size: $(wc -c < $filename) bytes\"\nelse\n    echo \"File not found\"\nfi\n\n# Usage: ./check_filesize.sh sample.txt"
    },
    {
        "instruction": "Create a C++ program to find all prime numbers up to a given integer using the Sieve of Eratosthenes algorithm.",
        "input": "20",
        "response": "#include<iostream>\n#include<vector>\n\nvoid sieve_of_eratosthenes(int n) {\n    std::vector<bool> is_prime(n+1, true);\n    is_prime[0] = is_prime[1] = false;\n\n    for(int i = 2; i * i <= n; ++i) {\n        if (is_prime[i]) {\n            for(int j = i * i; j <= n; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    for(int i = 2; i <= n; ++i) {\n        if (is_prime[i]) {\n            std::cout << i << ' ';\n        }\n    }}\n\nint main() {\n    int n = 20;\n    sieve_of_eratosthenes(n);\n    return 0;}",
        "output": "#include<iostream>\n#include<vector>\n\nvoid sieve_of_eratosthenes(int n) {\n    std::vector<bool> is_prime(n+1, true);\n    is_prime[0] = is_prime[1] = false;\n\n    for(int i = 2; i * i <= n; ++i) {\n        if (is_prime[i]) {\n            for(int j = i * i; j <= n; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n\n    for(int i = 2; i <= n; ++i) {\n        if (is_prime[i]) {\n            std::cout << i << ' ';\n        }\n    }}\n\nint main() {\n    int n = 20;\n    sieve_of_eratosthenes(n);\n    return 0;}"
    },
    {
        "instruction": "Write a Python script that fetches data from a REST API, convert the JSON response to a dictionary, and prints the result.",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\nimport json\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\nif response.status_code == 200:\n    data = json.loads(response.text)\n    print(data)\nelse:\n    print('Error:', response.status_code)",
        "output": "import requests\nimport json\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\nif response.status_code == 200:\n    data = json.loads(response.text)\n    print(data)\nelse:\n    print('Error:', response.status_code)"
    },
    {
        "instruction": "How can I implement a JavaScript function that returns the factorial of a given positive integer?",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Design a shell script to create a backup of a directory and store it with a timestamp appended to the filename.",
        "input": "/home/user/documents",
        "response": "#!/bin/sh\n\nbackup_directory='/home/user/documents'\nbackup_dest='/home/user/backups'\ntimestamp=$(date +%Y-%m-%d_%H-%M-%S)\nbackup_filename=\"backup_${timestamp}.tar.gz\"\n\ntar czf \"${backup_dest}/${backup_filename}\" \"${backup_directory}\"\n\necho \"Backup of '${backup_directory}' created at '${backup_dest}/${backup_filename}'\"",
        "output": "#!/bin/sh\n\nbackup_directory='/home/user/documents'\nbackup_dest='/home/user/backups'\ntimestamp=$(date +%Y-%m-%d_%H-%M-%S)\nbackup_filename=\"backup_${timestamp}.tar.gz\"\n\ntar czf \"${backup_dest}/${backup_filename}\" \"${backup_directory}\"\n\necho \"Backup of '${backup_directory}' created at '${backup_dest}/${backup_filename}'\""
    },
    {
        "instruction": "Develop a Python program that calculates the factorial of a non-negative integer given as input.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 6\nresult = factorial(number)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 6\nresult = factorial(number)\nprint(result)"
    },
    {
        "instruction": "In JavaScript, craft a function that evaluates if a string has balanced parentheses.",
        "input": "\"()(())\"",
        "response": "function isBalanced(s) {\n    let stack = [];\n    for (const char of s) {\n        if (char === '(') {\n            stack.push('(');\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;}\n\nconst input = \"()(())\";\nconsole.log(isBalanced(input));",
        "output": "function isBalanced(s) {\n    let stack = [];\n    for (const char of s) {\n        if (char === '(') {\n            stack.push('(');\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;}\n\nconst input = \"()(())\";\nconsole.log(isBalanced(input));"
    },
    {
        "instruction": "Can you provide a Java code snippet that detects loops in a singly-linked list?",
        "input": "class Node {\n  int data;\n  Node next;\n\n  Node(int d) {\n    data = d;\n    next = null;\n  }}",
        "response": "public class LoopDetector {\n\n    public static boolean hasLoop(Node head) {\n        Node slow = head, fast = head;\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = head;\n\n        System.out.println(hasLoop(head));\n    }}",
        "output": "public class LoopDetector {\n\n    public static boolean hasLoop(Node head) {\n        Node slow = head, fast = head;\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = head;\n\n        System.out.println(hasLoop(head));\n    }}"
    },
    {
        "instruction": "Design a C++ function that takes a vector of integers and removes all even numbers.",
        "input": "std::vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid remove_evens(std::vector<int>& nums) {\n    nums.erase(std::remove_if(nums.begin(), nums.end(), [](int num) {\n        return num % 2 == 0;\n    }), nums.end());}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    remove_evens(nums);\n\n    for (int num : nums) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid remove_evens(std::vector<int>& nums) {\n    nums.erase(std::remove_if(nums.begin(), nums.end(), [](int num) {\n        return num % 2 == 0;\n    }), nums.end());}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    remove_evens(nums);\n\n    for (int num : nums) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Create a C program that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include <stdio.h>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) { return 1; }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    printf(\"Factorial of %u: %llu\", number, factorial(number));\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) { return 1; }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    printf(\"Factorial of %u: %llu\", number, factorial(number));\n    return 0;\n}"
    },
    {
        "instruction": "Construct a simple Flask web application in Python that serves a 'Hello, API!' response at the '/' endpoint using jsonify.",
        "input": "",
        "response": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_api():\n    return jsonify(message='Hello, API!')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_api():\n    return jsonify(message='Hello, API!')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Implement a shell script that checks HTTP status code for a given URL using curl.",
        "input": "https://www.example.com",
        "response": "#!/bin/bash\n\nurl=\"https://www.example.com\"\nstatus_code=$(curl -s -o /dev/null -I -w \"%{http_code}\" \"$url\")\necho \"Status code for $url: $status_code\"",
        "output": "#!/bin/bash\n\nurl=\"https://www.example.com\"\nstatus_code=$(curl -s -o /dev/null -I -w \"%{http_code}\" \"$url\")\necho \"Status code for $url: $status_code\""
    },
    {
        "instruction": "How would you implement a simple REST API in JavaScript using the Express framework?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n    res.json({ message: 'Hello, API!' });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));",
        "output": "const express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n    res.json({ message: 'Hello, API!' });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));"
    },
    {
        "instruction": "Implement a C program that reads user input for two integers and calculates their greatest common divisor.",
        "input": "12, 16",
        "response": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);}\n\nint main() {\n    int num1, num2;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"GCD: %d\\n\", gcd(num1, num2));\n    return 0;}",
        "output": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);}\n\nint main() {\n    int num1, num2;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"GCD: %d\\n\", gcd(num1, num2));\n    return 0;}"
    },
    {
        "instruction": "What would be a C++ code sample to find the factorial of a given number using recursion?",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    return n == 0 || n == 1 ? 1 : n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial: \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    return n == 0 || n == 1 ? 1 : n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial: \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a PHP script that generates a random password with a specified length containing uppercase, lowercase, numbers, and special characters.",
        "input": "10",
        "response": "<?php\nfunction generate_password($length) {\n    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-=_+';\n    $password = '';\n    for ($i = 0; $i < $length; $i++) {\n        $password .= $chars[rand(0, strlen($chars) - 1)];\n    }\n    return $password;}\n\n$password_length = 10;\n$new_password = generate_password($password_length);\necho \"Generated Password: $new_password\";\n?>",
        "output": "<?php\nfunction generate_password($length) {\n    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-=_+';\n    $password = '';\n    for ($i = 0; $i < $length; $i++) {\n        $password .= $chars[rand(0, strlen($chars) - 1)];\n    }\n    return $password;}\n\n$password_length = 10;\n$new_password = generate_password($password_length);\necho \"Generated Password: $new_password\";\n?>"
    },
    {
        "instruction": "Craft a Shell script that counts the number of files in a specified directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndirectory=\"/home/user/documents\"\nfile_count=$(ls -l \"${directory}\" | grep -v ^d | wc -l)\necho \"File count in directory: ${file_count}\"",
        "output": "#!/bin/bash\n\ndirectory=\"/home/user/documents\"\nfile_count=$(ls -l \"${directory}\" | grep -v ^d | wc -l)\necho \"File count in directory: ${file_count}\""
    },
    {
        "instruction": "Write a C++ function that takes a string and reverses it in place without using any additional memory.",
        "input": "\"hello world\"",
        "response": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    for (size_t i = 0, j = str.length() - 1; i < j; ++i, --j) {\n        std::swap(str[i], str[j]);\n    }}\n\nint main() {\n    std::string input = \"hello world\";\n    reverse_string(input);\n    std::cout << input << std::endl;}",
        "output": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    for (size_t i = 0, j = str.length() - 1; i < j; ++i, --j) {\n        std::swap(str[i], str[j]);\n    }}\n\nint main() {\n    std::string input = \"hello world\";\n    reverse_string(input);\n    std::cout << input << std::endl;}"
    },
    {
        "instruction": "How would you create a Python script that reads a CSV file and prints the sum of a specific column's values?",
        "input": "csv_file.csv\nid, value\n1, 10\n2, 20\n3, 30\n4, 40\n",
        "response": "import csv\n\ndef sum_column(file_path, column):\n    total_sum = 0\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total_sum += int(row[column])\n    return total_sum\n\nfile_path = 'csv_file.csv'\ncolumn = 'value'\nresult = sum_column(file_path, column)\nprint(f\"Sum of {column} column: {result}\")",
        "output": "import csv\n\ndef sum_column(file_path, column):\n    total_sum = 0\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total_sum += int(row[column])\n    return total_sum\n\nfile_path = 'csv_file.csv'\ncolumn = 'value'\nresult = sum_column(file_path, column)\nprint(f\"Sum of {column} column: {result}\")"
    },
    {
        "instruction": "Create a PHP script that takes a list of words as input, removes duplicates, and sorts them alphabetically.",
        "input": "hello, world, earth, world, moon, planet, earth",
        "response": "<?php\n\nfunction remove_duplicates_and_sort($input) {\n    $words_array = explode(', ', $input);\n    $unique_words = array_unique($words_array);\n    sort($unique_words);\n    return implode(', ', $unique_words);}\n\n$input = 'hello, world, earth, world, moon, planet, earth';\n$result = remove_duplicates_and_sort($input);\necho $result;\n?>",
        "output": "<?php\n\nfunction remove_duplicates_and_sort($input) {\n    $words_array = explode(', ', $input);\n    $unique_words = array_unique($words_array);\n    sort($unique_words);\n    return implode(', ', $unique_words);}\n\n$input = 'hello, world, earth, world, moon, planet, earth';\n$result = remove_duplicates_and_sort($input);\necho $result;\n?>"
    },
    {
        "instruction": "Write a Scala function that calculates the factorial of a given non-negative integer.",
        "input": "5",
        "response": "import scala.annotation.tailrec\n\ndef factorial(n: Int): Long = {\n    @tailrec\n    def facHelper(n: Int, accum: Long): Long = {\n        if (n <= 1) accum\n        else facHelper(n - 1, n * accum)\n    }\n    facHelper(n, 1)}\n\nval num = 5\nval result = factorial(num)\nprintln(s\"Factorial of $num is: $result\")",
        "output": "import scala.annotation.tailrec\n\ndef factorial(n: Int): Long = {\n    @tailrec\n    def facHelper(n: Int, accum: Long): Long = {\n        if (n <= 1) accum\n        else facHelper(n - 1, n * accum)\n    }\n    facHelper(n, 1)}\n\nval num = 5\nval result = factorial(num)\nprintln(s\"Factorial of $num is: $result\")"
    },
    {
        "instruction": "Implement a C++ program that reads user input values consisting of two integers, and outputs their greatest common divisor (GCD).",
        "input": "56, 98",
        "response": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python script that takes a list of integers and returns a new list containing only the even numbers in the original list.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "response": "def filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even_numbers(input_list)\nprint(result)",
        "output": "def filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even_numbers(input_list)\nprint(result)"
    },
    {
        "instruction": "How can I write a shell script that takes a file path as an argument, counts the number of lines in the file, and prints the result?",
        "input": "sample_file.txt",
        "response": "#!/bin/sh\n\nfile_path=\"$1\"\nline_count=$(wc -l < \"$file_path\")\necho \"There are $line_count lines in $file_path\"\n\n# Usage: ./count_lines.sh sample_file.txt",
        "output": "#!/bin/sh\n\nfile_path=\"$1\"\nline_count=$(wc -l < \"$file_path\")\necho \"There are $line_count lines in $file_path\"\n\n# Usage: ./count_lines.sh sample_file.txt"
    },
    {
        "instruction": "Design a simple REST API in Node.js using Express that accepts POST requests with JSON input, and returns the JSON data along with a message.",
        "input": "{ \"name\": \"John\", \"age\": 30 }",
        "response": "const express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\n\napp.post('/api/echo', (req, res) => {\n    const data = req.body;\n    res.json({\n        message: 'Data successfully received',\n        data\n    });});\n\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);});\n\n// To test, send a POST request to http://localhost:3000/api/echo with the JSON input.",
        "output": "const express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\n\napp.post('/api/echo', (req, res) => {\n    const data = req.body;\n    res.json({\n        message: 'Data successfully received',\n        data\n    });});\n\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);});\n\n// To test, send a POST request to http://localhost:3000/api/echo with the JSON input."
    },
    {
        "instruction": "Write a C++ function to find the largest element in an array of integers.",
        "input": "int arr[] = {1, 45, 9, 30, 2};",
        "response": "#include <iostream>\nusing namespace std;\n\nint find_largest(int arr[], int size) {\n    int largest = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n    }\n    return largest;}\n\nint main() {\n    int arr[] = {1, 45, 9, 30, 2};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int largest = find_largest(arr, size);\n    cout << \"Largest element: \" << largest << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint find_largest(int arr[], int size) {\n    int largest = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n    }\n    return largest;}\n\nint main() {\n    int arr[] = {1, 45, 9, 30, 2};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int largest = find_largest(arr, size);\n    cout << \"Largest element: \" << largest << endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a function in PHP that calculates the factorial of a given non-negative integer using recursion.",
        "input": "5",
        "response": "<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }}\n\n$input = 5;\n$result = factorial($input);\necho \"Factorial of $input is: $result\";\n?>",
        "output": "<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }}\n\n$input = 5;\n$result = factorial($input);\necho \"Factorial of $input is: $result\";\n?>"
    },
    {
        "instruction": "How would you create a REST API endpoint in Node.js using Express to return a list of users from a static JSON file?",
        "input": "{ \"users\": [{ \"id\": 1, \"name\": \"John\" }, { \"id\": 2, \"name\": \"Jane\" }] }",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\nconst users = { \"users\": [{ \"id\": 1, \"name\": \"John\" }, { \"id\": 2, \"name\": \"Jane\" }] };\n\napp.get('/api/users', (req, res) => {\n    res.json(users);});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\nconst users = { \"users\": [{ \"id\": 1, \"name\": \"John\" }, { \"id\": 2, \"name\": \"Jane\" }] };\n\napp.get('/api/users', (req, res) => {\n    res.json(users);});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});"
    },
    {
        "instruction": "Write a Python script to read a CSV file containing names and ages, and output the average age.",
        "input": "\"Name,Age\\nJohn,28\\nJane,32\\nAlice,25\\nBob,29\"",
        "response": "import csv\nimport io\n\ncsv_data = \"Name,Age\\nJohn,28\\nJane,32\\nAlice,25\\nBob,29\"\n\ndef average_age(csv_string):\n    data = csv.reader(io.StringIO(csv_string))\n    total_age = 0\n    total_rows = 0\n\n    next(data)  # skip header\n    for row in data:\n        total_age += int(row[1])\n        total_rows += 1\n\n    return total_age / total_rows\n\navg_age = average_age(csv_data)\nprint(f\"Average age: {avg_age}\")",
        "output": "import csv\nimport io\n\ncsv_data = \"Name,Age\\nJohn,28\\nJane,32\\nAlice,25\\nBob,29\"\n\ndef average_age(csv_string):\n    data = csv.reader(io.StringIO(csv_string))\n    total_age = 0\n    total_rows = 0\n\n    next(data)  # skip header\n    for row in data:\n        total_age += int(row[1])\n        total_rows += 1\n\n    return total_age / total_rows\n\navg_age = average_age(csv_data)\nprint(f\"Average age: {avg_age}\")"
    },
    {
        "instruction": "Write a C program to find the length of a given string without using the built-in strlen() function.",
        "input": "Hello, world!",
        "response": "#include <stdio.h>\nint main() {\n    char input_str[] = \"Hello, world!\";\n    int length = 0;\n\n    for (int i = 0; input_str[i] != '\\0'; ++i) {\n        length++;\n    }\n\n    printf(\"Length of the string: %d\", length);\n    return 0;}",
        "output": "#include <stdio.h>\nint main() {\n    char input_str[] = \"Hello, world!\";\n    int length = 0;\n\n    for (int i = 0; input_str[i] != '\\0'; ++i) {\n        length++;\n    }\n\n    printf(\"Length of the string: %d\", length);\n    return 0;}"
    },
    {
        "instruction": "How can you implement a Python function that calculates the factorial of a given non-negative integer?",
        "input": "4",
        "response": "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 4\nprint(f'The factorial of {n} is {factorial(n)}')",
        "output": "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 4\nprint(f'The factorial of {n} is {factorial(n)}')"
    },
    {
        "instruction": "Develop a simple Node.js Express API that responds to a GET request at the \"/greetings\" route with the message \"Hello, API user!\".",
        "input": "GET request to /greetings",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/greetings', (req, res) => {\n    res.send('Hello, API user!');});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/greetings', (req, res) => {\n    res.send('Hello, API user!');});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);});"
    },
    {
        "instruction": "Create an SQL query that retrieves the name, age and city columns for all users from a \"Users\" table that live in 'New York' and orders the results by their age in descending order.",
        "input": "Users with city='New York'",
        "response": "SELECT name, age, city\nFROM Users\nWHERE city = 'New York'\nORDER BY age DESC;",
        "output": "SELECT name, age, city\nFROM Users\nWHERE city = 'New York'\nORDER BY age DESC;"
    },
    {
        "instruction": "Write a Python script that calculates and prints the factorial of a given number.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 6\nresult = factorial(n)\nprint(f'The factorial of {n} is: {result}')",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 6\nresult = factorial(n)\nprint(f'The factorial of {n} is: {result}')"
    },
    {
        "instruction": "Create a JavaScript function that reverses a given string and returns the reversed result.",
        "input": "\"wonderful\"",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst input = 'wonderful';\nconst result = reverseString(input);\nconsole.log(`The reversed string is: ${result}`);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst input = 'wonderful';\nconst result = reverseString(input);\nconsole.log(`The reversed string is: ${result}`);"
    },
    {
        "instruction": "How can I write a Java program that reads a text file and prints its content to the console?",
        "input": "\"input.txt\" (Content: 'This is a sample text file.')",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFileExample {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFileExample {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}"
    },
    {
        "instruction": "Write a shell script that prints all even numbers in the range provided as arguments.",
        "input": "2 8",
        "response": "#!/bin/bash\n\nstart=$1\nend=$2\n\nfor ((i=start; i<=end; i++))\ndo\n    if [ $((i%2)) -eq 0 ]\n    then\n        echo $i\n    fi\ndone",
        "output": "#!/bin/bash\n\nstart=$1\nend=$2\n\nfor ((i=start; i<=end; i++))\ndo\n    if [ $((i%2)) -eq 0 ]\n    then\n        echo $i\n    fi\ndone"
    },
    {
        "instruction": "Write a Python script that reads a CSV file and prints the total sum of the values in the second column.",
        "input": "data.csv (contents):\nJohn,4,apple\nDoe,3,orange\nJane,2,banana",
        "response": "import csv\n\ndef sum_second_column(file_name):\n    with open(file_name, 'r') as file:\n        total_sum = 0\n        reader = csv.reader(file)\n        for row in reader:\n            total_sum += int(row[1])\n    return total_sum\n\nprint(sum_second_column('data.csv'))",
        "output": "import csv\n\ndef sum_second_column(file_name):\n    with open(file_name, 'r') as file:\n        total_sum = 0\n        reader = csv.reader(file)\n        for row in reader:\n            total_sum += int(row[1])\n    return total_sum\n\nprint(sum_second_column('data.csv'))"
    },
    {
        "instruction": "Implement a Java class that represents an animal with a name and an age, and create a getter and setter method for each attribute.",
        "input": "animal_name: 'Tiger', animal_age: 3",
        "response": "public class Animal {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }}\n\nAnimal animal = new Animal();\nanimal.setName('Tiger');\nanimal.setAge(3);\n",
        "output": "public class Animal {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }}\n\nAnimal animal = new Animal();\nanimal.setName('Tiger');\nanimal.setAge(3);\n"
    },
    {
        "instruction": "Can you develop a JavaScript function that takes a string and returns the number of vowels in it?",
        "input": "fascinating",
        "response": "function countVowels(str) {\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (const char of str.toLowerCase()) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;}\n\nconst result = countVowels('fascinating');\nconsole.log(result);",
        "output": "function countVowels(str) {\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (const char of str.toLowerCase()) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;}\n\nconst result = countVowels('fascinating');\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program that prompts the user for a positive integer n and then prints all the prime numbers upto n.",
        "input": "10",
        "response": "#include <iostream>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;}\n\nint main() {\n    int n;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> n;\n    for (int i = 0; i <= n; i++) {\n        if (is_prime(i)) {\n            std::cout << i << std::endl;\n        }\n    }\n    return 0;}",
        "output": "#include <iostream>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;}\n\nint main() {\n    int n;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> n;\n    for (int i = 0; i <= n; i++) {\n        if (is_prime(i)) {\n            std::cout << i << std::endl;\n        }\n    }\n    return 0;}"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a given positive integer and display the result.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you update a specific value in a JSON object in JavaScript?",
        "input": "{ \"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\" }",
        "response": "let jsonObject = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"city\": \"New York\"};\n\njsonObject.city = \"San Francisco\";\n\nconsole.log(jsonObject);",
        "output": "let jsonObject = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"city\": \"New York\"};\n\njsonObject.city = \"San Francisco\";\n\nconsole.log(jsonObject);"
    },
    {
        "instruction": "Write a Python program that takes a list of integers, removes duplicate numbers and prints the sorted unique integers.",
        "input": "[3, 2, 1, 5, 3, 5, 7, 5]",
        "response": "def remove_duplicates_and_sort(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers\n\ninput_list = [3, 2, 1, 5, 3, 5, 7, 5]\noutput_list = remove_duplicates_and_sort(input_list)\nprint(output_list)",
        "output": "def remove_duplicates_and_sort(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers\n\ninput_list = [3, 2, 1, 5, 3, 5, 7, 5]\noutput_list = remove_duplicates_and_sort(input_list)\nprint(output_list)"
    },
    {
        "instruction": "Write a shell script that lists all files in the current directory with a specific extension passed to the script as an argument.",
        "input": "*.txt",
        "response": "#!/bin/bash\n\nextension=\"$1\"\n\nfor file in *$extension; do\n    echo $file\ndone",
        "output": "#!/bin/bash\n\nextension=\"$1\"\n\nfor file in *$extension; do\n    echo $file\ndone"
    },
    {
        "instruction": "Write a simple C program that calculates the factorial of an integer using a recursive function.",
        "input": "5",
        "response": "#include <stdio.h>\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d is %d\\n\", num, factorial(num));\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}",
        "output": "#include <stdio.h>\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d is %d\\n\", num, factorial(num));\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}"
    },
    {
        "instruction": "How would you implement a LinkedList class in C++?",
        "input": "",
        "response": "#include <iostream>\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n\n    Node(int d) : data(d), next(nullptr) {}};\n\nclass LinkedList {\npublic:\n    Node* head;\n\n    LinkedList() : head(nullptr) {}\n\n    void insert(int data) {\n        Node* newNode = new Node(data);\n        newNode->next = head;\n        head = newNode;\n    }\n\n    void printList() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            std::cout << temp->data << ' ';\n            temp = temp->next;\n        }\n    }};\n\nint main() {\n    LinkedList list;\n    list.insert(3);\n    list.insert(2);\n    list.insert(1);\n\n    std::cout << \"Linked List: \";\n    list.printList();\n    std::cout << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n\n    Node(int d) : data(d), next(nullptr) {}};\n\nclass LinkedList {\npublic:\n    Node* head;\n\n    LinkedList() : head(nullptr) {}\n\n    void insert(int data) {\n        Node* newNode = new Node(data);\n        newNode->next = head;\n        head = newNode;\n    }\n\n    void printList() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            std::cout << temp->data << ' ';\n            temp = temp->next;\n        }\n    }};\n\nint main() {\n    LinkedList list;\n    list.insert(3);\n    list.insert(2);\n    list.insert(1);\n\n    std::cout << \"Linked List: \";\n    list.printList();\n    std::cout << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Using Python, write a function that determines whether a provided string only contains unique characters.",
        "input": "uniqchars",
        "response": "def has_unique_chars(s):\n    return len(s) == len(set(s))\n\ninput_string = 'uniqchars'\nresult = has_unique_chars(input_string)\nprint(result)",
        "output": "def has_unique_chars(s):\n    return len(s) == len(set(s))\n\ninput_string = 'uniqchars'\nresult = has_unique_chars(input_string)\nprint(result)"
    },
    {
        "instruction": "Write a Shell Script to count the number of lines in a file.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfile=\"file.txt\"\nline_count=$(wc -l < \"${file}\")\necho \"Line count in ${file} is ${line_count}\"",
        "output": "#!/bin/bash\n\nfile=\"file.txt\"\nline_count=$(wc -l < \"${file}\")\necho \"Line count in ${file} is ${line_count}\""
    },
    {
        "instruction": "Write a C++ program that takes a user's input for their name and age, and then outputs a message with that information.",
        "input": "Name: John Doe\nAge: 25",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Hello, \" << name << \"! You are \" << age << \" years old.\" << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Hello, \" << name << \"! You are \" << age << \" years old.\" << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Implement a function in PHP that calculates the factorial of a given non-negative integer.",
        "input": "5",
        "response": "<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$num = 5;\n$result = factorial($num);\necho \"The factorial of \" . $num . \" is \" . $result . \".\";\n?>",
        "output": "<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$num = 5;\n$result = factorial($num);\necho \"The factorial of \" . $num . \" is \" . $result . \".\";\n?>"
    },
    {
        "instruction": "How would you create a React component that displays a list of to-do items from given data?",
        "input": "[\n  {\"id\": 1, \"task\": \"Buy milk\"},\n  {\"id\": 2, \"task\": \"Walk the dog\"},\n  {\"id\": 3, \"task\": \"Complete project\"}\n]",
        "response": "import React from 'react';\n\nconst ToDoList = ({ todos }) => {\n    return (\n        <ul>\n            {todos.map(todo => (\n                <li key={todo.id}>{todo.task}</li>\n            ))}\n        </ul>\n    );};\n\nexport default ToDoList;\n\n// Usage:\n// <ToDoList todos={[\n//     { id: 1, task: 'Buy milk' },\n//     { id: 2, task: 'Walk the dog' },\n//     { id: 3, task: 'Complete project' }\n// ]} />",
        "output": "import React from 'react';\n\nconst ToDoList = ({ todos }) => {\n    return (\n        <ul>\n            {todos.map(todo => (\n                <li key={todo.id}>{todo.task}</li>\n            ))}\n        </ul>\n    );};\n\nexport default ToDoList;\n\n// Usage:\n// <ToDoList todos={[\n//     { id: 1, task: 'Buy milk' },\n//     { id: 2, task: 'Walk the dog' },\n//     { id: 3, task: 'Complete project' }\n// ]} />"
    },
    {
        "instruction": "Create a Bash script that iterates through all the files in a given directory and outputs their total file size in bytes.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndir_path=\"/path/to/directory\"\ntotal_size=0\n\nfor file in \"${dir_path}\"/*; do\n    if [ -f \"${file}\" ]; then\n        file_size=$(stat -c%s \"${file}\")\n        total_size=$((total_size + file_size))\n    fi\ndone\n\necho \"Total file size in bytes: ${total_size}\"",
        "output": "#!/bin/bash\n\ndir_path=\"/path/to/directory\"\ntotal_size=0\n\nfor file in \"${dir_path}\"/*; do\n    if [ -f \"${file}\" ]; then\n        file_size=$(stat -c%s \"${file}\")\n        total_size=$((total_size + file_size))\n    fi\ndone\n\necho \"Total file size in bytes: ${total_size}\""
    },
    {
        "instruction": "Implement a sliding window maximum function in C++ that takes a vector of integers and a window size as input, and returns a vector of maximum values for each window.",
        "input": "std::vector<int> nums = {1, 3, -1, -3, 5, 3, 6, 7}; int window_size = 3;",
        "response": "#include <vector>\n#include <deque>\n#include <iostream>\n\nstd::vector<int> sliding_window_maximum(const std::vector<int>& nums, int window_size) {\n    std::deque<int> dq;\n    std::vector<int> result;\n\n    for (size_t i = 0; i < nums.size(); ++i) {\n        if (!dq.empty() && dq.front() == i - window_size) {\n            dq.pop_front();\n        }\n\n        while (!dq.empty() && nums[dq.back()] < nums[i]) {\n            dq.pop_back();\n        }\n\n        dq.push_back(i);\n\n        if (i >= window_size - 1) {\n            result.push_back(nums[dq.front()]);\n        }\n    }\n    return result;}\n\nint main() {\n    std::vector<int> nums = {1, 3, -1, -3, 5, 3, 6, 7};\n    int window_size = 3;\n\n    std::vector<int> result = sliding_window_maximum(nums, window_size);\n\n    for (const auto& num : result) {\n        std::cout << num << ' ';\n    }}",
        "output": "#include <vector>\n#include <deque>\n#include <iostream>\n\nstd::vector<int> sliding_window_maximum(const std::vector<int>& nums, int window_size) {\n    std::deque<int> dq;\n    std::vector<int> result;\n\n    for (size_t i = 0; i < nums.size(); ++i) {\n        if (!dq.empty() && dq.front() == i - window_size) {\n            dq.pop_front();\n        }\n\n        while (!dq.empty() && nums[dq.back()] < nums[i]) {\n            dq.pop_back();\n        }\n\n        dq.push_back(i);\n\n        if (i >= window_size - 1) {\n            result.push_back(nums[dq.front()]);\n        }\n    }\n    return result;}\n\nint main() {\n    std::vector<int> nums = {1, 3, -1, -3, 5, 3, 6, 7};\n    int window_size = 3;\n\n    std::vector<int> result = sliding_window_maximum(nums, window_size);\n\n    for (const auto& num : result) {\n        std::cout << num << ' ';\n    }}"
    },
    {
        "instruction": "How would you write a Bash script that takes a directory path as input and prints the total number of files and directories within the given directory?",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndir_path=\"$1\"\n\nitem_count=$(ls -l \"${dir_path}\" | wc -l | awk '{print $1 - 1}')\n\necho \"Total number of files and directories: ${item_count}\"\n\n# Usage: ./count_files_and_directories.sh /path/to/directory",
        "output": "#!/bin/bash\n\ndir_path=\"$1\"\n\nitem_count=$(ls -l \"${dir_path}\" | wc -l | awk '{print $1 - 1}')\n\necho \"Total number of files and directories: ${item_count}\"\n\n# Usage: ./count_files_and_directories.sh /path/to/directory"
    },
    {
        "instruction": "Can you develop a Python code snippet that reads a CSV file with pandas, groups the data by a specified column, and then exports each group as a separate CSV file?",
        "input": "filename = 'example.csv'; group_column = 'customer_id'",
        "response": "import pandas as pd\n\nfilename = 'example.csv'\ngroup_column = 'customer_id'\n\ndata = pd.read_csv(filename)\ngrouped_data = data.groupby(group_column)\n\nfor name, group in grouped_data:\n    output_filename = f'group_{name}.csv'\n    group.to_csv(output_filename, index=False)",
        "output": "import pandas as pd\n\nfilename = 'example.csv'\ngroup_column = 'customer_id'\n\ndata = pd.read_csv(filename)\ngrouped_data = data.groupby(group_column)\n\nfor name, group in grouped_data:\n    output_filename = f'group_{name}.csv'\n    group.to_csv(output_filename, index=False)"
    },
    {
        "instruction": "Design a JavaScript API call using Axios to fetch data from a RESTful endpoint, transform the data, and display it on an HTML element with an id 'results'.",
        "input": "endpoint = 'https://api.example.com/data'; element_id = 'results'; data_transform_function = 'processData';",
        "response": "async function fetchData(endpoint, element_id, data_transform_function) {\n    try {\n        const response = await axios.get(endpoint);\n        const data = response.data;\n\n        const processedData = data_transform_function(data);\n\n        document.getElementById(element_id).innerHTML = processedData;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }}\n\nfunction processData(data) {\n    // Perform data transformation\n    // Return transformed_data}\n\nconst endpoint = 'https://api.example.com/data';\nconst element_id = 'results';\n\nfetchData(endpoint, element_id, processData);",
        "output": "async function fetchData(endpoint, element_id, data_transform_function) {\n    try {\n        const response = await axios.get(endpoint);\n        const data = response.data;\n\n        const processedData = data_transform_function(data);\n\n        document.getElementById(element_id).innerHTML = processedData;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }}\n\nfunction processData(data) {\n    // Perform data transformation\n    // Return transformed_data}\n\nconst endpoint = 'https://api.example.com/data';\nconst element_id = 'results';\n\nfetchData(endpoint, element_id, processData);"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a given integer.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a shell script that takes a file path as an argument and prints the number of lines in the file.",
        "input": "/path/to/sample_file.txt",
        "response": "#!/bin/sh\n\nfile_path=$1\nline_count=$(wc -l < \"$file_path\")\necho \"Number of lines in the file: $line_count\"",
        "output": "#!/bin/sh\n\nfile_path=$1\nline_count=$(wc -l < \"$file_path\")\necho \"Number of lines in the file: $line_count\""
    },
    {
        "instruction": "How would you write a Swift function that takes a string as a parameter and returns the string reversed?",
        "input": "\"Hello, world!\"",
        "response": "func reverseString(_ str: String) -> String {\n    return String(str.reversed())\n}\n\nlet reversed = reverseString(\"Hello, world!\")\nprint(reversed)",
        "output": "func reverseString(_ str: String) -> String {\n    return String(str.reversed())\n}\n\nlet reversed = reverseString(\"Hello, world!\")\nprint(reversed)"
    },
    {
        "instruction": "Develop a Python code snippet that reads the contents of a CSV file and subsequently displays the total count of rows as well as the column headers.",
        "input": "sample.csv (with contents):\nName, Age, Gender\nLouis, 35, Male\nEmma, 28, Female\nOliver, 42, Male\n",
        "response": "import csv\n\nwith open('sample.csv', 'r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n    header = next(csv_reader)\n    print(f'Column headers: {header}')\n\n    row_count = sum(1 for row in csv_reader)\n    print(f'Total rows: {row_count}')",
        "output": "import csv\n\nwith open('sample.csv', 'r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n    header = next(csv_reader)\n    print(f'Column headers: {header}')\n\n    row_count = sum(1 for row in csv_reader)\n    print(f'Total rows: {row_count}')"
    },
    {
        "instruction": "Implement a C++ function that takes a string and returns the total count of vowels in the input string.",
        "input": "Sample input: \"The quick brown fox jumps over the lazy dog\"",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint count_vowels(const std::string& input) {\n    int count = 0;\n    std::string vowels = \"AEIOUaeiou\";\n\n    for (char c : input) {\n        if (vowels.find(c) != std::string::npos) {\n            count++;\n        }\n    }\n\n    return count;}\n\nint main() {\n    std::string input = \"The quick brown fox jumps over the lazy dog\";\n    std::cout << count_vowels(input) << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint count_vowels(const std::string& input) {\n    int count = 0;\n    std::string vowels = \"AEIOUaeiou\";\n\n    for (char c : input) {\n        if (vowels.find(c) != std::string::npos) {\n            count++;\n        }\n    }\n\n    return count;}\n\nint main() {\n    std::string input = \"The quick brown fox jumps over the lazy dog\";\n    std::cout << count_vowels(input) << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Can you provide a Python example that uses the requests library to call the OpenWeather API for the current weather in a specified city?",
        "input": "City to use: \"New York\", API Key: \"my_api_key\"",
        "response": "import requests\n\ndef get_weather(api_key, city):\n    base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n    params = {\n        \"appid\": api_key,\n        \"q\": city\n    }\n    response = requests.get(base_url, params=params)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception(\"API call failed\", response.status_code)\n\napi_key = \"my_api_key\"\ncity = \"New York\"\nweather_data = get_weather(api_key, city)\nprint(weather_data)",
        "output": "import requests\n\ndef get_weather(api_key, city):\n    base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n    params = {\n        \"appid\": api_key,\n        \"q\": city\n    }\n    response = requests.get(base_url, params=params)\n\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception(\"API call failed\", response.status_code)\n\napi_key = \"my_api_key\"\ncity = \"New York\"\nweather_data = get_weather(api_key, city)\nprint(weather_data)"
    },
    {
        "instruction": "Write a JavaScript function that asynchronously fetches the contents of a provided URL and returns the JSON response.",
        "input": "URL to fetch: \"https://jsonplaceholder.typicode.com/todos/1\"",
        "response": "async function fetchJson(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;}\n\nconst url = \"https://jsonplaceholder.typicode.com/todos/1\";\nfetchJson(url)\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));",
        "output": "async function fetchJson(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;}\n\nconst url = \"https://jsonplaceholder.typicode.com/todos/1\";\nfetchJson(url)\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));"
    },
    {
        "instruction": "Construct a Shell script that takes two command-line arguments and runs a 'find' command to search for files with the given name in the specified directory.",
        "input": "Directory: \"/home/user/Documents\", File name: \"*.txt\"",
        "response": "#!/bin/bash\n\nif [ \"$#\" -ne 2 ]; then\n    echo \"Usage: $0 <directory> <file-name>\"\n    exit 1\nfi\n\ndirectory=\"$1\"\nfile_name=\"$2\"\n\nfind \"$directory\" -name \"$file_name\"",
        "output": "#!/bin/bash\n\nif [ \"$#\" -ne 2 ]; then\n    echo \"Usage: $0 <directory> <file-name>\"\n    exit 1\nfi\n\ndirectory=\"$1\"\nfile_name=\"$2\"\n\nfind \"$directory\" -name \"$file_name\""
    },
    {
        "instruction": "Write a C++ program that reads an integer n, and then outputs the first n even numbers.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    for (int i = 1; i <= n; ++i) {\n        cout << 2 * i << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    for (int i = 1; i <= n; ++i) {\n        cout << 2 * i << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "How would you create a Python function that takes a list of words and returns them as a single string, with each word capitalized?",
        "input": "['hello', 'world']",
        "response": "def capitalize_and_join_words(words):\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nresult = capitalize_and_join_words(['hello', 'world'])\nprint(result)",
        "output": "def capitalize_and_join_words(words):\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nresult = capitalize_and_join_words(['hello', 'world'])\nprint(result)"
    },
    {
        "instruction": "Fix the syntax and logic in this JavaScript function to calculate the factorial of a given non-negative integer n.",
        "input": "function factorial1(n) { if (n == 0) { return 1 } else { return n * factorial(n - 2) } };",
        "response": "function factorial(n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nconsole.log(factorial(5));",
        "output": "function factorial(n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nconsole.log(factorial(5));"
    },
    {
        "instruction": "Develop a Bash script that reads a file line by line and counts the number of lines containing the word 'error'.",
        "input": "input.txt (file content: 'There was an error\\nNo error found\\nAnother error occurred\\n')",
        "response": "#!/bin/bash\n\nFILE=input.txt\nERROR_COUNT=0\n\nwhile read LINE; do\n  if [[ $LINE == *'error'* ]]; then\n    ((ERROR_COUNT++))\n  fi\ndone < $FILE\n\necho \"Number of lines containing 'error': $ERROR_COUNT\"",
        "output": "#!/bin/bash\n\nFILE=input.txt\nERROR_COUNT=0\n\nwhile read LINE; do\n  if [[ $LINE == *'error'* ]]; then\n    ((ERROR_COUNT++))\n  fi\ndone < $FILE\n\necho \"Number of lines containing 'error': $ERROR_COUNT\""
    },
    {
        "instruction": "Write a Python function that takes a list of integers as input and returns a dictionary containing the count of even and odd numbers.",
        "input": "[1, 2, 3, 4, 5, 6, 7]",
        "response": "def count_even_odd(numbers):\n    even = 0\n    odd = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return {'even': even, 'odd': odd}\n\nresult = count_even_odd([1, 2, 3, 4, 5, 6, 7])\nprint(result)",
        "output": "def count_even_odd(numbers):\n    even = 0\n    odd = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return {'even': even, 'odd': odd}\n\nresult = count_even_odd([1, 2, 3, 4, 5, 6, 7])\nprint(result)"
    },
    {
        "instruction": "Design a C++ program that calculates the area of a circle when given the radius.",
        "input": "5",
        "response": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.141592653589793;\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double radius = 5;\n    double area = circle_area(radius);\n    std::cout << \"Area of circle: \" << area << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.141592653589793;\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double radius = 5;\n    double area = circle_area(radius);\n    std::cout << \"Area of circle: \" << area << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you fix a JavaScript function that should return true if a number is positive, but currently returns true for zero as well?",
        "input": "function isPositive(number) {\n    return number >= 0;}",
        "response": "function isPositive(number) {\n    return number > 0;}",
        "output": "function isPositive(number) {\n    return number > 0;}"
    },
    {
        "instruction": "Implement a Shell script to count the number of files and directories in a given directory.",
        "input": "/usr/local/bin",
        "response": "#!/bin/bash\n\ntarget_directory='/usr/local/bin'\ndirectories_count=0\nfiles_count=0\n\nfor entry in \"$target_directory\"/*; do\n    if [ -d \"$entry\" ]; then\n        directories_count=$((directories_count+1))\n    elif [ -f \"$entry\" ]; then\n        files_count=$((files_count+1))\n    fi\ndone\n\necho \"Directories count: $directories_count\"\necho \"Files count: $files_count\"",
        "output": "#!/bin/bash\n\ntarget_directory='/usr/local/bin'\ndirectories_count=0\nfiles_count=0\n\nfor entry in \"$target_directory\"/*; do\n    if [ -d \"$entry\" ]; then\n        directories_count=$((directories_count+1))\n    elif [ -f \"$entry\" ]; then\n        files_count=$((files_count+1))\n    fi\ndone\n\necho \"Directories count: $directories_count\"\necho \"Files count: $files_count\""
    },
    {
        "instruction": "Implement a C++ function that takes a vector of integers and returns a vector with the square of each element.",
        "input": "{4, 5, 6}",
        "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> square_elements(const vector<int>& input) {\n    vector<int> result;\n    for (int num : input) {\n        result.push_back(num * num);\n    }\n    return result;}\n\nint main() {\n    vector<int> input = {4, 5, 6};\n    vector<int> output = square_elements(input);\n    for (int num : output) {\n        cout << num << ' ';\n    }\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> square_elements(const vector<int>& input) {\n    vector<int> result;\n    for (int num : input) {\n        result.push_back(num * num);\n    }\n    return result;}\n\nint main() {\n    vector<int> input = {4, 5, 6};\n    vector<int> output = square_elements(input);\n    for (int num : output) {\n        cout << num << ' ';\n    }\n    return 0;}"
    },
    {
        "instruction": "How would you convert a Python string into a list of words? Please provide a code sample.",
        "input": "'The quick brown fox jumps over the lazy dog'",
        "response": "input_string = 'The quick brown fox jumps over the lazy dog'\nwords_list = input_string.split()\n\nprint(words_list)",
        "output": "input_string = 'The quick brown fox jumps over the lazy dog'\nwords_list = input_string.split()\n\nprint(words_list)"
    },
    {
        "instruction": "In C#, create a method that calculates the factorial of a given non-negative integer.",
        "input": "5",
        "response": "using System;\n\nclass Program {\n    static long Factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * Factorial(n - 1);\n    }\n\n    static void Main() {\n        int input = 5;\n        long result = Factorial(input);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\n\nclass Program {\n    static long Factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * Factorial(n - 1);\n    }\n\n    static void Main() {\n        int input = 5;\n        long result = Factorial(input);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "Write a Shell script that reads a user's input and checks if the entered value is an even or odd number.",
        "input": "8",
        "response": "#!/bin/bash\n\necho 'Enter a number:'\nread num\n\nif [ $((num % 2)) -eq 0 ]; then\n    echo 'The number is even.'\nelse\n    echo 'The number is odd.'\nfi",
        "output": "#!/bin/bash\n\necho 'Enter a number:'\nread num\n\nif [ $((num % 2)) -eq 0 ]; then\n    echo 'The number is even.'\nelse\n    echo 'The number is odd.'\nfi"
    },
    {
        "instruction": "How would you implement a method in Swift that accepts a string and returns true if its characters are unique?",
        "input": "\"hello\"",
        "response": "import Foundation\n\nfunc hasUniqueChars(_ str: String) -> Bool {\n    var charSet: Set<Character> = []\n    for ch in str {\n        if charSet.contains(ch) {\n            return false\n        } else {\n            charSet.insert(ch)\n        }\n    }\n    return true}\n\nlet result = hasUniqueChars(\"hello\")\nprint(result)",
        "output": "import Foundation\n\nfunc hasUniqueChars(_ str: String) -> Bool {\n    var charSet: Set<Character> = []\n    for ch in str {\n        if charSet.contains(ch) {\n            return false\n        } else {\n            charSet.insert(ch)\n        }\n    }\n    return true}\n\nlet result = hasUniqueChars(\"hello\")\nprint(result)"
    },
    {
        "instruction": "Create a PHP function that takes a string and reverses its order while preserving the upper and lower case.",
        "input": "\"HelloWorld\"",
        "response": "<?php\n\nfunction reverse_preserve_case($str) {\n    $revStr = strrev($str);\n    $result = '';\n    \n    for ($i = 0; $i < strlen($str); $i++) {\n        if (ctype_upper($str[$i])) {\n            $result .= strtoupper($revStr[$i]);\n        } else {\n            $result .= strtolower($revStr[$i]);\n        }\n    }\n    return $result;}\n\n$input = \"HelloWorld\";\n$output = reverse_preserve_case($input);\necho $output;\n\n?>",
        "output": "<?php\n\nfunction reverse_preserve_case($str) {\n    $revStr = strrev($str);\n    $result = '';\n    \n    for ($i = 0; $i < strlen($str); $i++) {\n        if (ctype_upper($str[$i])) {\n            $result .= strtoupper($revStr[$i]);\n        } else {\n            $result .= strtolower($revStr[$i]);\n        }\n    }\n    return $result;}\n\n$input = \"HelloWorld\";\n$output = reverse_preserve_case($input);\necho $output;\n\n?>"
    },
    {
        "instruction": "Write a shell script that gets the current date and time and prints it in the following format: 'YYYY-MM-DD HH:MM:SS'",
        "input": "",
        "response": "#!/bin/bash\n\ncurrent_datetime=$(date '+%Y-%m-%d %H:%M:%S')\necho $current_datetime",
        "output": "#!/bin/bash\n\ncurrent_datetime=$(date '+%Y-%m-%d %H:%M:%S')\necho $current_datetime"
    },
    {
        "instruction": "Write a Python function that reads a CSV file and prints the unique values in the specified column.",
        "input": "sample.csv, 2",
        "response": "import csv\n\ndef print_unique_values(file_path, column):\n    unique_values = set()\n    with open(file_path, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header\n\n        for row in reader:\n            unique_values.add(row[column])\n\n    for value in unique_values:\n        print(value)\n\nprint_unique_values('sample.csv', 2)",
        "output": "import csv\n\ndef print_unique_values(file_path, column):\n    unique_values = set()\n    with open(file_path, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header\n\n        for row in reader:\n            unique_values.add(row[column])\n\n    for value in unique_values:\n        print(value)\n\nprint_unique_values('sample.csv', 2)"
    },
    {
        "instruction": "Create a C++ program that takes an integer n as input and prints the fibonacci series up to the nth term.",
        "input": "7",
        "response": "#include <iostream>\n\nvoid print_fibonacci(int n) {\n    int a = 0, b = 1, temp;\n\n    for(int i = 1; i <= n; i++) {\n        std::cout << a << ' ';\n        temp = a + b;\n        a = b;\n        b = temp;\n    }}\n\nint main() {\n    int n;\n    std::cin >> n;\n    print_fibonacci(n);\n\n    return 0;}",
        "output": "#include <iostream>\n\nvoid print_fibonacci(int n) {\n    int a = 0, b = 1, temp;\n\n    for(int i = 1; i <= n; i++) {\n        std::cout << a << ' ';\n        temp = a + b;\n        a = b;\n        b = temp;\n    }}\n\nint main() {\n    int n;\n    std::cin >> n;\n    print_fibonacci(n);\n\n    return 0;}"
    },
    {
        "instruction": "Develop a JavaScript function that accepts an object and a key as its input and returns the value of the key in the object. If the key does not exist, it should return false.",
        "input": "{ name: 'John Doe', age: 25, location: 'New York' }, 'age'",
        "response": "function getValueByKey(obj, key) {\n    return obj.hasOwnProperty(key) ? obj[key] : false;}\n\nconst obj = {\n    name: 'John Doe',\n    age: 25,\n    location: 'New York'};\n\nconst result = getValueByKey(obj, 'age');\nconsole.log(result);",
        "output": "function getValueByKey(obj, key) {\n    return obj.hasOwnProperty(key) ? obj[key] : false;}\n\nconst obj = {\n    name: 'John Doe',\n    age: 25,\n    location: 'New York'};\n\nconst result = getValueByKey(obj, 'age');\nconsole.log(result);"
    },
    {
        "instruction": "Create a shell script that takes a directory path as an argument and lists all the files along with their size and creation date in the provided directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\ndirectory=$1\n\nif [ ! -d \"$directory\" ]; then\n    echo \"Invalid directory\"\n    exit 1\nfi\n\nfor file in \"$directory\"/*; do\n    size=$(stat -c%s \"$file\")\n    creation_date=$(stat -c%w \"$file\")\n    echo \"File: $file | Size: $size bytes | Creation date: $creation_date\"\ndone\n\n# Usage: ./list_files.sh /path/to/directory",
        "output": "#!/bin/bash\ndirectory=$1\n\nif [ ! -d \"$directory\" ]; then\n    echo \"Invalid directory\"\n    exit 1\nfi\n\nfor file in \"$directory\"/*; do\n    size=$(stat -c%s \"$file\")\n    creation_date=$(stat -c%w \"$file\")\n    echo \"File: $file | Size: $size bytes | Creation date: $creation_date\"\ndone\n\n# Usage: ./list_files.sh /path/to/directory"
    },
    {
        "instruction": "Write a C++ program that prompts the user for two integers and calculates their greatest common divisor.",
        "input": "56, 98",
        "response": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);}\n\nint main() {\n    int num1, num2;\n\n    cout << \"Enter first integer: \";\n    cin >> num1;\n    cout << \"Enter second integer: \";\n    cin >> num2;\n\n    cout << \"GCD: \" << gcd(num1, num2) << endl;\n\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);}\n\nint main() {\n    int num1, num2;\n\n    cout << \"Enter first integer: \";\n    cin >> num1;\n    cout << \"Enter second integer: \";\n    cin >> num2;\n\n    cout << \"GCD: \" << gcd(num1, num2) << endl;\n\n    return 0;}"
    },
    {
        "instruction": "Develop a Python script that reads a CSV file and outputs the rows with a specific column value.",
        "input": "example.csv, column2, value1",
        "response": "import csv\n\ndef filter_csv_file(file_name, column_name, filter_value):\n    with open(file_name, newline='', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n        column_index = reader.fieldnames.index(column_name)\n\n        for row in reader:\n            if row[column_index] == filter_value:\n                print(row)\n\nfile_path = 'example.csv'\ncolumn_to_filter = 'column2'\nvalue_to_filter = 'value1'\nfilter_csv_file(file_path, column_to_filter, value_to_filter)",
        "output": "import csv\n\ndef filter_csv_file(file_name, column_name, filter_value):\n    with open(file_name, newline='', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n        column_index = reader.fieldnames.index(column_name)\n\n        for row in reader:\n            if row[column_index] == filter_value:\n                print(row)\n\nfile_path = 'example.csv'\ncolumn_to_filter = 'column2'\nvalue_to_filter = 'value1'\nfilter_csv_file(file_path, column_to_filter, value_to_filter)"
    },
    {
        "instruction": "Implement a function in JavaScript that takes an array of user objects with 'id', 'name', and 'age' properties and returns a new array with users older than 30.",
        "input": "[{ \"id\": 1, \"name\": \"John\", \"age\": 25 }, { \"id\": 2, \"name\": \"Jane\", \"age\": 32 }, { \"id\": 3, \"name\": \"Emma\", \"age\": 29 }]",
        "response": "function filterUsersByAge(users, ageLimit) {\n    return users.filter(({ age }) => age > ageLimit);}\n\nconst userArray = [\n    { id: 1, name: 'John', age: 25 },\n    { id: 2, name: 'Jane', age: 32 },\n    { id: 3, name: 'Emma', age: 29 }\n];\n\nconst result = filterUsersByAge(userArray, 30);\nconsole.log(result);",
        "output": "function filterUsersByAge(users, ageLimit) {\n    return users.filter(({ age }) => age > ageLimit);}\n\nconst userArray = [\n    { id: 1, name: 'John', age: 25 },\n    { id: 2, name: 'Jane', age: 32 },\n    { id: 3, name: 'Emma', age: 29 }\n];\n\nconst result = filterUsersByAge(userArray, 30);\nconsole.log(result);"
    },
    {
        "instruction": "Fix a syntax error in the given PHP code to create a function that reverses an input string and returns the reversed string.",
        "input": "<?php\nfunction reverseStr($input) :\n    return strrev($input);\n\n$sample = \"Hello\";\necho reverseStr($sample);\n?>",
        "response": "<?php\nfunction reverseStr($input) {\n    return strrev($input);}\n\n$sample = \"Hello\";\necho reverseStr($sample);\n?>",
        "output": "<?php\nfunction reverseStr($input) {\n    return strrev($input);}\n\n$sample = \"Hello\";\necho reverseStr($sample);\n?>"
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of a given integer using a recursive function.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a simple HTTP server in Python that responds with 'Hello, World!' for any request.",
        "input": "",
        "response": "import http.server\nimport socketserver\n\nclass SimpleRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, World!')\n\nPORT = 8000\n\nwith socketserver.TCPServer(('', PORT), SimpleRequestHandler) as httpd:\n    print('serving at port', PORT)\n    httpd.serve_forever()",
        "output": "import http.server\nimport socketserver\n\nclass SimpleRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, World!')\n\nPORT = 8000\n\nwith socketserver.TCPServer(('', PORT), SimpleRequestHandler) as httpd:\n    print('serving at port', PORT)\n    httpd.serve_forever()"
    },
    {
        "instruction": "How would you create a JavaScript function that orders an array of objects based on the value of a provided property?",
        "input": "[{name: 'Alice', age: 30}, {name: 'Bob', age: 25}, {name: 'Carol', age: 35}], 'age'",
        "response": "function sortByProperty(arr, property) {\n    return arr.sort((a, b) => a[property] - b[property]);}\n\nconst people = [{name: 'Alice', age: 30}, {name: 'Bob', age: 25}, {name: 'Carol', age: 35}];\nconst sortedByAge = sortByProperty(people, 'age');\nconsole.log(sortedByAge);",
        "output": "function sortByProperty(arr, property) {\n    return arr.sort((a, b) => a[property] - b[property]);}\n\nconst people = [{name: 'Alice', age: 30}, {name: 'Bob', age: 25}, {name: 'Carol', age: 35}];\nconst sortedByAge = sortByProperty(people, 'age');\nconsole.log(sortedByAge);"
    },
    {
        "instruction": "Create a Shell script that takes a directory path as an argument and prints the total number of files in the directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nDIRECTORY=$1\nFILE_COUNT=$(find $DIRECTORY -type f | wc -l)\n\necho \"Total number of files in $DIRECTORY: $FILE_COUNT\"",
        "output": "#!/bin/bash\n\nDIRECTORY=$1\nFILE_COUNT=$(find $DIRECTORY -type f | wc -l)\n\necho \"Total number of files in $DIRECTORY: $FILE_COUNT\""
    },
    {
        "instruction": "Design a Python class that represents a basic banking system with two methods: deposit and withdraw.",
        "input": "my_account = BankAccount()\nmy_account.deposit(100)\nmy_account.withdraw(50)",
        "response": "class BankAccount:\n    def __init__(self):\n        self.balance = 0\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print('Insufficient balance')\n\nmy_account = BankAccount()\nmy_account.deposit(100)\nmy_account.withdraw(50)\nprint(my_account.balance)",
        "output": "class BankAccount:\n    def __init__(self):\n        self.balance = 0\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print('Insufficient balance')\n\nmy_account = BankAccount()\nmy_account.deposit(100)\nmy_account.withdraw(50)\nprint(my_account.balance)"
    },
    {
        "instruction": "What would be a JavaScript code snippet for a function that takes a user's age and returns their birth year?",
        "input": "const age = 25;",
        "response": "function calculateBirthYear(age) {\n    const currentYear = new Date().getFullYear();\n    return currentYear - age;}\n\nconst age = 25;\nconst birthYear = calculateBirthYear(age);\nconsole.log(birthYear);",
        "output": "function calculateBirthYear(age) {\n    const currentYear = new Date().getFullYear();\n    return currentYear - age;}\n\nconst age = 25;\nconst birthYear = calculateBirthYear(age);\nconsole.log(birthYear);"
    },
    {
        "instruction": "Provide a C# method to perform URL encoding on a given string using the 'System.Net' namespace.",
        "input": "string input = \"Hello, World! 123?\";",
        "response": "using System;\nusing System.Net;\n\nclass UrlEncoder\n{\n    public static string EncodeUrl(string input)\n    {\n        return WebUtility.UrlEncode(input);\n    }\n\n    public static void Main()\n    {\n        string input = \"Hello, World! 123?\";\n        string encodedUrl = EncodeUrl(input);\n        Console.WriteLine(encodedUrl);\n    }}",
        "output": "using System;\nusing System.Net;\n\nclass UrlEncoder\n{\n    public static string EncodeUrl(string input)\n    {\n        return WebUtility.UrlEncode(input);\n    }\n\n    public static void Main()\n    {\n        string input = \"Hello, World! 123?\";\n        string encodedUrl = EncodeUrl(input);\n        Console.WriteLine(encodedUrl);\n    }}"
    },
    {
        "instruction": "Write a Bash script that takes two command line arguments: a directory path and an extension, and lists all files with that extension in the given directory.",
        "input": "directory_path='/my_path' extension='txt'",
        "response": "#!/bin/bash\n\ndirectory_path=\"$1\"\nextension=\"$2\"\n\nif [ -d \"$directory_path\" ]; then\n    find \"$directory_path\" -type f -iname \"*.${extension}\"\nelse\n    echo 'Directory not found'\nfi\n\n# Usage: ./script.sh /my_path txt",
        "output": "#!/bin/bash\n\ndirectory_path=\"$1\"\nextension=\"$2\"\n\nif [ -d \"$directory_path\" ]; then\n    find \"$directory_path\" -type f -iname \"*.${extension}\"\nelse\n    echo 'Directory not found'\nfi\n\n# Usage: ./script.sh /my_path txt"
    },
    {
        "instruction": "Implement a C++ function that computes the factorial of a given integer.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you create a simple API in Django that returns a list of user objects?",
        "input": "Available User data: [{'id': 1,'username': 'John'},{'id': 2,'username': 'Jane'}]",
        "response": "# First, create a new Django project and app. Make sure you have Django and Django Rest Framework installed.\n# In your app, create a new file called 'models.py' and add the following code:\n\nfrom django.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=30)\n\n# In 'serializers.py':\n\nfrom rest_framework import serializers\nfrom .models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\n\n# In 'views.py':\n\nfrom rest_framework import generics\nfrom .models import User\nfrom .serializers import UserSerializer\n\nclass UserList(generics.ListCreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n# Now, create a new file called 'urls.py' in your app and add the following code:\n\nfrom django.urls import path\nfrom .views import UserList\n\nurlpatterns = [\n    path('users/', UserList.as_view(), name='user_list'),\n]\n\n# Finally, include the app's urls in project's 'urls.py':\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('your_app_name.urls')),\n]",
        "output": "# First, create a new Django project and app. Make sure you have Django and Django Rest Framework installed.\n# In your app, create a new file called 'models.py' and add the following code:\n\nfrom django.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=30)\n\n# In 'serializers.py':\n\nfrom rest_framework import serializers\nfrom .models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\n\n# In 'views.py':\n\nfrom rest_framework import generics\nfrom .models import User\nfrom .serializers import UserSerializer\n\nclass UserList(generics.ListCreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n# Now, create a new file called 'urls.py' in your app and add the following code:\n\nfrom django.urls import path\nfrom .views import UserList\n\nurlpatterns = [\n    path('users/', UserList.as_view(), name='user_list'),\n]\n\n# Finally, include the app's urls in project's 'urls.py':\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('your_app_name.urls')),\n]"
    },
    {
        "instruction": "Write a recursive function in Haskell that computes the Fibonacci sequence of a number.",
        "input": "10",
        "response": "fibonacci :: Integer -> Integer\nfibonacci n\n  | n == 0 = 0\n  | n == 1 = 1\n  | n > 1  = fibonacci (n - 1) + fibonacci (n - 2)\n\nmain :: IO ()\nmain = do\n    let result = fibonacci 10\n    print result",
        "output": "fibonacci :: Integer -> Integer\nfibonacci n\n  | n == 0 = 0\n  | n == 1 = 1\n  | n > 1  = fibonacci (n - 1) + fibonacci (n - 2)\n\nmain :: IO ()\nmain = do\n    let result = fibonacci 10\n    print result"
    },
    {
        "instruction": "Design a Python script that reads a given CSV file and calculates the average of a specific column.",
        "input": "CSV data: 'data.csv'\nName,Score\nAlice,85\nBob,72\nCharlie,90\n",
        "response": "import csv\n\ndef calculate_average(filename, column_name):\n    column_sum = 0\n    row_count = 0\n\n    with open(filename, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            column_sum += int(row[column_name])\n            row_count += 1\n\n    return column_sum / row_count if row_count > 0 else 0\n\nif __name__ == '__main__':\n    average_score = calculate_average('data.csv', 'Score')\n    print('Average Score:', average_score)",
        "output": "import csv\n\ndef calculate_average(filename, column_name):\n    column_sum = 0\n    row_count = 0\n\n    with open(filename, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            column_sum += int(row[column_name])\n            row_count += 1\n\n    return column_sum / row_count if row_count > 0 else 0\n\nif __name__ == '__main__':\n    average_score = calculate_average('data.csv', 'Score')\n    print('Average Score:', average_score)"
    },
    {
        "instruction": "Develop a Python script that reads a text file, counts the occurrences of each word, and prints the ten most frequently occurring words.",
        "input": "file.txt containing following content:\nOnce upon a time, there was a beautiful princess. The beautiful princess lived in a big, beautiful castle.",
        "response": "import collections\n\nwith open('file.txt', 'r') as file:\n    words = file.read().lower().split()\n    word_count = collections.Counter(words)\n    ten_most_common = word_count.most_common(10)\n\nfor word, count in ten_most_common:\n    print(f'{word}: {count}')",
        "output": "import collections\n\nwith open('file.txt', 'r') as file:\n    words = file.read().lower().split()\n    word_count = collections.Counter(words)\n    ten_most_common = word_count.most_common(10)\n\nfor word, count in ten_most_common:\n    print(f'{word}: {count}')"
    },
    {
        "instruction": "Write a JavaScript function that merges two sorted arrays into a single, sorted array.",
        "input": "[1, 3, 5], [2, 4, 6]",
        "response": "function mergeSortedArrays(arr1, arr2) {\n  let result = [];\n  let i = 0, j = 0;\n\n  while (i < arr1.length && j < arr2.length) { \n      if (arr1[i] < arr2[j]) { \n          result.push(arr1[i]);\n          i++; \n      } else { \n          result.push(arr2[j]); \n          j++; \n      } \n  } \n\n  while (i < arr1.length) {\n    result.push(arr1[i]);\n    i++;\n  }\n\n  while (j < arr2.length) {\n    result.push(arr2[j]);\n    j++;\n  }\n\n  return result;\n}\n\nconsole.log(mergeSortedArrays([1, 3, 5], [2, 4, 6]));",
        "output": "function mergeSortedArrays(arr1, arr2) {\n  let result = [];\n  let i = 0, j = 0;\n\n  while (i < arr1.length && j < arr2.length) { \n      if (arr1[i] < arr2[j]) { \n          result.push(arr1[i]);\n          i++; \n      } else { \n          result.push(arr2[j]); \n          j++; \n      } \n  } \n\n  while (i < arr1.length) {\n    result.push(arr1[i]);\n    i++;\n  }\n\n  while (j < arr2.length) {\n    result.push(arr2[j]);\n    j++;\n  }\n\n  return result;\n}\n\nconsole.log(mergeSortedArrays([1, 3, 5], [2, 4, 6]));"
    },
    {
        "instruction": "Create a program in C++ that determines if a number is prime or not.",
        "input": "17",
        "response": "#include <iostream>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int number = 17;\n    std::cout << \"Number \" << number << \" is \" << (is_prime(number) ? \"prime\" : \"not prime\") << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int number = 17;\n    std::cout << \"Number \" << number << \" is \" << (is_prime(number) ? \"prime\" : \"not prime\") << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Can you write a simple HTTP server using Node.js that listens on port 3000 and responds with 'Hello, World!'?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://127.0.0.1:3000/');\n});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://127.0.0.1:3000/');\n});"
    },
    {
        "instruction": "Write a C++ program that takes a user's input for their name and age, then outputs it.",
        "input": "John Doe, 25",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Name: \" << name << \", Age: \" << age << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Name: \" << name << \", Age: \" << age << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a Shell Script that lists all hidden files in the current directory.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in .*\ndo\n    if [ -f \"$file\" ]; then\n        echo \"$file\"\n    fi\ndone",
        "output": "#!/bin/bash\n\nfor file in .*\ndo\n    if [ -f \"$file\" ]; then\n        echo \"$file\"\n    fi\ndone"
    },
    {
        "instruction": "How can I calculate the factorial of a number using a recursive function in JavaScript?",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Fix the following Python code to successfully calculate the square of a given integer.",
        "input": "def square(num)\n    product = num * num\nreturn product\n\nresult = square(4)",
        "response": "def square(num):\n    product = num * num\n    return product\n\nresult = square(4)\nprint(result)",
        "output": "def square(num):\n    product = num * num\n    return product\n\nresult = square(4)\nprint(result)"
    },
    {
        "instruction": "Show a C# function that takes a list of integers and returns the average value as a double.",
        "input": "List<int> numbers = new List<int>{4, 7, 15, 32, 8};",
        "response": "public static double CalculateAverage(List<int> numbers)\n{\n    double sum = 0;\n    foreach (int number in numbers)\n    {\n        sum += number;\n    }\n    return sum / numbers.Count;}\n\nList<int> numbers = new List<int>{4, 7, 15, 32, 8};\ndouble average = CalculateAverage(numbers);\nConsole.WriteLine(average);",
        "output": "public static double CalculateAverage(List<int> numbers)\n{\n    double sum = 0;\n    foreach (int number in numbers)\n    {\n        sum += number;\n    }\n    return sum / numbers.Count;}\n\nList<int> numbers = new List<int>{4, 7, 15, 32, 8};\ndouble average = CalculateAverage(numbers);\nConsole.WriteLine(average);"
    },
    {
        "instruction": "Can you write a Python script that computes the nth Fibonacci number, given an input n?",
        "input": "9",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 9\nresult = fibonacci(n)\nprint(f'The {n}th Fibonacci number is: {result}')",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 9\nresult = fibonacci(n)\nprint(f'The {n}th Fibonacci number is: {result}')"
    },
    {
        "instruction": "Generate a JavaScript function that takes a user-defined callback and an array of numbers, applies the callback to each element, and returns the modified array.",
        "input": "function square(x) { return x * x; }\n[1, 2, 3]",
        "response": "function mapArray(arr, callback) {\n    const modifiedArray = [];\n    for (const element of arr) {\n        modifiedArray.push(callback(element));\n    }\n    return modifiedArray;}\n\nfunction square(x) {\n    return x * x;}\n\nconst numbers = [1, 2, 3];\nconst transformedNumbers = mapArray(numbers, square);\nconsole.log(transformedNumbers);",
        "output": "function mapArray(arr, callback) {\n    const modifiedArray = [];\n    for (const element of arr) {\n        modifiedArray.push(callback(element));\n    }\n    return modifiedArray;}\n\nfunction square(x) {\n    return x * x;}\n\nconst numbers = [1, 2, 3];\nconst transformedNumbers = mapArray(numbers, square);\nconsole.log(transformedNumbers);"
    },
    {
        "instruction": "Write a PHP function that takes a URL as input and returns the domain name without the 'www.' prefix.",
        "input": "https://www.example.com/somepage",
        "response": "<?php\nfunction extractDomainFromUrl($url) \n{\n    $parsedUrl = parse_url($url);\n    $domain = $parsedUrl['host'];\n    return preg_replace('/^www\\./', '', $domain);}\n\n$url = 'https://www.example.com/somepage';\n$domain = extractDomainFromUrl($url);\necho $domain;\n?>",
        "output": "<?php\nfunction extractDomainFromUrl($url) \n{\n    $parsedUrl = parse_url($url);\n    $domain = $parsedUrl['host'];\n    return preg_replace('/^www\\./', '', $domain);}\n\n$url = 'https://www.example.com/somepage';\n$domain = extractDomainFromUrl($url);\necho $domain;\n?>"
    },
    {
        "instruction": "Construct a C program that reads an integer input and calculates the factorial of that number.",
        "input": "5",
        "response": "#include<stdio.h>\n\nint main() {\n    int n, i, factorial = 1;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    printf(\"Factorial of %d: %d\\n\", n, factorial);\n    return 0;}",
        "output": "#include<stdio.h>\n\nint main() {\n    int n, i, factorial = 1;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    printf(\"Factorial of %d: %d\\n\", n, factorial);\n    return 0;}"
    },
    {
        "instruction": "Write a Python function that checks if a given number is a prime number.",
        "input": "37",
        "response": "def is_prime(n):\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nresult = is_prime(37)\nprint(result)",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nresult = is_prime(37)\nprint(result)"
    },
    {
        "instruction": "How can I implement a simple REST API that returns the current date and time in JavaScript (Node.js)?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/current_datetime', (req, res) => {\n    const current_datetime = new Date().toISOString();\n    res.json({ 'current_datetime': current_datetime });});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/current_datetime', (req, res) => {\n    const current_datetime = new Date().toISOString();\n    res.json({ 'current_datetime': current_datetime });});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});"
    },
    {
        "instruction": "Write a SQL query to retrieve all employees with a salary greater than 50000 from the 'employees' table.",
        "input": "employees (id, name, title, salary)",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "Write a C++ program that reads in three integer values from the user and displays their sum.",
        "input": "4, 10, 6",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c, sum;\n    cout << \"Enter three integer values: \";\n    cin >> a >> b >> c;\n    sum = a + b + c;\n    cout << \"The sum is: \" << sum << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c, sum;\n    cout << \"Enter three integer values: \";\n    cin >> a >> b >> c;\n    sum = a + b + c;\n    cout << \"The sum is: \" << sum << endl;\n    return 0;}"
    },
    {
        "instruction": "In Python, how would one extract the month from a given date string following the format 'YYYY-MM-DD'?",
        "input": "'2022-09-14'",
        "response": "def extract_month(date_str):\n    return int(date_str.split('-')[1])\n\ndate = '2022-09-14'\nmonth = extract_month(date)\nprint(month)",
        "output": "def extract_month(date_str):\n    return int(date_str.split('-')[1])\n\ndate = '2022-09-14'\nmonth = extract_month(date)\nprint(month)"
    },
    {
        "instruction": "Develop a JavaScript function that returns the n-th Fibonacci number using recursion.",
        "input": "5",
        "response": "function fibonacci(n) {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nconst n = 5;\nconst nthFibonacci = fibonacci(n);\nconsole.log(nthFibonacci);",
        "output": "function fibonacci(n) {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nconst n = 5;\nconst nthFibonacci = fibonacci(n);\nconsole.log(nthFibonacci);"
    },
    {
        "instruction": "Create a Shell script that lists all files in a directory sorted by their size.",
        "input": "",
        "response": "#!/bin/bash\n\nls -lSh",
        "output": "#!/bin/bash\n\nls -lSh"
    },
    {
        "instruction": "Write a Python function to find the factorial of a given number using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Develop a C++ program that takes an integer and returns its hexadecimal representation.",
        "input": "267",
        "response": "#include <iostream>\n#include <sstream>\n\nstd::string int_to_hex(int num) {\n    std::stringstream sstream;\n    sstream << std::hex << num;\n    return sstream.str();}\n\nint main() {\n    int num = 267;\n    std::string hex_representation = int_to_hex(num);\n    std::cout << hex_representation;}",
        "output": "#include <iostream>\n#include <sstream>\n\nstd::string int_to_hex(int num) {\n    std::stringstream sstream;\n    sstream << std::hex << num;\n    return sstream.str();}\n\nint main() {\n    int num = 267;\n    std::string hex_representation = int_to_hex(num);\n    std::cout << hex_representation;}"
    },
    {
        "instruction": "Implement a C# method to reverse a string",
        "input": "\"hello\"",
        "response": "using System;\n\npublic class StringReversal\n{\n    public string ReverseString(string input)\n    {\n        char[] charArray = input.ToCharArray();\n        Array.Reverse(charArray);\n        return new string(charArray);\n    }}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        StringReversal reverse = new StringReversal();\n        string input = \"hello\";\n        string output = reverse.ReverseString(input);\n        Console.WriteLine(output);\n    }}",
        "output": "using System;\n\npublic class StringReversal\n{\n    public string ReverseString(string input)\n    {\n        char[] charArray = input.ToCharArray();\n        Array.Reverse(charArray);\n        return new string(charArray);\n    }}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        StringReversal reverse = new StringReversal();\n        string input = \"hello\";\n        string output = reverse.ReverseString(input);\n        Console.WriteLine(output);\n    }}"
    },
    {
        "instruction": "Create a JavaScript function that takes a string and returns the number of vowels in the string.",
        "input": "\"lorem ipsum\"",
        "response": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelCount = 0;\n    for (const char of str.toLowerCase()) {\n        if (vowels.includes(char)) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;}\n\nconst result = countVowels('lorem ipsum');\nconsole.log(result);",
        "output": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelCount = 0;\n    for (const char of str.toLowerCase()) {\n        if (vowels.includes(char)) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;}\n\nconst result = countVowels('lorem ipsum');\nconsole.log(result);"
    },
    {
        "instruction": "How would you write a Python script that reads a CSV file and calculates the average of the values in the second column?",
        "input": "name,age\\nJohn,25\\nSarah,30\\nMichael,35",
        "response": "import csv\nfrom io import StringIO\n\ncsv_data = \"name,age\\nJohn,25\\nSarah,30\\nMichael,35\"\n\ndef avg_second_column(csv_data):\n    file = StringIO(csv_data)\n    reader = csv.reader(file)\n    \n    next(reader)  # Skip the header row\n    total = 0\n    count = 0\n    \n    for row in reader:\n        total += int(row[1])\n        count += 1\n    \n    return total / count\n\naverage = avg_second_column(csv_data)\nprint(average)",
        "output": "import csv\nfrom io import StringIO\n\ncsv_data = \"name,age\\nJohn,25\\nSarah,30\\nMichael,35\"\n\ndef avg_second_column(csv_data):\n    file = StringIO(csv_data)\n    reader = csv.reader(file)\n    \n    next(reader)  # Skip the header row\n    total = 0\n    count = 0\n    \n    for row in reader:\n        total += int(row[1])\n        count += 1\n    \n    return total / count\n\naverage = avg_second_column(csv_data)\nprint(average)"
    },
    {
        "instruction": "Write a C# program to sort a list of integers in ascending order using the bubble sort algorithm.",
        "input": "[4, 3, 2, 10, 12, 1, 5, 6]",
        "response": "using System;\nusing System.Collections.Generic;\n\npublic class BubbleSort {\n    public static List<int> Sort(List<int> numbers) {\n        int n = numbers.Count;\n        bool swapped = false;\n\n        for (int i = 0; i < n - 1; i++) {\n            swapped = false;\n            for (int j = 0; j < n - i - 1; j++) {\n                if (numbers[j] > numbers[j + 1]) {\n                    int temp = numbers[j];\n                    numbers[j] = numbers[j + 1];\n                    numbers[j + 1] = temp;\n                    swapped = true;\n                }\n            }\n            if (!swapped) {\n                break;\n            }\n        }\n        return numbers;\n    }\n    public static void Main(string[] args) {\n        List<int> numbers = new List<int> {4, 3, 2, 10, 12, 1, 5, 6};\n        List<int> sortedNumbers = Sort(numbers);\n\n        Console.WriteLine(\"Sorted numbers:\");\n        foreach (int num in sortedNumbers) {\n            Console.Write(num + \" \");\n        }\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\npublic class BubbleSort {\n    public static List<int> Sort(List<int> numbers) {\n        int n = numbers.Count;\n        bool swapped = false;\n\n        for (int i = 0; i < n - 1; i++) {\n            swapped = false;\n            for (int j = 0; j < n - i - 1; j++) {\n                if (numbers[j] > numbers[j + 1]) {\n                    int temp = numbers[j];\n                    numbers[j] = numbers[j + 1];\n                    numbers[j + 1] = temp;\n                    swapped = true;\n                }\n            }\n            if (!swapped) {\n                break;\n            }\n        }\n        return numbers;\n    }\n    public static void Main(string[] args) {\n        List<int> numbers = new List<int> {4, 3, 2, 10, 12, 1, 5, 6};\n        List<int> sortedNumbers = Sort(numbers);\n\n        Console.WriteLine(\"Sorted numbers:\");\n        foreach (int num in sortedNumbers) {\n            Console.Write(num + \" \");\n        }\n    }}"
    },
    {
        "instruction": "Could you construct a shell script that lists all the hidden files in the current directory, excluding directories?",
        "input": "",
        "response": "#!/bin/sh\n\nfor file in .*\ndo\n    if [ -f \"$file\" ]\n    then\n        echo \"$file\"\n    fi\ndone",
        "output": "#!/bin/sh\n\nfor file in .*\ndo\n    if [ -f \"$file\" ]\n    then\n        echo \"$file\"\n    fi\ndone"
    },
    {
        "instruction": "Design a C++ function that calculates the factorial of a given non-negative integer using recursion.",
        "input": "6",
        "response": "#include<iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}",
        "output": "#include<iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a shell script that counts the number of lines in a given text file.",
        "input": "Sample text file content:\n\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\n",
        "response": "#!/bin/sh\n\nfilename=\"example.txt\"\n\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in the file: $line_count\"",
        "output": "#!/bin/sh\n\nfilename=\"example.txt\"\n\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in the file: $line_count\""
    },
    {
        "instruction": "Can you provide a JavaScript function to reverse the words in a given sentence?",
        "input": "\"This is an example sentence\"",
        "response": "function reverseWordsInSentence(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.map(word => word.split('').reverse().join(''));\n    return reversedWords.join(' ');\n}\n\nconst input = \"This is an example sentence\";\nconst result = reverseWordsInSentence(input);\nconsole.log(result);",
        "output": "function reverseWordsInSentence(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.map(word => word.split('').reverse().join(''));\n    return reversedWords.join(' ');\n}\n\nconst input = \"This is an example sentence\";\nconst result = reverseWordsInSentence(input);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Python function that finds the longest word in a given list of words.",
        "input": "[\"apple\", \"banana\", \"cherry\", \"blueberry\"]",
        "response": "def find_longest_word(words):\n    return max(words, key=len)\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"blueberry\"]\nlongest_word = find_longest_word(word_list)\nprint('The longest word is:', longest_word)",
        "output": "def find_longest_word(words):\n    return max(words, key=len)\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"blueberry\"]\nlongest_word = find_longest_word(word_list)\nprint('The longest word is:', longest_word)"
    },
    {
        "instruction": "Write a C++ program that accepts a string input and should print the reverse of the given string.",
        "input": "OpenAI",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input = \"OpenAI\";\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    std::cout << \"Reversed string: \" << reversed << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input = \"OpenAI\";\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    std::cout << \"Reversed string: \" << reversed << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a shell script that takes a file as an argument and reports the number of lines, words, and characters in that file.",
        "input": "sample.txt (contents: 'This is a sample file.\nIt has multiple lines and words.\n')",
        "response": "#!/bin/sh\n\nfilename=\"$1\"\n\nlines=$(wc -l < \"$filename\")\nwords=$(wc -w < \"$filename\")\ncharacters=$(wc -m < \"$filename\")\n\necho \"Lines: $lines\"\necho \"Words: $words\"\necho \"Characters: $characters\"",
        "output": "#!/bin/sh\n\nfilename=\"$1\"\n\nlines=$(wc -l < \"$filename\")\nwords=$(wc -w < \"$filename\")\ncharacters=$(wc -m < \"$filename\")\n\necho \"Lines: $lines\"\necho \"Words: $words\"\necho \"Characters: $characters\""
    },
    {
        "instruction": "Design a Go function that receives a slice of integers and computes their average.",
        "input": "[]int{8, 15, 22}",
        "response": "package main\n\nimport \"fmt\"\n\nfunc Average(nums []int) float64 {\n    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n    return float64(sum) / float64(len(nums))}\n\nfunc main() {\n    numbers := []int{8, 15, 22}\n    avg := Average(numbers)\n    fmt.Printf(\"The average is: %f\", avg)}",
        "output": "package main\n\nimport \"fmt\"\n\nfunc Average(nums []int) float64 {\n    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n    return float64(sum) / float64(len(nums))}\n\nfunc main() {\n    numbers := []int{8, 15, 22}\n    avg := Average(numbers)\n    fmt.Printf(\"The average is: %f\", avg)}"
    },
    {
        "instruction": "Construct a PHP function that accepts a list of numbers and returns the maximum value within the list.",
        "input": "[42, 10, 57, 3]",
        "response": "<?php\n\nfunction max_number($numbers) {\n    return max($numbers);}\n\n$numbers = array(42, 10, 57, 3);\n$max_num = max_number($numbers);\necho \"The maximum number is: \" . $max_num;",
        "output": "<?php\n\nfunction max_number($numbers) {\n    return max($numbers);}\n\n$numbers = array(42, 10, 57, 3);\n$max_num = max_number($numbers);\necho \"The maximum number is: \" . $max_num;"
    },
    {
        "instruction": "Implement a C++ function that reads a text file and counts the number of lines.",
        "input": "sample.txt",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint count_lines(const std::string& filename) {\n    std::ifstream file(filename);\n    int line_count = 0;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (getline(file, line)) {\n            line_count++;\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file\" << std::endl;\n    }\n    \n    return line_count;}\n\nint main() {\n    std::string filename = \"sample.txt\";\n    int lines = count_lines(filename);\n    std::cout << \"Number of lines in \" << filename << \": \" << lines << std::endl;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint count_lines(const std::string& filename) {\n    std::ifstream file(filename);\n    int line_count = 0;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (getline(file, line)) {\n            line_count++;\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file\" << std::endl;\n    }\n    \n    return line_count;}\n\nint main() {\n    std::string filename = \"sample.txt\";\n    int lines = count_lines(filename);\n    std::cout << \"Number of lines in \" << filename << \": \" << lines << std::endl;}"
    },
    {
        "instruction": "Write a shell script that lists all the files in a directory and their size in bytes.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\ndirectory=\"/path/to/directory\"\n\nfor file in \"$directory\"/*\ndo\n    size=$(stat -c%s \"$file\")\n    echo \"$file - $size bytes\"\ndone\n",
        "output": "#!/bin/bash\ndirectory=\"/path/to/directory\"\n\nfor file in \"$directory\"/*\ndo\n    size=$(stat -c%s \"$file\")\n    echo \"$file - $size bytes\"\ndone\n"
    },
    {
        "instruction": "How to create a simple REST API in Python using FastAPI?",
        "input": "{\"name\": \"John\", \"age\": 30}",
        "response": "from fastapi import FastAPI\nimport uvicorn\n\napp = FastAPI()\n\nclass User:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\n@app.post(\"/user\")\ndef create_user(user: User):\n    return {\"user\": user.name, \"age\": user.age}\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)",
        "output": "from fastapi import FastAPI\nimport uvicorn\n\napp = FastAPI()\n\nclass User:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\n@app.post(\"/user\")\ndef create_user(user: User):\n    return {\"user\": user.name, \"age\": user.age}\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)"
    },
    {
        "instruction": "Create a JavaScript function which detects if a given date is a weekend or not.",
        "input": "2022-09-24T00:00:00",
        "response": "function isWeekend(dateString) {\n    const date = new Date(dateString);\n    const day = date.getDay();\n    return day === 0 || day === 6;}\n\nconst dateString = '2022-09-24T00:00:00';\nconsole.log('Is the given date a weekend? ', isWeekend(dateString));",
        "output": "function isWeekend(dateString) {\n    const date = new Date(dateString);\n    const day = date.getDay();\n    return day === 0 || day === 6;}\n\nconst dateString = '2022-09-24T00:00:00';\nconsole.log('Is the given date a weekend? ', isWeekend(dateString));"
    },
    {
        "instruction": "Write a C++ function that takes input as seconds and converts them into hours, minutes, and seconds.",
        "input": "3665",
        "response": "#include<iostream>\nusing namespace std;\n\nvoid convert_seconds(int total_seconds, int &hours, int &minutes, int &seconds) {\n    hours = total_seconds / 3600;\n    total_seconds %= 3600;\n    minutes = total_seconds / 60;\n    seconds = total_seconds % 60;}\n\nint main() {\n    int total_seconds = 3665;\n    int hours, minutes, seconds;\n\n    convert_seconds(total_seconds, hours, minutes, seconds);\n    cout << hours << ':' << minutes << ':' << seconds << endl;\n\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nvoid convert_seconds(int total_seconds, int &hours, int &minutes, int &seconds) {\n    hours = total_seconds / 3600;\n    total_seconds %= 3600;\n    minutes = total_seconds / 60;\n    seconds = total_seconds % 60;}\n\nint main() {\n    int total_seconds = 3665;\n    int hours, minutes, seconds;\n\n    convert_seconds(total_seconds, hours, minutes, seconds);\n    cout << hours << ':' << minutes << ':' << seconds << endl;\n\n    return 0;}"
    },
    {
        "instruction": "Implement a PHP function to count the occurrence of each word in a given string. The output should be an associative array with words as keys and the count as values.",
        "input": "I like cookies. I really like cookies.",
        "response": "<?php\n\nfunction word_count($str) {\n    $str = strtolower(trim($str));\n    $words = preg_split('/\\s+/', $str);\n    $wordCounter = [];\n\n    foreach ($words as $word) {\n        if (isset($wordCounter[$word])) {\n            $wordCounter[$word]++;\n        } else {\n            $wordCounter[$word] = 1;\n        }\n    }\n\n    return $wordCounter;}\n\n$input_str = 'I like cookies. I really like cookies.';\n$result = word_count($input_str);\nprint_r($result);\n\n?>",
        "output": "<?php\n\nfunction word_count($str) {\n    $str = strtolower(trim($str));\n    $words = preg_split('/\\s+/', $str);\n    $wordCounter = [];\n\n    foreach ($words as $word) {\n        if (isset($wordCounter[$word])) {\n            $wordCounter[$word]++;\n        } else {\n            $wordCounter[$word] = 1;\n        }\n    }\n\n    return $wordCounter;}\n\n$input_str = 'I like cookies. I really like cookies.';\n$result = word_count($input_str);\nprint_r($result);\n\n?>"
    },
    {
        "instruction": "How would you design a Python class that represents a bank account? The class should have a balance attribute and methods for deposit, withdraw, and display balance.",
        "input": "initial_balance = 1000, deposit = 500, withdraw = 200",
        "response": "class BankAccount:\n    def __init__(self, initial_balance):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print('Insufficient balance.')\n\n    def display_balance(self):\n        print('Current balance:', self.balance)\n\naccount = BankAccount(1000)\naccount.deposit(500)\naccount.withdraw(200)\naccount.display_balance()",
        "output": "class BankAccount:\n    def __init__(self, initial_balance):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print('Insufficient balance.')\n\n    def display_balance(self):\n        print('Current balance:', self.balance)\n\naccount = BankAccount(1000)\naccount.deposit(500)\naccount.withdraw(200)\naccount.display_balance()"
    },
    {
        "instruction": "Create a JavaScript function to reverse the words of a given sentence without using any built-in methods.",
        "input": "This is a reverse test.",
        "response": "function reverseWords(sentence) {\n    let str = '';\n    let n = sentence.length;\n    let word = '';\n    for (let i = n - 1; i >= 0; i--) {\n        if (sentence[i] === ' ' || i === 0) {\n            if (i === 0) {\n                word = sentence[i] + word;\n            }\n            str += word + ' ';\n            word = '';\n        } else {\n            word = sentence[i] + word;\n        }\n    }\n    return str.trim();}\n\nconst input = 'This is a reverse test.';\nconst result = reverseWords(input);\nconsole.log(result);",
        "output": "function reverseWords(sentence) {\n    let str = '';\n    let n = sentence.length;\n    let word = '';\n    for (let i = n - 1; i >= 0; i--) {\n        if (sentence[i] === ' ' || i === 0) {\n            if (i === 0) {\n                word = sentence[i] + word;\n            }\n            str += word + ' ';\n            word = '';\n        } else {\n            word = sentence[i] + word;\n        }\n    }\n    return str.trim();}\n\nconst input = 'This is a reverse test.';\nconst result = reverseWords(input);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C# function that will calculate the factorial of a given number.",
        "input": "6",
        "response": "using System;\n\nclass Program {\n    static int Factorial(int number) {\n        if (number == 1)\n            return 1;\n        else\n            return number * Factorial(number - 1);\n    }\n\n    static void Main(string[] args) {\n        int input = 6;\n        int result = Factorial(input);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\n\nclass Program {\n    static int Factorial(int number) {\n        if (number == 1)\n            return 1;\n        else\n            return number * Factorial(number - 1);\n    }\n\n    static void Main(string[] args) {\n        int input = 6;\n        int result = Factorial(input);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "How would you implement a JavaScript function that determines the longest consecutive subsequence from a given unsorted array of integers?",
        "input": "[1, 9, 3, 10, 4, 20, 2]",
        "response": "function longestConsecutiveSubsequence(arr) {\n    const set = new Set(arr);\n    let longest = 0;\n\n    for (let num of set) {\n        if (!set.has(num - 1)) {\n            let curr = num;\n            let count = 1;\n\n            while (set.has(curr + 1)) {\n                curr += 1;\n                count += 1;\n            }\n            \n            longest = Math.max(longest, count);\n        }\n    }\n    return longest;}\n\nconst input = [1, 9, 3, 10, 4, 20, 2];\nconsole.log(longestConsecutiveSubsequence(input));",
        "output": "function longestConsecutiveSubsequence(arr) {\n    const set = new Set(arr);\n    let longest = 0;\n\n    for (let num of set) {\n        if (!set.has(num - 1)) {\n            let curr = num;\n            let count = 1;\n\n            while (set.has(curr + 1)) {\n                curr += 1;\n                count += 1;\n            }\n            \n            longest = Math.max(longest, count);\n        }\n    }\n    return longest;}\n\nconst input = [1, 9, 3, 10, 4, 20, 2];\nconsole.log(longestConsecutiveSubsequence(input));"
    },
    {
        "instruction": "Design a Python function that takes a list of numbers and returns True if array is sorted in ascending order, False otherwise.",
        "input": "[10, 19, 22, 31, 38]",
        "response": "def is_sorted(arr):\n    return arr == sorted(arr)\n\ninput_array = [10, 19, 22, 31, 38]\nprint(is_sorted(input_array))",
        "output": "def is_sorted(arr):\n    return arr == sorted(arr)\n\ninput_array = [10, 19, 22, 31, 38]\nprint(is_sorted(input_array))"
    },
    {
        "instruction": "Construct a SQL query that retrieves all distinct countries from the 'Customers' table.",
        "input": "",
        "response": "SELECT DISTINCT Country FROM Customers;",
        "output": "SELECT DISTINCT Country FROM Customers;"
    },
    {
        "instruction": "Implement a C++ function that counts the occurrences of a specific character within a given string.",
        "input": "'hello world', 'l'",
        "response": "#include <iostream>\n#include <string>\n\nint count_char_occurrences(const std::string& str, char c) {\n    int count = 0;\n    for(const auto& character : str) {\n        if(character == c) {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    std::string input = \"hello world\";\n    char target = 'l';\n    int count = count_char_occurrences(input, target);\n    std::cout << \"Occurences of '\" << target << \"' in '\" << input << \"': \" << count << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nint count_char_occurrences(const std::string& str, char c) {\n    int count = 0;\n    for(const auto& character : str) {\n        if(character == c) {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    std::string input = \"hello world\";\n    char target = 'l';\n    int count = count_char_occurrences(input, target);\n    std::cout << \"Occurences of '\" << target << \"' in '\" << input << \"': \" << count << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Python script that downloads and saves a file from a given URL?",
        "input": "https://www.example.com/image.png, 'image.png'",
        "response": "import requests\n\nurl = 'https://www.example.com/image.png'\nfile_name = 'image.png'\n\nresponse = requests.get(url, stream=True)\nresponse.raise_for_status()\n\nwith open(file_name, 'wb') as f:\n    for chunk in response.iter_content(chunk_size=8192):\n        f.write(chunk)\n\nprint(f'Successfully downloaded {file_name} from {url}')",
        "output": "import requests\n\nurl = 'https://www.example.com/image.png'\nfile_name = 'image.png'\n\nresponse = requests.get(url, stream=True)\nresponse.raise_for_status()\n\nwith open(file_name, 'wb') as f:\n    for chunk in response.iter_content(chunk_size=8192):\n        f.write(chunk)\n\nprint(f'Successfully downloaded {file_name} from {url}')"
    },
    {
        "instruction": "Create a PHP function that takes a file path and a keyword as arguments and returns the number of lines in the file containing the keyword.",
        "input": "file.txt: \"foo\\nbar\\nbaz foo\\nfoo bar baz\", 'foo'",
        "response": "<?php\n\nfunction count_keyword_occurrences($file_path, $keyword) {\n    $count = 0;\n    $file = fopen($file_path, 'r');\n    while (($line = fgets($file)) !== false) {\n        if (strpos($line, $keyword) !== false) {\n            $count++;\n        }\n    }\n    fclose($file);\n    return $count;}\n\n$file_path = 'file.txt';\n$keyword = 'foo';\n$count = count_keyword_occurrences($file_path, $keyword);\necho \"Number of lines containing '$keyword' in '$file_path': $count\";\n?>",
        "output": "<?php\n\nfunction count_keyword_occurrences($file_path, $keyword) {\n    $count = 0;\n    $file = fopen($file_path, 'r');\n    while (($line = fgets($file)) !== false) {\n        if (strpos($line, $keyword) !== false) {\n            $count++;\n        }\n    }\n    fclose($file);\n    return $count;}\n\n$file_path = 'file.txt';\n$keyword = 'foo';\n$count = count_keyword_occurrences($file_path, $keyword);\necho \"Number of lines containing '$keyword' in '$file_path': $count\";\n?>"
    },
    {
        "instruction": "Fix the following JavaScript code to remove duplicates from the input array.",
        "input": "Input array: [1, 1, 2, 2, 3, 4, 4]\nOriginal code:\nfunction removeDuplicates(arr) {\n  let unique = {};\n  return arr.filter(function (item) {\n    if (unique[item]) return;\n    unique[item] = 1;\n  });\n}\n\nconsole.log(removeDuplicates([1, 1, 2, 2, 3, 4, 4]));",
        "response": "function removeDuplicates(arr) {\n  let unique = {};\n  return arr.filter(function (item) {\n    if (unique[item]) return false;\n    unique[item] = 1;\n    return true;\n  });}\n\nconsole.log(removeDuplicates([1, 1, 2, 2, 3, 4, 4]));",
        "output": "function removeDuplicates(arr) {\n  let unique = {};\n  return arr.filter(function (item) {\n    if (unique[item]) return false;\n    unique[item] = 1;\n    return true;\n  });}\n\nconsole.log(removeDuplicates([1, 1, 2, 2, 3, 4, 4]));"
    },
    {
        "instruction": "Write a C++ program that accepts user input for integer values and gives a sorted output in ascending order.",
        "input": "7, 5, 3, 1, 9, 8, 2",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    int n;\n    std::vector<int> numbers;\n\n    std::cout << \"Enter the number of integers you want to sort: \";\n    std::cin >> n;\n\n    for (int i = 0; i < n; i++) {\n        int temp;\n        std::cin >> temp;\n        numbers.push_back(temp);\n    }\n\n    std::sort(numbers.begin(), numbers.end());\n\n    for (int num : numbers) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    int n;\n    std::vector<int> numbers;\n\n    std::cout << \"Enter the number of integers you want to sort: \";\n    std::cin >> n;\n\n    for (int i = 0; i < n; i++) {\n        int temp;\n        std::cin >> temp;\n        numbers.push_back(temp);\n    }\n\n    std::sort(numbers.begin(), numbers.end());\n\n    for (int num : numbers) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Construct a SQL query that selects all columns from a table 'employees' for those aged 30 and above.",
        "input": "employees(id, name, age, department)",
        "response": "SELECT * FROM employees WHERE age >= 30;",
        "output": "SELECT * FROM employees WHERE age >= 30;"
    },
    {
        "instruction": "Can you create a Python script that makes an API call to the provided URL and prints out the JSON response?",
        "input": "https://api.example.com/data",
        "response": "import requests\n\nurl = \"https://api.example.com/data\"\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {response.status_code}\")",
        "output": "import requests\n\nurl = \"https://api.example.com/data\"\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {response.status_code}\")"
    },
    {
        "instruction": "Implement a JavaScript function that counts the frequency of each distinct character in a given string and returns the result as an object.",
        "input": "\"hello world\"",
        "response": "function countCharFrequency(str) {\n    let characterFrequency = {};\n    for (const char of str) {\n        if (char in characterFrequency) {\n            characterFrequency[char]++;\n        } else {\n            characterFrequency[char] = 1;\n        }\n    }\n    return characterFrequency;}\n\nconst result = countCharFrequency(\"hello world\");\nconsole.log(result);",
        "output": "function countCharFrequency(str) {\n    let characterFrequency = {};\n    for (const char of str) {\n        if (char in characterFrequency) {\n            characterFrequency[char]++;\n        } else {\n            characterFrequency[char] = 1;\n        }\n    }\n    return characterFrequency;}\n\nconst result = countCharFrequency(\"hello world\");\nconsole.log(result);"
    },
    {
        "instruction": "Implement a C program that reads an integer from the user, and then displays the factorial of that number.",
        "input": "5",
        "response": "#include <stdio.h>\nunsigned long long factorial(int n);\n\nint main() {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"Factorial of %d is %llu\\n\", num, factorial(num));\n    return 0;}\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) return 1;\n    return n * factorial(n - 1);}",
        "output": "#include <stdio.h>\nunsigned long long factorial(int n);\n\nint main() {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"Factorial of %d is %llu\\n\", num, factorial(num));\n    return 0;}\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) return 1;\n    return n * factorial(n - 1);}"
    },
    {
        "instruction": "How would you construct a Python function to count occurrences of a specified character in a given string?",
        "input": "\"Hello, World!\", \"l\"",
        "response": "def count_char_occurrences(s, char):\n    return s.count(char)\n\nresult = count_char_occurrences(\"Hello, World!\", \"l\")\nprint(result)",
        "output": "def count_char_occurrences(s, char):\n    return s.count(char)\n\nresult = count_char_occurrences(\"Hello, World!\", \"l\")\nprint(result)"
    },
    {
        "instruction": "Write a function in JavaScript to calculate and return the Euclidean distance between two points in a 2D space.",
        "input": "{x1: 3, y1: 4, x2: 6, y2: 8}",
        "response": "function euclideanDistance(x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    return Math.sqrt(dx*dx + dy*dy);}\n\nconst result = euclideanDistance(3, 4, 6, 8);\nconsole.log(result);",
        "output": "function euclideanDistance(x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    return Math.sqrt(dx*dx + dy*dy);}\n\nconst result = euclideanDistance(3, 4, 6, 8);\nconsole.log(result);"
    },
    {
        "instruction": "Create a C# class that represents a rectangle with methods to calculate the area and perimeter. Assume the lengths of the sides are integers.",
        "input": "{\"length\": 5, \"width\": 3}",
        "response": "public class Rectangle {\n    private int Length { get; set; }\n    private int Width { get; set; }\n\n    public Rectangle(int length, int width) {\n        Length = length;\n        Width = width;\n    }\n\n    public int CalculateArea() {\n        return Length * Width;\n    }\n\n    public int CalculatePerimeter() {\n        return 2 * (Length + Width);\n    }}\n\nRectangle rect = new Rectangle(5, 3);\nConsole.WriteLine(\"Area: \" + rect.CalculateArea());\nConsole.WriteLine(\"Perimeter: \" + rect.CalculatePerimeter());",
        "output": "public class Rectangle {\n    private int Length { get; set; }\n    private int Width { get; set; }\n\n    public Rectangle(int length, int width) {\n        Length = length;\n        Width = width;\n    }\n\n    public int CalculateArea() {\n        return Length * Width;\n    }\n\n    public int CalculatePerimeter() {\n        return 2 * (Length + Width);\n    }}\n\nRectangle rect = new Rectangle(5, 3);\nConsole.WriteLine(\"Area: \" + rect.CalculateArea());\nConsole.WriteLine(\"Perimeter: \" + rect.CalculatePerimeter());"
    },
    {
        "instruction": "Implement a C function that calculates the factorial of a given non-negative integer.",
        "input": "6",
        "response": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int result = factorial(6);\n    printf(\"%d\\n\", result);\n    return 0;}",
        "output": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int result = factorial(6);\n    printf(\"%d\\n\", result);\n    return 0;}"
    },
    {
        "instruction": "Can you write a Python script to count the occurrences of each word in a given text?",
        "input": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        "response": "from collections import Counter\n\ndef count_word_occurrences(text):\n    words = text.split()\n    return Counter(words)\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nresult = count_word_occurrences(text)\nprint(result)",
        "output": "from collections import Counter\n\ndef count_word_occurrences(text):\n    words = text.split()\n    return Counter(words)\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nresult = count_word_occurrences(text)\nprint(result)"
    },
    {
        "instruction": "Design a JavaScript function that accepts two arrays and returns an array of their intersection.",
        "input": "[1, 2, 3, 4], [3, 4, 5, 6]",
        "response": "function arrayIntersection(arr1, arr2) {\n    return arr1.filter(value => arr2.includes(value));}\n\nconst result = arrayIntersection([1, 2, 3, 4], [3, 4, 5, 6]);\nconsole.log(result);",
        "output": "function arrayIntersection(arr1, arr2) {\n    return arr1.filter(value => arr2.includes(value));}\n\nconst result = arrayIntersection([1, 2, 3, 4], [3, 4, 5, 6]);\nconsole.log(result);"
    },
    {
        "instruction": "Build a PHP function that reverses the order of the characters in a given string.",
        "input": "\"programming\"",
        "response": "<?php\n\nfunction reverseString($str) {\n    return strrev($str);}\n\n$input = \"programming\";\n$result = reverseString($input);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction reverseString($str) {\n    return strrev($str);}\n\n$input = \"programming\";\n$result = reverseString($input);\necho $result;\n\n?>"
    },
    {
        "instruction": "Write a Python script that reads a CSV file and calculates the average value of numbers in a specific column.",
        "input": "filename: 'data.csv', column_index: 2",
        "response": "import csv\n\ndef calculate_average(filename, column_index):\n    total = 0\n    count = 0\n    \n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        next(reader)  # skip header\n        \n        for row in reader:\n            total += float(row[column_index])\n            count += 1\n            \n    return total / count\n\naverage = calculate_average('data.csv', 2)\nprint(average)",
        "output": "import csv\n\ndef calculate_average(filename, column_index):\n    total = 0\n    count = 0\n    \n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        next(reader)  # skip header\n        \n        for row in reader:\n            total += float(row[column_index])\n            count += 1\n            \n    return total / count\n\naverage = calculate_average('data.csv', 2)\nprint(average)"
    },
    {
        "instruction": "Create a JavaScript function that implements the Fisher-Yates shuffle algorithm to shuffle an array.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function fisherYatesShuffle(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;}\n\nconst shuffledArray = fisherYatesShuffle([1, 2, 3, 4, 5]);\nconsole.log(shuffledArray);",
        "output": "function fisherYatesShuffle(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;}\n\nconst shuffledArray = fisherYatesShuffle([1, 2, 3, 4, 5]);\nconsole.log(shuffledArray);"
    },
    {
        "instruction": "Design a C++ program with a class `Circle` that calculates the area and circumference of a circle given its radius.",
        "input": "radius: 5.0",
        "response": "#include <iostream>\n#include <cmath>\n\nclass Circle {\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() const {\n        return M_PI * std::pow(radius, 2);\n    }\n\n    double circumference() const {\n        return 2 * M_PI * radius;\n    }\n\nprivate:\n    double radius;};\n\nint main() {\n    Circle circle(5.0);\n    std::cout << \"Area: \" << circle.area() << std::endl;\n    std::cout << \"Circumference: \" << circle.circumference() << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nclass Circle {\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() const {\n        return M_PI * std::pow(radius, 2);\n    }\n\n    double circumference() const {\n        return 2 * M_PI * radius;\n    }\n\nprivate:\n    double radius;};\n\nint main() {\n    Circle circle(5.0);\n    std::cout << \"Area: \" << circle.area() << std::endl;\n    std::cout << \"Circumference: \" << circle.circumference() << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "How would you create a bash shell script that iterates through a list of files in a directory and outputs the total file size?",
        "input": "directory_path: '/path/to/directory'",
        "response": "#!/bin/bash\n\ndir='/path/to/directory'\ntotal_size=0\n\nfor file in \"$dir\"/*; do\n    if [ -f \"$file\" ]; then\n        file_size=$(stat -c %s \"$file\")\n        total_size=$((total_size + file_size))\n    fi\ndone\n\necho \"Total size: $total_size bytes\"",
        "output": "#!/bin/bash\n\ndir='/path/to/directory'\ntotal_size=0\n\nfor file in \"$dir\"/*; do\n    if [ -f \"$file\" ]; then\n        file_size=$(stat -c %s \"$file\")\n        total_size=$((total_size + file_size))\n    fi\ndone\n\necho \"Total size: $total_size bytes\""
    },
    {
        "instruction": "Implement a C++ function to calculate the Fibonacci sequence for a given index.",
        "input": "9",
        "response": "#include <iostream>\n\nint fibonacci(int index) {\n    if (index == 0) return 0;\n    if (index == 1) return 1;\n\n    return fibonacci(index - 1) + fibonacci(index - 2);}\n\nint main() {\n    int index = 9;\n    std::cout << fibonacci(index) << std::endl;}",
        "output": "#include <iostream>\n\nint fibonacci(int index) {\n    if (index == 0) return 0;\n    if (index == 1) return 1;\n\n    return fibonacci(index - 1) + fibonacci(index - 2);}\n\nint main() {\n    int index = 9;\n    std::cout << fibonacci(index) << std::endl;}"
    },
    {
        "instruction": "Write a JavaScript function to merge two arrays and sort the resulting array in ascending order.",
        "input": "[4, 2, 6], [3, 1, 5]",
        "response": "function mergeAndSortArrays(arr1, arr2) {\n    const mergedArray = arr1.concat(arr2);\n    return mergedArray.sort((a, b) => a - b);}\n\nconst result = mergeAndSortArrays([4, 2, 6], [3, 1, 5]);\nconsole.log(result);",
        "output": "function mergeAndSortArrays(arr1, arr2) {\n    const mergedArray = arr1.concat(arr2);\n    return mergedArray.sort((a, b) => a - b);}\n\nconst result = mergeAndSortArrays([4, 2, 6], [3, 1, 5]);\nconsole.log(result);"
    },
    {
        "instruction": "Using Python, write a function that will parse a CSV file and display its content.",
        "input": "example.csv (containing rows: 'Name, Age\\nAlice, 30\\nBob, 28')",
        "response": "import csv\n\ndef parse_and_display_csv(file_path):\n    with open(file_path, 'r') as csvfile:\n        csv_reader = csv.reader(csvfile)\n        for row in csv_reader:\n            print(', '.join(row))\n\nparse_and_display_csv('example.csv)",
        "output": "import csv\n\ndef parse_and_display_csv(file_path):\n    with open(file_path, 'r') as csvfile:\n        csv_reader = csv.reader(csvfile)\n        for row in csv_reader:\n            print(', '.join(row))\n\nparse_and_display_csv('example.csv)"
    },
    {
        "instruction": "Can you create a Bash script that takes a directory path and lists all files within that directory?",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndirectory_path=\"$1\"\n\nif [ -d \"$directory_path\" ]; then\n    for file in \"$directory_path\"/*; do\n        if [ -f \"$file\" ]; then\n            echo \"$file\"\n        fi\n    done\nelse\n    echo \"Invalid directory path\"\nfi",
        "output": "#!/bin/bash\n\ndirectory_path=\"$1\"\n\nif [ -d \"$directory_path\" ]; then\n    for file in \"$directory_path\"/*; do\n        if [ -f \"$file\" ]; then\n            echo \"$file\"\n        fi\n    done\nelse\n    echo \"Invalid directory path\"\nfi"
    },
    {
        "instruction": "Write a C++ program that reads a sequence of integers from a file called 'input.txt' and writes the sum to a file named 'output.txt'.",
        "input": "input.txt: 4 7 23",
        "response": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream inputFile(\"input.txt\");\n    std::ofstream outputFile(\"output.txt\");\n\n    int num, sum = 0;\n    while (inputFile >> num) {\n        sum += num;\n    }\n\n    outputFile << sum;\n\n    inputFile.close();\n    outputFile.close();\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream inputFile(\"input.txt\");\n    std::ofstream outputFile(\"output.txt\");\n\n    int num, sum = 0;\n    while (inputFile >> num) {\n        sum += num;\n    }\n\n    outputFile << sum;\n\n    inputFile.close();\n    outputFile.close();\n\n    return 0;}"
    },
    {
        "instruction": "Implement a Python function that takes a list of strings and returns a dictionary with the number of occurrences of each character in the strings.",
        "input": "['hello', 'world']",
        "response": "def count_chars(strings_list):\n    char_count_dict = {}\n    for string in strings_list:\n        for char in string:\n            char_count_dict[char] = char_count_dict.get(char, 0) + 1\n    return char_count_dict\n\nresult = count_chars(['hello', 'world'])\nprint(result)",
        "output": "def count_chars(strings_list):\n    char_count_dict = {}\n    for string in strings_list:\n        for char in string:\n            char_count_dict[char] = char_count_dict.get(char, 0) + 1\n    return char_count_dict\n\nresult = count_chars(['hello', 'world'])\nprint(result)"
    },
    {
        "instruction": "Given an array of integers in JavaScript, write a function that sorts the array and returns it.",
        "input": "[34, 17, 6, 92, 1]",
        "response": "function sortArray(arr) {\n    return arr.sort((a, b) => a - b);}\n\nconst result = sortArray([34, 17, 6, 92, 1]);\nconsole.log(result);",
        "output": "function sortArray(arr) {\n    return arr.sort((a, b) => a - b);}\n\nconst result = sortArray([34, 17, 6, 92, 1]);\nconsole.log(result);"
    },
    {
        "instruction": "Can you provide a shell script that displays the total number of lines in all '*.txt' files in the current directory?",
        "input": "file1.txt:\nHello\nWorld\n\nfile2.txt:\nAnother\nExample",
        "response": "#!/bin/sh\n\ntotal_lines=0\n\nfor file in *.txt; do\n    lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + lines))\ndone\n\necho \"Total lines: $total_lines\"",
        "output": "#!/bin/sh\n\ntotal_lines=0\n\nfor file in *.txt; do\n    lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + lines))\ndone\n\necho \"Total lines: $total_lines\""
    },
    {
        "instruction": "Implement a C++ function that reverses a user-given string and prints the result.",
        "input": "\"programming\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string str) {\n    std::reverse(str.begin(), str.end());\n    std::cout << str << std::endl;}\n\nint main() {\n    std::string input = \"programming\";\n    reverse_string(input);\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string str) {\n    std::reverse(str.begin(), str.end());\n    std::cout << str << std::endl;}\n\nint main() {\n    std::string input = \"programming\";\n    reverse_string(input);\n    return 0;}"
    },
    {
        "instruction": "How can one find the length of a string in Python without using the len() function?",
        "input": "\"openai\"",
        "response": "def string_length(s):\n    length = 0\n    for char in s:\n        length += 1\n    return length\n\ninput_str = \"openai\"\nresult = string_length(input_str)\nprint(result)",
        "output": "def string_length(s):\n    length = 0\n    for char in s:\n        length += 1\n    return length\n\ninput_str = \"openai\"\nresult = string_length(input_str)\nprint(result)"
    },
    {
        "instruction": "You need to correct the existing JavaScript code that calculates the square of a number: const squareNum = num => num * num. Update the code to handle errors and return an appropriate error message.",
        "input": "\"12\"",
        "response": "const squareNum = num => {\n    if (typeof num !== 'number') {\n        return 'Error: input must be a number';\n    }\n    return num * num;};\n\nconst result = squareNum(12);\nconsole.log(result);",
        "output": "const squareNum = num => {\n    if (typeof num !== 'number') {\n        return 'Error: input must be a number';\n    }\n    return num * num;};\n\nconst result = squareNum(12);\nconsole.log(result);"
    },
    {
        "instruction": "Design a shell script that checks if a file with a specific filename exists in the current directory. If it exists, print 'File exists', otherwise, print 'File not found'. Test it with 'sample.txt'.",
        "input": "sample.txt",
        "response": "#!/bin/bash\n\nfilename=\"sample.txt\"\n\nif [ -e \"$filename\" ]; then\n    echo \"File exists\"\nelse\n    echo \"File not found\"\nfi",
        "output": "#!/bin/bash\n\nfilename=\"sample.txt\"\n\nif [ -e \"$filename\" ]; then\n    echo \"File exists\"\nelse\n    echo \"File not found\"\nfi"
    },
    {
        "instruction": "Implement a Python function that calculates the factorial of a given number using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Write a JavaScript function that reverses a string without using the built-in reverse method.",
        "input": "OpenAI",
        "response": "function reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;}\n\nconst reversedString = reverseString('OpenAI');\nconsole.log(reversedString);",
        "output": "function reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;}\n\nconst reversedString = reverseString('OpenAI');\nconsole.log(reversedString);"
    },
    {
        "instruction": "Create a C++ program that reads a text file and counts the number of lines in the file.",
        "input": "example.txt",
        "response": "#include<iostream>\n#include<fstream>\n#include<string>\n\nint main() {\n    std::ifstream inputFile(\"example.txt\");\n    std::string line;\n    int lineCount = 0;\n    \n    if (inputFile.is_open()) {\n        while (getline(inputFile, line)) {\n            lineCount++;\n        }\n        inputFile.close();\n    } else {\n        std::cout << \"Unable to open file\";\n    }\n    \n    std::cout << \"Number of lines: \" << lineCount << std::endl;\n    return 0;}",
        "output": "#include<iostream>\n#include<fstream>\n#include<string>\n\nint main() {\n    std::ifstream inputFile(\"example.txt\");\n    std::string line;\n    int lineCount = 0;\n    \n    if (inputFile.is_open()) {\n        while (getline(inputFile, line)) {\n            lineCount++;\n        }\n        inputFile.close();\n    } else {\n        std::cout << \"Unable to open file\";\n    }\n    \n    std::cout << \"Number of lines: \" << lineCount << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you create a Bash script that lists all files in the current directory with a specific file extension?",
        "input": "*.py",
        "response": "#!/bin/bash\n\nfile_extension=\"py\"\nfor file in *.$file_extension; do\n    echo \"$file\"\ndone",
        "output": "#!/bin/bash\n\nfile_extension=\"py\"\nfor file in *.$file_extension; do\n    echo \"$file\"\ndone"
    },
    {
        "instruction": "Create a C++ function that calculates the factorial of a given number.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long factorial(unsigned int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long factorial(unsigned int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a simple key-value store using a Python dictionary?",
        "input": "{\"fruit\": \"apple\", \"color\": \"red\"}",
        "response": "class KeyValueStore:\n    def __init__(self):\n        self.store = {}\n\n    def set(self, key, value):\n        self.store[key] = value\n\n    def get(self, key):\n        return self.store.get(key)\n\n\nkvs = KeyValueStore()\nkvs.set('fruit', 'apple')\nkvs.set('color', 'red')\n\nprint(kvs.get('fruit'))\nprint(kvs.get('color'))",
        "output": "class KeyValueStore:\n    def __init__(self):\n        self.store = {}\n\n    def set(self, key, value):\n        self.store[key] = value\n\n    def get(self, key):\n        return self.store.get(key)\n\n\nkvs = KeyValueStore()\nkvs.set('fruit', 'apple')\nkvs.set('color', 'red')\n\nprint(kvs.get('fruit'))\nprint(kvs.get('color'))"
    },
    {
        "instruction": "Write a shell script to count the number of lines containing the word 'error' in a log file.",
        "input": "error.log",
        "response": "#!/bin/sh\n\nlogfile=error.log\ngrep -c 'error' $logfile",
        "output": "#!/bin/sh\n\nlogfile=error.log\ngrep -c 'error' $logfile"
    },
    {
        "instruction": "Implement a Java method to reverse a string without using any built-in functions.",
        "input": "\"Hello, World!\"",
        "response": "public class StringReversal {\n    public static String reverseString(String input) {\n        char[] charArray = input.toCharArray();\n        int left = 0;\n        int right = charArray.length - 1;\n\n        while (left < right) {\n            char temp = charArray[left];\n            charArray[left] = charArray[right];\n            charArray[right] = temp;\n\n            left++;\n            right--;\n        }\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        String str = \"Hello, World!\";\n        System.out.println(\"Reversed string: \" + reverseString(str));\n    }\n}",
        "output": "public class StringReversal {\n    public static String reverseString(String input) {\n        char[] charArray = input.toCharArray();\n        int left = 0;\n        int right = charArray.length - 1;\n\n        while (left < right) {\n            char temp = charArray[left];\n            charArray[left] = charArray[right];\n            charArray[right] = temp;\n\n            left++;\n            right--;\n        }\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        String str = \"Hello, World!\";\n        System.out.println(\"Reversed string: \" + reverseString(str));\n    }\n}"
    },
    {
        "instruction": "How can you implement a map function in PHP that takes an array of integers and a callback function to square each value?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "<?php\n\nfunction square($n) {\n    return $n * $n;}\n\n$array = array(1, 2, 3, 4, 5);\n$squared_array = array_map('square', $array);\n\nprint_r($squared_array);\n\n?>",
        "output": "<?php\n\nfunction square($n) {\n    return $n * $n;}\n\n$array = array(1, 2, 3, 4, 5);\n$squared_array = array_map('square', $array);\n\nprint_r($squared_array);\n\n?>"
    },
    {
        "instruction": "Implement a shell script that reads a CSV file and calculates the average value of a specified column.",
        "input": "data.csv (contents: \"1,5\\n2,4\\n3,3\\n4,2\\n5,1\") and column 2",
        "response": "#!/bin/bash\n\nFILE=\"data.csv\"\nCOLUMN=2\n\ntotal=0\ncount=0\n\nwhile IFS=',' read -ra line_data; do\n    total=$((total + ${line_data[$((COLUMN - 1))]}))\n    count=$((count + 1))\ndone < \"$FILE\"\n\naverage=$(awk \"BEGIN {print $total/$count}\")\necho \"Average value of column $COLUMN is: $average\"",
        "output": "#!/bin/bash\n\nFILE=\"data.csv\"\nCOLUMN=2\n\ntotal=0\ncount=0\n\nwhile IFS=',' read -ra line_data; do\n    total=$((total + ${line_data[$((COLUMN - 1))]}))\n    count=$((count + 1))\ndone < \"$FILE\"\n\naverage=$(awk \"BEGIN {print $total/$count}\")\necho \"Average value of column $COLUMN is: $average\""
    },
    {
        "instruction": "Can you create a Swift function that filters an array of strings, removing any elements that contain a specific substring?",
        "input": "array: [\"apple\", \"orange\", \"banana\", \"grape\"] and substring: \"a\"",
        "response": "func filterArrayBySubstring(array: [String], substring: String) -> [String] {\n    return array.filter { !$0.contains(substring) }}\n\nlet array = [\"apple\", \"orange\", \"banana\", \"grape\"]\nlet substring = \"a\"\nlet filteredArray = filterArrayBySubstring(array: array, substring: substring)\n\nprint(filteredArray)",
        "output": "func filterArrayBySubstring(array: [String], substring: String) -> [String] {\n    return array.filter { !$0.contains(substring) }}\n\nlet array = [\"apple\", \"orange\", \"banana\", \"grape\"]\nlet substring = \"a\"\nlet filteredArray = filterArrayBySubstring(array: array, substring: substring)\n\nprint(filteredArray)"
    },
    {
        "instruction": "Develop a C++ function that takes a vector of integers and calculates the average value of the elements.",
        "input": "std::vector<int> numbers = {10, 20, 30, 40, 50};",
        "response": "#include <iostream>\n#include <vector>\n\ndouble get_average(std::vector<int>& nums) {\n    double sum = 0;\n    for (const auto& num : nums) {\n        sum += num;\n    }\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {10, 20, 30, 40, 50};\n    double average = get_average(numbers);\n    std::cout << \"The average is: \" << average << std::endl;}",
        "output": "#include <iostream>\n#include <vector>\n\ndouble get_average(std::vector<int>& nums) {\n    double sum = 0;\n    for (const auto& num : nums) {\n        sum += num;\n    }\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {10, 20, 30, 40, 50};\n    double average = get_average(numbers);\n    std::cout << \"The average is: \" << average << std::endl;}"
    },
    {
        "instruction": "How can you write a shell script that lists all files in a directory, but only displays the ones with a '.txt' extension?",
        "input": "",
        "response": "#!/bin/bash\n\nfor filename in *; do\n    if [[ $filename == *.txt ]]; then\n        echo $filename\n    fi\ndone",
        "output": "#!/bin/bash\n\nfor filename in *; do\n    if [[ $filename == *.txt ]]; then\n        echo $filename\n    fi\ndone"
    },
    {
        "instruction": "Implement a PHP function that accepts an array of strings and returns an array with the length of each string.",
        "input": "['apple', 'banana', 'cucumber']",
        "response": "<?php\n\nfunction get_string_lengths($strings) {\n    $string_lengths = array();\n    foreach ($strings as $string) {\n        array_push($string_lengths, strlen($string));\n    }\n    return $string_lengths;}\n\n$input_strings = ['apple', 'banana', 'cucumber'];\n$string_lengths = get_string_lengths($input_strings);\nprint_r($string_lengths);\n\n?>",
        "output": "<?php\n\nfunction get_string_lengths($strings) {\n    $string_lengths = array();\n    foreach ($strings as $string) {\n        array_push($string_lengths, strlen($string));\n    }\n    return $string_lengths;}\n\n$input_strings = ['apple', 'banana', 'cucumber'];\n$string_lengths = get_string_lengths($input_strings);\nprint_r($string_lengths);\n\n?>"
    },
    {
        "instruction": "Design a SQL query that calculates the total sales for each product in a 'sales' table containing columns 'product_id', 'quantity', and 'price' (assume the quantity and price are for individual items).",
        "input": "sales table:\nproduct_id | quantity | price\n1          | 10       | 5.00\n1          | 5        | 4.50\n2          | 3        | 10.00\n3          | 1        | 20.00",
        "response": "SELECT product_id, SUM(quantity * price) as total_sales\nFROM sales\nGROUP BY product_id;",
        "output": "SELECT product_id, SUM(quantity * price) as total_sales\nFROM sales\nGROUP BY product_id;"
    },
    {
        "instruction": "Design a C# method that takes a list of integers and returns the average value.",
        "input": "[5, 10, 15, 20, 25]",
        "response": "using System;\nusing System.Collections.Generic;\n\npublic class AverageCalculator\n{\n    public static double CalculateAverage(List<int> numbers)\n    {\n        int sum = 0;\n        foreach (int number in numbers)\n        {\n            sum += number;\n        }\n        return (double)sum / numbers.Count;\n    }\n\n    public static void Main(string[] args)\n    {\n        var numbers = new List<int> { 5, 10, 15, 20, 25 };\n        double average = CalculateAverage(numbers);\n        Console.WriteLine(average);\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\npublic class AverageCalculator\n{\n    public static double CalculateAverage(List<int> numbers)\n    {\n        int sum = 0;\n        foreach (int number in numbers)\n        {\n            sum += number;\n        }\n        return (double)sum / numbers.Count;\n    }\n\n    public static void Main(string[] args)\n    {\n        var numbers = new List<int> { 5, 10, 15, 20, 25 };\n        double average = CalculateAverage(numbers);\n        Console.WriteLine(average);\n    }}"
    },
    {
        "instruction": "How would you generate an array of 10 random integers between 1 and 100 in PHP?",
        "input": "",
        "response": "<?php\nfunction generateRandomArray()\n{\n    $randomArray = array();\n    for ($i = 0; $i < 10; $i++) {\n        array_push($randomArray, rand(1, 100));\n    }\n    return $randomArray;}\n\n$randomNumbers = generateRandomArray();\nprint_r($randomNumbers);\n?>",
        "output": "<?php\nfunction generateRandomArray()\n{\n    $randomArray = array();\n    for ($i = 0; $i < 10; $i++) {\n        array_push($randomArray, rand(1, 100));\n    }\n    return $randomArray;}\n\n$randomNumbers = generateRandomArray();\nprint_r($randomNumbers);\n?>"
    },
    {
        "instruction": "Write a SQL query to find the total number of customers from a 'customers' table who made a purchase in the last 30 days.",
        "input": "customers (id, name, purchase_date)",
        "response": "SELECT COUNT(*) FROM customers\nWHERE purchase_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);",
        "output": "SELECT COUNT(*) FROM customers\nWHERE purchase_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);"
    },
    {
        "instruction": "Create a shell script that counts the number of *.txt files in a given directory and its subdirectories.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -type f -name \"*.txt\" | wc -l",
        "output": "#!/bin/bash\n\nfind . -type f -name \"*.txt\" | wc -l"
    },
    {
        "instruction": "Implement a C++ function that computes the factorial of a positive integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    return (n == 0) ? 1 : n * factorial(n - 1);}\n\nint main() {\n    unsigned int n = 5;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    return (n == 0) ? 1 : n * factorial(n - 1);}\n\nint main() {\n    unsigned int n = 5;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a Python function that takes a string and reverses its words.",
        "input": "\"The quick brown fox jumps over the lazy dog\"",
        "response": "def reverse_words(s):\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\ninput_str = \"The quick brown fox jumps over the lazy dog\"\nresult = reverse_words(input_str)\nprint(result)",
        "output": "def reverse_words(s):\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\ninput_str = \"The quick brown fox jumps over the lazy dog\"\nresult = reverse_words(input_str)\nprint(result)"
    },
    {
        "instruction": "Can you create a shell script to archive a list of files using gzip compression?",
        "input": "file1.txt, file2.txt, file3.txt",
        "response": "#!/bin/sh\n\nfile_list=\"file1.txt file2.txt file3.txt\"\n\nfor file in $file_list; do\n    gzip \"$file\"\ndone",
        "output": "#!/bin/sh\n\nfile_list=\"file1.txt file2.txt file3.txt\"\n\nfor file in $file_list; do\n    gzip \"$file\"\ndone"
    },
    {
        "instruction": "Build a JavaScript function that takes an array and returns a new array containing only the even elements.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "response": "function filterEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst inputArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst result = filterEvenNumbers(inputArray);\nconsole.log(result);",
        "output": "function filterEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst inputArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst result = filterEvenNumbers(inputArray);\nconsole.log(result);"
    },
    {
        "instruction": "How can you create a Python script that fetches data from the OpenWeatherMap API using a city name provided by the user?",
        "input": "city='London', api_key='your_api_key'",
        "response": "import requests\n\ndef fetch_weather_data(city, api_key):\n    base_url = 'http://api.openweathermap.org/data/2.5/weather'\n    params = {\n        'q': city,\n        'appid': api_key\n    }\n    response = requests.get(base_url, params=params)\n    return response.json()\n\ncity = 'London'\napi_key = 'your_api_key'\nweather_data = fetch_weather_data(city, api_key)\nprint(weather_data)",
        "output": "import requests\n\ndef fetch_weather_data(city, api_key):\n    base_url = 'http://api.openweathermap.org/data/2.5/weather'\n    params = {\n        'q': city,\n        'appid': api_key\n    }\n    response = requests.get(base_url, params=params)\n    return response.json()\n\ncity = 'London'\napi_key = 'your_api_key'\nweather_data = fetch_weather_data(city, api_key)\nprint(weather_data)"
    },
    {
        "instruction": "Generate a simple Java class called Employee that contains a constructor, three private fields (name, age, and salary), and relevant getter and setter methods.",
        "input": "",
        "response": "public class Employee {\n    private String name;\n    private int age;\n    private double salary;\n\n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }}",
        "output": "public class Employee {\n    private String name;\n    private int age;\n    private double salary;\n\n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }}"
    },
    {
        "instruction": "Show me a basic example of a shell script that can be used to list all files and directories in a provided directory path.",
        "input": "directory_path='/home/user/documents'",
        "response": "#!/bin/bash\n\ndirectory_path='/home/user/documents'\nls -l \"$directory_path\"",
        "output": "#!/bin/bash\n\ndirectory_path='/home/user/documents'\nls -l \"$directory_path\""
    },
    {
        "instruction": "Implement a JavaScript function to determine if a year is a leap year.",
        "input": "2000",
        "response": "function isLeapYear(year) {\n    return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);}\n\nconst result = isLeapYear(2000);\nconsole.log(result);",
        "output": "function isLeapYear(year) {\n    return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);}\n\nconst result = isLeapYear(2000);\nconsole.log(result);"
    },
    {
        "instruction": "Please, show a Java program that reads a text file and counts the occurrences of each word, then outputs the results.",
        "input": "example.txt (the content of the file: 'apple orange banana apple banana grape')",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class WordCount {\n    public static void main(String[] args) {\n        String fileName = 'example.txt';\n\n        try {\n            FileReader fileReader = new FileReader(fileName);\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n            Map<String, Integer> wordCounts = new HashMap<String, Integer>();\n            String line;\n\n            while ((line = bufferedReader.readLine()) != null) {\n                String[] words = line.split(' ');\n\n                for (String word : words) {\n                    wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);\n                }\n            }\n\n            bufferedReader.close();\n\n            for (Map.Entry<String, Integer> entry : wordCounts.entrySet()) {\n                System.out.println(entry.getKey() + ' ' + entry.getValue());\n            }\n        } catch (IOException e) {\n            System.out.println('Error reading file: ' + e.getMessage());\n        }\n    }}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class WordCount {\n    public static void main(String[] args) {\n        String fileName = 'example.txt';\n\n        try {\n            FileReader fileReader = new FileReader(fileName);\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n            Map<String, Integer> wordCounts = new HashMap<String, Integer>();\n            String line;\n\n            while ((line = bufferedReader.readLine()) != null) {\n                String[] words = line.split(' ');\n\n                for (String word : words) {\n                    wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);\n                }\n            }\n\n            bufferedReader.close();\n\n            for (Map.Entry<String, Integer> entry : wordCounts.entrySet()) {\n                System.out.println(entry.getKey() + ' ' + entry.getValue());\n            }\n        } catch (IOException e) {\n            System.out.println('Error reading file: ' + e.getMessage());\n        }\n    }}"
    },
    {
        "instruction": "Create a C++ program to sort an array of integers using the bubble sort algorithm.",
        "input": "{5, 2, 9, 1, 5, 6}",
        "response": "#include <iostream>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    int arr[] = {5, 2, 9, 1, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    bubbleSort(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    int arr[] = {5, 2, 9, 1, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    bubbleSort(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Implement a Python function to find the factorial of a given non-negative integer using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Write an HTML, CSS, and JavaScript code that implements a simple stopwatch with start, stop, and reset buttons, and displays the elapsed time in seconds.",
        "input": "",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n    .stopwatch {\n        font-family: monospace;\n        font-size: 36px;\n    }\n    button {\n        font-size: 16px;\n    }\n</style>\n</head>\n<body>\n    <div class='stopwatch'>0.00</div>\n    <button id='startBtn'>Start</button>\n    <button id='stopBtn'>Stop</button>\n    <button id='resetBtn'>Reset</button>\n    \n    <script>\n        const startBtn = document.querySelector('#startBtn');\n        const stopBtn = document.querySelector('#stopBtn');\n        const resetBtn = document.querySelector('#resetBtn');\n        const stopwatchDisplay = document.querySelector('.stopwatch');\n        \n        let startTime, elapsedTime, interval;\n        \n        function updateDisplay() {\n            elapsedTime = (Date.now() - startTime) / 1000;\n            stopwatchDisplay.textContent = elapsedTime.toFixed(2);\n        }\n        \n        startBtn.addEventListener('click', () => {\n            startTime = Date.now();\n            interval = setInterval(updateDisplay, 10);\n        });\n        \n        stopBtn.addEventListener('click', () => {\n            clearInterval(interval);\n        });\n        \n        resetBtn.addEventListener('click', () => {\n            clearInterval(interval);\n            elapsedTime = 0;\n            stopwatchDisplay.textContent = '0.00';\n        });\n    </script>\n</body>\n</html>",
        "output": "<!DOCTYPE html>\n<html>\n<head>\n<style>\n    .stopwatch {\n        font-family: monospace;\n        font-size: 36px;\n    }\n    button {\n        font-size: 16px;\n    }\n</style>\n</head>\n<body>\n    <div class='stopwatch'>0.00</div>\n    <button id='startBtn'>Start</button>\n    <button id='stopBtn'>Stop</button>\n    <button id='resetBtn'>Reset</button>\n    \n    <script>\n        const startBtn = document.querySelector('#startBtn');\n        const stopBtn = document.querySelector('#stopBtn');\n        const resetBtn = document.querySelector('#resetBtn');\n        const stopwatchDisplay = document.querySelector('.stopwatch');\n        \n        let startTime, elapsedTime, interval;\n        \n        function updateDisplay() {\n            elapsedTime = (Date.now() - startTime) / 1000;\n            stopwatchDisplay.textContent = elapsedTime.toFixed(2);\n        }\n        \n        startBtn.addEventListener('click', () => {\n            startTime = Date.now();\n            interval = setInterval(updateDisplay, 10);\n        });\n        \n        stopBtn.addEventListener('click', () => {\n            clearInterval(interval);\n        });\n        \n        resetBtn.addEventListener('click', () => {\n            clearInterval(interval);\n            elapsedTime = 0;\n            stopwatchDisplay.textContent = '0.00';\n        });\n    </script>\n</body>\n</html>"
    },
    {
        "instruction": "How would you design a Java class representing a person, with fields for the first name, last name, and age, and a method that returns the person's full name?",
        "input": "first_name: \"John\", last_name: \"Doe\", age: 30",
        "response": "public class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n    \n    public Person(String firstName, String lastName, int age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n    }\n    \n    public String getFullName() {\n        return firstName + \" \" + lastName;\n    }}\n\nPerson person = new Person(\"John\", \"Doe\", 30);\nSystem.out.println(person.getFullName());",
        "output": "public class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n    \n    public Person(String firstName, String lastName, int age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n    }\n    \n    public String getFullName() {\n        return firstName + \" \" + lastName;\n    }}\n\nPerson person = new Person(\"John\", \"Doe\", 30);\nSystem.out.println(person.getFullName());"
    },
    {
        "instruction": "Write a shell script that takes a file name and outputs its word count, line count, and file size in bytes.",
        "input": "file.txt",
        "response": "#!/bin/sh\n\ninput_file=$1\n\nword_count=$(wc -w < \"$input_file\")\nline_count=$(wc -l < \"$input_file\")\nfile_size=$(wc -c < \"$input_file\")\n\necho \"Word Count: $word_count\"\necho \"Line Count: $line_count\"\necho \"File Size: $file_size bytes\"",
        "output": "#!/bin/sh\n\ninput_file=$1\n\nword_count=$(wc -w < \"$input_file\")\nline_count=$(wc -l < \"$input_file\")\nfile_size=$(wc -c < \"$input_file\")\n\necho \"Word Count: $word_count\"\necho \"Line Count: $line_count\"\necho \"File Size: $file_size bytes\""
    },
    {
        "instruction": "Implement a Python function that counts the occurrences of a word in a given text string.",
        "input": "text = 'apple banana apple orange apple grape banana'\nsearch_word = 'apple'",
        "response": "def count_word_occurrences(text, search_word):\n    words = text.split()\n    count = words.count(search_word)\n    return count\n\ntext = 'apple banana apple orange apple grape banana'\nsearch_word = 'apple'\nresult = count_word_occurrences(text, search_word)\nprint(result)",
        "output": "def count_word_occurrences(text, search_word):\n    words = text.split()\n    count = words.count(search_word)\n    return count\n\ntext = 'apple banana apple orange apple grape banana'\nsearch_word = 'apple'\nresult = count_word_occurrences(text, search_word)\nprint(result)"
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of a provided integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    cout << 'Factorial of ' << num << ' is: ' << factorial(num) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    cout << 'Factorial of ' << num << ' is: ' << factorial(num) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you build a function in JavaScript that accepts a callback function and an array, applying the callback function to each element in the array?",
        "input": "let arr = [1, 2, 3, 4];\nlet callback = x => x * 2;",
        "response": "function applyCallbackToArray(callback, arr) {\n    let result = [];\n    for (const element of arr) {\n        result.push(callback(element));\n    }\n    return result;\n}\n\nlet arr = [1, 2, 3, 4];\nlet callback = x => x * 2;\n\nconst result = applyCallbackToArray(callback, arr);\nconsole.log(result);",
        "output": "function applyCallbackToArray(callback, arr) {\n    let result = [];\n    for (const element of arr) {\n        result.push(callback(element));\n    }\n    return result;\n}\n\nlet arr = [1, 2, 3, 4];\nlet callback = x => x * 2;\n\nconst result = applyCallbackToArray(callback, arr);\nconsole.log(result);"
    },
    {
        "instruction": "Design a Java method that reverses the order of the words in a sentence.",
        "input": "String input = 'The quick brown fox jumps over the lazy dog';",
        "response": "public static String reverseWords(String sentence) {\n    String[] words = sentence.split(' ');\n    StringBuilder reversed = new StringBuilder();\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversed.append(words[i]).append(' ');\n    }\n    return reversed.toString().trim();\n}\n\nString input = 'The quick brown fox jumps over the lazy dog';\nString output = reverseWords(input);\nSystem.out.println(output);",
        "output": "public static String reverseWords(String sentence) {\n    String[] words = sentence.split(' ');\n    StringBuilder reversed = new StringBuilder();\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversed.append(words[i]).append(' ');\n    }\n    return reversed.toString().trim();\n}\n\nString input = 'The quick brown fox jumps over the lazy dog';\nString output = reverseWords(input);\nSystem.out.println(output);"
    },
    {
        "instruction": "Implement a merge sort algorithm in C++ that takes an integer vector, sorts it in ascending order, and returns the sorted vector.",
        "input": "{4, 7, 11, 2, 9, 1}",
        "response": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> merge(const vector<int>& left, const vector<int>& right) {\n    vector<int> result;\n    size_t i = 0, j = 0;\n    while (i < left.size() && j < right.size()) {\n        if (left[i] < right[j]) {\n            result.push_back(left[i]);\n            ++i;\n        } else {\n            result.push_back(right[j]);\n            ++j;\n        }\n    }\n    \n    while (i < left.size()) {\n        result.push_back(left[i]);\n        ++i;\n    }\n    \n    while (j < right.size()) {\n        result.push_back(right[j]);\n        ++j;\n    }\n\n    return result;}\n\nvector<int> merge_sort(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return arr;\n    }\n\n    size_t mid = arr.size() / 2;\n    vector<int> left(arr.begin(), arr.begin() + mid);\n    vector<int> right(arr.begin() + mid, arr.end());\n    left = merge_sort(left);\n    right = merge_sort(right);\n\n    return merge(left, right);}\n\nint main() {\n    vector<int> arr = {4, 7, 11, 2, 9, 1};\n    vector<int> sorted_arr = merge_sort(arr);\n    \n    for (const int& n : sorted_arr) {\n        cout << n << ' ';\n    }}",
        "output": "#include <vector>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> merge(const vector<int>& left, const vector<int>& right) {\n    vector<int> result;\n    size_t i = 0, j = 0;\n    while (i < left.size() && j < right.size()) {\n        if (left[i] < right[j]) {\n            result.push_back(left[i]);\n            ++i;\n        } else {\n            result.push_back(right[j]);\n            ++j;\n        }\n    }\n    \n    while (i < left.size()) {\n        result.push_back(left[i]);\n        ++i;\n    }\n    \n    while (j < right.size()) {\n        result.push_back(right[j]);\n        ++j;\n    }\n\n    return result;}\n\nvector<int> merge_sort(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return arr;\n    }\n\n    size_t mid = arr.size() / 2;\n    vector<int> left(arr.begin(), arr.begin() + mid);\n    vector<int> right(arr.begin() + mid, arr.end());\n    left = merge_sort(left);\n    right = merge_sort(right);\n\n    return merge(left, right);}\n\nint main() {\n    vector<int> arr = {4, 7, 11, 2, 9, 1};\n    vector<int> sorted_arr = merge_sort(arr);\n    \n    for (const int& n : sorted_arr) {\n        cout << n << ' ';\n    }}"
    },
    {
        "instruction": "How would you create a function in PHP to remove all vowels from a given string and display the resulting string?",
        "input": "\"Beautiful day for running.\"",
        "response": "<?php\n\nfunction remove_vowels($str) {\n    return preg_replace('/[aeiou]/i', '', $str);}\n\n$no_vowels_str = remove_vowels('Beautiful day for running.');\necho $no_vowels_str;\n\n?>",
        "output": "<?php\n\nfunction remove_vowels($str) {\n    return preg_replace('/[aeiou]/i', '', $str);}\n\n$no_vowels_str = remove_vowels('Beautiful day for running.');\necho $no_vowels_str;\n\n?>"
    },
    {
        "instruction": "Develop a Python script that reads the contents of a CSV file containing a list of names and email addresses, then prints out the names and email addresses of people with Gmail accounts.",
        "input": "\"Name,Email\nAlice,alice@example.com\nBob,bob@gmail.com\nCarol,carol@example.org\nDan,dan@gmail.com\"",
        "response": "import csv\nimport io\n\nfile_contents = \"Name,Email\\nAlice,alice@example.com\\nBob,bob@gmail.com\\nCarol,carol@example.org\\nDan,dan@gmail.com\"\n\ndef read_gmail_accounts(file_contents):\n    file = io.StringIO(file_contents)\n    reader = csv.DictReader(file)\n    gmail_accounts = []\n\n    for row in reader:\n        if '@gmail.com' in row['Email']:\n            gmail_accounts.append({'Name': row['Name'], 'Email': row['Email']})\n\n    return gmail_accounts\n\naccounts = read_gmail_accounts(file_contents)\nfor account in accounts:\n    print(account['Name'], account['Email'])",
        "output": "import csv\nimport io\n\nfile_contents = \"Name,Email\\nAlice,alice@example.com\\nBob,bob@gmail.com\\nCarol,carol@example.org\\nDan,dan@gmail.com\"\n\ndef read_gmail_accounts(file_contents):\n    file = io.StringIO(file_contents)\n    reader = csv.DictReader(file)\n    gmail_accounts = []\n\n    for row in reader:\n        if '@gmail.com' in row['Email']:\n            gmail_accounts.append({'Name': row['Name'], 'Email': row['Email']})\n\n    return gmail_accounts\n\naccounts = read_gmail_accounts(file_contents)\nfor account in accounts:\n    print(account['Name'], account['Email'])"
    },
    {
        "instruction": "Construct a JavaScript function that receives an object with numeric keys and values as input, then constructs a new object with increased key and value pairs (+3) for each key-value pair.",
        "input": "{1: 3, 3: 5, 7: 9}",
        "response": "function increaseKeyValues(obj) {\n    const newObj = {};\n    for (const key in obj) {\n        newObj[parseInt(key)+3] = obj[key] + 3;\n    }\n    return newObj;}\n\nconst inputObj = {1: 3, 3: 5, 7: 9};\nconst resultObj = increaseKeyValues(inputObj);\nconsole.log(resultObj);",
        "output": "function increaseKeyValues(obj) {\n    const newObj = {};\n    for (const key in obj) {\n        newObj[parseInt(key)+3] = obj[key] + 3;\n    }\n    return newObj;}\n\nconst inputObj = {1: 3, 3: 5, 7: 9};\nconst resultObj = increaseKeyValues(inputObj);\nconsole.log(resultObj);"
    },
    {
        "instruction": "Write a C++ function to calculate the factorial of a non-negative integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int number = 5;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n-1);\n    }}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int number = 5;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n-1);\n    }}"
    },
    {
        "instruction": "Please implement a Python function to download and save an image file from a given URL.",
        "input": "\"https://www.example.com/image.jpg\", \"image.jpg\"",
        "response": "import requests\n\ndef download_image(url, filename):\n    response = requests.get(url)\n    with open(filename, 'wb') as file:\n        file.write(response.content)\n\nurl = \"https://www.example.com/image.jpg\"\nfilename = \"image.jpg\"\ndownload_image(url, filename)",
        "output": "import requests\n\ndef download_image(url, filename):\n    response = requests.get(url)\n    with open(filename, 'wb') as file:\n        file.write(response.content)\n\nurl = \"https://www.example.com/image.jpg\"\nfilename = \"image.jpg\"\ndownload_image(url, filename)"
    },
    {
        "instruction": "Design a Java program that reads a text file and counts the frequency of words in the file.",
        "input": "\"sample.txt\"",
        "response": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class WordFrequencyCounter {\n    public static void main(String[] args) {\n        try {\n            File file = new File(\"sample.txt\");\n            FileInputStream fis = new FileInputStream(file);\n            Scanner scanner = new Scanner(fis);\n            Map<String, Integer> wordCount = new HashMap<>();\n\n            while (scanner.hasNext()) {\n                String word = scanner.next().toLowerCase();\n                wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n            }\n\n            for (Map.Entry<String, Integer> entry : wordCount.entrySet()) {\n                System.out.println(entry.getKey() + \": \" + entry.getValue());\n            }\n\n            scanner.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }}",
        "output": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class WordFrequencyCounter {\n    public static void main(String[] args) {\n        try {\n            File file = new File(\"sample.txt\");\n            FileInputStream fis = new FileInputStream(file);\n            Scanner scanner = new Scanner(fis);\n            Map<String, Integer> wordCount = new HashMap<>();\n\n            while (scanner.hasNext()) {\n                String word = scanner.next().toLowerCase();\n                wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n            }\n\n            for (Map.Entry<String, Integer> entry : wordCount.entrySet()) {\n                System.out.println(entry.getKey() + \": \" + entry.getValue());\n            }\n\n            scanner.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }}"
    },
    {
        "instruction": "Compose a shell script to remove all files in a directory with a specific extension.",
        "input": "\"/path/to/directory\", \".txt\"",
        "response": "#!/bin/bash\n\ndir=\"/path/to/directory\"\nextension=\".txt\"\n\nfind \"$dir\" -type f -name \"*$extension\" -exec rm {} \\;\n\necho \"All $extension files in $dir have been removed.\"",
        "output": "#!/bin/bash\n\ndir=\"/path/to/directory\"\nextension=\".txt\"\n\nfind \"$dir\" -type f -name \"*$extension\" -exec rm {} \\;\n\necho \"All $extension files in $dir have been removed.\""
    },
    {
        "instruction": "Write a Python function that takes a list of strings as input and returns a dictionary with the count of each unique string.",
        "input": "[\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\"]",
        "response": "def count_strings(lst):\n    result = {}\n    for s in lst:\n        result[s] = result.get(s, 0) + 1\n    return result\n\ninput_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\"]\nprint(count_strings(input_list))",
        "output": "def count_strings(lst):\n    result = {}\n    for s in lst:\n        result[s] = result.get(s, 0) + 1\n    return result\n\ninput_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\"]\nprint(count_strings(input_list))"
    },
    {
        "instruction": "How would you implement a queue in JavaScript using two stacks?",
        "input": "enqueue: 1, 2, 3, 4\ndequeue: 1, 2",
        "response": "class Queue {\n    constructor() {\n        this.stack1 = [];\n        this.stack2 = [];\n    }\n\n    enqueue(value) {\n        this.stack1.push(value);\n    }\n\n    dequeue() {\n        if (this.stack2.length === 0) {\n            while (this.stack1.length) {\n                this.stack2.push(this.stack1.pop());\n            }\n        }\n        return this.stack2.pop();\n    }\n}\n\nconst queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.enqueue(4);\nconsole.log(queue.dequeue());\nconsole.log(queue.dequeue());",
        "output": "class Queue {\n    constructor() {\n        this.stack1 = [];\n        this.stack2 = [];\n    }\n\n    enqueue(value) {\n        this.stack1.push(value);\n    }\n\n    dequeue() {\n        if (this.stack2.length === 0) {\n            while (this.stack1.length) {\n                this.stack2.push(this.stack1.pop());\n            }\n        }\n        return this.stack2.pop();\n    }\n}\n\nconst queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.enqueue(4);\nconsole.log(queue.dequeue());\nconsole.log(queue.dequeue());"
    },
    {
        "instruction": "Develop a C++ function that reads a text file, line by line, and returns a vector containing all the lines.",
        "input": "file_path: \"input.txt\"",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> read_lines(const std::string& file_path) {\n    std::vector<std::string> lines;\n    std::ifstream file(file_path);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n\nint main() {\n    std::vector<std::string> lines = read_lines(\"input.txt\");\n    for (const std::string& line : lines) {\n        std::cout << line << std::endl;\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> read_lines(const std::string& file_path) {\n    std::vector<std::string> lines;\n    std::ifstream file(file_path);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n\nint main() {\n    std::vector<std::string> lines = read_lines(\"input.txt\");\n    for (const std::string& line : lines) {\n        std::cout << line << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Shell Script that takes a filename as an argument and outputs the number of lines, words, and characters in the file.",
        "input": "file.txt",
        "response": "#!/bin/sh\n\nif [ $# -eq 1 ]; then\n    filename=$1\n    lines=$(wc -l < \"$filename\")\n    words=$(wc -w < \"$filename\")\n    characters=$(wc -c < \"$filename\")\n    echo \"Lines: $lines\nWords: $words\nCharacters: $characters\"\nelse\n    echo \"Usage: $0 <filename>\"\nfi",
        "output": "#!/bin/sh\n\nif [ $# -eq 1 ]; then\n    filename=$1\n    lines=$(wc -l < \"$filename\")\n    words=$(wc -w < \"$filename\")\n    characters=$(wc -c < \"$filename\")\n    echo \"Lines: $lines\nWords: $words\nCharacters: $characters\"\nelse\n    echo \"Usage: $0 <filename>\"\nfi"
    },
    {
        "instruction": "Can you write a Python script that reads the content of a text file and prints the lines containing a specified keyword?",
        "input": "example.txt, 'apple'",
        "response": "def search_file_and_print_lines(filename, keyword):\n    with open(filename, 'r') as file:\n        for line in file:\n            if keyword in line:\n                print(line.strip())\n\nsearch_file_and_print_lines('example.txt', 'apple')",
        "output": "def search_file_and_print_lines(filename, keyword):\n    with open(filename, 'r') as file:\n        for line in file:\n            if keyword in line:\n                print(line.strip())\n\nsearch_file_and_print_lines('example.txt', 'apple')"
    },
    {
        "instruction": "Design a JavaScript function that accepts a string as input and determines whether the string contains a valid URL.",
        "input": "'Check this link: https://www.example.com'",
        "response": "function isURL(str) {\n    const pattern = new RegExp('^(https?:\\/\\/)?' + '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' + '((\\d{1,3}\\.){3}\\d{1,3}))' + '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + '(\\?[;&a-z\\d%_.~+=-]*)?' + '(\\#[-a-z\\d_]*)?$', 'i');\n    return pattern.test(str);}\n\nconst string_to_check = 'Check this link: https://www.example.com';\nconst words = string_to_check.split(' ');\n\nfor (const word of words) {\n    if (isURL(word)) {\n        console.log('URL:', word);\n    }}",
        "output": "function isURL(str) {\n    const pattern = new RegExp('^(https?:\\/\\/)?' + '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' + '((\\d{1,3}\\.){3}\\d{1,3}))' + '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + '(\\?[;&a-z\\d%_.~+=-]*)?' + '(\\#[-a-z\\d_]*)?$', 'i');\n    return pattern.test(str);}\n\nconst string_to_check = 'Check this link: https://www.example.com';\nconst words = string_to_check.split(' ');\n\nfor (const word of words) {\n    if (isURL(word)) {\n        console.log('URL:', word);\n    }}"
    },
    {
        "instruction": "Develop a bash script that takes a filename as an argument and lists the file permissions in a human-readable format.",
        "input": "report.txt",
        "response": "#!/bin/bash\nfilename=$1\n\nif [ -e \"$filename\" ]; then\n    permissions=$(stat -c '%A' \"$filename\")\n    echo \"File permissions for $filename: $permissions\"\nelse\n    echo \"File not found.\"\nfi\n\n# Usage:\n# chmod +x script.sh\n# ./script.sh report.txt",
        "output": "#!/bin/bash\nfilename=$1\n\nif [ -e \"$filename\" ]; then\n    permissions=$(stat -c '%A' \"$filename\")\n    echo \"File permissions for $filename: $permissions\"\nelse\n    echo \"File not found.\"\nfi\n\n# Usage:\n# chmod +x script.sh\n# ./script.sh report.txt"
    },
    {
        "instruction": "Write a C program that reads an integer and prints its binary representation.",
        "input": "10",
        "response": "#include <stdio.h>\n\nvoid print_binary(int num) {\n    if (num > 1) {\n        print_binary(num / 2);\n    }\n    printf(\"%d\", num % 2);}\n\nint main() {\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    print_binary(n);\n    return 0;}",
        "output": "#include <stdio.h>\n\nvoid print_binary(int num) {\n    if (num > 1) {\n        print_binary(num / 2);\n    }\n    printf(\"%d\", num % 2);}\n\nint main() {\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    print_binary(n);\n    return 0;}"
    },
    {
        "instruction": "How would you implement a RESTful API that returns the current date and time in Node.js using the Express framework?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.get('/currentDateTime', (req, res) => {\n  const currentDateTime = new Date();\n  res.json({ currentDateTime: currentDateTime.toISOString() });});\n\napp.listen(PORT, () => {\n  console.log(`Server running at http://localhost:${PORT}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.get('/currentDateTime', (req, res) => {\n  const currentDateTime = new Date();\n  res.json({ currentDateTime: currentDateTime.toISOString() });});\n\napp.listen(PORT, () => {\n  console.log(`Server running at http://localhost:${PORT}`);});"
    },
    {
        "instruction": "Create a Java function that opens a file and counts the number of words in it.",
        "input": "sample.txt",
        "response": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class WordCounter {\n\n    public static int wordCount(String fileName) {\n        int count = 0;\n        try {\n            File file = new File(fileName);\n            FileReader fileReader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                String[] words = line.trim().split(\"\\\\s+\");\n                count += words.length;\n            }\n            bufferedReader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(wordCount(\"sample.txt\"));\n    }}",
        "output": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class WordCounter {\n\n    public static int wordCount(String fileName) {\n        int count = 0;\n        try {\n            File file = new File(fileName);\n            FileReader fileReader = new FileReader(file);\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                String[] words = line.trim().split(\"\\\\s+\");\n                count += words.length;\n            }\n            bufferedReader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(wordCount(\"sample.txt\"));\n    }}"
    },
    {
        "instruction": "Design a Python function that calculates the power of a given number recursively.",
        "input": "3, 4",
        "response": "def power(base, exponent):\n    if exponent == 0:\n        return 1\n    return base * power(base, exponent - 1)\n\nresult = power(3, 4)\nprint(result)",
        "output": "def power(base, exponent):\n    if exponent == 0:\n        return 1\n    return base * power(base, exponent - 1)\n\nresult = power(3, 4)\nprint(result)"
    },
    {
        "instruction": "Design a C++ function that calculates the factorial of a positive integer using recursion.",
        "input": "5",
        "response": "int factorial(int n) {\n    if (n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n#include<iostream>\n\nint main() {\n    int input = 5;\n    std::cout << factorial(input);}",
        "output": "int factorial(int n) {\n    if (n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n#include<iostream>\n\nint main() {\n    int input = 5;\n    std::cout << factorial(input);}"
    },
    {
        "instruction": "Write a C# program that reads user input for age and prints the appropriate message depending on the age range they fall in.",
        "input": "25",
        "response": "using System;\n\nclass AgeMessage {\n    static void Main() {\n        Console.Write('Enter your age: ');\n        int age = int.Parse(Console.ReadLine());\n        string message;\n\n        if (age < 18) {\n            message = 'You are a minor.';\n        }\n        else if (age < 65) {\n            message = 'You are an adult.';\n        }\n        else {\n            message = 'You are a senior citizen.';\n        }\n\n        Console.WriteLine(message);\n    }}",
        "output": "using System;\n\nclass AgeMessage {\n    static void Main() {\n        Console.Write('Enter your age: ');\n        int age = int.Parse(Console.ReadLine());\n        string message;\n\n        if (age < 18) {\n            message = 'You are a minor.';\n        }\n        else if (age < 65) {\n            message = 'You are an adult.';\n        }\n        else {\n            message = 'You are a senior citizen.';\n        }\n\n        Console.WriteLine(message);\n    }}"
    },
    {
        "instruction": "What would be the Python code to perform a GET request and parse the JSON response given a URL?",
        "input": "https://api.example.com/data",
        "response": "import requests\nimport json\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\ndata = json.loads(response.text)\n\nprint(data)",
        "output": "import requests\nimport json\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\ndata = json.loads(response.text)\n\nprint(data)"
    },
    {
        "instruction": "Implement a SQL query in MySQL to search for records in a 'users' table with the last_name 'Smith' and sort the results in ascending order based on the 'created_at' column.",
        "input": "users: id, first_name, last_name, email, created_at",
        "response": "SELECT * FROM users WHERE last_name = 'Smith' ORDER BY created_at ASC;",
        "output": "SELECT * FROM users WHERE last_name = 'Smith' ORDER BY created_at ASC;"
    },
    {
        "instruction": "Implement a C++ function that calculates the gcd (greatest common divisor) of two positive integer inputs using the Euclidean algorithm.",
        "input": "56, 98",
        "response": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;}\n\nint main() {\n    int num1 = 56, num2 = 98;\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;}\n\nint main() {\n    int num1 = 56, num2 = 98;\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << endl;\n    return 0;}"
    },
    {
        "instruction": "Design a PHP script that takes an array of strings and prints the longest word.",
        "input": "[\"banana\", \"apple\", \"strawberry\", \"kiwi\"]",
        "response": "<?php\nfunction find_longest_word($arr) {\n    $longestWord = '';\n    foreach ($arr as $word) {\n        if (strlen($word) > strlen($longestWord)) {\n            $longestWord = $word;\n        }\n    }\n    return $longestWord;}\n\n$words = array(\"banana\", \"apple\", \"strawberry\", \"kiwi\");\n$longestWord = find_longest_word($words);\necho \"The longest word is \" . $longestWord . \".\";\n?>",
        "output": "<?php\nfunction find_longest_word($arr) {\n    $longestWord = '';\n    foreach ($arr as $word) {\n        if (strlen($word) > strlen($longestWord)) {\n            $longestWord = $word;\n        }\n    }\n    return $longestWord;}\n\n$words = array(\"banana\", \"apple\", \"strawberry\", \"kiwi\");\n$longestWord = find_longest_word($words);\necho \"The longest word is \" . $longestWord . \".\";\n?>"
    },
    {
        "instruction": "Write a JavaScript function to convert a UNIX timestamp to a human-readable date in the format 'YYYY-MM-DD HH:mm:ss'.",
        "input": "1633059092",
        "response": "function unixToHumanReadable(timestamp) {\n    const date = new Date(timestamp * 1000);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;}\n\nconst unixTimestamp = 1633059092;\nconst humanReadableDate = unixToHumanReadable(unixTimestamp);\nconsole.log('Human readable date:', humanReadableDate);",
        "output": "function unixToHumanReadable(timestamp) {\n    const date = new Date(timestamp * 1000);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;}\n\nconst unixTimestamp = 1633059092;\nconst humanReadableDate = unixToHumanReadable(unixTimestamp);\nconsole.log('Human readable date:', humanReadableDate);"
    },
    {
        "instruction": "Can you demonstrate a Python program that takes a comma-separated list of words and prints them in alphabetical order?",
        "input": "\"red, green, blue, yellow, orange\"",
        "response": "def sort_words(words_str):\n    words_list = words_str.split(', ')\n    sorted_words = sorted(words_list)\n    return ', '.join(sorted_words)\n\ninput_str = \"red, green, blue, yellow, orange\"\nsorted_str = sort_words(input_str)\nprint(\"Sorted words:\", sorted_str)",
        "output": "def sort_words(words_str):\n    words_list = words_str.split(', ')\n    sorted_words = sorted(words_list)\n    return ', '.join(sorted_words)\n\ninput_str = \"red, green, blue, yellow, orange\"\nsorted_str = sort_words(input_str)\nprint(\"Sorted words:\", sorted_str)"
    },
    {
        "instruction": "Design a C++ program that accepts a user's first and last name, then displays it in the format 'last name, first name'.",
        "input": "John, Doe",
        "response": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string firstName, lastName;\n    \n    cout << \"Enter your first name: \";\n    cin >> firstName;\n    cout << \"Enter your last name: \";\n    cin >> lastName;\n    \n    cout << lastName << \", \" << firstName << endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string firstName, lastName;\n    \n    cout << \"Enter your first name: \";\n    cin >> firstName;\n    cout << \"Enter your last name: \";\n    cin >> lastName;\n    \n    cout << lastName << \", \" << firstName << endl;\n    return 0;}"
    },
    {
        "instruction": "Can you create a Python function that takes a string input and returns the length of the longest word in that string?",
        "input": "\"The quick brown fox jumped over the lazy dog.\"",
        "response": "def longest_word_length(s):\n    words = s.split()\n    max_length = 0\n    \n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length\n\nresult = longest_word_length(\"The quick brown fox jumped over the lazy dog.\")\nprint(result)",
        "output": "def longest_word_length(s):\n    words = s.split()\n    max_length = 0\n    \n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length\n\nresult = longest_word_length(\"The quick brown fox jumped over the lazy dog.\")\nprint(result)"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of strings and returns an array containing the lengths of each string.",
        "input": "[\"apple\", \"banana\", \"cherry\"]",
        "response": "function stringLengths(arr) {\n    return arr.map(str => str.length);}\n\nconst lengths = stringLengths([\"apple\", \"banana\", \"cherry\"]);\nconsole.log(lengths);",
        "output": "function stringLengths(arr) {\n    return arr.map(str => str.length);}\n\nconst lengths = stringLengths([\"apple\", \"banana\", \"cherry\"]);\nconsole.log(lengths);"
    },
    {
        "instruction": "Create a Bash script that retrieves the current date and time and prints it to the console in the format 'YYYY-MM-DD HH:MM:SS'.",
        "input": "",
        "response": "#!/bin/bash\n\ncurrent_date_time=$(date +\"%Y-%m-%d %H:%M:%S\")\necho $current_date_time",
        "output": "#!/bin/bash\n\ncurrent_date_time=$(date +\"%Y-%m-%d %H:%M:%S\")\necho $current_date_time"
    },
    {
        "instruction": "Implement a C++ function that computes the Fibonacci sequence up to a given number n.",
        "input": "10",
        "response": "#include <iostream>\nusing namespace std;\n\nvoid fibonacci(int n) {\n    int a = 0, b = 1, c;\n    cout << a << ' ' << b << ' ';\n    for (int i = 3; i <= n; ++i) {\n        c = a + b;\n        cout << c << ' ';\n        a = b;\n        b = c;\n    }}\n\nint main() {\n    fibonacci(10);\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nvoid fibonacci(int n) {\n    int a = 0, b = 1, c;\n    cout << a << ' ' << b << ' ';\n    for (int i = 3; i <= n; ++i) {\n        c = a + b;\n        cout << c << ' ';\n        a = b;\n        b = c;\n    }}\n\nint main() {\n    fibonacci(10);\n    return 0;}"
    },
    {
        "instruction": "What would be a C# code snippet to calculate the area of a circle, given its radius?",
        "input": "5",
        "response": "using System;\n\nclass CircleArea\n{\n    static double CalculateArea(double radius)\n    {\n        return Math.PI * Math.Pow(radius, 2);\n    }\n\n    static void Main(string[] args)\n    {\n        double radius = 5;\n        double area = CalculateArea(radius);\n        Console.WriteLine(\"The area of the circle is: \" + area);\n    }}",
        "output": "using System;\n\nclass CircleArea\n{\n    static double CalculateArea(double radius)\n    {\n        return Math.PI * Math.Pow(radius, 2);\n    }\n\n    static void Main(string[] args)\n    {\n        double radius = 5;\n        double area = CalculateArea(radius);\n        Console.WriteLine(\"The area of the circle is: \" + area);\n    }}"
    },
    {
        "instruction": "Write a Shell script that finds and outputs all the files in the current directory with the extension .txt.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *.txt\ndo\n    echo \"$file\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt\ndo\n    echo \"$file\"\ndone"
    },
    {
        "instruction": "Design a Python script that reads a CSV file named 'data.csv' and calculates the average value of the numbers in the second column.",
        "input": "data.csv contents: \n1,10,30\n2,20,40\n3,15,25\n4,10,50\n5,25,20",
        "response": "import csv\n\ndef calculate_average(filename):\n    with open(filename, 'r') as csvfile:\n        csv_reader = csv.reader(csvfile)\n        sum_values = 0\n        count = 0\n        \n        for row in csv_reader:\n            sum_values += int(row[1])\n            count += 1\n\n        average = sum_values / count\n        return average\n\nresult = calculate_average('data.csv')\nprint('Average value:', result)",
        "output": "import csv\n\ndef calculate_average(filename):\n    with open(filename, 'r') as csvfile:\n        csv_reader = csv.reader(csvfile)\n        sum_values = 0\n        count = 0\n        \n        for row in csv_reader:\n            sum_values += int(row[1])\n            count += 1\n\n        average = sum_values / count\n        return average\n\nresult = calculate_average('data.csv')\nprint('Average value:', result)"
    },
    {
        "instruction": "Compose a SQL query that lists all items from the 'products' table which have a price greater than or equal to 10.",
        "input": "products (id, name, price)",
        "response": "SELECT * FROM products WHERE price >= 10;",
        "output": "SELECT * FROM products WHERE price >= 10;"
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of a given integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    cout << \"Factorial: \" << factorial(n) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    cout << \"Factorial: \" << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Bash script that reads a set of URLs from a file 'urls.txt' and checks their HTTP status using the 'curl' command?",
        "input": "urls.txt contents: \nhttps://example.com\nhttps://example.org",
        "response": "#!/bin/bash\n\nwhile read url; do\n    http_status=$(curl -o /dev/null -s -w '%{http_code}' \"$url\")\n    echo \"$url - HTTP status: $http_status\"\ndone < urls.txt",
        "output": "#!/bin/bash\n\nwhile read url; do\n    http_status=$(curl -o /dev/null -s -w '%{http_code}' \"$url\")\n    echo \"$url - HTTP status: $http_status\"\ndone < urls.txt"
    },
    {
        "instruction": "Design a JavaScript function that searches an array of objects for a specific object with a given 'id' property value and updates its 'name' property.",
        "input": "[{id: 1, name: 'John'}, {id: 2, name: 'Jane'}], id: 2, new name: 'Janet'",
        "response": "function updateObjectName(arr, id, newName) {\n    const foundObj = arr.find(obj => obj.id === id);\n    if (foundObj) {\n        foundObj.name = newName;\n    }}\n\nlet objectsArray = [{id: 1, name: 'John'}, {id: 2, name: 'Jane'}];\nupdateObjectName(objectsArray, 2, 'Janet');\nconsole.log(objectsArray);",
        "output": "function updateObjectName(arr, id, newName) {\n    const foundObj = arr.find(obj => obj.id === id);\n    if (foundObj) {\n        foundObj.name = newName;\n    }}\n\nlet objectsArray = [{id: 1, name: 'John'}, {id: 2, name: 'Jane'}];\nupdateObjectName(objectsArray, 2, 'Janet');\nconsole.log(objectsArray);"
    },
    {
        "instruction": "Write a C++ function to compute the factorial of a given positive integer using recursion.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 6;\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 6;\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a simple API call in Python to get a list of top 10 cryptocurrencies using the 'CoinGecko API'?",
        "input": "https://api.coingecko.com/api/v3/search/trending",
        "response": "import requests\n\ndef get_top_cryptocurrencies():\n    url = 'https://api.coingecko.com/api/v3/search/trending'\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        top_currencies = [{'name': coin['item']['name'], 'symbol': coin['item']['symbol']} for coin in data['coins']]\n        return top_currencies\n    else:\n        return None\n\ntop_10 = get_top_cryptocurrencies()\nprint(top_10)",
        "output": "import requests\n\ndef get_top_cryptocurrencies():\n    url = 'https://api.coingecko.com/api/v3/search/trending'\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        top_currencies = [{'name': coin['item']['name'], 'symbol': coin['item']['symbol']} for coin in data['coins']]\n        return top_currencies\n    else:\n        return None\n\ntop_10 = get_top_cryptocurrencies()\nprint(top_10)"
    },
    {
        "instruction": "Using JavaScript, write a function that filters out all elements from an array which are divisible by a specified number.",
        "input": "[10, 15, 18, 20, 25], 5",
        "response": "function filterDivisible(array, divisor) {\n    return array.filter(element => element % divisor !== 0);}\n\nconst input = [10, 15, 18, 20, 25];\nconst divisor = 5;\nconst filteredArray = filterDivisible(input, divisor);\nconsole.log(filteredArray);",
        "output": "function filterDivisible(array, divisor) {\n    return array.filter(element => element % divisor !== 0);}\n\nconst input = [10, 15, 18, 20, 25];\nconst divisor = 5;\nconst filteredArray = filterDivisible(input, divisor);\nconsole.log(filteredArray);"
    },
    {
        "instruction": "Construct a shell script that displays your local IP address and host machine name.",
        "input": "",
        "response": "#!/bin/bash\nip_address=$(hostname -I | awk '{print $1}')\nhost_name=$(hostname)\necho \"IP address: $ip_address\"\necho \"Host name: $host_name\"",
        "output": "#!/bin/bash\nip_address=$(hostname -I | awk '{print $1}')\nhost_name=$(hostname)\necho \"IP address: $ip_address\"\necho \"Host name: $host_name\""
    },
    {
        "instruction": "Implement a C++ function that checks if a given integer is even or odd and prints the result.",
        "input": "42",
        "response": "#include <iostream>\nusing namespace std;\n\nvoid check_even_odd(int n){\n    if(n % 2 == 0){\n        cout << n << \" is even.\" << endl;\n    }else{\n        cout << n << \" is odd.\" << endl;\n    }}\n\nint main() {\n    int num = 42;\n    check_even_odd(num);\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nvoid check_even_odd(int n){\n    if(n % 2 == 0){\n        cout << n << \" is even.\" << endl;\n    }else{\n        cout << n << \" is odd.\" << endl;\n    }}\n\nint main() {\n    int num = 42;\n    check_even_odd(num);\n    return 0;}"
    },
    {
        "instruction": "What's a Python script that calculates the factorial of a given number recursively?",
        "input": "6",
        "response": "def factorial_recursion(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursion(n-1)\n\nnumber = 6\nresult = factorial_recursion(number)\nprint(f\"The factorial of {number} is {result}\")",
        "output": "def factorial_recursion(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursion(n-1)\n\nnumber = 6\nresult = factorial_recursion(number)\nprint(f\"The factorial of {number} is {result}\")"
    },
    {
        "instruction": "Write a shell script to count and display the number of files in the current directory.",
        "input": "",
        "response": "#!/bin/bash\n\nfile_count=$(ls -1 | wc -l)\necho \"Number of files in the current directory: $file_count\"",
        "output": "#!/bin/bash\n\nfile_count=$(ls -1 | wc -l)\necho \"Number of files in the current directory: $file_count\""
    },
    {
        "instruction": "Design a JavaScript function that takes a string and replaces all vowels with their uppercase counterparts.",
        "input": "\"programming\"",
        "response": "function replaceVowelsWithUppercase(str) {\n    return str.replace(/[aeiou]/g, (match) => match.toUpperCase());}\n\nconst input = \"programming\";\nconst result = replaceVowelsWithUppercase(input);\nconsole.log(result);",
        "output": "function replaceVowelsWithUppercase(str) {\n    return str.replace(/[aeiou]/g, (match) => match.toUpperCase());}\n\nconst input = \"programming\";\nconst result = replaceVowelsWithUppercase(input);\nconsole.log(result);"
    },
    {
        "instruction": "Develop a C++ program to sort a list of numbers using the Bubble Sort algorithm.",
        "input": "5, 1, 9, 3, 2",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid bubbleSort(std::vector<int>& nums) {\n    for (size_t i = 0; i < nums.size(); ++i) {\n        for (size_t j = 0; j + 1 < nums.size() - i; ++j) {\n            if (nums[j] > nums[j + 1]) {\n                std::swap(nums[j], nums[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    std::vector<int> nums{5, 1, 9, 3, 2};\n    \n    bubbleSort(nums);\n\n    for (const auto& num : nums) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid bubbleSort(std::vector<int>& nums) {\n    for (size_t i = 0; i < nums.size(); ++i) {\n        for (size_t j = 0; j + 1 < nums.size() - i; ++j) {\n            if (nums[j] > nums[j + 1]) {\n                std::swap(nums[j], nums[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    std::vector<int> nums{5, 1, 9, 3, 2};\n    \n    bubbleSort(nums);\n\n    for (const auto& num : nums) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Design a Python function that takes a list of words and returns the ones whose length is greater than a given integer.",
        "input": "['apple', 'banana', 'cherry', 'kiwi'], 5",
        "response": "def filter_long_words(words, min_length):\n    return [word for word in words if len(word) > min_length]\n\ninput_words = ['apple', 'banana', 'cherry', 'kiwi']\nmin_length = 5\nlong_words = filter_long_words(input_words, min_length)\nprint(long_words)",
        "output": "def filter_long_words(words, min_length):\n    return [word for word in words if len(word) > min_length]\n\ninput_words = ['apple', 'banana', 'cherry', 'kiwi']\nmin_length = 5\nlong_words = filter_long_words(input_words, min_length)\nprint(long_words)"
    },
    {
        "instruction": "How would you implement a function in JavaScript that reverses the order of characters within a string?",
        "input": "reverseString('programming')",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst reversed = reverseString('programming');\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst reversed = reverseString('programming');\nconsole.log(reversed);"
    },
    {
        "instruction": "Write a shell script that lists all the files in the current directory sorted by their size.",
        "input": "",
        "response": "#!/bin/sh\n\nls -lS",
        "output": "#!/bin/sh\n\nls -lS"
    },
    {
        "instruction": "Write a Python function that calculates the factorial of a non-negative integer using recursion.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Design a Java method that reverses a given string.",
        "input": "\"hello world\"",
        "response": "public static String reverseString(String input) {\n    StringBuilder sb = new StringBuilder(input);\n    return sb.reverse().toString();}\n\nString reversed = reverseString(\"hello world\");\nSystem.out.println(reversed);",
        "output": "public static String reverseString(String input) {\n    StringBuilder sb = new StringBuilder(input);\n    return sb.reverse().toString();}\n\nString reversed = reverseString(\"hello world\");\nSystem.out.println(reversed);"
    },
    {
        "instruction": "Create a JavaScript function that filters out odd numbers from an array of integers.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8]",
        "response": "function filterOdds(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst evenNumbers = filterOdds([1, 2, 3, 4, 5, 6, 7, 8]);\nconsole.log(evenNumbers);",
        "output": "function filterOdds(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst evenNumbers = filterOdds([1, 2, 3, 4, 5, 6, 7, 8]);\nconsole.log(evenNumbers);"
    },
    {
        "instruction": "How would you implement a C++ program that reads a user input string and counts the number of vowels in it?",
        "input": "\"The quick brown fox jumps over the lazy dog\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nint countVowels(const std::string &str) {\n    const std::string vowels = \"aeiouAEIOU\";\n    return std::count_if(str.begin(), str.end(), [&](char c) {\n        return vowels.find(c) != std::string::npos;\n    });}\n\nint main() {\n    std::string input;\n    std::getline(std::cin, input);\n\n    int vowelCount = countVowels(input);\n    std::cout << \"Number of vowels: \" << vowelCount << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nint countVowels(const std::string &str) {\n    const std::string vowels = \"aeiouAEIOU\";\n    return std::count_if(str.begin(), str.end(), [&](char c) {\n        return vowels.find(c) != std::string::npos;\n    });}\n\nint main() {\n    std::string input;\n    std::getline(std::cin, input);\n\n    int vowelCount = countVowels(input);\n    std::cout << \"Number of vowels: \" << vowelCount << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Design a recursive algorithm in C++ to calculate the factorial of a non-negative integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    int result = factorial(n);\n    cout << \"Factorial of \" << n << \" is \" << result << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    int result = factorial(n);\n    cout << \"Factorial of \" << n << \" is \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "Write an SQL query that selects all the distinct first names from a table called 'employees' ordered by 'last_name'. Assume that there is a 'first_name' and a 'last_name' column in the table.",
        "input": "employees",
        "response": "SELECT DISTINCT first_name\nFROM employees\nORDER BY last_name;",
        "output": "SELECT DISTINCT first_name\nFROM employees\nORDER BY last_name;"
    },
    {
        "instruction": "Create a Shell script that counts the number of lines of text in a file and assigns the result to a variable.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nFILE=\"file.txt\"\nLINE_COUNT=$(wc -l < \"$FILE\")\n\necho \"The file $FILE has $LINE_COUNT lines.\"",
        "output": "#!/bin/bash\n\nFILE=\"file.txt\"\nLINE_COUNT=$(wc -l < \"$FILE\")\n\necho \"The file $FILE has $LINE_COUNT lines.\""
    },
    {
        "instruction": "How can you verify if an object is of primitive data type 'number' in JavaScript?",
        "input": "42",
        "response": "function isNumber(value) {\n    return typeof value === 'number';}\n\nconst value = 42;\nconst result = isNumber(value);\nconsole.log(`Value '${value}' is of type number: ${result}`);",
        "output": "function isNumber(value) {\n    return typeof value === 'number';}\n\nconst value = 42;\nconst result = isNumber(value);\nconsole.log(`Value '${value}' is of type number: ${result}`);"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers and calculates the mean of the elements.",
        "input": "{5, 20, 10, 18}",
        "response": "#include <iostream>\n#include <vector>\n#include <numeric>\n\ndouble calculate_mean(const std::vector<int>& numbers) {\n    double sum = std::accumulate(numbers.begin(), numbers.end(), 0);\n    return sum / numbers.size();}\n\nint main() {\n    std::vector<int> numbers = {5, 20, 10, 18};\n    double mean = calculate_mean(numbers);\n    std::cout << 'Mean: ' << mean << std::endl;}",
        "output": "#include <iostream>\n#include <vector>\n#include <numeric>\n\ndouble calculate_mean(const std::vector<int>& numbers) {\n    double sum = std::accumulate(numbers.begin(), numbers.end(), 0);\n    return sum / numbers.size();}\n\nint main() {\n    std::vector<int> numbers = {5, 20, 10, 18};\n    double mean = calculate_mean(numbers);\n    std::cout << 'Mean: ' << mean << std::endl;}"
    },
    {
        "instruction": "How would you fix a Python script that throws a 'TypeError: 'NoneType' object is not iterable' error while looping through a list input?",
        "input": "{'TypeError: 'NoneType' object is not iterable' for myList = [1, None, 2, 3]}",
        "response": "def iterate_list(myList):\n    for item in myList:\n        if item is not None:\n            # Your code to process 'item' goes here\n            print(item)\n\nmyList = [1, None, 2, 3]\niterate_list(myList)",
        "output": "def iterate_list(myList):\n    for item in myList:\n        if item is not None:\n            # Your code to process 'item' goes here\n            print(item)\n\nmyList = [1, None, 2, 3]\niterate_list(myList)"
    },
    {
        "instruction": "Generate a Bash script that requests user input for their name and age, then outputs a personalized greeting.",
        "input": "Alice, 30",
        "response": "#!/bin/bash\n\necho 'Please enter your name:'\nread name\necho 'Please enter your age:'\nread age\n\necho 'Hello, '$name'! You are '$age' years old.'",
        "output": "#!/bin/bash\n\necho 'Please enter your name:'\nread name\necho 'Please enter your age:'\nread age\n\necho 'Hello, '$name'! You are '$age' years old.'"
    },
    {
        "instruction": "In JavaScript, create a function that takes an object as input and returns an array with each key-value pair as a string with the format 'key:value'.",
        "input": "{name: 'John', age: 28, country: 'USA'}",
        "response": "function objectToArray(obj) {\n    const result = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(`${key}:${obj[key]}`);\n        }\n    }\n    return result;}\n\nconst exampleObject = {name: 'John', age: 28, country: 'USA'};\nconst result = objectToArray(exampleObject);\nconsole.log(result);",
        "output": "function objectToArray(obj) {\n    const result = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(`${key}:${obj[key]}`);\n        }\n    }\n    return result;}\n\nconst exampleObject = {name: 'John', age: 28, country: 'USA'};\nconst result = objectToArray(exampleObject);\nconsole.log(result);"
    },
    {
        "instruction": "Draft a SQL query for retrieving all records from a 'customers' table, selecting only the 'id', 'fullname', and 'email'.",
        "input": "customers table with columns: id, fullname, email, address, phone",
        "response": "SELECT id, fullname, email FROM customers;",
        "output": "SELECT id, fullname, email FROM customers;"
    },
    {
        "instruction": "Define a JavaScript function for calculating the factorial of a positive integer.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a C++ function that finds the length of a given char array.",
        "input": "char arr[] = {'H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};",
        "response": "#include <iostream>\n\nint findLength(char arr[]) {\n    int length = 0;\n    while (arr[length] != '\\0') {\n        length++;\n    }\n    return length;}\n\nint main() {\n    char arr[] = {'H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};\n    int length = findLength(arr);\n    std::cout << \"Length: \" << length << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint findLength(char arr[]) {\n    int length = 0;\n    while (arr[length] != '\\0') {\n        length++;\n    }\n    return length;}\n\nint main() {\n    char arr[] = {'H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};\n    int length = findLength(arr);\n    std::cout << \"Length: \" << length << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How do you write a Python function to determine if a number is prime?",
        "input": "23",
        "response": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nresult = is_prime(23)\nprint(result)",
        "output": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nresult = is_prime(23)\nprint(result)"
    },
    {
        "instruction": "Implement a Python program that reads a CSV file and calculates the average of a given column.",
        "input": "data.csv: name,age,grade\nAlice,23,87\nBob,24,90\nEve,22,88",
        "response": "import csv\n\ndef calculate_average(csv_file, column):\n    total = 0\n    count = 0\n    \n    with open(csv_file, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            total += float(row[column])\n            count += 1\n    \n    return total / count if count != 0 else 0\n\naverage_grade = calculate_average('data.csv', 'grade')\nprint(average_grade)",
        "output": "import csv\n\ndef calculate_average(csv_file, column):\n    total = 0\n    count = 0\n    \n    with open(csv_file, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            total += float(row[column])\n            count += 1\n    \n    return total / count if count != 0 else 0\n\naverage_grade = calculate_average('data.csv', 'grade')\nprint(average_grade)"
    },
    {
        "instruction": "Write a Java function that creates a new array of strings, with each element reversed from the provided array.",
        "input": "[\"apple\", \"banana\", \"cherry\"]",
        "response": "import java.util.Arrays;\n\npublic class ReverseStrings {\n    public static String[] reverseElements(String[] arr) {\n        String[] reversed = new String[arr.length];\n\n        for (int i = 0; i < arr.length; i++) {\n            reversed[i] = new StringBuilder(arr[i]).reverse().toString();\n        }\n\n        return reversed;\n    }\n\n    public static void main(String[] args) {\n        String[] input = {\"apple\", \"banana\", \"cherry\"};\n        String[] result = reverseElements(input);\n        System.out.println(Arrays.toString(result));\n    }}",
        "output": "import java.util.Arrays;\n\npublic class ReverseStrings {\n    public static String[] reverseElements(String[] arr) {\n        String[] reversed = new String[arr.length];\n\n        for (int i = 0; i < arr.length; i++) {\n            reversed[i] = new StringBuilder(arr[i]).reverse().toString();\n        }\n\n        return reversed;\n    }\n\n    public static void main(String[] args) {\n        String[] input = {\"apple\", \"banana\", \"cherry\"};\n        String[] result = reverseElements(input);\n        System.out.println(Arrays.toString(result));\n    }}"
    },
    {
        "instruction": "Fix the JavaScript code to correctly handle an error, if reading the JSON file fails, by logging the error message to the console.",
        "input": "const fs = require('fs');\n\nfs.readFile('data.json', 'utf-8', (err, data) => {\n    if (err) throw err;\n    console.log(JSON.parse(data));});",
        "response": "const fs = require('fs');\n\nfs.readFile('data.json', 'utf-8', (err, data) => {\n    if (err) {\n        console.error(err.message);\n    } else {\n        console.log(JSON.parse(data));\n    }});",
        "output": "const fs = require('fs');\n\nfs.readFile('data.json', 'utf-8', (err, data) => {\n    if (err) {\n        console.error(err.message);\n    } else {\n        console.log(JSON.parse(data));\n    }});"
    },
    {
        "instruction": "How would you develop a shell script that removes all the '.txt' files in a given directory?",
        "input": "/home/user/documents",
        "response": "#!/bin/sh\n\ndirectory=\"/home/user/documents\"\n\nfor file in \"$directory\"/*.txt; do\n  if [ -f \"$file\" ]; then\n    rm \"$file\"\n  fi\ndone",
        "output": "#!/bin/sh\n\ndirectory=\"/home/user/documents\"\n\nfor file in \"$directory\"/*.txt; do\n  if [ -f \"$file\" ]; then\n    rm \"$file\"\n  fi\ndone"
    },
    {
        "instruction": "Implement a C++ program that calculates and prints the factorial of a given positive integer.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 6;\n    cout << factorial(n) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 6;\n    cout << factorial(n) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a C# method that reverses a given string without using any built-in functions or methods.",
        "input": "\"Hello, world!\"",
        "response": "public class StringReverser {\n    public static void Main(string[] args) {\n        string input = \"Hello, world!\";\n        Console.WriteLine(Reverse(input));\n    }\n\n    public static string Reverse(string original) {\n        char[] characters = new char[original.Length];\n        int lastIndex = original.Length - 1;\n        for (int i = 0; i <= lastIndex; i++) {\n            characters[i] = original[lastIndex - i];\n        }\n        return new string(characters);\n    }\n}",
        "output": "public class StringReverser {\n    public static void Main(string[] args) {\n        string input = \"Hello, world!\";\n        Console.WriteLine(Reverse(input));\n    }\n\n    public static string Reverse(string original) {\n        char[] characters = new char[original.Length];\n        int lastIndex = original.Length - 1;\n        for (int i = 0; i <= lastIndex; i++) {\n            characters[i] = original[lastIndex - i];\n        }\n        return new string(characters);\n    }\n}"
    },
    {
        "instruction": "Using JavaScript, create a function that takes a positive number and returns an array containing all Fibonacci numbers up to the given number (inclusive).",
        "input": "13",
        "response": "function fibonacci(n) {\n    let sequence = [0, 1];\n    while (sequence[sequence.length - 1] < n) {\n        sequence.push(sequence[sequence.length - 1] + sequence[sequence.length - 2]);\n    }\n    if (sequence[sequence.length - 1] > n) sequence.pop();\n    return sequence;\n}\n\nconsole.log(fibonacci(13));",
        "output": "function fibonacci(n) {\n    let sequence = [0, 1];\n    while (sequence[sequence.length - 1] < n) {\n        sequence.push(sequence[sequence.length - 1] + sequence[sequence.length - 2]);\n    }\n    if (sequence[sequence.length - 1] > n) sequence.pop();\n    return sequence;\n}\n\nconsole.log(fibonacci(13));"
    },
    {
        "instruction": "Write a Python function that converts a given list of strings into a dictionary where each key-value pair represents a string and its length.",
        "input": "[\"apple\", \"banana\", \"cantaloupe\"]",
        "response": "def string_length_map(words):\n    return {word: len(word) for word in words}\n\ninput_list = [\"apple\", \"banana\", \"cantaloupe\"]\nresult = string_length_map(input_list)\nprint(result)",
        "output": "def string_length_map(words):\n    return {word: len(word) for word in words}\n\ninput_list = [\"apple\", \"banana\", \"cantaloupe\"]\nresult = string_length_map(input_list)\nprint(result)"
    },
    {
        "instruction": "Could you generate a Python script that reads data from a CSV file and computes the average value of a specific column?",
        "input": "data.csv\nJohn,25\nAlice,30\nEve,28",
        "response": "import csv\n\ndef calculate_average(filename, column):\n    total = 0\n    count = 0\n\n    with open(filename, 'r') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            total += int(row[column])\n            count += 1\n\n    return total / count\n\naverage = calculate_average('data.csv', 1)\nprint('Average value:', average)",
        "output": "import csv\n\ndef calculate_average(filename, column):\n    total = 0\n    count = 0\n\n    with open(filename, 'r') as f:\n        reader = csv.reader(f)\n        for row in reader:\n            total += int(row[column])\n            count += 1\n\n    return total / count\n\naverage = calculate_average('data.csv', 1)\nprint('Average value:', average)"
    },
    {
        "instruction": "Create a Java program that reads a text file and replaces all occurrences of a word with another word.",
        "input": "example.txt\nThe quick brown fox jumps over the lazy dog\noldWord: brown\nnewWord: red",
        "response": "import java.io.*;\nimport java.nio.file.*;\nimport java.util.stream.*;\n\npublic class ReplaceWord {\n    public static void main(String[] args) {\n        String filename = \"example.txt\";\n        String oldWord = \"brown\";\n        String newWord = \"red\";\n\n        try {\n            Path path = Paths.get(filename);\n            Stream<String> lines = Files.lines(path);\n            List<String> replaced = lines.map(line -> line.replaceAll(oldWord, newWord)).collect(Collectors.toList());\n            Files.write(path, replaced);\n            lines.close();\n            System.out.println(\"Replaced all occurrences of '\" + oldWord + \"' with '\" + newWord + \"'.\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}",
        "output": "import java.io.*;\nimport java.nio.file.*;\nimport java.util.stream.*;\n\npublic class ReplaceWord {\n    public static void main(String[] args) {\n        String filename = \"example.txt\";\n        String oldWord = \"brown\";\n        String newWord = \"red\";\n\n        try {\n            Path path = Paths.get(filename);\n            Stream<String> lines = Files.lines(path);\n            List<String> replaced = lines.map(line -> line.replaceAll(oldWord, newWord)).collect(Collectors.toList());\n            Files.write(path, replaced);\n            lines.close();\n            System.out.println(\"Replaced all occurrences of '\" + oldWord + \"' with '\" + newWord + \"'.\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}"
    },
    {
        "instruction": "Implement a function in JavaScript that sorts a list of objects based on a specified property and its order (ascending or descending).",
        "input": "[{name:'Alice',age:35},{name:'Bob',age:28},{name:'Eve',age:38}]\nproperty: age\norder: ascending",
        "response": "function sortByProperty(arr, property, order) {\n    return arr.sort((a, b) => {\n        if (order === 'ascending') {\n            return a[property] - b[property];\n        } else {\n            return b[property] - a[property];\n        }\n    });}\n\nconst people = [{name:'Alice',age:35},{name:'Bob',age:28},{name:'Eve',age:38}];\nconst sorted = sortByProperty(people, 'age', 'ascending');\nconsole.log(sorted);",
        "output": "function sortByProperty(arr, property, order) {\n    return arr.sort((a, b) => {\n        if (order === 'ascending') {\n            return a[property] - b[property];\n        } else {\n            return b[property] - a[property];\n        }\n    });}\n\nconst people = [{name:'Alice',age:35},{name:'Bob',age:28},{name:'Eve',age:38}];\nconst sorted = sortByProperty(people, 'age', 'ascending');\nconsole.log(sorted);"
    },
    {
        "instruction": "Write a C++ program that takes the user's input and gives the factorial of a non-negative integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num;\n    cout << \"Enter a non-negative integer: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num;\n    cout << \"Enter a non-negative integer: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Construct a Python function that reverses a given list and outputs the reversed list.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def reverse_list(input_list):\n    return input_list[::-1]\n\noriginal_list = [1, 2, 3, 4, 5]\nreversed_list = reverse_list(original_list)\nprint(reversed_list)",
        "output": "def reverse_list(input_list):\n    return input_list[::-1]\n\noriginal_list = [1, 2, 3, 4, 5]\nreversed_list = reverse_list(original_list)\nprint(reversed_list)"
    },
    {
        "instruction": "Implement a JavaScript function that counts the occurrences of a substring within a given string.",
        "input": "\"hello world, world peace\", \"world\"",
        "response": "function countSubstringOccurrences(str, sub) {\n    return str.split(sub).length - 1;}\n\nconst inputStr = \"hello world, world peace\";\nconst targetSub = \"world\";\nconst count = countSubstringOccurrences(inputStr, targetSub);\nconsole.log(count);",
        "output": "function countSubstringOccurrences(str, sub) {\n    return str.split(sub).length - 1;}\n\nconst inputStr = \"hello world, world peace\";\nconst targetSub = \"world\";\nconst count = countSubstringOccurrences(inputStr, targetSub);\nconsole.log(count);"
    },
    {
        "instruction": "Write a Shell script that takes a file path as a command-line argument and outputs the number of lines and words in the file.",
        "input": "file.txt",
        "response": "#!/bin/sh\nfilename=\"$1\"\nlines=`wc -l < \"$filename\"`\nwords=`wc -w < \"$filename\"`\necho \"Lines: $lines\"\necho \"Words: $words\"",
        "output": "#!/bin/sh\nfilename=\"$1\"\nlines=`wc -l < \"$filename\"`\nwords=`wc -w < \"$filename\"`\necho \"Lines: $lines\"\necho \"Words: $words\""
    },
    {
        "instruction": "Develop a C# method that calculates the factorial of a given integer.",
        "input": "5",
        "response": "using System;\n\nclass FactorialCalculator {\n    public static int CalculateFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * CalculateFactorial(n - 1);\n    }\n\n    public static void Main(string[] args) {\n        int input = 5;\n        int result = CalculateFactorial(input);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\n\nclass FactorialCalculator {\n    public static int CalculateFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * CalculateFactorial(n - 1);\n    }\n\n    public static void Main(string[] args) {\n        int input = 5;\n        int result = CalculateFactorial(input);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "How do I create a Python script that will count the occurrences of each word in a given text file?",
        "input": "test.txt: \"Hello World! The world is beautiful. A beautiful world we live in.\"",
        "response": "import re\nfrom collections import Counter\n\ndef count_words(file_path):\n    with open(file_path, 'r') as file:\n        text = file.read().lower()\n    words = re.findall(r'\\w+', text)\n    word_counts = Counter(words)\n    return word_counts\n\nfile_path = 'test.txt'\nword_counts = count_words(file_path)\nprint(word_counts)",
        "output": "import re\nfrom collections import Counter\n\ndef count_words(file_path):\n    with open(file_path, 'r') as file:\n        text = file.read().lower()\n    words = re.findall(r'\\w+', text)\n    word_counts = Counter(words)\n    return word_counts\n\nfile_path = 'test.txt'\nword_counts = count_words(file_path)\nprint(word_counts)"
    },
    {
        "instruction": "Please write a JavaScript program that takes two date strings as input and returns the difference in days between them.",
        "input": "2021-09-30, 2021-10-06",
        "response": "function dayDifference(date1, date2) {\n    const dateObj1 = new Date(date1);\n    const dateObj2 = new Date(date2);\n    const msPerDay = 1000 * 60 * 60 * 24;\n    return Math.abs(Math.ceil((dateObj1 - dateObj2) / msPer_DAY));}\n\nconst date1 = '2021-09-30';\nconst date2 = '2021-10-06';\nconst differenceInDays = dayDifference(date1, date2);\nconsole.log(differenceInDays);",
        "output": "function dayDifference(date1, date2) {\n    const dateObj1 = new Date(date1);\n    const dateObj2 = new Date(date2);\n    const msPerDay = 1000 * 60 * 60 * 24;\n    return Math.abs(Math.ceil((dateObj1 - dateObj2) / msPer_DAY));}\n\nconst date1 = '2021-09-30';\nconst date2 = '2021-10-06';\nconst differenceInDays = dayDifference(date1, date2);\nconsole.log(differenceInDays);"
    },
    {
        "instruction": "Can you create a SQL query to get a list of employee names, their salaries, and job titles from two tables named 'employees' and 'jobs' where both tables have a common field 'job_id'?",
        "input": "employees: id, name, salary, job_id | jobs: id, title, department_id",
        "response": "SELECT employees.name, employees.salary, jobs.title\nFROM employees\nJOIN jobs ON employees.job_id = jobs.id;",
        "output": "SELECT employees.name, employees.salary, jobs.title\nFROM employees\nJOIN jobs ON employees.job_id = jobs.id;"
    },
    {
        "instruction": "Implement a C++ function named 'is_prime' that determines if a given number is a prime number or not.",
        "input": "13",
        "response": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int number) {\n    if (number <= 1) {\n        return false;\n    }\n\n    for (int i = 2; i <= std::sqrt(number); i++) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int input_number = 13;\n    std::cout << (is_prime(input_number) ? \"Prime\" : \"Not Prime\") << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int number) {\n    if (number <= 1) {\n        return false;\n    }\n\n    for (int i = 2; i <= std::sqrt(number); i++) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int input_number = 13;\n    std::cout << (is_prime(input_number) ? \"Prime\" : \"Not Prime\") << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Develop a Python script to calculate the factorial of a non-negative integer.",
        "input": "5",
        "response": "def factorial(n):\n    if n < 0:\n        raise ValueError(\"Factorial of negative numbers is not defined\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ninput_number = 5\nresult = factorial(input_number)\nprint(result)",
        "output": "def factorial(n):\n    if n < 0:\n        raise ValueError(\"Factorial of negative numbers is not defined\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ninput_number = 5\nresult = factorial(input_number)\nprint(result)"
    },
    {
        "instruction": "Write a Bash script that calculates the number of lines in a given text file.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfilename=\"example.txt\"\n\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\"",
        "output": "#!/bin/bash\n\nfilename=\"example.txt\"\n\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\""
    },
    {
        "instruction": "Develop a JavaScript function that receives a string and returns the number of occurrences of a specific character.",
        "input": "e, \"Hello, world!\"",
        "response": "function countCharacter(char, str) {\n    let count = 0;\n    for (const ch of str) {\n        if (char.toLowerCase() === ch.toLowerCase()) {\n            count += 1;\n        }\n    }\n    return count;}\n\nconst charToCount = 'e';\nconst inputString = 'Hello, world!';\nconst occurrences = countCharacter(charToCount, inputString);\nconsole.log(occurrences);",
        "output": "function countCharacter(char, str) {\n    let count = 0;\n    for (const ch of str) {\n        if (char.toLowerCase() === ch.toLowerCase()) {\n            count += 1;\n        }\n    }\n    return count;}\n\nconst charToCount = 'e';\nconst inputString = 'Hello, world!';\nconst occurrences = countCharacter(charToCount, inputString);\nconsole.log(occurrences);"
    },
    {
        "instruction": "Write a C program that computes the factorial of a given number.",
        "input": "5",
        "response": "#include<stdio.h>\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    printf(\"Factorial of %d is %d\\n\", num, result);\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "#include<stdio.h>\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    printf(\"Factorial of %d is %d\\n\", num, result);\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Implement a function in PHP to find and return the smallest element in an array.",
        "input": "[9, 5, 8, 14, 3]",
        "response": "<?php\n\nfunction findSmallest($arr) {\n    $min = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n        }\n    }\n    return $min;\n}\n\n$array = array(9, 5, 8, 14, 3);\n$minValue = findSmallest($array);\necho \"Smallest value in the array: $minValue\\n\";\n?>",
        "output": "<?php\n\nfunction findSmallest($arr) {\n    $min = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n        }\n    }\n    return $min;\n}\n\n$array = array(9, 5, 8, 14, 3);\n$minValue = findSmallest($array);\necho \"Smallest value in the array: $minValue\\n\";\n?>"
    },
    {
        "instruction": "How can I create a Bash script to display the file size of the specified file in human-readable format?",
        "input": "/path/to/myfile.txt",
        "response": "#!/bin/bash\n\nfile_path=\"/path/to/myfile.txt\"\nfile_size=$(du -sh \"$file_path\")\necho \"File size of $file_path: $file_size\"",
        "output": "#!/bin/bash\n\nfile_path=\"/path/to/myfile.txt\"\nfile_size=$(du -sh \"$file_path\")\necho \"File size of $file_path: $file_size\""
    },
    {
        "instruction": "Design a SQL query to return the average population of all cities with a population greater than 500000.",
        "input": "cities table:\nid | name | country | population\n---------------------------------\n1  | New York | USA | 1000000\n2  | London | UK | 800000\n3  | Small Town | UK | 30000",
        "response": "SELECT AVG(population) as average_population\nFROM cities\nWHERE population > 500000;",
        "output": "SELECT AVG(population) as average_population\nFROM cities\nWHERE population > 500000;"
    },
    {
        "instruction": "Write a Python script that reads content from a CSV file, manipulates the data, and writes it to a new CSV file.",
        "input": "Input CSV file: id,name,age\\n1,John,23\\n2,Alice,30\\n3,Bob,45",
        "response": "import csv\n\ndef transform_data(row):\n    row['age'] += 1\n    return row\n\nwith open('input.csv', 'r') as infile, open('output.csv', 'w', newline='') as outfile:\n    reader = csv.DictReader(infile)\n    fieldnames = reader.fieldnames\n    writer = csv.DictWriter(outfile, fieldnames=fieldnames)\n\n    writer.writeheader()\n    for row in reader:\n        for field in fieldnames:\n            if field == 'age':\n                row[field] = int(row[field])\n        transformed_row = transform_data(row)\n        writer.writerow(transformed_row)",
        "output": "import csv\n\ndef transform_data(row):\n    row['age'] += 1\n    return row\n\nwith open('input.csv', 'r') as infile, open('output.csv', 'w', newline='') as outfile:\n    reader = csv.DictReader(infile)\n    fieldnames = reader.fieldnames\n    writer = csv.DictWriter(outfile, fieldnames=fieldnames)\n\n    writer.writeheader()\n    for row in reader:\n        for field in fieldnames:\n            if field == 'age':\n                row[field] = int(row[field])\n        transformed_row = transform_data(row)\n        writer.writerow(transformed_row)"
    },
    {
        "instruction": "Create a JavaScript function to send a GET request using the Fetch API and then log the response to the console.",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }}\n\nfetchData('https://jsonplaceholder.typicode.com/todos/1');",
        "output": "async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }}\n\nfetchData('https://jsonplaceholder.typicode.com/todos/1');"
    },
    {
        "instruction": "Implement a C++ program that reads integers from a file and stores all positive numbers in a vector, then sorts the vector and prints its content.",
        "input": "File content: 5 -3 10 7 -2",
        "response": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::ifstream input_file;\n    input_file.open('input.txt');\n\n    std::vector<int> positive_numbers;\n    int num;\n\n    while (input_file >> num) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n\n    input_file.close();\n    std::sort(positive_numbers.begin(), positive_numbers.end());\n\n    for (const int &number : positive_numbers) {\n        std::cout << number << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::ifstream input_file;\n    input_file.open('input.txt');\n\n    std::vector<int> positive_numbers;\n    int num;\n\n    while (input_file >> num) {\n        if (num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n\n    input_file.close();\n    std::sort(positive_numbers.begin(), positive_numbers.end());\n\n    for (const int &number : positive_numbers) {\n        std::cout << number << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Design a Bash script that retrieves the memory usage of a specific Linux process using the 'ps' command and outputs the process ID (PID) with its proportion of used memory.",
        "input": "Process name: nginx",
        "response": "#!/bin/bash\n\nprocess_name='nginx'\npid_and_memory_usage=$(ps -eo pid,%mem,cmd --sort=-%mem | grep $process_name | head -n 1)\n\nif [ -n \"$pid_and_memory_usage\" ]; then\n    echo \"Memory usage for $process_name:\"\n    echo \"$pid_and_memory_usage\" | awk '{ printf(\"PID: %s, Memory Usage: %s%%\\n\", $1, $2) }'\nelse\n    echo \"No $process_name process found.\"\nfi",
        "output": "#!/bin/bash\n\nprocess_name='nginx'\npid_and_memory_usage=$(ps -eo pid,%mem,cmd --sort=-%mem | grep $process_name | head -n 1)\n\nif [ -n \"$pid_and_memory_usage\" ]; then\n    echo \"Memory usage for $process_name:\"\n    echo \"$pid_and_memory_usage\" | awk '{ printf(\"PID: %s, Memory Usage: %s%%\\n\", $1, $2) }'\nelse\n    echo \"No $process_name process found.\"\nfi"
    },
    {
        "instruction": "Write a C++ function to find the factorial of a positive integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int input = 6;\n    int result = factorial(input);\n    \n    cout << \"Factorial of \" << input << \" is: \" << result << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int input = 6;\n    int result = factorial(input);\n    \n    cout << \"Factorial of \" << input << \" is: \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "Design a Python program that converts given temperature in Fahrenheit to Celsius.",
        "input": "98.6",
        "response": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\n\ninput_temperature = 98.6\nconverted_temperature = fahrenheit_to_celsius(input_temperature)\nprint('Temperature in Celsius: {:.2f}'.format(converted_temperature))",
        "output": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\n\ninput_temperature = 98.6\nconverted_temperature = fahrenheit_to_celsius(input_temperature)\nprint('Temperature in Celsius: {:.2f}'.format(converted_temperature))"
    },
    {
        "instruction": "Create a shell script that lists files larger than a given size in the current directory.",
        "input": "100K",
        "response": "#!/bin/sh\n\nSIZE_THRESHOLD='100K'\nfind . -maxdepth 1 -type f -size +${SIZE_THRESHOLD} -exec ls -lh {} \\;\n",
        "output": "#!/bin/sh\n\nSIZE_THRESHOLD='100K'\nfind . -maxdepth 1 -type f -size +${SIZE_THRESHOLD} -exec ls -lh {} \\;\n"
    },
    {
        "instruction": "How would you write a JavaScript function to sort an array of objects by a specific property?",
        "input": "[{ name: 'Alice', age: 30 }, { name: 'Bob', age: 45 }, { name: 'Carol', age: 25 }], 'age'",
        "response": "function sortByProperty(array, property) {\n    return array.sort((a, b) => a[property] - b[property]);}\n\nconst people = [\n    { name: 'Alice', age: 30 },\n    { name: 'Bob', age: 45 },\n    { name: 'Carol', age: 25 }\n];\nconst sortedPeople = sortByProperty(people, 'age');\nconsole.log(sortedPeople);",
        "output": "function sortByProperty(array, property) {\n    return array.sort((a, b) => a[property] - b[property]);}\n\nconst people = [\n    { name: 'Alice', age: 30 },\n    { name: 'Bob', age: 45 },\n    { name: 'Carol', age: 25 }\n];\nconst sortedPeople = sortByProperty(people, 'age');\nconsole.log(sortedPeople);"
    },
    {
        "instruction": "Write a Python script that fetches the title of a given URL using the requests and BeautifulSoup libraries.",
        "input": "https://example.com",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string\n\nurl = 'https://example.com'\ntitle = fetch_title(url)\nprint(title)",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string\n\nurl = 'https://example.com'\ntitle = fetch_title(url)\nprint(title)"
    },
    {
        "instruction": "In Java, implement a simple method to calculate the factorial of a number.",
        "input": "5",
        "response": "public class Factorial {\n    public static void main(String[] args) {\n        int num = 5;\n        int result = calculateFactorial(num);\n        System.out.println(result);\n    }\n\n    public static int calculateFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * calculateFactorial(n - 1);\n        }\n    }}",
        "output": "public class Factorial {\n    public static void main(String[] args) {\n        int num = 5;\n        int result = calculateFactorial(num);\n        System.out.println(result);\n    }\n\n    public static int calculateFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * calculateFactorial(n - 1);\n        }\n    }}"
    },
    {
        "instruction": "Design a SQL query to find the average age of employees in a database table named 'employees', where the 'age' column holds the employee's age.",
        "input": "",
        "response": "SELECT AVG(age) as average_age FROM employees;",
        "output": "SELECT AVG(age) as average_age FROM employees;"
    },
    {
        "instruction": "Implement a bash script to count the number of lines containing the word 'ERROR' in a given log file.",
        "input": "logfile.txt",
        "response": "#!/bin/bash\nfile='logfile.txt'\ngrep -c 'ERROR' $file",
        "output": "#!/bin/bash\nfile='logfile.txt'\ngrep -c 'ERROR' $file"
    },
    {
        "instruction": "Write a C++ program that reads an input file containing integers, calculates the sum of the integers, and writes the sum to an output file.",
        "input": "input.txt - Content: '3 6 9 12 15'\noutput.txt",
        "response": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream input(\"input.txt\");\n    std::ofstream output(\"output.txt\");\n    int number, sum = 0;\n\n    while (input >> number) {\n        sum += number;\n    }\n\n    output << sum;\n\n    input.close();\n    output.close();\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream input(\"input.txt\");\n    std::ofstream output(\"output.txt\");\n    int number, sum = 0;\n\n    while (input >> number) {\n        sum += number;\n    }\n\n    output << sum;\n\n    input.close();\n    output.close();\n\n    return 0;\n}"
    },
    {
        "instruction": "Implement a PHP function that calculates and returns the factorial of a given integer.",
        "input": "5",
        "response": "<?php\n\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);\n}\n\necho factorial(5);\n\n?>",
        "output": "<?php\n\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);\n}\n\necho factorial(5);\n\n?>"
    },
    {
        "instruction": "What's the code for a shell script that lists files in the current directory and their respective sizes?",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *; do\n    echo \"${file}: $(stat -c %s \"${file}\") bytes\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *; do\n    echo \"${file}: $(stat -c %s \"${file}\") bytes\"\ndone"
    },
    {
        "instruction": "Develop a Swift function that calculates and prints the first n Fibonacci numbers.",
        "input": "10",
        "response": "func printFibonacciNumbers(_ n: Int) {\n    var first = 0\n    var second = 1\n\n    for _ in 0..<n {\n        print(first)\n        let next = first + second\n        first = second\n        second = next\n    }\n}\n\nprintFibonacciNumbers(10)",
        "output": "func printFibonacciNumbers(_ n: Int) {\n    var first = 0\n    var second = 1\n\n    for _ in 0..<n {\n        print(first)\n        let next = first + second\n        first = second\n        second = next\n    }\n}\n\nprintFibonacciNumbers(10)"
    },
    {
        "instruction": "Design a C++ function that takes a string as input and return if it contains any uppercase letters.",
        "input": "\"OpenAI is Great\"",
        "response": "#include <iostream>\n#include <cctype>\n#include <string>\n\nbool contains_uppercase(const std::string &input) {\n    for (char c : input) {\n        if (std::isupper(c)) {\n            return true;\n        }\n    }\n    return false;}\n\nint main() {\n    std::string input = \"OpenAI is Great\";\n    bool result = contains_uppercase(input);\n    std::cout << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cctype>\n#include <string>\n\nbool contains_uppercase(const std::string &input) {\n    for (char c : input) {\n        if (std::isupper(c)) {\n            return true;\n        }\n    }\n    return false;}\n\nint main() {\n    std::string input = \"OpenAI is Great\";\n    bool result = contains_uppercase(input);\n    std::cout << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you show me a Bash script that reads a directory path and prints the total number of files in it?",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndirectory_path=\"/path/to/directory\"\nfile_count=$(find \"$directory_path\" -type f | wc -l)\n\necho \"Total files: $file_count\"",
        "output": "#!/bin/bash\n\ndirectory_path=\"/path/to/directory\"\nfile_count=$(find \"$directory_path\" -type f | wc -l)\n\necho \"Total files: $file_count\""
    },
    {
        "instruction": "Write a Python script that calculates the factorial of a number inputted by the user using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nuser_input = int(input('Enter a number: '))\nresult = factorial(user_input)\nprint('Factorial of', user_input, 'is', result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nuser_input = int(input('Enter a number: '))\nresult = factorial(user_input)\nprint('Factorial of', user_input, 'is', result)"
    },
    {
        "instruction": "Implement a function in JavaScript that takes a string and removes any words that appear more than once.",
        "input": "\"the quick brown dog jumped over the lazy dog\"",
        "response": "function removeDuplicateWords(str) {\n    const words = str.split(' ');\n    const uniqueWords = [];\n  \n    for (const word of words) {\n        if (uniqueWords.indexOf(word) === -1) {\n            uniqueWords.push(word);\n        }\n    }\n  \n    return uniqueWords.join(' ');}\n\nconst input = \"the quick brown dog jumped over the lazy dog\";\nconst result = removeDuplicateWords(input);\nconsole.log(result);",
        "output": "function removeDuplicateWords(str) {\n    const words = str.split(' ');\n    const uniqueWords = [];\n  \n    for (const word of words) {\n        if (uniqueWords.indexOf(word) === -1) {\n            uniqueWords.push(word);\n        }\n    }\n  \n    return uniqueWords.join(' ');}\n\nconst input = \"the quick brown dog jumped over the lazy dog\";\nconst result = removeDuplicateWords(input);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program that takes a user's input for their age and calculates the number of days they have lived.",
        "input": "25",
        "response": "#include<iostream>\n\nusing namespace std;\n\nint main() {\n    int age, days;\n\n    cout << \"Enter your age: \";\n    cin >> age;\n\n    days = age * 365;\n\n    cout << \"You have lived approximately \" << days << \" days.\" << endl;\n\n    return 0;\n}",
        "output": "#include<iostream>\n\nusing namespace std;\n\nint main() {\n    int age, days;\n\n    cout << \"Enter your age: \";\n    cin >> age;\n\n    days = age * 365;\n\n    cout << \"You have lived approximately \" << days << \" days.\" << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a function in Swift that compares two strings without considering their case?",
        "input": "\"Hello\", \"hello\"",
        "response": "import Foundation\n\nfunc caseInsensitiveCompare(s1: String, s2: String) -> Bool {\n    return s1.lowercased() == s2.lowercased()\n}\n\nlet result = caseInsensitiveCompare(s1: \"Hello\", s2: \"hello\")\nprint(result)",
        "output": "import Foundation\n\nfunc caseInsensitiveCompare(s1: String, s2: String) -> Bool {\n    return s1.lowercased() == s2.lowercased()\n}\n\nlet result = caseInsensitiveCompare(s1: \"Hello\", s2: \"hello\")\nprint(result)"
    },
    {
        "instruction": "Construct a shell script that lists all files and directories of the current location along with their permission status.",
        "input": "",
        "response": "#!/bin/sh\n\nls -lah",
        "output": "#!/bin/sh\n\nls -lah"
    },
    {
        "instruction": "Can you provide an example of using Axios in a JavaScript application to fetch JSON data from a given API endpoint?",
        "input": "https://api.example.com/data",
        "response": "const axios = require('axios');\n\naxios.get('https://api.example.com/data')\n    .then((response) => {\n        console.log(response.data);\n    })\n    .catch((error) => {\n        console.error('Error fetching data:', error);\n    });",
        "output": "const axios = require('axios');\n\naxios.get('https://api.example.com/data')\n    .then((response) => {\n        console.log(response.data);\n    })\n    .catch((error) => {\n        console.error('Error fetching data:', error);\n    });"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers and reverses its elements in-place.",
        "input": "{1, 2, 3, 4, 5}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    reverseVector(numbers);\n    for (int num : numbers) {\n        std::cout << num << ' ';\n    }\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    reverseVector(numbers);\n    for (int num : numbers) {\n        std::cout << num << ' ';\n    }\n    return 0;}"
    },
    {
        "instruction": "How can I implement a URL shortening service using a Flask web application in Python?",
        "input": "",
        "response": "from flask import Flask, request, redirect, render_template, url_for\nimport string, random\n\napp = Flask(__name__)\nurl_dict = {}\n\ndef generate_short_id():\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for _ in range(6))\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        original_url = request.form['url']\n        short_id = generate_short_id()\n        url_dict[short_id] = original_url\n        short_url = request.host_url + short_id\n        return render_template('index.html', short_url=short_url)\n    return render_template('index.html')\n\n@app.route('/<short_id>')\ndef redirect_url(short_id):\n    original_url = url_dict.get(short_id)\n    if original_url:\n        return redirect(original_url)\n    return 'URL not found', 404\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, request, redirect, render_template, url_for\nimport string, random\n\napp = Flask(__name__)\nurl_dict = {}\n\ndef generate_short_id():\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for _ in range(6))\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        original_url = request.form['url']\n        short_id = generate_short_id()\n        url_dict[short_id] = original_url\n        short_url = request.host_url + short_id\n        return render_template('index.html', short_url=short_url)\n    return render_template('index.html')\n\n@app.route('/<short_id>')\ndef redirect_url(short_id):\n    original_url = url_dict.get(short_id)\n    if original_url:\n        return redirect(original_url)\n    return 'URL not found', 404\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Design a Java function that takes a string as input and counts the occurrences of each character in the input string.",
        "input": "hello",
        "response": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CharacterCounter {\n    public static Map<Character, Integer> countCharacters(String input) {\n        Map<Character, Integer> countMap = new HashMap<>();\n        for (char c : input.toCharArray()) {\n            countMap.put(c, countMap.getOrDefault(c, 0) + 1);\n        }\n        return countMap;\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello\";\n        Map<Character, Integer> counts = countCharacters(input);\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CharacterCounter {\n    public static Map<Character, Integer> countCharacters(String input) {\n        Map<Character, Integer> countMap = new HashMap<>();\n        for (char c : input.toCharArray()) {\n            countMap.put(c, countMap.getOrDefault(c, 0) + 1);\n        }\n        return countMap;\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello\";\n        Map<Character, Integer> counts = countCharacters(input);\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }}"
    },
    {
        "instruction": "Create a shell script that monitors disk usage and sends an email alert when the usage exceeds a specified threshold.",
        "input": "Email: user@example.com, Threshold: 90%",
        "response": "#!/bin/bash\nEMAIL='user@example.com'\nTHRESHOLD=90\n\ncheck_disk_usage() {\n    for filesystem in $(df -P | awk '{print $1}' | grep -v 'Filesystem');\n    do\n        usage=$(df -P | awk -v fs=\"$filesystem\" '$1 == fs {print $5}' | sed 's/%//')\n        if [ $usage -gt $THRESHOLD ]; then\n            printf \"Warning: %s: %s%% full\\n\" $filesystem $usage | mail -s '[ALERT] Disk Usage Warning' $EMAIL &\n        fi\n    done}\n\ncheck_disk_usage",
        "output": "#!/bin/bash\nEMAIL='user@example.com'\nTHRESHOLD=90\n\ncheck_disk_usage() {\n    for filesystem in $(df -P | awk '{print $1}' | grep -v 'Filesystem');\n    do\n        usage=$(df -P | awk -v fs=\"$filesystem\" '$1 == fs {print $5}' | sed 's/%//')\n        if [ $usage -gt $THRESHOLD ]; then\n            printf \"Warning: %s: %s%% full\\n\" $filesystem $usage | mail -s '[ALERT] Disk Usage Warning' $EMAIL &\n        fi\n    done}\n\ncheck_disk_usage"
    },
    {
        "instruction": "Write a Python function that merges two dictionaries and returns the merged result.",
        "input": "{1: 'a', 2: 'b'}, {3: 'c', 4: 'd'}",
        "response": "def merge_dicts(dict1, dict2):\n    merged = {**dict1, **dict2}\n    return merged\n\nresult = merge_dicts({1: 'a', 2: 'b'}, {3: 'c', 4: 'd'})\nprint(result)",
        "output": "def merge_dicts(dict1, dict2):\n    merged = {**dict1, **dict2}\n    return merged\n\nresult = merge_dicts({1: 'a', 2: 'b'}, {3: 'c', 4: 'd'})\nprint(result)"
    },
    {
        "instruction": "How would you fix a JavaScript bug that causes an error due to an undefined variable?",
        "input": "let result;\n\nfunction calculate() {\n  let a = 5;\n  let b = 10;\n  result = a * b;\n}\n\ncalculate();\nconsole.log(res);",
        "response": "let result;\n\nfunction calculate() {\n  let a = 5;\n  let b = 10;\n  result = a * b;\n}\n\ncalculate();\nconsole.log(result); // Fix: Change 'res' to 'result'",
        "output": "let result;\n\nfunction calculate() {\n  let a = 5;\n  let b = 10;\n  result = a * b;\n}\n\ncalculate();\nconsole.log(result); // Fix: Change 'res' to 'result'"
    },
    {
        "instruction": "Write a C program that takes user input for three integers, and then calculates and displays their average.",
        "input": "",
        "response": "#include <stdio.h>\n\nint main() {\n    int a, b, c;\n    double average;\n\n    printf(\"Enter three integers: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n\n    average = (a + b + c) / 3.0;\n    printf(\"Average: %.2lf\", average);\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    int a, b, c;\n    double average;\n\n    printf(\"Enter three integers: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n\n    average = (a + b + c) / 3.0;\n    printf(\"Average: %.2lf\", average);\n\n    return 0;\n}"
    },
    {
        "instruction": "Construct a Shell script that checks if a file exists in the current directory, and if not, creates it.",
        "input": "testfile.txt",
        "response": "#!/bin/bash\n\nFILE=\"testfile.txt\"\n\nif [ ! -e \"$FILE\" ]; then\n    touch \"$FILE\"\n    echo \"$FILE created.\"\nelse\n    echo \"$FILE already exists.\"\nfi",
        "output": "#!/bin/bash\n\nFILE=\"testfile.txt\"\n\nif [ ! -e \"$FILE\" ]; then\n    touch \"$FILE\"\n    echo \"$FILE created.\"\nelse\n    echo \"$FILE already exists.\"\nfi"
    },
    {
        "instruction": "Write a Python function to calculate the factorial of a non-negative integer using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Implement a JavaScript function that reverses a string without using any built-in functions or methods.",
        "input": "\"OpenAI\"",
        "response": "function reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;}\n\nconst input = 'OpenAI';\nconst result = reverseString(input);\nconsole.log(result);",
        "output": "function reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;}\n\nconst input = 'OpenAI';\nconst result = reverseString(input);\nconsole.log(result);"
    },
    {
        "instruction": "Develop a Java program that accepts a String input and converts all lower-case characters to upper-case and vice-versa.",
        "input": "\"GPT-3 Language Model\"",
        "response": "public class SwapCase {\n    public static void main(String[] args) {\n        String input = \"GPT-3 Language Model\";\n        System.out.println(swapCase(input));\n    }\n\n    public static String swapCase(String str) {\n        StringBuilder swappedCase = new StringBuilder();\n        for (char c : str.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                swappedCase.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                swappedCase.append(Character.toUpperCase(c));\n            } else {\n                swappedCase.append(c);\n            }\n        }\n        return swappedCase.toString();\n    }}",
        "output": "public class SwapCase {\n    public static void main(String[] args) {\n        String input = \"GPT-3 Language Model\";\n        System.out.println(swapCase(input));\n    }\n\n    public static String swapCase(String str) {\n        StringBuilder swappedCase = new StringBuilder();\n        for (char c : str.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                swappedCase.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                swappedCase.append(Character.toUpperCase(c));\n            } else {\n                swappedCase.append(c);\n            }\n        }\n        return swappedCase.toString();\n    }}"
    },
    {
        "instruction": "Write a Ruby method that receives a hash and returns the key-value pairs whose value is the maximum value in the hash.",
        "input": "{\"ruby\": 4, \"python\": 5, \"javascript\": 3}",
        "response": "def max_key_value_pairs(hash)\n    max_value = hash.max_by { |key, value| value }[1]\n    hash.select { |key, value| value == max_value }\nend\n\ninput = {\"ruby\" => 4, \"python\" => 5, \"javascript\" => 3}\nresult = max_key_value_pairs(input)\nputs result",
        "output": "def max_key_value_pairs(hash)\n    max_value = hash.max_by { |key, value| value }[1]\n    hash.select { |key, value| value == max_value }\nend\n\ninput = {\"ruby\" => 4, \"python\" => 5, \"javascript\" => 3}\nresult = max_key_value_pairs(input)\nputs result"
    },
    {
        "instruction": "Write a Python function that calculates the area of a circle, given its radius.",
        "input": "5",
        "response": "import math\n\ndef circle_area(radius):\n    return math.pi * (radius ** 2)\n\nresult = circle_area(5)\nprint(result)",
        "output": "import math\n\ndef circle_area(radius):\n    return math.pi * (radius ** 2)\n\nresult = circle_area(5)\nprint(result)"
    },
    {
        "instruction": "How can you find the first non-repeated character in a string using JavaScript?",
        "input": "\"helloh\"",
        "response": "function firstUniqueChar(str) {\n    const charCount = {};\n\n    for (const char of str) {\n        charCount[char] = (charCount[char] || 0) + 1;\n    }\n\n    for (const char of str) {\n        if (charCount[char] === 1) {\n            return char;\n        }\n    }\n    \n    return null;}\n\nconst result = firstUniqueChar('helloh');\nconsole.log(result);",
        "output": "function firstUniqueChar(str) {\n    const charCount = {};\n\n    for (const char of str) {\n        charCount[char] = (charCount[char] || 0) + 1;\n    }\n\n    for (const char of str) {\n        if (charCount[char] === 1) {\n            return char;\n        }\n    }\n    \n    return null;}\n\nconst result = firstUniqueChar('helloh');\nconsole.log(result);"
    },
    {
        "instruction": "Write a Java program that reads a file named 'input.txt' and prints the number of lines it contains.",
        "input": "",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class LineCounter {\n    public static void main(String[] args) {\n        try (BufferedReader reader = new BufferedReader(new FileReader('input.txt'))) {\n            int lineCount = 0;\n            while (reader.readLine() != null) {\n                lineCount++;\n            }\n            System.out.println('Number of lines: ' + lineCount);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class LineCounter {\n    public static void main(String[] args) {\n        try (BufferedReader reader = new BufferedReader(new FileReader('input.txt'))) {\n            int lineCount = 0;\n            while (reader.readLine() != null) {\n                lineCount++;\n            }\n            System.out.println('Number of lines: ' + lineCount);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}"
    },
    {
        "instruction": "Write a Bash script that prints the sizes of all files in the current directory.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *; do\n    if [ -f \"${file}\" ]; then\n        size=$(stat -c \"%s\" \"${file}\")\n        echo \"${file}: ${size} bytes\"\n    fi\ndone",
        "output": "#!/bin/bash\n\nfor file in *; do\n    if [ -f \"${file}\" ]; then\n        size=$(stat -c \"%s\" \"${file}\")\n        echo \"${file}: ${size} bytes\"\n    fi\ndone"
    },
    {
        "instruction": "Implement a C++ function that takes a vector of integers and reverses its order.",
        "input": "{5, 10, 15, 20}",
        "response": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nvoid reverse_vector(std::vector<int>& nums) {\n    std::reverse(nums.begin(), nums.end());}\n\nint main() {\n    std::vector<int> numbers = {5, 10, 15, 20};\n    reverse_vector(numbers);\n    for (int num : numbers) {\n        std::cout << num << ' ';\n    }\n    return 0;}",
        "output": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nvoid reverse_vector(std::vector<int>& nums) {\n    std::reverse(nums.begin(), nums.end());}\n\nint main() {\n    std::vector<int> numbers = {5, 10, 15, 20};\n    reverse_vector(numbers);\n    for (int num : numbers) {\n        std::cout << num << ' ';\n    }\n    return 0;}"
    },
    {
        "instruction": "What would be the Shell script to count the number of lines in a given text file?",
        "input": "file.txt (with content: \"Line 1\\nLine 2\\nLine 3\")",
        "response": "lines = $(wc -l < file.txt)\necho $lines",
        "output": "lines = $(wc -l < file.txt)\necho $lines"
    },
    {
        "instruction": "Can you demonstrate how to define a C# method that calculates the factorial of a non-negative integer n?",
        "input": "5",
        "response": "using System;\n\nclass Factorial {\n    public static int CalcFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * CalcFactorial(n - 1);\n    }\n\n    static void Main() {\n        int result = CalcFactorial(5);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\n\nclass Factorial {\n    public static int CalcFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * CalcFactorial(n - 1);\n    }\n\n    static void Main() {\n        int result = CalcFactorial(5);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "Develop a Python script that reads a text file and prints its content line by line but in reverse order.",
        "input": "file.txt (with content: \"Line 1\\nLine 2\\nLine 3\")",
        "response": "with open('file.txt', 'r') as file:\n    lines = file.readlines()\n    for line in reversed(lines):\n        print(line.strip())",
        "output": "with open('file.txt', 'r') as file:\n    lines = file.readlines()\n    for line in reversed(lines):\n        print(line.strip())"
    },
    {
        "instruction": "Write a Python function that takes a list of numbers and returns the count of even numbers in the list.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "def count_even_numbers(numbers):\n    count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            count += 1\n    return count\n\nresult = count_even_numbers([1, 2, 3, 4, 5, 6])\nprint(result)",
        "output": "def count_even_numbers(numbers):\n    count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            count += 1\n    return count\n\nresult = count_even_numbers([1, 2, 3, 4, 5, 6])\nprint(result)"
    },
    {
        "instruction": "Implement a JavaScript function that reverses a string.",
        "input": "hello",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst reversed = reverseString('hello');\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst reversed = reverseString('hello');\nconsole.log(reversed);"
    },
    {
        "instruction": "Write a C++ program that reads a number from the user and computes the factorial of that number.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, factorial = 1;\n\n    cout << \"Enter a positive integer: \";\n    cin >> n;\n\n    for(int i = 1; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    cout << \"Factorial of \" << n << \" = \" << factorial;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, factorial = 1;\n\n    cout << \"Enter a positive integer: \";\n    cin >> n;\n\n    for(int i = 1; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    cout << \"Factorial of \" << n << \" = \" << factorial;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a shell script that outputs the size of a specific directory?",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nDIRECTORY='/path/to/directory'\nSIZE=$(du -sh \"$DIRECTORY\" | cut -f1)\n\necho \"Size of $DIRECTORY: $SIZE\"",
        "output": "#!/bin/bash\n\nDIRECTORY='/path/to/directory'\nSIZE=$(du -sh \"$DIRECTORY\" | cut -f1)\n\necho \"Size of $DIRECTORY: $SIZE\""
    },
    {
        "instruction": "Implement a C++ class representing a bank account, including methods to deposit, withdraw and display the account balance.",
        "input": "BankAccount account; account.deposit(100); account.withdraw(50);",
        "response": "#include <iostream>\n\nclass BankAccount {\npublic:\n    void deposit(double amount) {\n        balance += amount;\n    }\n\n    void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            std::cout << \"Insufficient balance!\" << std::endl;\n        }\n    }\n\n    void display() const {\n        std::cout << \"Balance: \" << balance << std::endl;\n    }\n\nprivate:\n    double balance = 0;};\n\nint main() {\n    BankAccount account;\n    account.deposit(100);\n    account.withdraw(50);\n    account.display();}",
        "output": "#include <iostream>\n\nclass BankAccount {\npublic:\n    void deposit(double amount) {\n        balance += amount;\n    }\n\n    void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            std::cout << \"Insufficient balance!\" << std::endl;\n        }\n    }\n\n    void display() const {\n        std::cout << \"Balance: \" << balance << std::endl;\n    }\n\nprivate:\n    double balance = 0;};\n\nint main() {\n    BankAccount account;\n    account.deposit(100);\n    account.withdraw(50);\n    account.display();}"
    },
    {
        "instruction": "In Python, how would you generate a list of the first 10 even numbers?",
        "input": "",
        "response": "even_numbers = [num * 2 for num in range(1, 11)]\nprint(even_numbers)",
        "output": "even_numbers = [num * 2 for num in range(1, 11)]\nprint(even_numbers)"
    },
    {
        "instruction": "Write a shell script that takes a directory path as an argument and outputs the number of files in that directory.",
        "input": "~/Documents",
        "response": "#!/bin/bash\n\ndir_path=$1\nnum_files=$(find \"$dir_path\" -type f | wc -l)\n\necho \"Number of files in $dir_path: $num_files\"",
        "output": "#!/bin/bash\n\ndir_path=$1\nnum_files=$(find \"$dir_path\" -type f | wc -l)\n\necho \"Number of files in $dir_path: $num_files\""
    },
    {
        "instruction": "Create an algorithm in JavaScript to reverse a given integer without converting the integer to a string.",
        "input": "12345",
        "response": "function reverseInteger(num) {\n    let reversed = 0;\n    while (num > 0) {\n        reversed = (reversed * 10) + (num % 10);\n        num = Math.floor(num / 10);\n    }\n    return reversed;}\n\nconst result = reverseInteger(12345);\nconsole.log(result);",
        "output": "function reverseInteger(num) {\n    let reversed = 0;\n    while (num > 0) {\n        reversed = (reversed * 10) + (num % 10);\n        num = Math.floor(num / 10);\n    }\n    return reversed;}\n\nconst result = reverseInteger(12345);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program that reads a file called 'input.txt' and counts the number of lines in it.",
        "input": "input.txt content:\nHello, world!\nThis is a test.\nThird line.",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inFile(\"input.txt\");\n    std::string line;\n    int lineCount = 0;\n\n    while (std::getline(inFile, line)) {\n        lineCount++;\n    }\n\n    std::cout << \"Number of lines: \" << lineCount << std::endl;\n    inFile.close();\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inFile(\"input.txt\");\n    std::string line;\n    int lineCount = 0;\n\n    while (std::getline(inFile, line)) {\n        lineCount++;\n    }\n\n    std::cout << \"Number of lines: \" << lineCount << std::endl;\n    inFile.close();\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you create a Python script that replaces all occurrences of a given word in a text file with another word?",
        "input": "Old word: Language\nNew word: Skills\nText file content: I like learning programming Language.",
        "response": "def replace_word(file_path, old_word, new_word):\n    with open(file_path, 'r') as file:\n        content = file.read()\n    content = content.replace(old_word, new_word)\n    with open(file_path, 'w') as file:\n        file.write(content)\n\nreplace_word('example.txt', 'Language', 'Skills')",
        "output": "def replace_word(file_path, old_word, new_word):\n    with open(file_path, 'r') as file:\n        content = file.read()\n    content = content.replace(old_word, new_word)\n    with open(file_path, 'w') as file:\n        file.write(content)\n\nreplace_word('example.txt', 'Language', 'Skills')"
    },
    {
        "instruction": "Build a Java method that takes an input string and reverses its characters without using any built-in reverse() functions.",
        "input": "example: The quick brown fox",
        "response": "public static String reverseString(String input) {\n    char[] inputChars = input.toCharArray();\n    int left = 0;\n    int right = inputChars.length - 1;\n    while (left < right) {\n        char temp = inputChars[left];\n        inputChars[left] = inputChars[right];\n        inputChars[right] = temp;\n        left++;\n        right--;\n    }\n    return new String(inputChars);\n}\n\nSystem.out.println(reverseString(\"The quick brown fox\"));",
        "output": "public static String reverseString(String input) {\n    char[] inputChars = input.toCharArray();\n    int left = 0;\n    int right = inputChars.length - 1;\n    while (left < right) {\n        char temp = inputChars[left];\n        inputChars[left] = inputChars[right];\n        inputChars[right] = temp;\n        left++;\n        right--;\n    }\n    return new String(inputChars);\n}\n\nSystem.out.println(reverseString(\"The quick brown fox\"));"
    },
    {
        "instruction": "Develop a shell script to show disk usage percentage for each partition.",
        "input": "",
        "response": "#!/bin/bash\n\ndf -h | awk '{if (NR > 1) {print $1, $5}}'",
        "output": "#!/bin/bash\n\ndf -h | awk '{if (NR > 1) {print $1, $5}}'"
    },
    {
        "instruction": "Write a C++ function that takes a user inputted integer and returns its factorial.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int input;\n    cout << \"Enter an integer: \";\n    cin >> input;\n    cout << \"Factorial: \" << factorial(input) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int input;\n    cout << \"Enter an integer: \";\n    cin >> input;\n    cout << \"Factorial: \" << factorial(input) << endl;\n    return 0;}"
    },
    {
        "instruction": "In Python, write a recursive function to calculate the nth Fibonacci number.",
        "input": "10",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 10\nprint(f\"The {n}th Fibonacci number: {fibonacci(n)}\")",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 10\nprint(f\"The {n}th Fibonacci number: {fibonacci(n)}\")"
    },
    {
        "instruction": "How can I create a bash script that checks if a file exists and prints a message accordingly?",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfilename=\"example.txt\"\n\nif [ -e \"$filename\" ]\nthen\n    echo \"File $filename exists.\"\nelse\n    echo \"File $filename does not exist.\"\nfi",
        "output": "#!/bin/bash\n\nfilename=\"example.txt\"\n\nif [ -e \"$filename\" ]\nthen\n    echo \"File $filename exists.\"\nelse\n    echo \"File $filename does not exist.\"\nfi"
    },
    {
        "instruction": "Implement a JavaScript function that receives an object and calculates the total value of its properties that are numerical.",
        "input": "{\"a\": 5, \"b\": \"text\", \"c\": 7}",
        "response": "function sumNumericalProperties(obj) {\n    let total = 0;\n    for (const key in obj) {\n        if (typeof obj[key] === 'number') {\n            total += obj[key];\n        }\n    }\n    return total;}\n\nconst exampleObject = { a: 5, b: \"text\", c: 7 };\nconsole.log('Total of numerical properties:', sumNumericalProperties(exampleObject));",
        "output": "function sumNumericalProperties(obj) {\n    let total = 0;\n    for (const key in obj) {\n        if (typeof obj[key] === 'number') {\n            total += obj[key];\n        }\n    }\n    return total;}\n\nconst exampleObject = { a: 5, b: \"text\", c: 7 };\nconsole.log('Total of numerical properties:', sumNumericalProperties(exampleObject));"
    },
    {
        "instruction": "Write a Python function that takes a list of strings as input and returns a dictionary mapping each string to its length.",
        "input": "['apple', 'banana', 'cherry']",
        "response": "def string_length_mapping(strings):\n    return {string: len(string) for string in strings}\n\ninput_list = ['apple', 'banana', 'cherry']\nresult = string_length_mapping(input_list)\nprint(result)",
        "output": "def string_length_mapping(strings):\n    return {string: len(string) for string in strings}\n\ninput_list = ['apple', 'banana', 'cherry']\nresult = string_length_mapping(input_list)\nprint(result)"
    },
    {
        "instruction": "Create a C++ program that finds the factorial of an integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int input_number = 5;\n    cout << \"Factorial: \" << factorial(input_number) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int input_number = 5;\n    cout << \"Factorial: \" << factorial(input_number) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}"
    },
    {
        "instruction": "In JavaScript, implement a debounce function that produces a new function that, when called repeatedly, will execute the original function after a delay.",
        "input": "function hello() {console.log('Hello, world!')} debounce(hello, 1000)",
        "response": "function debounce(fn, delay) {\n    let debounceTimeout;\n    return function() {\n        const context = this;\n        const args = arguments;\n        clearTimeout(debounceTimeout);\n        debounceTimeout = setTimeout(function() {\n            fn.apply(context, args);\n        }, delay);\n    };}\n\nfunction hello() {\n    console.log('Hello, world!');}\n\nconst debouncedHello = debounce(hello, 1000);\ndebouncedHello();",
        "output": "function debounce(fn, delay) {\n    let debounceTimeout;\n    return function() {\n        const context = this;\n        const args = arguments;\n        clearTimeout(debounceTimeout);\n        debounceTimeout = setTimeout(function() {\n            fn.apply(context, args);\n        }, delay);\n    };}\n\nfunction hello() {\n    console.log('Hello, world!');}\n\nconst debouncedHello = debounce(hello, 1000);\ndebouncedHello();"
    },
    {
        "instruction": "How would you write an SQL query to retrieve all records from a table named 'customers' where the 'city' is 'New York'?",
        "input": "Table: customers, Column: city, Value: 'New York'",
        "response": "SELECT * FROM customers WHERE city = 'New York';",
        "output": "SELECT * FROM customers WHERE city = 'New York';"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers and returns the average value.",
        "input": "{5, 7, 13, 20}",
        "response": "#include <iostream>\n#include <vector>\n\ndouble compute_average(const std::vector<int>& numbers) {\n    double sum = 0;\n    for (const int& num : numbers) {\n        sum += num;\n    }\n    return sum / numbers.size();}\n\nint main() {\n    std::vector<int> input_numbers = {5, 7, 13, 20};\n    double average = compute_average(input_numbers);\n    std::cout << \"Average: \" << average << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\ndouble compute_average(const std::vector<int>& numbers) {\n    double sum = 0;\n    for (const int& num : numbers) {\n        sum += num;\n    }\n    return sum / numbers.size();}\n\nint main() {\n    std::vector<int> input_numbers = {5, 7, 13, 20};\n    double average = compute_average(input_numbers);\n    std::cout << \"Average: \" << average << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you correct this Python code snippet that should implement a simple cash register?",
        "input": "items_price = {'apple': 100, 'orange': 80}\n\ndef add_items(cart, item, quantity):\n    cart[item] += quantity\n\ncart = {}\n\nadd_items(cart, 'apple', 2)\nadd_items(cart, 'orange', 3)\n\nprint(cart)\n\nprice = sum([items_price[item] * quantity for item, quantity in cart])\n\nprint(price)",
        "response": "items_price = {'apple': 100, 'orange': 80}\n\ndef add_items(cart, item, quantity):\n    if item in cart:\n        cart[item] += quantity\n    else:\n        cart[item] = quantity\n\ncart = {}\n\nadd_items(cart, 'apple', 2)\nadd_items(cart, 'orange', 3)\n\nprint(cart)\n\nprice = sum([items_price[item] * quantity for item, quantity in cart.items()])\n\nprint(price)",
        "output": "items_price = {'apple': 100, 'orange': 80}\n\ndef add_items(cart, item, quantity):\n    if item in cart:\n        cart[item] += quantity\n    else:\n        cart[item] = quantity\n\ncart = {}\n\nadd_items(cart, 'apple', 2)\nadd_items(cart, 'orange', 3)\n\nprint(cart)\n\nprice = sum([items_price[item] * quantity for item, quantity in cart.items()])\n\nprint(price)"
    },
    {
        "instruction": "Design a simple REST API endpoint in JavaScript using the Express library that saves a user's email address.",
        "input": "POST /api/save-email\n\n{\n  \"email\": \"example@example.com\"\n}",
        "response": "const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst port = 3000;\n\napp.use(bodyParser.json());\n\napp.post('/api/save-email', (req, res) => {\n    const email = req.body.email;\n    \n    // Save the email address to your preferred storage solution here.\n\n    res.status(200).send({message: 'Email saved successfully.'});});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst port = 3000;\n\napp.use(bodyParser.json());\n\napp.post('/api/save-email', (req, res) => {\n    const email = req.body.email;\n    \n    // Save the email address to your preferred storage solution here.\n\n    res.status(200).send({message: 'Email saved successfully.'});});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});"
    },
    {
        "instruction": "Write a shell script to list all files in a directory containing the given string.",
        "input": "Directory: /path/to/directory\nString: \"example\"",
        "response": "#!/bin/sh\n\ndirectory=\"/path/to/directory\"\nsearch_string=\"example\"\n\nfind \"$directory\" -type f -exec grep -l \"$search_string\" {} \\;",
        "output": "#!/bin/sh\n\ndirectory=\"/path/to/directory\"\nsearch_string=\"example\"\n\nfind \"$directory\" -type f -exec grep -l \"$search_string\" {} \\;"
    },
    {
        "instruction": "How can I implement a C# method that calculates the Fibonacci sequence up to the nth term?",
        "input": "10",
        "response": "using System;\n\nclass Fibonacci {\n    public static int CalculateFibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return CalculateFibonacci(n - 1) + CalculateFibonacci(n - 2);\n    }\n\n    public static void Main(string[] args) {\n        int term = 10;\n        for (int i = 0; i <= term; i++) {\n            Console.Write(CalculateFibonacci(i) + \" \");\n        }\n    }}",
        "output": "using System;\n\nclass Fibonacci {\n    public static int CalculateFibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return CalculateFibonacci(n - 1) + CalculateFibonacci(n - 2);\n    }\n\n    public static void Main(string[] args) {\n        int term = 10;\n        for (int i = 0; i <= term; i++) {\n            Console.Write(CalculateFibonacci(i) + \" \");\n        }\n    }}"
    },
    {
        "instruction": "Write a Python script that checks if a given number is prime.",
        "input": "23",
        "response": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\nnum = 23\nif is_prime(num):\n    print(f'{num} is a prime number')\nelse:\n    print(f'{num} is not a prime number')",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\nnum = 23\nif is_prime(num):\n    print(f'{num} is a prime number')\nelse:\n    print(f'{num} is not a prime number')"
    },
    {
        "instruction": "Design a Bash script that prints the numbers from 1 to N, with N being an argument provided.",
        "input": "7",
        "response": "#!/bin/bash\n\nN=$1\n\nfor (( i=1; i<=N; i++ ))\ndo\n  echo $i\ndone\n\n# To run the script, save it as 'sequence.sh', make it executable, and run it with `./sequence.sh 7`",
        "output": "#!/bin/bash\n\nN=$1\n\nfor (( i=1; i<=N; i++ ))\ndo\n  echo $i\ndone\n\n# To run the script, save it as 'sequence.sh', make it executable, and run it with `./sequence.sh 7`"
    },
    {
        "instruction": "Design a C++ program that reads user input, and then reverses and prints the input string.",
        "input": "OpenAI",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    std::reverse(input.begin(), input.end());\n    std::cout << \"Reversed string: \" << input << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::cin >> input;\n    std::reverse(input.begin(), input.end());\n    std::cout << \"Reversed string: \" << input << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Create a Python function that extracts all the unique elements from a list and orders them in descending order.",
        "input": "[9, 2, 10, 1, 5, 2, 5, 7]",
        "response": "def unique_elements_descending(input_list):\n    unique_list = list(set(input_list))\n    unique_list.sort(reverse=True)\n    return unique_list\n\nresult = unique_elements_descending([9, 2, 10, 1, 5, 2, 5, 7])\nprint(result)",
        "output": "def unique_elements_descending(input_list):\n    unique_list = list(set(input_list))\n    unique_list.sort(reverse=True)\n    return unique_list\n\nresult = unique_elements_descending([9, 2, 10, 1, 5, 2, 5, 7])\nprint(result)"
    },
    {
        "instruction": "How can you write a JavaScript function that takes an input string and replaces all occurrences of a specified character with another character?",
        "input": "The quick brown fox jumps over the lazy dog, e, *",
        "response": "function replaceCharacter(inputString, targetChar, replacementChar) {\n    return inputString.split(targetChar).join(replacementChar);}\n\nconst result = replaceCharacter('The quick brown fox jumps over the lazy dog', 'e', '*');\nconsole.log(result);",
        "output": "function replaceCharacter(inputString, targetChar, replacementChar) {\n    return inputString.split(targetChar).join(replacementChar);}\n\nconst result = replaceCharacter('The quick brown fox jumps over the lazy dog', 'e', '*');\nconsole.log(result);"
    },
    {
        "instruction": "Implement a method in Java that will change every odd-indexed element in an array of integers to the next even number.",
        "input": "[3, 8, 15, 4, 7, 12]",
        "response": "public static int[] evenizeOddIndexedElements(int[] arr) {\n    for (int i = 1; i < arr.length; i += 2) {\n        arr[i] = (arr[i] % 2 == 0) ? arr[i] : arr[i] + 1;\n    }\n    return arr;}\n\npublic static void main(String[] args) {\n    int[] inputArray = {3, 8, 15, 4, 7, 12};\n    int[] result = evenizeOddIndexedElements(inputArray);\n\n    for (int num : result) {\n        System.out.print(num + \" \");\n    }}",
        "output": "public static int[] evenizeOddIndexedElements(int[] arr) {\n    for (int i = 1; i < arr.length; i += 2) {\n        arr[i] = (arr[i] % 2 == 0) ? arr[i] : arr[i] + 1;\n    }\n    return arr;}\n\npublic static void main(String[] args) {\n    int[] inputArray = {3, 8, 15, 4, 7, 12};\n    int[] result = evenizeOddIndexedElements(inputArray);\n\n    for (int num : result) {\n        System.out.print(num + \" \");\n    }}"
    },
    {
        "instruction": "Write a Python function that takes a list of strings and returns the longest string in the list.",
        "input": "[\"apple\", \"banana\", \"strawberry\", \"blueberry\"]",
        "response": "def find_longest_string(strings):\n    return max(strings, key=len)\n\nwords = [\"apple\", \"banana\", \"strawberry\", \"blueberry\"]\nlongest_string = find_longest_string(words)\nprint(longest_string)",
        "output": "def find_longest_string(strings):\n    return max(strings, key=len)\n\nwords = [\"apple\", \"banana\", \"strawberry\", \"blueberry\"]\nlongest_string = find_longest_string(words)\nprint(longest_string)"
    },
    {
        "instruction": "Implement a Java method that takes two integers and calculates their least common multiple (LCM).",
        "input": "6, 8",
        "response": "public class LCM {\n    static int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    static int lcm(int a, int b) {\n        return (a * b) / gcd(a, b);\n    }\n\n    public static void main(String[] args) {\n        int result = lcm(6, 8);\n        System.out.println(result);\n    }}",
        "output": "public class LCM {\n    static int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    static int lcm(int a, int b) {\n        return (a * b) / gcd(a, b);\n    }\n\n    public static void main(String[] args) {\n        int result = lcm(6, 8);\n        System.out.println(result);\n    }}"
    },
    {
        "instruction": "Create a JavaScript function that takes an object containing the dimensions of a rectangle and calculates its area.",
        "input": "{\"width\": 5, \"height\": 10 }",
        "response": "function calculateArea(rectangle) {\n    return rectangle.width * rectangle.height;}\n\nconst dimensions = { \"width\": 5, \"height\": 10 };\nconst area = calculateArea(dimensions);\nconsole.log(area);",
        "output": "function calculateArea(rectangle) {\n    return rectangle.width * rectangle.height;}\n\nconst dimensions = { \"width\": 5, \"height\": 10 };\nconst area = calculateArea(dimensions);\nconsole.log(area);"
    },
    {
        "instruction": "Write a Shell script that lists all the files in the current directory sorted by size in descending order.",
        "input": "",
        "response": "#!/bin/sh\n\nls -lS",
        "output": "#!/bin/sh\n\nls -lS"
    },
    {
        "instruction": "Design a Python class representing a geometric triangle and implement a method to calculate its area based on its base and height.",
        "input": "base=10, height=5",
        "response": "class Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def area(self):\n        return 0.5 * self.base * self.height\n\ntriangle = Triangle(10, 5)\nprint(triangle.area())",
        "output": "class Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def area(self):\n        return 0.5 * self.base * self.height\n\ntriangle = Triangle(10, 5)\nprint(triangle.area())"
    },
    {
        "instruction": "How would you implement a JavaScript function to reverse an inputted string without using the reverse() method?",
        "input": "\"hello world\"",
        "response": "function reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;}\n\nconst result = reverseString('hello world');\nconsole.log(result);",
        "output": "function reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;}\n\nconst result = reverseString('hello world');\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program that takes a user inputted integer and outputs the factorial of that number.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int number;\n    cout << \"Enter a positive integer: \";\n    cin >> number;\n    cout << \"Factorial of \" << number << \" = \" << factorial(number);\n    return 0;}\n\nint factorial(int n) {\n    if(n > 1)\n        return n * factorial(n - 1);\n    else\n        return 1;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int number;\n    cout << \"Enter a positive integer: \";\n    cin >> number;\n    cout << \"Factorial of \" << number << \" = \" << factorial(number);\n    return 0;}\n\nint factorial(int n) {\n    if(n > 1)\n        return n * factorial(n - 1);\n    else\n        return 1;}"
    },
    {
        "instruction": "Develop a Java method to determine if an inputted number is a prime or not and then call this method on an example integer.",
        "input": "37",
        "response": "public class PrimeChecker {\n    public static void main(String[] args) {\n        int number = 37;\n        System.out.println(isPrime(number) ? \"Prime\" : \"Not prime\");\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }}",
        "output": "public class PrimeChecker {\n    public static void main(String[] args) {\n        int number = 37;\n        System.out.println(isPrime(number) ? \"Prime\" : \"Not prime\");\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }}"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of an integer.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a Python script to read the content of a CSV file?",
        "input": "example.csv (contains: id,name,age\n1,Alice,30\n2,Bob,25\n3,Carol,28)",
        "response": "import csv\n\nfilename = 'example.csv'\n\nwith open(filename, mode='r') as file:\n    csv_reader = csv.DictReader(file)\n    for row in csv_reader:\n        print(row)",
        "output": "import csv\n\nfilename = 'example.csv'\n\nwith open(filename, mode='r') as file:\n    csv_reader = csv.DictReader(file)\n    for row in csv_reader:\n        print(row)"
    },
    {
        "instruction": "In C#, write a method that takes a list of integers and returns the squared values of those integers.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    public static List<int> SquareList(List<int> list) {\n        List<int> squaredList = new List<int>();\n        foreach (int num in list) {\n            squaredList.Add(num * num);\n        }\n        return squaredList;\n    }\n\n    public static void Main() {\n        List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\n        List<int> squaredNumbers = SquareList(numbers);\n        Console.WriteLine(string.Join(\", \", squaredNumbers));\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    public static List<int> SquareList(List<int> list) {\n        List<int> squaredList = new List<int>();\n        foreach (int num in list) {\n            squaredList.Add(num * num);\n        }\n        return squaredList;\n    }\n\n    public static void Main() {\n        List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\n        List<int> squaredNumbers = SquareList(numbers);\n        Console.WriteLine(string.Join(\", \", squaredNumbers));\n    }}"
    },
    {
        "instruction": "Write a Bash script that counts the occurrences of a word in a text file.",
        "input": "word: 'apple', file.txt (contains: An apple a day keeps the doctor away. I love apples.)",
        "response": "#!/bin/bash\n\nword='apple'\nfile='file.txt'\n\ngrep -o \"\\b$word\\b\" \"$file\" | wc -l",
        "output": "#!/bin/bash\n\nword='apple'\nfile='file.txt'\n\ngrep -o \"\\b$word\\b\" \"$file\" | wc -l"
    },
    {
        "instruction": "Design a C++ program that sorts an array of integers in ascending order.",
        "input": "int arr[] = {7, 2, 4, 1};",
        "response": "#include <iostream>\n#include <algorithm>\n\nint main() {\n    int arr[] = {7, 2, 4, 1};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    std::sort(arr, arr + n);\n    \n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n\nint main() {\n    int arr[] = {7, 2, 4, 1};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    std::sort(arr, arr + n);\n    \n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "How would you write a Bash script that reads the contents of a file and counts the number of lines?",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfilename='file.txt'\nlinecount=0\n\nwhile read -r line\ndo\n    linecount=$((linecount + 1))\ndone < \"$filename\"\n\necho \"Number of lines: $linecount\"",
        "output": "#!/bin/bash\n\nfilename='file.txt'\nlinecount=0\n\nwhile read -r line\ndo\n    linecount=$((linecount + 1))\ndone < \"$filename\"\n\necho \"Number of lines: $linecount\""
    },
    {
        "instruction": "Construct a PHP function that retrieves the user's IP address.",
        "input": "",
        "response": "<?php\n\nfunction getUserIP() {\n    $ip = '';\n    \n    if (isset($_SERVER['HTTP_CLIENT_IP'])) {\n        $ip = $_SERVER['HTTP_CLIENT_IP'];\n    } elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];\n    } else {\n        $ip = $_SERVER['REMOTE_ADDR'];\n    }\n\n    return $ip;}\n\n$user_ip = getUserIP();\necho 'User IP address: ' . $user_ip;\n\n?>",
        "output": "<?php\n\nfunction getUserIP() {\n    $ip = '';\n    \n    if (isset($_SERVER['HTTP_CLIENT_IP'])) {\n        $ip = $_SERVER['HTTP_CLIENT_IP'];\n    } elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];\n    } else {\n        $ip = $_SERVER['REMOTE_ADDR'];\n    }\n\n    return $ip;}\n\n$user_ip = getUserIP();\necho 'User IP address: ' . $user_ip;\n\n?>"
    },
    {
        "instruction": "Implement a JavaScript function that calculates the factorial of a given number.",
        "input": "5",
        "response": "function factorial(num) {\n    if (num === 0 || num === 1)\n        return 1;\n    else\n        return num * factorial(num - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(num) {\n    if (num === 0 || num === 1)\n        return 1;\n    else\n        return num * factorial(num - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program to find the largest number from a list of integers.",
        "input": "3, 17, 10, 8, 11",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> nums = {3, 17, 10, 8, 11};\n    int largest = *std::max_element(nums.begin(), nums.end());\n    std::cout << \"Largest number: \" << largest << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> nums = {3, 17, 10, 8, 11};\n    int largest = *std::max_element(nums.begin(), nums.end());\n    std::cout << \"Largest number: \" << largest << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Using Python, how would you extract values from a dictionary based on a list of keys?",
        "input": "{\"apple\": 4, \"banana\": 6, \"orange\": 2, \"grape\": 10}, [\"apple\", \"orange\"]",
        "response": "def extract_values(dct, keys):\n    return {key: dct[key] for key in keys if key in dct}\n\nfruits = {\"apple\": 4, \"banana\": 6, \"orange\": 2, \"grape\": 10}\nkeys = [\"apple\", \"orange\"]\nresult = extract_values(fruits, keys)\nprint(result)",
        "output": "def extract_values(dct, keys):\n    return {key: dct[key] for key in keys if key in dct}\n\nfruits = {\"apple\": 4, \"banana\": 6, \"orange\": 2, \"grape\": 10}\nkeys = [\"apple\", \"orange\"]\nresult = extract_values(fruits, keys)\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function that counts the number of occurrences of a given letter in a string.",
        "input": "\"hello world\", \"l\"",
        "response": "function countLetterOccurrences(str, letter) {\n    return str.split(letter).length - 1;}\n\nconst result = countLetterOccurrences(\"hello world\", \"l\");\nconsole.log(result);",
        "output": "function countLetterOccurrences(str, letter) {\n    return str.split(letter).length - 1;}\n\nconst result = countLetterOccurrences(\"hello world\", \"l\");\nconsole.log(result);"
    },
    {
        "instruction": "Write a shell script that takes a directory path as an argument and outputs the total number of files found in that directory and its subdirectories.",
        "input": "~/Documents",
        "response": "#!/bin/bash\n\nif [ \"$#\" -ne 1 ]; then\n    echo \"Usage: $0 <directory>\"\n    exit 1\nfi\n\ndir=\"$1\"\ncount=$(find \"$dir\" -type f | wc -l)\necho \"Total files in $dir and its subdirectories: $count\"",
        "output": "#!/bin/bash\n\nif [ \"$#\" -ne 1 ]; then\n    echo \"Usage: $0 <directory>\"\n    exit 1\nfi\n\ndir=\"$1\"\ncount=$(find \"$dir\" -type f | wc -l)\necho \"Total files in $dir and its subdirectories: $count\""
    },
    {
        "instruction": "Write a Python function that takes a string input and reverses the words in the string while preserving whitespace.",
        "input": "Natural language processing is fun!",
        "response": "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\nsentence = 'Natural language processing is fun!'\nresult = reverse_words(sentence)\nprint(result)",
        "output": "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\nsentence = 'Natural language processing is fun!'\nresult = reverse_words(sentence)\nprint(result)"
    },
    {
        "instruction": "Implement a Java method that receives a filepath string and counts the number of characters in the text file.",
        "input": "file.txt",
        "response": "import java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileCharacterCounter {\n    public static int countCharacters(String filePath) {\n        int charCount = 0;\n        try (FileReader fr = new FileReader(filePath)) {\n            int currentChar;\n            while ((currentChar = fr.read()) != -1) {\n                charCount++;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return charCount;\n    }\n\n    public static void main(String[] args) {\n        String filePath = 'file.txt';\n        int count = countCharacters(filePath);\n        System.out.println('Number of characters in the file: ' + count);\n    }}",
        "output": "import java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileCharacterCounter {\n    public static int countCharacters(String filePath) {\n        int charCount = 0;\n        try (FileReader fr = new FileReader(filePath)) {\n            int currentChar;\n            while ((currentChar = fr.read()) != -1) {\n                charCount++;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return charCount;\n    }\n\n    public static void main(String[] args) {\n        String filePath = 'file.txt';\n        int count = countCharacters(filePath);\n        System.out.println('Number of characters in the file: ' + count);\n    }}"
    },
    {
        "instruction": "How would you write a C++ program that prints the Fibonacci sequence up to a certain number?",
        "input": "10",
        "response": "#include <iostream>\n\nvoid print_fibonacci(int n) {\n    int t1 = 0;\n    int t2 = 1;\n    int nextTerm = 0;\n\n    for (int i = 1; i <= n; ++i) {\n        if (i == 1) {\n            std::cout << t1 << ' ';\n        } else if (i == 2) {\n            std::cout << t2 << ' ';\n        } else {\n            nextTerm = t1 + t2;\n            t1 = t2;\n            t2 = nextTerm;\n            std::cout << nextTerm << ' ';\n        }\n    }}\n\nint main() {\n    int n = 10;\n    print_fibonacci(n);\n    return 0;}",
        "output": "#include <iostream>\n\nvoid print_fibonacci(int n) {\n    int t1 = 0;\n    int t2 = 1;\n    int nextTerm = 0;\n\n    for (int i = 1; i <= n; ++i) {\n        if (i == 1) {\n            std::cout << t1 << ' ';\n        } else if (i == 2) {\n            std::cout << t2 << ' ';\n        } else {\n            nextTerm = t1 + t2;\n            t1 = t2;\n            t2 = nextTerm;\n            std::cout << nextTerm << ' ';\n        }\n    }}\n\nint main() {\n    int n = 10;\n    print_fibonacci(n);\n    return 0;}"
    },
    {
        "instruction": "Create a Bash script that lists all directories in the current directory and counts the number of items in each directory.",
        "input": "",
        "response": "#!/bin/bash\n\nfor dir in ./*; do\n    if [ -d \"${dir}\" ]; then\n        echo \"${dir}\"\n        item_count=$(ls -1A \"${dir}\" | wc -l)\n        echo \"Items: ${item_count}\"\n        echo\n    fi\ndone",
        "output": "#!/bin/bash\n\nfor dir in ./*; do\n    if [ -d \"${dir}\" ]; then\n        echo \"${dir}\"\n        item_count=$(ls -1A \"${dir}\" | wc -l)\n        echo \"Items: ${item_count}\"\n        echo\n    fi\ndone"
    },
    {
        "instruction": "Create a Python program that converts a temperature from Fahrenheit to Celsius and vice versa based on user input.",
        "input": "75, 'F'",
        "response": "def convert_temperature(value, unit):\n    if unit.upper() == 'F':\n        celsius = (value - 32) * 5/9\n        return celsius\n    elif unit.upper() == 'C':\n        fahrenheit = (value * 9/5) + 32\n        return fahrenheit\n\ntemp_value = 75\ntemp_unit = 'F'\nconverted_temp = convert_temperature(temp_value, temp_unit)\nprint(converted_temp)",
        "output": "def convert_temperature(value, unit):\n    if unit.upper() == 'F':\n        celsius = (value - 32) * 5/9\n        return celsius\n    elif unit.upper() == 'C':\n        fahrenheit = (value * 9/5) + 32\n        return fahrenheit\n\ntemp_value = 75\ntemp_unit = 'F'\nconverted_temp = convert_temperature(temp_value, temp_unit)\nprint(converted_temp)"
    },
    {
        "instruction": "How would you write a JavaScript program that takes an array of user data and filters out users below the age of 18?",
        "input": "[{name: 'Alice', age: 20}, {name: 'Bob', age: 17}, {name: 'Carol', age: 22}]",
        "response": "function filterAdultUsers(users) {\n    return users.filter(user => user.age >= 18);}\n\nlet userData = [\n    { name: 'Alice', age: 20 },\n    { name: 'Bob', age: 17 },\n    { name: 'Carol', age: 22 }\n];\n\nlet adults = filterAdultUsers(userData);\nconsole.log(adults);",
        "output": "function filterAdultUsers(users) {\n    return users.filter(user => user.age >= 18);}\n\nlet userData = [\n    { name: 'Alice', age: 20 },\n    { name: 'Bob', age: 17 },\n    { name: 'Carol', age: 22 }\n];\n\nlet adults = filterAdultUsers(userData);\nconsole.log(adults);"
    },
    {
        "instruction": "Create a C++ function that reads a file line by line and prints each line to the console.",
        "input": "example.txt",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid print_file_lines(std::string file_path) {\n    std::ifstream input_file(file_path);\n    std::string line;\n    \n    if (input_file.is_open()) {\n        while (std::getline(input_file, line)) {\n            std::cout << line << std::endl;\n        }\n        input_file.close();\n    } else {\n        std::cout << \"Unable to open file\" << std::endl;\n    }}\n\nint main() {\n    std::string file_name = \"example.txt\";\n    print_file_lines(file_name);\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid print_file_lines(std::string file_path) {\n    std::ifstream input_file(file_path);\n    std::string line;\n    \n    if (input_file.is_open()) {\n        while (std::getline(input_file, line)) {\n            std::cout << line << std::endl;\n        }\n        input_file.close();\n    } else {\n        std::cout << \"Unable to open file\" << std::endl;\n    }}\n\nint main() {\n    std::string file_name = \"example.txt\";\n    print_file_lines(file_name);\n    return 0;}"
    },
    {
        "instruction": "Can you write a shell script that takes a list of arguments representing directories and lists the contents of each directory?",
        "input": "dir1 dir2 dir3",
        "response": "#!/bin/bash\n\nfor dir in \"$@\"\ndo\n    echo \"Contents of $dir:\"\n    ls -la \"$dir\"\n    echo \"\"\ndone\n\n# Usage: ./list_directories.sh dir1 dir2 dir3",
        "output": "#!/bin/bash\n\nfor dir in \"$@\"\ndo\n    echo \"Contents of $dir:\"\n    ls -la \"$dir\"\n    echo \"\"\ndone\n\n# Usage: ./list_directories.sh dir1 dir2 dir3"
    },
    {
        "instruction": "Write a C++ program that reads the age of a person in years and calculates the equivalent age in dog years. Consider that 1 human year equals 7 dog years.",
        "input": "25",
        "response": "#include <iostream>\n\nint main() {\n    int human_age, dog_age;\n    std::cout << \"Enter your age in years: \";\n    std::cin >> human_age;\n    dog_age = human_age * 7;\n    std::cout << \"Your age in dog years is: \" << dog_age << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint main() {\n    int human_age, dog_age;\n    std::cout << \"Enter your age in years: \";\n    std::cin >> human_age;\n    dog_age = human_age * 7;\n    std::cout << \"Your age in dog years is: \" << dog_age << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a JavaScript function that takes an object containing names and grades as keys and values, and returns the name of the student with the highest grade.",
        "input": "{ 'Alice': 85, 'Bob': 95, 'Eve': 90 }",
        "response": "function findTopStudent(grades) {\n    let maxGrade = -Infinity;\n    let topStudent;\n    for (const [name, grade] of Object.entries(grades)) {\n        if (grade > maxGrade) {\n            maxGrade = grade;\n            topStudent = name;\n        }\n    }\n    return topStudent;}\n\nconst result = findTopStudent({ 'Alice': 85, 'Bob': 95, 'Eve': 90 });\nconsole.log(result);",
        "output": "function findTopStudent(grades) {\n    let maxGrade = -Infinity;\n    let topStudent;\n    for (const [name, grade] of Object.entries(grades)) {\n        if (grade > maxGrade) {\n            maxGrade = grade;\n            topStudent = name;\n        }\n    }\n    return topStudent;}\n\nconst result = findTopStudent({ 'Alice': 85, 'Bob': 95, 'Eve': 90 });\nconsole.log(result);"
    },
    {
        "instruction": "Design a Python function that takes a list of numbers and returns a new list with only the even numbers, sorted in ascending order.",
        "input": "[4, 9, 7, 2, 5, 0, 8, 1]",
        "response": "def filter_sort_evens(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    even_numbers.sort()\n    return even_numbers\n\nresult = filter_sort_evens([4, 9, 7, 2, 5, 0, 8, 1])\nprint(result)",
        "output": "def filter_sort_evens(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    even_numbers.sort()\n    return even_numbers\n\nresult = filter_sort_evens([4, 9, 7, 2, 5, 0, 8, 1])\nprint(result)"
    },
    {
        "instruction": "How would you write a recursive Shell script that prints the factorial of a given positive integer?",
        "input": "5",
        "response": "#!/bin/sh\n\nfactorial() {\n    if [ $1 -le 1 ]; then\n        echo 1\n    else\n        lastFactorial=$(factorial $(($1-1)))\n        echo $(($1 * $lastFactorial))\n    fi}\n\nnumber=5\nresult=$(factorial $number)\necho \"Factorial of $number is $result\"",
        "output": "#!/bin/sh\n\nfactorial() {\n    if [ $1 -le 1 ]; then\n        echo 1\n    else\n        lastFactorial=$(factorial $(($1-1)))\n        echo $(($1 * $lastFactorial))\n    fi}\n\nnumber=5\nresult=$(factorial $number)\necho \"Factorial of $number is $result\""
    },
    {
        "instruction": "Write a C++ function that reads a CSV file and outputs the total number of rows and columns in the file.",
        "input": "example.csv contents:\\n1,2,3\\n4,5,6\\n7,8,9",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <sstream>\n\nvoid count_rows_columns(const std::string &filename) {\n    std::ifstream file(filename);\n    std::string line;\n    int rows = 0, columns = 0;\n\n    if(!file.is_open()) {\n        std::cout << \"Failed to open file.\" << std::endl;\n        return;\n    }\n\n    while(std::getline(file, line)) {\n        if (rows == 0) {\n            std::stringstream ss(line);\n            while (ss.good()) {\n                std::string val;\n                std::getline(ss, val, ',');\n                ++columns;\n            }\n        }\n        ++rows;\n    }\n\n    file.close();\n\n    std::cout << \"Rows: \" << rows << \"\\nColumns: \" << columns << std::endl;\n}\n\nint main() {\n    std::string filename = \"example.csv\";\n    count_rows_columns(filename);\n}\n",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <sstream>\n\nvoid count_rows_columns(const std::string &filename) {\n    std::ifstream file(filename);\n    std::string line;\n    int rows = 0, columns = 0;\n\n    if(!file.is_open()) {\n        std::cout << \"Failed to open file.\" << std::endl;\n        return;\n    }\n\n    while(std::getline(file, line)) {\n        if (rows == 0) {\n            std::stringstream ss(line);\n            while (ss.good()) {\n                std::string val;\n                std::getline(ss, val, ',');\n                ++columns;\n            }\n        }\n        ++rows;\n    }\n\n    file.close();\n\n    std::cout << \"Rows: \" << rows << \"\\nColumns: \" << columns << std::endl;\n}\n\nint main() {\n    std::string filename = \"example.csv\";\n    count_rows_columns(filename);\n}\n"
    },
    {
        "instruction": "What would be a python script that monitors a given directory path and logs whenever a file is updated?",
        "input": "/path/to/watch/directory",
        "response": "import os\nimport time\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass DirectoryUpdateHandler(FileSystemEventHandler):\n    def on_modified(self, event):\n        if event.src_path.endswith('.log'):\n            return\n        with open('monitor.log', 'a') as log_file:\n            log_file.write(f'{event.src_path} was updated at {time.ctime()}\\n')\n\ndef monitor_directory(path):\n    event_handler = DirectoryUpdateHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=True)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\n\nif __name__ == '__main__':\n    dir_path = '/path/to/watch/directory'\n    monitor_directory(dir_path)",
        "output": "import os\nimport time\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass DirectoryUpdateHandler(FileSystemEventHandler):\n    def on_modified(self, event):\n        if event.src_path.endswith('.log'):\n            return\n        with open('monitor.log', 'a') as log_file:\n            log_file.write(f'{event.src_path} was updated at {time.ctime()}\\n')\n\ndef monitor_directory(path):\n    event_handler = DirectoryUpdateHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=True)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\n\nif __name__ == '__main__':\n    dir_path = '/path/to/watch/directory'\n    monitor_directory(dir_path)"
    },
    {
        "instruction": "Can you create a shell script that backs up a specified directory, compresses it and removes backups older than 7 days?",
        "input": "/home/user/data",
        "response": "#!/bin/bash\n\nbackup_directory='/home/user/data'\ndestination='/home/user/backup'\ndate=$(date +'%Y_%m_%d_%H_%M_%S')\nbackup_name=\"backup_${date}.tar.gz\"\n\n# Compress the directory\ntar -czvf $destination/$backup_name $backup_directory\n\n# Remove backups older than 7 days\nfind $destination/* -mtime +7 -exec rm {} \\;\n",
        "output": "#!/bin/bash\n\nbackup_directory='/home/user/data'\ndestination='/home/user/backup'\ndate=$(date +'%Y_%m_%d_%H_%M_%S')\nbackup_name=\"backup_${date}.tar.gz\"\n\n# Compress the directory\ntar -czvf $destination/$backup_name $backup_directory\n\n# Remove backups older than 7 days\nfind $destination/* -mtime +7 -exec rm {} \\;\n"
    },
    {
        "instruction": "Construct a JavaScript function that fetches data from a given API endpoint and logs the response to the console.",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "async function fetchData(apiUrl) {\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\nfetchData(url);",
        "output": "async function fetchData(apiUrl) {\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\nfetchData(url);"
    },
    {
        "instruction": "Implement a recursive factorial function in JavaScript.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Develop a Java class named Rectangle with two private fields 'width' and 'height', and a constructor that initializes these fields. Implement 'getArea()' and 'getPerimeter()' methods for the class.",
        "input": "Rectangle rect = new Rectangle(4, 5);",
        "response": "public class Rectangle {\n    private double width;\n    private double height;\n\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double getArea() {\n        return width * height;\n    }\n\n    public double getPerimeter() {\n        return 2 * (width + height);\n    }}\n\nRectangle rect = new Rectangle(4, 5);\nSystem.out.println(\"Area: \" + rect.getArea());\nSystem.out.println(\"Perimeter: \" + rect.getPerimeter());",
        "output": "public class Rectangle {\n    private double width;\n    private double height;\n\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double getArea() {\n        return width * height;\n    }\n\n    public double getPerimeter() {\n        return 2 * (width + height);\n    }}\n\nRectangle rect = new Rectangle(4, 5);\nSystem.out.println(\"Area: \" + rect.getArea());\nSystem.out.println(\"Perimeter: \" + rect.getPerimeter());"
    },
    {
        "instruction": "In C++, create a templated function 'maxValue()' that takes two parameters of the same type and returns the greater value.",
        "input": "int a = 7, b = 10;",
        "response": "#include <iostream>\n\ntemplate <typename T>\nT maxValue(const T& a, const T& b) {\n    return a > b ? a : b;}\n\nint main() {\n    int a = 7, b = 10;\n    std::cout << \"Max value: \" << maxValue(a, b) << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n\ntemplate <typename T>\nT maxValue(const T& a, const T& b) {\n    return a > b ? a : b;}\n\nint main() {\n    int a = 7, b = 10;\n    std::cout << \"Max value: \" << maxValue(a, b) << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a C++ function to find the factorial of a given positive integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    std::cout << \"The factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    std::cout << \"The factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Develop a shell script to backup a specified directory and its sub-directories into a tar.gz file.",
        "input": "/home/user/documents",
        "response": "#!/bin/sh\n\nSOURCE_DIR=\"/home/user/documents\"\nDESTINATION_FILE=\"backup_$(date +'%Y%m%d').tar.gz\"\n\ntar -czvf ${DESTINATION_FILE} ${SOURCE_DIR}",
        "output": "#!/bin/sh\n\nSOURCE_DIR=\"/home/user/documents\"\nDESTINATION_FILE=\"backup_$(date +'%Y%m%d').tar.gz\"\n\ntar -czvf ${DESTINATION_FILE} ${SOURCE_DIR}"
    },
    {
        "instruction": "How would you implement a basic login system in Node.js using Express and bcrypt for hashing passwords?",
        "input": "",
        "response": "const express = require('express');\nconst bcrypt = require('bcrypt');\nconst app = express();\n\napp.use(express.json());\n\nconst users = [];\n\napp.post('/register', async (req, res) => {\n    try {\n        const hashedPassword = await bcrypt.hash(req.body.password, 10);\n        const user = { name: req.body.name, password: hashedPassword };\n        users.push(user);\n        res.status(201).json({ message: 'User created successfully' });\n    } catch {\n        res.status(500).json({ message: 'Error registering user' });\n    }\n});\n\napp.post('/login', async (req, res) => {\n    const user = users.find(u => u.name === req.body.name);\n    if (!user) {\n        return res.status(400).json({ message: 'User not found' });\n    }\n\n    try {\n        if (await bcrypt.compare(req.body.password, user.password)) {\n            res.status(200).json({ message: 'Login successful' });\n        } else {\n            res.status(401).json({ message: 'Invalid password' });\n        }\n    } catch {\n        res.status(500).json({ message: 'Error logging in' });\n    }\n});\n\napp.listen(3000);",
        "output": "const express = require('express');\nconst bcrypt = require('bcrypt');\nconst app = express();\n\napp.use(express.json());\n\nconst users = [];\n\napp.post('/register', async (req, res) => {\n    try {\n        const hashedPassword = await bcrypt.hash(req.body.password, 10);\n        const user = { name: req.body.name, password: hashedPassword };\n        users.push(user);\n        res.status(201).json({ message: 'User created successfully' });\n    } catch {\n        res.status(500).json({ message: 'Error registering user' });\n    }\n});\n\napp.post('/login', async (req, res) => {\n    const user = users.find(u => u.name === req.body.name);\n    if (!user) {\n        return res.status(400).json({ message: 'User not found' });\n    }\n\n    try {\n        if (await bcrypt.compare(req.body.password, user.password)) {\n            res.status(200).json({ message: 'Login successful' });\n        } else {\n            res.status(401).json({ message: 'Invalid password' });\n        }\n    } catch {\n        res.status(500).json({ message: 'Error logging in' });\n    }\n});\n\napp.listen(3000);"
    },
    {
        "instruction": "Implement a function in Kotlin that sorts a list of strings based on their length in ascending order.",
        "input": "[\"apple\", \"banana\", \"pear\", \"grape\"]",
        "response": "fun main() {\n    val fruits = listOf(\"apple\", \"banana\", \"pear\", \"grape\")\n    val sortedFruits = fruits.sortedBy { it.length }\n    println(sortedFruits)\n}",
        "output": "fun main() {\n    val fruits = listOf(\"apple\", \"banana\", \"pear\", \"grape\")\n    val sortedFruits = fruits.sortedBy { it.length }\n    println(sortedFruits)\n}"
    },
    {
        "instruction": "Develop a C++ program that reads a text file and outputs its total line count.",
        "input": "example.txt (content: \"This is an example\ntext file with\nsome content.\")",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string line;\n    int count = 0;\n    std::ifstream infile(\"example.txt\");\n    if (infile.is_open()) {\n        while (getline(infile, line)) {\n            count++;\n        }\n        infile.close();\n        std::cout << \"Total lines: \" << count << std::endl;\n    } else {\n        std::cout << \"Unable to open file\" << std::endl;\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string line;\n    int count = 0;\n    std::ifstream infile(\"example.txt\");\n    if (infile.is_open()) {\n        while (getline(infile, line)) {\n            count++;\n        }\n        infile.close();\n        std::cout << \"Total lines: \" << count << std::endl;\n    } else {\n        std::cout << \"Unable to open file\" << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Implement a PHP function that takes a string and replaces all vowels with an underscore.",
        "input": "\"Programming is fun!\"",
        "response": "<?php\n\nfunction replace_vowels($string) {\n    return preg_replace('/[aeiou]/i', '_', $string);\n}\n\n$input = \"Programming is fun!\";\n$result = replace_vowels($input);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction replace_vowels($string) {\n    return preg_replace('/[aeiou]/i', '_', $string);\n}\n\n$input = \"Programming is fun!\";\n$result = replace_vowels($input);\necho $result;\n\n?>"
    },
    {
        "instruction": "Given an array of integers in JavaScript, how would you calculate their average?",
        "input": "[5, 15, 25]",
        "response": "function calculateAverage(arr) {\n    let sum = 0;\n    for (const num of arr) {\n        sum += num;\n    }\n    return sum / arr.length;\n}\n\nconst input = [5, 15, 25];\nconst average = calculateAverage(input);\nconsole.log(average);",
        "output": "function calculateAverage(arr) {\n    let sum = 0;\n    for (const num of arr) {\n        sum += num;\n    }\n    return sum / arr.length;\n}\n\nconst input = [5, 15, 25];\nconst average = calculateAverage(input);\nconsole.log(average);"
    },
    {
        "instruction": "Write a Python function that takes a dictionary with names as keys and ages as values, and returns the oldest person's name.",
        "input": "{\"Alice\": 30, \"Bob\": 25, \"Charlie\": 35}",
        "response": "def oldest_person(ages_dict):\n    return max(ages_dict, key=ages_dict.get)\n\nages = {\"Alice\": 30, \"Bob\": 25, \"Charlie\": 35}\noldest = oldest_person(ages)\nprint(oldest)",
        "output": "def oldest_person(ages_dict):\n    return max(ages_dict, key=ages_dict.get)\n\nages = {\"Alice\": 30, \"Bob\": 25, \"Charlie\": 35}\noldest = oldest_person(ages)\nprint(oldest)"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given number.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Design a Python script that reads a CSV file and prints the first column of each row.",
        "input": "example.csv: \"Name, Age, City\\nAlice, 30, New York\\nBob, 35, San Francisco\\nCharlie, 22, Chicago\"",
        "response": "import csv\n\ndef read_first_column(filename):\n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            print(row[0])\n\nread_first_column('example.csv')",
        "output": "import csv\n\ndef read_first_column(filename):\n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            print(row[0])\n\nread_first_column('example.csv')"
    },
    {
        "instruction": "Write a Node.js script that renames a file.",
        "input": "original_file.txt, new_file.txt",
        "response": "const fs = require('fs');\n\nconst oldPath = 'original_file.txt';\nconst newPath = 'new_file.txt';\n\nfs.rename(oldPath, newPath, (err) => {\n    if (err) throw err;\n    console.log('File renamed successfully.');});",
        "output": "const fs = require('fs');\n\nconst oldPath = 'original_file.txt';\nconst newPath = 'new_file.txt';\n\nfs.rename(oldPath, newPath, (err) => {\n    if (err) throw err;\n    console.log('File renamed successfully.');});"
    },
    {
        "instruction": "How would you create a helper function in PHP that converts a string to title case?",
        "input": "\"this is a sample text\"",
        "response": "<?php\n\nfunction titleCase($str) {\n    $words = explode(' ', $str);\n    $result = [];\n    \n    foreach ($words as $word) {\n        $result[] = ucfirst(strtolower($word));\n    }\n    \n    return implode(' ', $result);}\n\necho titleCase(\"this is a sample text\");\n\n?>",
        "output": "<?php\n\nfunction titleCase($str) {\n    $words = explode(' ', $str);\n    $result = [];\n    \n    foreach ($words as $word) {\n        $result[] = ucfirst(strtolower($word));\n    }\n    \n    return implode(' ', $result);}\n\necho titleCase(\"this is a sample text\");\n\n?>"
    },
    {
        "instruction": "Implement a recursive C++ function that calculates the nth Fibonacci number.",
        "input": "10",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 10;\n    std::cout << 'Fibonacci(' << n << ') = ' << fibonacci(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 10;\n    std::cout << 'Fibonacci(' << n << ') = ' << fibonacci(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Design a SQL query that searches for and returns all products with a price higher than the given value within a database table named 'products'.",
        "input": "50",
        "response": "SELECT * FROM products WHERE price > 50;",
        "output": "SELECT * FROM products WHERE price > 50;"
    },
    {
        "instruction": "Write a Python script that downloads an image from a given URL and saves it locally on the computer.",
        "input": "https://example.com/image.jpg",
        "response": "import requests\n\nurl = 'https://example.com/image.jpg'\nresponse = requests.get(url)\n\nwith open('image.jpg', 'wb') as file:\n    file.write(response.content)",
        "output": "import requests\n\nurl = 'https://example.com/image.jpg'\nresponse = requests.get(url)\n\nwith open('image.jpg', 'wb') as file:\n    file.write(response.content)"
    },
    {
        "instruction": "Compose a shell script that lists all directories in the current folder and saves the output to a text file.",
        "input": "",
        "response": "#!/bin/sh\n\ndirectories=$(ls -d -- */)  # List directories\n\necho \"$directories\" > directories.txt  # Save list to a text file",
        "output": "#!/bin/sh\n\ndirectories=$(ls -d -- */)  # List directories\n\necho \"$directories\" > directories.txt  # Save list to a text file"
    },
    {
        "instruction": "Deconstruct a given URL into its components using Python.",
        "input": "https://www.example.com/path/page.html?query=test#fragment",
        "response": "from urllib.parse import urlparse\n\ndef deconstruct_url(url):\n    parsed_url = urlparse(url)\n    return {\n        'scheme': parsed_url.scheme,\n        'netloc': parsed_url.netloc,\n        'path': parsed_url.path,\n        'params': parsed_url.params,\n        'query': parsed_url.query,\n        'fragment': parsed_url.fragment\n    }\n\nurl = 'https://www.example.com/path/page.html?query=test#fragment'\nprint(deconstruct_url(url))",
        "output": "from urllib.parse import urlparse\n\ndef deconstruct_url(url):\n    parsed_url = urlparse(url)\n    return {\n        'scheme': parsed_url.scheme,\n        'netloc': parsed_url.netloc,\n        'path': parsed_url.path,\n        'params': parsed_url.params,\n        'query': parsed_url.query,\n        'fragment': parsed_url.fragment\n    }\n\nurl = 'https://www.example.com/path/page.html?query=test#fragment'\nprint(deconstruct_url(url))"
    },
    {
        "instruction": "How can you create a simple web server in Node.js that listens on port 3000 and serves a 'Hello, World!' response?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, World!');});\n\nserver.listen(3000, () => {\n    console.log('Server listening on port 3000');});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, World!');});\n\nserver.listen(3000, () => {\n    console.log('Server listening on port 3000');});"
    },
    {
        "instruction": "Implement a Bash script that iterates through all files in a directory and calculates the total size in kilobytes.",
        "input": "",
        "response": "#!/bin/bash\n\ndirectory=\".\"\ntotal_size=0\n\nfor file in \"$directory\"/*; do\n    file_size_kb=$(du -k \"$file\" | cut -f1)\n    total_size=$((total_size + file_size_kb))\ndone\n\necho \"Total size: $total_size KB\";",
        "output": "#!/bin/bash\n\ndirectory=\".\"\ntotal_size=0\n\nfor file in \"$directory\"/*; do\n    file_size_kb=$(du -k \"$file\" | cut -f1)\n    total_size=$((total_size + file_size_kb))\ndone\n\necho \"Total size: $total_size KB\";"
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of a given integer using recursion.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Can you show me a Bash script to count how many times a word appears in a file?",
        "input": "word: \"apple\", file: \"fruits.txt\"",
        "response": "#!/bin/bash\n\nword='apple'\nfile='fruits.txt'\ncount=$(grep -o -w $word $file | wc -l)\n\necho \"The word '\"$word\"' appears '$count' times in the file '\"$file\"'\"",
        "output": "#!/bin/bash\n\nword='apple'\nfile='fruits.txt'\ncount=$(grep -o -w $word $file | wc -l)\n\necho \"The word '\"$word\"' appears '$count' times in the file '\"$file\"'\""
    },
    {
        "instruction": "Create a PHP script that reads a CSV file and outputs its content as an HTML table.",
        "input": "CSV file: \"data.csv\"",
        "response": "<?php\n\n$file = 'data.csv';\n$csvData = file_get_contents($file);\n$rows = explode(\"\\n\", $csvData);\n\necho '<table border=\"1\">';\nforeach($rows as $row) {\n    echo '<tr>';\n    $columns = str_getcsv($row);\n    foreach($columns as $column) {\n        echo '<td>' . $column . '</td>';\n    }\n    echo '</tr>'; }\necho '</table>';?>",
        "output": "<?php\n\n$file = 'data.csv';\n$csvData = file_get_contents($file);\n$rows = explode(\"\\n\", $csvData);\n\necho '<table border=\"1\">';\nforeach($rows as $row) {\n    echo '<tr>';\n    $columns = str_getcsv($row);\n    foreach($columns as $column) {\n        echo '<td>' . $column . '</td>';\n    }\n    echo '</tr>'; }\necho '</table>';?>"
    },
    {
        "instruction": "Design a SQL query that retrieves the username and email of all users ordered alphabetically by their last name.",
        "input": "table: users (id, first_name, last_name, username, email)",
        "response": "SELECT username, email\nFROM users\nORDER BY last_name ASC;",
        "output": "SELECT username, email\nFROM users\nORDER BY last_name ASC;"
    },
    {
        "instruction": "Write a Python function that reverses a given string.",
        "input": "\"hello world\"",
        "response": "def reverse_string(s):\n    return s[::-1]\n\nresult = reverse_string('hello world')\nprint(result)",
        "output": "def reverse_string(s):\n    return s[::-1]\n\nresult = reverse_string('hello world')\nprint(result)"
    },
    {
        "instruction": "How would you implement a selection sort algorithm in JavaScript?",
        "input": "[64, 34, 25, 12, 22, 11, 90]",
        "response": "function selectionSort(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n        let minIdx = i;\n        for (let j = i+1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n            }\n        }\n        if (minIdx !== i) {\n            let temp = arr[i];\n            arr[i] = arr[minIdx];\n            arr[minIdx] = temp;\n        }\n    }\n    return arr;}\n\nconst arr = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(selectionSort(arr));",
        "output": "function selectionSort(arr) {\n    for (let i = 0; i < arr.length - 1; i++) {\n        let minIdx = i;\n        for (let j = i+1; j < arr.length; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n            }\n        }\n        if (minIdx !== i) {\n            let temp = arr[i];\n            arr[i] = arr[minIdx];\n            arr[minIdx] = temp;\n        }\n    }\n    return arr;}\n\nconst arr = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(selectionSort(arr));"
    },
    {
        "instruction": "Create a Java program to count the number of occurrences of a specific character in a given string.",
        "input": "\"programming\", 'g'",
        "response": "public class CharacterCount {\n    public static int countCharInString(String str, char c) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == c) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String str = \"programming\";\n        char c = 'g';\n        int count = countCharInString(str, c);\n        System.out.println(\"Character '\" + c + \"' appears \" + count + \" times in '\" + str + \"'.\");\n    }}",
        "output": "public class CharacterCount {\n    public static int countCharInString(String str, char c) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == c) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String str = \"programming\";\n        char c = 'g';\n        int count = countCharInString(str, c);\n        System.out.println(\"Character '\" + c + \"' appears \" + count + \" times in '\" + str + \"'.\");\n    }}"
    },
    {
        "instruction": "Design a Python function that finds the longest consecutive substring of a given string containing only vowels.",
        "input": "\"beautiful_trees\"",
        "response": "def longest_vowel_substring(s):\n    vowels = set('AEIOUaeiou')\n    max_len, max_substring = 0, ''\n    cur_len, cur_substring = 0, ''\n\n    for char in s:\n        if char in vowels:\n            cur_len += 1\n            cur_substring += char\n\n            if cur_len > max_len:\n                max_len = cur_len\n                max_substring = cur_substring\n        else:\n            cur_len = 0\n            cur_substring = ''\n\n    return max_substring\n\nstring = 'beautiful_trees'\nresult = longest_vowel_substring(string)\nprint(result)",
        "output": "def longest_vowel_substring(s):\n    vowels = set('AEIOUaeiou')\n    max_len, max_substring = 0, ''\n    cur_len, cur_substring = 0, ''\n\n    for char in s:\n        if char in vowels:\n            cur_len += 1\n            cur_substring += char\n\n            if cur_len > max_len:\n                max_len = cur_len\n                max_substring = cur_substring\n        else:\n            cur_len = 0\n            cur_substring = ''\n\n    return max_substring\n\nstring = 'beautiful_trees'\nresult = longest_vowel_substring(string)\nprint(result)"
    },
    {
        "instruction": "Write a Python function to calculate the factorial of a given number.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function that filters an array of objects, removing the ones with a specific key-value pair.",
        "input": "[{name: 'Alice', age: 25}, {name: 'Bob', age: 30}, {name: 'Carol', age: 25}], 'age', 25",
        "response": "function filterByKeyValue(arr, key, value) {\n    return arr.filter(obj => obj[key] !== value);}\n\nconst filtered = filterByKeyValue([{name: 'Alice', age: 25}, {name: 'Bob', age: 30}, {name: 'Carol', age: 25}], 'age', 25);\nconsole.log(filtered);",
        "output": "function filterByKeyValue(arr, key, value) {\n    return arr.filter(obj => obj[key] !== value);}\n\nconst filtered = filterByKeyValue([{name: 'Alice', age: 25}, {name: 'Bob', age: 30}, {name: 'Carol', age: 25}], 'age', 25);\nconsole.log(filtered);"
    },
    {
        "instruction": "Can you implement a C++ program that reads two integers and prints if the first is divisible by the second?",
        "input": "12, 3",
        "response": "#include<iostream>\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    if (a % b == 0) {\n        std::cout << \"The first number is divisible by the second.\";\n    } else {\n        std::cout << \"The first number is not divisible by the second.\";\n    }\n    return 0;}",
        "output": "#include<iostream>\n\nint main() {\n    int a, b;\n    std::cin >> a >> b;\n    if (a % b == 0) {\n        std::cout << \"The first number is divisible by the second.\";\n    } else {\n        std::cout << \"The first number is not divisible by the second.\";\n    }\n    return 0;}"
    },
    {
        "instruction": "Design a Shell script to find and replace all occurrences of a given string in a file.",
        "input": "source.txt, 'foo', 'bar'",
        "response": "#!/bin/sh\n\nfile=\"source.txt\"\nsearch_string=\"foo\"\nreplace_string=\"bar\"\n\nsed -i \"s/$search_string/$replace_string/g\" \"$file\"",
        "output": "#!/bin/sh\n\nfile=\"source.txt\"\nsearch_string=\"foo\"\nreplace_string=\"bar\"\n\nsed -i \"s/$search_string/$replace_string/g\" \"$file\""
    },
    {
        "instruction": "Develop a Python program utilizing a generator, that yields the Fibonacci sequence up to a given number of terms.",
        "input": "10",
        "response": "def fibonacci_generator(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor fib in fibonacci_generator(10):\n    print(fib)",
        "output": "def fibonacci_generator(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor fib in fibonacci_generator(10):\n    print(fib)"
    },
    {
        "instruction": "Plot a bar chart using data from a given dictionary, with keys as categories and values as frequencies. Use Python and matplotlib for this task.",
        "input": "{'A': 5, 'B': 8, 'C': 3}",
        "response": "import matplotlib.pyplot as plt\n\ndata = {'A': 5, 'B': 8, 'C': 3}\n\ncategories = list(data.keys())\nfrequencies = list(data.values())\n\nplt.bar(categories, frequencies)\nplt.xlabel('Categories')\nplt.ylabel('Frequencies')\nplt.title('Bar Chart')\nplt.show()",
        "output": "import matplotlib.pyplot as plt\n\ndata = {'A': 5, 'B': 8, 'C': 3}\n\ncategories = list(data.keys())\nfrequencies = list(data.values())\n\nplt.bar(categories, frequencies)\nplt.xlabel('Categories')\nplt.ylabel('Frequencies')\nplt.title('Bar Chart')\nplt.show()"
    },
    {
        "instruction": "Create a Java method which uses recursion to compute the factorial of a positive integer.",
        "input": "6",
        "response": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int result = factorial(6);\n        System.out.println(result);\n    }}",
        "output": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int result = factorial(6);\n        System.out.println(result);\n    }}"
    },
    {
        "instruction": "Write a JavaScript function that accepts a nested JSON object, and flatten its keys using dot notation. The function should return the flattened JSON object.",
        "input": "{\"a\": {\"b\": 1, \"c\": {\"d\": 2}}, \"e\": 3}",
        "response": "function flattenJson(obj, parentKey = '', result = {}) {\n    for (const key in obj) {\n        const newKey = parentKey ? `${parentKey}.${key}` : key;\n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n            flattenJson(obj[key], newKey, result);\n        } else {\n            result[newKey] = obj[key];\n        }\n    }\n    return result;}\n\nconst nestedJson = {\"a\": {\"b\": 1, \"c\": {\"d\": 2}}, \"e\": 3};\nconst flattenedJson = flattenJson(nestedJson);\nconsole.log(flattenedJson);",
        "output": "function flattenJson(obj, parentKey = '', result = {}) {\n    for (const key in obj) {\n        const newKey = parentKey ? `${parentKey}.${key}` : key;\n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n            flattenJson(obj[key], newKey, result);\n        } else {\n            result[newKey] = obj[key];\n        }\n    }\n    return result;}\n\nconst nestedJson = {\"a\": {\"b\": 1, \"c\": {\"d\": 2}}, \"e\": 3};\nconst flattenedJson = flattenJson(nestedJson);\nconsole.log(flattenedJson);"
    },
    {
        "instruction": "Implement a Python function that calculates the factorial of a given positive integer.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Develop a JavaScript function that takes a string and returns a new string with each character repeated twice.",
        "input": "hello",
        "response": "function doubleChars(str) {\n    let newStr = '';\n    for (const char of str) {\n        newStr += char.repeat(2);\n    }\n    return newStr;}\n\nconst result = doubleChars('hello');\nconsole.log(result);",
        "output": "function doubleChars(str) {\n    let newStr = '';\n    for (const char of str) {\n        newStr += char.repeat(2);\n    }\n    return newStr;}\n\nconst result = doubleChars('hello');\nconsole.log(result);"
    },
    {
        "instruction": "Create a C++ program that generates a multiplication table for the range of 1 to 10.",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        for (int j = 1; j <= 10; j++) {\n            cout << i * j << '\\t';\n        }\n        cout << endl;\n    }\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        for (int j = 1; j <= 10; j++) {\n            cout << i * j << '\\t';\n        }\n        cout << endl;\n    }\n    return 0;}"
    },
    {
        "instruction": "Write a Java method that finds the smallest number in an array of integers.",
        "input": "[12, 5, 9, 17, 3]",
        "response": "public static int findSmallest(int[] arr) {\n    int min = arr[0];\n\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n\n    return min;}\n\nint[] sampleArray = {12, 5, 9, 17, 3};\nSystem.out.println(findSmallest(sampleArray));",
        "output": "public static int findSmallest(int[] arr) {\n    int min = arr[0];\n\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n\n    return min;}\n\nint[] sampleArray = {12, 5, 9, 17, 3};\nSystem.out.println(findSmallest(sampleArray));"
    },
    {
        "instruction": "Implement a C# function that calculates the factorial of a given number.",
        "input": "6",
        "response": "using System;\n\npublic class Factorial\n{\n    public static int CalculateFactorial(int n)\n    {\n        if (n == 0)\n            return 1;\n        else\n            return n * CalculateFactorial(n - 1);\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(CalculateFactorial(6));\n    }}",
        "output": "using System;\n\npublic class Factorial\n{\n    public static int CalculateFactorial(int n)\n    {\n        if (n == 0)\n            return 1;\n        else\n            return n * CalculateFactorial(n - 1);\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(CalculateFactorial(6));\n    }}"
    },
    {
        "instruction": "Write a JavaScript code that sorts a list of numbers using bubble sort.",
        "input": "[42, 23, 1, 10, 36]",
        "response": "function bubbleSort(arr) {\n    let len = arr.length;\n    let swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < len-1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                let temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                swapped = true;\n            }\n        }\n    } while (swapped);\n    return arr;}\nconst numbers = [42, 23, 1, 10, 36];\nconsole.log(bubbleSort(numbers));",
        "output": "function bubbleSort(arr) {\n    let len = arr.length;\n    let swapped;\n    do {\n        swapped = false;\n        for (let i = 0; i < len-1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                let temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                swapped = true;\n            }\n        }\n    } while (swapped);\n    return arr;}\nconst numbers = [42, 23, 1, 10, 36];\nconsole.log(bubbleSort(numbers));"
    },
    {
        "instruction": "Create a Python script that reads a CSV file and prints its content.",
        "input": "example.csv(contains name, age, and country)",
        "response": "import csv\n\ndef read_csv(filename):\n    with open(filename, 'r') as csvfile:\n        content = csv.reader(csvfile)\n        for row in content:\n            print(', '.join(row))\n\nif __name__=='__main__':\n    read_csv('example.csv')",
        "output": "import csv\n\ndef read_csv(filename):\n    with open(filename, 'r') as csvfile:\n        content = csv.reader(csvfile)\n        for row in content:\n            print(', '.join(row))\n\nif __name__=='__main__':\n    read_csv('example.csv')"
    },
    {
        "instruction": "How to use the urllib library in Python to send an HTTP GET request?",
        "input": "https://api.example.com/users",
        "response": "import urllib.request\n\ndef fetch_data(url):\n    with urllib.request.urlopen(url) as response:\n        data = response.read().decode('utf-8')\n        print(data)\n\nif __name__ == '__main__':\n    url = 'https://api.example.com/users'\n    fetch_data(url)",
        "output": "import urllib.request\n\ndef fetch_data(url):\n    with urllib.request.urlopen(url) as response:\n        data = response.read().decode('utf-8')\n        print(data)\n\nif __name__ == '__main__':\n    url = 'https://api.example.com/users'\n    fetch_data(url)"
    },
    {
        "instruction": "How can I write a PHP script that connects to a MySQL database and retrieves records from a table?",
        "input": "Server: 'localhost', Username: 'username', Password: 'password', Database: 'database_name', Table: 'table_name'",
        "response": "<?php\n$servername = 'localhost';\n$username = 'username';\n$password = 'password';\n$dbname = 'database_name';\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);}\n\n$sql = 'SELECT * FROM table_name';\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    while($row = $result->fetch_assoc()) {\n        echo 'id: ' . $row['id']. ', name: ' . $row['name'];\n    }} else {\n    echo '0 results';}\n\n$conn->close();\n?>",
        "output": "<?php\n$servername = 'localhost';\n$username = 'username';\n$password = 'password';\n$dbname = 'database_name';\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);}\n\n$sql = 'SELECT * FROM table_name';\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    while($row = $result->fetch_assoc()) {\n        echo 'id: ' . $row['id']. ', name: ' . $row['name'];\n    }} else {\n    echo '0 results';}\n\n$conn->close();\n?>"
    },
    {
        "instruction": "Implement a JavaScript function that uses the Fetch API to make a GET request to a specified URL and logs the response as JSON.",
        "input": "URL: 'https://jsonplaceholder.typicode.com/todos/1'",
        "response": "async function fetchAndLogJSON(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching and parsing data:', error);\n    }}\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\nfetchAndLogJSON(url);",
        "output": "async function fetchAndLogJSON(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching and parsing data:', error);\n    }}\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\nfetchAndLogJSON(url);"
    },
    {
        "instruction": "Write a Python script that reads a CSV file and outputs the total number of rows and columns, and the values in the first row.",
        "input": "CSV file content: 'Id,Name,Score\\n1,John,80\\n2,Emma,95\\n3,Michael,70'",
        "response": "import csv\nfrom io import StringIO\n\ncsv_content = 'Id,Name,Score\\n1,John,80\\n2,Emma,95\\n3,Michael,70'\ncsv_file = StringIO(csv_content)\n\nreader = csv.reader(csv_file)\nheader = next(reader)\n\nnum_columns = len(header)\nnum_rows = sum(1 for row in reader) + 1\n\nprint(f'Total number of rows: {num_rows}')\nprint(f'Total number of columns: {num_columns}')\nprint(f'Values in the first row: {header}')",
        "output": "import csv\nfrom io import StringIO\n\ncsv_content = 'Id,Name,Score\\n1,John,80\\n2,Emma,95\\n3,Michael,70'\ncsv_file = StringIO(csv_content)\n\nreader = csv.reader(csv_file)\nheader = next(reader)\n\nnum_columns = len(header)\nnum_rows = sum(1 for row in reader) + 1\n\nprint(f'Total number of rows: {num_rows}')\nprint(f'Total number of columns: {num_columns}')\nprint(f'Values in the first row: {header}')"
    },
    {
        "instruction": "Develop a C++ function that takes a string input and outputs the reversed string without affecting the original string.",
        "input": "\"Example input\"",
        "response": "#include <iostream>\n#include <string>\n\nstd::string reverse_string(const std::string& s) {\n    std::string reversed(s.rbegin(), s.rend());\n    return reversed;}\n\nint main() {\n    std::string original = \"Example input\";\n    std::string result = reverse_string(original);\n    std::cout << \"Reversed: \" << result << std::endl;\n    std::cout << \"Original: \" << original << std::endl;}",
        "output": "#include <iostream>\n#include <string>\n\nstd::string reverse_string(const std::string& s) {\n    std::string reversed(s.rbegin(), s.rend());\n    return reversed;}\n\nint main() {\n    std::string original = \"Example input\";\n    std::string result = reverse_string(original);\n    std::cout << \"Reversed: \" << result << std::endl;\n    std::cout << \"Original: \" << original << std::endl;}"
    },
    {
        "instruction": "How would you create a Node.js script to fetch data from a web API using the Fetch API?",
        "input": "https://api.example.com/data",
        "response": "const fetch = require('node-fetch');\n\nasync function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }}\n\nconst url = 'https://api.example.com/data';\nfetchData(url);",
        "output": "const fetch = require('node-fetch');\n\nasync function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }}\n\nconst url = 'https://api.example.com/data';\nfetchData(url);"
    },
    {
        "instruction": "Construct a shell script that lists files in the current directory, sorts them by size, and displays the result.",
        "input": "",
        "response": "#!/bin/bash\n\nls -lSh",
        "output": "#!/bin/bash\n\nls -lSh"
    },
    {
        "instruction": "Can you write a Python script that reads a text file line by line and prints each line with its corresponding line number?",
        "input": "example_file.txt",
        "response": "def print_lines_with_numbers(file_path):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n        for i, line in enumerate(lines, 1):\n            print(f'{i}: {line.strip()}')\n\nfile_path = 'example_file.txt'\nprint_lines_with_numbers(file_path)",
        "output": "def print_lines_with_numbers(file_path):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n        for i, line in enumerate(lines, 1):\n            print(f'{i}: {line.strip()}')\n\nfile_path = 'example_file.txt'\nprint_lines_with_numbers(file_path)"
    },
    {
        "instruction": "Implement a C function to calculate the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include <stdio.h>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 1 || n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int num = 6;\n    unsigned long long result = factorial(num);\n    printf(\"Factorial of %u is %llu\\n\", num, result);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 1 || n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int num = 6;\n    unsigned long long result = factorial(num);\n    printf(\"Factorial of %u is %llu\\n\", num, result);\n    return 0;\n}"
    },
    {
        "instruction": "Design a Python program that reads a CSV file and calculates the sum of a column.",
        "input": "sample.csv\n1,5,10\n5,12,9\n3,14,12",
        "response": "import csv\n\nfilename = 'sample.csv'\nsum_of_column = 0\n\nwith open(filename, 'r') as file:\n    csv_reader = csv.reader(file)\n    for row in csv_reader:\n        sum_of_column += int(row[1])\n\nprint(f\"Sum of the second column: {sum_of_column}\")",
        "output": "import csv\n\nfilename = 'sample.csv'\nsum_of_column = 0\n\nwith open(filename, 'r') as file:\n    csv_reader = csv.reader(file)\n    for row in csv_reader:\n        sum_of_column += int(row[1])\n\nprint(f\"Sum of the second column: {sum_of_column}\")"
    },
    {
        "instruction": "Write a PHP script that detects if a user's browser is a mobile browser or a desktop browser by checking the user agent.",
        "input": "",
        "response": "<?php\n\nfunction is_mobile_browser() {\n    $user_agent = $_SERVER['HTTP_USER_AGENT'];\n    $mobile_agents = array('Mobile', 'Android', 'iPhone', 'Windows Phone');\n\n    foreach ($mobile_agents as $agent) {\n        if (strpos($user_agent, $agent) !== false) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nif (is_mobile_browser()) {\n    echo 'You are using a mobile browser.';\n} else {\n    echo 'You are using a desktop browser.';\n}\n\n?>",
        "output": "<?php\n\nfunction is_mobile_browser() {\n    $user_agent = $_SERVER['HTTP_USER_AGENT'];\n    $mobile_agents = array('Mobile', 'Android', 'iPhone', 'Windows Phone');\n\n    foreach ($mobile_agents as $agent) {\n        if (strpos($user_agent, $agent) !== false) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nif (is_mobile_browser()) {\n    echo 'You are using a mobile browser.';\n} else {\n    echo 'You are using a desktop browser.';\n}\n\n?>"
    },
    {
        "instruction": "Create a shell script to count the number of files and directories in the given directory.",
        "input": "/home/user/files",
        "response": "#!/bin/bash\n\ndirectory=\"/home/user/files\"\n\ndirectories_count=$(find \"$directory\" -type d -printf '.' | wc -c)\nfiles_count=$(find \"$directory\" -type f -printf '.' | wc -c)\n\necho \"Number of directories: $directories_count\"\necho \"Number of files: $files_count\"",
        "output": "#!/bin/bash\n\ndirectory=\"/home/user/files\"\n\ndirectories_count=$(find \"$directory\" -type d -printf '.' | wc -c)\nfiles_count=$(find \"$directory\" -type f -printf '.' | wc -c)\n\necho \"Number of directories: $directories_count\"\necho \"Number of files: $files_count\""
    },
    {
        "instruction": "Design a SQL query to select all employees with a salary greater than 50000 and order the results by their last names alphabetically.",
        "input": "Employee table with columns: id, first_name, last_name, salary",
        "response": "SELECT * FROM Employee WHERE salary > 50000 ORDER BY last_name ASC;",
        "output": "SELECT * FROM Employee WHERE salary > 50000 ORDER BY last_name ASC;"
    },
    {
        "instruction": "Implement a C# method that accepts a list of integers and returns a new list containing only the even numbers from the input list.",
        "input": "List of integers: 1, 2, 3, 4, 5, 6",
        "response": "using System.Collections.Generic;\n\npublic static List<int> FilterEvenNumbers(List<int> numbers)\n{\n    List<int> evenNumbers = new List<int>();\n\n    foreach (int num in numbers)\n    {\n        if (num % 2 == 0)\n        {\n            evenNumbers.Add(num);\n        }\n    }\n\n    return evenNumbers;}\n\nList<int> inputNumbers = new List<int> { 1, 2, 3, 4, 5, 6 };\nList<int> result = FilterEvenNumbers(inputNumbers);\n",
        "output": "using System.Collections.Generic;\n\npublic static List<int> FilterEvenNumbers(List<int> numbers)\n{\n    List<int> evenNumbers = new List<int>();\n\n    foreach (int num in numbers)\n    {\n        if (num % 2 == 0)\n        {\n            evenNumbers.Add(num);\n        }\n    }\n\n    return evenNumbers;}\n\nList<int> inputNumbers = new List<int> { 1, 2, 3, 4, 5, 6 };\nList<int> result = FilterEvenNumbers(inputNumbers);\n"
    },
    {
        "instruction": "Construct a shell script that iterates through each line of a given text file and counts the number of occurrences of a specified word.",
        "input": "Text file: example.txt\nSpecified word: 'apple'",
        "response": "#!/bin/bash\n\nfile='example.txt'\nword='apple'\ncount=0\n\nwhile read line\ndo\n    for w in $line\n    do\n        if [ \"$w\" == \"$word\" ]\n        then\n            count=$((count+1))\n        fi\n    done\ndone < $file\n\necho \"The word '$word' appears $count times in the file '$file'.\"",
        "output": "#!/bin/bash\n\nfile='example.txt'\nword='apple'\ncount=0\n\nwhile read line\ndo\n    for w in $line\n    do\n        if [ \"$w\" == \"$word\" ]\n        then\n            count=$((count+1))\n        fi\n    done\ndone < $file\n\necho \"The word '$word' appears $count times in the file '$file'.\""
    },
    {
        "instruction": "Create a PHP function that takes a string input and returns a string with all characters converted to lowercase except for the first character of each word.",
        "input": "\"ThE QuIck BrOwn FoX\"",
        "response": "<?php\n\nfunction ucwords_lower($str) {\n    return ucwords(strtolower($str));}\n\n$input = 'ThE QuIck BrOwn FoX';\n$result = ucwords_lower($input);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction ucwords_lower($str) {\n    return ucwords(strtolower($str));}\n\n$input = 'ThE QuIck BrOwn FoX';\n$result = ucwords_lower($input);\necho $result;\n\n?>"
    },
    {
        "instruction": "Implement a C++ program to calculate the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if(n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if(n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Can you write a Python program that accepts a sentence as input and prints the characters that have even ASCII values in reverse order?",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "def even_ascii_reverse(sentence):\n    even_ascii_chars = [char for char in sentence if ord(char) % 2 == 0]\n    return ''.join(even_ascii_chars[::-1])\n\nsentence = 'The quick brown fox jumps over the lazy dog.'\nresult = even_ascii_reverse(sentence)\nprint(result)",
        "output": "def even_ascii_reverse(sentence):\n    even_ascii_chars = [char for char in sentence if ord(char) % 2 == 0]\n    return ''.join(even_ascii_chars[::-1])\n\nsentence = 'The quick brown fox jumps over the lazy dog.'\nresult = even_ascii_reverse(sentence)\nprint(result)"
    },
    {
        "instruction": "Write a JavaScript function that returns the longest word within a given string.",
        "input": "May the Force be with you.",
        "response": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n\n    for(const word of words) {\n        if(word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n    return longestWord;}\n\nconst input = 'May the Force be with you.';\nconst result = findLongestWord(input);\nconsole.log(result);",
        "output": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n\n    for(const word of words) {\n        if(word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n    return longestWord;}\n\nconst input = 'May the Force be with you.';\nconst result = findLongestWord(input);\nconsole.log(result);"
    },
    {
        "instruction": "Fix the following PHP script that calculates the sum of all even numbers in a given array:",
        "input": "$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);",
        "response": "<?php\nfunction sum_even_numbers($arr) {\n    $sum = 0;\n    foreach ($arr as $num) {\n        if ($num % 2 == 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;}\n\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$result = sum_even_numbers($arr);\necho \"Sum of even numbers: \" . $result;\n?>",
        "output": "<?php\nfunction sum_even_numbers($arr) {\n    $sum = 0;\n    foreach ($arr as $num) {\n        if ($num % 2 == 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;}\n\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$result = sum_even_numbers($arr);\necho \"Sum of even numbers: \" . $result;\n?>"
    },
    {
        "instruction": "How would you write a shell script that takes a directory as an argument and recursively counts the total number of files and directories inside?",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nfunction count_files_dirs() {\n    local dir=$1\n    local count=0\n\n    for item in \"${dir}\"/*; do\n        if [ -d \"${item}\" ]; then\n            count=$((count + 1))\n            count=$((count + $(count_files_dirs \"${item}\")))\n        else\n            count=$((count + 1))\n        fi\n    done\n\n    echo $count}\n\ntarget_directory=\"/path/to/directory\"\ntotal_items=$(count_files_dirs \"$target_directory\")\necho \"Total files and directories in \"$target_directory\": $total_items\"",
        "output": "#!/bin/bash\n\nfunction count_files_dirs() {\n    local dir=$1\n    local count=0\n\n    for item in \"${dir}\"/*; do\n        if [ -d \"${item}\" ]; then\n            count=$((count + 1))\n            count=$((count + $(count_files_dirs \"${item}\")))\n        else\n            count=$((count + 1))\n        fi\n    done\n\n    echo $count}\n\ntarget_directory=\"/path/to/directory\"\ntotal_items=$(count_files_dirs \"$target_directory\")\necho \"Total files and directories in \"$target_directory\": $total_items\""
    },
    {
        "instruction": "Write a Python script that takes a string as input and calculates the number of occurrences of each character in it, case-insensitive.",
        "input": "Hello, World!",
        "response": "def count_chars(s):\n    char_count = {}\n    for char in s.lower():\n        if char.isalnum():\n            char_count[char] = char_count.get(char, 0) + 1\n    return char_count\n\ninput_str = 'Hello, World!'\ncounts = count_chars(input_str)\nprint(counts)",
        "output": "def count_chars(s):\n    char_count = {}\n    for char in s.lower():\n        if char.isalnum():\n            char_count[char] = char_count.get(char, 0) + 1\n    return char_count\n\ninput_str = 'Hello, World!'\ncounts = count_chars(input_str)\nprint(counts)"
    },
    {
        "instruction": "Create a Javascript function that takes a string and returns true if it contains balanced brackets or false otherwise. Balanced brackets mean any open brackets '(' must be closed by the same type of brackets in the proper order, and there should be no unmatched or internal unclosed brackets.",
        "input": "{[()]}",
        "response": "function isBalanced(s) {\n    const brackets = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    };\n    const stack = [];\n\n    for (const char of s) {\n        if (brackets[char]) {\n            stack.push(char);\n        } else {\n            const last = stack.pop();\n            if (brackets[last] !== char) {\n                return false;\n            }\n        }\n    }\n\n    return stack.length === 0;}\n\nconsole.log(isBalanced('{[()]}'));",
        "output": "function isBalanced(s) {\n    const brackets = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    };\n    const stack = [];\n\n    for (const char of s) {\n        if (brackets[char]) {\n            stack.push(char);\n        } else {\n            const last = stack.pop();\n            if (brackets[last] !== char) {\n                return false;\n            }\n        }\n    }\n\n    return stack.length === 0;}\n\nconsole.log(isBalanced('{[()]}'));"
    },
    {
        "instruction": "Implement a C function that accepts a string input and counts the number of vowels.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "#include <stdio.h>\n#include <ctype.h>\n\nint count_vowels(const char *str) {\n    int count = 0;\n    for (const char *p = str; *p; p++) {\n        char c = tolower(*p);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    const char *input = \"The quick brown fox jumps over the lazy dog.\";\n    int vowels = count_vowels(input);\n    printf(\"Vowel count: %d\\n\", vowels);\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <ctype.h>\n\nint count_vowels(const char *str) {\n    int count = 0;\n    for (const char *p = str; *p; p++) {\n        char c = tolower(*p);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    const char *input = \"The quick brown fox jumps over the lazy dog.\";\n    int vowels = count_vowels(input);\n    printf(\"Vowel count: %d\\n\", vowels);\n    return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript function to recursively calculate the nth number of the Fibonacci sequence.",
        "input": "10",
        "response": "function fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst result = fibonacci(10);\nconsole.log(result);",
        "output": "function fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst result = fibonacci(10);\nconsole.log(result);"
    },
    {
        "instruction": "How can one implement a simple RESTful API using Flask that accepts two numbers and returns their product in Python?",
        "input": "POST /multiply\n{\"a\": 4, \"b\": 5}",
        "response": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/multiply', methods=['POST'])\ndef multiply():\n    data = request.get_json()\n    a = data.get('a')\n    b = data.get('b')\n\n    if a is not None and b is not None:\n        return jsonify({\"result\": a * b}), 200\n    else:\n        return jsonify({\"error\": \"Both numbers are required.\"}), 400\n\nif __name__ == '__main__':\n    app.run()",
        "output": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/multiply', methods=['POST'])\ndef multiply():\n    data = request.get_json()\n    a = data.get('a')\n    b = data.get('b')\n\n    if a is not None and b is not None:\n        return jsonify({\"result\": a * b}), 200\n    else:\n        return jsonify({\"error\": \"Both numbers are required.\"}), 400\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Create a C# program that reads a list of numbers from a file, sorts them, and writes the sorted numbers to a new file.",
        "input": "Input file content:\n9,4,6,8,2,1,5,7,3",
        "response": "using System;\nusing System.IO;\nusing System.Linq;\n\nnamespace SortNumbersFromFile\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string inputPath = \"input.txt\";\n            string outputPath = \"output.txt\";\n\n            string inputFileContent = File.ReadAllText(inputPath);\n            int[] numbers = inputFileContent.Split(',').Select(int.Parse).ToArray();\n            Array.Sort(numbers);\n\n            string outputFileContent = string.Join(\",\", numbers);\n            File.WriteAllText(outputPath, outputFileContent);\n        }\n    }\n}",
        "output": "using System;\nusing System.IO;\nusing System.Linq;\n\nnamespace SortNumbersFromFile\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string inputPath = \"input.txt\";\n            string outputPath = \"output.txt\";\n\n            string inputFileContent = File.ReadAllText(inputPath);\n            int[] numbers = inputFileContent.Split(',').Select(int.Parse).ToArray();\n            Array.Sort(numbers);\n\n            string outputFileContent = string.Join(\",\", numbers);\n            File.WriteAllText(outputPath, outputFileContent);\n        }\n    }\n}"
    },
    {
        "instruction": "Design a C++ function to calculate the factorial of a given positive integer.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 6;\n    unsigned long long result = factorial(n);\n    cout << 'Factorial of ' << n << ' is ' << result << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 6;\n    unsigned long long result = factorial(n);\n    cout << 'Factorial of ' << n << ' is ' << result << endl;\n    return 0;}"
    },
    {
        "instruction": "Write an SQL query to find the average salary of employees in a 'sales' department, given a table named 'employees' with columns 'id', 'department', 'name', and 'salary'.",
        "input": "employees: 1 | 'sales' | 'John Doe' | 50000",
        "response": "SELECT AVG(salary) as average_salary\nFROM employees\nWHERE department = 'sales';",
        "output": "SELECT AVG(salary) as average_salary\nFROM employees\nWHERE department = 'sales';"
    },
    {
        "instruction": "Implement a PHP function that takes a string input and replaces every occurrence of the word 'cat' with 'dog'.",
        "input": "'The cat jumped onto the cat tower.'",
        "response": "<?php\nfunction replace_cat_with_dog($str) {\n    return str_replace('cat', 'dog', $str);}\n\n$input_str = 'The cat jumped onto the cat tower.';\n$result = replace_cat_with_dog($input_str);\necho $result;\n?>",
        "output": "<?php\nfunction replace_cat_with_dog($str) {\n    return str_replace('cat', 'dog', $str);}\n\n$input_str = 'The cat jumped onto the cat tower.';\n$result = replace_cat_with_dog($input_str);\necho $result;\n?>"
    },
    {
        "instruction": "How would you create a Bash script that lists the files in the current directory and sorts them by their size?",
        "input": "",
        "response": "#!/bin/bash\nls -lS --block-size=1K",
        "output": "#!/bin/bash\nls -lS --block-size=1K"
    },
    {
        "instruction": "Implement a C++ function that finds the factorial of a given non-negative integer.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n}"
    },
    {
        "instruction": "Design a shell script that lists all the files in the current directory and writes the file names to a text file.",
        "input": "",
        "response": "#!/bin/sh\n\nls | tee files_list.txt",
        "output": "#!/bin/sh\n\nls | tee files_list.txt"
    },
    {
        "instruction": "How can you resolve a merge conflict in a Git repository using Python?",
        "input": "path_to_conflict_file = 'path/to/conflicted/file.txt'",
        "response": "import os, re\n\npath_to_conflict_file = 'path/to/conflicted/file.txt'\n\nwith open(path_to_conflict_file, 'r+') as file:\n    content = file.read()\n    conflict_free = re.sub(r'<<<<<<< .*?=======.*?>>>>>>> .*?\\\\n', '', content, flags=re.DOTALL)\n    file.seek(0)\n    file.write(conflict_free)\n    file.truncate()\n\nos.system('git add ' + path_to_conflict_file)",
        "output": "import os, re\n\npath_to_conflict_file = 'path/to/conflicted/file.txt'\n\nwith open(path_to_conflict_file, 'r+') as file:\n    content = file.read()\n    conflict_free = re.sub(r'<<<<<<< .*?=======.*?>>>>>>> .*?\\\\n', '', content, flags=re.DOTALL)\n    file.seek(0)\n    file.write(conflict_free)\n    file.truncate()\n\nos.system('git add ' + path_to_conflict_file)"
    },
    {
        "instruction": "In PHP, create a function that accepts an email address and returns true if it is a valid address, otherwise false.",
        "input": "'example@example.com'",
        "response": "<?php\n\nfunction isValidEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n\n$email = 'example@example.com';\n\nif (isValidEmail($email)) {\n    echo \"$email is a valid email address.\";\n} else {\n    echo \"$email is not a valid email address.\";\n}\n\n?>",
        "output": "<?php\n\nfunction isValidEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n\n$email = 'example@example.com';\n\nif (isValidEmail($email)) {\n    echo \"$email is a valid email address.\";\n} else {\n    echo \"$email is not a valid email address.\";\n}\n\n?>"
    },
    {
        "instruction": "Implement a C++ function that calculates the Fibonacci number for a given index.",
        "input": "10",
        "response": "#include <iostream>\n\nint fibonacci(int index) {\n    if (index <= 1) {\n        return index;\n    }\n    return fibonacci(index - 1) + fibonacci(index - 2);}\n\nint main() {\n    int index = 10;\n    std::cout << \"Fibonacci index \" << index << \": \" << fibonacci(index) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint fibonacci(int index) {\n    if (index <= 1) {\n        return index;\n    }\n    return fibonacci(index - 1) + fibonacci(index - 2);}\n\nint main() {\n    int index = 10;\n    std::cout << \"Fibonacci index \" << index << \": \" << fibonacci(index) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Create a PHP script that deletes a file from the server with the specified filename.",
        "input": "\"example.txt\"",
        "response": "<?php\n$filename = \"example.txt\";\nif (file_exists($filename)) {\n    unlink($filename);\n    echo \"The file $filename has been deleted.\";} else {\n    echo \"The file $filename does not exist.\";}\n?>",
        "output": "<?php\n$filename = \"example.txt\";\nif (file_exists($filename)) {\n    unlink($filename);\n    echo \"The file $filename has been deleted.\";} else {\n    echo \"The file $filename does not exist.\";}\n?>"
    },
    {
        "instruction": "Write a JavaScript code snippet to add a click event listener to a button with the ID 'myButton', and when clicked, display an alert box with the message 'Clicked!'.",
        "input": "<button id=\"myButton\">Click me</button>",
        "response": "const myButton = document.getElementById(\"myButton\");\n\nmyButton.addEventListener(\"click\", () => {\n    alert(\"Clicked!\");});",
        "output": "const myButton = document.getElementById(\"myButton\");\n\nmyButton.addEventListener(\"click\", () => {\n    alert(\"Clicked!\");});"
    },
    {
        "instruction": "What would be the steps to implement a Haskell function that takes a list of integers and returns the sum of all even numbers?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "sumEven :: [Int] -> Int\nsumEven = sum . filter even\n\nmain :: IO ()\nmain = do\n    let numbers = [1, 2, 3, 4, 5]\n    putStrLn $ \"Sum of even numbers: \" ++ show (sumEven numbers)",
        "output": "sumEven :: [Int] -> Int\nsumEven = sum . filter even\n\nmain :: IO ()\nmain = do\n    let numbers = [1, 2, 3, 4, 5]\n    putStrLn $ \"Sum of even numbers: \" ++ show (sumEven numbers)"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a given positive integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    unsigned int n = 5;\n    cout << \"Factorial of \" << n << \" is: \" << factorial(n) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    unsigned int n = 5;\n    cout << \"Factorial of \" << n << \" is: \" << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "How can I write a Python script that reads the contents of a text file and prints the number of lines and words in it?",
        "input": "sample.txt (content): 'A fox jumped over the fence.\nThe quick brown dog was amazed.'",
        "response": "def count_lines_and_words(file_name):\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n        line_count = len(lines)\n        word_count = sum(len(line.split()) for line in lines)\n    return (line_count, word_count)\n\nresult = count_lines_and_words('sample.txt')\nprint('Lines:', result[0])\nprint('Words:', result[1])",
        "output": "def count_lines_and_words(file_name):\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n        line_count = len(lines)\n        word_count = sum(len(line.split()) for line in lines)\n    return (line_count, word_count)\n\nresult = count_lines_and_words('sample.txt')\nprint('Lines:', result[0])\nprint('Words:', result[1])"
    },
    {
        "instruction": "Write a Java method that takes an ArrayList of integers and finds the maximum value in the list.",
        "input": "ArrayList: [3, 5, 8, 1, 4]",
        "response": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class MaxValueFinder {\n    public static int findMax(ArrayList<Integer> arrayList) {\n        return Collections.max(arrayList);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        arrayList.add(3);\n        arrayList.add(5);\n        arrayList.add(8);\n        arrayList.add(1);\n        arrayList.add(4);\n\n        int maxValue = findMax(arrayList);\n        System.out.println(\"Max value is: \" + maxValue);\n    }}",
        "output": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class MaxValueFinder {\n    public static int findMax(ArrayList<Integer> arrayList) {\n        return Collections.max(arrayList);\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        arrayList.add(3);\n        arrayList.add(5);\n        arrayList.add(8);\n        arrayList.add(1);\n        arrayList.add(4);\n\n        int maxValue = findMax(arrayList);\n        System.out.println(\"Max value is: \" + maxValue);\n    }}"
    },
    {
        "instruction": "Implement a shell script that recursively finds and lists all the '.txt' files in a given directory and its subdirectories.",
        "input": "Directory Path: /home/user/documents",
        "response": "#!/bin/bash\n\ndirectory='/home/user/documents'\n\nfind \"$directory\" -type f -name \"*.txt\" -print",
        "output": "#!/bin/bash\n\ndirectory='/home/user/documents'\n\nfind \"$directory\" -type f -name \"*.txt\" -print"
    },
    {
        "instruction": "Write a Python script that reads a CSV file, extracts the data and prints the average value of a given column.",
        "input": "example.csv\nname,age,score\nAlice,30,85\nBob,25,90\nCharlie,22,78",
        "response": "import csv\n\ndef calculate_average(column_name, file_content):\n    total = 0\n    count = 0\n\n    for row in csv.DictReader(file_content.splitlines()):\n        total += int(row[column_name])\n        count += 1\n\n    return total / count\n\ncsv_content = \"\"\"name,age,score\nAlice,30,85\nBob,25,90\nCharlie,22,78\"\"\"\naverage_score = calculate_average('score', csv_content)\nprint(average_score)",
        "output": "import csv\n\ndef calculate_average(column_name, file_content):\n    total = 0\n    count = 0\n\n    for row in csv.DictReader(file_content.splitlines()):\n        total += int(row[column_name])\n        count += 1\n\n    return total / count\n\ncsv_content = \"\"\"name,age,score\nAlice,30,85\nBob,25,90\nCharlie,22,78\"\"\"\naverage_score = calculate_average('score', csv_content)\nprint(average_score)"
    },
    {
        "instruction": "How would you create a JavaScript function to generate the Fibonacci sequence up to a given number of terms?",
        "input": "7",
        "response": "function generateFibonacci(n) {\n    let sequence = [0, 1];\n    for (let i = 2; i < n; i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2]);\n    }\n    return sequence.slice(0, n);}\n\nconst numOfTerms = 7;\nconst fibonacciSequence = generateFibonacci(numOfTerms);\nconsole.log(fibonacciSequence);",
        "output": "function generateFibonacci(n) {\n    let sequence = [0, 1];\n    for (let i = 2; i < n; i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2]);\n    }\n    return sequence.slice(0, n);}\n\nconst numOfTerms = 7;\nconst fibonacciSequence = generateFibonacci(numOfTerms);\nconsole.log(fibonacciSequence);"
    },
    {
        "instruction": "Write a C program that takes an integer array and returns the index of the largest element.",
        "input": "integers[] = {3, 8, 2, 12, 5, 7}",
        "response": "#include<stdio.h>\n\nint find_largest_index(int arr[], int size) {\n    int max_index = 0;\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > arr[max_index]) {\n            max_index = i;\n        }\n    }\n    return max_index;}\n\nint main() {\n    int integers[] = {3, 8, 2, 12, 5, 7};\n    int size = sizeof(integers) / sizeof(integers[0]);\n    int largest_index = find_largest_index(integers, size);\n    printf(\"Largest element is at index: %d\", largest_index);\n    return 0;}",
        "output": "#include<stdio.h>\n\nint find_largest_index(int arr[], int size) {\n    int max_index = 0;\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > arr[max_index]) {\n            max_index = i;\n        }\n    }\n    return max_index;}\n\nint main() {\n    int integers[] = {3, 8, 2, 12, 5, 7};\n    int size = sizeof(integers) / sizeof(integers[0]);\n    int largest_index = find_largest_index(integers, size);\n    printf(\"Largest element is at index: %d\", largest_index);\n    return 0;}"
    },
    {
        "instruction": "Implement a Perl script that accepts a string and outputs the number of vowels in the string.",
        "input": "\"Hello World\"",
        "response": "#!/usr/bin/perl\n\nsub count_vowels {\n    my ($str) = @_;\n    my $count = 0;\n    $count++ while $str =~ /[aeiou]/gi;\n    return $count;}\n\nmy $input = \"Hello World\";\nmy $vowel_count = count_vowels($input);\nprint \"Number of vowels: $vowel_count\\n\";",
        "output": "#!/usr/bin/perl\n\nsub count_vowels {\n    my ($str) = @_;\n    my $count = 0;\n    $count++ while $str =~ /[aeiou]/gi;\n    return $count;}\n\nmy $input = \"Hello World\";\nmy $vowel_count = count_vowels($input);\nprint \"Number of vowels: $vowel_count\\n\";"
    },
    {
        "instruction": "Design a simple C++ program that computes the factorial of a given number.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 6;\n    int result = factorial(num);\n    std::cout << \"Factorial of \" << num << \" is: \" << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 6;\n    int result = factorial(num);\n    std::cout << \"Factorial of \" << num << \" is: \" << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Shell script to find the largest file in a directory, and print its size and name.",
        "input": "/home/user/documents",
        "response": "#!/bin/sh\n\nDIRECTORY=\"/home/user/documents\"\n\nlargest=0\nlargest_file=\"\"\n\nfor file in \"$DIRECTORY\"/*; do\n    if [ -f \"$file\" ]; then\n        size=$(stat -c%s \"$file\")\n        if [ $size -gt $largest ]; then\n            largest=$size\n            largest_file=$file\n        fi\n    fi\ndone\n\necho \"Largest file: $largest_file (Size: $largest bytes)\"",
        "output": "#!/bin/sh\n\nDIRECTORY=\"/home/user/documents\"\n\nlargest=0\nlargest_file=\"\"\n\nfor file in \"$DIRECTORY\"/*; do\n    if [ -f \"$file\" ]; then\n        size=$(stat -c%s \"$file\")\n        if [ $size -gt $largest ]; then\n            largest=$size\n            largest_file=$file\n        fi\n    fi\ndone\n\necho \"Largest file: $largest_file (Size: $largest bytes)\""
    },
    {
        "instruction": "Can you develop a JavaScript function to merge two sorted arrays into a new sorted array without using any existing sorting functions?",
        "input": "[1, 3, 5], [2, 4, 6]",
        "response": "function mergeSortedArrays(arr1, arr2) {\n    let merged = [];\n    let i = 0, j = 0;\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] < arr2[j]) {\n            merged.push(arr1[i]);\n            i++;\n        } else {\n            merged.push(arr2[j]);\n            j++;\n        }\n    }\n\n    while (i < arr1.length) {\n        merged.push(arr1[i]);\n        i++;\n    }\n\n    while (j < arr2.length) {\n        merged.push(arr2[j]);\n        j++;\n    }\n\n    return merged;}\n\nconst result = mergeSortedArrays([1, 3, 5], [2, 4, 6]);\nconsole.log(result);",
        "output": "function mergeSortedArrays(arr1, arr2) {\n    let merged = [];\n    let i = 0, j = 0;\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] < arr2[j]) {\n            merged.push(arr1[i]);\n            i++;\n        } else {\n            merged.push(arr2[j]);\n            j++;\n        }\n    }\n\n    while (i < arr1.length) {\n        merged.push(arr1[i]);\n        i++;\n    }\n\n    while (j < arr2.length) {\n        merged.push(arr2[j]);\n        j++;\n    }\n\n    return merged;}\n\nconst result = mergeSortedArrays([1, 3, 5], [2, 4, 6]);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a Python function to generate a list of prime numbers between two given numbers, inclusive of the start and end numbers.",
        "input": "2, 23",
        "response": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n\ndef generate_primes(start, end):\n    primes = []\n    for num in range(start, end + 1):\n        if is_prime(num):\n            primes.append(num)\n\n    return primes\n\nresult = generate_primes(2, 23)\nprint(result)",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n\ndef generate_primes(start, end):\n    primes = []\n    for num in range(start, end + 1):\n        if is_prime(num):\n            primes.append(num)\n\n    return primes\n\nresult = generate_primes(2, 23)\nprint(result)"
    },
    {
        "instruction": "Design a C# method that accepts a list of strings and reverses each word in the list.",
        "input": "['apple', 'banana', 'cherry']",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    static void Main() {\n        List<string> words = new List<string> { \"apple\", \"banana\", \"cherry\" };\n        List<string> reversedWords = ReverseWords(words);\n\n        Console.WriteLine(string.Join(\", \", reversedWords));\n    }\n\n    static List<string> ReverseWords(List<string> words) {\n        List<string> reversedWords = new List<string>();\n\n        foreach (string word in words) {\n            char[] arr = word.ToCharArray();\n            Array.Reverse(arr);\n            reversedWords.Add(new string(arr));\n        }\n\n        return reversedWords;\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    static void Main() {\n        List<string> words = new List<string> { \"apple\", \"banana\", \"cherry\" };\n        List<string> reversedWords = ReverseWords(words);\n\n        Console.WriteLine(string.Join(\", \", reversedWords));\n    }\n\n    static List<string> ReverseWords(List<string> words) {\n        List<string> reversedWords = new List<string>();\n\n        foreach (string word in words) {\n            char[] arr = word.ToCharArray();\n            Array.Reverse(arr);\n            reversedWords.Add(new string(arr));\n        }\n\n        return reversedWords;\n    }}"
    },
    {
        "instruction": "How would you retrieve the user's name and email from a JSON object in JavaScript?",
        "input": "{ \"name\": \"John Doe\", \"email\": \"jdoe@example.com\", \"age\": 30 }",
        "response": "const jsonData = '{ \"name\": \"John Doe\", \"email\": \"jdoe@example.com\", \"age\": 30 }';\nconst obj = JSON.parse(jsonData);\n\nconst name = obj.name;\nconst email = obj.email;\n\nconsole.log(`Name: ${name}, Email: ${email}`);",
        "output": "const jsonData = '{ \"name\": \"John Doe\", \"email\": \"jdoe@example.com\", \"age\": 30 }';\nconst obj = JSON.parse(jsonData);\n\nconst name = obj.name;\nconst email = obj.email;\n\nconsole.log(`Name: ${name}, Email: ${email}`);"
    },
    {
        "instruction": "Create a Python script that opens a file, reads its content, and prints the number of lines in the file.",
        "input": "file.txt:\nFirst line\nSecond line\nThird line",
        "response": "with open('file.txt', 'r') as file:\n    lines = file.readlines()\n    number_of_lines = len(lines)\n\nprint('Number of lines:', number_of_lines)",
        "output": "with open('file.txt', 'r') as file:\n    lines = file.readlines()\n    number_of_lines = len(lines)\n\nprint('Number of lines:', number_of_lines)"
    },
    {
        "instruction": "Write a shell script to find and display the largest file in the current directory.",
        "input": "",
        "response": "#!/bin/bash\n\nlargest_file=\"\"\nlargest_size=0\n\nfor file in *; do\n    if [ -f \"${file}\" ]; then\n        file_size=$(stat -c%s \"${file}\")\n\n        if [ ${file_size} -gt ${largest_size} ]; then\n            largest_file=${file}\n            largest_size=${file_size}\n        fi\n    fi\ndone\n\nif [ -z \"${largest_file}\" ]; then\n    echo 'No files found in the current directory.'\nelse\n    echo \"Largest file: '${largest_file}' with size: ${largest_size} bytes\"\nfi",
        "output": "#!/bin/bash\n\nlargest_file=\"\"\nlargest_size=0\n\nfor file in *; do\n    if [ -f \"${file}\" ]; then\n        file_size=$(stat -c%s \"${file}\")\n\n        if [ ${file_size} -gt ${largest_size} ]; then\n            largest_file=${file}\n            largest_size=${file_size}\n        fi\n    fi\ndone\n\nif [ -z \"${largest_file}\" ]; then\n    echo 'No files found in the current directory.'\nelse\n    echo \"Largest file: '${largest_file}' with size: ${largest_size} bytes\"\nfi"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a given positive integer.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 6;\n    std::cout << 'Factorial of ' << num << ' is: ' << factorial(num) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 6;\n    std::cout << 'Factorial of ' << num << ' is: ' << factorial(num) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that formats a given string into Title Case.",
        "input": "\"example title case\"",
        "response": "function titleCase(str) {\n    let words = str.split(' ');\n    let output = words.map(word => {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    });\n    return output.join(' ');\n}\n\nlet result = titleCase('example title case');\nconsole.log(result);",
        "output": "function titleCase(str) {\n    let words = str.split(' ');\n    let output = words.map(word => {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    });\n    return output.join(' ');\n}\n\nlet result = titleCase('example title case');\nconsole.log(result);"
    },
    {
        "instruction": "Assume you have an array of strings in Python. How to count the number of vowels in each string using a lambda function?",
        "input": "['hello', 'world', 'gpt', 'ai']",
        "response": "vowels = 'aeiou'\ncount_vowels = lambda s: sum(1 for c in s.lower() if c in vowels)\n\nstrings = ['hello', 'world', 'gpt', 'ai']\nvowel_counts = list(map(count_vowels, strings))\n\nprint(vowel_counts)",
        "output": "vowels = 'aeiou'\ncount_vowels = lambda s: sum(1 for c in s.lower() if c in vowels)\n\nstrings = ['hello', 'world', 'gpt', 'ai']\nvowel_counts = list(map(count_vowels, strings))\n\nprint(vowel_counts)"
    },
    {
        "instruction": "Create a shell script that lists all the files in a directory along with their file sizes and sorts them by size in descending order.",
        "input": "",
        "response": "#!/bin/bash\n\nls -lSh",
        "output": "#!/bin/bash\n\nls -lSh"
    },
    {
        "instruction": "Implement a C++ function that reverses a string in place.",
        "input": "\"cplusplus\"",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"cplusplus\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"cplusplus\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;}"
    },
    {
        "instruction": "What's the code for a Python function that sorts a list of dictionaries by a given key in descending order?",
        "input": "[{\"name\": \"Alice\", \"age\": 32}, {\"name\": \"Bob\", \"age\": 28}, {\"name\": \"Eve\", \"age\": 35}], \"age\"",
        "response": "def sort_dicts(arr, key, reverse=True):\n    return sorted(arr, key=lambda x: x[key], reverse=reverse)\n\ndata = [{\"name\": \"Alice\", \"age\": 32}, {\"name\": \"Bob\", \"age\": 28}, {\"name\": \"Eve\", \"age\": 35}]\nsorted_data = sort_dicts(data, \"age\")\nprint(sorted_data)",
        "output": "def sort_dicts(arr, key, reverse=True):\n    return sorted(arr, key=lambda x: x[key], reverse=reverse)\n\ndata = [{\"name\": \"Alice\", \"age\": 32}, {\"name\": \"Bob\", \"age\": 28}, {\"name\": \"Eve\", \"age\": 35}]\nsorted_data = sort_dicts(data, \"age\")\nprint(sorted_data)"
    },
    {
        "instruction": "Create a JavaScript function that flattens a nested array of any depth into a single-level array.",
        "input": "[1, [2, [3, [4]]], 5]",
        "response": "function flatten_array(array, result = []) {\n    for (const element of array) {\n        if (Array.isArray(element)) {\n            flatten_array(element, result);\n        } else {\n            result.push(element);\n        }\n    }\n    return result;}\n\nconst input = [1, [2, [3, [4]]], 5];\nconst flat_array = flatten_array(input);\nconsole.log(flat_array);",
        "output": "function flatten_array(array, result = []) {\n    for (const element of array) {\n        if (Array.isArray(element)) {\n            flatten_array(element, result);\n        } else {\n            result.push(element);\n        }\n    }\n    return result;}\n\nconst input = [1, [2, [3, [4]]], 5];\nconst flat_array = flatten_array(input);\nconsole.log(flat_array);"
    },
    {
        "instruction": "Write a bash script that finds all .txt files in a directory and its subdirectories and prints their content.",
        "input": "directory: /home/user/documents",
        "response": "#!/bin/bash\n\ndirectory=\"/home/user/documents\"\n\nfind \"$directory\" -name '*.txt' -type f -exec cat '{}' \\;",
        "output": "#!/bin/bash\n\ndirectory=\"/home/user/documents\"\n\nfind \"$directory\" -name '*.txt' -type f -exec cat '{}' \\;"
    },
    {
        "instruction": "Write a C++ program that reads a text file containing a list of numbers, and calculates the average of those numbers.",
        "input": "numbers.txt: 12 7 9 15 23 5 16",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"numbers.txt\");\n    int sum = 0;\n    int count = 0;\n    int number;\n\n    while (file >> number) {\n        sum += number;\n        count++;\n    }\n\n    double average = static_cast<double>(sum) / count;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"numbers.txt\");\n    int sum = 0;\n    int count = 0;\n    int number;\n\n    while (file >> number) {\n        sum += number;\n        count++;\n    }\n\n    double average = static_cast<double>(sum) / count;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Design a Python decorator that times the execution of a function and logs the result.",
        "input": "function: a sample function to test decorator on",
        "response": "import time\n\ndef timer_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n\n        print(f\"{func.__name__} took {end_time - start_time}s to execute.\")\n        return result\n\n    return wrapper\n\n@timer_decorator\ndef sample_function():\n    time.sleep(2)\n\nsample_function()",
        "output": "import time\n\ndef timer_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n\n        print(f\"{func.__name__} took {end_time - start_time}s to execute.\")\n        return result\n\n    return wrapper\n\n@timer_decorator\ndef sample_function():\n    time.sleep(2)\n\nsample_function()"
    },
    {
        "instruction": "Construct a SQL query to find the total number of employees per department from an 'employees' table with 'employee_id', 'first_name', 'last_name', and 'department' columns.",
        "input": "employees table structure and sample data",
        "response": "SELECT department, COUNT(employee_id) as employee_count\nFROM employees \nGROUP BY department;",
        "output": "SELECT department, COUNT(employee_id) as employee_count\nFROM employees \nGROUP BY department;"
    },
    {
        "instruction": "How would you implement a simple web server in Node.js that serves a static HTML file?",
        "input": "index.html: a sample HTML file to serve",
        "response": "const http = require('http');\nconst fs = require('fs');\n\nconst server = http.createServer((req, res) => {\n    fs.readFile('./index.html', 'utf-8', (error, content) => {\n        if (error) {\n            res.writeHead(500);\n            res.end('Internal Server Error');\n        } else {\n            res.writeHead(200, {'Content-Type': 'text/html'});\n            res.end(content);\n        }\n    });});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});",
        "output": "const http = require('http');\nconst fs = require('fs');\n\nconst server = http.createServer((req, res) => {\n    fs.readFile('./index.html', 'utf-8', (error, content) => {\n        if (error) {\n            res.writeHead(500);\n            res.end('Internal Server Error');\n        } else {\n            res.writeHead(200, {'Content-Type': 'text/html'});\n            res.end(content);\n        }\n    });});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});"
    },
    {
        "instruction": "How can I construct a Python script that reads a text file line by line and counts the number of occurrences of a specified word?",
        "input": "filename: 'example.txt', word: 'test'",
        "response": "def count_word_occurrences(filename, word):\n    count = 0\n    with open(filename, 'r') as file:\n        for line in file:\n            count += line.lower().split().count(word.lower())\n    return count\n\nfilename = 'example.txt'\nword = 'test'\nresult = count_word_occurrences(filename, word)\nprint(f\"The word '{word}' occurs {result} times in the file '{filename}'.\")",
        "output": "def count_word_occurrences(filename, word):\n    count = 0\n    with open(filename, 'r') as file:\n        for line in file:\n            count += line.lower().split().count(word.lower())\n    return count\n\nfilename = 'example.txt'\nword = 'test'\nresult = count_word_occurrences(filename, word)\nprint(f\"The word '{word}' occurs {result} times in the file '{filename}'.\")"
    },
    {
        "instruction": "Design a JavaScript code snippet that will fetch data from an API and log the results in a formatted manner.",
        "input": "API URL: 'https://jsonplaceholder.typicode.com/posts/1'",
        "response": "async function fetchData(apiUrl) {\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        console.log(`Title: ${data.title}\nBody: ${data.body}`);\n    } catch (error) {\n        console.error(`Error fetching data from API: ${error.message}`);\n    }}\n\nconst apiUrl = 'https://jsonplaceholder.typicode.com/posts/1';\nfetchData(apiUrl);",
        "output": "async function fetchData(apiUrl) {\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        console.log(`Title: ${data.title}\nBody: ${data.body}`);\n    } catch (error) {\n        console.error(`Error fetching data from API: ${error.message}`);\n    }}\n\nconst apiUrl = 'https://jsonplaceholder.typicode.com/posts/1';\nfetchData(apiUrl);"
    },
    {
        "instruction": "Write a shell script that finds all directories containing a specific file.",
        "input": "file: 'config.ini'",
        "response": "#!/bin/bash\n\nfind . -type f -name 'config.ini' -exec dirname {} \\;\n\n",
        "output": "#!/bin/bash\n\nfind . -type f -name 'config.ini' -exec dirname {} \\;\n\n"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if(n <= 1) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if(n <= 1) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Bash script to download the content of a specified URL and save it to a file with a provided filename. The script should accept two command-line arguments: the URL and the output file name.",
        "input": "https://www.example.com, output.txt",
        "response": "#!/bin/bash\n\nurl=\"$1\"\noutput_file=\"$2\"\n\ncurl -L \"$url\" -o \"$output_file\"",
        "output": "#!/bin/bash\n\nurl=\"$1\"\noutput_file=\"$2\"\n\ncurl -L \"$url\" -o \"$output_file\""
    },
    {
        "instruction": "Implement a C# function that calculates the nth Fibonacci number using memoization. You may assume the provided function signature and an appropriate Dictionary to store previously calculated values.",
        "input": "8",
        "response": "using System;\nusing System.Collections.Generic;\n\npublic static class Fibonacci\n{   \n    static Dictionary<int, int> cache = new Dictionary<int, int>();\n\n    public static int MemoizedFibonacci(int n)\n    {\n        if (n <= 1) return n;\n        if (!cache.ContainsKey(n))\n        {\n            cache[n] = MemoizedFibonacci(n - 1) + MemoizedFibonacci(n - 2);\n        }\n        return cache[n];\n    }\n\n    public static void Main(string[] args)\n    {\n        int num = 8;\n        Console.WriteLine(MemoizedFibonacci(num));\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\npublic static class Fibonacci\n{   \n    static Dictionary<int, int> cache = new Dictionary<int, int>();\n\n    public static int MemoizedFibonacci(int n)\n    {\n        if (n <= 1) return n;\n        if (!cache.ContainsKey(n))\n        {\n            cache[n] = MemoizedFibonacci(n - 1) + MemoizedFibonacci(n - 2);\n        }\n        return cache[n];\n    }\n\n    public static void Main(string[] args)\n    {\n        int num = 8;\n        Console.WriteLine(MemoizedFibonacci(num));\n    }}"
    },
    {
        "instruction": "What is an optimized MongoDB query in JavaScript to find all documents in a 'students' collection with a 'score' greater than or equal to 80 and a 'status' field equal to 'Passed'? Sort the result ascending by 'name' field.",
        "input": "students collection, score >= 80, status = 'Passed'",
        "response": "db.students.find({\n    'score': { '$gte': 80 },\n    'status': 'Passed'}).sort({ 'name': 1 })",
        "output": "db.students.find({\n    'score': { '$gte': 80 },\n    'status': 'Passed'}).sort({ 'name': 1 })"
    },
    {
        "instruction": "Develop a C++ function that sorts an array of integers in ascending order using the bubble sort algorithm.",
        "input": "{4, 1, 6, 9, 2}",
        "response": "#include <iostream>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                std::swap(arr[j], arr[j+1]);\n            }\n        }\n    }}\n\nint main() {\n    int arr[] = {4, 1, 6, 9, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    bubbleSort(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                std::swap(arr[j], arr[j+1]);\n            }\n        }\n    }}\n\nint main() {\n    int arr[] = {4, 1, 6, 9, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    bubbleSort(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Can you write a bash shell script to list the files in the current directory and display their size in ascending order?",
        "input": "",
        "response": "#!/bin/bash\n\nls -l | sort -k 5 -n | awk '{print $5, $9}'",
        "output": "#!/bin/bash\n\nls -l | sort -k 5 -n | awk '{print $5, $9}'"
    },
    {
        "instruction": "Write a PHP script that receives an array of names, capitalizes the first letter of each name, and returns the modified array.",
        "input": "['john', 'jane', 'doe']",
        "response": "<?php\n\nfunction capitalizeNames($names) {\n    $capitalizedNames = array();\n    foreach ($names as $name) {\n        $capitalizedNames[] = ucfirst($name);\n    }\n    return $capitalizedNames;}\n\n$names = ['john', 'jane', 'doe'];\n$capitalizedNames = capitalizeNames($names);\n\nprint_r($capitalizedNames);\n\n?>",
        "output": "<?php\n\nfunction capitalizeNames($names) {\n    $capitalizedNames = array();\n    foreach ($names as $name) {\n        $capitalizedNames[] = ucfirst($name);\n    }\n    return $capitalizedNames;}\n\n$names = ['john', 'jane', 'doe'];\n$capitalizedNames = capitalizeNames($names);\n\nprint_r($capitalizedNames);\n\n?>"
    },
    {
        "instruction": "Construct a Python script that reads data from a CSV file, calculates the average of the numbers in the second column, and prints the result.",
        "input": "example.csv\n1,5\n2,4\n3,6\n4,8",
        "response": "import csv\n\ndef average_second_column(file_name):\n    with open(file_name, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        sum = 0\n        count = 0\n        for row in reader:\n            count += 1\n            sum += int(row[1])\n        return sum / count\n\ncsv_file = 'example.csv'\naverage = average_second_column(csv_file)\nprint(average)",
        "output": "import csv\n\ndef average_second_column(file_name):\n    with open(file_name, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        sum = 0\n        count = 0\n        for row in reader:\n            count += 1\n            sum += int(row[1])\n        return sum / count\n\ncsv_file = 'example.csv'\naverage = average_second_column(csv_file)\nprint(average)"
    },
    {
        "instruction": "Create a C++ program that accepts user input for the radius of a circle and calculates its area.",
        "input": "5",
        "response": "#include <iostream>\n#include <cmath>\n\nint main() {\n    double radius, area;\n    std::cout << \"Enter the radius of the circle: \";\n    std::cin >> radius;\n    area = M_PI * std::pow(radius, 2);\n    std::cout << \"The area of the circle is: \" << area << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nint main() {\n    double radius, area;\n    std::cout << \"Enter the radius of the circle: \";\n    std::cin >> radius;\n    area = M_PI * std::pow(radius, 2);\n    std::cout << \"The area of the circle is: \" << area << std::endl;\n    return 0;}"
    },
    {
        "instruction": "In JavaScript, write a function that generates a random number within a given range.",
        "input": "1, 100",
        "response": "function randomInRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);}\n\nconst randomNumber = randomInRange(1, 100);\nconsole.log(randomNumber);",
        "output": "function randomInRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);}\n\nconst randomNumber = randomInRange(1, 100);\nconsole.log(randomNumber);"
    },
    {
        "instruction": "Write a Python script that reads a CSV file and prints the total number of rows and columns.",
        "input": "sample.csv (with a structure like: col1,col2,col3\\n1,2,3\\n4,5,6\\n7,8,9)",
        "response": "import csv\n\nwith open('sample.csv', 'r') as f:\n    reader = csv.reader(f)\n    row_count = 0\n    for row in reader:\n        col_count = len(row)\n        row_count += 1\n\nprint(f'Total rows: {row_count}')\nprint(f'Total columns: {col_count}')",
        "output": "import csv\n\nwith open('sample.csv', 'r') as f:\n    reader = csv.reader(f)\n    row_count = 0\n    for row in reader:\n        col_count = len(row)\n        row_count += 1\n\nprint(f'Total rows: {row_count}')\nprint(f'Total columns: {col_count}')"
    },
    {
        "instruction": "Implement a simple REST API endpoint in Node.js using Express that returns 'Hello, World!' on a GET request.",
        "input": "GET request to /hello",
        "response": "const express = require('express');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.get('/hello', (req, res) => {\n    res.send('Hello, World!');});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.get('/hello', (req, res) => {\n    res.send('Hello, World!');});\n\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers as input and calculates the average of its elements.",
        "input": "{4, 6, 8, 10, 12}",
        "response": "#include <iostream>\n#include <vector>\n\ndouble calculate_average(const std::vector<int>& nums) {\n    double sum = 0;\n    for (const int& num : nums) {\n        sum += num;\n    }\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {4, 6, 8, 10, 12};\n    double avg = calculate_average(numbers);\n    std::cout << \"Average: \" << avg << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\ndouble calculate_average(const std::vector<int>& nums) {\n    double sum = 0;\n    for (const int& num : nums) {\n        sum += num;\n    }\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {4, 6, 8, 10, 12};\n    double avg = calculate_average(numbers);\n    std::cout << \"Average: \" << avg << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a PHP function that takes a string and reverses its characters.",
        "input": "\"Hello, World!\"",
        "response": "<?php\n\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input = \"Hello, World!\";\n$reversed = reverse_string($input);\necho $reversed;\n\n?>",
        "output": "<?php\n\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input = \"Hello, World!\";\n$reversed = reverse_string($input);\necho $reversed;\n\n?>"
    },
    {
        "instruction": "How would you create a recursive factorial function in Haskell?",
        "input": "5",
        "response": "factorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n\nmain :: IO ()\nmain = do\n    let n = 5\n    putStrLn $ \"Factorial of \" ++ show n ++ \" is \" ++ show (factorial n)",
        "output": "factorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n\nmain :: IO ()\nmain = do\n    let n = 5\n    putStrLn $ \"Factorial of \" ++ show n ++ \" is \" ++ show (factorial n)"
    },
    {
        "instruction": "Design a SQL query to select all products with a price between 10 and 50 from a 'products' table.",
        "input": "products: id, name, price",
        "response": "SELECT * FROM products\nWHERE price BETWEEN 10 AND 50;",
        "output": "SELECT * FROM products\nWHERE price BETWEEN 10 AND 50;"
    },
    {
        "instruction": "Write a C program to determine whether a given number is a prime number or not.",
        "input": "17",
        "response": "#include <stdio.h>\n#include <stdbool.h>\n#include <math.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\n    return true;}\n\nint main() {\n    int number = 17;\n    printf(\"%d is%s prime\", number, is_prime(number) ? \"\" : \" not\");\n    return 0;}",
        "output": "#include <stdio.h>\n#include <stdbool.h>\n#include <math.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\n    return true;}\n\nint main() {\n    int number = 17;\n    printf(\"%d is%s prime\", number, is_prime(number) ? \"\" : \" not\");\n    return 0;}"
    },
    {
        "instruction": "Create a PHP function that replaces all spaces in a string with hyphens.",
        "input": "\"The quick brown fox jumps over the lazy dog\"",
        "response": "<?php\nfunction replace_spaces($str) {\n    return str_replace(' ', '-', $str);}\n\n$input_string = 'The quick brown fox jumps over the lazy dog';\n$result = replace_spaces($input_string);\necho $result;\n?>",
        "output": "<?php\nfunction replace_spaces($str) {\n    return str_replace(' ', '-', $str);}\n\n$input_string = 'The quick brown fox jumps over the lazy dog';\n$result = replace_spaces($input_string);\necho $result;\n?>"
    },
    {
        "instruction": "How can we write a SQL query to find all employees who have a salary greater than 50000 in a table named 'employees'?",
        "input": "",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "Implement a shell script that lists all files in the current directory, sorts them by size, and prints the output.",
        "input": "",
        "response": "#!/bin/bash\nls -S",
        "output": "#!/bin/bash\nls -S"
    },
    {
        "instruction": "Write a Python program that reads a CSV file and filters the rows based on a filter condition.",
        "input": "file_path = 'example.csv'\nfilter_condition = lambda row: int(row['age']) > 30",
        "response": "import csv\n\ndef filter_csv(file_path, filter_condition):\n    with open(file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        filtered_rows = [row for row in reader if filter_condition(row)]\n    return filtered_rows\n\nfile_path = 'example.csv'\nfilter_condition = lambda row: int(row['age']) > 30\nresult = filter_csv(file_path, filter_condition)\nprint(result)",
        "output": "import csv\n\ndef filter_csv(file_path, filter_condition):\n    with open(file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        filtered_rows = [row for row in reader if filter_condition(row)]\n    return filtered_rows\n\nfile_path = 'example.csv'\nfilter_condition = lambda row: int(row['age']) > 30\nresult = filter_csv(file_path, filter_condition)\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function that takes a string input and returns a reversed version of the string.",
        "input": "'Hello, World!'",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst input = 'Hello, World!';\nconst reversed = reverseString(input);\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst input = 'Hello, World!';\nconst reversed = reverseString(input);\nconsole.log(reversed);"
    },
    {
        "instruction": "Compose a C++ program with a function that receives an array of integers and its length, then calculates the average of the array values.",
        "input": "int arr[] = {5, 10, 15};\nint length = sizeof(arr)/sizeof(arr[0]);",
        "response": "#include <iostream>\n\nfloat calculate_average(int arr[], int length) {\n    float sum = 0;\n    for (int i = 0; i < length; ++i) {\n        sum += arr[i];\n    }\n    return sum / length;}\n\nint main() {\n    int arr[] = {5, 10, 15};\n    int length = sizeof(arr)/sizeof(arr[0]);\n    float average = calculate_average(arr, length);\n    std::cout << average << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nfloat calculate_average(int arr[], int length) {\n    float sum = 0;\n    for (int i = 0; i < length; ++i) {\n        sum += arr[i];\n    }\n    return sum / length;}\n\nint main() {\n    int arr[] = {5, 10, 15};\n    int length = sizeof(arr)/sizeof(arr[0]);\n    float average = calculate_average(arr, length);\n    std::cout << average << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you write a shell script that finds all the files in a given directory that have been modified in the last 7 days?",
        "input": "directory_path='/home/user/documents'",
        "response": "#!/bin/sh\n\ndirectory_path='/home/user/documents'\nfind \"$directory_path\" -type f -mtime -7 -exec ls -l {} \\;\n\n",
        "output": "#!/bin/sh\n\ndirectory_path='/home/user/documents'\nfind \"$directory_path\" -type f -mtime -7 -exec ls -l {} \\;\n\n"
    },
    {
        "instruction": "Write a C++ program that reads a file line by line and counts the number of occurrences of a given word.",
        "input": "file.txt, example",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string file_name = \"file.txt\";\n    std::string target_word = \"example\";\n    std::ifstream file_input(file_name);\n    int count = 0;\n\n    if (file_input.is_open()) {\n        std::string line;\n        while (std::getline(file_input, line)) {\n            size_t pos = 0;\n            while ((pos = line.find(target_word, pos)) != std::string::npos) {\n                count++;\n                pos += target_word.length();\n            }\n        }\n        file_input.close();\n    } else {\n        std::cout << \"Unable to open the file.\" << std::endl;\n    }\n\n    std::cout << \"Occurrences of the word '\" << target_word << \"': \" << count << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string file_name = \"file.txt\";\n    std::string target_word = \"example\";\n    std::ifstream file_input(file_name);\n    int count = 0;\n\n    if (file_input.is_open()) {\n        std::string line;\n        while (std::getline(file_input, line)) {\n            size_t pos = 0;\n            while ((pos = line.find(target_word, pos)) != std::string::npos) {\n                count++;\n                pos += target_word.length();\n            }\n        }\n        file_input.close();\n    } else {\n        std::cout << \"Unable to open the file.\" << std::endl;\n    }\n\n    std::cout << \"Occurrences of the word '\" << target_word << \"': \" << count << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "How can we use Python to create a RESTful API that returns the current time in JSON format?",
        "input": "",
        "response": "from flask import Flask, jsonify\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('/time', methods=['GET'])\ndef get_current_time():\n    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    return jsonify({'time': current_time})\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, jsonify\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('/time', methods=['GET'])\ndef get_current_time():\n    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    return jsonify({'time': current_time})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Fix the following JavaScript code snippet that iterates over an array of numbers and squares each element.",
        "input": "const numbers = [4, 9, 16];\nnumbers.ForEach(x => console.log(Math.pow(x, 2)));",
        "response": "const numbers = [4, 9, 16];\nnumbers.forEach(x => console.log(Math.pow(x, 2)));",
        "output": "const numbers = [4, 9, 16];\nnumbers.forEach(x => console.log(Math.pow(x, 2)));"
    },
    {
        "instruction": "Design a SQL query to retrieve the names and email addresses of customers who have made more than $500 in purchases.",
        "input": "Orders table: (order_id, customer_id, order_date, total_amount)\nCustomers table: (customer_id, first_name, last_name, email, signup_date)",
        "response": "SELECT c.first_name, c.last_name, c.email \nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY o.customer_id\nHAVING SUM(o.total_amount) > 500;",
        "output": "SELECT c.first_name, c.last_name, c.email \nFROM Customers c\nJOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY o.customer_id\nHAVING SUM(o.total_amount) > 500;"
    },
    {
        "instruction": "Implement a C++ function that calculates the area of a rectangle given its width and height.",
        "input": "10, 5",
        "response": "#include<iostream>\nusing namespace std;\n\ndouble rectangleArea(int width, int height) {\n    return static_cast<double>(width) * height;}\n\nint main() {\n    int width = 10;\n    int height = 5;\n    double area = rectangleArea(width, height);\n    cout << \"Area of the rectangle: \" << area << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\ndouble rectangleArea(int width, int height) {\n    return static_cast<double>(width) * height;}\n\nint main() {\n    int width = 10;\n    int height = 5;\n    double area = rectangleArea(width, height);\n    cout << \"Area of the rectangle: \" << area << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you create a Python script to read the content of a file line by line?",
        "input": "file.txt",
        "response": "with open('file.txt', 'r') as file:\n    for line in file:\n        print(line.strip())",
        "output": "with open('file.txt', 'r') as file:\n    for line in file:\n        print(line.strip())"
    },
    {
        "instruction": "In Java, write a function that concatenates two strings adding a space between them.",
        "input": "\"Hello\", \"World\"",
        "response": "public class StringConcatenation {\n    public static String concatenateWithSpace(String str1, String str2) {\n        return str1 + \" \" + str2;\n    }\n\n    public static void main(String[] args) {\n        String result = concatenateWithSpace(\"Hello\", \"World\");\n        System.out.println(result);\n    }}",
        "output": "public class StringConcatenation {\n    public static String concatenateWithSpace(String str1, String str2) {\n        return str1 + \" \" + str2;\n    }\n\n    public static void main(String[] args) {\n        String result = concatenateWithSpace(\"Hello\", \"World\");\n        System.out.println(result);\n    }}"
    },
    {
        "instruction": "Create a shell script that counts the number of files in a specific directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndirectory=\"/home/user/documents\"\nfile_count=$(ls -1 \"$directory\" | wc -l)\necho \"Number of files in $directory: $file_count\"",
        "output": "#!/bin/bash\n\ndirectory=\"/home/user/documents\"\nfile_count=$(ls -1 \"$directory\" | wc -l)\necho \"Number of files in $directory: $file_count\""
    },
    {
        "instruction": "Implement a C++ function that takes a vector of integers and removes all occurrences of a given element.",
        "input": "vector: {10, 11, 12, 11, 13, 11, 14}, target element: 11",
        "response": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nvoid remove_element(std::vector<int>& v, int element) {\n    v.erase(std::remove(v.begin(), v.end(), element), v.end());}\n\nint main() {\n    std::vector<int> numbers = {10, 11, 12, 11, 13, 11, 14};\n    remove_element(numbers, 11);\n    \n    for (const auto& num : numbers) {\n        std::cout << num << ' ';\n    }}",
        "output": "#include <vector>\n#include <algorithm>\n#include <iostream>\n\nvoid remove_element(std::vector<int>& v, int element) {\n    v.erase(std::remove(v.begin(), v.end(), element), v.end());}\n\nint main() {\n    std::vector<int> numbers = {10, 11, 12, 11, 13, 11, 14};\n    remove_element(numbers, 11);\n    \n    for (const auto& num : numbers) {\n        std::cout << num << ' ';\n    }}"
    },
    {
        "instruction": "Write a Python program that reads a CSV file and prints out the count of unique values in a specified column.",
        "input": "CSV filecontent: \"name,age\\nJohn,25\\nAlice,35\\nJohn,28\\nBob,32\\nAlice,35\", column: \"name\"",
        "response": "import csv\nfrom io import StringIO\nfrom collections import defaultdict\n\ndef count_unique_values(csv_content, column):\n    csv_reader = csv.DictReader(StringIO(csv_content))\n    counts = defaultdict(int)\n    for row in csv_reader:\n        counts[row[column]] += 1\n    return counts\n\ncsv_content = \"name,age\\nJohn,25\\nAlice,35\\nJohn,28\\nBob,32\\nAlice,35\"\ncolumn = \"name\"\ncounts = count_unique_values(csv_content, column)\nprint(counts)",
        "output": "import csv\nfrom io import StringIO\nfrom collections import defaultdict\n\ndef count_unique_values(csv_content, column):\n    csv_reader = csv.DictReader(StringIO(csv_content))\n    counts = defaultdict(int)\n    for row in csv_reader:\n        counts[row[column]] += 1\n    return counts\n\ncsv_content = \"name,age\\nJohn,25\\nAlice,35\\nJohn,28\\nBob,32\\nAlice,35\"\ncolumn = \"name\"\ncounts = count_unique_values(csv_content, column)\nprint(counts)"
    },
    {
        "instruction": "Create a shell script that takes a file path as a command line argument and outputs the number of lines in the file.",
        "input": "filecontent: \"Line 1\\nLine 2\\nLine 3\"",
        "response": "#!/bin/sh\n\nif [ ! -f \"$1\" ]; then\n  echo \"Error: File does not exist.\"\n  exit 1\nfi\n\nline_count=$(cat \"$1\" | wc -l)\necho \"Number of lines: $line_count\"",
        "output": "#!/bin/sh\n\nif [ ! -f \"$1\" ]; then\n  echo \"Error: File does not exist.\"\n  exit 1\nfi\n\nline_count=$(cat \"$1\" | wc -l)\necho \"Number of lines: $line_count\""
    },
    {
        "instruction": "How can I refactor this JavaScript code to remove callback hell and make it more readable using async/await and Promises?",
        "input": "func1(param1, (result1) => {\n    func2(param2, (result2) => {\n        func3(param3, (result3) => {\n            console.log(result3);\n        });\n    });});",
        "response": "async function wrapperFunction() {\n    const func1Promise = (param) => new Promise((resolve) => func1(param, resolve));\n    const func2Promise = (param) => new Promise((resolve) => func2(param, resolve));\n    const func3Promise = (param) => new Promise((resolve) => func3(param, resolve));\n    \n    const result1 = await func1Promise(param1);\n    const result2 = await func2Promise(param2);\n    const result3 = await func3Promise(param3);\n    console.log(result3);}\n\nwrapperFunction();",
        "output": "async function wrapperFunction() {\n    const func1Promise = (param) => new Promise((resolve) => func1(param, resolve));\n    const func2Promise = (param) => new Promise((resolve) => func2(param, resolve));\n    const func3Promise = (param) => new Promise((resolve) => func3(param, resolve));\n    \n    const result1 = await func1Promise(param1);\n    const result2 = await func2Promise(param2);\n    const result3 = await func3Promise(param3);\n    console.log(result3);}\n\nwrapperFunction();"
    },
    {
        "instruction": "Write a C++ function that takes an integer array and its size as input, and outputs the number of even elements in the array.",
        "input": "{10, 3, 7, 20, 15, 12}, 6",
        "response": "#include <iostream>\n\nint count_even_elements(int arr[], int size) {\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] % 2 == 0) {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    int arr[] = {10, 3, 7, 20, 15, 12};\n    int size = 6;\n    std::cout << count_even_elements(arr, size) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint count_even_elements(int arr[], int size) {\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] % 2 == 0) {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    int arr[] = {10, 3, 7, 20, 15, 12};\n    int size = 6;\n    std::cout << count_even_elements(arr, size) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a PHP function that takes a string input and returns the same string in reverse order.",
        "input": "\"Hello, PHP!\"",
        "response": "<?php\n\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input = 'Hello, PHP!';\n$result = reverse_string($input);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input = 'Hello, PHP!';\n$result = reverse_string($input);\necho $result;\n\n?>"
    },
    {
        "instruction": "How would you code a Bash script that iterates over all .txt files in a directory, and appends 'Processed' to the content of each file?",
        "input": "File1.txt: 'Content1'\nFile2.txt: 'Content2'",
        "response": "#!/bin/bash\n\nfor file in *.txt; do\n    echo 'Processed' >> \"$file\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt; do\n    echo 'Processed' >> \"$file\"\ndone"
    },
    {
        "instruction": "Construct a Python program that reads a CSV file with two columns 'Name' and 'Age', and prints the names and ages of people who are 18 years or older.",
        "input": "\"Name,Age\\nAlice,20\\nBob,16\\nEve,21\"",
        "response": "import csv\nfrom io import StringIO\n\ncsv_data = \"Name,Age\\nAlice,20\\nBob,16\\nEve,21\"\ncsv_file = StringIO(csv_data)\n\nreader = csv.DictReader(csv_file)\nfor row in reader:\n    if int(row['Age']) >= 18:\n        print(f\"{row['Name']} : {row['Age']}\")",
        "output": "import csv\nfrom io import StringIO\n\ncsv_data = \"Name,Age\\nAlice,20\\nBob,16\\nEve,21\"\ncsv_file = StringIO(csv_data)\n\nreader = csv.DictReader(csv_file)\nfor row in reader:\n    if int(row['Age']) >= 18:\n        print(f\"{row['Name']} : {row['Age']}\")"
    },
    {
        "instruction": "Write a Python function that parses a CSV file and calculates the average of the values in the second column.",
        "input": "data.csv containing rows like: 'A,3\\nB,5\\nC,7'",
        "response": "import csv\n\ndef calculate_average(file_path):\n    total = 0\n    count = 0\n    with open(file_path, 'r') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            total += int(row[1])\n            count += 1\n    return total / count if count > 0 else None\n\nfile_path = 'data.csv'\naverage = calculate_average(file_path)\nprint(average)",
        "output": "import csv\n\ndef calculate_average(file_path):\n    total = 0\n    count = 0\n    with open(file_path, 'r') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            total += int(row[1])\n            count += 1\n    return total / count if count > 0 else None\n\nfile_path = 'data.csv'\naverage = calculate_average(file_path)\nprint(average)"
    },
    {
        "instruction": "Implement a JavaScript function that capitalizes the first letter of each word in a string.",
        "input": "'hello world'",
        "response": "function capitalizeWords(str) {\n    return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');}\n\nconst input = 'hello world';\nconst result = capitalizeWords(input);\nconsole.log(result);",
        "output": "function capitalizeWords(str) {\n    return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');}\n\nconst input = 'hello world';\nconst result = capitalizeWords(input);\nconsole.log(result);"
    },
    {
        "instruction": "How would you create a C++ program that reads integers from a file and prints their sum?",
        "input": "file.txt with content: '1 2 3'",
        "response": "#include <iostream>\n#include <fstream>\n#include <sstream>\n\nint main() {\n    std::ifstream infile('file.txt');\n    int sum = 0, num;\n    while (infile >> num) {\n        sum += num;\n    }\n    infile.close();\n    std::cout << 'Sum: ' << sum << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <sstream>\n\nint main() {\n    std::ifstream infile('file.txt');\n    int sum = 0, num;\n    while (infile >> num) {\n        sum += num;\n    }\n    infile.close();\n    std::cout << 'Sum: ' << sum << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a Bash script that iterates through a directory and counts the number of files with the '.txt' extension.",
        "input": "A directory containing files: 'file1.txt, image.jpg, document.docx, notes.txt'",
        "response": "#!/bin/bash\n\ndir_path='/path/to/directory'\ncount=0\n\nfor filename in '$dir_path'/*; do\n    if [[ '$filename' == *.txt ]]; then\n        count=$((count + 1))\n    fi\ndone\n\necho 'Number of .txt files:' $count",
        "output": "#!/bin/bash\n\ndir_path='/path/to/directory'\ncount=0\n\nfor filename in '$dir_path'/*; do\n    if [[ '$filename' == *.txt ]]; then\n        count=$((count + 1))\n    fi\ndone\n\necho 'Number of .txt files:' $count"
    },
    {
        "instruction": "Write a Python function that retrieves the current temperature in Celsius for a given city using the OpenWeatherMap API.",
        "input": "api_key: 'your_api_key', city: 'New York'",
        "response": "import requests\n\ndef get_temperature(api_key, city):\n    base_url = 'http://api.openweathermap.org/data/2.5/weather?'\n    complete_url = f'{base_url}q={city}&appid={api_key}&units=metric'\n    response = requests.get(complete_url)\n    data = response.json()\n\n    if data['cod'] != '404':\n        temperature = data['main']['temp']\n        return temperature\n    else:\n        return 'City not found'\n\napi_key = 'your_api_key'\ncity = 'New York'\nresult = get_temperature(api_key, city)\nprint(result)",
        "output": "import requests\n\ndef get_temperature(api_key, city):\n    base_url = 'http://api.openweathermap.org/data/2.5/weather?'\n    complete_url = f'{base_url}q={city}&appid={api_key}&units=metric'\n    response = requests.get(complete_url)\n    data = response.json()\n\n    if data['cod'] != '404':\n        temperature = data['main']['temp']\n        return temperature\n    else:\n        return 'City not found'\n\napi_key = 'your_api_key'\ncity = 'New York'\nresult = get_temperature(api_key, city)\nprint(result)"
    },
    {
        "instruction": "Using Java, create a program that calculates the factorial of a given number.",
        "input": "number: 5",
        "response": "public class Factorial {\n    public static int factorial(int number) {\n        if (number == 0) {\n            return 1;\n        } else {\n            return number * factorial(number - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int number = 5;\n        int result = factorial(number);\n        System.out.println('Factorial of ' + number + ' is ' + result);\n    }}",
        "output": "public class Factorial {\n    public static int factorial(int number) {\n        if (number == 0) {\n            return 1;\n        } else {\n            return number * factorial(number - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int number = 5;\n        int result = factorial(number);\n        System.out.println('Factorial of ' + number + ' is ' + result);\n    }}"
    },
    {
        "instruction": "Create a shell script that takes a directory path as an argument and lists all files with '.txt' extension.",
        "input": "directory_path: '/home/user/documents'",
        "response": "#!/bin/bash\n\ndirectory_path=$1\n\nfind $directory_path -type f -name '*.txt'",
        "output": "#!/bin/bash\n\ndirectory_path=$1\n\nfind $directory_path -type f -name '*.txt'"
    },
    {
        "instruction": "Design a basic C++ class called 'Person' with private attributes 'name' and 'age', and include public functions for setting and getting these values.",
        "input": "",
        "response": "#include <string>\n\nclass Person {\nprivate:\n    std::string name;\n    int age;\n\npublic:\n    void setName(const std::string& newName) {\n        name = newName;\n    }\n\n    void setAge(int newAge) {\n        age = newAge;\n    }\n\n    std::string getName() const {\n        return name;\n    }\n\n    int getAge() const {\n        return age;\n    }};",
        "output": "#include <string>\n\nclass Person {\nprivate:\n    std::string name;\n    int age;\n\npublic:\n    void setName(const std::string& newName) {\n        name = newName;\n    }\n\n    void setAge(int newAge) {\n        age = newAge;\n    }\n\n    std::string getName() const {\n        return name;\n    }\n\n    int getAge() const {\n        return age;\n    }};"
    },
    {
        "instruction": "Implement a C++ function to compute the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number);\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number);\n    return 0;}"
    },
    {
        "instruction": "How would you write a Python program that reads a file line by line and counts the number of lines?",
        "input": "example.txt",
        "response": "def count_lines(file_name):\n    count = 0\n    with open(file_name, 'r') as file:\n        for line in file:\n            count += 1\n    return count\n\nlines_count = count_lines('example.txt')\nprint('Total number of lines: ', lines_count)",
        "output": "def count_lines(file_name):\n    count = 0\n    with open(file_name, 'r') as file:\n        for line in file:\n            count += 1\n    return count\n\nlines_count = count_lines('example.txt')\nprint('Total number of lines: ', lines_count)"
    },
    {
        "instruction": "Construct a shell script to remove duplicate lines from a text file and output a new file with unique lines.",
        "input": "source.txt",
        "response": "#!/bin/bash\n\ninput_file='source.txt'\noutput_file='unique_lines.txt'\n\nsort ${input_file} | uniq > ${output_file}\necho \"Unique lines written to ${output_file}\"",
        "output": "#!/bin/bash\n\ninput_file='source.txt'\noutput_file='unique_lines.txt'\n\nsort ${input_file} | uniq > ${output_file}\necho \"Unique lines written to ${output_file}\""
    },
    {
        "instruction": "Develop a JavaScript function that, given a string, returns the longest word in the string.",
        "input": "The quick brown fox jumped over the lazy dog",
        "response": "function findLongestWord(str) {\n    let words = str.split(' ');\n    let longestWord = '';\n\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nlet input = 'The quick brown fox jumped over the lazy dog';\nlet longestWord = findLongestWord(input);\nconsole.log('Longest word:', longestWord);",
        "output": "function findLongestWord(str) {\n    let words = str.split(' ');\n    let longestWord = '';\n\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nlet input = 'The quick brown fox jumped over the lazy dog';\nlet longestWord = findLongestWord(input);\nconsole.log('Longest word:', longestWord);"
    },
    {
        "instruction": "Implement a C++ function to calculate the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\nint factorial(int n);\n\nint main() {\n    int n = 6;\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}",
        "output": "#include<iostream>\nusing namespace std;\nint factorial(int n);\n\nint main() {\n    int n = 6;\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}"
    },
    {
        "instruction": "In C#, design a class called 'Person' with two properties: 'Name' and 'Age'.",
        "input": "John Doe, 25",
        "response": "public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Person person = new Person { Name = \"John Doe\", Age = 25 };\n        Console.WriteLine(\"Name: \" + person.Name + \", Age: \" + person.Age);\n    }}",
        "output": "public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Person person = new Person { Name = \"John Doe\", Age = 25 };\n        Console.WriteLine(\"Name: \" + person.Name + \", Age: \" + person.Age);\n    }}"
    },
    {
        "instruction": "How do I implement a shell script that takes a user input and echoes it back?",
        "input": "Hello!",
        "response": "#!/bin/bash\n\necho \"Enter something:\"\nread user_input\necho \"You entered: $user_input\"",
        "output": "#!/bin/bash\n\necho \"Enter something:\"\nread user_input\necho \"You entered: $user_input\""
    },
    {
        "instruction": "Develop a Python program that reads a user-provided CSV file and prints the average value of a specific column.",
        "input": "sample.csv \ndata: \n1, 4, 7\n2, 5, 8\n3, 6, 9\ncolumn: 1\n",
        "response": "import csv\n\ndef column_average(filename, column_index):\n    with open(filename, 'r') as file:\n        reader = csv.reader(file)\n        column_sum = 0\n        row_count = 0\n        for row in reader:\n            column_sum += int(row[column_index])\n            row_count += 1\n    return column_sum / row_count\n\nfilename = 'sample.csv'\ncolumn_index = 1\naverage = column_average(filename, column_index)\nprint(f'Average of column {column_index} is {average}')",
        "output": "import csv\n\ndef column_average(filename, column_index):\n    with open(filename, 'r') as file:\n        reader = csv.reader(file)\n        column_sum = 0\n        row_count = 0\n        for row in reader:\n            column_sum += int(row[column_index])\n            row_count += 1\n    return column_sum / row_count\n\nfilename = 'sample.csv'\ncolumn_index = 1\naverage = column_average(filename, column_index)\nprint(f'Average of column {column_index} is {average}')"
    },
    {
        "instruction": "Implement a C++ function that takes a vector of integers and returns a vector of the squares of those integers.",
        "input": "vector<int> nums = {1, 2, 3, 4, 5};",
        "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> square_vector(const vector<int>& nums) {\n    vector<int> result(nums.size());\n    for (size_t i = 0; i < nums.size(); i++) {\n        result[i] = nums[i] * nums[i];\n    }\n    return result;}\n\nint main() {\n    vector<int> nums = {1, 2, 3, 4, 5};\n    vector<int> squared = square_vector(nums);\n\n    for (int num : squared) {\n        cout << num << ' ';\n    }}",
        "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> square_vector(const vector<int>& nums) {\n    vector<int> result(nums.size());\n    for (size_t i = 0; i < nums.size(); i++) {\n        result[i] = nums[i] * nums[i];\n    }\n    return result;}\n\nint main() {\n    vector<int> nums = {1, 2, 3, 4, 5};\n    vector<int> squared = square_vector(nums);\n\n    for (int num : squared) {\n        cout << num << ' ';\n    }}"
    },
    {
        "instruction": "Create a PHP function that takes a string as input and returns the number of vowels in the string.",
        "input": "'Diversity in language models is important.'",
        "response": "<?php\n\nfunction count_vowels($str) {\n    $vowels = 'aeiouAEIOU';\n    $count = 0;\n    \n    for ($i = 0; $i < strlen($str); $i++) {\n        if (strpos($vowels, $str[$i]) !== false) {\n            $count++;\n        }\n    }\n    \n    return $count;}\n\n$input = 'Diversity in language models is important.';\n$result = count_vowels($input);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction count_vowels($str) {\n    $vowels = 'aeiouAEIOU';\n    $count = 0;\n    \n    for ($i = 0; $i < strlen($str); $i++) {\n        if (strpos($vowels, $str[$i]) !== false) {\n            $count++;\n        }\n    }\n    \n    return $count;}\n\n$input = 'Diversity in language models is important.';\n$result = count_vowels($input);\necho $result;\n\n?>"
    },
    {
        "instruction": "Write an R function that takes a numeric vector, normalizes its values, and returns the normalized vector.",
        "input": "c(1, 5, 3, 7, 9)",
        "response": "normalize_vector <- function(v) {\n    min_val <- min(v)\n    max_val <- max(v)\n    return ((v - min_val) / (max_val - min_val))}\n\ninput_vector <- c(1, 5, 3, 7, 9)\nnormalized_vector <- normalize_vector(input_vector)\nprint(normalized_vector)",
        "output": "normalize_vector <- function(v) {\n    min_val <- min(v)\n    max_val <- max(v)\n    return ((v - min_val) / (max_val - min_val))}\n\ninput_vector <- c(1, 5, 3, 7, 9)\nnormalized_vector <- normalize_vector(input_vector)\nprint(normalized_vector)"
    },
    {
        "instruction": "Given an API URL, write a Python program that fetches JSON data from the API, parses the data, and prints a specific value from the response.",
        "input": "URL = 'https://jsonplaceholder.typicode.com/todos/1'",
        "response": "import requests\nimport json\n\nURL = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(URL)\n\nif response.status_code == 200:\n    data = json.loads(response.text)\n    print(data['title'])\nelse:\n    print('Error: Unable to fetch data.')",
        "output": "import requests\nimport json\n\nURL = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(URL)\n\nif response.status_code == 200:\n    data = json.loads(response.text)\n    print(data['title'])\nelse:\n    print('Error: Unable to fetch data.')"
    },
    {
        "instruction": "Design a C++ function to generate the first n Fibonacci numbers, provided n as input.",
        "input": "10",
        "response": "#include <iostream>\n#include <vector>\n\nstd::vector<int> generate_fibonacci(int n) {\n    std::vector<int> fib_series(n);\n    fib_series[0] = 0;\n    fib_series[1] = 1;\n\n    for (int i = 2; i < n; i++) {\n        fib_series[i] = fib_series[i - 1] + fib_series[i - 2];\n    }\n\n    return fib_series;}\n\nint main() {\n    int n = 10;\n    std::vector<int> fib_series = generate_fibonacci(n);\n\n    for (int num : fib_series) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nstd::vector<int> generate_fibonacci(int n) {\n    std::vector<int> fib_series(n);\n    fib_series[0] = 0;\n    fib_series[1] = 1;\n\n    for (int i = 2; i < n; i++) {\n        fib_series[i] = fib_series[i - 1] + fib_series[i - 2];\n    }\n\n    return fib_series;}\n\nint main() {\n    int n = 10;\n    std::vector<int> fib_series = generate_fibonacci(n);\n\n    for (int num : fib_series) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "How would you write a function in PHP to calculate the factorial of a given non-negative integer?",
        "input": "5",
        "response": "<?php\nfunction factorial(int $n): int {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$result = factorial(5);\necho $result;\n?>",
        "output": "<?php\nfunction factorial(int $n): int {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$result = factorial(5);\necho $result;\n?>"
    },
    {
        "instruction": "Implement a simple HTTP server in Node.js that returns 'Welcome to my server!' when accessed.",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Welcome to my server!');});\n\nconst port = 3000;\n\nserver.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Welcome to my server!');});\n\nconst port = 3000;\n\nserver.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);});"
    },
    {
        "instruction": "Generate a Bash script that accepts a file path as an argument and prints the number of words within the file.",
        "input": "/path/to/your/textfile.txt",
        "response": "#!/bin/bash\n\nfilepath=\"$1\"\n\nif [ -f \"${filepath}\" ]; then\n    word_count=$(cat ${filepath} | wc -w)\n    echo \"The number of words in the file is: ${word_count}\"\nelse\n    echo \"File not found.\"\nfi",
        "output": "#!/bin/bash\n\nfilepath=\"$1\"\n\nif [ -f \"${filepath}\" ]; then\n    word_count=$(cat ${filepath} | wc -w)\n    echo \"The number of words in the file is: ${word_count}\"\nelse\n    echo \"File not found.\"\nfi"
    },
    {
        "instruction": "Implement a Python script that reads a text file line by line and prints the lines that contain a specific keyword.",
        "input": "file_path: 'example.txt', keyword: 'apple'",
        "response": "def read_file_and_print_lines(file_path, keyword):\n    with open(file_path, 'r') as file:\n        for line in file:\n            if keyword in line:\n                print(line)\n\nread_file_and_print_lines('example.txt', 'apple')",
        "output": "def read_file_and_print_lines(file_path, keyword):\n    with open(file_path, 'r') as file:\n        for line in file:\n            if keyword in line:\n                print(line)\n\nread_file_and_print_lines('example.txt', 'apple')"
    },
    {
        "instruction": "How can I create a JavaScript function that accepts a callback function, and applies it to all elements in a given array?",
        "input": "array: [1, 2, 3], callback: (x) => x * 2",
        "response": "function processArray(arr, callback) {\n    const result = [];\n    for (const element of arr) {\n        result.push(callback(element));\n    }\n    return result;}\n\nconst output = processArray([1, 2, 3], (x) => x * 2);\nconsole.log(output);",
        "output": "function processArray(arr, callback) {\n    const result = [];\n    for (const element of arr) {\n        result.push(callback(element));\n    }\n    return result;}\n\nconst output = processArray([1, 2, 3], (x) => x * 2);\nconsole.log(output);"
    },
    {
        "instruction": "Write a C# method that takes a dictionary of key-value pairs and a list of keys, and returns a new dictionary with only those key-value pairs whose keys are in the list.",
        "input": "dictionary: {'a': 1, 'b': 2, 'c': 3}, keys_list: ['a', 'c']",
        "response": "using System.Collections.Generic;\n\npublic static Dictionary<string, int> FilterDictionary(Dictionary<string, int> dict, List<string> keys)\n{\n    var result = new Dictionary<string, int>();\n    foreach (string key in keys)\n    {\n        if (dict.ContainsKey(key))\n        {\n            result.Add(key, dict[key]);\n        }\n    }\n    return result;}\n\nvar dictionary = new Dictionary<string, int> { { 'a', 1 }, { 'b', 2 }, { 'c', 3 } };\nvar keys_list = new List<string> { 'a', 'c' };\nvar output = FilterDictionary(dictionary, keys_list);\nConsole.WriteLine(output);",
        "output": "using System.Collections.Generic;\n\npublic static Dictionary<string, int> FilterDictionary(Dictionary<string, int> dict, List<string> keys)\n{\n    var result = new Dictionary<string, int>();\n    foreach (string key in keys)\n    {\n        if (dict.ContainsKey(key))\n        {\n            result.Add(key, dict[key]);\n        }\n    }\n    return result;}\n\nvar dictionary = new Dictionary<string, int> { { 'a', 1 }, { 'b', 2 }, { 'c', 3 } };\nvar keys_list = new List<string> { 'a', 'c' };\nvar output = FilterDictionary(dictionary, keys_list);\nConsole.WriteLine(output);"
    },
    {
        "instruction": "Can you please provide a SQL query that retrieves all records from a table called 'products' where the 'price' column is greater than 1000 and orders the results by the 'name' column in ascending order?",
        "input": "table_name: 'products', column_name: 'price', threshold: 1000, order_by: 'name'",
        "response": "SELECT * FROM products WHERE price > 1000 ORDER BY name ASC;",
        "output": "SELECT * FROM products WHERE price > 1000 ORDER BY name ASC;"
    },
    {
        "instruction": "Write a C function that calculates the length of a given string.",
        "input": "\"OpenAI\"",
        "response": "#include <stdio.h>\n\nint string_length(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;}\n\nint main() {\n    const char *test_string = \"OpenAI\";\n    int length = string_length(test_string);\n    printf(\"Length of the string is: %d\\n\", length);\n    return 0;}",
        "output": "#include <stdio.h>\n\nint string_length(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;}\n\nint main() {\n    const char *test_string = \"OpenAI\";\n    int length = string_length(test_string);\n    printf(\"Length of the string is: %d\\n\", length);\n    return 0;}"
    },
    {
        "instruction": "How would you implement a Python function to find the first duplicate character in a given string?",
        "input": "\"GPT-3 Model\"",
        "response": "def first_duplicate_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None\n\ninput_str = \"GPT-3 Model\"\nresult = first_duplicate_char(input_str)\nprint(\"First duplicate character:\", result)",
        "output": "def first_duplicate_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None\n\ninput_str = \"GPT-3 Model\"\nresult = first_duplicate_char(input_str)\nprint(\"First duplicate character:\", result)"
    },
    {
        "instruction": "Develop a JavaScript function that accepts an integer as input and checks whether the provided number is even or odd.",
        "input": "42",
        "response": "function checkEvenOrOdd(num) {\n    if (num % 2 === 0) {\n        return 'even';\n    } else {\n        return 'odd';\n    }}\n\nconst inputNumber = 42;\nconst result = checkEvenOrOdd(inputNumber);\nconsole.log(`The number ${inputNumber} is ${result}.`);",
        "output": "function checkEvenOrOdd(num) {\n    if (num % 2 === 0) {\n        return 'even';\n    } else {\n        return 'odd';\n    }}\n\nconst inputNumber = 42;\nconst result = checkEvenOrOdd(inputNumber);\nconsole.log(`The number ${inputNumber} is ${result}.`);"
    },
    {
        "instruction": "Create a PHP function that accepts a list of words and returns the longest word in the list.",
        "input": "\"[\"apple\", \"banana\", \"strawberry\", \"blueberry\"]\"",
        "response": "<?php\n\nfunction find_longest_word($words) {\n    $longest_word = '';\n    foreach ($words as $word) {\n        if (strlen($word) > strlen($longest_word)) {\n            $longest_word = $word;\n        }\n    }\n    return $longest_word;}\n\n$words = array('apple', 'banana', 'strawberry', 'blueberry');\n$longest_word = find_longest_word($words);\necho \"The longest word is: \" . $longest_word . \"\\n\";\n\n?>",
        "output": "<?php\n\nfunction find_longest_word($words) {\n    $longest_word = '';\n    foreach ($words as $word) {\n        if (strlen($word) > strlen($longest_word)) {\n            $longest_word = $word;\n        }\n    }\n    return $longest_word;}\n\n$words = array('apple', 'banana', 'strawberry', 'blueberry');\n$longest_word = find_longest_word($words);\necho \"The longest word is: \" . $longest_word . \"\\n\";\n\n?>"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers and returns the average value in the vector as a floating-point number.",
        "input": "{4, 6, 3, 9, 2}",
        "response": "#include <iostream>\n#include <vector>\n\nfloat find_average(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (const int& num : numbers) {\n        sum += num;\n    }\n    return static_cast<float>(sum) / numbers.size();}\n\nint main() {\n    std::vector<int> nums = {4, 6, 3, 9, 2};\n    float average = find_average(nums);\n    std::cout << \"Average: \" << average << std::endl;}",
        "output": "#include <iostream>\n#include <vector>\n\nfloat find_average(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (const int& num : numbers) {\n        sum += num;\n    }\n    return static_cast<float>(sum) / numbers.size();}\n\nint main() {\n    std::vector<int> nums = {4, 6, 3, 9, 2};\n    float average = find_average(nums);\n    std::cout << \"Average: \" << average << std::endl;}"
    },
    {
        "instruction": "How would you implement a simple shell script to calculate the sum of the first 'n' even numbers provided as a command-line argument?",
        "input": "5",
        "response": "#!/bin/bash\n\nn=$1\nsum=0\ncurrent_even=2\n\nfor ((i = 1; i <= n; i++)); do\n    sum=$((sum + current_even))\n    current_even=$((current_even + 2))\ndone\n\necho \"The sum of the first $n even numbers is: $sum\"",
        "output": "#!/bin/bash\n\nn=$1\nsum=0\ncurrent_even=2\n\nfor ((i = 1; i <= n; i++)); do\n    sum=$((sum + current_even))\n    current_even=$((current_even + 2))\ndone\n\necho \"The sum of the first $n even numbers is: $sum\""
    },
    {
        "instruction": "In Java, write a class that models a bank account with methods to deposit, withdraw, and display the account balance.",
        "input": "{\"deposit\": 500, \"withdraw\": 200}",
        "response": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(){\n        balance = 0;\n    }\n\n    public void deposit(double amount){\n        balance += amount;\n    }\n\n    public void withdraw(double amount){\n        if(amount <= balance){\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient balance\");\n        }\n    }\n\n    public void displayBalance(){\n        System.out.println(\"Balance: \" + balance);\n    }\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount();\n        account.deposit(500);\n        account.withdraw(200);\n        account.displayBalance();\n    }}",
        "output": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(){\n        balance = 0;\n    }\n\n    public void deposit(double amount){\n        balance += amount;\n    }\n\n    public void withdraw(double amount){\n        if(amount <= balance){\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient balance\");\n        }\n    }\n\n    public void displayBalance(){\n        System.out.println(\"Balance: \" + balance);\n    }\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount();\n        account.deposit(500);\n        account.withdraw(200);\n        account.displayBalance();\n    }}"
    },
    {
        "instruction": "Design a Python class that represents a circle, provide a method to calculate the area, and another to calculate the perimeter. Use the provided radius.",
        "input": "5",
        "response": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius ** 2\n\n    def perimeter(self):\n        return 2 * math.pi * self.radius\n\ncircle = Circle(5)\nprint('Area:', circle.area())\nprint('Perimeter:', circle.perimeter())",
        "output": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius ** 2\n\n    def perimeter(self):\n        return 2 * math.pi * self.radius\n\ncircle = Circle(5)\nprint('Area:', circle.area())\nprint('Perimeter:', circle.perimeter())"
    },
    {
        "instruction": "Implement a C++ program that finds the factorial of a given positive integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n  if (n == 0) return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  unsigned int number = 6;\n  std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n  if (n == 0) return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  unsigned int number = 6;\n  std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Can you write a function in Python that replaces all vowels in a string with a given character?",
        "input": "\"hello world\", \"-\"",
        "response": "def replace_vowels(s, replacement):\n  vowels = 'aeiouAEIOU'\n  result = ''\n  for char in s:\n    if char in vowels:\n      result += replacement\n    else:\n      result += char\n  return result\n\ninput_string = \"hello world\"\nreplacement_char = \"-\"\nresult = replace_vowels(input_string, replacement_char)\nprint(result)",
        "output": "def replace_vowels(s, replacement):\n  vowels = 'aeiouAEIOU'\n  result = ''\n  for char in s:\n    if char in vowels:\n      result += replacement\n    else:\n      result += char\n  return result\n\ninput_string = \"hello world\"\nreplacement_char = \"-\"\nresult = replace_vowels(input_string, replacement_char)\nprint(result)"
    },
    {
        "instruction": "Write a JavaScript function that, given an object with keys representing fruit names and values representing their prices, finds the cheapest fruit.",
        "input": "{\"apple\": 1.2, \"banana\": 0.5, \"orange\": 0.9}",
        "response": "function getCheapestFruit(prices) {\n  let minPrice = Infinity;\n  let cheapestFruit = '';\n  for (const [fruit, price] of Object.entries(prices)) {\n    if (price < minPrice) {\n      minPrice = price;\n      cheapestFruit = fruit;\n    }\n  }\n  return cheapestFruit;\n}\n\nconst fruitPrices = {\"apple\": 1.2, \"banana\": 0.5, \"orange\": 0.9};\nconst result = getCheapestFruit(fruitPrices);\nconsole.log(result);",
        "output": "function getCheapestFruit(prices) {\n  let minPrice = Infinity;\n  let cheapestFruit = '';\n  for (const [fruit, price] of Object.entries(prices)) {\n    if (price < minPrice) {\n      minPrice = price;\n      cheapestFruit = fruit;\n    }\n  }\n  return cheapestFruit;\n}\n\nconst fruitPrices = {\"apple\": 1.2, \"banana\": 0.5, \"orange\": 0.9};\nconst result = getCheapestFruit(fruitPrices);\nconsole.log(result);"
    },
    {
        "instruction": "Can you create a shell script that creates a new directory, then creates a file inside the directory, writing the current date and time to the file?",
        "input": "directory_name: \"DateInfo\", file_name: \"date_and_time.txt\"",
        "response": "#!/bin/bash\n\ndir_name=\"DateInfo\"\nfile_name=\"date_and_time.txt\"\n\nmkdir \"$dir_name\"\ncurrent_date_time=$(date)\necho \"$current_date_time\" > \"${dir_name}/${file_name}\"",
        "output": "#!/bin/bash\n\ndir_name=\"DateInfo\"\nfile_name=\"date_and_time.txt\"\n\nmkdir \"$dir_name\"\ncurrent_date_time=$(date)\necho \"$current_date_time\" > \"${dir_name}/${file_name}\""
    },
    {
        "instruction": "Implement a C++ program that prompts the user for their name and greets them with a personalized message.",
        "input": "Lucas",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n    std::cout << \"Hello, \" << name << \"! Nice to meet you!\" << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n    std::cout << \"Hello, \" << name << \"! Nice to meet you!\" << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a JavaScript function that filters out odd numbers from an array of integers?",
        "input": "[10, 15, 2, 8, 33, 40]",
        "response": "function filterOddNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst result = filterOddNumbers([10, 15, 2, 8, 33, 40]);\nconsole.log(result);",
        "output": "function filterOddNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);}\n\nconst result = filterOddNumbers([10, 15, 2, 8, 33, 40]);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Bash script that takes a string as a command line argument and reverses its characters.",
        "input": "HelloWorld",
        "response": "#!/bin/bash\n\ninput_string=$1\nreversed_string=\"\"\n\nfor (( i=${#input_string}-1; i>=0; i-- )); do\n    reversed_string+=\"${input_string:$i:1}\"\ndone\n\necho \"$reversed_string\"",
        "output": "#!/bin/bash\n\ninput_string=$1\nreversed_string=\"\"\n\nfor (( i=${#input_string}-1; i>=0; i-- )); do\n    reversed_string+=\"${input_string:$i:1}\"\ndone\n\necho \"$reversed_string\""
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a Python script to download a file from a given URL and save it to a specified location?",
        "input": "https://www.example.com/file.txt, /path/to/save/file.txt",
        "response": "import requests\n\nurl = 'https://www.example.com/file.txt'\nlocal_path = '/path/to/save/file.txt'\n\nresponse = requests.get(url)\n\nwith open(local_path, 'wb') as file:\n    file.write(response.content)",
        "output": "import requests\n\nurl = 'https://www.example.com/file.txt'\nlocal_path = '/path/to/save/file.txt'\n\nresponse = requests.get(url)\n\nwith open(local_path, 'wb') as file:\n    file.write(response.content)"
    },
    {
        "instruction": "Construct a Shell script that compares two directories and lists the differences in their file content.",
        "input": "/path/to/directory1, /path/to/directory2",
        "response": "#!/bin/bash\ndir1=\"/path/to/directory1\"\ndir2=\"/path/to/directory2\"\n\ndiff -qr \"$dir1\" \"$dir2\"",
        "output": "#!/bin/bash\ndir1=\"/path/to/directory1\"\ndir2=\"/path/to/directory2\"\n\ndiff -qr \"$dir1\" \"$dir2\""
    },
    {
        "instruction": "Create a JavaScript code snippet to calculate the total price of items in a shopping cart, considering the quantity of each item and its price.",
        "input": "[{\"item\": \"apple\", \"quantity\": 4, \"price\": 0.5}, {\"item\": \"orange\", \"quantity\": 3, \"price\": 0.75}]",
        "response": "const shoppingCart = [\n    { item: \"apple\", quantity: 4, price: 0.5 },\n    { item: \"orange\", quantity: 3, price: 0.75 }\n];\n\nfunction totalPrice(cart) {\n    let total = 0;\n    for (const item of cart) {\n        total += item.quantity * item.price;\n    }\n    return total;\n}\n\nconsole.log(totalPrice(shoppingCart));",
        "output": "const shoppingCart = [\n    { item: \"apple\", quantity: 4, price: 0.5 },\n    { item: \"orange\", quantity: 3, price: 0.75 }\n];\n\nfunction totalPrice(cart) {\n    let total = 0;\n    for (const item of cart) {\n        total += item.quantity * item.price;\n    }\n    return total;\n}\n\nconsole.log(totalPrice(shoppingCart));"
    },
    {
        "instruction": "Implement a C++ function which accepts a string and calculates the frequency of each character, then saves them into a map.",
        "input": "apple",
        "response": "#include <iostream>\n#include <string>\n#include <map>\n\nstd::map<char, int> calculate_frequency(const std::string &input) {\n    std::map<char, int> frequency_map;\n    for (const char &c : input) {\n        frequency_map[c]++;\n    }\n    return frequency_map;}\n\nint main() {\n    std::string input = \"apple\";\n    std::map<char, int> frequency = calculate_frequency(input);\n    for (const auto &pair : frequency) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }}",
        "output": "#include <iostream>\n#include <string>\n#include <map>\n\nstd::map<char, int> calculate_frequency(const std::string &input) {\n    std::map<char, int> frequency_map;\n    for (const char &c : input) {\n        frequency_map[c]++;\n    }\n    return frequency_map;}\n\nint main() {\n    std::string input = \"apple\";\n    std::map<char, int> frequency = calculate_frequency(input);\n    for (const auto &pair : frequency) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }}"
    },
    {
        "instruction": "How would you design a Python program that reads a CSV file, filters out specific rows based on a condition, and writes a new CSV file with the filtered rows?",
        "input": "Input CSV file: movie_data.csv\r\nFilter condition: Year of release >= 2000\r\nOutput CSV file: movies_filtered.csv",
        "response": "import csv\n\ndef filter_rows(input_file, output_file):\n    with open(input_file, 'r') as f_in, open(output_file, 'w') as f_out:\n        csv_reader = csv.DictReader(f_in)\n        fieldnames = csv_reader.fieldnames\n        csv_writer = csv.DictWriter(f_out, fieldnames=fieldnames)\n        csv_writer.writeheader()\n\n        for row in csv_reader:\n            year = int(row.get('Year', 0))\n            if year >= 2000:\n                csv_writer.writerow(row)\n\ninput_csv = 'movie_data.csv'\noutput_csv = 'movies_filtered.csv'\nfilter_rows(input_csv, output_csv)",
        "output": "import csv\n\ndef filter_rows(input_file, output_file):\n    with open(input_file, 'r') as f_in, open(output_file, 'w') as f_out:\n        csv_reader = csv.DictReader(f_in)\n        fieldnames = csv_reader.fieldnames\n        csv_writer = csv.DictWriter(f_out, fieldnames=fieldnames)\n        csv_writer.writeheader()\n\n        for row in csv_reader:\n            year = int(row.get('Year', 0))\n            if year >= 2000:\n                csv_writer.writerow(row)\n\ninput_csv = 'movie_data.csv'\noutput_csv = 'movies_filtered.csv'\nfilter_rows(input_csv, output_csv)"
    },
    {
        "instruction": "Develop a JavaScript function that reverses a given integer.",
        "input": "12345",
        "response": "function reverseInteger(number) {\n    const reversedString = number.toString().split('').reverse().join('');\n    return parseInt(reversedString) * Math.sign(number);}\n\nconst input = 12345;\nconst result = reverseInteger(input);\nconsole.log(result);",
        "output": "function reverseInteger(number) {\n    const reversedString = number.toString().split('').reverse().join('');\n    return parseInt(reversedString) * Math.sign(number);}\n\nconst input = 12345;\nconst result = reverseInteger(input);\nconsole.log(result);"
    },
    {
        "instruction": "Construct a shell script to calculate the disk usage of files inside a directory, then order the files by size and display only the top 10 largest files.",
        "input": "Directory: /var/log",
        "response": "#!/bin/sh\n\ndirectory=\"/var/log\"\n\ndu -a \"${directory}\" | sort -n -r | head -n 10",
        "output": "#!/bin/sh\n\ndirectory=\"/var/log\"\n\ndu -a \"${directory}\" | sort -n -r | head -n 10"
    },
    {
        "instruction": "Write a C++ function that reverses a given string in place.",
        "input": "\"hello world\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"hello world\";\n    reverse_string(input);\n    std::cout << input << std::endl;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string& str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"hello world\";\n    reverse_string(input);\n    std::cout << input << std::endl;}"
    },
    {
        "instruction": "How would you implement a factorial function in JavaScript using recursion?",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a Python function to merge two sorted lists into a new, sorted list.",
        "input": "[1, 3, 5], [2, 4, 6]",
        "response": "def merge_sorted_lists(list1, list2):\n    result = []\n    i, j = 0, 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n\n    return result\n\nmerged_list = merge_sorted_lists([1, 3, 5], [2, 4, 6])\nprint(merged_list)",
        "output": "def merge_sorted_lists(list1, list2):\n    result = []\n    i, j = 0, 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n\n    return result\n\nmerged_list = merge_sorted_lists([1, 3, 5], [2, 4, 6])\nprint(merged_list)"
    },
    {
        "instruction": "Write a PHP script that reads a CSV file and outputs its content as an associative array.",
        "input": "\"data.csv\"",
        "response": "<?php\nfunction read_csv($filename) {\n    $data = [];\n    if (($handle = fopen($filename, \"r\")) !== false) {\n        $header = fgetcsv($handle);\n        while (($row = fgetcsv($handle)) !== false) {\n            $data[] = array_combine($header, $row);\n        }\n        fclose($handle);\n    }\n    return $data;}\n\n$data_arr = read_csv(\"data.csv\");\nvar_export($data_arr);\n?>",
        "output": "<?php\nfunction read_csv($filename) {\n    $data = [];\n    if (($handle = fopen($filename, \"r\")) !== false) {\n        $header = fgetcsv($handle);\n        while (($row = fgetcsv($handle)) !== false) {\n            $data[] = array_combine($header, $row);\n        }\n        fclose($handle);\n    }\n    return $data;}\n\n$data_arr = read_csv(\"data.csv\");\nvar_export($data_arr);\n?>"
    },
    {
        "instruction": "Develop a C++ function that returns the factorial of a given non-negative integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    cout << \"Factorial: \" << factorial(n) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    cout << \"Factorial: \" << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "Write a PHP script that converts a given string to uppercase.",
        "input": "\"transform me to uppercase\"",
        "response": "<?php\n$str = \"transform me to uppercase\";\n$upperStr = strtoupper($str);\necho $upperStr;\n?>",
        "output": "<?php\n$str = \"transform me to uppercase\";\n$upperStr = strtoupper($str);\necho $upperStr;\n?>"
    },
    {
        "instruction": "How would you fix a Python code that results in an IndexError while trying to access the last element of a list?",
        "input": "my_list = [8, 65, 32, 17]\nlast_element = my_list[4]",
        "response": "my_list = [8, 65, 32, 17]\nlast_element = my_list[-1]",
        "output": "my_list = [8, 65, 32, 17]\nlast_element = my_list[-1]"
    },
    {
        "instruction": "Implement a JavaScript function that takes an array of strings and returns the longest one.",
        "input": "[\"apple\", \"orange\", \"banana\", \"grapefruit\"]",
        "response": "function findLongestString(arr) {\n    let longest = arr[0];\n    for (const str of arr) {\n        if (str.length > longest.length) {\n            longest = str;\n        }\n    }\n    return longest;}\n\nconst fruits = [\"apple\", \"orange\", \"banana\", \"grapefruit\"];\nconsole.log(findLongestString(fruits));",
        "output": "function findLongestString(arr) {\n    let longest = arr[0];\n    for (const str of arr) {\n        if (str.length > longest.length) {\n            longest = str;\n        }\n    }\n    return longest;}\n\nconst fruits = [\"apple\", \"orange\", \"banana\", \"grapefruit\"];\nconsole.log(findLongestString(fruits));"
    },
    {
        "instruction": "Implement a C++ program that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 5;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 5;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}"
    },
    {
        "instruction": "Can you provide a python code snippet that some user inputs a string and the program checks if it contains only letters?",
        "input": "\"Python3\"",
        "response": "def check_string(input_string):\n    return input_string.isalpha()\n\nuser_input = \"Python3\"\nresult = check_string(user_input)\n\nif result:\n    print(\"The input string contains only letters.\")\nelse:\n    print(\"The input string does not contain only letters.\")",
        "output": "def check_string(input_string):\n    return input_string.isalpha()\n\nuser_input = \"Python3\"\nresult = check_string(user_input)\n\nif result:\n    print(\"The input string contains only letters.\")\nelse:\n    print(\"The input string does not contain only letters.\")"
    },
    {
        "instruction": "Design a PHP script that establishes a connection to a MySQL database using PDO.",
        "input": "{\"host\": \"localhost\", \"dbname\": \"mydb\", \"username\": \"user\", \"password\": \"pass\"}",
        "response": "<?php\n$host = \"localhost\";\n$dbname = \"mydb\";\n$username = \"user\";\n$password = \"pass\";\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    echo \"Connected successfully\";} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();}\n?>",
        "output": "<?php\n$host = \"localhost\";\n$dbname = \"mydb\";\n$username = \"user\";\n$password = \"pass\";\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    echo \"Connected successfully\";} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();}\n?>"
    },
    {
        "instruction": "Build a Shell Script that takes a directory path argument and reports the number of files and folders inside it.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndir_path=\"/home/user/documents\"\n\nif [ -d \"$dir_path\" ]; then\n    num_files=$(find \"$dir_path\" -type f | wc -l)\n    num_dirs=$(find \"$dir_path\" -type d | wc -l)\n    echo \"Number of files: $num_files\"\n    echo \"Number of directories: $num_dirs\"\nelse\n    echo \"The provided path is not valid.\"\nfi",
        "output": "#!/bin/bash\n\ndir_path=\"/home/user/documents\"\n\nif [ -d \"$dir_path\" ]; then\n    num_files=$(find \"$dir_path\" -type f | wc -l)\n    num_dirs=$(find \"$dir_path\" -type d | wc -l)\n    echo \"Number of files: $num_files\"\n    echo \"Number of directories: $num_dirs\"\nelse\n    echo \"The provided path is not valid.\"\nfi"
    },
    {
        "instruction": "In Python, write a function that receives a list of strings and counts the occurrence of each string in the list, returning a dictionary with the strings as keys and the counts as values.",
        "input": "['apple', 'orange', 'apple', 'banana', 'orange']",
        "response": "def count_strings(strings):\n    result = {}\n    for s in strings:\n        if s in result:\n            result[s] += 1\n        else:\n            result[s] = 1\n    return result\n\nexample_list = ['apple', 'orange', 'apple', 'banana', 'orange']\nprint(count_strings(example_list))",
        "output": "def count_strings(strings):\n    result = {}\n    for s in strings:\n        if s in result:\n            result[s] += 1\n        else:\n            result[s] = 1\n    return result\n\nexample_list = ['apple', 'orange', 'apple', 'banana', 'orange']\nprint(count_strings(example_list))"
    },
    {
        "instruction": "Design a Java class named Triangle with instance variables for the length of the three sides. Implement a constructor and a method to calculate the area using Heron's formula. Print the area of a Triangle with sides 3, 4, and 5.",
        "input": "3, 4, 5",
        "response": "public class Triangle {\n    private double side1, side2, side3;\n\n    public Triangle(double side1, double side2, double side3) {\n        this.side1 = side1;\n        this.side2 = side2;\n        this.side3 = side3;\n    }\n\n    public double getArea() {\n        double s = (side1 + side2 + side3) / 2;\n        return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));\n    }\n\n    public static void main(String[] args) {\n        Triangle triangle = new Triangle(3, 4, 5);\n        System.out.println(triangle.getArea());\n    }}",
        "output": "public class Triangle {\n    private double side1, side2, side3;\n\n    public Triangle(double side1, double side2, double side3) {\n        this.side1 = side1;\n        this.side2 = side2;\n        this.side3 = side3;\n    }\n\n    public double getArea() {\n        double s = (side1 + side2 + side3) / 2;\n        return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));\n    }\n\n    public static void main(String[] args) {\n        Triangle triangle = new Triangle(3, 4, 5);\n        System.out.println(triangle.getArea());\n    }}"
    },
    {
        "instruction": "How would you create a JavaScript function that takes a sentence as input and returns the sentence with only the first letter of each word capitalized?",
        "input": "'hello world from an AI assistant'",
        "response": "function capitalizeFirstLetters(sentence) {\n    return sentence\n        .toLowerCase()\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');}\n\nconst inputSentence = 'hello world from an AI assistant';\nconst capitalizedSentence = capitalizeFirstLetters(inputSentence);\nconsole.log(capitalizedSentence);",
        "output": "function capitalizeFirstLetters(sentence) {\n    return sentence\n        .toLowerCase()\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');}\n\nconst inputSentence = 'hello world from an AI assistant';\nconst capitalizedSentence = capitalizeFirstLetters(inputSentence);\nconsole.log(capitalizedSentence);"
    },
    {
        "instruction": "Write a C++ program that generates an array of n random integers between a given range of low and high. Use the rand() function with srand(time(0)) to seed the random generator. Test the program by generating 10 random numbers between 1 and 100.",
        "input": "10, 1, 100",
        "response": "#include <iostream>\n#include <ctime>\n#include <cstdlib>\n\nvoid generateRandomIntArray(int arr[], int n, int low, int high) {\n    srand(time(0));\n    for (int i = 0; i < n; i++) {\n        arr[i] = low + rand() % (high - low + 1);\n    }}\n\nint main() {\n    const int n = 10;\n    int arr[n];\n    generateRandomIntArray(arr, n, 1, 100);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <ctime>\n#include <cstdlib>\n\nvoid generateRandomIntArray(int arr[], int n, int low, int high) {\n    srand(time(0));\n    for (int i = 0; i < n; i++) {\n        arr[i] = low + rand() % (high - low + 1);\n    }}\n\nint main() {\n    const int n = 10;\n    int arr[n];\n    generateRandomIntArray(arr, n, 1, 100);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a given integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Demonstrate how to use Python's requests library to make a GET request to retrieve data from an API.",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print('Error:', response.status_code)",
        "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print('Error:', response.status_code)"
    },
    {
        "instruction": "Create a shell script that reads lines from a text file and prints them in reverse order.",
        "input": "file.txt:\nHello\nWorld\n!",
        "response": "#!/bin/bash\n\nfile='file.txt'\ntac $file",
        "output": "#!/bin/bash\n\nfile='file.txt'\ntac $file"
    },
    {
        "instruction": "Can you provide an example of JavaScript code to fetch data from a public API and display it in the console?",
        "input": "https://api.openweathermap.org/data/2.5/weather?q=London&appid=YOUR_API_KEY",
        "response": "const fetch = require('node-fetch');\n\nconst apiKey = 'YOUR_API_KEY';\nconst city = 'London';\nconst url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n\nfetch(url)\n    .then(response => response.json())\n    .then(data => {\n        console.log(`Weather in ${city}:`);\n        console.log(data);\n    })\n    .catch(error => console.error('Error:', error));",
        "output": "const fetch = require('node-fetch');\n\nconst apiKey = 'YOUR_API_KEY';\nconst city = 'London';\nconst url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n\nfetch(url)\n    .then(response => response.json())\n    .then(data => {\n        console.log(`Weather in ${city}:`);\n        console.log(data);\n    })\n    .catch(error => console.error('Error:', error));"
    },
    {
        "instruction": "Implement a Python script that computes the factorial of a given integer.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Write a C++ program to find the largest element in an array of integers.",
        "input": "{4, 9, 7, 1, 3}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n  std::vector<int> nums = {4, 9, 7, 1, 3};\n  int max_element = *std::max_element(nums.begin(), nums.end());\n  std::cout << \"Largest element: \" << max_element << std::endl;\n\n  return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n  std::vector<int> nums = {4, 9, 7, 1, 3};\n  int max_element = *std::max_element(nums.begin(), nums.end());\n  std::cout << \"Largest element: \" << max_element << std::endl;\n\n  return 0;}"
    },
    {
        "instruction": "Construct a JavaScript program that consumes a specified API endpoint and displays the result in an HTML element.",
        "input": "API Endpoint: 'https://jsonplaceholder.typicode.com/posts/1', HTML Element ID: 'output'",
        "response": "<html>\n<head>\n<script>\nasync function fetchPost() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n  const data = await response.json();\n  document.getElementById('output').textContent = JSON.stringify(data);}\n\nwindow.addEventListener('load', () => {\n  fetchPost();});\n</script>\n</head>\n<body>\n  <div id=\"output\">Loading...</div>\n</body>\n</html>",
        "output": "<html>\n<head>\n<script>\nasync function fetchPost() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n  const data = await response.json();\n  document.getElementById('output').textContent = JSON.stringify(data);}\n\nwindow.addEventListener('load', () => {\n  fetchPost();});\n</script>\n</head>\n<body>\n  <div id=\"output\">Loading...</div>\n</body>\n</html>"
    },
    {
        "instruction": "Implement a C# method that accepts a list of strings, removes duplicates, and sorts them alphabetically.",
        "input": "[\"apple\", \"banana\", \"apple\", \"orange\", \"grape\"]",
        "response": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<string> RemoveDuplicatesAndSort(List<string> items)\n    {\n        return items.Distinct().OrderBy(x => x).ToList();\n    }\n\n    static void Main()\n    {\n        List<string> fruitList = new List<string>(){\"apple\", \"banana\", \"apple\", \"orange\", \"grape\"};\n        List<string> sortedFruitList = RemoveDuplicatesAndSort(fruitList);\n        Console.WriteLine(string.Join(',', sortedFruitList));\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    public static List<string> RemoveDuplicatesAndSort(List<string> items)\n    {\n        return items.Distinct().OrderBy(x => x).ToList();\n    }\n\n    static void Main()\n    {\n        List<string> fruitList = new List<string>(){\"apple\", \"banana\", \"apple\", \"orange\", \"grape\"};\n        List<string> sortedFruitList = RemoveDuplicatesAndSort(fruitList);\n        Console.WriteLine(string.Join(',', sortedFruitList));\n    }}"
    },
    {
        "instruction": "Write a SQL query to fetch the total revenue for each product from a table named 'sales', where columns are 'product_id', 'quantity', and 'price_per_unit'.",
        "input": "sales: | product_id | quantity | price_per_unit |",
        "response": "SELECT product_id, SUM(quantity * price_per_unit) as total_revenue\nFROM sales\nGROUP BY product_id;",
        "output": "SELECT product_id, SUM(quantity * price_per_unit) as total_revenue\nFROM sales\nGROUP BY product_id;"
    },
    {
        "instruction": "How would you code a simple RESTful API in Python using Flask that allows users to retrieve, add, update, and delete items from a TODO list?",
        "input": "GET /todos, POST /todos, PUT /todos/:id, DELETE /todos/:id",
        "response": "from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\ntodos = {}\n\nclass TodoResource(Resource):\n    def get(self, todo_id=None):\n        if todo_id:\n            return {todo_id: todos[todo_id]}\n        else:\n            return todos\n\n    def put(self, todo_id):\n        todos[todo_id] = request.form['data']\n        return {todo_id: todos[todo_id]}\n\n    def delete(self, todo_id):\n        del todos[todo_id]\n        return {'result': 'Todo deleted'}\n\napi.add_resource(TodoResource, '/todos', '/todos/<string:todo_id>')\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\ntodos = {}\n\nclass TodoResource(Resource):\n    def get(self, todo_id=None):\n        if todo_id:\n            return {todo_id: todos[todo_id]}\n        else:\n            return todos\n\n    def put(self, todo_id):\n        todos[todo_id] = request.form['data']\n        return {todo_id: todos[todo_id]}\n\n    def delete(self, todo_id):\n        del todos[todo_id]\n        return {'result': 'Todo deleted'}\n\napi.add_resource(TodoResource, '/todos', '/todos/<string:todo_id>')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Devise a Bash script that takes a file path as input, checks if the file exists, and if so, returns the file size in bytes.",
        "input": "/path/to/your/file.txt",
        "response": "#!/bin/bash\n\nfile_path=\"$1\"\n\nif [ -e \"$file_path\" ]; then\n    file_size=$(wc -c <\"$file_path\")\n    echo \"File size: $file_size bytes\"\nelse\n    echo \"File does not exist.\"\nfi",
        "output": "#!/bin/bash\n\nfile_path=\"$1\"\n\nif [ -e \"$file_path\" ]; then\n    file_size=$(wc -c <\"$file_path\")\n    echo \"File size: $file_size bytes\"\nelse\n    echo \"File does not exist.\"\nfi"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a given integer n.",
        "input": "6",
        "response": "```cpp\n#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n-1);}\n\nint main() {\n    int n = 6;\n    std::cout << factorial(n) << std::endl;\n    return 0;}\n    ```",
        "output": "```cpp\n#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n-1);}\n\nint main() {\n    int n = 6;\n    std::cout << factorial(n) << std::endl;\n    return 0;}\n    ```"
    },
    {
        "instruction": "How would you create a Python script that fetches data from a REST API and saves the data in a JSON file?",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "```python\nimport requests\nimport json\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\ndata = response.json()\n\nwith open('output.json', 'w') as file:\n    json.dump(data, file)\n```",
        "output": "```python\nimport requests\nimport json\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\ndata = response.json()\n\nwith open('output.json', 'w') as file:\n    json.dump(data, file)\n```"
    },
    {
        "instruction": "Implement a Java method that takes a list of integers and returns a list containing only the even numbers.",
        "input": "[5, 2, 12, 36, 21]",
        "response": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class EvenNumbers {\n\n    public static List<Integer> getEvenNumbers(List<Integer> numbers) {\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                evenNumbers.add(number);\n            }\n        }\n        return evenNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(5, 2, 12, 36, 21);\n        List<Integer> evenNumbers = getEvenNumbers(numbers);\n        System.out.println(evenNumbers);\n    }}\n    ```",
        "output": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class EvenNumbers {\n\n    public static List<Integer> getEvenNumbers(List<Integer> numbers) {\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                evenNumbers.add(number);\n            }\n        }\n        return evenNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(5, 2, 12, 36, 21);\n        List<Integer> evenNumbers = getEvenNumbers(numbers);\n        System.out.println(evenNumbers);\n    }}\n    ```"
    },
    {
        "instruction": "Write a JavaScript function to convert a given string to title case, considering words separated by whitespace.",
        "input": "the quick brown fox",
        "response": "```javascript\nfunction toTitleCase(str) {\n    return str\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n        .join(' ');}\n\nconst input = 'the quick brown fox';\nconst result = toTitleCase(input);\nconsole.log(result);\n    ```",
        "output": "```javascript\nfunction toTitleCase(str) {\n    return str\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n        .join(' ');}\n\nconst input = 'the quick brown fox';\nconst result = toTitleCase(input);\nconsole.log(result);\n    ```"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers and returns the average.",
        "input": "{2, 4, 6, 8, 10}",
        "response": "#include <iostream>\n#include <vector>\n\ndouble find_average(std::vector<int>& nums) {\n    double sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {2, 4, 6, 8, 10};\n    double average = find_average(numbers);\n    std::cout << \"Average: \" << average << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\ndouble find_average(std::vector<int>& nums) {\n    double sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {2, 4, 6, 8, 10};\n    double average = find_average(numbers);\n    std::cout << \"Average: \" << average << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you design and create a Python class representing a student with a name, ID, and GPA?",
        "input": "name: \"Jack Johnson\", student_id: 12456, gpa: 3.5",
        "response": "class Student:\n    def __init__(self, name, student_id, gpa):\n        self.name = name\n        self.student_id = student_id\n        self.gpa = gpa\n\n    def __str__(self):\n        return f'Student(name=\"{self.name}\", student_id={self.student_id}, gpa={self.gpa})'\n\nstudent = Student(\"Jack Johnson\", 12456, 3.5)\nprint(student)",
        "output": "class Student:\n    def __init__(self, name, student_id, gpa):\n        self.name = name\n        self.student_id = student_id\n        self.gpa = gpa\n\n    def __str__(self):\n        return f'Student(name=\"{self.name}\", student_id={self.student_id}, gpa={self.gpa})'\n\nstudent = Student(\"Jack Johnson\", 12456, 3.5)\nprint(student)"
    },
    {
        "instruction": "What would be a Bash script to check if a specific file exists in a given directory?",
        "input": "file: 'sample.txt', directory: '/home/user/documents'",
        "response": "#!/bin/bash\n\nFILE=\"/home/user/documents/sample.txt\"\n\nif [ -e \"$FILE\" ]; then\n    echo \"File exists.\"\nelse\n    echo \"File does not exist.\"\nfi",
        "output": "#!/bin/bash\n\nFILE=\"/home/user/documents/sample.txt\"\n\nif [ -e \"$FILE\" ]; then\n    echo \"File exists.\"\nelse\n    echo \"File does not exist.\"\nfi"
    },
    {
        "instruction": "Create a JavaScript function that takes a string of comma-separated values and returns an object where the keys are the unique values and the values are the frequency of each unique value.",
        "input": "'apple,orange,banana,apple,orange'",
        "response": "function countFrequency(csv) {\n    const arr = csv.split(',');\n    const frequency = {};\n\n    for (const item of arr) {\n        if (frequency[item]) {\n            frequency[item] += 1;\n        } else {\n            frequency[item] = 1;\n        }\n    }\n\n    return frequency;}\n\nconst result = countFrequency('apple,orange,banana,apple,orange');\nconsole.log(result);",
        "output": "function countFrequency(csv) {\n    const arr = csv.split(',');\n    const frequency = {};\n\n    for (const item of arr) {\n        if (frequency[item]) {\n            frequency[item] += 1;\n        } else {\n            frequency[item] = 1;\n        }\n    }\n\n    return frequency;}\n\nconst result = countFrequency('apple,orange,banana,apple,orange');\nconsole.log(result);"
    },
    {
        "instruction": "Can you create a Python script that reads a list of names from a text file, and counts the number of occurrences of each name?",
        "input": "names.txt (file content: Alice\\nBob\\nAlice\\nEve\\nBob)",
        "response": "from collections import Counter\n\nwith open('names.txt', 'r') as f:\n    names = [line.strip() for line in f.readlines()]\n\nname_counts = Counter(names)\n\nfor name, count in name_counts.items():\n    print(f'{name}: {count}')",
        "output": "from collections import Counter\n\nwith open('names.txt', 'r') as f:\n    names = [line.strip() for line in f.readlines()]\n\nname_counts = Counter(names)\n\nfor name, count in name_counts.items():\n    print(f'{name}: {count}')"
    },
    {
        "instruction": "Design a Java method that finds the longest common prefix among a given list of strings.",
        "input": "List<String> words = Arrays.asList(\"flower\", \"flow\", \"flight\");",
        "response": "import java.util.*;\n\npublic class LongestCommonPrefix {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"flower\", \"flow\", \"flight\");\n        System.out.println(findLongestCommonPrefix(words));\n    }\n\n    public static String findLongestCommonPrefix(List<String> words) {\n        if(words == null || words.size() == 0) {\n            return \"\";\n        }\n        String prefix = words.get(0);\n        for(int i = 1; i < words.size(); i++) {\n            while(!words.get(i).startsWith(prefix)) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if(prefix.isEmpty()) {\n                    return \"\";\n                }\n            }\n        }\n        return prefix;\n    }}",
        "output": "import java.util.*;\n\npublic class LongestCommonPrefix {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"flower\", \"flow\", \"flight\");\n        System.out.println(findLongestCommonPrefix(words));\n    }\n\n    public static String findLongestCommonPrefix(List<String> words) {\n        if(words == null || words.size() == 0) {\n            return \"\";\n        }\n        String prefix = words.get(0);\n        for(int i = 1; i < words.size(); i++) {\n            while(!words.get(i).startsWith(prefix)) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if(prefix.isEmpty()) {\n                    return \"\";\n                }\n            }\n        }\n        return prefix;\n    }}"
    },
    {
        "instruction": "Write a JavaScript function that finds the largest numerical value in an object where the properties are numeric values.",
        "input": "{\"a\": 23, \"b\": 15, \"c\": 78, \"d\": 32}",
        "response": "function findLargestValue(obj) {\n    let max = Number.NEGATIVE_INFINITY;\n\n    for (const key in obj) {\n        if(obj[key] > max) {\n            max = obj[key];\n        }\n    }\n    return max;}\n\nconst sampleObj = { \"a\": 23, \"b\": 15, \"c\": 78, \"d\": 32 };\nconsole.log(findLargestValue(sampleObj));",
        "output": "function findLargestValue(obj) {\n    let max = Number.NEGATIVE_INFINITY;\n\n    for (const key in obj) {\n        if(obj[key] > max) {\n            max = obj[key];\n        }\n    }\n    return max;}\n\nconst sampleObj = { \"a\": 23, \"b\": 15, \"c\": 78, \"d\": 32 };\nconsole.log(findLargestValue(sampleObj));"
    },
    {
        "instruction": "Write a Python function that accepts a list of strings and prints the longest string.",
        "input": "[\"apple\", \"banana\", \"cherry\"]",
        "response": "def find_longest_string(list_of_strings):\n    longest_string = max(list_of_strings, key=len)\n    print(longest_string)\n\nstrings_list = [\"apple\", \"banana\", \"cherry\"]\nfind_longest_string(strings_list)",
        "output": "def find_longest_string(list_of_strings):\n    longest_string = max(list_of_strings, key=len)\n    print(longest_string)\n\nstrings_list = [\"apple\", \"banana\", \"cherry\"]\nfind_longest_string(strings_list)"
    },
    {
        "instruction": "How would you implement a JavaScript function that receives an email address string and returns true if it's a valid email address or false otherwise?",
        "input": "\"example@example.com\"",
        "response": "function isValidEmail(email) {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);}\n\nconsole.log(isValidEmail(\"example@example.com\"));",
        "output": "function isValidEmail(email) {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email);}\n\nconsole.log(isValidEmail(\"example@example.com\"));"
    },
    {
        "instruction": "Demonstrate a Java class that, when given an array of integers, calculates the sum of all the even numbers.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "public class EvenSum {\n    public static int sumEvenNumbers(int[] nums) {\n        int sum = 0;\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5, 6};\n        System.out.println(sumEvenNumbers(numbers));\n    }}",
        "output": "public class EvenSum {\n    public static int sumEvenNumbers(int[] nums) {\n        int sum = 0;\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5, 6};\n        System.out.println(sumEvenNumbers(numbers));\n    }}"
    },
    {
        "instruction": "Design a shell script that accepts a file name as an argument and calculates the number of lines in the file.",
        "input": "\"file.txt\"",
        "response": "#!/bin/sh\n\nfile=\"$1\"\nline_count=$(wc -l < \"$file\")\necho \"Number of lines: $line_count\"\n\n# Usage: ./count_lines.sh file.txt",
        "output": "#!/bin/sh\n\nfile=\"$1\"\nline_count=$(wc -l < \"$file\")\necho \"Number of lines: $line_count\"\n\n# Usage: ./count_lines.sh file.txt"
    },
    {
        "instruction": "How would you implement a simple HTTP server in Node.js?",
        "input": "const http = require('http'); const hostname = '127.0.0.1'; const port = 3000;",
        "response": "const http = require('http');\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello World');});\n\nserver.listen(port, hostname, () => {\n    console.log(`Server running at http://${hostname}:${port}/`);});",
        "output": "const http = require('http');\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello World');});\n\nserver.listen(port, hostname, () => {\n    console.log(`Server running at http://${hostname}:${port}/`);});"
    },
    {
        "instruction": "Create a PHP function that sorts an associative array by its values in descending order.",
        "input": "$age = array('John'=>34, 'Jane'=>28, 'Steve'=>45, 'Carol'=>38);",
        "response": "function sortArrayByValues(&$array) {\n    arsort($array, SORT_NUMERIC);\n    return $array;}\n\n$age = array('John'=>34, 'Jane'=>28, 'Steve'=>45, 'Carol'=>38);\n$result = sortArrayByValues($age);\nprint_r($result);",
        "output": "function sortArrayByValues(&$array) {\n    arsort($array, SORT_NUMERIC);\n    return $array;}\n\n$age = array('John'=>34, 'Jane'=>28, 'Steve'=>45, 'Carol'=>38);\n$result = sortArrayByValues($age);\nprint_r($result);"
    },
    {
        "instruction": "Construct a SQL query that selects all columns from the 'employees' table, where the 'salary' is greater than 50000.",
        "input": "",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "Develop a C++ program to calculate the area of a rectangle with given length and width.",
        "input": "Length: 6, Width: 4",
        "response": "#include <iostream>\n\ndouble rectangleArea(double length, double width) {\n    return length * width;}\n\nint main() {\n    double length = 6, width = 4;\n    std::cout << \"Area: \" << rectangleArea(length, width) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\ndouble rectangleArea(double length, double width) {\n    return length * width;}\n\nint main() {\n    double length = 6, width = 4;\n    std::cout << \"Area: \" << rectangleArea(length, width) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a function in C# that takes a list of integers and returns the average value?",
        "input": "List<int> numbers = new List<int> { 5, 10, 15 };",
        "response": "using System;\nusing System.Collections.Generic;\n\npublic class Main {\n    public static double Average(List<int> numbers) {\n        double sum = 0;\n        \n        foreach (int num in numbers) {\n            sum += num;\n        }\n\n        return sum / numbers.Count;\n    }\n    \n    public static void Main() {\n        List<int> numbers = new List<int> { 5, 10, 15 };\n        double average = Average(numbers);\n        Console.WriteLine(\"Average: \" + average);\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\npublic class Main {\n    public static double Average(List<int> numbers) {\n        double sum = 0;\n        \n        foreach (int num in numbers) {\n            sum += num;\n        }\n\n        return sum / numbers.Count;\n    }\n    \n    public static void Main() {\n        List<int> numbers = new List<int> { 5, 10, 15 };\n        double average = Average(numbers);\n        Console.WriteLine(\"Average: \" + average);\n    }}"
    },
    {
        "instruction": "Construct a Python function that reads a CSV file and returns the number of rows in the file.",
        "input": "File: sample.csv \nContents:\nheader1,header2,header3\nrow1-value1,row1-value2,row1-value3\nrow2-value1,row2-value2,row2-value3",
        "response": "import csv\n\ndef count_rows(csv_file):\n    with open(csv_file, 'r') as file:\n        reader = csv.reader(file)\n        row_count = sum(1 for row in reader) - 1  # Subtract one for the header row\n    return row_count\n\nresult = count_rows('sample.csv')\nprint('Number of rows:', result)",
        "output": "import csv\n\ndef count_rows(csv_file):\n    with open(csv_file, 'r') as file:\n        reader = csv.reader(file)\n        row_count = sum(1 for row in reader) - 1  # Subtract one for the header row\n    return row_count\n\nresult = count_rows('sample.csv')\nprint('Number of rows:', result)"
    },
    {
        "instruction": "Design a JavaScript function that accepts an array of strings and returns the longest string.",
        "input": "['apple', 'banana', 'strawberry', 'grape']",
        "response": "function findLongestString(arr) {\n  let longestString = '';\n\n  for (const str of arr) {\n    if (str.length > longestString.length) {\n      longestString = str;\n    }\n  }\n\n  return longestString;}\n\nconst inputArray = ['apple', 'banana', 'strawberry', 'grape'];\nconst longestString = findLongestString(inputArray);\nconsole.log('The longest string is:', longestString);",
        "output": "function findLongestString(arr) {\n  let longestString = '';\n\n  for (const str of arr) {\n    if (str.length > longestString.length) {\n      longestString = str;\n    }\n  }\n\n  return longestString;}\n\nconst inputArray = ['apple', 'banana', 'strawberry', 'grape'];\nconst longestString = findLongestString(inputArray);\nconsole.log('The longest string is:', longestString);"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a given positive integer using recursion.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}"
    },
    {
        "instruction": "Can you create a Python script that reads a CSV file line by line and prints each row?",
        "input": "example.csv (with content):\nName,Age,Gender\nAlice,27,F\nBob,34,M\nCharlie,21,M",
        "response": "import csv\n\nfile_name = 'example.csv'\n\nwith open(file_name, newline='') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        print(', '.join(row))",
        "output": "import csv\n\nfile_name = 'example.csv'\n\nwith open(file_name, newline='') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        print(', '.join(row))"
    },
    {
        "instruction": "Implement a Java function that takes a text file path as an argument and counts the number of words in the file.",
        "input": "example.txt (with content):\nHello world!\nThis is a test.",
        "response": "import java.io.File;\nimport java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\npublic class WordCounter {\n    public static int countWords(String filePath) throws IOException {\n        int wordCount = 0;\n        File file = new File(filePath);\n        BufferedReader reader = new BufferedReader(new FileReader(file));\n        String line;\n\n        while ((line = reader.readLine()) != null) {\n            String[] words = line.split(\"\\\\s+\");\n            wordCount += words.length;\n        }\n        reader.close();\n\n        return wordCount;\n    }\n\n    public static void main(String[] args) throws IOException {\n        String file_path = \"example.txt\";\n        int count = countWords(file_path);\n        System.out.println(\"Number of words in the file: \" + count);\n    }}",
        "output": "import java.io.File;\nimport java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\npublic class WordCounter {\n    public static int countWords(String filePath) throws IOException {\n        int wordCount = 0;\n        File file = new File(filePath);\n        BufferedReader reader = new BufferedReader(new FileReader(file));\n        String line;\n\n        while ((line = reader.readLine()) != null) {\n            String[] words = line.split(\"\\\\s+\");\n            wordCount += words.length;\n        }\n        reader.close();\n\n        return wordCount;\n    }\n\n    public static void main(String[] args) throws IOException {\n        String file_path = \"example.txt\";\n        int count = countWords(file_path);\n        System.out.println(\"Number of words in the file: \" + count);\n    }}"
    },
    {
        "instruction": "Develop a JavaScript function that takes a string as input and reverses its characters without using the built-in reverse function.",
        "input": "\"OpenAI\"",
        "response": "function reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;}\n\nconst input = 'OpenAI';\nconst result = reverseString(input);\nconsole.log(`Reversed string: ${result}`);",
        "output": "function reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;}\n\nconst input = 'OpenAI';\nconst result = reverseString(input);\nconsole.log(`Reversed string: ${result}`);"
    },
    {
        "instruction": "Design a C++ function that accepts a vector of integers, sorts it in ascending order, and prints the sorted vector.",
        "input": "{1, 7, 3, 5, 2}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid sort_and_print(std::vector<int> nums) {\n    std::sort(nums.begin(), nums.end());\n    \n    for (int num : nums) {\n        std::cout << num << ' ';\n    }}\n\nint main() {\n    std::vector<int> nums = {1, 7, 3, 5, 2};\n    sort_and_print(nums);}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid sort_and_print(std::vector<int> nums) {\n    std::sort(nums.begin(), nums.end());\n    \n    for (int num : nums) {\n        std::cout << num << ' ';\n    }}\n\nint main() {\n    std::vector<int> nums = {1, 7, 3, 5, 2};\n    sort_and_print(nums);}"
    },
    {
        "instruction": "Write a Python program that takes a user's input and counts the occurrences of each character in the input string.",
        "input": "\"Programming is fun\"",
        "response": "def count_chars(s):\n    char_count = {}\n    for char in s:\n        char = char.lower()\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\ninput_str = 'Programming is fun'\nresult = count_chars(input_str)\nprint(result)",
        "output": "def count_chars(s):\n    char_count = {}\n    for char in s:\n        char = char.lower()\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\ninput_str = 'Programming is fun'\nresult = count_chars(input_str)\nprint(result)"
    },
    {
        "instruction": "How would you write a Shell script that changes the file extension from '.txt' to '.bak' for all files in the current directory?",
        "input": "file1.txt, file2.txt, file3.txt",
        "response": "#!/bin/sh\n\nfor file in *.txt\ndo\n    mv \"$file\" \"${file%.txt}.bak\"\ndone",
        "output": "#!/bin/sh\n\nfor file in *.txt\ndo\n    mv \"$file\" \"${file%.txt}.bak\"\ndone"
    },
    {
        "instruction": "Construct a JavaScript function that accepts an object with 'name' and 'age' properties and returns a greeting string with the person's name and age included.",
        "input": "{name: \"John\", age: 30}",
        "response": "function createGreeting(person) {\n    return `Hello, my name is ${person.name} and I'm ${person.age} years old.`;}\n\nconst person = { name: 'John', age: 30 };\nconst greeting = createGreeting(person);\nconsole.log(greeting);",
        "output": "function createGreeting(person) {\n    return `Hello, my name is ${person.name} and I'm ${person.age} years old.`;}\n\nconst person = { name: 'John', age: 30 };\nconst greeting = createGreeting(person);\nconsole.log(greeting);"
    },
    {
        "instruction": "Design a C++ function that takes a string as input and returns the reverse of the string.",
        "input": "\"hello world\"",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverse_string(const std::string &s) {\n    std::string reversed(s);\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string input = \"hello world\";\n    std::string result = reverse_string(input);\n    std::cout << result << std::endl;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverse_string(const std::string &s) {\n    std::string reversed(s);\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string input = \"hello world\";\n    std::string result = reverse_string(input);\n    std::cout << result << std::endl;}"
    },
    {
        "instruction": "Implement a Python program that reads a file and displays the number of lines, words, and characters in the file.",
        "input": "\"example.txt\"",
        "response": "def count_file_contents(filename):\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n        line_count = len(lines)\n        word_count = sum(len(line.split()) for line in lines)\n        char_count = sum(len(line) for line in lines)\n    return line_count, word_count, char_count\n\nfilename = 'example.txt'\nlines, words, chars = count_file_contents(filename)\nprint(f\"Lines: {lines}, Words: {words}, Characters: {chars}\")",
        "output": "def count_file_contents(filename):\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n        line_count = len(lines)\n        word_count = sum(len(line.split()) for line in lines)\n        char_count = sum(len(line) for line in lines)\n    return line_count, word_count, char_count\n\nfilename = 'example.txt'\nlines, words, chars = count_file_contents(filename)\nprint(f\"Lines: {lines}, Words: {words}, Characters: {chars}\")"
    },
    {
        "instruction": "How would you write a JavaScript function that recursively calculates the nth Fibonacci number, given the value n as its input?",
        "input": "6",
        "response": "function fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nconst n = 6;\nconst result = fibonacci(n);\nconsole.log(`The ${n}th Fibonacci number is ${result}`);",
        "output": "function fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nconst n = 6;\nconst result = fibonacci(n);\nconsole.log(`The ${n}th Fibonacci number is ${result}`);"
    },
    {
        "instruction": "Show an example of a Shell script that accepts two command-line arguments representing integers and outputs their difference.",
        "input": "10 5",
        "response": "#!/bin/bash\nfirst_number=$1\nsecond_number=$2\n\ndifference=$((first_number - second_number))\n\necho \"The difference between $first_number and $second_number is $difference\";",
        "output": "#!/bin/bash\nfirst_number=$1\nsecond_number=$2\n\ndifference=$((first_number - second_number))\n\necho \"The difference between $first_number and $second_number is $difference\";"
    },
    {
        "instruction": "Design a C++ function that calculates the factorial of an integer using recursion.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n  if (n == 0 || n == 1)\n    return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int num = 6;\n  cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n  return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n  if (n == 0 || n == 1)\n    return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int num = 6;\n  cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n  return 0;\n}"
    },
    {
        "instruction": "Fix the following Python code, which is meant to calculate the sum of odd numbers from 1 to n.",
        "input": "def sum_of_odds(n):\n  sum = 0\n  for i in range(1, n):\n    if i % 2 == 1:\n      sum += i\n  return sum\n\nprint(sum_of_odds(10))",
        "response": "def sum_of_odds(n):\n  sum = 0\n  for i in range(1, n+1):\n    if i % 2 == 1:\n      sum += i\n  return sum\n\nprint(sum_of_odds(10))",
        "output": "def sum_of_odds(n):\n  sum = 0\n  for i in range(1, n+1):\n    if i % 2 == 1:\n      sum += i\n  return sum\n\nprint(sum_of_odds(10))"
    },
    {
        "instruction": "How would you build a JavaScript function that, given a string input, calculates the frequency of each character in the input and returns the result as an object?",
        "input": "characterfrequency",
        "response": "function characterFrequency(input) {\n  let freq = {};\n  for (let char of input) {\n    char = char.toLowerCase();\n    freq[char] = (freq[char] || 0) + 1;\n  }\n  return freq;\n}\n\nconsole.log(characterFrequency('characterfrequency'));",
        "output": "function characterFrequency(input) {\n  let freq = {};\n  for (let char of input) {\n    char = char.toLowerCase();\n    freq[char] = (freq[char] || 0) + 1;\n  }\n  return freq;\n}\n\nconsole.log(characterFrequency('characterfrequency'));"
    },
    {
        "instruction": "Write a shell script to find all .txt files in the current directory and subdirectories, and move them to a specified target directory.",
        "input": "target_directory",
        "response": "#!/bin/bash\ntarget_directory=$1\n\nfind . -type f -iname '*.txt' -exec mv -t \"$target_directory\" {} +",
        "output": "#!/bin/bash\ntarget_directory=$1\n\nfind . -type f -iname '*.txt' -exec mv -t \"$target_directory\" {} +"
    },
    {
        "instruction": "Develop a C++ function that takes a vector of integers and reverses the elements in it.",
        "input": "{1, 2, 3, 4, 5}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    reverseVector(numbers);\n\n    for (int num : numbers) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid reverseVector(std::vector<int> &vec) {\n    std::reverse(vec.begin(), vec.end());}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    reverseVector(numbers);\n\n    for (int num : numbers) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Can you show me a Python code that sorts a list of dates in ascending order using the datetime module?",
        "input": "['2022-12-25', '2022-01-01', '2022-11-04']",
        "response": "from datetime import datetime\n\ndef sort_dates(date_list):\n    date_format = '%Y-%m-%d'\n    return sorted(date_list, key=lambda x: datetime.strptime(x, date_format))\n\ndates = ['2022-12-25', '2022-01-01', '2022-11-04']\nsorted_dates = sort_dates(dates)\nprint(sorted_dates)",
        "output": "from datetime import datetime\n\ndef sort_dates(date_list):\n    date_format = '%Y-%m-%d'\n    return sorted(date_list, key=lambda x: datetime.strptime(x, date_format))\n\ndates = ['2022-12-25', '2022-01-01', '2022-11-04']\nsorted_dates = sort_dates(dates)\nprint(sorted_dates)"
    },
    {
        "instruction": "What is the code for a JavaScript function that receives a JSON object and replaces null values with an empty string?",
        "input": "{\"name\": \"John\", \"age\": 30, \"city\": null}",
        "response": "function replaceNullWithEmpty(obj) {\n    for (const key in obj) {\n        if (obj[key] === null) {\n            obj[key] = '';\n        }\n    }}\n\nconst data = {\"name\": \"John\", \"age\": 30, \"city\": null};\nreplaceNullWithEmpty(data);\nconsole.log(data);",
        "output": "function replaceNullWithEmpty(obj) {\n    for (const key in obj) {\n        if (obj[key] === null) {\n            obj[key] = '';\n        }\n    }}\n\nconst data = {\"name\": \"John\", \"age\": 30, \"city\": null};\nreplaceNullWithEmpty(data);\nconsole.log(data);"
    },
    {
        "instruction": "How do I fix the following PHP code that is supposed to remove all empty elements from an array?",
        "input": "$my_array = array('a', '', 'b', null, 'c', false, 'd', 0);",
        "response": "<?php\n\nfunction removeEmptyElements(&$array) {\n    $array = array_filter($array, function($value) {\n        return !($value === '' || $value === null || $value === false || $value === 0);\n    });}\n\n$my_array = array('a', '', 'b', null, 'c', false, 'd', 0);\nremoveEmptyElements($my_array);\nprint_r($my_array);\n\n?>",
        "output": "<?php\n\nfunction removeEmptyElements(&$array) {\n    $array = array_filter($array, function($value) {\n        return !($value === '' || $value === null || $value === false || $value === 0);\n    });}\n\n$my_array = array('a', '', 'b', null, 'c', false, 'd', 0);\nremoveEmptyElements($my_array);\nprint_r($my_array);\n\n?>"
    },
    {
        "instruction": "Implement a C++ function to find the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}"
    },
    {
        "instruction": "Construct a Python function to find the longest substring without repeating characters present in a given input string.",
        "input": "\"teststringwithnorepeatedcharacters\"",
        "response": "def longest_substring_without_repeating_chars(s):\n    char_set = set()\n    start, end = 0, 0\n    max_length = 0\n\n    while end < len(s):\n        if s[end] not in char_set:\n            char_set.add(s[end])\n            end += 1\n            max_length = max(max_length, end - start)\n        else:\n            char_set.remove(s[start])\n            start += 1\n\n    return max_length\n\ninput_string = \"teststringwithnorepeatedcharacters\"\nprint(longest_substring_without_repeating_chars(input_string))",
        "output": "def longest_substring_without_repeating_chars(s):\n    char_set = set()\n    start, end = 0, 0\n    max_length = 0\n\n    while end < len(s):\n        if s[end] not in char_set:\n            char_set.add(s[end])\n            end += 1\n            max_length = max(max_length, end - start)\n        else:\n            char_set.remove(s[start])\n            start += 1\n\n    return max_length\n\ninput_string = \"teststringwithnorepeatedcharacters\"\nprint(longest_substring_without_repeating_chars(input_string))"
    },
    {
        "instruction": "How would you implement a JavaScript function to debounce input events with a given delay? Use the example below.",
        "input": "function exampleFunction() { console.log('Debounced event!'); }, 300",
        "response": "function debounce(func, delay) {\n    let timerId;\n\n    return function(...args) {\n        if (timerId) {\n            clearTimeout(timerId);\n        }\n\n        timerId = setTimeout(() => {\n            func.apply(this, args);\n        }, delay);\n    };}\n\nconst exampleFunction = () => console.log('Debounced event!');\n\nconst debouncedEvent = debounce(exampleFunction, 300);\n\nwindow.addEventListener('resize', debouncedEvent);",
        "output": "function debounce(func, delay) {\n    let timerId;\n\n    return function(...args) {\n        if (timerId) {\n            clearTimeout(timerId);\n        }\n\n        timerId = setTimeout(() => {\n            func.apply(this, args);\n        }, delay);\n    };}\n\nconst exampleFunction = () => console.log('Debounced event!');\n\nconst debouncedEvent = debounce(exampleFunction, 300);\n\nwindow.addEventListener('resize', debouncedEvent);"
    },
    {
        "instruction": "Design a PHP function that takes a list of integers as its only parameter and filters out even numbers.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "<?php\nfunction filter_evens($arr) {\n    return array_filter($arr, function($num) {\n        return $num % 2 !== 0;\n    });}\n\n$list_of_integers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$filtered_list = filter_evens($list_of_integers);\nprint_r($filtered_list);\n?>",
        "output": "<?php\nfunction filter_evens($arr) {\n    return array_filter($arr, function($num) {\n        return $num % 2 !== 0;\n    });}\n\n$list_of_integers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$filtered_list = filter_evens($list_of_integers);\nprint_r($filtered_list);\n?>"
    },
    {
        "instruction": "Implement a C++ function that computes the greatest common divisor (GCD) of two integers using Euclidean algorithm.",
        "input": "48, 18",
        "response": "#include <iostream>\n\nint euclideanGCD(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return euclideanGCD(b, a % b);\n}\n\nint main() {\n    int a = 48;\n    int b = 18;\n    std::cout << \"GCD of \" << a << \" and \" << b << \" is \" << euclideanGCD(a, b) << std::endl;\n}",
        "output": "#include <iostream>\n\nint euclideanGCD(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return euclideanGCD(b, a % b);\n}\n\nint main() {\n    int a = 48;\n    int b = 18;\n    std::cout << \"GCD of \" << a << \" and \" << b << \" is \" << euclideanGCD(a, b) << std::endl;\n}"
    },
    {
        "instruction": "How would you create a Python script that fetches data from a REST API and saves it to a JSON file?",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\nimport json\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\ndata = response.json()\n\nwith open('output.json', 'w') as output_file:\n    json.dump(data, output_file)",
        "output": "import requests\nimport json\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\ndata = response.json()\n\nwith open('output.json', 'w') as output_file:\n    json.dump(data, output_file)"
    },
    {
        "instruction": "Design a simple Java program that sorts a list of numbers using the bubble sort algorithm.",
        "input": "[5, 3, 8, 4, 2]",
        "response": "public class BubbleSort {\n    public static void main(String[] args) {\n        int[] numbers = {5, 3, 8, 4, 2};\n        bubbleSort(numbers);\n        for (int number : numbers) {\n            System.out.print(number + \" \");\n        }\n    }\n\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        boolean swapped;\n        for (int i = 0; i < n - 1; i++) {\n            swapped = false;\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                    swapped = true;\n                }\n            }\n            if (!swapped) {\n                break;\n            }\n        }\n    }\n}",
        "output": "public class BubbleSort {\n    public static void main(String[] args) {\n        int[] numbers = {5, 3, 8, 4, 2};\n        bubbleSort(numbers);\n        for (int number : numbers) {\n            System.out.print(number + \" \");\n        }\n    }\n\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        boolean swapped;\n        for (int i = 0; i < n - 1; i++) {\n            swapped = false;\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                    swapped = true;\n                }\n            }\n            if (!swapped) {\n                break;\n            }\n        }\n    }\n}"
    },
    {
        "instruction": "Construct a Bash script that takes a path to a directory and lists all the files and directories inside it, specifying whether they are files or directories.",
        "input": "/home/user/dir",
        "response": "#!/bin/bash\n\ndirPath=$1\n\nfor item in \"$dirPath\"/*; do\n    if [ -d \"$item\" ]; then\n        echo \"$item is a directory.\"\n    elif [ -f \"$item\" ]; then\n        echo \"$item is a file.\"\n    fi\ndone",
        "output": "#!/bin/bash\n\ndirPath=$1\n\nfor item in \"$dirPath\"/*; do\n    if [ -d \"$item\" ]; then\n        echo \"$item is a directory.\"\n    elif [ -f \"$item\" ]; then\n        echo \"$item is a file.\"\n    fi\ndone"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a given integer using recursion.",
        "input": "4",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 4;\n    cout << \"Factorial of \" << number << \" is \" << factorial(number) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if(n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 4;\n    cout << \"Factorial of \" << number << \" is \" << factorial(number) << endl;\n    return 0;}"
    },
    {
        "instruction": "What would be the code to delete a file named 'example.txt' using a bash script?",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfile_to_delete=\"example.txt\"\n\nif [ -e \"$file_to_delete\" ]; then\n    rm \"$file_to_delete\"\n    echo \"File deleted.\"\nelse\n    echo \"File does not exist.\"\nfi",
        "output": "#!/bin/bash\n\nfile_to_delete=\"example.txt\"\n\nif [ -e \"$file_to_delete\" ]; then\n    rm \"$file_to_delete\"\n    echo \"File deleted.\"\nelse\n    echo \"File does not exist.\"\nfi"
    },
    {
        "instruction": "Write a C# method that reverses the order of the words in a given sentence.",
        "input": "\"Programming in C# is fun!\"",
        "response": "using System;\nusing System.Linq;\n\nclass WordReverser\n{\n    public static string ReverseWords(string sentence)\n    {\n        return string.Join(' ', sentence.Split(' ').Reverse());\n    }\n\n    public static void Main()\n    {\n        string input = \"Programming in C# is fun!\";\n        string reversed = ReverseWords(input);\n        Console.WriteLine(reversed);\n    }}",
        "output": "using System;\nusing System.Linq;\n\nclass WordReverser\n{\n    public static string ReverseWords(string sentence)\n    {\n        return string.Join(' ', sentence.Split(' ').Reverse());\n    }\n\n    public static void Main()\n    {\n        string input = \"Programming in C# is fun!\";\n        string reversed = ReverseWords(input);\n        Console.WriteLine(reversed);\n    }}"
    },
    {
        "instruction": "Implement a JavaScript function that returns a new array containing the squares of numbers from an input array.",
        "input": "[1, 2, 3, 4]",
        "response": "function squareArray(arr) {\n    return arr.map(num => num * num);}\n\nconst inputArray = [1, 2, 3, 4];\nconst squaredArray = squareArray(inputArray);\nconsole.log(squaredArray);",
        "output": "function squareArray(arr) {\n    return arr.map(num => num * num);}\n\nconst inputArray = [1, 2, 3, 4];\nconst squaredArray = squareArray(inputArray);\nconsole.log(squaredArray);"
    },
    {
        "instruction": "Design a C++ function that takes a string and reverses the order of its characters.",
        "input": "example",
        "response": "#include <iostream>\n#include <string>\n\nstd::string reverse_string(std::string input) {\n    int n = input.length();\n    for (int i = 0; i < n / 2; i++) {\n        std::swap(input[i], input[n - i - 1]);\n    }\n    return input;\n}\n\nint main() {\n    std::string reversed = reverse_string(\"example\");\n    std::cout << reversed << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nstd::string reverse_string(std::string input) {\n    int n = input.length();\n    for (int i = 0; i < n / 2; i++) {\n        std::swap(input[i], input[n - i - 1]);\n    }\n    return input;\n}\n\nint main() {\n    std::string reversed = reverse_string(\"example\");\n    std::cout << reversed << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python program that reads a CSV file using the 'pandas' library and prints some basic statistics about the dataset.",
        "input": "data.csv",
        "response": "import pandas as pd\n\n# Reading the CSV file\ndata = pd.read_csv('data.csv')\n\n# Displaying the first 5 rows of the dataset\ndata_head = data.head()\nprint('First 5 rows of dataset:\\n', data_head, '\\n')\n\n# Getting the basic statistics of the dataset\ndata_statistics = data.describe()\nprint('Statistics of dataset:\\n', data_statistics)",
        "output": "import pandas as pd\n\n# Reading the CSV file\ndata = pd.read_csv('data.csv')\n\n# Displaying the first 5 rows of the dataset\ndata_head = data.head()\nprint('First 5 rows of dataset:\\n', data_head, '\\n')\n\n# Getting the basic statistics of the dataset\ndata_statistics = data.describe()\nprint('Statistics of dataset:\\n', data_statistics)"
    },
    {
        "instruction": "Return a JavaScript function that filters out elements from an array based on a specified condition.",
        "input": "['apple', 'banana', 'cherry'], item => item.length > 5",
        "response": "function filterArray(arr, condition) {\n  return arr.filter(condition);\n}\n\nconst filteredItems = filterArray(['apple', 'banana', 'cherry'], item => item.length > 5);\nconsole.log(filteredItems);",
        "output": "function filterArray(arr, condition) {\n  return arr.filter(condition);\n}\n\nconst filteredItems = filterArray(['apple', 'banana', 'cherry'], item => item.length > 5);\nconsole.log(filteredItems);"
    },
    {
        "instruction": "Can you write a code that demonstrates the use of asynchronous file reading in Node.js?",
        "input": "sample.txt",
        "response": "const fs = require('fs');\n\nfs.readFile('sample.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  console.log('File contents:', data);\n});",
        "output": "const fs = require('fs');\n\nfs.readFile('sample.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  console.log('File contents:', data);\n});"
    },
    {
        "instruction": "Implement a simple C++ program that calculates the factorial of a given number.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Could you write a Python script to display the current date and time?",
        "input": "",
        "response": "from datetime import datetime\n\ncurrent_date_time = datetime.now()\nprint('Current date and time:', current_date_time)",
        "output": "from datetime import datetime\n\ncurrent_date_time = datetime.now()\nprint('Current date and time:', current_date_time)"
    },
    {
        "instruction": "In PHP, create a function that reverses a given string without using any built-in functions.",
        "input": "\"Hello, world!\"",
        "response": "<?php\n\nfunction reverseString($str) {\n    $reversed = '';\n    for ($i = strlen($str) - 1; $i >= 0; $i--) {\n        $reversed .= $str[$i];\n    }\n    return $reversed;\n}\n\n$input = \"Hello, world!\";\n$result = reverseString($input);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction reverseString($str) {\n    $reversed = '';\n    for ($i = strlen($str) - 1; $i >= 0; $i--) {\n        $reversed .= $str[$i];\n    }\n    return $reversed;\n}\n\n$input = \"Hello, world!\";\n$result = reverseString($input);\necho $result;\n\n?>"
    },
    {
        "instruction": "Demonstrate how to use the JavaScript Fetch API to fetch data from an external API.",
        "input": "\"https://jsonplaceholder.typicode.com/todos/1\"",
        "response": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error fetching data:', error));",
        "output": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error fetching data:', error));"
    },
    {
        "instruction": "Construct a C++ program that reads user input for two integers and outputs their greatest common divisor.",
        "input": "56, 98",
        "response": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n\n    int result = gcd(num1, num2);\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is \" << result << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n\n    int result = gcd(num1, num2);\n    cout << \"GCD of \" << num1 << \" and \" << num2 << \" is \" << result << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you write a Python script to fetch data from an API using the requests library?",
        "input": "https://api.example.com/data",
        "response": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print('Error retrieving data:', response.status_code)",
        "output": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print('Error retrieving data:', response.status_code)"
    },
    {
        "instruction": "Create a shell script that reads a file line by line and echoes each line in uppercase.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfilename='file.txt'\nwhile read -r line; do\n    uppercase_line=$(echo \"$line\" | tr '[:lower:]' '[:upper:]')\n    echo \"$uppercase_line\"\ndone < \"$filename\"",
        "output": "#!/bin/bash\n\nfilename='file.txt'\nwhile read -r line; do\n    uppercase_line=$(echo \"$line\" | tr '[:lower:]' '[:upper:]')\n    echo \"$uppercase_line\"\ndone < \"$filename\""
    },
    {
        "instruction": "Write a JavaScript program that takes a user's name as input and prompts an alert with 'Hello, [Name]!'",
        "input": "Jane",
        "response": "const userName = prompt('Please enter your name:');\nalert('Hello, ' + userName + '!');",
        "output": "const userName = prompt('Please enter your name:');\nalert('Hello, ' + userName + '!');"
    },
    {
        "instruction": "Write a C++ function that accepts a vector of strings and prints each string on a new line.",
        "input": "{\"Hello, World!\", \"This is a test. \", \"Coding is fun.\"}",
        "response": "#include <iostream>\n#include <vector>\n#include <string>\n\nvoid print_strings(const std::vector<std::string> &strings) {\n    for (const std::string &str : strings) {\n        std::cout << str << std::endl;\n    }}\n\nint main() {\n    std::vector<std::string> strings = {\"Hello, World!\", \"This is a test. \", \"Coding is fun.\"};\n    print_strings(strings);\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <string>\n\nvoid print_strings(const std::vector<std::string> &strings) {\n    for (const std::string &str : strings) {\n        std::cout << str << std::endl;\n    }}\n\nint main() {\n    std::vector<std::string> strings = {\"Hello, World!\", \"This is a test. \", \"Coding is fun.\"};\n    print_strings(strings);\n    return 0;}"
    },
    {
        "instruction": "Implement a function in JavaScript that takes an integer and returns the factorial of the integer.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Create a Python script that given a list of names, counts how many times each name appears and prints the result with the format 'Name: Count'.",
        "input": "[\"Alice\", \"Bob\", \"Alice\", \"Eve\", \"Bob\", \"Charlie\", \"Eve\"]",
        "response": "from collections import Counter\n\ndef count_names(names):\n    name_counts = Counter(names)\n    for name, count in name_counts.items():\n        print(f'{name}: {count}')\n\nname_list = [\"Alice\", \"Bob\", \"Alice\", \"Eve\", \"Bob\", \"Charlie\", \"Eve\"]\ncount_names(name_list)",
        "output": "from collections import Counter\n\ndef count_names(names):\n    name_counts = Counter(names)\n    for name, count in name_counts.items():\n        print(f'{name}: {count}')\n\nname_list = [\"Alice\", \"Bob\", \"Alice\", \"Eve\", \"Bob\", \"Charlie\", \"Eve\"]\ncount_names(name_list)"
    },
    {
        "instruction": "Write a shell script to delete all the files in a directory with a .log extension. Make sure to preserve subdirectories and their content.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -type f -name \"*.log\" -exec rm {} \\;\n\n# To run the script, save it as a .sh file and execute it with 'bash script_name.sh'",
        "output": "#!/bin/bash\n\nfind . -type f -name \"*.log\" -exec rm {} \\;\n\n# To run the script, save it as a .sh file and execute it with 'bash script_name.sh'"
    },
    {
        "instruction": "Write a C++ program that takes user input for the base and the exponent and calculates the power using a recursive function.",
        "input": "Base: 2\nExponent: 3",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint power(int base, int exponent) {\n    if (exponent == 0) {\n        return 1;\n    }\n    return base * power(base, exponent - 1);\n}\n\nint main() {\n    int base, exponent;\n    cout << \"Enter base: \";\n    cin >> base;\n    cout << \"Enter exponent: \";\n    cin >> exponent;\n\n    int result = power(base, exponent);\n    cout << \"Result: \" << result << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint power(int base, int exponent) {\n    if (exponent == 0) {\n        return 1;\n    }\n    return base * power(base, exponent - 1);\n}\n\nint main() {\n    int base, exponent;\n    cout << \"Enter base: \";\n    cin >> base;\n    cout << \"Enter exponent: \";\n    cin >> exponent;\n\n    int result = power(base, exponent);\n    cout << \"Result: \" << result << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Can you give me a shell script to change file permissions for all directories and files under a given path?",
        "input": "Path: /home/user/documents",
        "response": "#!/bin/bash\n\nTARGET_DIRECTORY=\"/home/user/documents\"\n\nfind \"$TARGET_DIRECTORY\" -type d -exec chmod 755 {} \\;\nfind \"$TARGET_DIRECTORY\" -type f -exec chmod 644 {} \\;",
        "output": "#!/bin/bash\n\nTARGET_DIRECTORY=\"/home/user/documents\"\n\nfind \"$TARGET_DIRECTORY\" -type d -exec chmod 755 {} \\;\nfind \"$TARGET_DIRECTORY\" -type f -exec chmod 644 {} \\;"
    },
    {
        "instruction": "Design a simple Python API using the FastAPI library in order to store and display information about vehicles.",
        "input": "{\"make\": \"Toyota\", \"model\": \"Camry\", \"year\": 2022}",
        "response": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Vehicle(BaseModel):\n    make: str\n    model: str\n    year: int\n\nvehicles = []\n\n@app.post('/add_vehicle')\ndef add_vehicle(vehicle: Vehicle):\n    vehicles.append(vehicle)\n    return {'message': 'Vehicle added'}\n\n@app.get('/vehicles')\ndef get_vehicles():\n    return {'vehicles': vehicles}",
        "output": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Vehicle(BaseModel):\n    make: str\n    model: str\n    year: int\n\nvehicles = []\n\n@app.post('/add_vehicle')\ndef add_vehicle(vehicle: Vehicle):\n    vehicles.append(vehicle)\n    return {'message': 'Vehicle added'}\n\n@app.get('/vehicles')\ndef get_vehicles():\n    return {'vehicles': vehicles}"
    },
    {
        "instruction": "Create a JavaScript function that removes duplicates from a given array of integers.",
        "input": "[1, 2, 2, 3, 4, 4, 5]",
        "response": "function removeDuplicates(arr) {\n    let uniqueArr = [...new Set(arr)];\n    return uniqueArr;\n}\n\nconst result = removeDuplicates([1, 2, 2, 3, 4, 4, 5]);\nconsole.log(result);",
        "output": "function removeDuplicates(arr) {\n    let uniqueArr = [...new Set(arr)];\n    return uniqueArr;\n}\n\nconst result = removeDuplicates([1, 2, 2, 3, 4, 4, 5]);\nconsole.log(result);"
    },
    {
        "instruction": "Design a C# function that receives a list of integers and determines if they are in ascending order.",
        "input": "new List<int>{1, 2, 3, 4}",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass AscendingOrderCheck\n{\n    public static bool IsAscending(List<int> numbers)\n    {\n        for (int i = 0; i < numbers.Count - 1; i++)\n        {\n            if (numbers[i] > numbers[i+1])\n                return false;\n        }\n        return true;\n    }\n\n    static void Main()\n    {\n        List<int> nums = new List<int>{1, 2, 3, 4};\n        Console.WriteLine(IsAscending(nums));\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass AscendingOrderCheck\n{\n    public static bool IsAscending(List<int> numbers)\n    {\n        for (int i = 0; i < numbers.Count - 1; i++)\n        {\n            if (numbers[i] > numbers[i+1])\n                return false;\n        }\n        return true;\n    }\n\n    static void Main()\n    {\n        List<int> nums = new List<int>{1, 2, 3, 4};\n        Console.WriteLine(IsAscending(nums));\n    }}"
    },
    {
        "instruction": "Using Python, create a function that shuffles the elements of a given list.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "import random\n\ndef shuffle_list(lst):\n    return random.sample(lst, len(lst))\n\nmy_list = [1, 2, 3, 4, 5]\nshuffled_list = shuffle_list(my_list)\nprint(shuffled_list)",
        "output": "import random\n\ndef shuffle_list(lst):\n    return random.sample(lst, len(lst))\n\nmy_list = [1, 2, 3, 4, 5]\nshuffled_list = shuffle_list(my_list)\nprint(shuffled_list)"
    },
    {
        "instruction": "How would you implement a simple React component that displays the message 'Welcome to the App'?",
        "input": "",
        "response": "import React from 'react';\n\nclass WelcomeComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome to the App</h1>\n            </div>\n        );\n    }}\n\nexport default WelcomeComponent;",
        "output": "import React from 'react';\n\nclass WelcomeComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome to the App</h1>\n            </div>\n        );\n    }}\n\nexport default WelcomeComponent;"
    },
    {
        "instruction": "Write a PHP script that generates an array of the first 'n' even numbers.",
        "input": "5",
        "response": "<?php\n\nfunction generate_even_numbers($n)\n{\n    $even_numbers = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $even_numbers[] = 2 * $i;\n    }\n    return $even_numbers;}\n\n$number_of_even_numbers = 5;\n$even_numbers = generate_even_numbers($number_of_even_numbers);\nprint_r($even_numbers);\n?>",
        "output": "<?php\n\nfunction generate_even_numbers($n)\n{\n    $even_numbers = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $even_numbers[] = 2 * $i;\n    }\n    return $even_numbers;}\n\n$number_of_even_numbers = 5;\n$even_numbers = generate_even_numbers($number_of_even_numbers);\nprint_r($even_numbers);\n?>"
    },
    {
        "instruction": "Write a Python function that takes a CSV file and returns the number of rows and columns in it.",
        "input": "filename = 'example.csv'\n\n# Contents of example.csv\n# Name,Age,Gender\n# Alice,25,Female\n# Bob,33,Male\n# Charlie,22,Male",
        "response": "import csv\n\ndef count_rows_columns(filename):\n    with open(filename, 'r') as csvfile:\n        csvreader = csv.reader(csvfile)\n        row_count = sum(1 for row in csvreader)\n        column_count = len(next(csv.reader(open(filename))))\n    return row_count, column_count\n\nfilename = 'example.csv'\nprint(count_rows_columns(filename))",
        "output": "import csv\n\ndef count_rows_columns(filename):\n    with open(filename, 'r') as csvfile:\n        csvreader = csv.reader(csvfile)\n        row_count = sum(1 for row in csvreader)\n        column_count = len(next(csv.reader(open(filename))))\n    return row_count, column_count\n\nfilename = 'example.csv'\nprint(count_rows_columns(filename))"
    },
    {
        "instruction": "How would you write a function in JavaScript to debounce API calls?",
        "input": "function fetchData(query) {\n    console.log('Fetching data with query:', query);\n}\n\ndebouncedFetchData = debounce(fetchData, 300);\n\n// Usage example\ndebouncedFetchData('search query');",
        "response": "function debounce(func, wait) {\n    let timeout;\n\n    return function (...args) {\n        const context = this;\n        const later = function () {\n            timeout = null;\n            func.apply(context, args);\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nfunction fetchData(query) {\n    console.log('Fetching data with query:', query);\n}\n\ndebouncedFetchData = debounce(fetchData, 300);\n\n// Usage example\ndebouncedFetchData('search query');",
        "output": "function debounce(func, wait) {\n    let timeout;\n\n    return function (...args) {\n        const context = this;\n        const later = function () {\n            timeout = null;\n            func.apply(context, args);\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nfunction fetchData(query) {\n    console.log('Fetching data with query:', query);\n}\n\ndebouncedFetchData = debounce(fetchData, 300);\n\n// Usage example\ndebouncedFetchData('search query');"
    },
    {
        "instruction": "Implement a C program that reads a text file and counts the number of lines in it.",
        "input": "char *filename = \"example.txt\";\n\n/* Contents of example.txt\nThis is line 1\nThis is line 2\nThis is line 3 */",
        "response": "#include <stdio.h>\n\nint main() {\n    char buffer[1000];\n    int line_count = 0;\n    char *filename = \"example.txt\";\n    FILE *file = fopen(filename, \"r\");\n\n    if (file == NULL) {\n        printf(\"File not found\\n\");\n        return 1;\n    }\n\n    while (fgets(buffer, sizeof(buffer), file) != NULL) {\n        line_count++;\n    }\n\n    fclose(file);\n    printf(\"Number of lines: %d\\n\", line_count);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    char buffer[1000];\n    int line_count = 0;\n    char *filename = \"example.txt\";\n    FILE *file = fopen(filename, \"r\");\n\n    if (file == NULL) {\n        printf(\"File not found\\n\");\n        return 1;\n    }\n\n    while (fgets(buffer, sizeof(buffer), file) != NULL) {\n        line_count++;\n    }\n\n    fclose(file);\n    printf(\"Number of lines: %d\\n\", line_count);\n    return 0;\n}"
    },
    {
        "instruction": "Write an SQL query to fetch records from the 'employees' table where the salary is higher than a given number.",
        "input": "employees_table = [\n    {'id': 1, 'name': 'Alice', 'salary': 80000},\n    {'id': 2, 'name': 'Bob', 'salary': 90000},\n    {'id': 3, 'name': 'Charlie', 'salary': 70000}\n]\nsalary_threshold = 75000",
        "response": "SELECT * FROM employees WHERE salary > 75000;",
        "output": "SELECT * FROM employees WHERE salary > 75000;"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of an integer n.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 1 || n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    std::cout << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 1 || n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    std::cout << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a shell script that counts the number of files in a directory and its subdirectories.",
        "input": "~/Documents",
        "response": "#!/bin/bash\n\ndir=~/Documents\ncount=$(find \"$dir\" -type f | wc -l)\necho \"$dir contains $count files\"",
        "output": "#!/bin/bash\n\ndir=~/Documents\ncount=$(find \"$dir\" -type f | wc -l)\necho \"$dir contains $count files\""
    },
    {
        "instruction": "Design a Python class representing a rectangle with methods for calculating the area and perimeter.",
        "input": "{\"width\": 10, \"height\": 20}",
        "response": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n\n\nrectangle = Rectangle(10, 20)\nprint(\"Area: \", rectangle.area())\nprint(\"Perimeter: \", rectangle.perimeter())",
        "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n\n\nrectangle = Rectangle(10, 20)\nprint(\"Area: \", rectangle.area())\nprint(\"Perimeter: \", rectangle.perimeter())"
    },
    {
        "instruction": "Create a JavaScript function to make an API call using the Fetch API to get data from 'https://jsonplaceholder.typicode.com/posts'",
        "input": "",
        "response": "async function fetchData() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error(error);\n    }}\n\nfetchData();",
        "output": "async function fetchData() {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error(error);\n    }}\n\nfetchData();"
    },
    {
        "instruction": "Implement a Python function that accepts a list of numbers and returns the mean, median, and mode.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
        "response": "import statistics\n\ndef calculate_stats(lst):\n    mean = statistics.mean(lst)\n    median = statistics.median(lst)\n    mode = statistics.mode(lst)\n    return mean, median, mode\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nresult = calculate_stats(numbers)\nprint(f\"Mean: {result[0]}, Median: {result[1]}, Mode: {result[2]}\")",
        "output": "import statistics\n\ndef calculate_stats(lst):\n    mean = statistics.mean(lst)\n    median = statistics.median(lst)\n    mode = statistics.mode(lst)\n    return mean, median, mode\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nresult = calculate_stats(numbers)\nprint(f\"Mean: {result[0]}, Median: {result[1]}, Mode: {result[2]}\")"
    },
    {
        "instruction": "Design a Java class 'Dog' with properties 'name', 'age', and 'breed', and methods to bark and display dog's info.",
        "input": "Name: Max, Age: 5, Breed: Golden Retriever",
        "response": "public class Dog {\n    private String name;\n    private int age;\n    private String breed;\n\n    public Dog(String name, int age, String breed) {\n        this.name = name;\n        this.age = age;\n        this.breed = breed;\n    }\n\n    public void bark() {\n        System.out.println(\"Woof!\");\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Name: \" + name + \", Age: \" + age + \", Breed: \" + breed);\n    }\n\n    public static void main(String[] args) {\n        Dog max = new Dog(\"Max\", 5, \"Golden Retriever\");\n        max.bark();\n        max.displayInfo();\n    }}",
        "output": "public class Dog {\n    private String name;\n    private int age;\n    private String breed;\n\n    public Dog(String name, int age, String breed) {\n        this.name = name;\n        this.age = age;\n        this.breed = breed;\n    }\n\n    public void bark() {\n        System.out.println(\"Woof!\");\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Name: \" + name + \", Age: \" + age + \", Breed: \" + breed);\n    }\n\n    public static void main(String[] args) {\n        Dog max = new Dog(\"Max\", 5, \"Golden Retriever\");\n        max.bark();\n        max.displayInfo();\n    }}"
    },
    {
        "instruction": "Build a shell script that takes a filename as an argument and lists the file's permissions, size, and modification date.",
        "input": "test_file.txt",
        "response": "#!/bin/sh\n\nfilename=\"$1\"\n\nif [ -f \"$filename\" ]; then\n    permissions=$(stat -c \"%A\" \"$filename\")\n    size=$(stat -c \"%s\" \"$filename\")\n    modification_date=$(stat -c \"%y\" \"$filename\")\n\n    echo \"Permissions: $permissions\"\n    echo \"Size: $size bytes\"\n    echo \"Modification Date: $modification_date\"\nelse\n    echo \"File does not exist.\"\nfi\n\n# Usage: ./file_info.sh test_file.txt",
        "output": "#!/bin/sh\n\nfilename=\"$1\"\n\nif [ -f \"$filename\" ]; then\n    permissions=$(stat -c \"%A\" \"$filename\")\n    size=$(stat -c \"%s\" \"$filename\")\n    modification_date=$(stat -c \"%y\" \"$filename\")\n\n    echo \"Permissions: $permissions\"\n    echo \"Size: $size bytes\"\n    echo \"Modification Date: $modification_date\"\nelse\n    echo \"File does not exist.\"\nfi\n\n# Usage: ./file_info.sh test_file.txt"
    },
    {
        "instruction": "In Python, implement a function that accepts a dictionary and a key. If the key exists, return its value. Otherwise, return 'Key not found'.",
        "input": "{\"age\": 23, \"name\": \"Alice\"}, \"name\"",
        "response": "def get_value_from_dict(dictionary, key):\n    return dictionary.get(key, 'Key not found')\n\nmy_dict = {'age': 23, 'name': 'Alice'}\nresult = get_value_from_dict(my_dict, 'name')\nprint(result)",
        "output": "def get_value_from_dict(dictionary, key):\n    return dictionary.get(key, 'Key not found')\n\nmy_dict = {'age': 23, 'name': 'Alice'}\nresult = get_value_from_dict(my_dict, 'name')\nprint(result)"
    },
    {
        "instruction": "How would you construct a simple REST API using Node.js and Express.js that can store and retrieve user details in memory?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\nlet users = [];\n\napp.get('/users', (req, res) => {\n    res.send(users);});\n\napp.post('/users', (req, res) => {\n    const user = req.body;\n    users.push(user);\n    res.status(201).send('User added');});\n\napp.listen(port, () => {\n    console.log(`Server is running on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\nlet users = [];\n\napp.get('/users', (req, res) => {\n    res.send(users);});\n\napp.post('/users', (req, res) => {\n    const user = req.body;\n    users.push(user);\n    res.status(201).send('User added');});\n\napp.listen(port, () => {\n    console.log(`Server is running on port ${port}`);});"
    },
    {
        "instruction": "Create a Bash script that reads a file containing a list of file names, one per line, and deletes each file listed.",
        "input": "file_list.txt",
        "response": "#!/bin/bash\nfilename='file_list.txt'\n\nwhile read line; do\n    rm -f \"$line\"\ndone < $filename",
        "output": "#!/bin/bash\nfilename='file_list.txt'\n\nwhile read line; do\n    rm -f \"$line\"\ndone < $filename"
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of a given positive integer using a recursive function.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "In Python, implement a function that receives a string and returns the most frequent character in the string. If there are multiple characters with the same maximum frequency, return the one that appears first in the string.",
        "input": "\"programming\"",
        "response": "def most_frequent_char(s):\n    char_freq = {}\n    for char in s:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    \n    most_frequent = max(char_freq, key=char_freq.get)\n    return most_frequent\n\ninput_str = \"programming\"\nresult = most_frequent_char(input_str)\nprint(f\"The most frequent character in '{input_str}' is: {result}\")",
        "output": "def most_frequent_char(s):\n    char_freq = {}\n    for char in s:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    \n    most_frequent = max(char_freq, key=char_freq.get)\n    return most_frequent\n\ninput_str = \"programming\"\nresult = most_frequent_char(input_str)\nprint(f\"The most frequent character in '{input_str}' is: {result}\")"
    },
    {
        "instruction": "How would you write a JavaScript snippet that counts the number of words in a sentence?",
        "input": "\"Artificial Intelligence is fun.\"",
        "response": "function wordCount(sentence) {\n    return sentence.split(' ').length;}\n\nconst inputSentence = \"Artificial Intelligence is fun.\";\nconst count = wordCount(inputSentence);\nconsole.log(`The number of words in the sentence: '${inputSentence}' is ${count}`);",
        "output": "function wordCount(sentence) {\n    return sentence.split(' ').length;}\n\nconst inputSentence = \"Artificial Intelligence is fun.\";\nconst count = wordCount(inputSentence);\nconsole.log(`The number of words in the sentence: '${inputSentence}' is ${count}`);"
    },
    {
        "instruction": "Design a shell script that takes a file name as a command line argument and outputs the number of lines in the file.",
        "input": "file.txt (content: \"line 1\\nline 2\\nline 3\\n\")",
        "response": "#!/bin/sh\n\nfilename=\"$1\"\nline_count=$(wc -l < \"$filename\")\necho \"The number of lines in '${filename}' is ${line_count}\"",
        "output": "#!/bin/sh\n\nfilename=\"$1\"\nline_count=$(wc -l < \"$filename\")\necho \"The number of lines in '${filename}' is ${line_count}\""
    },
    {
        "instruction": "Develop a C++ program to calculate the factorial of a given integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 5;\n    int result = factorial(number);\n    cout << \"Factorial of \" << number << \" is \" << result << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 5;\n    int result = factorial(number);\n    cout << \"Factorial of \" << number << \" is \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "Can you generate a Python script that grabs the HTML content of a given URL using the 'requests' library?",
        "input": "https://www.example.com",
        "response": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    html_content = response.text\n    print(html_content)\nelse:\n    print(\"Error fetching the URL\")",
        "output": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    html_content = response.text\n    print(html_content)\nelse:\n    print(\"Error fetching the URL\")"
    },
    {
        "instruction": "Write a JavaScript function that, given an input string, counts the occurrence of each character and returns it as an object.",
        "input": "abracadabra",
        "response": "function countCharacterOccurrences(str) {\n    let charCounts = {};\n    for (const char of str) {\n        charCounts[char] = (charCounts[char] || 0) + 1;\n    }\n    return charCounts;}\n\nconst inputStr = \"abracadabra\";\nconst result = countCharacterOccurrences(inputStr);\nconsole.log(result);",
        "output": "function countCharacterOccurrences(str) {\n    let charCounts = {};\n    for (const char of str) {\n        charCounts[char] = (charCounts[char] || 0) + 1;\n    }\n    return charCounts;}\n\nconst inputStr = \"abracadabra\";\nconst result = countCharacterOccurrences(inputStr);\nconsole.log(result);"
    },
    {
        "instruction": "Create a Shell script that finds all files in a directory tree older than a user-specified number of days and deletes them.",
        "input": "/path/to/directory, 30",
        "response": "#!/bin/sh\n\ndirectory=\"/path/to/directory\"\ndays_old=30\n\nfind \"$directory\" -type f -mtime +\"$days_old\" -exec rm -f {} \\;\n\necho \"Files older than $days_old days have been deleted.\"",
        "output": "#!/bin/sh\n\ndirectory=\"/path/to/directory\"\ndays_old=30\n\nfind \"$directory\" -type f -mtime +\"$days_old\" -exec rm -f {} \\;\n\necho \"Files older than $days_old days have been deleted.\""
    },
    {
        "instruction": "Can you fix the following JavaScript code that is intended to reverse a string?",
        "input": "function reverseString(s) {\n    return s.reverse();\n}\n\nconsole.log(reverseString('hello'));",
        "response": "function reverseString(s) {\n    return s.split('').reverse().join('');}\n\nconsole.log(reverseString('hello'));",
        "output": "function reverseString(s) {\n    return s.split('').reverse().join('');}\n\nconsole.log(reverseString('hello'));"
    },
    {
        "instruction": "Write a Python program to read input from a text file and print the content on the console. Use 'sample.txt' as the input file.",
        "input": "sample.txt",
        "response": "with open('sample.txt', 'r') as file:\n    content = file.read()\nprint(content)",
        "output": "with open('sample.txt', 'r') as file:\n    content = file.read()\nprint(content)"
    },
    {
        "instruction": "How would you implement a simple REST API using Flask and Python that calculates the square of a given number?",
        "input": "7",
        "response": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/square', methods=['GET'])\ndef square_number():\n    num = request.args.get('number', type=int)\n    result = num * num\n    return jsonify({'result': result})\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/square', methods=['GET'])\ndef square_number():\n    num = request.args.get('number', type=int)\n    result = num * num\n    return jsonify({'result': result})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Implement a C++ function that calculates and returns the factorial of an input integer.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"The factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"The factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Fix the indentation issue in the given Python code.",
        "input": "def greet(name):\n print(\"Hello, \" + name)\n\nif __name__ == '__main__':\ngreet(\"Alice\")",
        "response": "def greet(name):\n    print(\"Hello, \" + name)\n\nif __name__ == '__main__':\n    greet(\"Alice\")",
        "output": "def greet(name):\n    print(\"Hello, \" + name)\n\nif __name__ == '__main__':\n    greet(\"Alice\")"
    },
    {
        "instruction": "How do I write a shell script in Bash that takes a file as input and prints the number of lines in it?",
        "input": "textFile.txt",
        "response": "#!/bin/bash\n\nfilename=\"$1\"\n\nif [[ -r \"$filename\" ]]; then\n    line_count=$(wc -l < \"$filename\")\n    echo \"The number of lines in the file is: $line_count\"\nelse\n    echo \"File not found or not readable.\"\nfi\n\n# Usage: bash script_name.sh textFile.txt",
        "output": "#!/bin/bash\n\nfilename=\"$1\"\n\nif [[ -r \"$filename\" ]]; then\n    line_count=$(wc -l < \"$filename\")\n    echo \"The number of lines in the file is: $line_count\"\nelse\n    echo \"File not found or not readable.\"\nfi\n\n# Usage: bash script_name.sh textFile.txt"
    },
    {
        "instruction": "Design a JavaScript function that takes an object with name and age properties and returns a greeting based on their age.",
        "input": "{\"name\": \"Alice\", \"age\": 28}",
        "response": "function ageGreeting(person) {\n    let ageCategory = '';\n\n    if (person.age < 18) {\n        ageCategory = 'young';\n    } else if (person.age >= 18 && person.age <= 30) {\n        ageCategory = 'adult';\n    } else {\n        ageCategory = 'senior';\n    }\n\n    return `Hello ${person.name}, you are a ${ageCategory} person.`;}\n\nconst personObj = {\"name\": \"Alice\", \"age\": 28};\nconsole.log(ageGreeting(personObj));",
        "output": "function ageGreeting(person) {\n    let ageCategory = '';\n\n    if (person.age < 18) {\n        ageCategory = 'young';\n    } else if (person.age >= 18 && person.age <= 30) {\n        ageCategory = 'adult';\n    } else {\n        ageCategory = 'senior';\n    }\n\n    return `Hello ${person.name}, you are a ${ageCategory} person.`;}\n\nconst personObj = {\"name\": \"Alice\", \"age\": 28};\nconsole.log(ageGreeting(personObj));"
    },
    {
        "instruction": "Write a C function that calculates the factorial of a given integer, using recursion.",
        "input": "5",
        "response": "int factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    printf(\"The factorial of %d is %d\\n\", num, result);\n    return 0;}",
        "output": "int factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    printf(\"The factorial of %d is %d\\n\", num, result);\n    return 0;}"
    },
    {
        "instruction": "How would you create a Python script for making a GET request to a given API endpoint and parse the JSON response?",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\n\ndef fetch_data(api_url):\n    response = requests.get(api_url)\n    json_data = response.json()\n    return json_data\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\ndata = fetch_data(url)\nprint(data)",
        "output": "import requests\n\ndef fetch_data(api_url):\n    response = requests.get(api_url)\n    json_data = response.json()\n    return json_data\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\ndata = fetch_data(url)\nprint(data)"
    },
    {
        "instruction": "Implement a JavaScript function that compares two objects by their properties and returns true if they have the same key-value pairs.",
        "input": "{\"key1\": \"value1\", \"key2\": \"value2\"}, {\"key1\": \"value1\", \"key2\": \"value2\"}",
        "response": "function compareObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (const key of keys1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n\n    return true;}\n\nconst obj1 = {\"key1\": \"value1\", \"key2\": \"value2\"};\nconst obj2 = {\"key1\": \"value1\", \"key2\": \"value2\"};\nconsole.log(compareObjects(obj1, obj2));",
        "output": "function compareObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n\n    for (const key of keys1) {\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n\n    return true;}\n\nconst obj1 = {\"key1\": \"value1\", \"key2\": \"value2\"};\nconst obj2 = {\"key1\": \"value1\", \"key2\": \"value2\"};\nconsole.log(compareObjects(obj1, obj2));"
    },
    {
        "instruction": "Write a shell script that searches a given directory for files with a certain extension and outputs the total count.",
        "input": "/path/to/directory, .txt",
        "response": "directory=/path/to/directory\nextension=.txt\n\ncount=$(find \"$directory\" -type f -iname \"*$extension\" | wc -l)\necho \"Total files with $extension extension: $count\"",
        "output": "directory=/path/to/directory\nextension=.txt\n\ncount=$(find \"$directory\" -type f -iname \"*$extension\" | wc -l)\necho \"Total files with $extension extension: $count\""
    },
    {
        "instruction": "Design a Python script to read the content of a text file, count the occurrences of each word, and store the result in a dictionary.",
        "input": "example.txt containing: 'the quick brown dog jumped over the lazy brown dog'",
        "response": "def count_words(file_path):\n    with open(file_path, 'r') as f:\n        content = f.read()\n    words = content.split()\n    word_count = {}\n    for word in words:\n        word = word.lower()\n        word_count[word] = word_count.get(word, 0) + 1\n    return word_count\n\nresult = count_words('example.txt')\nprint(result)",
        "output": "def count_words(file_path):\n    with open(file_path, 'r') as f:\n        content = f.read()\n    words = content.split()\n    word_count = {}\n    for word in words:\n        word = word.lower()\n        word_count[word] = word_count.get(word, 0) + 1\n    return word_count\n\nresult = count_words('example.txt')\nprint(result)"
    },
    {
        "instruction": "Write a C# function that takes a list of strings, and returns a list of those strings sorted alphabetically, ignoring case.",
        "input": "[\"apple\", \"banana\", \"Cherry\", \"date\"]",
        "response": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program {\n    public static List<string> SortStringsIgnoreCase(List<string> input) {\n        return input.OrderBy(s => s.ToLower()).ToList();\n    }\n\n    public static void Main() {\n        List<string> input = new List<string> { \"apple\", \"banana\", \"Cherry\", \"date\" };\n        List<string> sorted = SortStringsIgnoreCase(input);\n        Console.WriteLine(string.Join(\", \", sorted));\n    }\n}",
        "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program {\n    public static List<string> SortStringsIgnoreCase(List<string> input) {\n        return input.OrderBy(s => s.ToLower()).ToList();\n    }\n\n    public static void Main() {\n        List<string> input = new List<string> { \"apple\", \"banana\", \"Cherry\", \"date\" };\n        List<string> sorted = SortStringsIgnoreCase(input);\n        Console.WriteLine(string.Join(\", \", sorted));\n    }\n}"
    },
    {
        "instruction": "Can you make a PHP function that converts a snake_case string to camelCase?",
        "input": "\"hello_world\"",
        "response": "<?php\n\nfunction snakeToCamel($input) {\n    $words = explode('_', $input);\n    $camelCased = $words[0];\n    for ($i = 1; $i < count($words); $i++) {\n        $camelCased .= ucfirst($words[$i]);\n    }\n    return $camelCased;\n}\n\n$input = 'hello_world';\n$result = snakeToCamel($input);\necho $result;\n\n?>",
        "output": "<?php\n\nfunction snakeToCamel($input) {\n    $words = explode('_', $input);\n    $camelCased = $words[0];\n    for ($i = 1; $i < count($words); $i++) {\n        $camelCased .= ucfirst($words[$i]);\n    }\n    return $camelCased;\n}\n\n$input = 'hello_world';\n$result = snakeToCamel($input);\necho $result;\n\n?>"
    },
    {
        "instruction": "Write a Python function that calculates the factorial of a given integer.",
        "input": "4",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(4)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(4)\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function to convert a given temperature in Celsius to Fahrenheit.",
        "input": "25",
        "response": "function celsiusToFahrenheit(celsius) {\n    const fahrenheit = (celsius * 9/5) + 32;\n    return fahrenheit;}\n\nconst temperature = 25;\nconsole.log(celsiusToFahrenheit(temperature));",
        "output": "function celsiusToFahrenheit(celsius) {\n    const fahrenheit = (celsius * 9/5) + 32;\n    return fahrenheit;}\n\nconst temperature = 25;\nconsole.log(celsiusToFahrenheit(temperature));"
    },
    {
        "instruction": "What could be done to improve this Java code snippet to sum elements in an array, using the streams API?",
        "input": "int[] numbers = {1, 2, 3, 4, 5};\nint sum = 0;\nfor (int i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n}",
        "response": "import java.util.Arrays;\n\nint[] numbers = {1, 2, 3, 4, 5};\nint sum = Arrays.stream(numbers).sum();\n\nSystem.out.println(sum);",
        "output": "import java.util.Arrays;\n\nint[] numbers = {1, 2, 3, 4, 5};\nint sum = Arrays.stream(numbers).sum();\n\nSystem.out.println(sum);"
    },
    {
        "instruction": "Implement a shell script for logging the file sizes of every file in a given directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndirectory='/path/to/directory'\n\nfor file in \"$directory\"/*; do\n    echo \"$(basename \"$file\"): $(stat -c %s \"$file\") bytes\"\ndone",
        "output": "#!/bin/bash\n\ndirectory='/path/to/directory'\n\nfor file in \"$directory\"/*; do\n    echo \"$(basename \"$file\"): $(stat -c %s \"$file\") bytes\"\ndone"
    },
    {
        "instruction": "Implement a C++ function to find the factorial of a given positive number.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    return (n == 0 || n == 1) ? 1 : n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is : \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    return (n == 0 || n == 1) ? 1 : n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is : \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python script to extract a list of unique words from a given text file using sets.",
        "input": "content.txt: \"The quick brown fox jumps over the lazy dog. Fox is quick and dog is lazy.\"",
        "response": "def extract_unique_words(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n        words = content.split()\n        unique_words = set(words)\n    return unique_words\n\nfile_path = 'content.txt'\nunique_words_list = extract_unique_words(file_path)\nprint(unique_words_list)",
        "output": "def extract_unique_words(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n        words = content.split()\n        unique_words = set(words)\n    return unique_words\n\nfile_path = 'content.txt'\nunique_words_list = extract_unique_words(file_path)\nprint(unique_words_list)"
    },
    {
        "instruction": "In JavaScript, can you create a function that takes an HTML table id as input and converts the table contents into a CSV string?",
        "input": "<table id=\"data\"><tr><th>Header1</th><th>Header2</th></tr><tr><td>Row1Col1</td><td>Row1Col2</td></tr><tr><td>Row2Col1</td><td>Row2Col2</td></tr></table>",
        "response": "function tableToCSV(tableId) {\n    let table = document.getElementById(tableId);\n    let rows = Array.from(table.querySelectorAll('tr'));\n    let csv = '';\n    \n    rows.forEach((row, idx) => {\n        let cols = Array.from(row.querySelectorAll('th, td'));\n        \n        cols.forEach((col, colIdx) => {\n            csv += col.innerText.replace(/,/g, '');\n            if (colIdx < cols.length - 1) {\n                csv += ',';\n            }\n        });\n        \n        if (idx < rows.length - 1) {\n            csv += '\\n';\n        }\n    });\n    \n    return csv;}\n\nlet csvString = tableToCSV('data');\nconsole.log(csvString);",
        "output": "function tableToCSV(tableId) {\n    let table = document.getElementById(tableId);\n    let rows = Array.from(table.querySelectorAll('tr'));\n    let csv = '';\n    \n    rows.forEach((row, idx) => {\n        let cols = Array.from(row.querySelectorAll('th, td'));\n        \n        cols.forEach((col, colIdx) => {\n            csv += col.innerText.replace(/,/g, '');\n            if (colIdx < cols.length - 1) {\n                csv += ',';\n            }\n        });\n        \n        if (idx < rows.length - 1) {\n            csv += '\\n';\n        }\n    });\n    \n    return csv;}\n\nlet csvString = tableToCSV('data');\nconsole.log(csvString);"
    },
    {
        "instruction": "Design a C# program that calculates and displays the result of raising a number to a specific power.",
        "input": "base_number: 2, exponent: 3",
        "response": "using System;\n\nclass PowerCalculator {\n    public static double CalculatePower(double base_number, int exponent) {\n        return Math.Pow(base_number, exponent);\n    }\n    \n    static void Main() {\n        double base_number = 2;\n        int exponent = 3;\n        double result = CalculatePower(base_number, exponent);\n        Console.WriteLine($\"{base_number} to the power of {exponent} is: {result}\");\n    }}",
        "output": "using System;\n\nclass PowerCalculator {\n    public static double CalculatePower(double base_number, int exponent) {\n        return Math.Pow(base_number, exponent);\n    }\n    \n    static void Main() {\n        double base_number = 2;\n        int exponent = 3;\n        double result = CalculatePower(base_number, exponent);\n        Console.WriteLine($\"{base_number} to the power of {exponent} is: {result}\");\n    }}"
    },
    {
        "instruction": "Write a C program that reads user input of three integers representing the sides of a triangle, and determines if it's a valid triangle.",
        "input": "3, 4, 5",
        "response": "#include <stdio.h>\n\nint main() {\n    int a, b, c;\n\n    printf(\"Enter three sides of a triangle: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n\n    if (a + b > c && a + c > b && b + c > a) {\n        printf(\"Valid triangle\\n\");\n    } else {\n        printf(\"Invalid triangle\\n\");\n    }\n\n    return 0;}",
        "output": "#include <stdio.h>\n\nint main() {\n    int a, b, c;\n\n    printf(\"Enter three sides of a triangle: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n\n    if (a + b > c && a + c > b && b + c > a) {\n        printf(\"Valid triangle\\n\");\n    } else {\n        printf(\"Invalid triangle\\n\");\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Create a Python function that accepts a list of strings and returns a dictionary where the keys are the unique words in the list and the values are their frequencies.",
        "input": "[\"apple\", \"banana\", \"apple\", \"grape\", \"banana\"]",
        "response": "def word_frequencies(words):\n    freq_dict = {}\n    for word in words:\n        freq_dict[word] = freq_dict.get(word, 0) + 1\n    return freq_dict\n\nwords_list = [\"apple\", \"banana\", \"apple\", \"grape\", \"banana\"]\nresult = word_frequencies(words_list)\nprint(result)",
        "output": "def word_frequencies(words):\n    freq_dict = {}\n    for word in words:\n        freq_dict[word] = freq_dict.get(word, 0) + 1\n    return freq_dict\n\nwords_list = [\"apple\", \"banana\", \"apple\", \"grape\", \"banana\"]\nresult = word_frequencies(words_list)\nprint(result)"
    },
    {
        "instruction": "Write JavaScript code that takes an input array of objects with properties 'name' and 'age', and filters the array based on a given minimum age.",
        "input": "[{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 19}, {\"name\": \"Eve\", \"age\": 31}], 20",
        "response": "function filterByMinimumAge(arr, minAge) {\n    return arr.filter(person => person.age >= minAge);}\n\nconst inputArray = [{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 19}, {\"name\": \"Eve\", \"age\": 31}];\nconst result = filterByMinimumAge(inputArray, 20);\nconsole.log(result);",
        "output": "function filterByMinimumAge(arr, minAge) {\n    return arr.filter(person => person.age >= minAge);}\n\nconst inputArray = [{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 19}, {\"name\": \"Eve\", \"age\": 31}];\nconst result = filterByMinimumAge(inputArray, 20);\nconsole.log(result);"
    },
    {
        "instruction": "Construct a Bash script that calculates the sum of a range of numbers in a given CSV file, considering only the values in the specified column.",
        "input": "file.csv (contains: \"1,8,15\\n2,3,25\\n12,5,7\\n9,20,13\\n10,18,30\"), 2",
        "response": "#!/bin/bash\n\nFILE=\"file.csv\"\nCOLUMN=2\n\nawk -F, -v col=$COLUMN '{sum += $col} END {print sum}' $FILE",
        "output": "#!/bin/bash\n\nFILE=\"file.csv\"\nCOLUMN=2\n\nawk -F, -v col=$COLUMN '{sum += $col} END {print sum}' $FILE"
    },
    {
        "instruction": "Implement a C++ function that computes the Fibonacci sequence to the nth number, using recursion.",
        "input": "fibonacci_recursive(10)",
        "response": "#include<iostream>\n\nusing namespace std;\n\nint fibonacci_recursive(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);}\n\nint main() {\n    int n = 10;\n    int result = fibonacci_recursive(n);\n    cout << result << endl;\n    return 0;}",
        "output": "#include<iostream>\n\nusing namespace std;\n\nint fibonacci_recursive(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);}\n\nint main() {\n    int n = 10;\n    int result = fibonacci_recursive(n);\n    cout << result << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you create an API call using Python's requests library to fetch JSON data from a given URL?",
        "input": "https://jsonplaceholder.typicode.com/posts/1",
        "response": "import requests\n\ndef fetch_json(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\nurl = 'https://jsonplaceholder.typicode.com/posts/1'\nresult = fetch_json(url)\nprint(result)",
        "output": "import requests\n\ndef fetch_json(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\nurl = 'https://jsonplaceholder.typicode.com/posts/1'\nresult = fetch_json(url)\nprint(result)"
    },
    {
        "instruction": "Design a JavaScript function to split a text string into separate words and return an array of words.",
        "input": "splitText('The quick brown fox jumps over the lazy dog')",
        "response": "function splitText(text) {\n    return text.split(' ');}\n\nconst result = splitText('The quick brown fox jumps over the lazy dog');\nconsole.log(result);",
        "output": "function splitText(text) {\n    return text.split(' ');}\n\nconst result = splitText('The quick brown fox jumps over the lazy dog');\nconsole.log(result);"
    },
    {
        "instruction": "Create a shell script that takes a filename as an argument and returns the number of lines in the file.",
        "input": "count_lines.sh sample.txt",
        "response": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n    echo \"Usage: count_lines.sh <filename>\"\n    exit 1\nfi\n\nfilename=$1\n\nif [ ! -e \"$filename\" ]; then\n    echo \"File does not exist.\"\n    exit 1\nfi\n\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines: $line_count\"",
        "output": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n    echo \"Usage: count_lines.sh <filename>\"\n    exit 1\nfi\n\nfilename=$1\n\nif [ ! -e \"$filename\" ]; then\n    echo \"File does not exist.\"\n    exit 1\nfi\n\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines: $line_count\""
    },
    {
        "instruction": "How would you generate a list of Fibonacci numbers in Python, given an integer as the number of Fibonacci numbers to generate?",
        "input": "10",
        "response": "def generate_fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[:n]\n\nnumbers_to_generate = 10\nfibonacci_numbers = generate_fibonacci(numbers_to_generate)\nprint(fibonacci_numbers)",
        "output": "def generate_fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[:n]\n\nnumbers_to_generate = 10\nfibonacci_numbers = generate_fibonacci(numbers_to_generate)\nprint(fibonacci_numbers)"
    },
    {
        "instruction": "Compose a PHP script that connects to a MySQL database with given user name and password, creates a table called 'products', then inserts a product into the table.",
        "input": "Database: 'myDatabase', User: 'myUser', Password: 'myPass', Product: {Name: 'Example Product', Price: 19.99}",
        "response": "<?php\n$server = 'localhost';\n$username = 'myUser';\n$password = 'myPass';\n$db = 'myDatabase';\n\n$conn = new mysqli($server, $username, $password, $db);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);}\n\n$sql = 'CREATE TABLE products (\n    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    price DECIMAL(10, 2) NOT NULL\n)';\n\nif ($conn->query($sql) === TRUE) {\n    $name = 'Example Product';\n    $price = 19.99;\n    $stmt = $conn->prepare('INSERT INTO products (name, price) VALUES (?, ?)');\n    $stmt->bind_param('sd', $name, $price);\n    $stmt->execute();\n    echo 'Product inserted successfully';\n    $stmt->close();} else {\n    echo 'Error creating table or table already exists';}\n$conn->close();\n?>",
        "output": "<?php\n$server = 'localhost';\n$username = 'myUser';\n$password = 'myPass';\n$db = 'myDatabase';\n\n$conn = new mysqli($server, $username, $password, $db);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);}\n\n$sql = 'CREATE TABLE products (\n    id INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n    name VARCHAR(255) NOT NULL, \n    price DECIMAL(10, 2) NOT NULL\n)';\n\nif ($conn->query($sql) === TRUE) {\n    $name = 'Example Product';\n    $price = 19.99;\n    $stmt = $conn->prepare('INSERT INTO products (name, price) VALUES (?, ?)');\n    $stmt->bind_param('sd', $name, $price);\n    $stmt->execute();\n    echo 'Product inserted successfully';\n    $stmt->close();} else {\n    echo 'Error creating table or table already exists';}\n$conn->close();\n?>"
    },
    {
        "instruction": "Build a JavaScript function that accepts a JSON object representing a date (day, month, and year) and returns the day of the week as a string.",
        "input": "{\"day\": 20, \"month\": 11, \"year\": 2021}",
        "response": "function getDayOfWeek(dateObj) {\n    const { day, month, year } = dateObj;\n    const date = new Date(year, month - 1, day);\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return daysOfWeek[date.getDay()];}\n\nconst inputDate = { day: 20, month: 11, year: 2021 };\nconst dayOfWeek = getDayOfWeek(inputDate);\nconsole.log(dayOfWeek);",
        "output": "function getDayOfWeek(dateObj) {\n    const { day, month, year } = dateObj;\n    const date = new Date(year, month - 1, day);\n    const daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return daysOfWeek[date.getDay()];}\n\nconst inputDate = { day: 20, month: 11, year: 2021 };\nconst dayOfWeek = getDayOfWeek(inputDate);\nconsole.log(dayOfWeek);"
    },
    {
        "instruction": "Design a C++ function that accepts a string and reverses it in-place without using any additional data structures.",
        "input": "cppRevolution",
        "response": "#include <iostream>\n#include <string>\nusing namespace std;\n\nvoid reverse_string_in_place(string& input){\n    int n = input.length();\n    for(int i = 0; i < n / 2; i++) {\n        swap(input[i], input[n - i - 1]);\n    }}\n\nint main(){\n    string input = \"cppRevolution\";\n    reverse_string_in_place(input);\n    cout << input << endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\nusing namespace std;\n\nvoid reverse_string_in_place(string& input){\n    int n = input.length();\n    for(int i = 0; i < n / 2; i++) {\n        swap(input[i], input[n - i - 1]);\n    }}\n\nint main(){\n    string input = \"cppRevolution\";\n    reverse_string_in_place(input);\n    cout << input << endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a PHP function that calculates the factorial of an integer using recursion.",
        "input": "5",
        "response": "<?php\nfunction factorial($n) {\n    if ($n === 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }}\n\n$input = 5;\n$result = factorial($input);\necho \"The factorial of $input is $result\";\n?>",
        "output": "<?php\nfunction factorial($n) {\n    if ($n === 0) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }}\n\n$input = 5;\n$result = factorial($input);\necho \"The factorial of $input is $result\";\n?>"
    },
    {
        "instruction": "What is the proper way to define and implement a basic HTTP GET request using Node.js and the 'request' library?",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "const request = require('request');\n\nfunction makeGETRequest(url) {\n    request(url, (error, response, body) => {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        } else {\n            console.error(`Error: ${error}`);\n        }\n    });}\n\nconst url = \"https://jsonplaceholder.typicode.com/todos/1\";\nmakeGETRequest(url);",
        "output": "const request = require('request');\n\nfunction makeGETRequest(url) {\n    request(url, (error, response, body) => {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        } else {\n            console.error(`Error: ${error}`);\n        }\n    });}\n\nconst url = \"https://jsonplaceholder.typicode.com/todos/1\";\nmakeGETRequest(url);"
    },
    {
        "instruction": "Write a Shell script that reads through the contents of a text file, and for each line of the input file, generates the line's word count.",
        "input": "unix_lovers.txt",
        "response": "#!/bin/sh\n\ninput_file=\"unix_lovers.txt\"\n\nwhile read line\ndo\n    word_count=$(echo $line | wc -w)\n    echo \"Line: '$line' - Word Count: $word_count\"\ndone < $input_file",
        "output": "#!/bin/sh\n\ninput_file=\"unix_lovers.txt\"\n\nwhile read line\ndo\n    word_count=$(echo $line | wc -w)\n    echo \"Line: '$line' - Word Count: $word_count\"\ndone < $input_file"
    },
    {
        "instruction": "Design a Python function that accepts a list of words and returns a dictionary with the frequency of each length of word in the list.",
        "input": "[\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"]",
        "response": "def word_length_frequencies(words):\n    frequency = {}\n    for word in words:\n        length = len(word)\n        frequency[length] = frequency.get(length, 0) + 1\n    return frequency\n\nresult = word_length_frequencies([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"])\nprint(result)",
        "output": "def word_length_frequencies(words):\n    frequency = {}\n    for word in words:\n        length = len(word)\n        frequency[length] = frequency.get(length, 0) + 1\n    return frequency\n\nresult = word_length_frequencies([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"])\nprint(result)"
    },
    {
        "instruction": "Write a C++ program that calculates and prints the factorial of a given integer.",
        "input": "4",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 4;\n    int result = factorial(num);\n    std::cout << \"Factorial of \" << num << \" is: \" << result << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 4;\n    int result = factorial(num);\n    std::cout << \"Factorial of \" << num << \" is: \" << result << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you show me some PHP code that generates an array containing the square of each element in a given input array?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "<?php\n\nfunction squareArrayElements($arr) {\n    $squaredArr = [];\n    foreach ($arr as $num) {\n        $squaredArr[] = $num * $num;\n    }\n    return $squaredArr;}\n\n$input = [1, 2, 3, 4, 5];\n$squared = squareArrayElements($input);\nprint_r($squared);\n\n?>",
        "output": "<?php\n\nfunction squareArrayElements($arr) {\n    $squaredArr = [];\n    foreach ($arr as $num) {\n        $squaredArr[] = $num * $num;\n    }\n    return $squaredArr;}\n\n$input = [1, 2, 3, 4, 5];\n$squared = squareArrayElements($input);\nprint_r($squared);\n\n?>"
    },
    {
        "instruction": "Create a JavaScript snippet that removes duplicate elements from an array and returns the result.",
        "input": "[\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"]",
        "response": "function removeDuplicates(arr) {\n    return Array.from(new Set(arr));}\n\nconst input = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"];\nconst uniqueElements = removeDuplicates(input);\nconsole.log(uniqueElements);",
        "output": "function removeDuplicates(arr) {\n    return Array.from(new Set(arr));}\n\nconst input = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"];\nconst uniqueElements = removeDuplicates(input);\nconsole.log(uniqueElements);"
    },
    {
        "instruction": "Design a C++ program that reads a file of integers line by line and calculates the average.",
        "input": "10\n20\n30\n40\n",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inFile(\"input.txt\");\n    int num, sum = 0, count = 0;\n\n    while (inFile >> num) {\n        sum += num;\n        count++;\n    }\n    inFile.close();\n\n    double average = static_cast<double>(sum) / count;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inFile(\"input.txt\");\n    int num, sum = 0, count = 0;\n\n    while (inFile >> num) {\n        sum += num;\n        count++;\n    }\n    inFile.close();\n\n    double average = static_cast<double>(sum) / count;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Craft a Python script to fetch the current weather data using the OpenWeatherMap API for a specified location.",
        "input": "New York City, API_KEY",
        "response": "import requests\n\nAPI_KEY = 'YOUR_API_KEY'\ncity = 'New York City'\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=imperial\"\n\nresponse = requests.get(url)\nweather_data = response.json()\n\ntemperature = weather_data['main']['temp']\nhumidity = weather_data['main']['humidity']\ndescription = weather_data['weather'][0]['description']\n\nprint(f\"Temperature: {temperature}\u00b0F\nHumidity: {humidity}%\nDescription: {description}\")",
        "output": "import requests\n\nAPI_KEY = 'YOUR_API_KEY'\ncity = 'New York City'\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=imperial\"\n\nresponse = requests.get(url)\nweather_data = response.json()\n\ntemperature = weather_data['main']['temp']\nhumidity = weather_data['main']['humidity']\ndescription = weather_data['weather'][0]['description']\n\nprint(f\"Temperature: {temperature}\u00b0F\nHumidity: {humidity}%\nDescription: {description}\")"
    },
    {
        "instruction": "Implement a shell script that accepts a list of arguments, sorts them in ascending order, and prints each element on a separate line.",
        "input": "8 5 9 -2 11 1",
        "response": "#!/bin/bash\n\n# Store the arguments in an array\nargs=($@)\n\n# Sort the array\nfor ((i=0; i<${#args[@]}; i++)); do\n    for ((j=i+1; j<${#args[@]}; j++)); do\n        if [ ${args[$i]} -gt ${args[$j]} ]; then\n            temp=${args[$i]}\n            args[$i]=${args[$j]}\n            args[$j]=$temp\n        fi\n    done\ndone\n\n# Print the sorted array\nfor num in \"${args[@]}\"\ndo\n    echo $num\ndone",
        "output": "#!/bin/bash\n\n# Store the arguments in an array\nargs=($@)\n\n# Sort the array\nfor ((i=0; i<${#args[@]}; i++)); do\n    for ((j=i+1; j<${#args[@]}; j++)); do\n        if [ ${args[$i]} -gt ${args[$j]} ]; then\n            temp=${args[$i]}\n            args[$i]=${args[$j]}\n            args[$j]=$temp\n        fi\n    done\ndone\n\n# Print the sorted array\nfor num in \"${args[@]}\"\ndo\n    echo $num\ndone"
    },
    {
        "instruction": "What is a JavaScript code to fetch data from an API and display it on an HTML page?",
        "input": "API_URL",
        "response": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Data Fetching</title>\n</head>\n<body>\n    <div id=\"output\"></div>\n    <script>\n        async function fetchData() {\n            const API_URL = 'https://api.example.com/data';\n            const response = await fetch(API_URL);\n            const data = await response.json();\n\n            const outputElem = document.getElementById('output');\n            outputElem.innerHTML = JSON.stringify(data, null, 2);\n        }\n\n        fetchData();\n    </script>\n</body>\n</html>",
        "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Data Fetching</title>\n</head>\n<body>\n    <div id=\"output\"></div>\n    <script>\n        async function fetchData() {\n            const API_URL = 'https://api.example.com/data';\n            const response = await fetch(API_URL);\n            const data = await response.json();\n\n            const outputElem = document.getElementById('output');\n            outputElem.innerHTML = JSON.stringify(data, null, 2);\n        }\n\n        fetchData();\n    </script>\n</body>\n</html>"
    },
    {
        "instruction": "Create a C program to find the largest and smallest element in an array.",
        "input": "int arr[] = {1, 23, 47, 81, 92, 34, 67};",
        "response": "#include <stdio.h>\n#include <limits.h>\n\nint main() {\n    int arr[] = {1, 23, 47, 81, 92, 34, 67};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int largest = INT_MIN;\n    int smallest = INT_MAX;\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n        if (arr[i] < smallest) {\n            smallest = arr[i];\n        }\n    }\n\n    printf(\"Largest: %d\\n\", largest);\n    printf(\"Smallest: %d\\n\", smallest);\n    return 0;}",
        "output": "#include <stdio.h>\n#include <limits.h>\n\nint main() {\n    int arr[] = {1, 23, 47, 81, 92, 34, 67};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int largest = INT_MIN;\n    int smallest = INT_MAX;\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n        if (arr[i] < smallest) {\n            smallest = arr[i];\n        }\n    }\n\n    printf(\"Largest: %d\\n\", largest);\n    printf(\"Smallest: %d\\n\", smallest);\n    return 0;}"
    },
    {
        "instruction": "Write a JavaScript function that takes a string and returns the string reversed.",
        "input": "\"hello\"",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst reversed = reverseString('hello');\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst reversed = reverseString('hello');\nconsole.log(reversed);"
    },
    {
        "instruction": "Design a C++ program to implement a basic calculator with addition, subtraction, multiplication, and division functionalities.",
        "input": "5, '+' , 3",
        "response": "#include <iostream>\nusing namespace std;\n\ndouble calculate(double num1, double num2, char op) {\n    switch (op) {\n        case '+':\n            return num1 + num2;\n        case '-':\n            return num1 - num2;\n        case '*':\n            return num1 * num2;\n        case '/':\n            return num1 / num2;\n        default:\n            cout << \"Invalid operator.\" << endl;\n            return 0;\n    }}\n\nint main() {\n    double num1 = 5;\n    double num2 = 3;\n    char op = '+';\n\n    double result = calculate(num1, num2, op);\n    cout << \"Result: \"<<(result);\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\ndouble calculate(double num1, double num2, char op) {\n    switch (op) {\n        case '+':\n            return num1 + num2;\n        case '-':\n            return num1 - num2;\n        case '*':\n            return num1 * num2;\n        case '/':\n            return num1 / num2;\n        default:\n            cout << \"Invalid operator.\" << endl;\n            return 0;\n    }}\n\nint main() {\n    double num1 = 5;\n    double num2 = 3;\n    char op = '+';\n\n    double result = calculate(num1, num2, op);\n    cout << \"Result: \"<<(result);\n    return 0;}"
    },
    {
        "instruction": "Write a Python function that takes a string as input and returns a dictionary with the count of each character in the input string.",
        "input": "Hello, World!",
        "response": "def count_chars(s):\n    char_dict = {}\n    for ch in s:\n        char_dict[ch] = char_dict.get(ch, 0) + 1\n    return char_dict\n\nresult = count_chars('Hello, World!')\nprint(result)",
        "output": "def count_chars(s):\n    char_dict = {}\n    for ch in s:\n        char_dict[ch] = char_dict.get(ch, 0) + 1\n    return char_dict\n\nresult = count_chars('Hello, World!')\nprint(result)"
    },
    {
        "instruction": "Implement a C++ function that sorts a vector of integers in ascending order using the selection sort algorithm.",
        "input": "[23, 5, 67, 3, 93, 17]",
        "response": "#include <iostream>\n#include <vector>\n\nvoid selection_sort(std::vector<int>& vec) {\n    for (size_t i = 0; i < vec.size() - 1; ++i) {\n        size_t min_index = i;\n        for (size_t j = i + 1; j < vec.size(); ++j) {\n            if (vec[j] < vec[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(vec[i], vec[min_index]);\n    }}\n\nint main() {\n    std::vector<int> nums = {23, 5, 67, 3, 93, 17};\n    selection_sort(nums);\n\n    for (const int& n : nums) {\n        std::cout << n << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nvoid selection_sort(std::vector<int>& vec) {\n    for (size_t i = 0; i < vec.size() - 1; ++i) {\n        size_t min_index = i;\n        for (size_t j = i + 1; j < vec.size(); ++j) {\n            if (vec[j] < vec[min_index]) {\n                min_index = j;\n            }\n        }\n        std::swap(vec[i], vec[min_index]);\n    }}\n\nint main() {\n    std::vector<int> nums = {23, 5, 67, 3, 93, 17};\n    selection_sort(nums);\n\n    for (const int& n : nums) {\n        std::cout << n << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "How would you create a SQL query to count the number of users with the same email domain from a table named 'users' having columns 'id', 'name' and 'email'?",
        "input": "Table: users\nColumns: id, name, email\nData:\n1, John, john@example.com\n2, Jane, jane@example2.com\n3, Jill, jill@example.com",
        "response": "SELECT SUBSTRING_INDEX(email, '@', -1) AS domain, COUNT(*) AS domain_count\nFROM users\nGROUP BY domain\nORDER BY domain_count DESC;",
        "output": "SELECT SUBSTRING_INDEX(email, '@', -1) AS domain, COUNT(*) AS domain_count\nFROM users\nGROUP BY domain\nORDER BY domain_count DESC;"
    },
    {
        "instruction": "Build a PHP associative array to represent the following JSON object, and print the resulting JSON string: {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}",
        "input": "{\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}",
        "response": "<?php\n$person = array(\n    'name' => 'Alice',\n    'age' => 30,\n    'city' => 'New York'\n);\n\n$json_string = json_encode($person);\necho $json_string;\n?>",
        "output": "<?php\n$person = array(\n    'name' => 'Alice',\n    'age' => 30,\n    'city' => 'New York'\n);\n\n$json_string = json_encode($person);\necho $json_string;\n?>"
    },
    {
        "instruction": "Design a C# function that calculates and returns the factorial of a given positive integer.",
        "input": "5",
        "response": "using System;\n\npublic class FactorialCalculator\n{\n    public static long Factorial(int n)\n    {\n        if (n == 0) return 1;\n        return n * Factorial(n - 1);\n    }\n    \n    public static void Main(string[] args)\n    {\n        int input = 5;\n        long factorial = Factorial(input);\n        Console.WriteLine(factorial);\n    }}",
        "output": "using System;\n\npublic class FactorialCalculator\n{\n    public static long Factorial(int n)\n    {\n        if (n == 0) return 1;\n        return n * Factorial(n - 1);\n    }\n    \n    public static void Main(string[] args)\n    {\n        int input = 5;\n        long factorial = Factorial(input);\n        Console.WriteLine(factorial);\n    }}"
    },
    {
        "instruction": "How would you write code in PHP to extract the domain name from a given URL?",
        "input": "https://www.example.com/path/to/page",
        "response": "<?php\n\nfunction extract_domain($url) {\n    $parsed = parse_url($url);\n    return $parsed['host'];}\n\n$url = 'https://www.example.com/path/to/page';\n$domain = extract_domain($url);\necho $domain;\n\n?>",
        "output": "<?php\n\nfunction extract_domain($url) {\n    $parsed = parse_url($url);\n    return $parsed['host'];}\n\n$url = 'https://www.example.com/path/to/page';\n$domain = extract_domain($url);\necho $domain;\n\n?>"
    },
    {
        "instruction": "Create a Bash script that counts and outputs the number of files and directories within a specified directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ntarget_directory='/home/user/documents'\nfile_count=$(find \"$target_directory\" -type f | wc -l)\ndir_count=$(find \"$target_directory\" -type d | wc -l)\n\necho \"Number of files: $file_count\"\necho \"Number of directories: $dir_count\"",
        "output": "#!/bin/bash\n\ntarget_directory='/home/user/documents'\nfile_count=$(find \"$target_directory\" -type f | wc -l)\ndir_count=$(find \"$target_directory\" -type d | wc -l)\n\necho \"Number of files: $file_count\"\necho \"Number of directories: $dir_count\""
    },
    {
        "instruction": "Produce a simple Flask web application in Python that displays 'Welcome to my website!' on the home page at route '/'.",
        "input": "",
        "response": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Welcome to my website!'\n\nif __name__ == '__main__':\n    app.run()",
        "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Welcome to my website!'\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Write a C++ function to find the Fibonacci number at a given index using recursion.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint fibonacci(int n) {\n    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nint main() {\n    int index = 6;\n    cout << \"Fibonacci number at index \" << index << \" is: \" << fibonacci(index);\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint fibonacci(int n) {\n    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nint main() {\n    int index = 6;\n    cout << \"Fibonacci number at index \" << index << \" is: \" << fibonacci(index);\n    return 0;}"
    },
    {
        "instruction": "How can I implement a basic web server in Node.js that listens on port 3000 and returns 'Hello World' when visited?",
        "input": "",
        "response": "const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);});",
        "output": "const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);});"
    },
    {
        "instruction": "Develop a Bash script that takes a file name as a command-line argument and counts the number of lines in that file.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nif [ $# -eq 0 ]; then\n    echo \"Usage: $0 <file_name>\"\n    exit 1\nfi\n\nfile_name=$1\n\nif [ ! -f $file_name ]; then\n    echo \"File $file_name not found.\"\n    exit 2\nfi\n\nline_count=$(wc -l < $file_name)\necho \"Number of lines in $file_name: $line_count\"",
        "output": "#!/bin/bash\n\nif [ $# -eq 0 ]; then\n    echo \"Usage: $0 <file_name>\"\n    exit 1\nfi\n\nfile_name=$1\n\nif [ ! -f $file_name ]; then\n    echo \"File $file_name not found.\"\n    exit 2\nfi\n\nline_count=$(wc -l < $file_name)\necho \"Number of lines in $file_name: $line_count\""
    },
    {
        "instruction": "Compose a PHP script to reverse the string without using strrev function.",
        "input": "\"hello\"",
        "response": "<?php\n\nfunction reverseString($inputStr) {\n    $output = '';\n    for ($i = strlen($inputStr) - 1; $i >= 0; $i--) {\n        $output .= $inputStr[$i];\n    }\n    return $output;}\n\n$inputStr = 'hello';\n$reversedString = reverseString($inputStr);\necho \"Reversed string: $reversedString\";\n?>",
        "output": "<?php\n\nfunction reverseString($inputStr) {\n    $output = '';\n    for ($i = strlen($inputStr) - 1; $i >= 0; $i--) {\n        $output .= $inputStr[$i];\n    }\n    return $output;}\n\n$inputStr = 'hello';\n$reversedString = reverseString($inputStr);\necho \"Reversed string: $reversedString\";\n?>"
    },
    {
        "instruction": "Write a Python script that reads a CSV file and calculates the average of values in a specified column.",
        "input": "data.csv with columns: ['Name', 'Age', 'Score']",
        "response": "import csv\n\ndef calculate_average(filename, column_name):\n    values = []\n    with open(filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            values.append(float(row[column_name]))\n    return sum(values) / len(values)\n\naverage_score = calculate_average('data.csv', 'Score')\nprint(average_score)",
        "output": "import csv\n\ndef calculate_average(filename, column_name):\n    values = []\n    with open(filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            values.append(float(row[column_name]))\n    return sum(values) / len(values)\n\naverage_score = calculate_average('data.csv', 'Score')\nprint(average_score)"
    },
    {
        "instruction": "Implement a C++ function that reverses a string and prints the result.",
        "input": "\"Hello, World!\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string &str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverse_string(std::string &str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you create a JavaScript function that takes an object with a list of key-value pairs and filters out entries having null or undefined values?",
        "input": "{a: 1, b: null, c: 3, d: undefined}",
        "response": "function filterNullUndefined(obj) {\n    const result = {};\n    for (const key in obj) {\n        if (obj[key] !== null && obj[key] !== undefined) {\n            result[key] = obj[key];\n        }\n    }\n    return result;}\n\nconst inputObj = {a: 1, b: null, c: 3, d: undefined};\nconst filteredObj = filterNullUndefined(inputObj);\nconsole.log(filteredObj);",
        "output": "function filterNullUndefined(obj) {\n    const result = {};\n    for (const key in obj) {\n        if (obj[key] !== null && obj[key] !== undefined) {\n            result[key] = obj[key];\n        }\n    }\n    return result;}\n\nconst inputObj = {a: 1, b: null, c: 3, d: undefined};\nconst filteredObj = filterNullUndefined(inputObj);\nconsole.log(filteredObj);"
    },
    {
        "instruction": "Create a Java function that receives an array of integers and returns an array with odd numbers only.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class OddNumbersFilter {\n    public static int[] filterOdds(int[] nums) {\n        ArrayList<Integer> oddsList = new ArrayList<>();\n        for (int num : nums) {\n            if (num % 2 == 1) {\n                oddsList.add(num);\n            }\n        }\n\n        int[] result = new int[oddsList.size()];\n        for (int i = 0; i < oddsList.size(); i++) {\n            result[i] = oddsList.get(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] inputArr = {1, 2, 3, 4, 5};\n        int[] oddNumbers = filterOdds(inputArr);\n        System.out.println(Arrays.toString(oddNumbers));\n    }}",
        "output": "import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class OddNumbersFilter {\n    public static int[] filterOdds(int[] nums) {\n        ArrayList<Integer> oddsList = new ArrayList<>();\n        for (int num : nums) {\n            if (num % 2 == 1) {\n                oddsList.add(num);\n            }\n        }\n\n        int[] result = new int[oddsList.size()];\n        for (int i = 0; i < oddsList.size(); i++) {\n            result[i] = oddsList.get(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] inputArr = {1, 2, 3, 4, 5};\n        int[] oddNumbers = filterOdds(inputArr);\n        System.out.println(Arrays.toString(oddNumbers));\n    }}"
    },
    {
        "instruction": "Construct a C++ program that generates the first 'n' Fibonacci numbers, where 'n' is a user input.",
        "input": "10",
        "response": "#include <iostream>\n\nint main() {\n    int n, fib1 = 0, fib2 = 1, next;\n\n    std::cout << \"Enter the number of Fibonacci numbers to generate: \";\n    std::cin >> n;\n\n    for (int i = 1; i <= n; ++i) {\n        if (i == 1) {\n            std::cout << fib1 << \", \";\n            continue;\n        }\n        if (i == 2) {\n            std::cout << fib2 << \", \";\n            continue;\n        }\n        next = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = next;\n        std::cout << next << \", \";\n    }\n    return 0;}",
        "output": "#include <iostream>\n\nint main() {\n    int n, fib1 = 0, fib2 = 1, next;\n\n    std::cout << \"Enter the number of Fibonacci numbers to generate: \";\n    std::cin >> n;\n\n    for (int i = 1; i <= n; ++i) {\n        if (i == 1) {\n            std::cout << fib1 << \", \";\n            continue;\n        }\n        if (i == 2) {\n            std::cout << fib2 << \", \";\n            continue;\n        }\n        next = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = next;\n        std::cout << next << \", \";\n    }\n    return 0;}"
    },
    {
        "instruction": "Implement a Python function that takes a list of strings and returns a list of their lengths.",
        "input": "[\"apple\", \"banana\", \"cherry\"]",
        "response": "def string_lengths(strings):\n    lengths = [len(s) for s in strings]\n    return lengths\n\nresult = string_lengths([\"apple\", \"banana\", \"cherry\"])\nprint(result)",
        "output": "def string_lengths(strings):\n    lengths = [len(s) for s in strings]\n    return lengths\n\nresult = string_lengths([\"apple\", \"banana\", \"cherry\"])\nprint(result)"
    },
    {
        "instruction": "Write a JavaScript function to count the occurrences of a given character in a string.",
        "input": "\"hello world\", \"l\"",
        "response": "function countOccurrences(str, char) {\n    let count = 0;\n    for (const c of str) {\n        if (c === char) count++;\n    }\n    return count;}\n\nconst result = countOccurrences(\"hello world\", \"l\");\nconsole.log(result);",
        "output": "function countOccurrences(str, char) {\n    let count = 0;\n    for (const c of str) {\n        if (c === char) count++;\n    }\n    return count;}\n\nconst result = countOccurrences(\"hello world\", \"l\");\nconsole.log(result);"
    },
    {
        "instruction": "Design a shell script to delete all '.txt' files from a directory and its subdirectories.",
        "input": "",
        "response": "#!/bin/sh\n\nfind . -type f -name \"*.txt\" -exec rm -f {} \\;\n\necho \"All .txt files have been deleted.\"",
        "output": "#!/bin/sh\n\nfind . -type f -name \"*.txt\" -exec rm -f {} \\;\n\necho \"All .txt files have been deleted.\""
    },
    {
        "instruction": "Design a Python program that reads a text file and outputs the number of occurrences of each word in the content.",
        "input": "file_path = 'example.txt'\n\nContent of example.txt:\nThis is an example text file.\nThis file contains words and words repeated.",
        "response": "import collections\n\n\ndef word_count(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n        words = content.lower().split()\n        return collections.Counter(words)\n\n\nfile_path = 'example.txt'\nprint(word_count(file_path))",
        "output": "import collections\n\n\ndef word_count(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n        words = content.lower().split()\n        return collections.Counter(words)\n\n\nfile_path = 'example.txt'\nprint(word_count(file_path))"
    },
    {
        "instruction": "Implement a JavaScript function that accepts a string as a parameter and counts the number of vowels in the string.",
        "input": "'Hello, World!'",
        "response": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nconst input = 'Hello, World!';\nconsole.log(countVowels(input));",
        "output": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nconst input = 'Hello, World!';\nconsole.log(countVowels(input));"
    },
    {
        "instruction": "Construct a Java method that, given two strings, returns the longest common prefix.",
        "input": "String str1 = 'abcdef';\nString str2 = 'abcghi';",
        "response": "public class LongestCommonPrefix {\n\n    public static String findLongestCommonPrefix(String str1, String str2) {\n        int minLength = Math.min(str1.length(), str2.length());\n\n        for (int i = 0; i < minLength; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                return str1.substring(0, i);\n            }\n        }\n        return str1.substring(0, minLength);\n    }\n\n    public static void main(String[] args) {\n        String str1 = 'abcdef';\n        String str2 = 'abcghi';\n        System.out.println(findLongestCommonPrefix(str1, str2));\n    }\n}",
        "output": "public class LongestCommonPrefix {\n\n    public static String findLongestCommonPrefix(String str1, String str2) {\n        int minLength = Math.min(str1.length(), str2.length());\n\n        for (int i = 0; i < minLength; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                return str1.substring(0, i);\n            }\n        }\n        return str1.substring(0, minLength);\n    }\n\n    public static void main(String[] args) {\n        String str1 = 'abcdef';\n        String str2 = 'abcghi';\n        System.out.println(findLongestCommonPrefix(str1, str2));\n    }\n}"
    },
    {
        "instruction": "Write a C++ program that takes a user's input for the length of a square's side and calculates its area.",
        "input": "Length of the square's side: 5",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double sideLength;\n\n    cout << \"Length of the square's side: \";\n    cin >> sideLength;\n\n    double area = sideLength * sideLength;\n\n    cout << \"Area of the square: \" << area << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double sideLength;\n\n    cout << \"Length of the square's side: \";\n    cin >> sideLength;\n\n    double area = sideLength * sideLength;\n\n    cout << \"Area of the square: \" << area << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a C++ program that reads a user's input for two integers and prints their product.",
        "input": "3, 4",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2, product;\n    \n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n    \n    product = num1 * num2;\n    cout << \"Product: \" << product << endl;\n    \n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num1, num2, product;\n    \n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n    \n    product = num1 * num2;\n    cout << \"Product: \" << product << endl;\n    \n    return 0;}"
    },
    {
        "instruction": "How would you implement a PHP function that receives a list of strings and returns the longest string?",
        "input": "[\"apple\", \"banana\", \"cherry\"]",
        "response": "<?php\n\nfunction findLongestString($strArray) {\n    $maxLen = -1;\n    $maxStr = '';\n\n    foreach ($strArray as $str) {\n        $len = strlen($str);\n        if ($len > $maxLen) {\n            $maxLen = $len;\n            $maxStr = $str;\n        }\n    }\n\n    return $maxStr;}\n\n$list = array(\"apple\", \"banana\", \"cherry\");\necho findLongestString($list);\n\n?>",
        "output": "<?php\n\nfunction findLongestString($strArray) {\n    $maxLen = -1;\n    $maxStr = '';\n\n    foreach ($strArray as $str) {\n        $len = strlen($str);\n        if ($len > $maxLen) {\n            $maxLen = $len;\n            $maxStr = $str;\n        }\n    }\n\n    return $maxStr;}\n\n$list = array(\"apple\", \"banana\", \"cherry\");\necho findLongestString($list);\n\n?>"
    },
    {
        "instruction": "Design a SQL query that retrieves the names and ages of all customers from a 'Customer' table, sorted by their age in ascending order.",
        "input": "",
        "response": "SELECT name, age\nFROM Customer\nORDER BY age ASC;",
        "output": "SELECT name, age\nFROM Customer\nORDER BY age ASC;"
    },
    {
        "instruction": "Fix the syntax errors in this JavaScript code snippet:\n{\"a b\":\"John Doe\",\"age\":35.00,\"isStudent\":ture,\"city\":\"New Yorkzz\",\"}\n",
        "input": "",
        "response": "var obj = {\n    \"a b\": \"John Doe\",\n    \"age\": 35,\n    \"isStudent\": true,\n    \"city\": \"New York\"};",
        "output": "var obj = {\n    \"a b\": \"John Doe\",\n    \"age\": 35,\n    \"isStudent\": true,\n    \"city\": \"New York\"};"
    },
    {
        "instruction": "Implement a C++ function that reverses a given string in place.",
        "input": "\"programming\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverseString(std::string& str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string s = \"programming\";\n    reverseString(s);\n    std::cout << s << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nvoid reverseString(std::string& str) {\n    std::reverse(str.begin(), str.end());}\n\nint main() {\n    std::string s = \"programming\";\n    reverseString(s);\n    std::cout << s << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python code that computes the factorial of a given number using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnumber = 6\nresult = factorial(number)\nprint(f'The factorial of {number} is {result}')",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnumber = 6\nresult = factorial(number)\nprint(f'The factorial of {number} is {result}')"
    },
    {
        "instruction": "Create a shell script that takes a file as input, counts the number of lines in the file, and outputs the result.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\ninput_file=$1\nline_count=$(wc -l < \"$input_file\")\necho \"Number of lines in $input_file: $line_count\"",
        "output": "#!/bin/bash\n\ninput_file=$1\nline_count=$(wc -l < \"$input_file\")\necho \"Number of lines in $input_file: $line_count\""
    },
    {
        "instruction": "How would you modify a JavaScript function that takes a string as input and returns an object containing the number of vowels and consonants in the string?",
        "input": "\"Javascript\"",
        "response": "function countVowelsAndConsonants(str) {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelCount = 0;\n    let consonantCount = 0;\n    str = str.toLowerCase();\n\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            vowelCount++;\n        } else if (char.match(/[a-z]/i)) {\n            consonantCount++;\n        }\n    }\n\n    return { vowels: vowelCount, consonants: consonantCount };}\n\nconst input = 'Javascript';\nconst result = countVowelsAndConsonants(input);\nconsole.log(`Vowels: ${result.vowels}, Consonants: ${result.consonants}`);",
        "output": "function countVowelsAndConsonants(str) {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelCount = 0;\n    let consonantCount = 0;\n    str = str.toLowerCase();\n\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            vowelCount++;\n        } else if (char.match(/[a-z]/i)) {\n            consonantCount++;\n        }\n    }\n\n    return { vowels: vowelCount, consonants: consonantCount };}\n\nconst input = 'Javascript';\nconst result = countVowelsAndConsonants(input);\nconsole.log(`Vowels: ${result.vowels}, Consonants: ${result.consonants}`);"
    },
    {
        "instruction": "Create a Python script that reads a CSV file and prints the total number of rows contained in it.",
        "input": "sample.csv:\nName,Age\nAlice,30\nBob,25\nCarol,28",
        "response": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, 'r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n\n    total_rows = sum(1 for row in csv_reader) - 1\n\nprint(f'Total rows in the CSV file: {total_rows}')",
        "output": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, 'r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n\n    total_rows = sum(1 for row in csv_reader) - 1\n\nprint(f'Total rows in the CSV file: {total_rows}')"
    },
    {
        "instruction": "How would you debug a JavaScript function that is supposed to calculate the average of an array of numbers but returns 'NaN'?",
        "input": "function averageArray(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum / arr.length;}\n\nlet numbers = [1, 2, '3', 4, 5];",
        "response": "First, I would identify the line causing the issue by inserting console.log statements for variables 'sum' and 'arr[i]' inside the loop. This can help spot a non-number value in the array that causes the 'NaN' output. Additionally, I would ensure that the input is always valid by using the following modified function:\n\nfunction averageArray(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (typeof arr[i] !== 'number') {\n            console.log(`Invalid value encountered at index ${i}: ${arr[i]}`);\n            continue;\n        }\n        sum += arr[i];\n    }\n    return sum / arr.length;}\n\nlet numbers = [1, 2, '3', 4, 5];\nconsole.log(averageArray(numbers));",
        "output": "First, I would identify the line causing the issue by inserting console.log statements for variables 'sum' and 'arr[i]' inside the loop. This can help spot a non-number value in the array that causes the 'NaN' output. Additionally, I would ensure that the input is always valid by using the following modified function:\n\nfunction averageArray(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (typeof arr[i] !== 'number') {\n            console.log(`Invalid value encountered at index ${i}: ${arr[i]}`);\n            continue;\n        }\n        sum += arr[i];\n    }\n    return sum / arr.length;}\n\nlet numbers = [1, 2, '3', 4, 5];\nconsole.log(averageArray(numbers));"
    },
    {
        "instruction": "Write a Shell script that calculates the number of files and directories within a directory and prints them.",
        "input": "directory_path='/path/to/directory'",
        "response": "#!/bin/bash\n\ndirectory_path='/path/to/directory'\nnum_files=$(find $directory_path -type f | wc -l)\nnum_dirs=$(find $directory_path -type d | wc -l)\n\necho \"Number of files: $num_files\"\necho \"Number of directories: $num_dirs\"",
        "output": "#!/bin/bash\n\ndirectory_path='/path/to/directory'\nnum_files=$(find $directory_path -type f | wc -l)\nnum_dirs=$(find $directory_path -type d | wc -l)\n\necho \"Number of files: $num_files\"\necho \"Number of directories: $num_dirs\""
    },
    {
        "instruction": "Write a Python function that takes a list of strings and returns a list of their corresponding lengths.",
        "input": "['apple', 'banana', 'orange']",
        "response": "def string_lengths(strings):\n    return [len(s) for s in strings]\n\ninput_list = ['apple', 'banana', 'orange']\nresult = string_lengths(input_list)\nprint(result)",
        "output": "def string_lengths(strings):\n    return [len(s) for s in strings]\n\ninput_list = ['apple', 'banana', 'orange']\nresult = string_lengths(input_list)\nprint(result)"
    },
    {
        "instruction": "Create a C program that prints the first n even numbers, given the integer n as input.",
        "input": "5",
        "response": "#include <stdio.h>\n\nvoid print_even_numbers(int n) {\n    for (int i = 1; i <= n; i++) {\n        printf('%d\\n', i * 2);\n    }}\n\nint main() {\n    int n = 5;\n    print_even_numbers(n);\n    return 0;}",
        "output": "#include <stdio.h>\n\nvoid print_even_numbers(int n) {\n    for (int i = 1; i <= n; i++) {\n        printf('%d\\n', i * 2);\n    }}\n\nint main() {\n    int n = 5;\n    print_even_numbers(n);\n    return 0;}"
    },
    {
        "instruction": "How can you implement a JavaScript function that finds the factorial of a number?",
        "input": "4",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst number = 4;\nconst result = factorial(number);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst number = 4;\nconst result = factorial(number);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program that reads a file and counts the number of lines in it. Provide a file path as input.",
        "input": "/path/to/your/file.txt",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint count_lines(const std::string &file_path) {\n    std::ifstream file(file_path);\n    std::string line;\n    int count = 0;\n\n    while (std::getline(file, line)) {\n        ++count;\n    }\n\n    return count;}\n\nint main() {\n    std::string file_path = \"/path/to/your/file.txt\";\n    int line_count = count_lines(file_path);\n    std::cout << \"Number of lines: \" << line_count << std::endl;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint count_lines(const std::string &file_path) {\n    std::ifstream file(file_path);\n    std::string line;\n    int count = 0;\n\n    while (std::getline(file, line)) {\n        ++count;\n    }\n\n    return count;}\n\nint main() {\n    std::string file_path = \"/path/to/your/file.txt\";\n    int line_count = count_lines(file_path);\n    std::cout << \"Number of lines: \" << line_count << std::endl;}"
    },
    {
        "instruction": "Write a Python function that accepts a list of integers and returns a list with even numbers doubled and odd numbers halved.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def modify_numbers(numbers):\n    return [num * 2 if num % 2 == 0 else num / 2 for num in numbers]\n\nresult = modify_numbers([1, 2, 3, 4, 5])\nprint(result)",
        "output": "def modify_numbers(numbers):\n    return [num * 2 if num % 2 == 0 else num / 2 for num in numbers]\n\nresult = modify_numbers([1, 2, 3, 4, 5])\nprint(result)"
    },
    {
        "instruction": "Implement a JavaScript function to count the number of words in a given string.",
        "input": "Side by side, we fought for freedom.",
        "response": "function countWords(str) {\n    return str.split(' ').length;}\n\nconst text = 'Side by side, we fought for freedom.';\nconst wordCount = countWords(text);\nconsole.log(wordCount);",
        "output": "function countWords(str) {\n    return str.split(' ').length;}\n\nconst text = 'Side by side, we fought for freedom.';\nconst wordCount = countWords(text);\nconsole.log(wordCount);"
    },
    {
        "instruction": "Create a C++ program to compute the factorial of a given number using a recursive function.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}"
    },
    {
        "instruction": "Design a Java method that takes a string and a character as parameters and returns the string without any occurrences of that character.",
        "input": "\"apple\", 'p'",
        "response": "public class RemoveCharacter {\n    public static void main(String[] args) {\n        String result = removeCharFromString(\"apple\", 'p');\n        System.out.println(result);\n    }\n\n    public static String removeCharFromString(String str, char ch) {\n        return str.replaceAll(Character.toString(ch), \"\");\n    }}",
        "output": "public class RemoveCharacter {\n    public static void main(String[] args) {\n        String result = removeCharFromString(\"apple\", 'p');\n        System.out.println(result);\n    }\n\n    public static String removeCharFromString(String str, char ch) {\n        return str.replaceAll(Character.toString(ch), \"\");\n    }}"
    },
    {
        "instruction": "Write a C++ function that reverses a given string in place without using any additional data structures.",
        "input": "\"programming\"",
        "response": "#include <iostream>\n#include <algorithm>\n\nvoid reverse_string(std::string& str) {\n    int start = 0;\n    int end = str.length() - 1;\n    \n    while (start < end) {\n        std::swap(str[start], str[end]);\n        start++;\n        end--;\n    }}\n\nint main() {\n    std::string example = \"programming\";\n    reverse_string(example);\n    std::cout << example << std::endl;}",
        "output": "#include <iostream>\n#include <algorithm>\n\nvoid reverse_string(std::string& str) {\n    int start = 0;\n    int end = str.length() - 1;\n    \n    while (start < end) {\n        std::swap(str[start], str[end]);\n        start++;\n        end--;\n    }}\n\nint main() {\n    std::string example = \"programming\";\n    reverse_string(example);\n    std::cout << example << std::endl;}"
    },
    {
        "instruction": "How would you implement a Python function that calculates the factorial of a given number using recursion?",
        "input": "5",
        "response": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "In Bash, write a script that counts the number of lines in a given file.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nfilename=\"file.txt\"\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\"",
        "output": "#!/bin/bash\n\nfilename=\"file.txt\"\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\""
    },
    {
        "instruction": "Create a JavaScript function that, given an HTML element's ID, finds the element and toggles its visibility (visible or hidden).",
        "input": "\"example\"",
        "response": "function toggleVisibility(elementId) {\n    const element = document.getElementById(elementId);\n    if (element.style.display === 'none') {\n        element.style.display = 'block';\n    } else {\n        element.style.display = 'none';\n    }}\n\ntoggleVisibility('example');",
        "output": "function toggleVisibility(elementId) {\n    const element = document.getElementById(elementId);\n    if (element.style.display === 'none') {\n        element.style.display = 'block';\n    } else {\n        element.style.display = 'none';\n    }}\n\ntoggleVisibility('example');"
    },
    {
        "instruction": "Write a C++ program that reads an integer from the user and displays whether it is even or odd.",
        "input": "42",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num;\n    cout << \"Enter an integer: \";\n    cin >> num;\n\n    if (num % 2 == 0)\n        cout << num << \" is even.\";\n    else\n        cout << num << \" is odd.\";\n\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num;\n    cout << \"Enter an integer: \";\n    cin >> num;\n\n    if (num % 2 == 0)\n        cout << num << \" is even.\";\n    else\n        cout << num << \" is odd.\";\n\n    return 0;}"
    },
    {
        "instruction": "Create a Python script that reads the contents of a text file, reverses the chars in each line, and writes the reversed lines to a new file.",
        "input": "input_file: 'example.txt', output_file: 'reversed.txt'",
        "response": "input_file = 'example.txt'\noutput_file = 'reversed.txt'\n\nwith open(input_file, 'r') as reader:\n    lines = reader.readlines()\n\nwith open(output_file, 'w') as writer:\n    for line in lines:\n        reversed_line = line.rstrip('\n')[::-1] + '\n'\n        writer.write(reversed_line)",
        "output": "input_file = 'example.txt'\noutput_file = 'reversed.txt'\n\nwith open(input_file, 'r') as reader:\n    lines = reader.readlines()\n\nwith open(output_file, 'w') as writer:\n    for line in lines:\n        reversed_line = line.rstrip('\n')[::-1] + '\n'\n        writer.write(reversed_line)"
    },
    {
        "instruction": "How would you write a JavaScript function that calculates and returns the factorial of a given number?",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a Shell script that iterates over a list of filepaths and checks if the files are readable. If a file is readable, print its name and the first three lines.",
        "input": "filepaths: ['/tmp/file1.txt', '/tmp/file2.txt', '/tmp/file3.txt']",
        "response": "#!/bin/bash\n\nfilepaths=( '/tmp/file1.txt' '/tmp/file2.txt' '/tmp/file3.txt' )\n\nfor filepath in \"${filepaths[@]}\"\ndo\n    if [ -r \"$filepath\" ]; then\n        echo \"--- $filepath ---\"\n        head -n 3 \"$filepath\"\n        echo \"\"\n    else\n        echo \"!!! $filepath is not readable !!!\"\n    fi\ndone",
        "output": "#!/bin/bash\n\nfilepaths=( '/tmp/file1.txt' '/tmp/file2.txt' '/tmp/file3.txt' )\n\nfor filepath in \"${filepaths[@]}\"\ndo\n    if [ -r \"$filepath\" ]; then\n        echo \"--- $filepath ---\"\n        head -n 3 \"$filepath\"\n        echo \"\"\n    else\n        echo \"!!! $filepath is not readable !!!\"\n    fi\ndone"
    },
    {
        "instruction": "Develop a C++ function to compute the factorial of a given number, n, using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5;\n    std::cout << factorial(number) << std::endl;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5;\n    std::cout << factorial(number) << std::endl;\n}"
    },
    {
        "instruction": "Write a Python script that reads a CSV file and prints the sum of all values in a specific column.",
        "input": "data.csv with 3 columns: Name, Age, Salary\nJohn, 30, 40000\nJane, 25, 35000\n",
        "response": "import csv\n\nfilename = 'data.csv'\ncolumn_index = 2\nsum_of_values = 0\n\nwith open(filename, 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        sum_of_values += float(row[column_index - 1])\n\nprint(sum_of_values)",
        "output": "import csv\n\nfilename = 'data.csv'\ncolumn_index = 2\nsum_of_values = 0\n\nwith open(filename, 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        sum_of_values += float(row[column_index - 1])\n\nprint(sum_of_values)"
    },
    {
        "instruction": "Write an SQL query to list all the employees with their first name, last name, and salary, sorted by salary in descending order.",
        "input": "employee table with columns: id, first_name, last_name, birthdate, salary",
        "response": "SELECT first_name, last_name, salary FROM employee ORDER BY salary DESC;",
        "output": "SELECT first_name, last_name, salary FROM employee ORDER BY salary DESC;"
    },
    {
        "instruction": "How would you implement a basic API in Node.js using the Express framework to allow creating, reading, updating, and deleting items in a collection?",
        "input": "items collection with each item having an id and a name",
        "response": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nconst items = [];\n\n// Create item\napp.post('/items', (req, res) => {\n  const item = {id: items.length + 1, name: req.body.name};\n  items.push(item);\n  res.status(201).send(item);\n});\n\n// Read items\napp.get('/items', (req, res) => {\n  res.send(items);\n});\n\n// Update item\napp.put('/items/:id', (req, res) => {\n  const item = items.find(i => i.id === parseInt(req.params.id));\n  if (!item) return res.status(404).send('Item not found.');\n  item.name = req.body.name;\n  res.send(item);\n});\n\n// Delete item\napp.delete('/items/:id', (req, res) => {\n  const item = items.find(i => i.id === parseInt(req.params.id));\n  if (!item) return res.status(404).send('Item not found.');\n  const index = items.indexOf(item);\n  items.splice(index, 1);\n  res.send(item);\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Server running on port ${port}`));",
        "output": "const express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nconst items = [];\n\n// Create item\napp.post('/items', (req, res) => {\n  const item = {id: items.length + 1, name: req.body.name};\n  items.push(item);\n  res.status(201).send(item);\n});\n\n// Read items\napp.get('/items', (req, res) => {\n  res.send(items);\n});\n\n// Update item\napp.put('/items/:id', (req, res) => {\n  const item = items.find(i => i.id === parseInt(req.params.id));\n  if (!item) return res.status(404).send('Item not found.');\n  item.name = req.body.name;\n  res.send(item);\n});\n\n// Delete item\napp.delete('/items/:id', (req, res) => {\n  const item = items.find(i => i.id === parseInt(req.params.id));\n  if (!item) return res.status(404).send('Item not found.');\n  const index = items.indexOf(item);\n  items.splice(index, 1);\n  res.send(item);\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Server running on port ${port}`));"
    },
    {
        "instruction": "Construct a C# method that finds the factorial of a given positive integer input.",
        "input": "5",
        "response": "using System;\n\nclass Factorial\n{\n    public static int FindFactorial(int n)\n    {\n        if (n == 0)\n            return 1;\n        else\n            return n * FindFactorial(n - 1);\n    }\n\n    public static void Main()\n    {\n        int number = 5;\n        int factorial = FindFactorial(number);\n        Console.WriteLine(factorial);\n    }}",
        "output": "using System;\n\nclass Factorial\n{\n    public static int FindFactorial(int n)\n    {\n        if (n == 0)\n            return 1;\n        else\n            return n * FindFactorial(n - 1);\n    }\n\n    public static void Main()\n    {\n        int number = 5;\n        int factorial = FindFactorial(number);\n        Console.WriteLine(factorial);\n    }}"
    },
    {
        "instruction": "Can you provide a JavaScript function to find the quotient and remainder of two numbers using an object as the return value?",
        "input": "23, 5",
        "response": "function divideNumbers(a, b) {\n    return {\n        quotient: Math.floor(a / b),\n        remainder: a % b\n    };}\n\nconst result = divideNumbers(23, 5);\nconsole.log(`Quotient: ${result.quotient}, Remainder: ${result.remainder}`);",
        "output": "function divideNumbers(a, b) {\n    return {\n        quotient: Math.floor(a / b),\n        remainder: a % b\n    };}\n\nconst result = divideNumbers(23, 5);\nconsole.log(`Quotient: ${result.quotient}, Remainder: ${result.remainder}`);"
    },
    {
        "instruction": "Write a SQL query to count the number of employees in each department based on the 'employees' table, having columns: 'id', 'name', 'department', and 'salary'.",
        "input": "employees table",
        "response": "SELECT department, COUNT(*) AS num_employees\nFROM employees\nGROUP BY department;",
        "output": "SELECT department, COUNT(*) AS num_employees\nFROM employees\nGROUP BY department;"
    },
    {
        "instruction": "Create a Shell script to list all files and directories in the current directory that were modified during the last 7 days.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -type f -mtime -7 -print\nfind . -type d -mtime -7 -print",
        "output": "#!/bin/bash\n\nfind . -type f -mtime -7 -print\nfind . -type d -mtime -7 -print"
    },
    {
        "instruction": "Develop a C++ program that calculates the factorial of a given positive integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 6;\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int n = 6;\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "How to implement a PHP script to connect to a MySQL database server?",
        "input": "Server: 'localhost', Username: 'user', Password: 'password', Database: 'myDatabase'",
        "response": "<?php\n$servername = 'localhost';\n$username = 'user';\n$password = 'password';\n$dbname = 'myDatabase';\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);} \necho 'Connected successfully to database.';\n$conn->close();\n?>",
        "output": "<?php\n$servername = 'localhost';\n$username = 'user';\n$password = 'password';\n$dbname = 'myDatabase';\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);} \necho 'Connected successfully to database.';\n$conn->close();\n?>"
    },
    {
        "instruction": "Design a C# method that takes a list of integers and filters out all the odd numbers.",
        "input": "List<int> numbers = new List<int> {4, 7, 16, 25, 30};",
        "response": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class FilterOddNumbers\n{\n    public static List<int> RemoveOddNumbers(List<int> numbers)\n    {\n        return numbers.Where(x => x % 2 == 0).ToList();\n    }\n\n    public static void Main()\n    {\n        List<int> numbers = new List<int> {4, 7, 16, 25, 30};\n        List<int> filteredNumbers = RemoveOddNumbers(numbers);\n\n        foreach (int number in filteredNumbers)\n        {\n            Console.WriteLine(number);\n        }\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class FilterOddNumbers\n{\n    public static List<int> RemoveOddNumbers(List<int> numbers)\n    {\n        return numbers.Where(x => x % 2 == 0).ToList();\n    }\n\n    public static void Main()\n    {\n        List<int> numbers = new List<int> {4, 7, 16, 25, 30};\n        List<int> filteredNumbers = RemoveOddNumbers(numbers);\n\n        foreach (int number in filteredNumbers)\n        {\n            Console.WriteLine(number);\n        }\n    }}"
    },
    {
        "instruction": "Write a Perl script to calculate the length of a given string without using built-in functions.",
        "input": "\"Perl is cool\"",
        "response": "#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $str = 'Perl is cool';\nmy $length = 0;\n\nforeach my $char (split //, $str) {\n    $length++;}\n\nprint \"Length of the string: $length\\n\";",
        "output": "#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $str = 'Perl is cool';\nmy $length = 0;\n\nforeach my $char (split //, $str) {\n    $length++;}\n\nprint \"Length of the string: $length\\n\";"
    },
    {
        "instruction": "Design a C# function that calculates the factorial of a given integer using a recursive approach.",
        "input": "5",
        "response": "public static int Factorial(int n)\n{\n    if (n <= 1)\n        return 1;\n    else\n        return n * Factorial(n - 1);}\n\nint result = Factorial(5);\nConsole.WriteLine(result);",
        "output": "public static int Factorial(int n)\n{\n    if (n <= 1)\n        return 1;\n    else\n        return n * Factorial(n - 1);}\n\nint result = Factorial(5);\nConsole.WriteLine(result);"
    },
    {
        "instruction": "Can you write code in PHP to connect to a MySQL database using the PDO extension, and select all rows from a table named 'products'?",
        "input": "host=localhost; dbname=my_database; user=my_user; password=my_password",
        "response": "<?php\ntry {\n    $connection = new PDO('mysql:host=localhost;dbname=my_database', 'my_user', 'my_password');\n    $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $query = 'SELECT * FROM products';\n\n    $statement = $connection->prepare($query);\n    $statement->execute();\n\n    $results = $statement->fetchAll(PDO::FETCH_ASSOC);\n\n    echo '<pre>', print_r($results, true), '</pre>';} catch (PDOException $e) {\n    echo 'Error: ' . $e->getMessage();}\n?>",
        "output": "<?php\ntry {\n    $connection = new PDO('mysql:host=localhost;dbname=my_database', 'my_user', 'my_password');\n    $connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $query = 'SELECT * FROM products';\n\n    $statement = $connection->prepare($query);\n    $statement->execute();\n\n    $results = $statement->fetchAll(PDO::FETCH_ASSOC);\n\n    echo '<pre>', print_r($results, true), '</pre>';} catch (PDOException $e) {\n    echo 'Error: ' . $e->getMessage();}\n?>"
    },
    {
        "instruction": "Create a Bash script to find all .txt files in a directory and its subdirectories, and count the number of lines in each file.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\nfind /home/user/documents -type f -iname '*.txt' -print0 | while IFS= read -r -d $'\\0' file; do\n    line_count=$(wc -l < \"$file\")\n    echo \"$file has $line_count lines\"\ndone",
        "output": "#!/bin/bash\n\nfind /home/user/documents -type f -iname '*.txt' -print0 | while IFS= read -r -d $'\\0' file; do\n    line_count=$(wc -l < \"$file\")\n    echo \"$file has $line_count lines\"\ndone"
    },
    {
        "instruction": "Write a JavaScript function using Promises that reads the contents of a text file and returns the number of words in the file.",
        "input": "path/to/file.txt",
        "response": "const fs = require('fs').promises;\n\nasync function countWordsInFile(file) {\n    try {\n        const data = await fs.readFile(file, 'utf-8');\n        const words = data.trim().split(/\\s+/);\n        return words.length;\n    } catch (error) {\n        console.error(error);\n    }}\n\ncountWordsInFile('path/to/file.txt')\n    .then(wordCount => console.log(`Words in file: ${wordCount}`))\n    .catch(error => console.error(error));",
        "output": "const fs = require('fs').promises;\n\nasync function countWordsInFile(file) {\n    try {\n        const data = await fs.readFile(file, 'utf-8');\n        const words = data.trim().split(/\\s+/);\n        return words.length;\n    } catch (error) {\n        console.error(error);\n    }}\n\ncountWordsInFile('path/to/file.txt')\n    .then(wordCount => console.log(`Words in file: ${wordCount}`))\n    .catch(error => console.error(error));"
    },
    {
        "instruction": "Create a C# method that receives a list of integers and returns a new list containing only the prime numbers.",
        "input": "[2, 4, 7, 9, 13, 15]",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass PrimeFilter\n{\n    static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n\n        for (int i = 2, limit = (int)Math.Sqrt(number); i <= limit; i++)\n        {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n\n    static List<int> FilterPrimes(List<int> numbers)\n    {\n        List<int> primes = new List<int>();\n        foreach (int num in numbers)\n        {\n            if (IsPrime(num))\n            {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n\n    static void Main(string[] args)\n    {\n        List<int> input = new List<int> { 2, 4, 7, 9, 13, 15 };\n        List<int> primes = FilterPrimes(input);\n        foreach (int prime in primes)\n        {\n            Console.WriteLine(prime);\n        }\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass PrimeFilter\n{\n    static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n\n        for (int i = 2, limit = (int)Math.Sqrt(number); i <= limit; i++)\n        {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n\n    static List<int> FilterPrimes(List<int> numbers)\n    {\n        List<int> primes = new List<int>();\n        foreach (int num in numbers)\n        {\n            if (IsPrime(num))\n            {\n                primes.Add(num);\n            }\n        }\n        return primes;\n    }\n\n    static void Main(string[] args)\n    {\n        List<int> input = new List<int> { 2, 4, 7, 9, 13, 15 };\n        List<int> primes = FilterPrimes(input);\n        foreach (int prime in primes)\n        {\n            Console.WriteLine(prime);\n        }\n    }}"
    },
    {
        "instruction": "How can I write a Python script to reverse the letters in each word of a given sentence?",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "def reverse_word(word):\n    return ''.join(reversed(word))\n\ndef reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = [reverse_word(word) for word in words]\n    return ' '.join(reversed_words)\n\ninput_sentence = 'The quick brown fox jumps over the lazy dog.'\nresult = reverse_sentence(input_sentence)\nprint(result)",
        "output": "def reverse_word(word):\n    return ''.join(reversed(word))\n\ndef reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = [reverse_word(word) for word in words]\n    return ' '.join(reversed_words)\n\ninput_sentence = 'The quick brown fox jumps over the lazy dog.'\nresult = reverse_sentence(input_sentence)\nprint(result)"
    },
    {
        "instruction": "Design a JavaScript function that takes a string as input and returns the string with all vowels removed.",
        "input": "the world is beautiful",
        "response": "function removeVowels(s) {\n    return s.replace(/[aeiouAEIOU]/g, '');}\n\nconst inputStr = 'the world is beautiful';\nconst resultStr = removeVowels(inputStr);\nconsole.log(resultStr);",
        "output": "function removeVowels(s) {\n    return s.replace(/[aeiouAEIOU]/g, '');}\n\nconst inputStr = 'the world is beautiful';\nconst resultStr = removeVowels(inputStr);\nconsole.log(resultStr);"
    },
    {
        "instruction": "Design a C# program that finds the unique elements in an array of integers and prints them.",
        "input": "[1, 0, 2, 1, 2, 3]",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass UniqueElements {\n    public static void Main(String[] args) {\n        int[] arr = new int[] {1, 0, 2, 1, 2, 3};\n        HashSet<int> unique = new HashSet<int>();\n\n        foreach (int num in arr) {\n            unique.Add(num);\n        }\n\n        Console.WriteLine(\"Unique elements in the array:\");\n        foreach (int num in unique) {\n            Console.Write(num + \" \");\n        }\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass UniqueElements {\n    public static void Main(String[] args) {\n        int[] arr = new int[] {1, 0, 2, 1, 2, 3};\n        HashSet<int> unique = new HashSet<int>();\n\n        foreach (int num in arr) {\n            unique.Add(num);\n        }\n\n        Console.WriteLine(\"Unique elements in the array:\");\n        foreach (int num in unique) {\n            Console.Write(num + \" \");\n        }\n    }}"
    },
    {
        "instruction": "Can you provide a Python script that reads a CSV file and prints the number of rows and columns?",
        "input": "csv_file.csv",
        "response": "import csv\n\ncsv_file_path = 'csv_file.csv'\n\nwith open(csv_file_path, 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    num_rows = 0\n    num_columns = 0\n\n    for row in reader:\n        num_rows += 1\n        row_length = len(row)\n        if row_length > num_columns:\n            num_columns = row_length\n\nprint('Number of rows:', num_rows)\nprint('Number of columns:', num_columns)",
        "output": "import csv\n\ncsv_file_path = 'csv_file.csv'\n\nwith open(csv_file_path, 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    num_rows = 0\n    num_columns = 0\n\n    for row in reader:\n        num_rows += 1\n        row_length = len(row)\n        if row_length > num_columns:\n            num_columns = row_length\n\nprint('Number of rows:', num_rows)\nprint('Number of columns:', num_columns)"
    },
    {
        "instruction": "Create a shell script that takes a directory path as an argument and prints the number of files in that directory.",
        "input": "/home/user/test_directory/",
        "response": "#!/bin/bash\n\ndirectory_path=$1\nfile_count=$(ls -1 $directory_path | wc -l)\n\necho \"Number of files in the directory: $file_count\"",
        "output": "#!/bin/bash\n\ndirectory_path=$1\nfile_count=$(ls -1 $directory_path | wc -l)\n\necho \"Number of files in the directory: $file_count\""
    },
    {
        "instruction": "Develop a C++ program that computes the factorial of a given integer using a recursive function.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int number = 6;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you design and implement a Python class that represents a bank account with methods for depositing, withdrawing, and checking the balance?",
        "input": "Initial Balance: 250; Deposit: 500; Withdraw: 100",
        "response": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print('Insufficient balance')\n\n    def check_balance(self):\n        return self.balance\n\naccount = BankAccount(250)\naccount.deposit(500)\naccount.withdraw(100)\nprint(account.check_balance())",
        "output": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print('Insufficient balance')\n\n    def check_balance(self):\n        return self.balance\n\naccount = BankAccount(250)\naccount.deposit(500)\naccount.withdraw(100)\nprint(account.check_balance())"
    },
    {
        "instruction": "Can you write a JavaScript function that converts Celsius to Fahrenheit and another function that converts Fahrenheit to Celsius?",
        "input": "Celsius: 30, Fahrenheit: 86",
        "response": "function celsiusToFahrenheit(celsius) {\n    return (celsius * 9/5) + 32;}\n\nfunction fahrenheitToCelsius(fahrenheit) {\n    return (fahrenheit - 32) * 5/9;}\n\nlet celsius = 30;\nlet fahrenheit = 86;\n\nconsole.log(`Celsius to Fahrenheit: ${celsiusToFahrenheit(celsius)}`);\nconsole.log(`Fahrenheit to Celsius: ${fahrenheitToCelsius(fahrenheit)}`);",
        "output": "function celsiusToFahrenheit(celsius) {\n    return (celsius * 9/5) + 32;}\n\nfunction fahrenheitToCelsius(fahrenheit) {\n    return (fahrenheit - 32) * 5/9;}\n\nlet celsius = 30;\nlet fahrenheit = 86;\n\nconsole.log(`Celsius to Fahrenheit: ${celsiusToFahrenheit(celsius)}`);\nconsole.log(`Fahrenheit to Celsius: ${fahrenheitToCelsius(fahrenheit)}`);"
    },
    {
        "instruction": "Create a shell script that lists all files in a directory and outputs the file count at the end.",
        "input": "Directory: /path/to/files",
        "response": "#!/bin/bash\n\ndir='/path/to/files'\ncount=0\n\nfor file in \"$dir\"/*; do\n    echo \"$file\"\n    count=$((count+1))\ndone\n\necho \"Total files: $count\"",
        "output": "#!/bin/bash\n\ndir='/path/to/files'\ncount=0\n\nfor file in \"$dir\"/*; do\n    echo \"$file\"\n    count=$((count+1))\ndone\n\necho \"Total files: $count\""
    },
    {
        "instruction": "Implement a C function that calculates the factorial of a given integer number.",
        "input": "5",
        "response": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n-1);\n    }}\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d: %d\", num, factorial(num));\n    return 0;}",
        "output": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n-1);\n    }}\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d: %d\", num, factorial(num));\n    return 0;}"
    },
    {
        "instruction": "Can you write a JavaScript function that checks if a string contains a specified substring?",
        "input": "['hello world', 'world']",
        "response": "function stringContains(str, substr) {\n    return str.indexOf(substr) !== -1;}\n\nconst result = stringContains('hello world', 'world');\nconsole.log(result);",
        "output": "function stringContains(str, substr) {\n    return str.indexOf(substr) !== -1;}\n\nconst result = stringContains('hello world', 'world');\nconsole.log(result);"
    },
    {
        "instruction": "Develop a Python function that computes the Fibonacci sequence up to a certain number of terms.",
        "input": "6",
        "response": "deffibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    for _ in range(n):\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nn_terms = 6\nfib_sequence = fibonacci(n_terms)\nprint(fib_sequence)",
        "output": "deffibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    for _ in range(n):\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nn_terms = 6\nfib_sequence = fibonacci(n_terms)\nprint(fib_sequence)"
    },
    {
        "instruction": "Write a SQL query to count the number of products in a table with a price greater than a specific value.",
        "input": "{'table': 'products', 'column': 'price', 'value': 20}",
        "response": "SELECT COUNT(*) FROM products WHERE price > 20;",
        "output": "SELECT COUNT(*) FROM products WHERE price > 20;"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n-1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n-1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Design an SQL query for selecting the total sales amount of a customer with a specific customer_id from a table called 'orders'.",
        "input": "customer_id: 123",
        "response": "SELECT SUM(order_total) as total_sales\nFROM orders\nWHERE customer_id = 123\nGROUP BY customer_id;",
        "output": "SELECT SUM(order_total) as total_sales\nFROM orders\nWHERE customer_id = 123\nGROUP BY customer_id;"
    },
    {
        "instruction": "Develop a Shell script that reads a text file line by line and counts the number of nonempty lines.",
        "input": "file.txt",
        "response": "#!/bin/sh\n\nfile='file.txt'\nnonempty_line_count=0\n\nwhile IFS= read -r line; do\n    if [ -n \"${line}\" ]; then\n        nonempty_line_count=$((nonempty_line_count + 1))\n    fi\ndone < \"${file}\"\n\necho \"Number of nonempty lines: \"${nonempty_line_count}",
        "output": "#!/bin/sh\n\nfile='file.txt'\nnonempty_line_count=0\n\nwhile IFS= read -r line; do\n    if [ -n \"${line}\" ]; then\n        nonempty_line_count=$((nonempty_line_count + 1))\n    fi\ndone < \"${file}\"\n\necho \"Number of nonempty lines: \"${nonempty_line_count}"
    },
    {
        "instruction": "How would you implement a Python script to download an image from a URL and save it to a specified location?",
        "input": "url: 'https://www.example.com/image.jpg', location: '/path/to/save/image.jpg'",
        "response": "import requests\n\ndef download_image(url, location):\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n\n    with open(location, 'wb') as file:\n        for chunk in response.iter_content(chunk_size=8192):\n            file.write(chunk)\n\nurl = 'https://www.example.com/image.jpg'\nlocation = '/path/to/save/image.jpg'\ndownload_image(url, location)",
        "output": "import requests\n\ndef download_image(url, location):\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n\n    with open(location, 'wb') as file:\n        for chunk in response.iter_content(chunk_size=8192):\n            file.write(chunk)\n\nurl = 'https://www.example.com/image.jpg'\nlocation = '/path/to/save/image.jpg'\ndownload_image(url, location)"
    },
    {
        "instruction": "Develop a C++ program that reads an input file with integers and outputs the average of those integers.",
        "input": "3\n7\n19\n",
        "response": "#include <iostream>\n#include <fstream>\n#include <vector>\n\nint main() {\n    std::ifstream inputFile(\"input.txt\");\n    std::vector<int> numbers;\n    int number;\n    double sum = 0;\n\n    while (inputFile >> number) {\n        numbers.push_back(number);\n        sum += number;\n    }\n\n    inputFile.close();\n    double average = sum / numbers.size();\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <vector>\n\nint main() {\n    std::ifstream inputFile(\"input.txt\");\n    std::vector<int> numbers;\n    int number;\n    double sum = 0;\n\n    while (inputFile >> number) {\n        numbers.push_back(number);\n        sum += number;\n    }\n\n    inputFile.close();\n    double average = sum / numbers.size();\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Python function that takes a list of words and returns a dictionary of each word's occurrence count.",
        "input": "('apple', 'banana', 'apple', 'pear', 'banana', 'banana')",
        "response": "def count_words(words_list):\n    word_count = {}\n    for word in words_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nwords = ('apple', 'banana', 'apple', 'pear', 'banana', 'banana')\nresult = count_words(words)\nprint(result)",
        "output": "def count_words(words_list):\n    word_count = {}\n    for word in words_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nwords = ('apple', 'banana', 'apple', 'pear', 'banana', 'banana')\nresult = count_words(words)\nprint(result)"
    },
    {
        "instruction": "Can you write a JavaScript function that accepts an object with properties 'x' and 'y' and returns the distance from the origin (0, 0) to the point?",
        "input": "{ x: 3, y: 4 }",
        "response": "function calculateDistance(point) {\n    return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n}\n\nconst input = { x: 3, y: 4 };\nconst result = calculateDistance(input);\nconsole.log(result);",
        "output": "function calculateDistance(point) {\n    return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n}\n\nconst input = { x: 3, y: 4 };\nconst result = calculateDistance(input);\nconsole.log(result);"
    },
    {
        "instruction": "Design a C# method that takes a string input and returns a boolean value indicating whether the input string contains only uppercase letters.",
        "input": "HELLO",
        "response": "using System;\n\npublic class UppercaseChecker {\n    public static bool IsUppercase(string input) {\n        foreach (char c in input) {\n            if (!Char.IsUpper(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void Main(string[] args) {\n        string input = \"HELLO\";\n        Console.WriteLine(IsUppercase(input));\n    }\n}",
        "output": "using System;\n\npublic class UppercaseChecker {\n    public static bool IsUppercase(string input) {\n        foreach (char c in input) {\n            if (!Char.IsUpper(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void Main(string[] args) {\n        string input = \"HELLO\";\n        Console.WriteLine(IsUppercase(input));\n    }\n}"
    },
    {
        "instruction": "Write a C++ function that reverses a given string and prints it on the console.",
        "input": "\"programming\"",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_and_print(std::string str) {\n    std::reverse(str.begin(), str.end());\n    std::cout << str << std::endl;\n}\n\nint main() {\n    reverse_and_print(\"programming\");\nreturn 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_and_print(std::string str) {\n    std::reverse(str.begin(), str.end());\n    std::cout << str << std::endl;\n}\n\nint main() {\n    reverse_and_print(\"programming\");\nreturn 0;\n}"
    },
    {
        "instruction": "Develop a Shell script that retrieves and displays the current date and time in the format 'YYYY-mm-dd HH:MM:SS'.",
        "input": "",
        "response": "#!/bin/sh\n\ndate +\"%Y-%m-%d %H:%M:%S\"",
        "output": "#!/bin/sh\n\ndate +\"%Y-%m-%d %H:%M:%S\""
    },
    {
        "instruction": "How would you write a Python program that reads a provided CSV file and prints the total number of rows?",
        "input": "data.csv",
        "response": "import csv\n\nfilename = 'data.csv'\n\ndef count_rows(filename):\n    with open(filename, newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        row_count = sum(1 for row in reader)\n        print('Total number of rows:', row_count)\n\nif __name__ == '__main__':\n    count_rows(filename)",
        "output": "import csv\n\nfilename = 'data.csv'\n\ndef count_rows(filename):\n    with open(filename, newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        row_count = sum(1 for row in reader)\n        print('Total number of rows:', row_count)\n\nif __name__ == '__main__':\n    count_rows(filename)"
    },
    {
        "instruction": "Implement a JavaScript function that takes an object containing a list of key-value pairs and switches the keys and values.",
        "input": "{ 'fname': 'John', 'lname': 'Doe' }",
        "response": "function swapKeyValuePairs(obj) {\n    const swapped = {};\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            swapped[obj[key]] = key;\n        }\n    }\n    return swapped;\n}\n\nconst input = { 'fname': 'John', 'lname': 'Doe' };\nconst result = swapKeyValuePairs(input);\nconsole.log(result);",
        "output": "function swapKeyValuePairs(obj) {\n    const swapped = {};\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            swapped[obj[key]] = key;\n        }\n    }\n    return swapped;\n}\n\nconst input = { 'fname': 'John', 'lname': 'Doe' };\nconst result = swapKeyValuePairs(input);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Python program that counts the frequency of each word in a given text and displays each unique word with its frequency.",
        "input": "Once upon a time in a faraway kingdom, there was a king who ruled the land. The king loved to tell stories, especially fairytales. He had a large library filled with all kinds of books, many of them written by famous authors. One day, while browsing through the books, he found a story that he had never read before. This story was about a brave knight who went on a quest to slay a fearsome dragon. The king decided to share the tale with his people, and they all loved it.",
        "response": "from collections import Counter\n\ndef count_word_frequency(text):\n    words = text.split()\n    word_freq = Counter(words)\n    return word_freq\n\ntext = \"Once upon a time in a faraway kingdom, there was a king who ruled the land. The king loved to tell stories, especially fairytales. He had a large library filled with all kinds of books, many of them written by famous authors. One day, while browsing through the books, he found a story that he had never read before. This story was about a brave knight who went on a quest to slay a fearsome dragon. The king decided to share the tale with his people, and they all loved it.\"\n\nword_freq = count_word_frequency(text)\n\nfor word, count in word_freq.items():\n    print(f\"{word}: {count}\")",
        "output": "from collections import Counter\n\ndef count_word_frequency(text):\n    words = text.split()\n    word_freq = Counter(words)\n    return word_freq\n\ntext = \"Once upon a time in a faraway kingdom, there was a king who ruled the land. The king loved to tell stories, especially fairytales. He had a large library filled with all kinds of books, many of them written by famous authors. One day, while browsing through the books, he found a story that he had never read before. This story was about a brave knight who went on a quest to slay a fearsome dragon. The king decided to share the tale with his people, and they all loved it.\"\n\nword_freq = count_word_frequency(text)\n\nfor word, count in word_freq.items():\n    print(f\"{word}: {count}\")"
    },
    {
        "instruction": "How would you implement a Java method that calculates the factorial of a given positive integer?",
        "input": "5",
        "response": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int num = 5;\n        int result = factorial(num);\n        System.out.println(\"The factorial of \" + num + \" is: \" + result);\n    }}",
        "output": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int num = 5;\n        int result = factorial(num);\n        System.out.println(\"The factorial of \" + num + \" is: \" + result);\n    }}"
    },
    {
        "instruction": "Develop a JavaScript function that removes any duplicates from an array of strings and returns the original array without duplicates.",
        "input": "[\"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"grape\"]",
        "response": "function removeDuplicates(arr) {\n    return Array.from(new Set(arr));}\n\nconst inputArray = [\"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"grape\"];\nconst nonDuplicateArray = removeDuplicates(inputArray);\nconsole.log(nonDuplicateArray);",
        "output": "function removeDuplicates(arr) {\n    return Array.from(new Set(arr));}\n\nconst inputArray = [\"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"grape\"];\nconst nonDuplicateArray = removeDuplicates(inputArray);\nconsole.log(nonDuplicateArray);"
    },
    {
        "instruction": "Create a C++ program that reads a positive integer from the user, calculates its square root, and prints the result.",
        "input": "64",
        "response": "#include <iostream>\n#include <cmath>\n\nint main() {\n    int num;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> num;\n\n    double squareRoot = std::sqrt(num);\n    std::cout << \"The square root of \" << num << \" is: \" << squareRoot;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nint main() {\n    int num;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> num;\n\n    double squareRoot = std::sqrt(num);\n    std::cout << \"The square root of \" << num << \" is: \" << squareRoot;\n\n    return 0;}"
    },
    {
        "instruction": "Design a machine learning module in Python that generates a linear regression model using the scikit-learn library.",
        "input": "x_train: [0, 1, 2, 3, 4], y_train: [1, 3, 5, 7, 9]",
        "response": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx_train = np.array([0, 1, 2, 3, 4]).reshape(-1, 1)\ny_train = np.array([1, 3, 5, 7, 9])\n\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\nprint(model.coef_, model.intercept_)",
        "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nx_train = np.array([0, 1, 2, 3, 4]).reshape(-1, 1)\ny_train = np.array([1, 3, 5, 7, 9])\n\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\nprint(model.coef_, model.intercept_)"
    },
    {
        "instruction": "Prevent SQL injections in a PHP script by using prepared statements to retrieve data from a MySQL database.",
        "input": "SELECT * FROM users WHERE username = 'JohnDoe'",
        "response": "<?php\n$servername = 'localhost';\n$username = 'username';\n$password = 'password';\n$dbname = 'mydatabase';\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);}\n\n$stmt = $conn->prepare('SELECT * FROM users WHERE username = ?');\n$stmt->bind_param('s', $user);\n\n$user = 'JohnDoe';\n$stmt->execute();\n\n$result = $stmt->get_result();\n\nwhile ($row = $result->fetch_assoc()) {\n    printf('User ID: %d, Username: %s\n', $row['id'], $row['username']);}\n\n$stmt->close();\n$conn->close();\n?>",
        "output": "<?php\n$servername = 'localhost';\n$username = 'username';\n$password = 'password';\n$dbname = 'mydatabase';\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);}\n\n$stmt = $conn->prepare('SELECT * FROM users WHERE username = ?');\n$stmt->bind_param('s', $user);\n\n$user = 'JohnDoe';\n$stmt->execute();\n\n$result = $stmt->get_result();\n\nwhile ($row = $result->fetch_assoc()) {\n    printf('User ID: %d, Username: %s\n', $row['id'], $row['username']);}\n\n$stmt->close();\n$conn->close();\n?>"
    },
    {
        "instruction": "How can I remove duplicate elements from a list in Haskell?",
        "input": "[1, 2, 1, 4, 2]",
        "response": "import Data.List (nub)\n\nremove_duplicates :: (Eq a) => [a] -> [a]\nremove_duplicates xs = nub xs\n\nmain = do\n    let xs = [1, 2, 1, 4, 2]\n    let result = remove_duplicates xs\n    print result",
        "output": "import Data.List (nub)\n\nremove_duplicates :: (Eq a) => [a] -> [a]\nremove_duplicates xs = nub xs\n\nmain = do\n    let xs = [1, 2, 1, 4, 2]\n    let result = remove_duplicates xs\n    print result"
    },
    {
        "instruction": "Develop a simple REST API in Node.js using Express that adds a new item to a shopping list.",
        "input": "POST /items, { \"name\": \"milk\", \"quantity\": 2 }",
        "response": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nlet shoppingList = [];\n\napp.post('/items', (req, res) => {\n    const newItem = { name: req.body.name, quantity: req.body.quantity };\n    shoppingList.push(newItem);\n    res.status(201).json(newItem);});\n\nconst port = 3000;\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});",
        "output": "const express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nlet shoppingList = [];\n\napp.post('/items', (req, res) => {\n    const newItem = { name: req.body.name, quantity: req.body.quantity };\n    shoppingList.push(newItem);\n    res.status(201).json(newItem);});\n\nconst port = 3000;\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);});"
    },
    {
        "instruction": "Construct a C++ program that asks for user input consisting of a number n and then calculates the factorial of n.",
        "input": "6",
        "response": "#include <iostream>\n\nusing namespace std;\n\nlong long int factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n;\n    cout << 'Enter a number: ';\n    cin >> n;\n    cout << 'Factorial of ' << n << ' is ' << factorial(n) << endl;\n    return 0;}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nlong long int factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n;\n    cout << 'Enter a number: ';\n    cin >> n;\n    cout << 'Factorial of ' << n << ' is ' << factorial(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "Design a Python script that implements a basic web server using the Flask framework, which displays 'Hello, World!' when a user accesses the root URL.",
        "input": "",
        "response": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "How would you refactor a given JavaScript code snippet to use async/await instead of promises?",
        "input": "function fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Data fetched!');\n    }, 2000);\n  });\n}\n\nfetchData().then(result => console.log(result));",
        "response": "async function fetchData() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Data fetched!');\n    }, 2000);\n  });}\n\nasync function fetchDataAsync() {\n  try {\n    const result = await fetchData();\n    console.log(result);\n  } catch (error) {\n    console.error('Error:', error);\n  }}\n\nfetchDataAsync();",
        "output": "async function fetchData() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Data fetched!');\n    }, 2000);\n  });}\n\nasync function fetchDataAsync() {\n  try {\n    const result = await fetchData();\n    console.log(result);\n  } catch (error) {\n    console.error('Error:', error);\n  }}\n\nfetchDataAsync();"
    },
    {
        "instruction": "Generate a Bash script that calculates the length of a given string.",
        "input": "\"Example string\"",
        "response": "#!/bin/bash\n\ninput_string=\"Example string\"\nlength=${#input_string}\n\necho \"The length of the input string is $length\"",
        "output": "#!/bin/bash\n\ninput_string=\"Example string\"\nlength=${#input_string}\n\necho \"The length of the input string is $length\""
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a positive integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "What is the code for an SQL query that selects all rows from a table named 'employees' and orders the results by 'last_name' in descending order?",
        "input": "employees, last_name",
        "response": "SELECT * FROM employees\nORDER BY last_name DESC;",
        "output": "SELECT * FROM employees\nORDER BY last_name DESC;"
    },
    {
        "instruction": "Develop a Python script that reads a text file and prints the count of words present in the file.",
        "input": "'example.txt'",
        "response": "def word_count(filename):\n    with open(filename, 'r') as f:\n        data = f.read()\n        words = data.split()\n        return len(words)\n\nfilename = 'example.txt'\nprint(f'Word count in {filename}: {word_count(filename)}')",
        "output": "def word_count(filename):\n    with open(filename, 'r') as f:\n        data = f.read()\n        words = data.split()\n        return len(words)\n\nfilename = 'example.txt'\nprint(f'Word count in {filename}: {word_count(filename)}')"
    },
    {
        "instruction": "Write a JavaScript function that takes an object with key-value pairs and returns a new object with keys and values swapped.",
        "input": "{\"a\": 1, \"b\": 2, \"c\": 3}",
        "response": "function swapKeyValue(obj) {\n    let swapped = {};\n    for (let key in obj) {\n        swapped[obj[key]] = key;\n    }\n    return swapped;}\n\nconst inputObj = { a: 1, b: 2, c: 3 };\nconst outputObj = swapKeyValue(inputObj);\nconsole.log(outputObj);",
        "output": "function swapKeyValue(obj) {\n    let swapped = {};\n    for (let key in obj) {\n        swapped[obj[key]] = key;\n    }\n    return swapped;}\n\nconst inputObj = { a: 1, b: 2, c: 3 };\nconst outputObj = swapKeyValue(inputObj);\nconsole.log(outputObj);"
    },
    {
        "instruction": "Write a C++ function that takes a list of integers, finds the even numbers, and returns a new list with the even numbers.",
        "input": "{1, 2, 3, 4, 5, 6}",
        "response": "#include <iostream>\n#include <vector>\n\nstd::vector<int> get_even_numbers(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (auto num : nums) {\n        if (num % 2 == 0) {\n            even_nums.push_back(num);\n        }\n    }\n    return even_nums;}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5, 6};\n    std::vector<int> even_nums = get_even_numbers(nums);\n\n    for (auto num : even_nums) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nstd::vector<int> get_even_numbers(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (auto num : nums) {\n        if (num % 2 == 0) {\n            even_nums.push_back(num);\n        }\n    }\n    return even_nums;}\n\nint main() {\n    std::vector<int> nums = {1, 2, 3, 4, 5, 6};\n    std::vector<int> even_nums = get_even_numbers(nums);\n\n    for (auto num : even_nums) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Create a shell script that takes a directory as input and counts the number of files and folders in the directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndirectory=$1\nfiles_count=$(find \"$directory\" -maxdepth 1 -type f | wc -l)\nfolders_count=$(find \"$directory\" -maxdepth 1 -mindepth 1 -type d 2>&1 | wc -l)\n\nprintf 'Number of files: %d\n' \"$files_count\"\nprintf 'Number of folders: %d\n' \"$folders_count\"",
        "output": "#!/bin/bash\n\ndirectory=$1\nfiles_count=$(find \"$directory\" -maxdepth 1 -type f | wc -l)\nfolders_count=$(find \"$directory\" -maxdepth 1 -mindepth 1 -type d 2>&1 | wc -l)\n\nprintf 'Number of files: %d\n' \"$files_count\"\nprintf 'Number of folders: %d\n' \"$folders_count\""
    },
    {
        "instruction": "How would you create a Python method to calculate and return the factorial of a non-negative integer?",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Using Java, design a function that accepts a user's name and age as input and returns a string greeting the user and mentioning their age.",
        "input": "\"Alice\", 30",
        "response": "class Greeting {\n    \n    public static String createGreeting(String name, int age) {\n        return String.format(\"Hello, %s! You are %d years old.\", name, age);\n    }\n\n    public static void main(String[] args) {\n        String greeting = createGreeting(\"Alice\", 30);\n        System.out.println(greeting);\n    }\n}",
        "output": "class Greeting {\n    \n    public static String createGreeting(String name, int age) {\n        return String.format(\"Hello, %s! You are %d years old.\", name, age);\n    }\n\n    public static void main(String[] args) {\n        String greeting = createGreeting(\"Alice\", 30);\n        System.out.println(greeting);\n    }\n}"
    },
    {
        "instruction": "Design a C++ function that accepts a vector of integers and removes all duplicates from it.",
        "input": "{2, 3, 3, 4, 4, 4, 1}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid remove_duplicates(std::vector<int>& v) {\n    std::sort(v.begin(), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());}\n\nint main() {\n    std::vector<int> nums = {2, 3, 3, 4, 4, 4, 1};\n    remove_duplicates(nums);\n    \n    for (int num : nums) {\n        std::cout << num << ' ';\n    }\n    \n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid remove_duplicates(std::vector<int>& v) {\n    std::sort(v.begin(), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());}\n\nint main() {\n    std::vector<int> nums = {2, 3, 3, 4, 4, 4, 1};\n    remove_duplicates(nums);\n    \n    for (int num : nums) {\n        std::cout << num << ' ';\n    }\n    \n    return 0;}"
    },
    {
        "instruction": "How would you write a Python script that fetches data from an API and saves it to a CSV file?",
        "input": "API endpoint: 'https://jsonplaceholder.typicode.com/todos'",
        "response": "import requests\nimport csv\n\nurl = 'https://jsonplaceholder.typicode.com/todos'\n\nresponse = requests.get(url)\ndata = response.json()\n\nwith open('output.csv', mode='w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow(['userId', 'id', 'title', 'completed'])\n\n    for item in data:\n        writer.writerow([item['userId'], item['id'], item['title'], item['completed']])",
        "output": "import requests\nimport csv\n\nurl = 'https://jsonplaceholder.typicode.com/todos'\n\nresponse = requests.get(url)\ndata = response.json()\n\nwith open('output.csv', mode='w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow(['userId', 'id', 'title', 'completed'])\n\n    for item in data:\n        writer.writerow([item['userId'], item['id'], item['title'], item['completed']])"
    },
    {
        "instruction": "Implement a Java function that takes a string and returns the number of vowels (upper or lowercase) in it.",
        "input": "\"Good mornINg, hAve A NiCe day!\"",
        "response": "public class VowelCounter {\n    public static int countVowels(String input) {\n        int vowelCount = 0;\n        input = input.toLowerCase();\n\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowelCount++;\n            }\n        }\n\n        return vowelCount;\n    }\n\n    public static void main(String[] args) {\n        String input = \"Good mornINg, hAve A NiCe day!\";\n        System.out.println(countVowels(input));\n    }}",
        "output": "public class VowelCounter {\n    public static int countVowels(String input) {\n        int vowelCount = 0;\n        input = input.toLowerCase();\n\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowelCount++;\n            }\n        }\n\n        return vowelCount;\n    }\n\n    public static void main(String[] args) {\n        String input = \"Good mornINg, hAve A NiCe day!\";\n        System.out.println(countVowels(input));\n    }}"
    },
    {
        "instruction": "Write a shell script that calculates the total file size of a given directory.",
        "input": "directory: '/var/log'",
        "response": "#!/bin/bash\n\ndirectory='/var/log'\ntotal_size=0\n\nfor file in $(find $directory -type f); do\n    file_size=$(stat -c%s \"$file\")\n    total_size=$((total_size + file_size))\ndone\n\necho \"Total file size in $directory: $total_size bytes\"",
        "output": "#!/bin/bash\n\ndirectory='/var/log'\ntotal_size=0\n\nfor file in $(find $directory -type f); do\n    file_size=$(stat -c%s \"$file\")\n    total_size=$((total_size + file_size))\ndone\n\necho \"Total file size in $directory: $total_size bytes\""
    },
    {
        "instruction": "Write a C++ program that reads an integer from the user and determines whether it is a prime number.",
        "input": "37",
        "response": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) return false;\n    }\n    return true;}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (is_prime(number))\n        std::cout << number << \" is a prime number.\" << std::endl;\n    else\n        std::cout << number << \" is not a prime number.\" << std::endl;\n    \n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i <= sqrt(num); i++) {\n        if (num % i == 0) return false;\n    }\n    return true;}\n\nint main() {\n    int number;\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (is_prime(number))\n        std::cout << number << \" is a prime number.\" << std::endl;\n    else\n        std::cout << number << \" is not a prime number.\" << std::endl;\n    \n    return 0;}"
    },
    {
        "instruction": "Design a JavaScript function to remove duplicates from an array without using the Set data structure.",
        "input": "[1, 2, 3, 1, 2, 4, 5]",
        "response": "function removeDuplicates(arr) {\n    const result = [];\n    for (const item of arr) {\n        if (result.indexOf(item) === -1) {\n            result.push(item);\n        }\n    }\n    return result;}\n\nconst inputArr = [1, 2, 3, 1, 2, 4, 5];\nconst uniqueArr = removeDuplicates(inputArr);\nconsole.log(uniqueArr);",
        "output": "function removeDuplicates(arr) {\n    const result = [];\n    for (const item of arr) {\n        if (result.indexOf(item) === -1) {\n            result.push(item);\n        }\n    }\n    return result;}\n\nconst inputArr = [1, 2, 3, 1, 2, 4, 5];\nconst uniqueArr = removeDuplicates(inputArr);\nconsole.log(uniqueArr);"
    },
    {
        "instruction": "Develop a Shell script that reads an input file line by line and counts the number of lines.",
        "input": "sample_file.txt",
        "response": "#!/bin/bash\n\nfile=\"$1\"\nline_count=0\n\nwhile IFS= read -r line\ndo\n  line_count=$((line_count + 1))\ndone < \"$file\"\n\necho \"Number of lines: $line_count\"",
        "output": "#!/bin/bash\n\nfile=\"$1\"\nline_count=0\n\nwhile IFS= read -r line\ndo\n  line_count=$((line_count + 1))\ndone < \"$file\"\n\necho \"Number of lines: $line_count\""
    },
    {
        "instruction": "Write a C++ function that counts the number of occurrences of a character in a given string.",
        "input": "'hello world', 'l'",
        "response": "#include <iostream>\n#include <string>\n\nint count_occurrences(const std::string& str, char ch) {\n    int count = 0;\n    for (const auto &c : str) {\n        if (c == ch) count++;\n    }\n    return count;}\n\nint main() {\n    std::string text = \"hello world\";\n    char character = 'l';\n    int occurrences = count_occurrences(text, character);\n    std::cout << \"Occurrences: \" << occurrences << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nint count_occurrences(const std::string& str, char ch) {\n    int count = 0;\n    for (const auto &c : str) {\n        if (c == ch) count++;\n    }\n    return count;}\n\nint main() {\n    std::string text = \"hello world\";\n    char character = 'l';\n    int occurrences = count_occurrences(text, character);\n    std::cout << \"Occurrences: \" << occurrences << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you create a Python function to compute the factorial of a given positive integer?",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnumber = 6\nresult = factorial(number)\nprint('Factorial of', number, 'is', result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnumber = 6\nresult = factorial(number)\nprint('Factorial of', number, 'is', result)"
    },
    {
        "instruction": "How would you implement a JavaScript function that accepts a URL string and returns the value of a specified query parameter?",
        "input": "'https://example.com?param1=value1&param2=value2', 'param2'",
        "response": "function getQueryParameterValue(url, paramName) {\n    const paramsString = url.split('?')[1];\n    const paramsArray = paramsString.split('&');\n    for (const param of paramsArray) {\n        const [name, value] = param.split('=');\n        if (name === paramName) {\n            return value;\n        }\n    }\n    return null;}\n\nconst url = 'https://example.com?param1=value1&param2=value2';\nconst parameterName = 'param2';\nconst parameterValue = getQueryParameterValue(url, parameterName);\nconsole.log(parameterValue);",
        "output": "function getQueryParameterValue(url, paramName) {\n    const paramsString = url.split('?')[1];\n    const paramsArray = paramsString.split('&');\n    for (const param of paramsArray) {\n        const [name, value] = param.split('=');\n        if (name === paramName) {\n            return value;\n        }\n    }\n    return null;}\n\nconst url = 'https://example.com?param1=value1&param2=value2';\nconst parameterName = 'param2';\nconst parameterValue = getQueryParameterValue(url, parameterName);\nconsole.log(parameterValue);"
    },
    {
        "instruction": "Construct a Shell script that takes a file name as a command line argument and outputs the number of lines in it.",
        "input": "example.txt",
        "response": "#!/bin/sh\n\nif [ \"$#\" -ne 1 ]; then\n    echo \"Usage: $0 <file_name>\"\n    exit 1\nfi\n\nfile_name=\"$1\"\nline_count=$(wc -l < \"$file_name\")\necho \"Number of lines in $file_name: $line_count\"",
        "output": "#!/bin/sh\n\nif [ \"$#\" -ne 1 ]; then\n    echo \"Usage: $0 <file_name>\"\n    exit 1\nfi\n\nfile_name=\"$1\"\nline_count=$(wc -l < \"$file_name\")\necho \"Number of lines in $file_name: $line_count\""
    },
    {
        "instruction": "In Python, write a script to download a webpage's HTML content using the requests library.",
        "input": "https://www.example.com",
        "response": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    html_content = response.text\n    print(html_content)\nelse:\n    print('Failed to download webpage. Status code:', response.status_code)",
        "output": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    html_content = response.text\n    print(html_content)\nelse:\n    print('Failed to download webpage. Status code:', response.status_code)"
    },
    {
        "instruction": "Craft a SQL query that retrieves all records with a specific value in a particular column from a table.",
        "input": "Table: 'employees', Column: 'job_title', Value: 'Software Engineer'",
        "response": "SELECT * FROM employees WHERE job_title = 'Software Engineer';",
        "output": "SELECT * FROM employees WHERE job_title = 'Software Engineer';"
    },
    {
        "instruction": "Write a shell script that accepts a file path as input and returns 'true' if the file exists, and 'false' otherwise.",
        "input": "/etc/hosts",
        "response": "#!/bin/sh\n\nfile_path=\"$1\"\n\nif [ -e \"$file_path\" ]; then\n    echo \"true\"\nelse\n    echo \"false\"\nfi\n\n# Usage: ./file_exists.sh /etc/hosts",
        "output": "#!/bin/sh\n\nfile_path=\"$1\"\n\nif [ -e \"$file_path\" ]; then\n    echo \"true\"\nelse\n    echo \"false\"\nfi\n\n# Usage: ./file_exists.sh /etc/hosts"
    },
    {
        "instruction": "Design a C++ function that calculates the factorial of a given integer recursively.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a simple calculator in Python that supports addition, subtraction, multiplication, and division?",
        "input": "10, 5, '+'",
        "response": "def calculator(a, b, operation):\n    if operation == '+':\n        return a + b\n    elif operation == '-':\n        return a - b\n    elif operation == '*':\n        return a * b\n    elif operation == '/':\n        return a / b\n\na = 10\nb = 5\noperation = '+'\n\nresult = calculator(a, b, operation)\nprint(result)",
        "output": "def calculator(a, b, operation):\n    if operation == '+':\n        return a + b\n    elif operation == '-':\n        return a - b\n    elif operation == '*':\n        return a * b\n    elif operation == '/':\n        return a / b\n\na = 10\nb = 5\noperation = '+'\n\nresult = calculator(a, b, operation)\nprint(result)"
    },
    {
        "instruction": "Write a Java program that reads a CSV file and prints the entire data to the console.",
        "input": "\"data.csv\"",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class CSVReader {\n    public static void main(String[] args) {\n        String csvFile = \"data.csv\";\n        String line;\n        String csvSplitBy = \",\";\n\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n            while ((line = br.readLine()) != null) {\n                String[] data = line.split(csvSplitBy);\n                for (String item : data) {\n                    System.out.print(item + \" \");\n                }\n                System.out.println();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class CSVReader {\n    public static void main(String[] args) {\n        String csvFile = \"data.csv\";\n        String line;\n        String csvSplitBy = \",\";\n\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n            while ((line = br.readLine()) != null) {\n                String[] data = line.split(csvSplitBy);\n                for (String item : data) {\n                    System.out.print(item + \" \");\n                }\n                System.out.println();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }}"
    },
    {
        "instruction": "Demonstrate how to create an HTTP server in Node.js that responds with 'Hello, World!' on the '/' route.",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    if (req.url === '/') {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('Hello, World!');\n    } else {\n        res.writeHead(404);\n        res.end();\n    }});\n\nconst port = 3000;\n\nserver.listen(port, () => {\n    console.log(`Server is running on port ${port}`);});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    if (req.url === '/') {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('Hello, World!');\n    } else {\n        res.writeHead(404);\n        res.end();\n    }});\n\nconst port = 3000;\n\nserver.listen(port, () => {\n    console.log(`Server is running on port ${port}`);});"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a non-negative integer n.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 6;\n    std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Can you create a SQL query that retrieves all columns from a database table named 'orders', but only orders placed within the last 30 days?",
        "input": "orders table with columns: order_id, customer_id, order_date",
        "response": "SELECT * FROM orders WHERE order_date >= DATEADD(day, -30, GETDATE());",
        "output": "SELECT * FROM orders WHERE order_date >= DATEADD(day, -30, GETDATE());"
    },
    {
        "instruction": "Write a Shell script that takes a directory path as an argument and lists all files size in descending order.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\nif [ -d \"$1\" ]; then\n    find \"$1\" -type f -exec ls -lSh {} +\nelse\n    echo \"Invalid directory path\"\nfi",
        "output": "#!/bin/bash\n\nif [ -d \"$1\" ]; then\n    find \"$1\" -type f -exec ls -lSh {} +\nelse\n    echo \"Invalid directory path\"\nfi"
    },
    {
        "instruction": "Develop a C# class called 'Rectangle' with properties for width and height, a constructor, and a method to calculate the area.",
        "input": "Rectangle obj = new Rectangle(5, 10);",
        "response": "public class Rectangle {\n    public double Width { get; set; }\n    public double Height { get; set; }\n\n    public Rectangle(double width, double height) {\n        Width = width;\n        Height = height;\n    }\n\n    public double CalculateArea() {\n        return Width * Height;\n    }\n}\n\nRectangle obj = new Rectangle(5, 10);\nConsole.WriteLine(obj.CalculateArea());",
        "output": "public class Rectangle {\n    public double Width { get; set; }\n    public double Height { get; set; }\n\n    public Rectangle(double width, double height) {\n        Width = width;\n        Height = height;\n    }\n\n    public double CalculateArea() {\n        return Width * Height;\n    }\n}\n\nRectangle obj = new Rectangle(5, 10);\nConsole.WriteLine(obj.CalculateArea());"
    },
    {
        "instruction": "Write a Python function that reverses a string without using built-in methods or slicing.",
        "input": "\"hello world\"",
        "response": "def reverse_string(s):\n    result = ''\n    for char in s:\n        result = char + result\n    return result\n\ninput_string = \"hello world\"\noutput_string = reverse_string(input_string)\nprint(output_string)",
        "output": "def reverse_string(s):\n    result = ''\n    for char in s:\n        result = char + result\n    return result\n\ninput_string = \"hello world\"\noutput_string = reverse_string(input_string)\nprint(output_string)"
    },
    {
        "instruction": "Implement a C# function that accepts an array of integers, sorts it in ascending order, and returns the sorted array.",
        "input": "int[] arr = {5, 2, 8, 1, 3};",
        "response": "public static int[] SortArray(int[] inputArr) {\n    for (int i = 0; i < inputArr.Length - 1; i++) {\n        for (int j = 0; j < inputArr.Length - 1 - i; j++) {\n            if (inputArr[j] > inputArr[j + 1]) {\n                int temp = inputArr[j];\n                inputArr[j] = inputArr[j + 1];\n                inputArr[j + 1] = temp;\n            }\n        }\n    }\n    return inputArr;}\n\nint[] arr = {5, 2, 8, 1, 3};\nint[] sortedArr = SortArray(arr);\nforeach (int num in sortedArr) {\n    Console.Write(num + \" \");}",
        "output": "public static int[] SortArray(int[] inputArr) {\n    for (int i = 0; i < inputArr.Length - 1; i++) {\n        for (int j = 0; j < inputArr.Length - 1 - i; j++) {\n            if (inputArr[j] > inputArr[j + 1]) {\n                int temp = inputArr[j];\n                inputArr[j] = inputArr[j + 1];\n                inputArr[j + 1] = temp;\n            }\n        }\n    }\n    return inputArr;}\n\nint[] arr = {5, 2, 8, 1, 3};\nint[] sortedArr = SortArray(arr);\nforeach (int num in sortedArr) {\n    Console.Write(num + \" \");}"
    },
    {
        "instruction": "How can we make a JavaScript function to compare two dates in the format 'YYYY-MM-DD'?",
        "input": "\"2021-12-01\", \"2021-11-30\"",
        "response": "function compareDates(date1, date2) {\n    const d1 = new Date(date1);\n    const d2 = new Date(date2);\n\n    if (d1 < d2) {\n        return 'Date1 is earlier';\n    } else if (d1 > d2) {\n        return 'Date1 is later';\n    } else {\n        return 'Dates are the same';\n    }}\n\nconst date1 = '2021-12-01';\nconst date2 = '2021-11-30';\nconsole.log(compareDates(date1, date2));",
        "output": "function compareDates(date1, date2) {\n    const d1 = new Date(date1);\n    const d2 = new Date(date2);\n\n    if (d1 < d2) {\n        return 'Date1 is earlier';\n    } else if (d1 > d2) {\n        return 'Date1 is later';\n    } else {\n        return 'Dates are the same';\n    }}\n\nconst date1 = '2021-12-01';\nconst date2 = '2021-11-30';\nconsole.log(compareDates(date1, date2));"
    },
    {
        "instruction": "Design a shell script that iterates through all the text files in a directory and counts the total number of lines.",
        "input": "directory: /path/to/textfiles/",
        "response": "#!/bin/bash\n\ndirectory=\"/path/to/textfiles/\"\ntotal_lines=0\n\nfor file in \"$directory\"*.txt; do\n    file_lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + file_lines))\ndone\n\necho \"Total lines: $total_lines\"",
        "output": "#!/bin/bash\n\ndirectory=\"/path/to/textfiles/\"\ntotal_lines=0\n\nfor file in \"$directory\"*.txt; do\n    file_lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + file_lines))\ndone\n\necho \"Total lines: $total_lines\""
    },
    {
        "instruction": "Construct a C++ program that finds the longest common prefix of a list of strings.",
        "input": "['string', 'struggle', 'street', 'straw']",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string find_longest_common_prefix(const std::vector<std::string>& words) {\n    if (words.empty()) return \"\";\n    std::string prefix = words[0];\n    for (const std::string& word : words) {\n        while (word.find(prefix) != 0) {\n            prefix = prefix.substr(0, prefix.length() - 1);\n            if (prefix.empty()) return \"\";\n        }\n    }\n    return prefix;}\n\nint main() {\n    std::vector<std::string> words = {\"string\", \"struggle\", \"street\", \"straw\"};\n    std::string longest_prefix = find_longest_common_prefix(words);\n    std::cout << longest_prefix << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::string find_longest_common_prefix(const std::vector<std::string>& words) {\n    if (words.empty()) return \"\";\n    std::string prefix = words[0];\n    for (const std::string& word : words) {\n        while (word.find(prefix) != 0) {\n            prefix = prefix.substr(0, prefix.length() - 1);\n            if (prefix.empty()) return \"\";\n        }\n    }\n    return prefix;}\n\nint main() {\n    std::vector<std::string> words = {\"string\", \"struggle\", \"street\", \"straw\"};\n    std::string longest_prefix = find_longest_common_prefix(words);\n    std::cout << longest_prefix << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you give me an example of a RESTful API request using the Python requests library?",
        "input": "GET request to https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print(response.json())\nelse:\n    print(f'Error: {response.status_code}')",
        "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print(response.json())\nelse:\n    print(f'Error: {response.status_code}')"
    },
    {
        "instruction": "Develop a Bash script that checks if a specific word is present in a text file.",
        "input": "Word: 'apple'\nText file: 'fruits.txt'",
        "response": "#!/bin/bash\n\nword='apple'\nfile='fruits.txt'\n\nif grep -q \"${word}\" \"${file}\"; then\n    echo \"${word} found in ${file}\"\nelse\n    echo \"${word} not found in ${file}\"\nfi",
        "output": "#!/bin/bash\n\nword='apple'\nfile='fruits.txt'\n\nif grep -q \"${word}\" \"${file}\"; then\n    echo \"${word} found in ${file}\"\nelse\n    echo \"${word} not found in ${file}\"\nfi"
    },
    {
        "instruction": "Fix the provided C# code to properly calculate the factorial of a given number.",
        "input": "public int Factorial(int n) {\n    if (n == 1) return n;\n    return n * Factorial(n);\n}\n\nConsole.WriteLine(Factorial(5));",
        "response": "public static int Factorial(int n) {\n    if (n == 1) return n;\n    return n * Factorial(n - 1);}\n\nConsole.WriteLine(Factorial(5));",
        "output": "public static int Factorial(int n) {\n    if (n == 1) return n;\n    return n * Factorial(n - 1);}\n\nConsole.WriteLine(Factorial(5));"
    },
    {
        "instruction": "Design a C# method that accepts an integer and checks if it's prime.",
        "input": "47",
        "response": "using System;\n\nclass Program\n{\n    public static bool IsPrime(int n)\n    {\n        if (n <= 1)\n            return false;\n\n        for (int i = 2; i <= Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    static void Main(string[] args)\n    {\n        int num = 47;\n        Console.WriteLine(IsPrime(num));\n    }}",
        "output": "using System;\n\nclass Program\n{\n    public static bool IsPrime(int n)\n    {\n        if (n <= 1)\n            return false;\n\n        for (int i = 2; i <= Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    static void Main(string[] args)\n    {\n        int num = 47;\n        Console.WriteLine(IsPrime(num));\n    }}"
    },
    {
        "instruction": "Write a SQL query that retrieves all employee records having a salary greater than 50000 from the 'employees' table.",
        "input": "employees (id, firstName, lastName, salary)",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "In Python, how can you convert a list of strings to a list of integers?",
        "input": "['1', '5', '10']",
        "response": "string_list = ['1', '5', '10']\ninteger_list = [int(x) for x in string_list]\nprint(integer_list)",
        "output": "string_list = ['1', '5', '10']\ninteger_list = [int(x) for x in string_list]\nprint(integer_list)"
    },
    {
        "instruction": "Implement a simple shell script that takes a filename as an argument and counts the number of lines in the file.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfilename=$1\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\"",
        "output": "#!/bin/bash\n\nfilename=$1\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\""
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a given number using a recursive approach.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Design a Python class to represent a bank account with deposit, withdraw, and balance functions.",
        "input": "Initial_deposit: 1000, Withdraw: 200, Deposit: 150",
        "response": "class BankAccount:\n    def __init__(self, initial_deposit):\n        self.balance = initial_deposit\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise ValueError('Insufficient balance.')\n        self.balance -= amount\n\n    def get_balance(self):\n        return self.balance\n\naccount = BankAccount(1000)\naccount.withdraw(200)\naccount.deposit(150)\nprint('Current balance:', account.get_balance())",
        "output": "class BankAccount:\n    def __init__(self, initial_deposit):\n        self.balance = initial_deposit\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise ValueError('Insufficient balance.')\n        self.balance -= amount\n\n    def get_balance(self):\n        return self.balance\n\naccount = BankAccount(1000)\naccount.withdraw(200)\naccount.deposit(150)\nprint('Current balance:', account.get_balance())"
    },
    {
        "instruction": "In JavaScript, write a function that accepts an array of names and returns a new array with 'Hello, [name]!' added to each element.",
        "input": "['Alice', 'Bob', 'Eve']",
        "response": "function greetNames(names) {\n    return names.map(name => `Hello, ${name}!`);}\n\nconst inputNames = ['Alice', 'Bob', 'Eve'];\nconst greetedNames = greetNames(inputNames);\nconsole.log(greetedNames);",
        "output": "function greetNames(names) {\n    return names.map(name => `Hello, ${name}!`);}\n\nconst inputNames = ['Alice', 'Bob', 'Eve'];\nconst greetedNames = greetNames(inputNames);\nconsole.log(greetedNames);"
    },
    {
        "instruction": "Create a C# method to check whether a given string contains only numeric characters.",
        "input": "\"123456\"",
        "response": "using System;\nclass NumericStringChecker {\n    public static bool IsNumeric(string input) {\n        foreach (char c in input) {\n            if (!Char.IsDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void Main() {\n        string testInput = \"123456\";\n        bool result = IsNumeric(testInput);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\nclass NumericStringChecker {\n    public static bool IsNumeric(string input) {\n        foreach (char c in input) {\n            if (!Char.IsDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void Main() {\n        string testInput = \"123456\";\n        bool result = IsNumeric(testInput);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "Write a C# function that finds the factorial of a given positive integer using recursion.",
        "input": "5",
        "response": "using System;\n\nclass Program {\n    static int Factorial(int n) {\n        if (n <= 1) return 1;\n        return n * Factorial(n - 1);\n    }\n\n    static void Main() {\n        int result = Factorial(5);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\n\nclass Program {\n    static int Factorial(int n) {\n        if (n <= 1) return 1;\n        return n * Factorial(n - 1);\n    }\n\n    static void Main() {\n        int result = Factorial(5);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "How can one implement a function in PHP that accepts a string and returns the string reversed?",
        "input": "'Hello, World!'",
        "response": "<?php\n\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input = 'Hello, World!';\n$result = reverse_string($input);\n\necho $result;\n\n?>",
        "output": "<?php\n\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input = 'Hello, World!';\n$result = reverse_string($input);\n\necho $result;\n\n?>"
    },
    {
        "instruction": "Create a shell script that counts the number of files in a directory.",
        "input": "directory: ~/my_folder",
        "response": "#!/bin/bash\n\ndirectory='~/my_folder'\n\nnum_files=$(ls -1A \"$directory\" | wc -l)\n\necho \"Number of files in $directory: $num_files\"",
        "output": "#!/bin/bash\n\ndirectory='~/my_folder'\n\nnum_files=$(ls -1A \"$directory\" | wc -l)\n\necho \"Number of files in $directory: $num_files\""
    },
    {
        "instruction": "Write a Haskell function that takes a list of integers and filters out odd numbers.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "filterEven :: [Int] -> [Int]\nfilterEven = filter even\n\nmain :: IO ()\nmain = print $ filterEven [1, 2, 3, 4, 5, 6]",
        "output": "filterEven :: [Int] -> [Int]\nfilterEven = filter even\n\nmain :: IO ()\nmain = print $ filterEven [1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "Write a C++ program to implement a simple arithmetic calculator that takes two numbers and an operator as input and performs the specified operation.",
        "input": "8.2, '*', 3.5",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    double num1, num2, result;\n    char op;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter operator (+, -, *, /): \";\n    cin >> op;\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    switch(op) {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            if (num2 != 0) {\n                result = num1 / num2;\n            } else {\n                cout << \"Error: Division by zero\" << endl;\n                return 1;\n            }\n            break;\n        default:\n            cout << \"Error: Invalid operator\" << endl;\n            return 1;\n    }\n\n    cout << \"Result: \" << result << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    double num1, num2, result;\n    char op;\n\n    cout << \"Enter first number: \";\n    cin >> num1;\n    cout << \"Enter operator (+, -, *, /): \";\n    cin >> op;\n    cout << \"Enter second number: \";\n    cin >> num2;\n\n    switch(op) {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            if (num2 != 0) {\n                result = num1 / num2;\n            } else {\n                cout << \"Error: Division by zero\" << endl;\n                return 1;\n            }\n            break;\n        default:\n            cout << \"Error: Invalid operator\" << endl;\n            return 1;\n    }\n\n    cout << \"Result: \" << result << endl;\n    return 0;}"
    },
    {
        "instruction": "Design a PHP function that accepts a sentence and returns the count of vowels in it.",
        "input": "This is an example sentence.",
        "response": "<?php\nfunction count_vowels($sentence) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $count = 0;\n    $lowercased = strtolower($sentence);\n\n    for ($i = 0; $i < strlen($sentence); $i++) {\n        if (in_array($lowercased[$i], $vowels)) {\n            $count++;\n        }\n    }\n\n    return $count;}\n\n$input = 'This is an example sentence.';\necho 'Vowels count: ' . count_vowels($input);\n?>",
        "output": "<?php\nfunction count_vowels($sentence) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $count = 0;\n    $lowercased = strtolower($sentence);\n\n    for ($i = 0; $i < strlen($sentence); $i++) {\n        if (in_array($lowercased[$i], $vowels)) {\n            $count++;\n        }\n    }\n\n    return $count;}\n\n$input = 'This is an example sentence.';\necho 'Vowels count: ' . count_vowels($input);\n?>"
    },
    {
        "instruction": "How can you implement a RESTful API in Node.js using Express that responds with the full name of a user when provided their first name and last name?",
        "input": "{\"firstName\": \"John\", \"lastName\": \"Doe\"}",
        "response": "const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\n\napp.post('/fullName', (req, res) => {\n    const { firstName, lastName } = req.body;\n    if (firstName && lastName) {\n        res.json({ fullName: `${firstName} ${lastName}` });\n    } else {\n        res.status(400).json({ message: \"Invalid input\" });\n    }});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n    console.log(`Server listening on port ${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\n\napp.post('/fullName', (req, res) => {\n    const { firstName, lastName } = req.body;\n    if (firstName && lastName) {\n        res.json({ fullName: `${firstName} ${lastName}` });\n    } else {\n        res.status(400).json({ message: \"Invalid input\" });\n    }});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n    console.log(`Server listening on port ${port}`);});"
    },
    {
        "instruction": "Create a shell script to calculate and display the sum of all integers from 1 to a given number.",
        "input": "5",
        "response": "#!/bin/bash\n\nread -p \"Enter a number: \" num\n\nsum=0\nfor ((i=1; i<=num; i++))\ndo\n    sum=$((sum + i))\ndone\n\necho \"Sum of integers from 1 to $num: $sum\"",
        "output": "#!/bin/bash\n\nread -p \"Enter a number: \" num\n\nsum=0\nfor ((i=1; i<=num; i++))\ndo\n    sum=$((sum + i))\ndone\n\necho \"Sum of integers from 1 to $num: $sum\""
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a provided integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a Python script that reads the contents of a text file and prints out the number of occurrences of a specific word?",
        "input": "filename: 'example.txt', word: 'apple'",
        "response": "def count_word_occurrences(filename, word):\n    with open(filename, 'r') as f:\n        text = f.read()\n        \n    words = text.split()\n    count = words.count(word)\n    \n    print(f'\"{word}\" occurs {count} times in the file.')\n\ncount_word_occurrences('example.txt', 'apple')",
        "output": "def count_word_occurrences(filename, word):\n    with open(filename, 'r') as f:\n        text = f.read()\n        \n    words = text.split()\n    count = words.count(word)\n    \n    print(f'\"{word}\" occurs {count} times in the file.')\n\ncount_word_occurrences('example.txt', 'apple')"
    },
    {
        "instruction": "Craft a Shell script that accepts a directory path as an argument and lists out all files and subdirectories.",
        "input": "/home/user/Documents",
        "response": "#!/bin/bash\n\nif [ -n \"$1\" ]; then\n    path=\"$1\"\nelse\n    path=\".\"\nfi\n\nfor entry in \"$path\"/*\ndo\n    echo \"$entry\"\ndone",
        "output": "#!/bin/bash\n\nif [ -n \"$1\" ]; then\n    path=\"$1\"\nelse\n    path=\".\"\nfi\n\nfor entry in \"$path\"/*\ndo\n    echo \"$entry\"\ndone"
    },
    {
        "instruction": "Write a PHP function that accepts an associative array of employee data and calculates the average salary.",
        "input": "employees: [{\"name\":\"John\",\"salary\":45000},{\"name\":\"Jane\",\"salary\":55000},{\"name\":\"Mark\",\"salary\":60000}]",
        "response": "<?php\n\nfunction calculate_average_salary($employees) {\n    $total_salary = 0;\n    $num_employees = count($employees);\n    \n    foreach ($employees as $employee) {\n        $total_salary += $employee['salary'];\n    }\n    \n    $average_salary = $total_salary / $num_employees;\n    return $average_salary;}\n\n$employees = [\n    ['name' => 'John', 'salary' => 45000],\n    ['name' => 'Jane', 'salary' => 55000],\n    ['name' => 'Mark', 'salary' => 60000]\n];\n\necho 'Average salary: ' . calculate_average_salary($employees);",
        "output": "<?php\n\nfunction calculate_average_salary($employees) {\n    $total_salary = 0;\n    $num_employees = count($employees);\n    \n    foreach ($employees as $employee) {\n        $total_salary += $employee['salary'];\n    }\n    \n    $average_salary = $total_salary / $num_employees;\n    return $average_salary;}\n\n$employees = [\n    ['name' => 'John', 'salary' => 45000],\n    ['name' => 'Jane', 'salary' => 55000],\n    ['name' => 'Mark', 'salary' => 60000]\n];\n\necho 'Average salary: ' . calculate_average_salary($employees);"
    },
    {
        "instruction": "Construct a C++ program that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1)\n        return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1)\n        return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Design a C# function that rotates an array to the left by a specified number of positions.",
        "input": "[1, 2, 3, 4, 5], 3",
        "response": "using System;\n\nclass ArrayRotation\n{\n    public static void RotateLeft(int[] arr, int n)\n    {\n        int size = arr.Length;\n        int[] temp = new int[n];\n\n        Array.Copy(arr, 0, temp, 0, n);\n        Array.Copy(arr, n, arr, 0, size - n);\n        Array.Copy(temp, 0, arr, size - n, n);\n    }\n\n    public static void Main()\n    {\n        int[] arr = { 1, 2, 3, 4, 5 };\n        int n = 3;\n\n        RotateLeft(arr, n);\n\n        Console.WriteLine(string.Join(\", \", arr));\n    }}",
        "output": "using System;\n\nclass ArrayRotation\n{\n    public static void RotateLeft(int[] arr, int n)\n    {\n        int size = arr.Length;\n        int[] temp = new int[n];\n\n        Array.Copy(arr, 0, temp, 0, n);\n        Array.Copy(arr, n, arr, 0, size - n);\n        Array.Copy(temp, 0, arr, size - n, n);\n    }\n\n    public static void Main()\n    {\n        int[] arr = { 1, 2, 3, 4, 5 };\n        int n = 3;\n\n        RotateLeft(arr, n);\n\n        Console.WriteLine(string.Join(\", \", arr));\n    }}"
    },
    {
        "instruction": "Devise a Bash script to rename all files with a certain extension in the current directory to have a different extension.",
        "input": "txt, log",
        "response": "#!/bin/bash\n\nold_ext='txt'\nnew_ext='log'\n\nfor f in *.$old_ext; do\n    mv -- \"$f\" \"${f%%.$old_ext}.$new_ext\"\ndone",
        "output": "#!/bin/bash\n\nold_ext='txt'\nnew_ext='log'\n\nfor f in *.$old_ext; do\n    mv -- \"$f\" \"${f%%.$old_ext}.$new_ext\"\ndone"
    },
    {
        "instruction": "How would you use Python to count the occurrences of a specific word in a given text?",
        "input": "\"the quick brown fox jumped over the lazy dog\", \"the\"",
        "response": "def count_occurrences(text, word):\n    words = text.split()\n    return words.count(word)\n\ntext = \"the quick brown fox jumped over the lazy dog\"\nword = \"the\"\n\nresult = count_occurrences(text, word)\nprint(result)",
        "output": "def count_occurrences(text, word):\n    words = text.split()\n    return words.count(word)\n\ntext = \"the quick brown fox jumped over the lazy dog\"\nword = \"the\"\n\nresult = count_occurrences(text, word)\nprint(result)"
    },
    {
        "instruction": "Write a Python program that reads a CSV file and calculates the average value of a specified column.",
        "input": "csv_file_path = 'data.csv'\ncolumn_name = 'age'\ndata.csv contents:\n\"name,age,city\"\n\"Alice,28,New York\"\n\"Bob,32,Los Angeles\"\n\"Eve,25,San Francisco\"",
        "response": "import csv\n\ndef average_column(csv_file_path, column_name):\n    total = 0\n    count = 0\n\n    with open(csv_file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n\n        for row in reader:\n            total += int(row[column_name])\n            count += 1\n\n    return total / count if count > 0 else 0\n\naverage_age = average_column(csv_file_path, column_name)\nprint(average_age)",
        "output": "import csv\n\ndef average_column(csv_file_path, column_name):\n    total = 0\n    count = 0\n\n    with open(csv_file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n\n        for row in reader:\n            total += int(row[column_name])\n            count += 1\n\n    return total / count if count > 0 else 0\n\naverage_age = average_column(csv_file_path, column_name)\nprint(average_age)"
    },
    {
        "instruction": "How can I generate a random string of a given length in JavaScript?",
        "input": "length = 8",
        "response": "function generateRandomString(length) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n\n    return result;\n}\n\nconst randomString = generateRandomString(8);\nconsole.log(randomString);",
        "output": "function generateRandomString(length) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n\n    return result;\n}\n\nconst randomString = generateRandomString(8);\nconsole.log(randomString);"
    },
    {
        "instruction": "Create a Java method that computes the factorial of a non-negative integer using a recursive approach.",
        "input": "int n = 5;",
        "response": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        int result = factorial(n);\n        System.out.println(\"Factorial of \" + n + \" is: \" + result);\n    }\n}",
        "output": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        int result = factorial(n);\n        System.out.println(\"Factorial of \" + n + \" is: \" + result);\n    }\n}"
    },
    {
        "instruction": "Construct a Bash script that takes a directory path and lists all files and directories within it sorted by size.",
        "input": "directory_path = '/home/user/documents'",
        "response": "#!/bin/bash\n\ndir=\"$1\"\nif [ -z \"$dir\" ]; then\n    echo \"Usage: script.sh <directory_path>\"\n    exit 1\nfi\n\nif [ ! -d \"$dir\" ]; then\n    echo \"Error: Directory does not exist.\"\n    exit 1\nfi\n\nls -lSh \"$dir\"\n\n# Usage example: ./script.sh /home/user/documents",
        "output": "#!/bin/bash\n\ndir=\"$1\"\nif [ -z \"$dir\" ]; then\n    echo \"Usage: script.sh <directory_path>\"\n    exit 1\nfi\n\nif [ ! -d \"$dir\" ]; then\n    echo \"Error: Directory does not exist.\"\n    exit 1\nfi\n\nls -lSh \"$dir\"\n\n# Usage example: ./script.sh /home/user/documents"
    },
    {
        "instruction": "Write a C++ function that calculates the area of a rectangle using its length and width as input parameters.",
        "input": "4.5, 7.2",
        "response": "#include <iostream>\nusing namespace std;\n\nfloat rectangle_area(float length, float width) {\n    return length * width;}\n\nint main() {\n    float area = rectangle_area(4.5, 7.2);\n    cout << \"Area: \" << area << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nfloat rectangle_area(float length, float width) {\n    return length * width;}\n\nint main() {\n    float area = rectangle_area(4.5, 7.2);\n    cout << \"Area: \" << area << endl;\n    return 0;}"
    },
    {
        "instruction": "How can I create a Python script that reads a CSV file and prints each row as a list?",
        "input": "example.csv: Name,Age,Gender\nJohn Doe,34,M\nJane Smith,28,F",
        "response": "import csv\n\nfilename = 'example.csv'\n\nwith open(filename, 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    for row in csvreader:\n        print(row)",
        "output": "import csv\n\nfilename = 'example.csv'\n\nwith open(filename, 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    for row in csvreader:\n        print(row)"
    },
    {
        "instruction": "Implement a Java method that takes an integer and returns a string containing its binary representation.",
        "input": "42",
        "response": "public class BinaryRepresentation {\n    public static void main(String[] args) {\n        System.out.println(integerToBinary(42));\n    }\n\n    public static String integerToBinary(int num) {\n        return Integer.toBinaryString(num);\n    }}",
        "output": "public class BinaryRepresentation {\n    public static void main(String[] args) {\n        System.out.println(integerToBinary(42));\n    }\n\n    public static String integerToBinary(int num) {\n        return Integer.toBinaryString(num);\n    }}"
    },
    {
        "instruction": "Design a JavaScript function that calculates the factorial of a given number.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a C program that reads three integers as input and identifies the smallest value among them.",
        "input": "12, 6, 25",
        "response": "#include <stdio.h>\n\nint main() {\n    int a, b, c;\n    printf(\"Enter three numbers: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n\n    int min = (a < b && a < c) ? a : (b < c ? b : c);\n    printf(\"Minimum: %d\\n\", min);\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    int a, b, c;\n    printf(\"Enter three numbers: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n\n    int min = (a < b && a < c) ? a : (b < c ? b : c);\n    printf(\"Minimum: %d\\n\", min);\n\n    return 0;\n}"
    },
    {
        "instruction": "Design a Bash script that calculates the factorial of a given number.",
        "input": "5",
        "response": "#!/bin/bash\n\nfactorial() {\n    local num=$1\n    local result=1\n\n    for ((i=1; i<=num; i++)); do\n        result=$((result * i))\n    done\n\n    echo $result\n}\n\nnumber=5\nfactorial_result=$(factorial $number)\necho \"Factorial of $number is $factorial_result\"",
        "output": "#!/bin/bash\n\nfactorial() {\n    local num=$1\n    local result=1\n\n    for ((i=1; i<=num; i++)); do\n        result=$((result * i))\n    done\n\n    echo $result\n}\n\nnumber=5\nfactorial_result=$(factorial $number)\necho \"Factorial of $number is $factorial_result\""
    },
    {
        "instruction": "Can you write a SQL query to retrieve the names of employees aged above 30 from an 'employees' table?",
        "input": "TABLE: employees (id, name, age, department)",
        "response": "SELECT name\nFROM employees\nWHERE age > 30;",
        "output": "SELECT name\nFROM employees\nWHERE age > 30;"
    },
    {
        "instruction": "Construct a C# program to create a linked list, add elements to it, and display the elements.",
        "input": "4, 7, 12",
        "response": "using System;\nusing System.Collections.Generic;\n\npublic class LinkedListDemo {\n    public static void Main() {\n        LinkedList<int> numbers = new LinkedList<int>();\n\n        numbers.AddLast(4);\n        numbers.AddLast(7);\n        numbers.AddLast(12);\n\n        foreach (int number in numbers) {\n            Console.WriteLine(number);\n        }\n    }\n}",
        "output": "using System;\nusing System.Collections.Generic;\n\npublic class LinkedListDemo {\n    public static void Main() {\n        LinkedList<int> numbers = new LinkedList<int>();\n\n        numbers.AddLast(4);\n        numbers.AddLast(7);\n        numbers.AddLast(12);\n\n        foreach (int number in numbers) {\n            Console.WriteLine(number);\n        }\n    }\n}"
    },
    {
        "instruction": "Write a Python function that takes a list of integers and sorts them in ascending order without using the built-in sorting methods.",
        "input": "[4, 2, 9, 1]",
        "response": "def bubble_sort(numbers):\n    for i in range(len(numbers) - 1):\n        for j in range(len(numbers) - 1 - i):\n            if numbers[j] > numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    return numbers\n\nresult = bubble_sort([4, 2, 9, 1])\nprint(result)",
        "output": "def bubble_sort(numbers):\n    for i in range(len(numbers) - 1):\n        for j in range(len(numbers) - 1 - i):\n            if numbers[j] > numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    return numbers\n\nresult = bubble_sort([4, 2, 9, 1])\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function that takes a date string in the format 'YYYY-MM-DD' and returns the day of the week as a string.",
        "input": "'2021-04-10'",
        "response": "function getDayOfWeek(dateString) {\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const date = new Date(dateString);\n    const dayOfWeek = date.getDay();\n    return weekdays[dayOfWeek];}\n\nconst result = getDayOfWeek('2021-04-10');\nconsole.log(result);",
        "output": "function getDayOfWeek(dateString) {\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const date = new Date(dateString);\n    const dayOfWeek = date.getDay();\n    return weekdays[dayOfWeek];}\n\nconst result = getDayOfWeek('2021-04-10');\nconsole.log(result);"
    },
    {
        "instruction": "Develop a Java method that accepts an array of names and returns a list of names starting with the letter 'A'.",
        "input": "String[] names = {\"Andrew\", \"Alice\", \"Ben\", \"Carl\"}",
        "response": "import java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> namesStartingWithA(String[] names) {\n    List<String> namesWithA = new ArrayList<>();\n    for (String name : names) {\n        if (name.startsWith(\"A\")) {\n            namesWithA.add(name);\n        }\n    }\n    return namesWithA;}\n\nString[] names = {\"Andrew\", \"Alice\", \"Ben\", \"Carl\"};\nList<String> result = namesStartingWithA(names);\nSystem.out.println(result);",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> namesStartingWithA(String[] names) {\n    List<String> namesWithA = new ArrayList<>();\n    for (String name : names) {\n        if (name.startsWith(\"A\")) {\n            namesWithA.add(name);\n        }\n    }\n    return namesWithA;}\n\nString[] names = {\"Andrew\", \"Alice\", \"Ben\", \"Carl\"};\nList<String> result = namesStartingWithA(names);\nSystem.out.println(result);"
    },
    {
        "instruction": "Implement a C program that reads a text file and counts the number of lines in the file.",
        "input": "file.txt",
        "response": "#include <stdio.h>\n\nint main() {\n    FILE *file;\n    file = fopen(\"file.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Could not open file\\n\");\n    } else {\n        int count = 0;\n        char c;\n        \n        while ((c = fgetc(file)) != EOF) {\n            if (c == '\\n') {\n                count++;\n            }\n        }\n        fclose(file);\n        printf(\"Number of lines: %d\\n\", count);\n    }\n    return 0;}",
        "output": "#include <stdio.h>\n\nint main() {\n    FILE *file;\n    file = fopen(\"file.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Could not open file\\n\");\n    } else {\n        int count = 0;\n        char c;\n        \n        while ((c = fgetc(file)) != EOF) {\n            if (c == '\\n') {\n                count++;\n            }\n        }\n        fclose(file);\n        printf(\"Number of lines: %d\\n\", count);\n    }\n    return 0;}"
    },
    {
        "instruction": "Write a Python script that reads a text file and counts the frequency of words in the file.",
        "input": "sample_text.txt (content: 'This is a sample text file. It has multiple words like sample and words.')",
        "response": "import collections\n\ndef count_word_frequencies(filename):\n    with open(filename, 'r') as file:\n        text = file.read()\n        words = text.split()\n        word_frequencies = collections.Counter(words)\n        return word_frequencies\n\nfilename = 'sample_text.txt'\nresult = count_word_frequencies(filename)\nprint(result)",
        "output": "import collections\n\ndef count_word_frequencies(filename):\n    with open(filename, 'r') as file:\n        text = file.read()\n        words = text.split()\n        word_frequencies = collections.Counter(words)\n        return word_frequencies\n\nfilename = 'sample_text.txt'\nresult = count_word_frequencies(filename)\nprint(result)"
    },
    {
        "instruction": "How would you write a Javascript function that finds the length of the longest word in a given string?",
        "input": "\"Coding requires dedication and patience.\"",
        "response": "function findLongestWordLength(str) {\n    const words = str.split(' ');\n    let maxLength = 0;\n    for (const word of words) {\n        if (word.length > maxLength) {\n            maxLength = word.length;\n        }\n    }\n    return maxLength;}\n\nconst input = 'Coding requires dedication and patience.';\nconsole.log(findLongestWordLength(input));",
        "output": "function findLongestWordLength(str) {\n    const words = str.split(' ');\n    let maxLength = 0;\n    for (const word of words) {\n        if (word.length > maxLength) {\n            maxLength = word.length;\n        }\n    }\n    return maxLength;}\n\nconst input = 'Coding requires dedication and patience.';\nconsole.log(findLongestWordLength(input));"
    },
    {
        "instruction": "Write a Java class that has a method to calculate the factorial of an integer.",
        "input": "5",
        "response": "public class FactorialCalculator {\n\n    public static int calculateFactorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * calculateFactorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int input = 5;\n        int result = calculateFactorial(input);\n        System.out.println(result);\n    }}",
        "output": "public class FactorialCalculator {\n\n    public static int calculateFactorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * calculateFactorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int input = 5;\n        int result = calculateFactorial(input);\n        System.out.println(result);\n    }}"
    },
    {
        "instruction": "Design a C++ function that takes an array of integers and reverses its elements in-place.",
        "input": "int arr[] = {1, 2, 3, 4, 5};",
        "response": "#include <iostream>\n#include <algorithm>\n\nvoid reverseArray(int arr[], int size) {\n    for (int i = 0; i < size / 2; ++i) {\n        std::swap(arr[i], arr[size - 1 - i]);\n    }}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n\n    for (int i = 0; i < size; ++i) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <algorithm>\n\nvoid reverseArray(int arr[], int size) {\n    for (int i = 0; i < size / 2; ++i) {\n        std::swap(arr[i], arr[size - 1 - i]);\n    }}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n\n    for (int i = 0; i < size; ++i) {\n        std::cout << arr[i] << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Implement a Python program that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnumber = 5\nresult = factorial(number)\nprint('Factorial of', number, 'is', result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnumber = 5\nresult = factorial(number)\nprint('Factorial of', number, 'is', result)"
    },
    {
        "instruction": "Create an SQL query that lists all customers who have not placed any orders.",
        "input": "tables: customers(id, name), orders(id, customer_id)",
        "response": "SELECT * FROM customers\n    LEFT JOIN orders ON customers.id = orders.customer_id\n    WHERE orders.Id IS NULL;",
        "output": "SELECT * FROM customers\n    LEFT JOIN orders ON customers.id = orders.customer_id\n    WHERE orders.Id IS NULL;"
    },
    {
        "instruction": "Write a JavaScript function that will receive an array of numbers and perform bubble sort.",
        "input": "[5, 3, 8, 4, 2]",
        "response": "function bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                let tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    return arr;}\n\nconst sortedArray = bubbleSort([5, 3, 8, 4, 2]);\nconsole.log(sortedArray);",
        "output": "function bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                let tmp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n        }\n    }\n    return arr;}\n\nconst sortedArray = bubbleSort([5, 3, 8, 4, 2]);\nconsole.log(sortedArray);"
    },
    {
        "instruction": "Construct a C++ program that reads user input for five integers and stores them in an array, then outputs the average of the array values.",
        "input": "3, 22, 17, 8, 5",
        "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers(5);\n    double sum = 0;\n\n    for (int i = 0; i < 5; i++) {\n        cout << \"Enter number \" << i + 1 << \": \" ;\n        cin >> numbers[i];\n        sum += numbers[i];\n    }\n\n    double avg = sum / 5;\n    cout << \"Average of the numbers: \" << avg << endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers(5);\n    double sum = 0;\n\n    for (int i = 0; i < 5; i++) {\n        cout << \"Enter number \" << i + 1 << \": \" ;\n        cin >> numbers[i];\n        sum += numbers[i];\n    }\n\n    double avg = sum / 5;\n    cout << \"Average of the numbers: \" << avg << endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a Python function that takes a list of integers as input and returns a new list with only the even numbers.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = filter_even_numbers(input_list)\nprint(result)",
        "output": "def filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = filter_even_numbers(input_list)\nprint(result)"
    },
    {
        "instruction": "In JavaScript, create a function that sorts an array of objects based on a specified property in ascending order.",
        "input": "[{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 26}, {\"name\": \"Bob\", \"age\": 27}]",
        "response": "function sortObjects(arr, property) {\n    return arr.sort((a, b) => a[property] - b[property]);}\n\nconst data = [\n    {\"name\": \"John\", \"age\": 30},\n    {\"name\": \"Alice\", \"age\": 26},\n    {\"name\": \"Bob\", \"age\": 27}\n];\nconst sortedData = sortObjects(data, \"age\");\nconsole.log(sortedData);",
        "output": "function sortObjects(arr, property) {\n    return arr.sort((a, b) => a[property] - b[property]);}\n\nconst data = [\n    {\"name\": \"John\", \"age\": 30},\n    {\"name\": \"Alice\", \"age\": 26},\n    {\"name\": \"Bob\", \"age\": 27}\n];\nconst sortedData = sortObjects(data, \"age\");\nconsole.log(sortedData);"
    },
    {
        "instruction": "Given a C++ function signature, create an implementation for it that calculates the factorial of a non-negative integer.",
        "input": "unsigned long long factorial(unsigned int n);",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    unsigned int num = 7;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    unsigned int num = 7;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you display the contents of a file using Node.js?",
        "input": "example.txt",
        "response": "const fs = require('fs');\nconst filePath = 'example.txt';\n\nfs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n        console.error('Error reading the file:', err);\n    } else {\n        console.log(data);\n    }});",
        "output": "const fs = require('fs');\nconst filePath = 'example.txt';\n\nfs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n        console.error('Error reading the file:', err);\n    } else {\n        console.log(data);\n    }});"
    },
    {
        "instruction": "Implement a function in C++ to compute the factorial of a given number using recursion.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 5;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Can you create a PHP function that takes a string input and counts the frequency of each character in the string?",
        "input": "\"A sample string\"",
        "response": "<?php\n\nfunction count_chars_frequency($str) {\n    $frequency = array();\n    \n    for ($i = 0; $i < strlen($str); $i++) {\n        $char = strtolower($str[$i]);\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 1;\n        } else {\n            $frequency[$char]++;\n        }\n    }\n\n    return $frequency;}\n\n$input = 'A sample string';\n$frequencies = count_chars_frequency($input);\nprint_r($frequencies);\n\n?>",
        "output": "<?php\n\nfunction count_chars_frequency($str) {\n    $frequency = array();\n    \n    for ($i = 0; $i < strlen($str); $i++) {\n        $char = strtolower($str[$i]);\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 1;\n        } else {\n            $frequency[$char]++;\n        }\n    }\n\n    return $frequency;}\n\n$input = 'A sample string';\n$frequencies = count_chars_frequency($input);\nprint_r($frequencies);\n\n?>"
    },
    {
        "instruction": "Design a C# method converting a hexadecimal string into its corresponding decimal value.",
        "input": "\"1A3C\"",
        "response": "using System;\n\nclass HexToDecimalConverter {\n    public static int ConvertHexToDecimal(string hex) {\n        int decimalValue = Convert.ToInt32(hex, 16);\n        return decimalValue;\n    }\n    \n    static void Main() {\n        string hexInput = \"1A3C\";\n        int result = ConvertHexToDecimal(hexInput);\n        Console.WriteLine(\"Hexadecimal: {0}, Decimal: {1}\", hexInput, result);\n    }}",
        "output": "using System;\n\nclass HexToDecimalConverter {\n    public static int ConvertHexToDecimal(string hex) {\n        int decimalValue = Convert.ToInt32(hex, 16);\n        return decimalValue;\n    }\n    \n    static void Main() {\n        string hexInput = \"1A3C\";\n        int result = ConvertHexToDecimal(hexInput);\n        Console.WriteLine(\"Hexadecimal: {0}, Decimal: {1}\", hexInput, result);\n    }}"
    },
    {
        "instruction": "In JavaScript, write a function to reverse the words in a given sentence while maintaining the word order.",
        "input": "\"This is a test sentence\"",
        "response": "function reverseWords(sentence) {\n    return sentence.split(' ').map(word => word.split('').reverse().join('')).join(' ');}\n\nconst input = \"This is a test sentence\";\nconst result = reverseWords(input);\nconsole.log(result);",
        "output": "function reverseWords(sentence) {\n    return sentence.split(' ').map(word => word.split('').reverse().join('')).join(' ');}\n\nconst input = \"This is a test sentence\";\nconst result = reverseWords(input);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a C function that calculates the factorial of an integer using recursion.",
        "input": "5",
        "response": "#include <stdio.h>\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    printf(\"Factorial of %d is %d\\n\", num, result);\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "#include <stdio.h>\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    int result = factorial(num);\n    printf(\"Factorial of %d is %d\\n\", num, result);\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Can you come up with a Python script that reads a text file, reverses the order of lines and writes the result to a new text file?",
        "input": "file.txt (Content: Line1\\nLine2\\nLine3), output.txt",
        "response": "input_file = 'file.txt'\noutput_file = 'output.txt'\n\nwith open(input_file, 'r') as f:\n    lines = f.readlines()\n\nreversed_lines = lines[::-1]\n\nwith open(output_file, 'w') as f:\n    f.writelines(reversed_lines)",
        "output": "input_file = 'file.txt'\noutput_file = 'output.txt'\n\nwith open(input_file, 'r') as f:\n    lines = f.readlines()\n\nreversed_lines = lines[::-1]\n\nwith open(output_file, 'w') as f:\n    f.writelines(reversed_lines)"
    },
    {
        "instruction": "Design a JavaScript function that accepts a string and returns a dictionary of character frequencies.",
        "input": "\"helloworld\"",
        "response": "function charFrequencies(str) {\n    const freqs = {};\n    for (const char of str) {\n        if (freqs[char]) {\n            freqs[char]++;\n        } else {\n            freqs[char] = 1;\n        }\n    }\n    return freqs;\n}\n\nconst result = charFrequencies('helloworld');\nconsole.log(result);",
        "output": "function charFrequencies(str) {\n    const freqs = {};\n    for (const char of str) {\n        if (freqs[char]) {\n            freqs[char]++;\n        } else {\n            freqs[char] = 1;\n        }\n    }\n    return freqs;\n}\n\nconst result = charFrequencies('helloworld');\nconsole.log(result);"
    },
    {
        "instruction": "Write a Shell script that removes all files with '.bak' extension in the current directory.",
        "input": "Directory contains: file1.bak, file2.bak, file3.txt",
        "response": "#!/bin/bash\n\nfor f in *.bak; do\n    rm -f \"$f\"\ndone",
        "output": "#!/bin/bash\n\nfor f in *.bak; do\n    rm -f \"$f\"\ndone"
    },
    {
        "instruction": "How would you implement a Python function to find the longest common prefix of a list of strings?",
        "input": "[\"flower\", \"flow\", \"flight\"]",
        "response": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    shortest_str = min(strs, key=len)\n    for i, char in enumerate(shortest_str):\n        for string in strs:\n            if string[i] != char:\n                return shortest_str[:i]\n    return shortest_str\n\nresult = longest_common_prefix([\"flower\", \"flow\", \"flight\"])\nprint(result)",
        "output": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    shortest_str = min(strs, key=len)\n    for i, char in enumerate(shortest_str):\n        for string in strs:\n            if string[i] != char:\n                return shortest_str[:i]\n    return shortest_str\n\nresult = longest_common_prefix([\"flower\", \"flow\", \"flight\"])\nprint(result)"
    },
    {
        "instruction": "Develop a JavaScript function capable of splitting a string into an array of words without using the 'split' method.",
        "input": "\"The quick brown fox jumps over the lazy dog\"",
        "response": "function splitStringIntoWords(str) {\n    let words = [];\n    let currentWord = \"\";\n    for (const char of str) {\n        if (char === ' ') {\n            if (currentWord.length) {\n                words.push(currentWord);\n                currentWord = \"\";\n            }\n        } else {\n            currentWord += char;\n        }\n    }\n    if (currentWord.length) {\n        words.push(currentWord);\n    }\n    return words;\n}\n\nconst result = splitStringIntoWords(\"The quick brown fox jumps over the lazy dog\");\nconsole.log(result);",
        "output": "function splitStringIntoWords(str) {\n    let words = [];\n    let currentWord = \"\";\n    for (const char of str) {\n        if (char === ' ') {\n            if (currentWord.length) {\n                words.push(currentWord);\n                currentWord = \"\";\n            }\n        } else {\n            currentWord += char;\n        }\n    }\n    if (currentWord.length) {\n        words.push(currentWord);\n    }\n    return words;\n}\n\nconst result = splitStringIntoWords(\"The quick brown fox jumps over the lazy dog\");\nconsole.log(result);"
    },
    {
        "instruction": "Construct a Shell script that checks if a file exists and outputs a message accordingly.",
        "input": "example_file.txt",
        "response": "#!/bin/sh\n\nfile_name=\"example_file.txt\"\n\nif [ -e \"$file_name\" ]; then\n    echo \"File '$file_name' exists.\"\nelse\n    echo \"File '$file_name' does not exist.\"\nfi",
        "output": "#!/bin/sh\n\nfile_name=\"example_file.txt\"\n\nif [ -e \"$file_name\" ]; then\n    echo \"File '$file_name' exists.\"\nelse\n    echo \"File '$file_name' does not exist.\"\nfi"
    },
    {
        "instruction": "Implement a C++ program to generate the Fibonacci series up to a provided limit.",
        "input": "10",
        "response": "#include <iostream>\nusing namespace std;\n\nvoid fibonacci(int limit) {\n    int a = 0, b = 1, c = 1;\n    for (int i = 0; i < limit; ++i) {\n        cout << a << ' ';\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    cout << endl;}\n\nint main() {\n    int limit = 10;\n    fibonacci(limit);\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nvoid fibonacci(int limit) {\n    int a = 0, b = 1, c = 1;\n    for (int i = 0; i < limit; ++i) {\n        cout << a << ' ';\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    cout << endl;}\n\nint main() {\n    int limit = 10;\n    fibonacci(limit);\n    return 0;}"
    },
    {
        "instruction": "Write a PHP script to calculate the factorial of a given positive integer.",
        "input": "5",
        "response": "<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$number = 5;\n$result = factorial($number);\necho 'Factorial of ' . $number . ' is ' . $result . '.' . PHP_EOL;\n?>",
        "output": "<?php\nfunction factorial($n) {\n    if ($n == 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$number = 5;\n$result = factorial($number);\necho 'Factorial of ' . $number . ' is ' . $result . '.' . PHP_EOL;\n?>"
    },
    {
        "instruction": "How would you write a Shell script that searches for files within a specified directory containing a certain keyword?",
        "input": "directory: /home/user/documents, keyword: report",
        "response": "#!/bin/bash\n\nDIRECTORY='/home/user/documents'\nKEYWORD='report'\n\nfind \"$DIRECTORY\" -type f -iname \"*$KEYWORD*\"",
        "output": "#!/bin/bash\n\nDIRECTORY='/home/user/documents'\nKEYWORD='report'\n\nfind \"$DIRECTORY\" -type f -iname \"*$KEYWORD*\""
    },
    {
        "instruction": "Create a Node.js program that reads a JSON file, and prints its content to the console.",
        "input": "file: data.json, content: {\"name\": \"John Doe\", \"age\": 30}",
        "response": "const fs = require('fs');\n\nfs.readFile('data.json', 'utf8', (err, data) => {\n    if (err) {\n        console.error('Error reading JSON file:', err);\n        return;\n    }\n  \n    const content = JSON.parse(data);\n    console.log(content);});",
        "output": "const fs = require('fs');\n\nfs.readFile('data.json', 'utf8', (err, data) => {\n    if (err) {\n        console.error('Error reading JSON file:', err);\n        return;\n    }\n  \n    const content = JSON.parse(data);\n    console.log(content);});"
    },
    {
        "instruction": "Implement a C# function that tests whether a given integer is even, and returns true if it is.",
        "input": "42",
        "response": "using System;\n\nclass Program {\n    static bool IsEven(int number) {\n        return number % 2 == 0;\n    }\n\n    static void Main(string[] args) {\n        int input = 42;\n        bool result = IsEven(input);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\n\nclass Program {\n    static bool IsEven(int number) {\n        return number % 2 == 0;\n    }\n\n    static void Main(string[] args) {\n        int input = 42;\n        bool result = IsEven(input);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "Can you demonstrate how to sort a list of integers in descending order using Python?",
        "input": "[1, 4, 2, 7, 3]",
        "response": "def sort_descending(numbers):\n    return sorted(numbers, reverse=True)\n\ninput_list = [1, 4, 2, 7, 3]\nsorted_list = sort_descending(input_list)\nprint(sorted_list)",
        "output": "def sort_descending(numbers):\n    return sorted(numbers, reverse=True)\n\ninput_list = [1, 4, 2, 7, 3]\nsorted_list = sort_descending(input_list)\nprint(sorted_list)"
    },
    {
        "instruction": "Develop a Java method to compute the factorial of a positive integer using recursion.",
        "input": "5",
        "response": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int input = 5;\n        int result = factorial(input);\n        System.out.println(result);\n    }}",
        "output": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int input = 5;\n        int result = factorial(input);\n        System.out.println(result);\n    }}"
    },
    {
        "instruction": "Fix the syntax and semantic issues in this JavaScript code snippet, causing it to not run properly.",
        "input": "functiom calculateSum(a, b) {\n    const sum = a + b;\n    consol.log(sum);\n}\n\ncalculateSum(5, 3)",
        "response": "function calculateSum(a, b) {\n    const sum = a + b;\n    console.log(sum);}\n\ncalculateSum(5, 3);",
        "output": "function calculateSum(a, b) {\n    const sum = a + b;\n    console.log(sum);}\n\ncalculateSum(5, 3);"
    },
    {
        "instruction": "How would you write a Bash script that reads a list of filenames and prints their sizes in KB?",
        "input": "file1.txt, file2.jpg, file3.pdf",
        "response": "#!/bin/bash\n\nfor file in file1.txt file2.jpg file3.pdf; do\n    echo \"$file: $(du -k \"$file\" | cut -f1) KB\"\ndone",
        "output": "#!/bin/bash\n\nfor file in file1.txt file2.jpg file3.pdf; do\n    echo \"$file: $(du -k \"$file\" | cut -f1) KB\"\ndone"
    },
    {
        "instruction": "Write a Python script that extracts all unique email addresses from a given text file.",
        "input": "example.txt",
        "response": "import re\n\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    email_pattern = r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}'\n    unique_emails = set(re.findall(email_pattern, content))\n\nfor email in unique_emails:\n    print(email)",
        "output": "import re\n\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    email_pattern = r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}'\n    unique_emails = set(re.findall(email_pattern, content))\n\nfor email in unique_emails:\n    print(email)"
    },
    {
        "instruction": "Create an API endpoint using Node.js and Express that returns a JSON object with greetings in different languages.",
        "input": "localhost:3000/greetings",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/greetings', (req, res) => {\n    const greetings = {\n        english: 'Hello',\n        spanish: 'Hola',\n        french: 'Bonjour',\n        german: 'Hallo'\n    };\n\n    res.json(greetings);\n});\n\napp.listen(port, () => console.log(`Server running on port: ${port}`));",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/greetings', (req, res) => {\n    const greetings = {\n        english: 'Hello',\n        spanish: 'Hola',\n        french: 'Bonjour',\n        german: 'Hallo'\n    };\n\n    res.json(greetings);\n});\n\napp.listen(port, () => console.log(`Server running on port: ${port}`));"
    },
    {
        "instruction": "Implement a simple C program that utilizes a for loop to print numbers from 1 to 10 with a custom message.",
        "input": "Message: 'Iteration number: '",
        "response": "#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        printf(\"Iteration number: %d\\n\", i);\n    }\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        printf(\"Iteration number: %d\\n\", i);\n    }\n    return 0;\n}"
    },
    {
        "instruction": "How would you reverse a string in a Python one-liner using slicing?",
        "input": "'OpenAI'",
        "response": "input_string = 'OpenAI'\nreversed_string = input_string[::-1]\nprint(reversed_string)",
        "output": "input_string = 'OpenAI'\nreversed_string = input_string[::-1]\nprint(reversed_string)"
    },
    {
        "instruction": "Write a shell script that reads lines from a text file and prints them in reverse order.",
        "input": "File content: 'first\\nsecond\\nthird'",
        "response": "#!/bin/sh\n\nfile='file.txt'\ncontent=$(cat $file)\nIFS=$'\\n' lines=($content)\nfor((i=${#lines[@]}-1;i>=0;i--)); do\n  echo ${lines[i]}\ndone",
        "output": "#!/bin/sh\n\nfile='file.txt'\ncontent=$(cat $file)\nIFS=$'\\n' lines=($content)\nfor((i=${#lines[@]}-1;i>=0;i--)); do\n  echo ${lines[i]}\ndone"
    },
    {
        "instruction": "Develop a Java method that finds the first non-repeated character in a given string.",
        "input": "'openaiengineering'",
        "response": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class FirstNonRepeatedCharacter {\n\n    public static char firstNonRepeated(String input) {\n        Map<Character, Integer> countMap = new LinkedHashMap<>();\n        for (char c : input.toCharArray()) {\n            countMap.put(c, countMap.getOrDefault(c, 0) + 1);\n        }\n        for (Map.Entry<Character, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == 1) {\n                return entry.getKey();\n            }\n        }\n        return '-';\n    }\n\n    public static void main(String[] args) {\n        System.out.println(firstNonRepeated(\"openaiengineering\"));\n    }\n}",
        "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class FirstNonRepeatedCharacter {\n\n    public static char firstNonRepeated(String input) {\n        Map<Character, Integer> countMap = new LinkedHashMap<>();\n        for (char c : input.toCharArray()) {\n            countMap.put(c, countMap.getOrDefault(c, 0) + 1);\n        }\n        for (Map.Entry<Character, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == 1) {\n                return entry.getKey();\n            }\n        }\n        return '-';\n    }\n\n    public static void main(String[] args) {\n        System.out.println(firstNonRepeated(\"openaiengineering\"));\n    }\n}"
    },
    {
        "instruction": "Implement a simple server in Node.js that serves a 'Hello, World!' response on port 3000.",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, World!');});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, World!');});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});"
    },
    {
        "instruction": "How would you write a C program that calculates the Fibonacci sequence up to 10th term?",
        "input": "10",
        "response": "#include <stdio.h>\n\nint main() {\n    int n = 10, a = 0, b = 1, next, i;\n\n    for (i = 1; i <= n; i++) {\n        printf('%d, ', a);\n        next = a + b;\n        a = b;\n        b = next;\n    }\n\n    return 0;}",
        "output": "#include <stdio.h>\n\nint main() {\n    int n = 10, a = 0, b = 1, next, i;\n\n    for (i = 1; i <= n; i++) {\n        printf('%d, ', a);\n        next = a + b;\n        a = b;\n        b = next;\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Write a PHP script that connects to a MySQL database and retrieves a list of users, then prints the result as an HTML table.",
        "input": "Server: localhost, Username: myUser, Password: myPassword, Database: myDatabase, Table: users",
        "response": "<?php\n$servername = 'localhost';\n$username = 'myUser';\n$password = 'myPassword';\n$dbname = 'myDatabase';\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);}\n\n$sql = 'SELECT id, name, email FROM users';\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    echo '<table><tr><th>ID</th><th>Name</th><th>Email</th></tr>';\n    while($row = $result->fetch_assoc()) {\n        echo '<tr><td>' . $row['id']. '</td><td>' . $row['name']. '</td><td>' . $row['email']. '</td></tr>';\n    }\n    echo '</table>';} else {\n    echo '0 results';}\n$conn->close();\n?>",
        "output": "<?php\n$servername = 'localhost';\n$username = 'myUser';\n$password = 'myPassword';\n$dbname = 'myDatabase';\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die('Connection failed: ' . $conn->connect_error);}\n\n$sql = 'SELECT id, name, email FROM users';\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    echo '<table><tr><th>ID</th><th>Name</th><th>Email</th></tr>';\n    while($row = $result->fetch_assoc()) {\n        echo '<tr><td>' . $row['id']. '</td><td>' . $row['name']. '</td><td>' . $row['email']. '</td></tr>';\n    }\n    echo '</table>';} else {\n    echo '0 results';}\n$conn->close();\n?>"
    },
    {
        "instruction": "Create a Bash script that accepts a file path as an argument, checks if the file exists and if it's readable, then counts the number of lines in the file.",
        "input": "/path/to/file.txt",
        "response": "#!/bin/bash\n\nFILE=$1\n\nif [ -e \"$FILE\" ] && [ -r \"$FILE\" ]; then\n    LINES=$(wc -l < \"$FILE\")\n    echo The file has $LINES lines.\nelse\n    echo The file does not exist or is not readable.\nfi",
        "output": "#!/bin/bash\n\nFILE=$1\n\nif [ -e \"$FILE\" ] && [ -r \"$FILE\" ]; then\n    LINES=$(wc -l < \"$FILE\")\n    echo The file has $LINES lines.\nelse\n    echo The file does not exist or is not readable.\nfi"
    },
    {
        "instruction": "Write a C++ program to calculate the factorial of a positive integer using a recursive function.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int number = 5;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int number = 5;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}"
    },
    {
        "instruction": "How would you implement a simple counter in CSS and JavaScript that increments each time a button is clicked?",
        "input": "<button id=\"myButton\">Click me!</button>",
        "response": "JavaScript:\ndocument.getElementById('myButton').addEventListener('click', incrementCounter);\nlet counter = 0;\n\nfunction incrementCounter() {\n    counter++;\n    document.getElementById('myButton').innerHTML = `Clicks: ${counter}`;}\n\nCSS:\n#myButton {\n    font-size: 1rem;\n    padding: 10px;\n    cursor: pointer;}",
        "output": "JavaScript:\ndocument.getElementById('myButton').addEventListener('click', incrementCounter);\nlet counter = 0;\n\nfunction incrementCounter() {\n    counter++;\n    document.getElementById('myButton').innerHTML = `Clicks: ${counter}`;}\n\nCSS:\n#myButton {\n    font-size: 1rem;\n    padding: 10px;\n    cursor: pointer;}"
    },
    {
        "instruction": "Develop a Python function to find the longest word contained in a given string. The function should return the longest word and its length.",
        "input": "\"This is an example sentence to find the longest word.\"",
        "response": "def find_longest_word(sentence):\n    words = sentence.split()\n    longest_word = max(words, key=len)\n    return longest_word, len(longest_word)\n\ninput_sentence = \"This is an example sentence to find the longest word.\"\nlongest_word, word_length = find_longest_word(input_sentence)\nprint(f'Longest word: {longest_word} ({word_length} characters)')",
        "output": "def find_longest_word(sentence):\n    words = sentence.split()\n    longest_word = max(words, key=len)\n    return longest_word, len(longest_word)\n\ninput_sentence = \"This is an example sentence to find the longest word.\"\nlongest_word, word_length = find_longest_word(input_sentence)\nprint(f'Longest word: {longest_word} ({word_length} characters)')"
    },
    {
        "instruction": "In Java, create a method that takes a list of strings and returns a new list containing only unique strings.",
        "input": "[\"apple\", \"berry\", \"apple\", \"cherry\"]",
        "response": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class UniqueStrings {\n    public static void main(String[] args) {\n        List<String> input = List.of(\"apple\", \"berry\", \"apple\", \"cherry\");\n        List<String> uniqueItems = uniqueStrings(input);\n        System.out.println(uniqueItems);\n    }\n\n    public static List<String> uniqueStrings(List<String> input) {\n        return new ArrayList<>(new HashSet<>(input));\n    }}",
        "output": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class UniqueStrings {\n    public static void main(String[] args) {\n        List<String> input = List.of(\"apple\", \"berry\", \"apple\", \"cherry\");\n        List<String> uniqueItems = uniqueStrings(input);\n        System.out.println(uniqueItems);\n    }\n\n    public static List<String> uniqueStrings(List<String> input) {\n        return new ArrayList<>(new HashSet<>(input));\n    }}"
    },
    {
        "instruction": "Develop a C# method that receives a string as a parameter and reverses its characters.",
        "input": "\"hello world\"",
        "response": "public static string ReverseString(string input)\n{\n    char[] charArray = input.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);}\n\nstring input = \"hello world\";\nstring reversedString = ReverseString(input);\nConsole.WriteLine(reversedString);",
        "output": "public static string ReverseString(string input)\n{\n    char[] charArray = input.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);}\n\nstring input = \"hello world\";\nstring reversedString = ReverseString(input);\nConsole.WriteLine(reversedString);"
    },
    {
        "instruction": "Write a Python program that reads the content of a text file and counts the frequency of each word. Display the results as a dictionary.",
        "input": "filename: 'test_file.txt', content: 'hello world\\nthis is a test\\nhello again'",
        "response": "def count_words(filename):\n    with open(filename, 'r') as file:\n        content = file.read()\n    words = content.split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return word_count\n\nfilename = 'test_file.txt'\nresult = count_words(filename)\nprint(result)",
        "output": "def count_words(filename):\n    with open(filename, 'r') as file:\n        content = file.read()\n    words = content.split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return word_count\n\nfilename = 'test_file.txt'\nresult = count_words(filename)\nprint(result)"
    },
    {
        "instruction": "Create a Java program that receives an integer array and returns its mode (the number that appears most often).",
        "input": "Array: {1, 2, 2, 3, 4, 4, 4}",
        "response": "public class ModeCalculator\n{\n    public static int findMode(int[] arr)\n    {\n        Map<Integer,Integer> counts = new HashMap<>();\n        for (int num : arr) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        \n        int mode = arr[0];\n        int maxCount = 0;\n        \n        for (Map.Entry<Integer,Integer> entry : counts.entrySet())\n        {\n            if (entry.getValue() > maxCount)\n            {\n                mode = entry.getKey();\n                maxCount = entry.getValue();\n            }\n        }\n        \n        return mode;\n    }\n\n    public static void main(String[] args)\n    {\n        int[] arr = {1, 2, 2, 3, 4, 4, 4};\n        int mode = findMode(arr);\n        System.out.println(\"Mode: \" + mode);\n    }}",
        "output": "public class ModeCalculator\n{\n    public static int findMode(int[] arr)\n    {\n        Map<Integer,Integer> counts = new HashMap<>();\n        for (int num : arr) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        \n        int mode = arr[0];\n        int maxCount = 0;\n        \n        for (Map.Entry<Integer,Integer> entry : counts.entrySet())\n        {\n            if (entry.getValue() > maxCount)\n            {\n                mode = entry.getKey();\n                maxCount = entry.getValue();\n            }\n        }\n        \n        return mode;\n    }\n\n    public static void main(String[] args)\n    {\n        int[] arr = {1, 2, 2, 3, 4, 4, 4};\n        int mode = findMode(arr);\n        System.out.println(\"Mode: \" + mode);\n    }}"
    },
    {
        "instruction": "Construct a JavaScript function that takes two arrays of integers as input, and returns true if the arrays have the same elements, otherwise false.",
        "input": "array1: [1, 2, 3, 4], array2: [4, 3, 2, 1]",
        "response": "function arraysEqual(arr1, arr2) {\n    const sortedArr1 = arr1.sort((a, b) => a - b);\n    const sortedArr2 = arr2.sort((a, b) => a - b);\n    return JSON.stringify(sortedArr1) === JSON.stringify(sortedArr2);}\n\nconst array1 = [1, 2, 3, 4];\nconst array2 = [4, 3, 2, 1];\nconst result = arraysEqual(array1, array2);\nconsole.log(result);",
        "output": "function arraysEqual(arr1, arr2) {\n    const sortedArr1 = arr1.sort((a, b) => a - b);\n    const sortedArr2 = arr2.sort((a, b) => a - b);\n    return JSON.stringify(sortedArr1) === JSON.stringify(sortedArr2);}\n\nconst array1 = [1, 2, 3, 4];\nconst array2 = [4, 3, 2, 1];\nconst result = arraysEqual(array1, array2);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Python program to compute factorial of a non-negative integer using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Implement a C function that reads a file line by line and counts the number of lines.",
        "input": "filename: \"sample.txt\"",
        "response": "#include <stdio.h>\n\nint count_lines(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    int count = 0;\n    char c;\n\n    if (file == NULL) {\n        printf(\"Error: Cannot open file.\");\n        return -1;\n    }\n\n    while ((c = fgetc(file)) != EOF) {\n        if (c == '\\n') {\n            count++;\n        }\n    }\n    fclose(file);\n    return count;}\n\nint main() {\n    int lines = count_lines(\"sample.txt\");\n    printf(\"Number of lines: %d\", lines);}",
        "output": "#include <stdio.h>\n\nint count_lines(char *filename) {\n    FILE *file = fopen(filename, \"r\");\n    int count = 0;\n    char c;\n\n    if (file == NULL) {\n        printf(\"Error: Cannot open file.\");\n        return -1;\n    }\n\n    while ((c = fgetc(file)) != EOF) {\n        if (c == '\\n') {\n            count++;\n        }\n    }\n    fclose(file);\n    return count;}\n\nint main() {\n    int lines = count_lines(\"sample.txt\");\n    printf(\"Number of lines: %d\", lines);}"
    },
    {
        "instruction": "Create a Java class that represents a rectangle with a length and a width, and provide methods to calculate the area and perimeter.",
        "input": "length: 10, width: 5",
        "response": "public class Rectangle {\n    private double length;\n    private double width;\n\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    public double getArea() {\n        return length * width;\n    }\n\n    public double getPerimeter() {\n        return 2 * (length + width);\n    }\n\n    public static void main(String[] args) {\n        Rectangle rectangle = new Rectangle(10, 5);\n        System.out.println(\"Area: \" + rectangle.getArea());\n        System.out.println(\"Perimeter: \" + rectangle.getPerimeter());\n    }}",
        "output": "public class Rectangle {\n    private double length;\n    private double width;\n\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    public double getArea() {\n        return length * width;\n    }\n\n    public double getPerimeter() {\n        return 2 * (length + width);\n    }\n\n    public static void main(String[] args) {\n        Rectangle rectangle = new Rectangle(10, 5);\n        System.out.println(\"Area: \" + rectangle.getArea());\n        System.out.println(\"Perimeter: \" + rectangle.getPerimeter());\n    }}"
    },
    {
        "instruction": "Write a JavaScript function that takes a string as input and returns a new string with all vowels removed.",
        "input": "\"This is a test string\"",
        "response": "function removeVowels(str) {\n    return str.replace(/[aeiou]/gi, '');}\n\nconst result = removeVowels(\"This is a test string\");\nconsole.log(result);",
        "output": "function removeVowels(str) {\n    return str.replace(/[aeiou]/gi, '');}\n\nconst result = removeVowels(\"This is a test string\");\nconsole.log(result);"
    },
    {
        "instruction": "Develop a C++ program that reads from a text file and outputs the number of lines.",
        "input": "Filename: 'sample.txt'\nContent:\n'Line 1\nLine 2\nLine 3\nLine 4\nLine 5\n'",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string fileName = \"sample.txt\";\n    std::ifstream inFile(fileName);\n    int lineCount = 0;\n    std::string line;\n\n    while (std::getline(inFile, line)) {\n        lineCount++;\n    }\n\n    inFile.close();\n    std::cout << \"Number of lines: \" << lineCount << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string fileName = \"sample.txt\";\n    std::ifstream inFile(fileName);\n    int lineCount = 0;\n    std::string line;\n\n    while (std::getline(inFile, line)) {\n        lineCount++;\n    }\n\n    inFile.close();\n    std::cout << \"Number of lines: \" << lineCount << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you write a shell script to count the number of files in a directory?",
        "input": "Directory: '/home/user/Documents'",
        "response": "#!/bin/bash\n\nDIR=\"/home/user/Documents\"\n\nfile_count=$(ls -1 \"$DIR\" | wc -l)\n\necho \"Number of files in $DIR: $file_count\"",
        "output": "#!/bin/bash\n\nDIR=\"/home/user/Documents\"\n\nfile_count=$(ls -1 \"$DIR\" | wc -l)\n\necho \"Number of files in $DIR: $file_count\""
    },
    {
        "instruction": "Create a Python method to calculate the factorial of a given number.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Write a Golang function that takes a sentence and returns the number of words.",
        "input": "\"Go is an open-source programming language.\"",
        "response": "package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc countWords(sentence string) int {\n    words := strings.Fields(sentence)\n    return len(words)\n}\n\nfunc main() {\n    sentence := \"Go is an open-source programming language.\"\n    result := countWords(sentence)\n    fmt.Println(result)\n}",
        "output": "package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc countWords(sentence string) int {\n    words := strings.Fields(sentence)\n    return len(words)\n}\n\nfunc main() {\n    sentence := \"Go is an open-source programming language.\"\n    result := countWords(sentence)\n    fmt.Println(result)\n}"
    },
    {
        "instruction": "Design a C++ function that takes a string input and removes all digits from the string.",
        "input": "T3ch90gy20",
        "response": "#include <iostream>\n#include <string>\n\nstd::string remove_digits(const std::string &input) {\n    std::string output;\n    for (const char &c : input) {\n        if (!std::isdigit(c)) {\n            output += c;\n        }\n    }\n    return output;}\n\nint main() {\n    std::string text = \"T3ch90gy20\";\n    std::string result = remove_digits(text);\n    std::cout << result << std::endl;}",
        "output": "#include <iostream>\n#include <string>\n\nstd::string remove_digits(const std::string &input) {\n    std::string output;\n    for (const char &c : input) {\n        if (!std::isdigit(c)) {\n            output += c;\n        }\n    }\n    return output;}\n\nint main() {\n    std::string text = \"T3ch90gy20\";\n    std::string result = remove_digits(text);\n    std::cout << result << std::endl;}"
    },
    {
        "instruction": "Write a Python program to find the factorial of a given integer.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 5\nresult = factorial(number)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 5\nresult = factorial(number)\nprint(result)"
    },
    {
        "instruction": "Write a SQL query to list all employees' names that work in a specific department, given a department id.",
        "input": "3",
        "response": "SELECT e.name\nFROM employees e\nJOIN departments d ON e.department_id = d.id\nWHERE d.id = 3;",
        "output": "SELECT e.name\nFROM employees e\nJOIN departments d ON e.department_id = d.id\nWHERE d.id = 3;"
    },
    {
        "instruction": "Create a Node.js script that processes a list of file paths and replaces all spaces with underscores in their names.",
        "input": "[\"file one.txt\", \"file two.txt\"]",
        "response": "const fs = require('fs');\nconst path = require('path');\n\nfunction replace_spaces(files) {\n    for (const file of files) {\n        const dir = path.dirname(file);\n        const base_name = path.basename(file).replace(/\\s+/g, '_');\n        const new_path = path.join(dir, base_name);\n        fs.renameSync(file, new_path);\n    }}\n\nconst files_list = ['file one.txt', 'file two.txt'];\nreplace_spaces(files_list);",
        "output": "const fs = require('fs');\nconst path = require('path');\n\nfunction replace_spaces(files) {\n    for (const file of files) {\n        const dir = path.dirname(file);\n        const base_name = path.basename(file).replace(/\\s+/g, '_');\n        const new_path = path.join(dir, base_name);\n        fs.renameSync(file, new_path);\n    }}\n\nconst files_list = ['file one.txt', 'file two.txt'];\nreplace_spaces(files_list);"
    },
    {
        "instruction": "Create a C# function that calculates the factorial of a given integer.",
        "input": "5",
        "response": "using System;\n\nclass FactorialCalculator {\n    static long CalculateFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * CalculateFactorial(n - 1);\n    }\n\n    public static void Main(string[] args) {\n        int input = 5;\n        long result = CalculateFactorial(input);\n        Console.WriteLine(result);\n    }}",
        "output": "using System;\n\nclass FactorialCalculator {\n    static long CalculateFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * CalculateFactorial(n - 1);\n    }\n\n    public static void Main(string[] args) {\n        int input = 5;\n        long result = CalculateFactorial(input);\n        Console.WriteLine(result);\n    }}"
    },
    {
        "instruction": "How would you implement a program in C++ to read a list of space-separated integers and find the smallest number?",
        "input": "12 5 9 1 8",
        "response": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::string input = \"12 5 9 1 8\";\n    std::istringstream iss(input);\n    std::vector<int> numbers;\n    int num;\n\n    while (iss >> num) {\n        numbers.push_back(num);\n    }\n\n    int min_number = *std::min_element(numbers.begin(), numbers.end());\n    std::cout << \"Smallest number is: \" << min_number << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::string input = \"12 5 9 1 8\";\n    std::istringstream iss(input);\n    std::vector<int> numbers;\n    int num;\n\n    while (iss >> num) {\n        numbers.push_back(num);\n    }\n\n    int min_number = *std::min_element(numbers.begin(), numbers.end());\n    std::cout << \"Smallest number is: \" << min_number << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a shell script that, given a directory path, lists all files (and only files) within it.",
        "input": "/home/user/documents",
        "response": "#!/bin/sh\ndirectory_path=\"/home/user/documents\"\n\nfor entry in \"$directory_path\"/*; do\n    if [ -f \"$entry\" ]; then\n        echo \"$entry\"\n    fi\ndone",
        "output": "#!/bin/sh\ndirectory_path=\"/home/user/documents\"\n\nfor entry in \"$directory_path\"/*; do\n    if [ -f \"$entry\" ]; then\n        echo \"$entry\"\n    fi\ndone"
    },
    {
        "instruction": "Create a function in JavaScript that takes in a list of words, filters out any word that contains the letter 'q', and returns the modified list.",
        "input": "[\"apple\", \"aqua\", \"orange\", \"banana\"]",
        "response": "function filterWordsWithoutQ(words) {\n    return words.filter(word => !word.includes('q'));}\n\nconst inputWords = [\"apple\", \"aqua\", \"orange\", \"banana\"];\nconst filteredWords = filterWordsWithoutQ(inputWords);\n\nconsole.log(filteredWords);",
        "output": "function filterWordsWithoutQ(words) {\n    return words.filter(word => !word.includes('q'));}\n\nconst inputWords = [\"apple\", \"aqua\", \"orange\", \"banana\"];\nconst filteredWords = filterWordsWithoutQ(inputWords);\n\nconsole.log(filteredWords);"
    },
    {
        "instruction": "Write a C program that reads an integer from the user and prints its factorial.",
        "input": "5",
        "response": "#include <stdio.h>\n\nint main() {\n    int n, i;\n    unsigned long long factorial = 1;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &n);\n\n    for (i = 1; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    printf(\"Factorial of %d = %llu\", n, factorial);\n    return 0;}",
        "output": "#include <stdio.h>\n\nint main() {\n    int n, i;\n    unsigned long long factorial = 1;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &n);\n\n    for (i = 1; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    printf(\"Factorial of %d = %llu\", n, factorial);\n    return 0;}"
    },
    {
        "instruction": "Design a Python function to extract and print the domain name from an email address.",
        "input": "johndoe@example.com",
        "response": "def extract_domain(email):\n    domain = email.split('@')[-1]\n    return domain\n\nemail = 'johndoe@example.com'\nprint(extract_domain(email))",
        "output": "def extract_domain(email):\n    domain = email.split('@')[-1]\n    return domain\n\nemail = 'johndoe@example.com'\nprint(extract_domain(email))"
    },
    {
        "instruction": "How would you implement, in JavaScript, a function to find and display the longest word from an input string?",
        "input": "The quick brown fox jumped over the lazy dog",
        "response": "function findLongestWord(str) {\n    const words = str.split(' ');\n    let longestWord = '';\n\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst inputString = 'The quick brown fox jumped over the lazy dog';\nconsole.log(findLongestWord(inputString));",
        "output": "function findLongestWord(str) {\n    const words = str.split(' ');\n    let longestWord = '';\n\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst inputString = 'The quick brown fox jumped over the lazy dog';\nconsole.log(findLongestWord(inputString));"
    },
    {
        "instruction": "Write a PHP function that takes a string with comma-separated values and returns an array of those values.",
        "input": "apple,banana,orange,strawberry",
        "response": "<?php\n\nfunction stringToArray($str) {\n    return explode(',', $str);}\n\n$input = 'apple,banana,orange,strawberry';\nprint_r(stringToArray($input));\n\n?>",
        "output": "<?php\n\nfunction stringToArray($str) {\n    return explode(',', $str);}\n\n$input = 'apple,banana,orange,strawberry';\nprint_r(stringToArray($input));\n\n?>"
    },
    {
        "instruction": "Implement a C++ function that takes a vector of integers and sorts it in ascending order.",
        "input": "{4, 9, 2, 7, 1}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid sort_vector(std::vector<int> &vec) {\n    std::sort(vec.begin(), vec.end());}\n\nint main() {\n    std::vector<int> numbers = {4, 9, 2, 7, 1};\n    sort_vector(numbers);\n\n    for (int i : numbers) {\n        std::cout << i << ' ';\n    }\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nvoid sort_vector(std::vector<int> &vec) {\n    std::sort(vec.begin(), vec.end());}\n\nint main() {\n    std::vector<int> numbers = {4, 9, 2, 7, 1};\n    sort_vector(numbers);\n\n    for (int i : numbers) {\n        std::cout << i << ' ';\n    }\n    return 0;}"
    },
    {
        "instruction": "Create a PHP script that reads the content of a text file and outputs it to the browser.",
        "input": "example.txt",
        "response": "<?php\n$filename = 'example.txt';\n\nif (file_exists($filename)) {\n    $file_contents = file_get_contents($filename);\n    echo nl2br($file_contents);} else {\n    echo 'File not found.';}\n?>",
        "output": "<?php\n$filename = 'example.txt';\n\nif (file_exists($filename)) {\n    $file_contents = file_get_contents($filename);\n    echo nl2br($file_contents);} else {\n    echo 'File not found.';}\n?>"
    },
    {
        "instruction": "Write a Python script that uses an API to download the current weather for a given city.",
        "input": "London",
        "response": "import requests\nimport json\n\napi_key = 'your_api_key_here'\ncity_name = 'London'\nbase_url = 'http://api.openweathermap.org/data/2.5/weather?'\n\ncomplete_url = base_url + 'appid=' + api_key + '&q=' + city_name\n\nresponse = requests.get(complete_url)\n\nweather_data = response.json()\n\nif weather_data['cod'] != '404':\n    main_data = weather_data['main']\n    current_temperature = main_data['temp']\n    current_pressure = main_data['pressure']\n    current_humidity = main_data['humidity']\n\n    print('Temperature:', current_temperature, 'Pressure:', current_pressure, 'Humidity:', current_humidity)\nelse:\n    print('City not found.')}",
        "output": "import requests\nimport json\n\napi_key = 'your_api_key_here'\ncity_name = 'London'\nbase_url = 'http://api.openweathermap.org/data/2.5/weather?'\n\ncomplete_url = base_url + 'appid=' + api_key + '&q=' + city_name\n\nresponse = requests.get(complete_url)\n\nweather_data = response.json()\n\nif weather_data['cod'] != '404':\n    main_data = weather_data['main']\n    current_temperature = main_data['temp']\n    current_pressure = main_data['pressure']\n    current_humidity = main_data['humidity']\n\n    print('Temperature:', current_temperature, 'Pressure:', current_pressure, 'Humidity:', current_humidity)\nelse:\n    print('City not found.')}"
    },
    {
        "instruction": "How would you write a JavaScript function that removes duplicates from an array?",
        "input": "[1, 2, 3, 3, 4, 4, 5]",
        "response": "function removeDuplicates(arr) {\n    return Array.from(new Set(arr));}\n\nconst uniqueArr = removeDuplicates([1, 2, 3, 3, 4, 4, 5]);\nconsole.log(uniqueArr);",
        "output": "function removeDuplicates(arr) {\n    return Array.from(new Set(arr));}\n\nconst uniqueArr = removeDuplicates([1, 2, 3, 3, 4, 4, 5]);\nconsole.log(uniqueArr);"
    },
    {
        "instruction": "How would you implement a function in JavaScript to generate a random alphanumeric string of a specified length?",
        "input": "10",
        "response": "function generateRandomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;}\n\nconst randomString = generateRandomString(10);\nconsole.log(randomString);",
        "output": "function generateRandomString(length) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;}\n\nconst randomString = generateRandomString(10);\nconsole.log(randomString);"
    },
    {
        "instruction": "Create a Python script to find all occurrences of a given substring in a given text and return their starting indices.",
        "input": "text: 'I love learning programming. I love spending time on projects.', substring: 'love'",
        "response": "def find_substring_indices(text, substring):\n    indices = []\n    index = 0\n    while index != -1:\n        index = text.find(substring, index)\n        if index != -1:\n            indices.append(index)\n            index += len(substring)\n    return indices\n\ntext = 'I love learning programming. I love spending time on projects.'\nsubstring = 'love'\nprint(find_substring_indices(text, substring))",
        "output": "def find_substring_indices(text, substring):\n    indices = []\n    index = 0\n    while index != -1:\n        index = text.find(substring, index)\n        if index != -1:\n            indices.append(index)\n            index += len(substring)\n    return indices\n\ntext = 'I love learning programming. I love spending time on projects.'\nsubstring = 'love'\nprint(find_substring_indices(text, substring))"
    },
    {
        "instruction": "Write a Bash script that takes a text file as input and outputs the number of lines containing a specified word.",
        "input": "file.txt containing text: 'This is a random text file.\\nIt contains some random words.\\nRandom words can be interesting.', word: 'random'",
        "response": "#!/bin/bash\n\nword='random'\nfile='file.txt'\ncount=$(grep -o -i -w $word $file | wc -l)\n\necho \"Number of lines containing the word '$word': $count\"",
        "output": "#!/bin/bash\n\nword='random'\nfile='file.txt'\ncount=$(grep -o -i -w $word $file | wc -l)\n\necho \"Number of lines containing the word '$word': $count\""
    },
    {
        "instruction": "Design a Python function that takes a list of numbers and returns their average.",
        "input": "[4, 7, 9, 15, 20]",
        "response": "def average(numbers):\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\nresult = average([4, 7, 9, 15, 20])\nprint(result)",
        "output": "def average(numbers):\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\nresult = average([4, 7, 9, 15, 20])\nprint(result)"
    },
    {
        "instruction": "Create a C++ program that accepts an integer from the user and outputs the factorial of the number.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num;\n    std::cout << 'Enter an integer:';\n    std::cin >> num;\n    std::cout << 'Factorial of ' << num << ' is ' << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num;\n    std::cout << 'Enter an integer:';\n    std::cin >> num;\n    std::cout << 'Factorial of ' << num << ' is ' << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "In JavaScript, write a function that accepts a string and returns a new string with each character duplicated.",
        "input": "\"hello\"",
        "response": "function duplicateCharacters(str) {\n    let result = '';\n    for (const char of str) {\n        result += char.repeat(2);\n    }\n    return result;}\n\nconst doubledStr = duplicateCharacters('hello');\nconsole.log(doubledStr);",
        "output": "function duplicateCharacters(str) {\n    let result = '';\n    for (const char of str) {\n        result += char.repeat(2);\n    }\n    return result;}\n\nconst doubledStr = duplicateCharacters('hello');\nconsole.log(doubledStr);"
    },
    {
        "instruction": "Implement a Java method to compute the greatest common divisor (GCD) of two given integers using recursion.",
        "input": "36, 48",
        "response": "public class GCD {\n    public static int gcd(int num1, int num2) {\n        if (num2 == 0) {\n            return num1;\n        }\n        return gcd(num2, num1 % num2);\n    }\n\n    public static void main(String[] args) {\n        int result = gcd(36, 48);\n        System.out.println('GCD: ' + result);\n    }}",
        "output": "public class GCD {\n    public static int gcd(int num1, int num2) {\n        if (num2 == 0) {\n            return num1;\n        }\n        return gcd(num2, num1 % num2);\n    }\n\n    public static void main(String[] args) {\n        int result = gcd(36, 48);\n        System.out.println('GCD: ' + result);\n    }}"
    },
    {
        "instruction": "Implement a Python class representing a Stack with methods `push`, `pop`, and `is_empty`.",
        "input": "push(5), push(8), pop(), is_empty()",
        "response": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n\n    def is_empty(self):\n        return len(self.items) == 0\n\nstack = Stack()\nstack.push(5)\nstack.push(8)\nstack.pop()\nprint(stack.is_empty())",
        "output": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n\n    def is_empty(self):\n        return len(self.items) == 0\n\nstack = Stack()\nstack.push(5)\nstack.push(8)\nstack.pop()\nprint(stack.is_empty())"
    },
    {
        "instruction": "How would you write a C++ function that calculates the factorial of a given integer?",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n        \n    return n * factorial(n - 1);}\n\nint main() {\n    int input = 5;\n    std::cout << 'Factorial of ' << input << ' is: ' << factorial(input) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0)\n        return 1;\n        \n    return n * factorial(n - 1);}\n\nint main() {\n    int input = 5;\n    std::cout << 'Factorial of ' << input << ' is: ' << factorial(input) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Design a Java function that reverses a given string.",
        "input": "\"Hello, world!\"",
        "response": "public class ReverseString {\n    public static String reverse(String input) {\n        StringBuilder reversedString = new StringBuilder(input);\n        return reversedString.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"Hello, world!\";\n        System.out.println(reverse(input));\n    }}",
        "output": "public class ReverseString {\n    public static String reverse(String input) {\n        StringBuilder reversedString = new StringBuilder(input);\n        return reversedString.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"Hello, world!\";\n        System.out.println(reverse(input));\n    }}"
    },
    {
        "instruction": "Write a shell script to calculate the disk usage of the specified directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\nDIRECTORY=\"/home/user/documents\"\n\n# Calculate disk usage with 'du' command, summarize and display in human-readable format\ndu -sh \"${DIRECTORY}\"",
        "output": "#!/bin/bash\n\nDIRECTORY=\"/home/user/documents\"\n\n# Calculate disk usage with 'du' command, summarize and display in human-readable format\ndu -sh \"${DIRECTORY}\""
    },
    {
        "instruction": "Implement a C++ program that reads a text file and outputs the frequency of each word present in the file.",
        "input": "Sample input text: 'Hello, World! This is a sample text. This text contains sample words. Words like sample.'",
        "response": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    // Replace the file name with your file name\n    ifstream file(\"input.txt\");\n    string line;\n    map<string, int> wordFreq;\n    while (getline(file, line)) {\n        stringstream ss(line);\n        string word;\n        while (ss >> word) {\n            word.erase(remove_if(word.begin(), word.end(), [](char c) { return !isalnum(c); }), word.end());\n            transform(word.begin(), word.end(), word.begin(), ::tolower);\n            ++wordFreq[word];\n        }\n    }\n\n    for (const auto& pair : wordFreq) {\n        cout << pair.first << \": \" << pair.second << endl;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <map>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    // Replace the file name with your file name\n    ifstream file(\"input.txt\");\n    string line;\n    map<string, int> wordFreq;\n    while (getline(file, line)) {\n        stringstream ss(line);\n        string word;\n        while (ss >> word) {\n            word.erase(remove_if(word.begin(), word.end(), [](char c) { return !isalnum(c); }), word.end());\n            transform(word.begin(), word.end(), word.begin(), ::tolower);\n            ++wordFreq[word];\n        }\n    }\n\n    for (const auto& pair : wordFreq) {\n        cout << pair.first << \": \" << pair.second << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you design a Python function to find the count of unique characters for a given string?",
        "input": "The input string is: 'Programming is fascinating!'",
        "response": "def unique_char_count(s):\n    return len(set(s.lower()))\n\ninput_str = 'Programming is fascinating!'\ncount = unique_char_count(input_str)\nprint(count)",
        "output": "def unique_char_count(s):\n    return len(set(s.lower()))\n\ninput_str = 'Programming is fascinating!'\ncount = unique_char_count(input_str)\nprint(count)"
    },
    {
        "instruction": "Write a C# script that calculates the factorial of a given positive integer using recursion.",
        "input": "Calculate the factorial of 5.",
        "response": "using System;\n\npublic class Factorial {\n\n    public static int RecursiveFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        return n * RecursiveFactorial(n - 1);\n    }\n\n    public static void Main(string[] args) {\n        int n = 5;\n        int result = RecursiveFactorial(n);\n        Console.WriteLine(result);\n    }\n}",
        "output": "using System;\n\npublic class Factorial {\n\n    public static int RecursiveFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        return n * RecursiveFactorial(n - 1);\n    }\n\n    public static void Main(string[] args) {\n        int n = 5;\n        int result = RecursiveFactorial(n);\n        Console.WriteLine(result);\n    }\n}"
    },
    {
        "instruction": "Write a shell script to find all the files with a certain extension in a given directory and list them in alphabetical order.",
        "input": "Directory: '/path/to/directory', Extension: '.txt'",
        "response": "#!/bin/bash\n\ndir='/path/to/directory'\next='.txt'\n\nfind \"$dir\" -type f -iname \"*$ext\" | sort",
        "output": "#!/bin/bash\n\ndir='/path/to/directory'\next='.txt'\n\nfind \"$dir\" -type f -iname \"*$ext\" | sort"
    },
    {
        "instruction": "Implement a C++ program that reads 3 integer values from user input and calculates the average.",
        "input": "22, 35, 48",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    float average;\n    \n    cout << \"Enter 3 integer values: \";\n    cin >> a >> b >> c;\n\n    average = (a + b + c) / 3.0;\n    cout << \"The average is: \" << average << endl;\n\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    float average;\n    \n    cout << \"Enter 3 integer values: \";\n    cin >> a >> b >> c;\n\n    average = (a + b + c) / 3.0;\n    cout << \"The average is: \" << average << endl;\n\n    return 0;}"
    },
    {
        "instruction": "Construct a PHP script that takes two strings as input and concatenates them.",
        "input": "\"Hello \", \"World!\"",
        "response": "<?php\nfunction concatenate_strings($str1, $str2) {\n    return $str1 . $str2;}\n\n$result = concatenate_strings(\"Hello \", \"World!\");\necho $result;\n?>",
        "output": "<?php\nfunction concatenate_strings($str1, $str2) {\n    return $str1 . $str2;}\n\n$result = concatenate_strings(\"Hello \", \"World!\");\necho $result;\n?>"
    },
    {
        "instruction": "Can you create and demonstrate a C# function for sorting a list containing floating-point numbers in ascending order?",
        "input": "[5.1, 2.8, 6.2, 3.9]",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass SortingExample {\n    public static void Main() {\n        List<double> numbersList = new List<double> {5.1, 2.8, 6.2, 3.9};\n        numbersList.Sort();\n\n        foreach (double num in numbersList) {\n            Console.WriteLine(num);\n        }\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass SortingExample {\n    public static void Main() {\n        List<double> numbersList = new List<double> {5.1, 2.8, 6.2, 3.9};\n        numbersList.Sort();\n\n        foreach (double num in numbersList) {\n            Console.WriteLine(num);\n        }\n    }}"
    },
    {
        "instruction": "Design a Python function that reads a text file line by line and prints each line with its corresponding line number.",
        "input": "sample.txt (with multiple lines of text)",
        "response": "def print_file_with_line_numbers(file_path):\n    with open(file_path, 'r') as file:\n        for index, line in enumerate(file.readlines(), start=1):\n            print(f'{index}: {line.strip()}')\n\nprint_file_with_line_numbers('sample.txt')",
        "output": "def print_file_with_line_numbers(file_path):\n    with open(file_path, 'r') as file:\n        for index, line in enumerate(file.readlines(), start=1):\n            print(f'{index}: {line.strip()}')\n\nprint_file_with_line_numbers('sample.txt')"
    },
    {
        "instruction": "Write a C++ function to calculate the factorial of an integer.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n  if (n == 0) return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int num = 5;\n  cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n  return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n  if (n == 0) return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int num = 5;\n  cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n  return 0;\n}"
    },
    {
        "instruction": "How would you generate a random number between two given integers within Python?",
        "input": "10, 20",
        "response": "import random\n\nlower = 10\nupper = 20\nrandom_number = random.randint(lower, upper)\nprint(random_number)",
        "output": "import random\n\nlower = 10\nupper = 20\nrandom_number = random.randint(lower, upper)\nprint(random_number)"
    },
    {
        "instruction": "Create a JavaScript function that sorts a list of numbers in descending order.",
        "input": "[6, 8, 1, 4, 12]",
        "response": "function sortDescending(arr) {\n  return arr.sort((a, b) => b - a);\n}\n\nconst numbers = [6, 8, 1, 4, 12];\nconst sortedNumbers = sortDescending(numbers);\nconsole.log(sortedNumbers);",
        "output": "function sortDescending(arr) {\n  return arr.sort((a, b) => b - a);\n}\n\nconst numbers = [6, 8, 1, 4, 12];\nconst sortedNumbers = sortDescending(numbers);\nconsole.log(sortedNumbers);"
    },
    {
        "instruction": "In Java, show how to read a text file line by line and print out the content.",
        "input": "example.txt",
        "response": "import java.io.*;\nimport java.util.Scanner;\n\npublic class ReadFile {\n  public static void main(String[] args) {\n    try {\n      File file = new File(\"example.txt\");\n      Scanner scanner = new Scanner(file);\n\n      while (scanner.hasNextLine()) {\n        String line = scanner.nextLine();\n        System.out.println(line);\n      }\n\n      scanner.close();\n    } catch (FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n      e.printStackTrace();\n    }\n  }\n}",
        "output": "import java.io.*;\nimport java.util.Scanner;\n\npublic class ReadFile {\n  public static void main(String[] args) {\n    try {\n      File file = new File(\"example.txt\");\n      Scanner scanner = new Scanner(file);\n\n      while (scanner.hasNextLine()) {\n        String line = scanner.nextLine();\n        System.out.println(line);\n      }\n\n      scanner.close();\n    } catch (FileNotFoundException e) {\n      System.out.println(\"File not found.\");\n      e.printStackTrace();\n    }\n  }\n}"
    },
    {
        "instruction": "Develop a C++ function that takes a vector of integers and prints only the even numbers from it.",
        "input": "{2, 7, 4, 9, 6}",
        "response": "#include <iostream>\n#include <vector>\n\nvoid print_even_numbers(const std::vector<int>& numbers) {\n    for (const int num : numbers) {\n        if (num % 2 == 0) {\n            std::cout << num << ' ';\n        }\n    }}\n\nint main() {\n    std::vector<int> input = {2, 7, 4, 9, 6};\n    print_even_numbers(input);\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nvoid print_even_numbers(const std::vector<int>& numbers) {\n    for (const int num : numbers) {\n        if (num % 2 == 0) {\n            std::cout << num << ' ';\n        }\n    }}\n\nint main() {\n    std::vector<int> input = {2, 7, 4, 9, 6};\n    print_even_numbers(input);\n    return 0;}"
    },
    {
        "instruction": "What would a Python script look like that reads a CSV file and prints each row as a list?",
        "input": "example.csv",
        "response": "import csv\n\nfilename = 'example.csv'\n\nwith open(filename, 'r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n\n    for row in csv_reader:\n        print(row)",
        "output": "import csv\n\nfilename = 'example.csv'\n\nwith open(filename, 'r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n\n    for row in csv_reader:\n        print(row)"
    },
    {
        "instruction": "Write a PHP snippet that takes a given string and replaces all occurrences of the word 'apple' with 'orange'.",
        "input": "'I like apple juice and apple pie.'",
        "response": "<?php\n\n$string = 'I like apple juice and apple pie.';\n$replaced_string = str_replace('apple', 'orange', $string);\n\necho $replaced_string;\n\n?>",
        "output": "<?php\n\n$string = 'I like apple juice and apple pie.';\n$replaced_string = str_replace('apple', 'orange', $string);\n\necho $replaced_string;\n\n?>"
    },
    {
        "instruction": "Implement a JavaScript function that receives an object containing key-value pairs and returns a new object with reversed key-value pairs.",
        "input": "{ a: 1, b: 2, c: 3 }",
        "response": "function reverseKeyValuePairs(obj) {\n    const reversedObj = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n        reversedObj[value] = key;\n    }\n\n    return reversedObj;}\n\nconst input = { a: 1, b: 2, c: 3 };\nconst result = reverseKeyValuePairs(input);\nconsole.log(result);",
        "output": "function reverseKeyValuePairs(obj) {\n    const reversedObj = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n        reversedObj[value] = key;\n    }\n\n    return reversedObj;}\n\nconst input = { a: 1, b: 2, c: 3 };\nconst result = reverseKeyValuePairs(input);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a C++ program that reads ten integer values from the user and calculates their average.",
        "input": "1 2 3 4 5 6 7 8 9 10",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int sum = 0, value;\n    for(int i = 0; i < 10; ++i) {\n        cin >> value;\n        sum += value;\n    }\n    double average = static_cast<double>(sum) / 10;\n    cout << \"Average: \" << average << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int sum = 0, value;\n    for(int i = 0; i < 10; ++i) {\n        cin >> value;\n        sum += value;\n    }\n    double average = static_cast<double>(sum) / 10;\n    cout << \"Average: \" << average << endl;\n    return 0;}"
    },
    {
        "instruction": "Write a PHP function to calculate the factorial of a given non-negative integer.",
        "input": "5",
        "response": "<?php\nfunction factorial($n) {\n    if ($n <= 1) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$result = factorial(5);\necho $result;\n?>",
        "output": "<?php\nfunction factorial($n) {\n    if ($n <= 1) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$result = factorial(5);\necho $result;\n?>"
    },
    {
        "instruction": "In JavaScript, how can you fetch data from an API using the provided endpoint, parse the data as JSON, then output the title field of each post?",
        "input": "https://jsonplaceholder.typicode.com/posts",
        "response": "async function fetchPosts() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const data = await response.json();\n    data.forEach((post) => {\n        console.log(post.title);\n    });}\n\nfetchPosts();",
        "output": "async function fetchPosts() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const data = await response.json();\n    data.forEach((post) => {\n        console.log(post.title);\n    });}\n\nfetchPosts();"
    },
    {
        "instruction": "Create a Shell script that lists all files in the current directory recursively and counts the number of files found.",
        "input": "",
        "response": "#!/bin/bash\n\ncount=0\nfunction count_files() {\n    for item in \"$1\"/*; do\n        if [ -d \"${item}\" ]; then\n            count_files \"${item}\"\n        elif [ -f \"${item}\" ]; then\n            count=$((count+1))\n        fi\n    done}\n\ncount_files \"$(pwd)\"\necho \"Number of files found: ${count}\"",
        "output": "#!/bin/bash\n\ncount=0\nfunction count_files() {\n    for item in \"$1\"/*; do\n        if [ -d \"${item}\" ]; then\n            count_files \"${item}\"\n        elif [ -f \"${item}\" ]; then\n            count=$((count+1))\n        fi\n    done}\n\ncount_files \"$(pwd)\"\necho \"Number of files found: ${count}\""
    },
    {
        "instruction": "Design a C++ class named 'Person' with private attributes for name, age, and address including public getters and setters.",
        "input": "John Doe, 25, 1234 Elm Street",
        "response": "#include<iostream>\n#include<string>\n\nclass Person {\nprivate:\n    std::string name;\n    int age;\n    std::string address;\n\npublic:\n    void setName(const std::string& newName) { name = newName; }\n    void setAge(int newAge) { age = newAge; }\n    void setAddress(const std::string& newAddress) { address = newAddress; }\n\n    std::string getName() const { return name; }\n    int getAge() const { return age; }\n    std::string getAddress() const { return address; }};\n\nint main() {\n    Person person;\n    person.setName(\"John Doe\");\n    person.setAge(25);\n    person.setAddress(\"1234 Elm Street\");\n    std::cout << person.getName() << \", \" << person.getAge() << \", \" << person.getAddress() << std::endl;\n    return 0;}",
        "output": "#include<iostream>\n#include<string>\n\nclass Person {\nprivate:\n    std::string name;\n    int age;\n    std::string address;\n\npublic:\n    void setName(const std::string& newName) { name = newName; }\n    void setAge(int newAge) { age = newAge; }\n    void setAddress(const std::string& newAddress) { address = newAddress; }\n\n    std::string getName() const { return name; }\n    int getAge() const { return age; }\n    std::string getAddress() const { return address; }};\n\nint main() {\n    Person person;\n    person.setName(\"John Doe\");\n    person.setAge(25);\n    person.setAddress(\"1234 Elm Street\");\n    std::cout << person.getName() << \", \" << person.getAge() << \", \" << person.getAddress() << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you write a Python script to download an image from the internet using the 'requests' library and save it with a desired name?",
        "input": "https://example.com/image.jpg, saved_image.jpg",
        "response": "import requests\n\nurl = \"https://example.com/image.jpg\"\nresponse = requests.get(url)\n\nwith open(\"saved_image.jpg\", \"wb\") as f:\n    f.write(response.content)",
        "output": "import requests\n\nurl = \"https://example.com/image.jpg\"\nresponse = requests.get(url)\n\nwith open(\"saved_image.jpg\", \"wb\") as f:\n    f.write(response.content)"
    },
    {
        "instruction": "Develop a Java function that accepts a list of integers and calculates the median value of the elements.",
        "input": "[1, 6, 7, 9, 2]",
        "response": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class MedianCalculator {\n\n  public static double calculateMedian(ArrayList<Integer> numbers) {\n    Collections.sort(numbers);\n    int middle = numbers.size() / 2;\n\n    if (numbers.size() % 2 == 1) {\n      return numbers.get(middle);\n    } else {\n      return (numbers.get(middle - 1) + numbers.get(middle)) / 2.0;\n    }\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> sample = new ArrayList<>();\n    sample.add(1);\n    sample.add(6);\n    sample.add(7);\n    sample.add(9);\n    sample.add(2);\n\n    System.out.println(calculateMedian(sample));\n  }}",
        "output": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class MedianCalculator {\n\n  public static double calculateMedian(ArrayList<Integer> numbers) {\n    Collections.sort(numbers);\n    int middle = numbers.size() / 2;\n\n    if (numbers.size() % 2 == 1) {\n      return numbers.get(middle);\n    } else {\n      return (numbers.get(middle - 1) + numbers.get(middle)) / 2.0;\n    }\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> sample = new ArrayList<>();\n    sample.add(1);\n    sample.add(6);\n    sample.add(7);\n    sample.add(9);\n    sample.add(2);\n\n    System.out.println(calculateMedian(sample));\n  }}"
    },
    {
        "instruction": "Implement a shell script that reads a file line by line and outputs the line number and content of each line.",
        "input": "file.txt",
        "response": "#!/bin/sh\n\nfile=\"file.txt\"\nline_number=1\n\nwhile read -r line\ndo\n    echo \"Line $line_number: $line\"\n    line_number=$((line_number + 1))\ndone < \"$file\"",
        "output": "#!/bin/sh\n\nfile=\"file.txt\"\nline_number=1\n\nwhile read -r line\ndo\n    echo \"Line $line_number: $line\"\n    line_number=$((line_number + 1))\ndone < \"$file\""
    },
    {
        "instruction": "Write a C++ function that reverses a given string.",
        "input": "\"Programming\"",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nstd::string reverse_string(const std::string& input) {\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string input = \"Programming\";\n    std::string reversed = reverse_string(input);\n    std::cout << reversed << std::endl;}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nstd::string reverse_string(const std::string& input) {\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string input = \"Programming\";\n    std::string reversed = reverse_string(input);\n    std::cout << reversed << std::endl;}"
    },
    {
        "instruction": "Implement a Python function that uses a recursion algorithm to find the factorial of a given number.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnumber = 5\nresult = factorial(number)\nprint(result)",
        "output": "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnumber = 5\nresult = factorial(number)\nprint(result)"
    },
    {
        "instruction": "How can I write a JavaScript code to generate Fibonacci series up to a given number?",
        "input": "10",
        "response": "function generateFibonacciSeries(number) {\n    const series = [0, 1];\n    while (series.length < number) {\n        series.push(series[series.length - 1] + series[series.length - 2]);\n    }\n    return series;}\n\nconst number = 10;\nconst result = generateFibonacciSeries(number);\nconsole.log(result);",
        "output": "function generateFibonacciSeries(number) {\n    const series = [0, 1];\n    while (series.length < number) {\n        series.push(series[series.length - 1] + series[series.length - 2]);\n    }\n    return series;}\n\nconst number = 10;\nconst result = generateFibonacciSeries(number);\nconsole.log(result);"
    },
    {
        "instruction": "Design a PHP function that accepts an array of integers and sorts them in descending order.",
        "input": "[34, 12, 56, 78, 3, 89]",
        "response": "<?php\n\nfunction sortDescending($arr) {\n    rsort($arr);\n    return $arr;}\n\n$input = array(34, 12, 56, 78, 3, 89);\n$output = sortDescending($input);\nprint_r($output);\n\n?>",
        "output": "<?php\n\nfunction sortDescending($arr) {\n    rsort($arr);\n    return $arr;}\n\n$input = array(34, 12, 56, 78, 3, 89);\n$output = sortDescending($input);\nprint_r($output);\n\n?>"
    },
    {
        "instruction": "Implement a function in C++ that takes a character as input and checks if it is uppercase, lowercase or a digit.",
        "input": "'A'",
        "response": "#include <iostream>\n#include <cctype>\n\nchar check_char_type(char c) {\n    if (isdigit(c)) return 'D';\n    if (isupper(c)) return 'U';\n    if (islower(c)) return 'L';\n    return 'N';}\n\nint main() {\n    char input = 'A';\n    std::cout << check_char_type(input) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cctype>\n\nchar check_char_type(char c) {\n    if (isdigit(c)) return 'D';\n    if (isupper(c)) return 'U';\n    if (islower(c)) return 'L';\n    return 'N';}\n\nint main() {\n    char input = 'A';\n    std::cout << check_char_type(input) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Can you write a script in Bash to output the number of occurrences of a given string in a file?",
        "input": "search_string=\"example\"\nfile_path=\"test.txt\"",
        "response": "#!/bin/bash\n\nsearch_string=\"example\"\nfile_path=\"test.txt\"\n\ngrep -o \"${search_string}\" \"${file_path}\" | wc -l",
        "output": "#!/bin/bash\n\nsearch_string=\"example\"\nfile_path=\"test.txt\"\n\ngrep -o \"${search_string}\" \"${file_path}\" | wc -l"
    },
    {
        "instruction": "Develop a PHP function that takes a URL as an input and returns the HTTP status code of that URL.",
        "input": "\"https://www.example.com\"",
        "response": "<?php\n\nfunction get_http_code($url) {\n    $headers = get_headers($url);\n    return intval(substr($headers[0], 9, 3));}\n\n$url = \"https://www.example.com\";\necho get_http_code($url);\n\n?>",
        "output": "<?php\n\nfunction get_http_code($url) {\n    $headers = get_headers($url);\n    return intval(substr($headers[0], 9, 3));}\n\n$url = \"https://www.example.com\";\necho get_http_code($url);\n\n?>"
    },
    {
        "instruction": "Write a JavaScript function that takes an HTML color code in hex format (e.g., '#FFFFFF') and returns its RGB representation (e.g., 'rgb(255, 255, 255)').",
        "input": "\"#FF5733\"",
        "response": "function hexToRgb(hex) {\n    const r = parseInt(hex.substr(1, 2), 16);\n    const g = parseInt(hex.substr(3, 2), 16);\n    const b = parseInt(hex.substr(5, 2), 16);\n    return `rgb(${r}, ${g}, ${b})`;}\n\nconst hexColor = '#FF5733';\nconsole.log(hexToRgb(hexColor));",
        "output": "function hexToRgb(hex) {\n    const r = parseInt(hex.substr(1, 2), 16);\n    const g = parseInt(hex.substr(3, 2), 16);\n    const b = parseInt(hex.substr(5, 2), 16);\n    return `rgb(${r}, ${g}, ${b})`;}\n\nconst hexColor = '#FF5733';\nconsole.log(hexToRgb(hexColor));"
    },
    {
        "instruction": "Design a Python script that reads the content of a text file, counts the words, and provides the total count.",
        "input": "file.txt (contents: This is a sample text file with some words)",
        "response": "def word_count(file):\n    with open(file, 'r') as f:\n        text = f.read()\n        words = text.split()\n        count = len(words)\n    return count\n\nresult = word_count('file.txt')\nprint(result)",
        "output": "def word_count(file):\n    with open(file, 'r') as f:\n        text = f.read()\n        words = text.split()\n        count = len(words)\n    return count\n\nresult = word_count('file.txt')\nprint(result)"
    },
    {
        "instruction": "How would you write a JavaScript function to capitalize the first letter of each word in a given sentence?",
        "input": "\"hello world\"",
        "response": "function capitalizeWords(sentence) {\n    return sentence.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');}\n\nconst result = capitalizeWords('hello world');\nconsole.log(result);",
        "output": "function capitalizeWords(sentence) {\n    return sentence.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');}\n\nconst result = capitalizeWords('hello world');\nconsole.log(result);"
    },
    {
        "instruction": "Implement a Java class that represents a simple bank account with methods for depositing, withdrawing, and checking the balance.",
        "input": "BankAccount account = new BankAccount(100); account.deposit(50); account.withdraw(20); account.getBalance();",
        "response": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (amount <= balance) {\n            this.balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds.\");\n        }\n    }\n\n    public double getBalance() {\n        return this.balance;\n    }}\n\nBankAccount account = new BankAccount(100);\naccount.deposit(50);\naccount.withdraw(20);\nSystem.out.println(account.getBalance());",
        "output": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (amount <= balance) {\n            this.balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds.\");\n        }\n    }\n\n    public double getBalance() {\n        return this.balance;\n    }}\n\nBankAccount account = new BankAccount(100);\naccount.deposit(50);\naccount.withdraw(20);\nSystem.out.println(account.getBalance());"
    },
    {
        "instruction": "Using C++, write a program that takes a list of integers and calculates the average of the numbers in the list.",
        "input": "std::vector<int> numbers = {1, 2, 3, 4, 5};",
        "response": "#include <iostream>\n#include <vector>\n\ndouble calculateAverage(std::vector<int>& nums) {\n    double sum = 0;\n\n    for(int num : nums) {\n        sum += num;\n    }\n\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    double average = calculateAverage(numbers);\n    std::cout << \"The average is: \" << average << std::endl;}",
        "output": "#include <iostream>\n#include <vector>\n\ndouble calculateAverage(std::vector<int>& nums) {\n    double sum = 0;\n\n    for(int num : nums) {\n        sum += num;\n    }\n\n    return sum / nums.size();}\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    double average = calculateAverage(numbers);\n    std::cout << \"The average is: \" << average << std::endl;}"
    },
    {
        "instruction": "Write a C++ program that calculates the factorial of an integer using recursion.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << num << \"! = \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1)\n        return 1;\n    else\n        return n * factorial(n - 1);}\n\nint main() {\n    int num = 5;\n    std::cout << num << \"! = \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you handle exceptions in a Python program that reads a CSV file and prints the content?",
        "input": "csv_file_path = 'data.csv'",
        "response": "import csv\n\ndef print_csv_content(file_path):\n    try:\n        with open(file_path, newline='', encoding='utf-8') as csvfile:\n            reader = csv.reader(csvfile)\n            for row in reader:\n                print(', '.join(row))\n    except FileNotFoundError:\n        print(f'Error: File {file_path} not found.')\n    except Exception as e:\n        print(f'Error: An unexpected error occurred while processing the file. {e}')\n\ncsv_file_path = 'data.csv'\nprint_csv_content(csv_file_path)",
        "output": "import csv\n\ndef print_csv_content(file_path):\n    try:\n        with open(file_path, newline='', encoding='utf-8') as csvfile:\n            reader = csv.reader(csvfile)\n            for row in reader:\n                print(', '.join(row))\n    except FileNotFoundError:\n        print(f'Error: File {file_path} not found.')\n    except Exception as e:\n        print(f'Error: An unexpected error occurred while processing the file. {e}')\n\ncsv_file_path = 'data.csv'\nprint_csv_content(csv_file_path)"
    },
    {
        "instruction": "Develop a JavaScript function that filters an array of words based on their length.",
        "input": "['apple', 'banana', 'cherry'], 6",
        "response": "function filterByLength(words, desiredLength) {\n    return words.filter(word => word.length === desiredLength);}\n\nconst fruits = ['apple', 'banana', 'cherry'];\nconst filteredFruits = filterByLength(fruits, 6);\nconsole.log(filteredFruits);",
        "output": "function filterByLength(words, desiredLength) {\n    return words.filter(word => word.length === desiredLength);}\n\nconst fruits = ['apple', 'banana', 'cherry'];\nconst filteredFruits = filterByLength(fruits, 6);\nconsole.log(filteredFruits);"
    },
    {
        "instruction": "Implement a shell script that takes a file path as an argument and prints the number of lines.",
        "input": "test_file.txt",
        "response": "#!/bin/sh\n\nFILE_PATH=$1\n\nif [ -e $FILE_PATH ]; then\n    line_count=$(wc -l < $FILE_PATH)\n    echo \"Number of lines: $line_count\"\nelse\n    echo \"Error: File not found.\"\nfi",
        "output": "#!/bin/sh\n\nFILE_PATH=$1\n\nif [ -e $FILE_PATH ]; then\n    line_count=$(wc -l < $FILE_PATH)\n    echo \"Number of lines: $line_count\"\nelse\n    echo \"Error: File not found.\"\nfi"
    },
    {
        "instruction": "How would you create an asynchronous Python function using the 'asyncio' library to make HTTP requests with 'aiohttp'?",
        "input": "{\"url\": \"https://jsonplaceholder.typicode.com/posts/1\"}",
        "response": "import asyncio\nimport aiohttp\n\nasync def fetch_post(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            return await response.json()\n\nasync def main():\n    url = \"https://jsonplaceholder.typicode.com/posts/1\"\n    post = await fetch_post(url)\n    print(post)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())",
        "output": "import asyncio\nimport aiohttp\n\nasync def fetch_post(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            return await response.json()\n\nasync def main():\n    url = \"https://jsonplaceholder.typicode.com/posts/1\"\n    post = await fetch_post(url)\n    print(post)\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())"
    },
    {
        "instruction": "Generate a PHP script that finds the factorial of an integer using recursion.",
        "input": "5",
        "response": "<?php\nfunction factorial(int $n): int {\n    if ($n <= 1) {\n        return 1;\n    }\n    \n    return $n * factorial($n - 1);}\n\n$input = 5;\n$result = factorial($input);\necho \"Factorial of {$input} is {$result}\";\n",
        "output": "<?php\nfunction factorial(int $n): int {\n    if ($n <= 1) {\n        return 1;\n    }\n    \n    return $n * factorial($n - 1);}\n\n$input = 5;\n$result = factorial($input);\necho \"Factorial of {$input} is {$result}\";\n"
    },
    {
        "instruction": "Implement a bash script that calculates the Fibonacci sequence up to a given number.",
        "input": "10",
        "response": "#!/bin/bash\n\nfibonacci() {\n    if [ $1 -le 1 ]; then\n        echo $1\n    else\n        echo $(( $(fibonacci $(($1 - 1)) ) + $(fibonacci $(($1 - 2)) ) ))\n    fi}\n\nlimit=10\nfor i in $(seq 0 $limit); do\n    echo -n \"$(fibonacci $i) \"\ndone",
        "output": "#!/bin/bash\n\nfibonacci() {\n    if [ $1 -le 1 ]; then\n        echo $1\n    else\n        echo $(( $(fibonacci $(($1 - 1)) ) + $(fibonacci $(($1 - 2)) ) ))\n    fi}\n\nlimit=10\nfor i in $(seq 0 $limit); do\n    echo -n \"$(fibonacci $i) \"\ndone"
    },
    {
        "instruction": "Implement a C++ program to sort a given vector of integers in ascending order using the bubble sort algorithm.",
        "input": "{8, 5, 2, 9, 5, 6}",
        "response": "#include <iostream>\n#include <vector>\n\nvoid bubble_sort(std::vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    std::vector<int> arr = {8, 5, 2, 9, 5, 6};\n    bubble_sort(arr);\n\n    for (int num : arr) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nvoid bubble_sort(std::vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }}\n\nint main() {\n    std::vector<int> arr = {8, 5, 2, 9, 5, 6};\n    bubble_sort(arr);\n\n    for (int num : arr) {\n        std::cout << num << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a shell script that checks if a file exists and outputs an appropriate message.",
        "input": "example.txt",
        "response": "#!/bin/bash\nfilename=\"example.txt\"\n\nif [ -e \"$filename\" ]; then\n    echo \"File $filename exists.\"\nelse\n    echo \"File $filename does not exist.\"\nfi",
        "output": "#!/bin/bash\nfilename=\"example.txt\"\n\nif [ -e \"$filename\" ]; then\n    echo \"File $filename exists.\"\nelse\n    echo \"File $filename does not exist.\"\nfi"
    },
    {
        "instruction": "How do you create an API request in Python to fetch the data from the Open Movie Database (OMDb) API given an API key and movie title?",
        "input": "API_KEY: abcdef123, Movie title: The Matrix",
        "response": "import requests\n\nAPI_KEY = 'abcdef123'\nmovie_title = 'The Matrix'\n\nurl = f'http://www.omdbapi.com/?apikey={API_KEY}&t={movie_title}'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    movie_data = response.json()\n    print(movie_data)\nelse:\n    print('Error fetching data.')",
        "output": "import requests\n\nAPI_KEY = 'abcdef123'\nmovie_title = 'The Matrix'\n\nurl = f'http://www.omdbapi.com/?apikey={API_KEY}&t={movie_title}'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    movie_data = response.json()\n    print(movie_data)\nelse:\n    print('Error fetching data.')"
    },
    {
        "instruction": "Create a C# class representing a user with properties including name, age, and email, and a method to introduce themselves.",
        "input": "Name: John Doe, Age: 30, Email: john.doe@example.com",
        "response": "using System;\n\npublic class User\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Email { get; set; }\n\n    public User(string name, int age, string email)\n    {\n        Name = name;\n        Age = age;\n        Email = email;\n    }\n\n    public void IntroduceYourself()\n    {\n        Console.WriteLine($\"Hi, my name is {Name}, I'm {Age} years old, and my email address is {Email}.\");\n    }}\n\nclass Program\n{\n    static void Main()\n    {\n        User user = new User(\"John Doe\", 30, \"john.doe@example.com\");\n        user.IntroduceYourself();\n    }}",
        "output": "using System;\n\npublic class User\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Email { get; set; }\n\n    public User(string name, int age, string email)\n    {\n        Name = name;\n        Age = age;\n        Email = email;\n    }\n\n    public void IntroduceYourself()\n    {\n        Console.WriteLine($\"Hi, my name is {Name}, I'm {Age} years old, and my email address is {Email}.\");\n    }}\n\nclass Program\n{\n    static void Main()\n    {\n        User user = new User(\"John Doe\", 30, \"john.doe@example.com\");\n        user.IntroduceYourself();\n    }}"
    },
    {
        "instruction": "Show me how to write a Python program that creates a dictionary which maps numbers (e.g., 1, 2, 3) to their corresponding English words (e.g., 'One', 'Two', 'Three') up to the given number limit.",
        "input": "3",
        "response": "def create_number_word_mapping(limit):\n    number_word_mapping = {}\n    words = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    for i in range(1, limit + 1):\n        number_word_mapping[i] = words[i - 1]\n    return number_word_mapping\n\nresult = create_number_word_mapping(3)\nfor key, value in result.items():\n    print(key, value)",
        "output": "def create_number_word_mapping(limit):\n    number_word_mapping = {}\n    words = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    for i in range(1, limit + 1):\n        number_word_mapping[i] = words[i - 1]\n    return number_word_mapping\n\nresult = create_number_word_mapping(3)\nfor key, value in result.items():\n    print(key, value)"
    },
    {
        "instruction": "Write a Shell script that accepts a directory as an argument and displays the total number of files and directories inside the given directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndirectory=$1\ntotal_files=$(find \"$directory\" -type f | wc -l)\ntotal_directories=$(find \"$directory\" -type d | wc -l)\n\necho \"Total files in $directory: $total_files\"\necho \"Total directories in $directory: $total_directories\"",
        "output": "#!/bin/bash\n\ndirectory=$1\ntotal_files=$(find \"$directory\" -type f | wc -l)\ntotal_directories=$(find \"$directory\" -type d | wc -l)\n\necho \"Total files in $directory: $total_files\"\necho \"Total directories in $directory: $total_directories\""
    },
    {
        "instruction": "Implement a JavaScript class representing a bank account with methods for depositing, withdrawing and checking the balance.",
        "input": "Initial deposit: 500, Deposit: 200, Withdrawal: 150",
        "response": "class BankAccount {\n    constructor(initialDeposit) {\n        this.balance = initialDeposit;\n    }\n\n    deposit(amount) {\n        this.balance += amount;\n    }\n\n    withdraw(amount) {\n        if (amount <= this.balance) {\n            this.balance -= amount;\n            return true;\n        }\n        return false;\n    }\n\n    checkBalance() {\n        return this.balance;\n    }}\n\nconst account = new BankAccount(500);\naccount.deposit(200);\naccount.withdraw(150);\nconsole.log('Current balance:', account.checkBalance());",
        "output": "class BankAccount {\n    constructor(initialDeposit) {\n        this.balance = initialDeposit;\n    }\n\n    deposit(amount) {\n        this.balance += amount;\n    }\n\n    withdraw(amount) {\n        if (amount <= this.balance) {\n            this.balance -= amount;\n            return true;\n        }\n        return false;\n    }\n\n    checkBalance() {\n        return this.balance;\n    }}\n\nconst account = new BankAccount(500);\naccount.deposit(200);\naccount.withdraw(150);\nconsole.log('Current balance:', account.checkBalance());"
    },
    {
        "instruction": "Write a C++ program to find the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if(n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if(n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a function in Python that reads the contents of a given file and prints them?",
        "input": "file.txt",
        "response": "def read_and_print_file(filename):\n    with open(filename, 'r') as file:\n        contents = file.read()\n    print(contents)\n\nread_and_print_file('file.txt')",
        "output": "def read_and_print_file(filename):\n    with open(filename, 'r') as file:\n        contents = file.read()\n    print(contents)\n\nread_and_print_file('file.txt')"
    },
    {
        "instruction": "Implement a JavaScript function that accepts a string as input and returns the number of vowels in it.",
        "input": "Hello World",
        "response": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n\n    for (const char of str.toLowerCase()) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n\n    return count;}\n\nconst input = 'Hello World';\nconsole.log('Number of vowels in ' + input + ':', countVowels(input));",
        "output": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n\n    for (const char of str.toLowerCase()) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n\n    return count;}\n\nconst input = 'Hello World';\nconsole.log('Number of vowels in ' + input + ':', countVowels(input));"
    },
    {
        "instruction": "Create a PHP function that takes a string and returns an associative array containing the frequency of each character.",
        "input": "Programming",
        "response": "<?php\nfunction characterFrequency($str) {\n    $char_freq = [];\n\n    for ($i = 0; $i < strlen($str); $i++) {\n        $char = $str[$i];\n\n        if (array_key_exists($char, $char_freq)) {\n            $char_freq[$char]++;\n        } else {\n            $char_freq[$char] = 1;\n        }\n    }\n\n    return $char_freq;}\n\n$str = 'Programming';\n$result = characterFrequency($str);\nprint_r($result);\n?>",
        "output": "<?php\nfunction characterFrequency($str) {\n    $char_freq = [];\n\n    for ($i = 0; $i < strlen($str); $i++) {\n        $char = $str[$i];\n\n        if (array_key_exists($char, $char_freq)) {\n            $char_freq[$char]++;\n        } else {\n            $char_freq[$char] = 1;\n        }\n    }\n\n    return $char_freq;}\n\n$str = 'Programming';\n$result = characterFrequency($str);\nprint_r($result);\n?>"
    },
    {
        "instruction": "Write a Shell script to list all directories and files in the current working directory with readable, writable, and executable permissions.",
        "input": "",
        "response": "#!/bin/sh\n\necho \"Directories:\"\nfind . -type d -maxdepth 1 -perm -u+rwx\n\necho \"\nFiles:\"\nfind . -type f -maxdepth 1 -perm -u+rwx",
        "output": "#!/bin/sh\n\necho \"Directories:\"\nfind . -type d -maxdepth 1 -perm -u+rwx\n\necho \"\nFiles:\"\nfind . -type f -maxdepth 1 -perm -u+rwx"
    },
    {
        "instruction": "How would you implement a binary search algorithm in Python to search for a target value in a sorted array?",
        "input": "[1, 3, 5, 7, 9], 7",
        "response": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nnums = [1, 3, 5, 7, 9]\ntarget = 7\nresult = binary_search(nums, target)\nprint('Index:', result)",
        "output": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nnums = [1, 3, 5, 7, 9]\ntarget = 7\nresult = binary_search(nums, target)\nprint('Index:', result)"
    },
    {
        "instruction": "Design a C# class for a basic bank account that allows deposits and withdrawals.",
        "input": "Account owner: John Doe\nInitial balance: 1000\nDeposit: 500\nWithdraw: 200",
        "response": "public class BankAccount {\n    public string Owner { get; set; }\n    public decimal Balance { get; private set; }\n\n    public BankAccount(string owner, decimal initialBalance) {\n        Owner = owner;\n        Balance = initialBalance;\n    }\n\n    public void Deposit(decimal amount) {\n        Balance += amount;\n    }\n\n    public void Withdraw(decimal amount) {\n        if (amount <= Balance) {\n            Balance -= amount;\n        } else {\n            Console.WriteLine(\"Insufficient funds.\");\n        }\n    }}\n\nclass Program {\n    static void Main(string[] args) {\n        BankAccount account = new BankAccount(\"John Doe\", 1000);\n        account.Deposit(500);\n        account.Withdraw(200);\n        Console.WriteLine(\"Remaining balance: \" + account.Balance);\n    }}",
        "output": "public class BankAccount {\n    public string Owner { get; set; }\n    public decimal Balance { get; private set; }\n\n    public BankAccount(string owner, decimal initialBalance) {\n        Owner = owner;\n        Balance = initialBalance;\n    }\n\n    public void Deposit(decimal amount) {\n        Balance += amount;\n    }\n\n    public void Withdraw(decimal amount) {\n        if (amount <= Balance) {\n            Balance -= amount;\n        } else {\n            Console.WriteLine(\"Insufficient funds.\");\n        }\n    }}\n\nclass Program {\n    static void Main(string[] args) {\n        BankAccount account = new BankAccount(\"John Doe\", 1000);\n        account.Deposit(500);\n        account.Withdraw(200);\n        Console.WriteLine(\"Remaining balance: \" + account.Balance);\n    }}"
    },
    {
        "instruction": "How can a PHP script be used to read data from a CSV file?",
        "input": "data.csv",
        "response": "<?php\n\nfunction readCSVFile($filename) {\n    $data = [];\n\n    if (($handle = fopen($filename, \"r\")) !== FALSE) {\n        while (($row = fgetcsv($handle, 1000, \",\")) !== FALSE) {\n            $data[] = $row;\n        }\n        fclose($handle);\n    }\n\n    return $data;}\n\n$csvData = readCSVFile('data.csv');\nprint_r($csvData);\n?>",
        "output": "<?php\n\nfunction readCSVFile($filename) {\n    $data = [];\n\n    if (($handle = fopen($filename, \"r\")) !== FALSE) {\n        while (($row = fgetcsv($handle, 1000, \",\")) !== FALSE) {\n            $data[] = $row;\n        }\n        fclose($handle);\n    }\n\n    return $data;}\n\n$csvData = readCSVFile('data.csv');\nprint_r($csvData);\n?>"
    },
    {
        "instruction": "Demonstrate creating a Python script that fetches and parses a JSON object from a given URL.",
        "input": "https://api.example.com/data",
        "response": "import requests\nimport json\n\ndef fetch_and_parse_json(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = json.loads(response.text)\n        return data\n    else:\n        raise Exception(f'Error fetching JSON data from {url}')\n\nurl = 'https://api.example.com/data'\nparsed_data = fetch_and_parse_json(url)\nprint(parsed_data)",
        "output": "import requests\nimport json\n\ndef fetch_and_parse_json(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = json.loads(response.text)\n        return data\n    else:\n        raise Exception(f'Error fetching JSON data from {url}')\n\nurl = 'https://api.example.com/data'\nparsed_data = fetch_and_parse_json(url)\nprint(parsed_data)"
    },
    {
        "instruction": "Provide a Shell script that counts the number of files and directories in a given directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndir_path=\"/home/user/documents\"\nfile_count=$(find \"$dir_path\" -type f -print | wc -l)\ndir_count=$(find \"$dir_path\" -type d -print | wc -l)\n\necho \"Files: $file_count\"\necho \"Directories: $dir_count\"",
        "output": "#!/bin/bash\n\ndir_path=\"/home/user/documents\"\nfile_count=$(find \"$dir_path\" -type f -print | wc -l)\ndir_count=$(find \"$dir_path\" -type d -print | wc -l)\n\necho \"Files: $file_count\"\necho \"Directories: $dir_count\""
    },
    {
        "instruction": "Design a Python function that calculates the factorial of a given number using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Construct a JavaScript function that sorts a list of strings in alphabetical order, ignoring case sensitivity.",
        "input": "[\"apple\", \"Banana\", \"orange\", \"Strawberry\"]",
        "response": "function caseInsensitiveSort(arr) {\n    return arr.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));}\n\nconst sortedArray = caseInsensitiveSort([\"apple\", \"Banana\", \"orange\", \"Strawberry\"]);\nconsole.log(sortedArray);",
        "output": "function caseInsensitiveSort(arr) {\n    return arr.sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));}\n\nconst sortedArray = caseInsensitiveSort([\"apple\", \"Banana\", \"orange\", \"Strawberry\"]);\nconsole.log(sortedArray);"
    },
    {
        "instruction": "How would you implement a C++ program to reverse the words in a given sentence, while preserving the order of words?",
        "input": "\"Programming with GPT models is exciting!\"",
        "response": "#include <iostream>\n#include <sstream>\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::string sentence = \"Programming with GPT models is exciting!\";\n    std::istringstream iss(sentence);\n    std::vector<std::string> words((std::istream_iterator<std::string>(iss)),\n                                     std::istream_iterator<std::string>());\n\n    for (auto &word : words) {\n        std::reverse(word.begin(), word.end());\n    }\n\n    bool firstWord = true;\n    for (const auto &word : words) {\n        if (!firstWord) {\n            std::cout << \" \";\n        }\n        std::cout << word;\n        firstWord = false;\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <sstream>\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::string sentence = \"Programming with GPT models is exciting!\";\n    std::istringstream iss(sentence);\n    std::vector<std::string> words((std::istream_iterator<std::string>(iss)),\n                                     std::istream_iterator<std::string>());\n\n    for (auto &word : words) {\n        std::reverse(word.begin(), word.end());\n    }\n\n    bool firstWord = true;\n    for (const auto &word : words) {\n        if (!firstWord) {\n            std::cout << \" \";\n        }\n        std::cout << word;\n        firstWord = false;\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Write a shell script to monitor the disk usage of a given directory and send an email if it exceeds a certain percentage.",
        "input": "/your/directory/path, 80, youremail@example.com",
        "response": "#!/bin/bash\nDIRECTORY='/your/directory/path'\nTHRESHOLD=80\nEMAIL='youremail@example.com'\n\nUSAGE=$(df $DIRECTORY | tail -1 | awk '{print $5}' | sed 's/%//')\nif [ $USAGE -gt $THRESHOLD ]; then\n    echo \"Warning: Disk usage of $DIRECTORY is at $USAGE%\" | mail -s \"Disk Usage Alert!\" $EMAIL\nfi",
        "output": "#!/bin/bash\nDIRECTORY='/your/directory/path'\nTHRESHOLD=80\nEMAIL='youremail@example.com'\n\nUSAGE=$(df $DIRECTORY | tail -1 | awk '{print $5}' | sed 's/%//')\nif [ $USAGE -gt $THRESHOLD ]; then\n    echo \"Warning: Disk usage of $DIRECTORY is at $USAGE%\" | mail -s \"Disk Usage Alert!\" $EMAIL\nfi"
    },
    {
        "instruction": "Write a C++ program that reads a string of characters from the user and outputs the number of vowels present in it.",
        "input": "programming",
        "response": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint count_vowels(const string& input) {\n    int count = 0;\n    for (char ch : input) {\n        ch = tolower(ch);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    string input;\n    cout << \"Enter a string: \";\n    cin >> input;\n\n    cout << \"Number of vowels: \" << count_vowels(input) << endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint count_vowels(const string& input) {\n    int count = 0;\n    for (char ch : input) {\n        ch = tolower(ch);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            count++;\n        }\n    }\n    return count;}\n\nint main() {\n    string input;\n    cout << \"Enter a string: \";\n    cin >> input;\n\n    cout << \"Number of vowels: \" << count_vowels(input) << endl;\n\n    return 0;}"
    },
    {
        "instruction": "Develop a PHP script that checks whether a given input is a valid email address using the FILTER_VALIDATE_EMAIL filter.",
        "input": "example@email.com",
        "response": "<?php\n\nfunction validate_email($email) {\n    return (bool) filter_var($email, FILTER_VALIDATE_EMAIL);}\n\n$email = \"example@email.com\";\nif (validate_email($email)) {\n    echo \"Valid email address.\";} else {\n    echo \"Invalid email address.\";}\n\n?>",
        "output": "<?php\n\nfunction validate_email($email) {\n    return (bool) filter_var($email, FILTER_VALIDATE_EMAIL);}\n\n$email = \"example@email.com\";\nif (validate_email($email)) {\n    echo \"Valid email address.\";} else {\n    echo \"Invalid email address.\";}\n\n?>"
    },
    {
        "instruction": "Can you design a Swift function that accepts a string and returns a new string where each word is reversed?",
        "input": "Hello World",
        "response": "func reverseWords(input: String) -> String {\n    let words = input.split(separator: \" \")\n    let reversedWords = words.map { String($0.reversed()) }\n    return reversedWords.joined(separator: \" \")}\n\nlet input = \"Hello World\"\nlet output = reverseWords(input: input)\nprint(output)",
        "output": "func reverseWords(input: String) -> String {\n    let words = input.split(separator: \" \")\n    let reversedWords = words.map { String($0.reversed()) }\n    return reversedWords.joined(separator: \" \")}\n\nlet input = \"Hello World\"\nlet output = reverseWords(input: input)\nprint(output)"
    },
    {
        "instruction": "Develop a shell script that takes a list of file names as arguments and counts the total number of lines across all files.",
        "input": "file1.txt file2.txt",
        "response": "#!/bin/bash\n\ntotal_lines=0\n\nfor file in \"$@\"\ndo\n    lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + lines))\ndone\n\necho \"Total number of lines: $total_lines\"",
        "output": "#!/bin/bash\n\ntotal_lines=0\n\nfor file in \"$@\"\ndo\n    lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + lines))\ndone\n\necho \"Total number of lines: $total_lines\""
    },
    {
        "instruction": "Write a SQL query to find the total sales amount for each customer, assuming a table named 'Orders' with columns 'CustomerID', 'OrderDate', and 'TotalAmount'.",
        "input": "Orders data:\nCustomerID | OrderDate  | TotalAmount\n1          | 2021-10-01 | 100\n2          | 2021-10-02 | 150\n1          | 2021-10-03 | 50",
        "response": "SELECT CustomerID, SUM(TotalAmount) as TotalSales\nFROM Orders\nGROUP BY CustomerID;",
        "output": "SELECT CustomerID, SUM(TotalAmount) as TotalSales\nFROM Orders\nGROUP BY CustomerID;"
    },
    {
        "instruction": "In JavaScript, how can you reverse the order of words in a given sentence?",
        "input": "Input sentence: 'GPT-3 is a powerful AI model'",
        "response": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');}\n\nconst input = 'GPT-3 is a powerful AI model';\nconsole.log(reverseWords(input));",
        "output": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');}\n\nconst input = 'GPT-3 is a powerful AI model';\nconsole.log(reverseWords(input));"
    },
    {
        "instruction": "Using Python, demonstrate how to read contents from a text file and count the occurrences of a specific word.",
        "input": "Filename: 'example.txt'\nContent: 'Machine learning is a type of artificial intelligence that allows software applications to learn from the data and become more accurate in predicting outcomes without human intervention.'\nSearch word: 'learn'",
        "response": "with open('example.txt', 'r') as file:\n    content = file.read()\n    words = content.split()\n\n    count = 0\n    search_word = 'learn'\n\n    for word in words:\n        if word.lower() == search_word.lower():\n            count += 1\n\n    print(f'Occurrences of the word \"{search_word}\":', count)",
        "output": "with open('example.txt', 'r') as file:\n    content = file.read()\n    words = content.split()\n\n    count = 0\n    search_word = 'learn'\n\n    for word in words:\n        if word.lower() == search_word.lower():\n            count += 1\n\n    print(f'Occurrences of the word \"{search_word}\":', count)"
    },
    {
        "instruction": "Implement a Python function to parse a CSV string and print the values as a formatted table.",
        "input": "\"Name, Age, Profession\\nAlice, 30, Engineer\\nBob, 25, Designer\\nCharlie, 22, Student\"",
        "response": "import csv\nfrom io import StringIO\n\ndef parse_csv_and_print_table(csv_string):\n    csv_file = StringIO(csv_string)\n    reader = csv.reader(csv_file)\n\n    for row in reader:\n        print('{:<15} {:<5} {:<15}'.format(*row))\n\ncsv_string = \"\"\"Name, Age, Profession\nAlice, 30, Engineer\nBob, 25, Designer\nCharlie, 22, Student\"\"\"\nparse_csv_and_print_table(csv_string)",
        "output": "import csv\nfrom io import StringIO\n\ndef parse_csv_and_print_table(csv_string):\n    csv_file = StringIO(csv_string)\n    reader = csv.reader(csv_file)\n\n    for row in reader:\n        print('{:<15} {:<5} {:<15}'.format(*row))\n\ncsv_string = \"\"\"Name, Age, Profession\nAlice, 30, Engineer\nBob, 25, Designer\nCharlie, 22, Student\"\"\"\nparse_csv_and_print_table(csv_string)"
    },
    {
        "instruction": "Construct a JavaScript function that sorts an array of objects by a given property in ascending order.",
        "input": "[{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}], \"age\"",
        "response": "function sortObjectsByProperty(arr, prop) {\n    return arr.sort((a, b) => (a[prop] > b[prop]) ? 1 : ((a[prop] < b[prop]) ? -1 : 0));}\n\nconst objects = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}];\nconst sortedObjects = sortObjectsByProperty(objects, \"age\");\nconsole.log(sortedObjects);",
        "output": "function sortObjectsByProperty(arr, prop) {\n    return arr.sort((a, b) => (a[prop] > b[prop]) ? 1 : ((a[prop] < b[prop]) ? -1 : 0));}\n\nconst objects = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 22}];\nconst sortedObjects = sortObjectsByProperty(objects, \"age\");\nconsole.log(sortedObjects);"
    },
    {
        "instruction": "Write a C++ program that asks the user for their name and greets them with a personalized message.",
        "input": "",
        "response": "#include<iostream>\n#include<string>\n\nint main() {\n    std::string name;\n    std::cout << \"Please enter your name: \";\n    std::getline(std::cin, name);\n    std::cout << \"Hello, \" << name << \"!\" << std::endl;\n    return 0;}",
        "output": "#include<iostream>\n#include<string>\n\nint main() {\n    std::string name;\n    std::cout << \"Please enter your name: \";\n    std::getline(std::cin, name);\n    std::cout << \"Hello, \" << name << \"!\" << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you hash a user's password in PHP before storing it in a database?",
        "input": "\"myp@ssw0rd\"",
        "response": "<?php\n$password = \"myp@ssw0rd\";\n$hashed_password = password_hash($password, PASSWORD_DEFAULT);\necho $hashed_password;\n?>",
        "output": "<?php\n$password = \"myp@ssw0rd\";\n$hashed_password = password_hash($password, PASSWORD_DEFAULT);\necho $hashed_password;\n?>"
    },
    {
        "instruction": "Construct a Python function that reads a CSV file and returns a list of dictionaries, where each dictionary represents a row in the CSV file.",
        "input": "example.csv (Sample contents: name,age,city\nAlice,30,New York\nBob,25,Los Angeles)",
        "response": "import csv\n\ndef read_csv(filename):\n    with open(filename, 'r') as f:\n        reader = csv.DictReader(f)\n        data = [row for row in reader]\n    return data\n\ncsv_data = read_csv('example.csv')\nprint(csv_data)",
        "output": "import csv\n\ndef read_csv(filename):\n    with open(filename, 'r') as f:\n        reader = csv.DictReader(f)\n        data = [row for row in reader]\n    return data\n\ncsv_data = read_csv('example.csv')\nprint(csv_data)"
    },
    {
        "instruction": "How would you implement a JavaScript function that retrieves the current weather data for a given location based on its latitude and longitude using the OpenWeatherMap API?",
        "input": "API_KEY: 'your_api_key', latitude: 40.7128, longitude: -74.0060",
        "response": "const fetch = require('node-fetch');\n\nconst API_KEY = 'your_api_key';\n\nasync function getCurrentWeather(lat, lon) {\n    const endpoint = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    const response = await fetch(endpoint);\n    const data = await response.json();\n    return data;}\n\ngetCurrentWeather(40.7128, -74.0060).then(weatherData => {\n    console.log(weatherData);});",
        "output": "const fetch = require('node-fetch');\n\nconst API_KEY = 'your_api_key';\n\nasync function getCurrentWeather(lat, lon) {\n    const endpoint = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n    const response = await fetch(endpoint);\n    const data = await response.json();\n    return data;}\n\ngetCurrentWeather(40.7128, -74.0060).then(weatherData => {\n    console.log(weatherData);});"
    },
    {
        "instruction": "Create a Java code snippet that reads data from a given URL and saves the content to a file on your local machine.",
        "input": "URL: 'https://example.com', localFile: 'content.txt'",
        "response": "import java.io.*;\nimport java.net.URL;\n\npublic class URLToFile {\n    public static void main(String[] args) throws IOException {\n        String url = \"https://example.com\";\n        String localFile = \"content.txt\";\n\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n             FileWriter out = new FileWriter(localFile)) {\n            String line;\n            while ((line = in.readLine()) != null) {\n                out.write(line + \"\\n\");\n            }\n        }\n    }}",
        "output": "import java.io.*;\nimport java.net.URL;\n\npublic class URLToFile {\n    public static void main(String[] args) throws IOException {\n        String url = \"https://example.com\";\n        String localFile = \"content.txt\";\n\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n             FileWriter out = new FileWriter(localFile)) {\n            String line;\n            while ((line = in.readLine()) != null) {\n                out.write(line + \"\\n\");\n            }\n        }\n    }}"
    },
    {
        "instruction": "Write a C++ program that generates prime numbers from the range 2 to the specified integer, then outputs the result.",
        "input": "max_value: 20",
        "response": "#include<iostream>\n\nbool is_prime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int max_value = 20;\n\n    for (int i = 2; i <= max_value; i++) {\n        if (is_prime(i)) {\n            std::cout << i << \" \";\n        }\n    }\n    return 0;}",
        "output": "#include<iostream>\n\nbool is_prime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;}\n\nint main() {\n    int max_value = 20;\n\n    for (int i = 2; i <= max_value; i++) {\n        if (is_prime(i)) {\n            std::cout << i << \" \";\n        }\n    }\n    return 0;}"
    },
    {
        "instruction": "Design a C++ program that reads a text file and counts the frequency of each word, displaying the results as output.",
        "input": "Contents of the text file:\n\"This program reads a text file and counts the frequency of each word.\"\n",
        "response": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <map>\n#include <string>\n\nint main() {\n    std::ifstream file(\"input.txt\");\n    std::map<std::string, int> wordCount;\n    std::string word;\n\n    while (file >> word) {\n        wordCount[word]++;\n    }\n\n    for (const auto &pair : wordCount) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <map>\n#include <string>\n\nint main() {\n    std::ifstream file(\"input.txt\");\n    std::map<std::string, int> wordCount;\n    std::string word;\n\n    while (file >> word) {\n        wordCount[word]++;\n    }\n\n    for (const auto &pair : wordCount) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;}"
    },
    {
        "instruction": "What is the Python code for a function that reverses a string without using any built-in functions or methods?",
        "input": "\"Hello, World!\"",
        "response": "def reverse_string(s):\n    reversed_s = ''\n    for char in s:\n        reversed_s = char + reversed_s\n    return reversed_s\n\nresult = reverse_string(\"Hello, World!\")\nprint(result)",
        "output": "def reverse_string(s):\n    reversed_s = ''\n    for char in s:\n        reversed_s = char + reversed_s\n    return reversed_s\n\nresult = reverse_string(\"Hello, World!\")\nprint(result)"
    },
    {
        "instruction": "Write a Bash script that takes a string input and converts it to lowercase.",
        "input": "\"CONVERTME\"",
        "response": "#!/bin/bash\n\ninput_string=\"CONVERTME\"\nlowercase_string=\"${input_string,,}\"\necho \"$lowercase_string\"",
        "output": "#!/bin/bash\n\ninput_string=\"CONVERTME\"\nlowercase_string=\"${input_string,,}\"\necho \"$lowercase_string\""
    },
    {
        "instruction": "In Java, write a method that takes a sentence as input and returns the number of vowels present in the sentence (case-insensitive).",
        "input": "\"This is a sample sentence.\"",
        "response": "public class VowelCounter {\n    public static int countVowels(String sentence) {\n        int vowelCount = 0;\n        for (int i = 0; i < sentence.length(); i++) {\n            char c = Character.toLowerCase(sentence.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowelCount++;\n            }\n        }\n        return vowelCount;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"This is a sample sentence.\";\n        int count = countVowels(sentence);\n        System.out.println(count);\n    }}",
        "output": "public class VowelCounter {\n    public static int countVowels(String sentence) {\n        int vowelCount = 0;\n        for (int i = 0; i < sentence.length(); i++) {\n            char c = Character.toLowerCase(sentence.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowelCount++;\n            }\n        }\n        return vowelCount;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"This is a sample sentence.\";\n        int count = countVowels(sentence);\n        System.out.println(count);\n    }}"
    },
    {
        "instruction": "Create a Python function to calculate the factorial of a given number, n, using recursion.",
        "input": "",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "What would be the equivalent of the following JavaScript code snippet in Java?",
        "input": "function add(x, y) {\n  return x + y;\n}",
        "response": "public int add(int x, int y) {\n  return x + y;\n}",
        "output": "public int add(int x, int y) {\n  return x + y;\n}"
    },
    {
        "instruction": "Provide a C++ implementation for calculating the average of an array of integers.",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\ndouble average(int arr[], int size) {\n  int sum = 0;\n  for (int i = 0; i < size; i++) {\n    sum += arr[i];\n  }\n  return static_cast<double>(sum) / size;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\ndouble average(int arr[], int size) {\n  int sum = 0;\n  for (int i = 0; i < size; i++) {\n    sum += arr[i];\n  }\n  return static_cast<double>(sum) / size;\n}"
    },
    {
        "instruction": "Detect the issue in the following Python code attempting to concatenate first and last names from a dictionary:",
        "input": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\"\n}\nfull_name = first_name + \" \" + last_name",
        "response": "There is a reference error in the code. Correct code:\n\nnames = {\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\"\n}\nfull_name = names['first_name'] + \" \" + names['last_name']",
        "output": "There is a reference error in the code. Correct code:\n\nnames = {\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\"\n}\nfull_name = names['first_name'] + \" \" + names['last_name']"
    },
    {
        "instruction": "Create a JavaScript function to calculate the factorial of a given number.",
        "input": "",
        "response": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "What would be the output of this C++ code?",
        "input": "#include<iostream>\nusing namespace std;\n\nint main() {\n  int a[] = {2, 3, 4, 5};\n  int *p = &a[1];\n  cout << *(p + 2) << endl;\n  return 0;\n}",
        "response": "The output is 5. The pointer 'p' is pointing to the second element of the array 'a', so 'p + 2' is pointing to the fourth element, and using the dereference operator '*', we get the value at that position, which is 5.",
        "output": "The output is 5. The pointer 'p' is pointing to the second element of the array 'a', so 'p + 2' is pointing to the fourth element, and using the dereference operator '*', we get the value at that position, which is 5."
    },
    {
        "instruction": "Rewrite the following Java code using a 'for' loop instead of a while loop.",
        "input": "public class LoopDemo {\n  public static void main(String[] args) {\n    int i = 1;\n    while (i <= 5) {\n      System.out.println(i);\n      i++;\n    }\n  }\n}",
        "response": "public class LoopDemo {\n  public static void main(String[] args) {\n    for (int i = 1; i <= 5; i++) {\n      System.out.println(i);\n    }\n  }\n}",
        "output": "public class LoopDemo {\n  public static void main(String[] args) {\n    for (int i = 1; i <= 5; i++) {\n      System.out.println(i);\n    }\n  }\n}"
    },
    {
        "instruction": "Debug the given Python code and provide a corrected version.",
        "input": "def remove_duplicates(lst):\n  result = []\n  for item in lst:\n    if item not in results:\n      result.append(item)\n  return results\n\nprint(remove_duplicates([1, 2, 2, 3, 4, 4]))",
        "response": "def remove_duplicates(lst):\n  result = []\n  for item in lst:\n    if item not in result:\n      result.append(item)\n  return result\n\nprint(remove_duplicates([1, 2, 2, 3, 4, 4]))",
        "output": "def remove_duplicates(lst):\n  result = []\n  for item in lst:\n    if item not in result:\n      result.append(item)\n  return result\n\nprint(remove_duplicates([1, 2, 2, 3, 4, 4]))"
    },
    {
        "instruction": "Create a Java method that calculates the factorial of a given positive integer using recursion.",
        "input": "4",
        "response": "public static int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint result = factorial(4);\nSystem.out.println(result);",
        "output": "public static int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint result = factorial(4);\nSystem.out.println(result);"
    },
    {
        "instruction": "Can you provide JavaScript code to display an alert box containing the message 'Welcome to the site!' on a web page?",
        "input": "",
        "response": "window.alert('Welcome to the site!');",
        "output": "window.alert('Welcome to the site!');"
    },
    {
        "instruction": "Implement a C++ function to check whether a string is a valid IPv4 address representation or not. The IPv4 address should take the form of four octets separated by periods, such as '192.168.1.1'.",
        "input": "192.168.1.1",
        "response": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nbool isValidIPv4(const std::string &addr) {\n    std::istringstream iss(addr);\n    std::string octet;\n    int count = 0;\n\n    while (std::getline(iss, octet, '.')) {\n        count++;\n        int value;\n        std::istringstream(octet) >> value;\n\n        if (octet.empty() || !iss.eof() || value > 255 || value < 0) {\n            return false;\n        }\n    }\n    return count == 4;\n}\n\nint main() {\n    std::string ip = \"192.168.1.1\";\n    std::cout << (isValidIPv4(ip) ? \"Valid\" : \"Invalid\") << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nbool isValidIPv4(const std::string &addr) {\n    std::istringstream iss(addr);\n    std::string octet;\n    int count = 0;\n\n    while (std::getline(iss, octet, '.')) {\n        count++;\n        int value;\n        std::istringstream(octet) >> value;\n\n        if (octet.empty() || !iss.eof() || value > 255 || value < 0) {\n            return false;\n        }\n    }\n    return count == 4;\n}\n\nint main() {\n    std::string ip = \"192.168.1.1\";\n    std::cout << (isValidIPv4(ip) ? \"Valid\" : \"Invalid\") << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Using Python, create a function that accepts an array of integers and returns a list of the unique elements along with their count as a dictionary.",
        "input": "[1, 2, 3, 1, 2, 4, 5]",
        "response": "def unique_count(arr):\n    return {i: arr.count(i) for i in set(arr)}\n\narr = [1, 2, 3, 1, 2, 4, 5]\nresult = unique_count(arr)\nprint(result)",
        "output": "def unique_count(arr):\n    return {i: arr.count(i) for i in set(arr)}\n\narr = [1, 2, 3, 1, 2, 4, 5]\nresult = unique_count(arr)\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns a new array containing only the even numbers.",
        "input": "",
        "response": "function getEvenNumbers(numbers) {\n  return numbers.filter(num => num % 2 === 0);\n}",
        "output": "function getEvenNumbers(numbers) {\n  return numbers.filter(num => num % 2 === 0);\n}"
    },
    {
        "instruction": "Given an example code snippet, identify and correct any syntax errors in the C++ code.",
        "input": "#include <iostream>\n\nint main() {\n  std::cout << 'Hello, World!' << std::endl;\n  return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n  std::cout << \"Hello, World!\" << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n  std::cout << \"Hello, World!\" << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "How would you write a program in Python to check if a given number is prime or not?",
        "input": "",
        "response": "def is_prime(n):\n  if n <= 1:\n    return False\n  if n <= 3:\n    return True\n  if n % 2 == 0 or n % 3 == 0:\n    return False\n  i = 5\n  while i * i <= n:\n    if n % i == 0 or n % (i + 2) == 0:\n      return False\n    i += 6\n  return True",
        "output": "def is_prime(n):\n  if n <= 1:\n    return False\n  if n <= 3:\n    return True\n  if n % 2 == 0 or n % 3 == 0:\n    return False\n  i = 5\n  while i * i <= n:\n    if n % i == 0 or n % (i + 2) == 0:\n      return False\n    i += 6\n  return True"
    },
    {
        "instruction": "Write a shell script that prints the current directory and its parent directory.",
        "input": "",
        "response": "#!/bin/sh\n\ncurr_dir=$(pwd)\nparent_dir=$(dirname \"$curr_dir\")\necho \"Current directory: $curr_dir\"\necho \"Parent directory: $parent_dir\"",
        "output": "#!/bin/sh\n\ncurr_dir=$(pwd)\nparent_dir=$(dirname \"$curr_dir\")\necho \"Current directory: $curr_dir\"\necho \"Parent directory: $parent_dir\""
    },
    {
        "instruction": "Create a Python function to calculate the factorial of a given number using recursion.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnum = 5\nresult = factorial(num)\nprint(f'The factorial of {num} is {result}')",
        "output": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nnum = 5\nresult = factorial(num)\nprint(f'The factorial of {num} is {result}')"
    },
    {
        "instruction": "In C++, write a program that reads user input of two integers and swaps their values using pointers.",
        "input": "7, 12",
        "response": "#include <iostream>\nusing namespace std;\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter first integer: \";\n    cin >> num1;\n    cout << \"Enter second integer: \";\n    cin >> num2;\n\n    swap(&num1, &num2);\n    cout << \"Swapped values: \" << num1 << \", \" << num2 << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int num1, num2;\n    cout << \"Enter first integer: \";\n    cin >> num1;\n    cout << \"Enter second integer: \";\n    cin >> num2;\n\n    swap(&num1, &num2);\n    cout << \"Swapped values: \" << num1 << \", \" << num2 << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Can you build a simple REST API call endpoint using JavaScript and the Express.js framework?",
        "input": "GET '/books'",
        "response": "const express = require('express');\nconst app = express();\n\napp.get('/books', (req, res) => {\n    res.json({\n        'title': 'Example Book',\n        'author': 'John Doe'\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": "const express = require('express');\nconst app = express();\n\napp.get('/books', (req, res) => {\n    res.json({\n        'title': 'Example Book',\n        'author': 'John Doe'\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server running on port 3000');\n});"
    },
    {
        "instruction": "Can you find and fix the syntax error in the following C# code to make it a working program to print 'Hello, World!'?",
        "input": "using System;namespace HelloWorldclass Programstatic void Main(string[] args)Console.WriteLine(\"Hello, World!\");",
        "response": "using System;\n\nnamespace HelloWorld {\n    class Program {\n        static void Main(string[] args) {\n            Console.WriteLine(\"Hello, World!\");\n        }\n    }\n}",
        "output": "using System;\n\nnamespace HelloWorld {\n    class Program {\n        static void Main(string[] args) {\n            Console.WriteLine(\"Hello, World!\");\n        }\n    }\n}"
    },
    {
        "instruction": "Create a Python program that reads a CSV file and outputs the data in JSON format.",
        "input": "Name, Age, Job\nAlice, 30, Engineer\nBob, 45, Doctor",
        "response": "import csv\nimport json\n\n\ncsv_file = 'input.csv'\njson_file = 'output.json'\n\n\ndata = []\n\nwith open(csv_file, 'r') as file:\n    csv_reader = csv.DictReader(file)\n    for row in csv_reader:\n        data.append(row)\n\nwith open(json_file, 'w') as file:\n    json.dump(data, file, indent=4)",
        "output": "import csv\nimport json\n\n\ncsv_file = 'input.csv'\njson_file = 'output.json'\n\n\ndata = []\n\nwith open(csv_file, 'r') as file:\n    csv_reader = csv.DictReader(file)\n    for row in csv_reader:\n        data.append(row)\n\nwith open(json_file, 'w') as file:\n    json.dump(data, file, indent=4)"
    },
    {
        "instruction": "Implement a Java class 'Person' with a constructor to initialize name and age. Also, include a 'greet' method that returns a greeting with person's name.",
        "input": "John, 25",
        "response": "public class Person {\n\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String greet() {\n        return \"Hello, \" + this.name + \"!\";\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person(\"John\", 25);\n        System.out.println(person.greet());\n    }\n}",
        "output": "public class Person {\n\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String greet() {\n        return \"Hello, \" + this.name + \"!\";\n    }\n\n    public static void main(String[] args) {\n        Person person = new Person(\"John\", 25);\n        System.out.println(person.greet());\n    }\n}"
    },
    {
        "instruction": "Given a list of integers in C++, calculate their average and display it.",
        "input": "2, 4, 6, 8, 10",
        "response": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nfloat average(vector<int> nums) {\n    float sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return sum / nums.size();\n}\n\nint main() {\n    vector<int> nums = {2, 4, 6, 8, 10};\n    float avg = average(nums);\n    cout << \"Average of the list: \" << avg << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nfloat average(vector<int> nums) {\n    float sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return sum / nums.size();\n}\n\nint main() {\n    vector<int> nums = {2, 4, 6, 8, 10};\n    float avg = average(nums);\n    cout << \"Average of the list: \" << avg << endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you write a shell script that prints out the contents of a directory and its subdirectories?",
        "input": "/home/user/test",
        "response": "#!/bin/bash\n\ndirectory='/home/user/test'\n\nfind \"$directory\" -type f -exec echo '{}' \\;",
        "output": "#!/bin/bash\n\ndirectory='/home/user/test'\n\nfind \"$directory\" -type f -exec echo '{}' \\;"
    },
    {
        "instruction": "Implement a recursive factorial function in C++",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How can I reverse a given string in Python?",
        "input": "\"OpenAI\"",
        "response": "def reverse_string(s):\n    return s[::-1]\n\noriginal_string = 'OpenAI'\nreversed_string = reverse_string(original_string)\nprint(reversed_string)",
        "output": "def reverse_string(s):\n    return s[::-1]\n\noriginal_string = 'OpenAI'\nreversed_string = reverse_string(original_string)\nprint(reversed_string)"
    },
    {
        "instruction": "Design a Java function that takes a list of integers and filters out even numbers.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FilterEvenNumbers {\n    public static List<Integer> filterEvens(List<Integer> numbers) {\n        return numbers.stream().filter(num -> num % 2 != 0).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n        List<Integer> filteredNumbers = filterEvens(numbers);\n        System.out.println(filteredNumbers);\n    }}",
        "output": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FilterEvenNumbers {\n    public static List<Integer> filterEvens(List<Integer> numbers) {\n        return numbers.stream().filter(num -> num % 2 != 0).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n        List<Integer> filteredNumbers = filterEvens(numbers);\n        System.out.println(filteredNumbers);\n    }}"
    },
    {
        "instruction": "Create a shell script that outputs the amount of memory (in MB) used by a specific process.",
        "input": "firefox",
        "response": "#!/bin/bash\n\nPROCESS_NAME=\"firefox\"\ntotal_memory=0\n\nfor pid in $(pgrep $PROCESS_NAME); do\n    memory=$(pmap -d $pid | tail -n 1 | awk '{print $4}')\n    memory=${memory%%K*}\n    total_memory=$((total_memory + memory / 1024))\ndone\n\necho \"Memory used by $PROCESS_NAME processes: $total_memory MB\"",
        "output": "#!/bin/bash\n\nPROCESS_NAME=\"firefox\"\ntotal_memory=0\n\nfor pid in $(pgrep $PROCESS_NAME); do\n    memory=$(pmap -d $pid | tail -n 1 | awk '{print $4}')\n    memory=${memory%%K*}\n    total_memory=$((total_memory + memory / 1024))\ndone\n\necho \"Memory used by $PROCESS_NAME processes: $total_memory MB\""
    },
    {
        "instruction": "Create a JavaScript function to find the factorial of a given number using recursion.",
        "input": "5",
        "response": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));",
        "output": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));"
    },
    {
        "instruction": "What would be the Haskell function to calculate the sum of elements in a list?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "sumList :: [Int] -> Int\nsumList [] = 0\nsumList (x:xs) = x + sumList xs",
        "output": "sumList :: [Int] -> Int\nsumList [] = 0\nsumList (x:xs) = x + sumList xs"
    },
    {
        "instruction": "In C++, write a program that reverses the order of words in a given sentence.",
        "input": "\"This is an example sentence.\"",
        "response": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n  std::string str = \"This is an example sentence.\";\n  std::istringstream iss(str);\n  std::vector<std::string> words;\n  std::string word;\n\n  while (iss >> word) {\n    words.push_back(word);\n  }\n\n  std::reverse(words.begin(), words.end());\n\n  for (size_t i = 0; i < words.size(); i++) {\n    std::cout << words[i] << (i < words.size() - 1 ? ' ' : '\\n');\n  }\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n  std::string str = \"This is an example sentence.\";\n  std::istringstream iss(str);\n  std::vector<std::string> words;\n  std::string word;\n\n  while (iss >> word) {\n    words.push_back(word);\n  }\n\n  std::reverse(words.begin(), words.end());\n\n  for (size_t i = 0; i < words.size(); i++) {\n    std::cout << words[i] << (i < words.size() - 1 ? ' ' : '\\n');\n  }\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a Ruby program to sort a list of numbers in ascending order using the bubble sort algorithm.",
        "input": "[5, 2, 9, 1, 5, 6]",
        "response": "def bubble_sort(arr)\n  n = arr.length\n\n  loop do\n    swapped = false\n    (n-1).times do |i|\n      if arr[i] > arr[i+1]\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n        swapped = true\n      end\n    end\n    break if not swapped\n  end\n  arr\nend\n\narr = [5, 2, 9, 1, 5, 6]\nbubble_sort(arr)\nputs arr.inspect",
        "output": "def bubble_sort(arr)\n  n = arr.length\n\n  loop do\n    swapped = false\n    (n-1).times do |i|\n      if arr[i] > arr[i+1]\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n        swapped = true\n      end\n    end\n    break if not swapped\n  end\n  arr\nend\n\narr = [5, 2, 9, 1, 5, 6]\nbubble_sort(arr)\nputs arr.inspect"
    },
    {
        "instruction": "Rewrite the following Python 2 code snippet to Python 3:",
        "input": "print 'Hello, world!'",
        "response": "print('Hello, world!')",
        "output": "print('Hello, world!')"
    },
    {
        "instruction": "What would be the correct implementation for an API key authorization using Python requests?",
        "input": "API_KEY = 'your_API_key_here'\nAPI_URL = 'https://api.example.com/data'",
        "response": "import requests\n\nAPI_KEY = 'your_API_key_here'\nAPI_URL = 'https://api.example.com/data'\n\nheaders = {'Authorization': f'Bearer {API_KEY}'}\nresponse = requests.get(API_URL, headers=headers)",
        "output": "import requests\n\nAPI_KEY = 'your_API_key_here'\nAPI_URL = 'https://api.example.com/data'\n\nheaders = {'Authorization': f'Bearer {API_KEY}'}\nresponse = requests.get(API_URL, headers=headers)"
    },
    {
        "instruction": "In Java, create a method that calculates the area of a rectangle given its width and height.",
        "input": "",
        "response": "public static double calculateRectangleArea(double width, double height) {\n    return width * height;\n}",
        "output": "public static double calculateRectangleArea(double width, double height) {\n    return width * height;\n}"
    },
    {
        "instruction": "Given the following buggy C++ code, identify and fix the syntax error.",
        "input": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\"\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\";\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\";\n    return 0;\n}"
    },
    {
        "instruction": "Provide a Java implementation of a binary search algorithm that takes an array of integers and a target number as input and returns the index in the array where the target number is present, or -1 if it is not found.",
        "input": "Implement the binary search algorithm in Java for searching an integer in a sorted array.",
        "response": "public int binarySearch(int[] arr, int target) {\n    int left = 0;\n    int right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}",
        "output": "public int binarySearch(int[] arr, int target) {\n    int left = 0;\n    int right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}"
    },
    {
        "instruction": "What should be added to the following JavaScript code snippet to properly handle the exception if JSON.parse() fails?",
        "input": "const jsonString = '{ \"name\": \"John\", \"age\": 30, }';\nlet obj;\nobj = JSON.parse(jsonString);",
        "response": "const jsonString = '{ \"name\": \"John\", \"age\": 30, }';\nlet obj;\ntry {\n    obj = JSON.parse(jsonString);\n} catch (error) {\n    console.error('Invalid JSON:', error);\n}",
        "output": "const jsonString = '{ \"name\": \"John\", \"age\": 30, }';\nlet obj;\ntry {\n    obj = JSON.parse(jsonString);\n} catch (error) {\n    console.error('Invalid JSON:', error);\n}"
    },
    {
        "instruction": "Write a function in Python to find the factorial of a non-negative integer using recursion.",
        "input": "Calculate the factorial of `n` using recursion.",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "Generate a shell script to display all the '*.txt' files present in the current directory and its subdirectories, utilizing `find` command.",
        "input": "Create a shell script to find and display all .txt files in the current directory and subdirectories.",
        "response": "#!/bin/bash\n\nfind . -type f -name '*.txt' -print",
        "output": "#!/bin/bash\n\nfind . -type f -name '*.txt' -print"
    },
    {
        "instruction": "Create a JavaScript function to reverse a given string.",
        "input": "Example string: 'openai'",
        "response": "function reverseString(str) {\n return str.split('').reverse().join('');\n}\n\nlet exampleString = 'openai';\nlet reversedString = reverseString(exampleString);\nconsole.log(reversedString);",
        "output": "function reverseString(str) {\n return str.split('').reverse().join('');\n}\n\nlet exampleString = 'openai';\nlet reversedString = reverseString(exampleString);\nconsole.log(reversedString);"
    },
    {
        "instruction": "How would you implement a recursive method in Java to compute the factorial of a given number?",
        "input": "Example number: 5",
        "response": "public class Factorial {\n\n public static void main(String[] args) {\n int n = 5;\n int result = factorial(n);\n System.out.println(\"Factorial of \" + n + \" = \" + result);\n }\n\n public static int factorial(int n) {\n if (n == 0 || n == 1) {\n return 1;\n } else {\n return n * factorial(n - 1);\n }\n }\n}",
        "output": "public class Factorial {\n\n public static void main(String[] args) {\n int n = 5;\n int result = factorial(n);\n System.out.println(\"Factorial of \" + n + \" = \" + result);\n }\n\n public static int factorial(int n) {\n if (n == 0 || n == 1) {\n return 1;\n } else {\n return n * factorial(n - 1);\n }\n }\n}"
    },
    {
        "instruction": "Design a Python function that calculates the distance between two points, given their coordinates in a 2D plane.",
        "input": "Point 1 coordinates: (3, 4)\nPoint 2 coordinates: (6, 8)",
        "response": "import math\n\ndef calculate_distance(point1, point2):\n x1, y1 = point1\n x2, y2 = point2\n distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n return distance\n\npoint1 = (3, 4)\npoint2 = (6, 8)\ndist = calculate_distance(point1, point2)\nprint('Distance between the points is', dist)",
        "output": "import math\n\ndef calculate_distance(point1, point2):\n x1, y1 = point1\n x2, y2 = point2\n distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n return distance\n\npoint1 = (3, 4)\npoint2 = (6, 8)\ndist = calculate_distance(point1, point2)\nprint('Distance between the points is', dist)"
    },
    {
        "instruction": "Explain the steps required to fix the following C# code snippet that results in a compilation error.",
        "input": "class Program {\n static void Main() {\n string greeting = \"Hello, World!;\n System.Console.WriteLine(greeting);\n }\n}",
        "response": "To fix this C# code snippet, you need to follow these steps:\n\n1. The double-quotes of the `greeting` string variable is not closed properly. Add a double-quote at the end of the string.\n2. As it is a single line change, the updated code snippet will look like this:\n\n```\nclass Program {\n static void Main() {\n string greeting = \"Hello, World!\";\n System.Console.WriteLine(greeting);\n }\n}\n```\n\nNow, the code snippet will compile and execute without any issues, printing 'Hello, World!' to the console output.",
        "output": "To fix this C# code snippet, you need to follow these steps:\n\n1. The double-quotes of the `greeting` string variable is not closed properly. Add a double-quote at the end of the string.\n2. As it is a single line change, the updated code snippet will look like this:\n\n```\nclass Program {\n static void Main() {\n string greeting = \"Hello, World!\";\n System.Console.WriteLine(greeting);\n }\n}\n```\n\nNow, the code snippet will compile and execute without any issues, printing 'Hello, World!' to the console output."
    },
    {
        "instruction": "Develop a Python function that takes in a list of text strings and returns a dictionary containing the length of each string as the values and the text strings as the keys.",
        "input": "['Hello', 'world', 'testing', 'function']",
        "response": "def string_length_dict(strings):\n    result = {}\n    for text in strings:\n        result[text] = len(text)\n    return result\n\ninput_data = ['Hello', 'world', 'testing', 'function']\noutput = string_length_dict(input_data)\nprint(output)",
        "output": "def string_length_dict(strings):\n    result = {}\n    for text in strings:\n        result[text] = len(text)\n    return result\n\ninput_data = ['Hello', 'world', 'testing', 'function']\noutput = string_length_dict(input_data)\nprint(output)"
    },
    {
        "instruction": "Provide a SQL query to display the top 10 highest salaries of employees from the 'employees' table with columns 'emp_id', 'first_name', 'last_name', and 'salary'.",
        "input": "",
        "response": "SELECT emp_id, first_name, last_name, salary\nFROM employees\nORDER BY salary DESC\nLIMIT 10;",
        "output": "SELECT emp_id, first_name, last_name, salary\nFROM employees\nORDER BY salary DESC\nLIMIT 10;"
    },
    {
        "instruction": "Create a function in JavaScript that takes in two arguments: a string of text and a character, and returns the count of that character in the given string.",
        "input": "'hello world', 'l'",
        "response": "function countCharOccurrence(text, character) {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === character) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst inputText = 'hello world';\nconst inputChar = 'l';\nconst result = countCharOccurrence(inputText, inputChar);\nconsole.log(result);",
        "output": "function countCharOccurrence(text, character) {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === character) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst inputText = 'hello world';\nconst inputChar = 'l';\nconst result = countCharOccurrence(inputText, inputChar);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program that accepts an integer from the user and calculates its factorial using a recursive function.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" = \" << factorial(num);\n    return 0;\n}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" = \" << factorial(num);\n    return 0;\n}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "How to create a Node.js script to read a text file and count the number of lines?",
        "input": "example.txt:\nThis is line 1.\nThis is line 2.\nThis is line 3.",
        "response": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    const numberOfLines = data.split('\\n').length;\n    console.log(`Number of lines: ${numberOfLines}`);});",
        "output": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    const numberOfLines = data.split('\\n').length;\n    console.log(`Number of lines: ${numberOfLines}`);});"
    },
    {
        "instruction": "Implement a function in Python to calculate the n-th Fibonacci number using dynamic programming.",
        "input": "n = 10",
        "response": "def fibonacci(n: int) -> int:\n    memo = {}\n\n    def fib_helper(m):\n        if m <= 1:\n            return m\n\n        if m not in memo:\n            memo[m] = fib_helper(m - 1) + fib_helper(m - 2)\n\n        return memo[m]\n\n    return fib_helper(n)\n\nn = 10\nprint(f'n-th Fibonacci number for n = {n}: {fibonacci(n)}')",
        "output": "def fibonacci(n: int) -> int:\n    memo = {}\n\n    def fib_helper(m):\n        if m <= 1:\n            return m\n\n        if m not in memo:\n            memo[m] = fib_helper(m - 1) + fib_helper(m - 2)\n\n        return memo[m]\n\n    return fib_helper(n)\n\nn = 10\nprint(f'n-th Fibonacci number for n = {n}: {fibonacci(n)}')"
    },
    {
        "instruction": "Create a JavaScript function that merges two sorted arrays into a new sorted array.",
        "input": "arr1 = [1, 3, 5], arr2 = [2, 4, 6]",
        "response": "function mergeSortedArrays(arr1, arr2) {\n    const merged = [];\n    let index1 = 0;\n    let index2 = 0;\n\n    while (index1 < arr1.length && index2 < arr2.length) {\n        if (arr1[index1] < arr2[index2]) {\n            merged.push(arr1[index1]);\n            index1++;\n        } else {\n            merged.push(arr2[index2]);\n            index2++;\n        }\n    }\n\n    while (index1 < arr1.length) {\n        merged.push(arr1[index1]);\n        index1++;\n    }\n\n    while (index2 < arr2.length) {\n        merged.push(arr2[index2]);\n        index2++;\n    }\n\n    return merged;}\n\nconst arr1 = [1, 3, 5];\nconst arr2 = [2, 4, 6];\nconst result = mergeSortedArrays(arr1, arr2);\nconsole.log(result);",
        "output": "function mergeSortedArrays(arr1, arr2) {\n    const merged = [];\n    let index1 = 0;\n    let index2 = 0;\n\n    while (index1 < arr1.length && index2 < arr2.length) {\n        if (arr1[index1] < arr2[index2]) {\n            merged.push(arr1[index1]);\n            index1++;\n        } else {\n            merged.push(arr2[index2]);\n            index2++;\n        }\n    }\n\n    while (index1 < arr1.length) {\n        merged.push(arr1[index1]);\n        index1++;\n    }\n\n    while (index2 < arr2.length) {\n        merged.push(arr2[index2]);\n        index2++;\n    }\n\n    return merged;}\n\nconst arr1 = [1, 3, 5];\nconst arr2 = [2, 4, 6];\nconst result = mergeSortedArrays(arr1, arr2);\nconsole.log(result);"
    },
    {
        "instruction": "Design a C++ program that reads three integers from the user and outputs the greatest number among the inputs.",
        "input": "6, 8, 2",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    cout << \"Enter three numbers: \";\n    cin >> a >> b >> c;\n\n    int greatest = (a > b) ? a : b;\n    greatest = (greatest > c) ? greatest : c;\n\n    cout << \"Greatest: \" << greatest << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b, c;\n    cout << \"Enter three numbers: \";\n    cin >> a >> b >> c;\n\n    int greatest = (a > b) ? a : b;\n    greatest = (greatest > c) ? greatest : c;\n\n    cout << \"Greatest: \" << greatest << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Implement a shell script that calculates the factorial of a given number.",
        "input": "5",
        "response": "#!/bin/sh\n\nfact() {\n    if [ $1 -le 1 ]; then\n        echo 1\n    else\n        echo $(( $1 * $(fact $(( $1-1 ))) ))\n    fi\n}\n\nnumber=5\nFactorial=$(fact $number)\necho \"Factorial of $number is $Factorial\"",
        "output": "#!/bin/sh\n\nfact() {\n    if [ $1 -le 1 ]; then\n        echo 1\n    else\n        echo $(( $1 * $(fact $(( $1-1 ))) ))\n    fi\n}\n\nnumber=5\nFactorial=$(fact $number)\necho \"Factorial of $number is $Factorial\""
    },
    {
        "instruction": "Can you provide sample code for a Python script that connects to an SQLite database and creates a table named 'employees'?",
        "input": "",
        "response": "import sqlite3\n\nconn = sqlite3.connect('example.db')\ncursor = conn.cursor()\n\n# Create employees table\nquery = '''CREATE TABLE employees (\n                id INTEGER PRIMARY KEY,\n                name TEXT NOT NULL,\n                age INTEGER NOT NULL,\n                department TEXT NOT NULL\n            )'''\ncursor.execute(query)\n\n# Commit changes and close connection\nconn.commit()\nconn.close()",
        "output": "import sqlite3\n\nconn = sqlite3.connect('example.db')\ncursor = conn.cursor()\n\n# Create employees table\nquery = '''CREATE TABLE employees (\n                id INTEGER PRIMARY KEY,\n                name TEXT NOT NULL,\n                age INTEGER NOT NULL,\n                department TEXT NOT NULL\n            )'''\ncursor.execute(query)\n\n# Commit changes and close connection\nconn.commit()\nconn.close()"
    },
    {
        "instruction": "Construct a JavaScript function that accepts a duration in seconds and converts it to the 'HH:MM:SS' time format",
        "input": "3665",
        "response": "function secondsToHHMMSS(seconds) {\n    const hh = Math.floor(seconds / 3600);\n    const mm = Math.floor((seconds % 3600) / 60);\n    const ss = seconds % 60;\n\n    const paddedHH = String(hh).padStart(2, '0');\n    const paddedMM = String(mm).padStart(2, '0');\n    const paddedSS = String(ss).padStart(2, '0');\n\n    return `${paddedHH}:${paddedMM}:${paddedSS}`;\n}\n\nconst duration = 3665;\nconst formattedTime = secondsToHHMMSS(duration);\nconsole.log(formattedTime);",
        "output": "function secondsToHHMMSS(seconds) {\n    const hh = Math.floor(seconds / 3600);\n    const mm = Math.floor((seconds % 3600) / 60);\n    const ss = seconds % 60;\n\n    const paddedHH = String(hh).padStart(2, '0');\n    const paddedMM = String(mm).padStart(2, '0');\n    const paddedSS = String(ss).padStart(2, '0');\n\n    return `${paddedHH}:${paddedMM}:${paddedSS}`;\n}\n\nconst duration = 3665;\nconst formattedTime = secondsToHHMMSS(duration);\nconsole.log(formattedTime);"
    },
    {
        "instruction": "Write a Python script that reads a text file, counts the occurrences of each word, and prints out the word frequencies.",
        "input": "The quick brown fox jumped over the lazy dog. The quick brown dog jumped back.",
        "response": "from collections import Counter\n\nfilename = 'input.txt'\n\nwith open(filename, 'r') as file:\n    content = file.read()\n    words = content.lower().split()\n    word_count = Counter(words)\n\nprint(word_count)",
        "output": "from collections import Counter\n\nfilename = 'input.txt'\n\nwith open(filename, 'r') as file:\n    content = file.read()\n    words = content.lower().split()\n    word_count = Counter(words)\n\nprint(word_count)"
    },
    {
        "instruction": "Create a JavaScript function that takes a string and returns the string with all vowels removed.",
        "input": "This is a sample sentence.",
        "response": "function removeVowels(str) {\n    return str.replace(/[aeiou]/gi, '');\n}\n\nconst result = removeVowels('This is a sample sentence.');\nconsole.log(result);",
        "output": "function removeVowels(str) {\n    return str.replace(/[aeiou]/gi, '');\n}\n\nconst result = removeVowels('This is a sample sentence.');\nconsole.log(result);"
    },
    {
        "instruction": "Can you provide an example of a simple C++ program that prints the numbers from 1 to 10 using a while loop?",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    int i = 1;\n    while (i <= 10) {\n        std::cout << i << ' ';\n        i++;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int i = 1;\n    while (i <= 10) {\n        std::cout << i << ' ';\n        i++;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Write an SQL query that selects all users with an age between 20 and 30, and orders the results by the users' last names.",
        "input": "user table with fields: id, first_name, last_name, age",
        "response": "SELECT * FROM users\nWHERE age BETWEEN 20 AND 30\nORDER BY last_name;",
        "output": "SELECT * FROM users\nWHERE age BETWEEN 20 AND 30\nORDER BY last_name;"
    },
    {
        "instruction": "Write a Python function to calculate the factorial of a given positive integer using recursion.",
        "input": "6",
        "response": "def factorial_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n\nresult = factorial_recursive(6)\nprint(result)",
        "output": "def factorial_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n\nresult = factorial_recursive(6)\nprint(result)"
    },
    {
        "instruction": "Create a C++ program that takes an integer n as input and prints a right-angled triangle of height n using nested loops.",
        "input": "5",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            cout << '*';\n        }\n        cout << endl;\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            cout << '*';\n        }\n        cout << endl;\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Rewrite the following JavaScript code snippet to utilize a ternary operator: if (x > y) { z = x; } else { z = y; }.",
        "input": "let x = 4; let y = 9;",
        "response": "let x = 4;\nlet y = 9;\nlet z = x > y ? x : y;",
        "output": "let x = 4;\nlet y = 9;\nlet z = x > y ? x : y;"
    },
    {
        "instruction": "Can you write a shell script that iterates through all the '.txt' files in the current directory and moves them to a directory called 'text_files'?",
        "input": "",
        "response": "#!/bin/bash\n\nmkdir -p text_files\nfor file in *.txt; do\n    if [ -f \"$file\" ]; then\n        mv \"$file\" text_files/\n    fi\ndone",
        "output": "#!/bin/bash\n\nmkdir -p text_files\nfor file in *.txt; do\n    if [ -f \"$file\" ]; then\n        mv \"$file\" text_files/\n    fi\ndone"
    },
    {
        "instruction": "Create a simple C++ program that calculates the area of a circle, given the radius.",
        "input": "7",
        "response": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.14159265358979323846;\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double radius = 7;\n    double area = circle_area(radius);\n    std::cout << \"Area of the circle with radius \" << radius << \" is: \" << area << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.14159265358979323846;\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double radius = 7;\n    double area = circle_area(radius);\n    std::cout << \"Area of the circle with radius \" << radius << \" is: \" << area << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python function that reads the content of a file and returns the number of lines in the file.",
        "input": "example.txt",
        "response": "def count_lines(file_name):\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n    return len(lines)\n\nfile_name = 'example.txt'\nline_count = count_lines(file_name)\nprint(f\"There are {line_count} lines in the file {file_name}.\")",
        "output": "def count_lines(file_name):\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n    return len(lines)\n\nfile_name = 'example.txt'\nline_count = count_lines(file_name)\nprint(f\"There are {line_count} lines in the file {file_name}.\")"
    },
    {
        "instruction": "Design a JavaScript function that takes a string input and returns the number of vowels in the string.",
        "input": "\"Hello, world!\"",
        "response": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.includes(str[i])) {\n            count++;\n        }\n    }\n    return count;}\n\nconst inputString = \"Hello, world!\";\nconst vowelCount = countVowels(inputString);\nconsole.log(`The number of vowels in \"${inputString}\" is ${vowelCount}.`);",
        "output": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.includes(str[i])) {\n            count++;\n        }\n    }\n    return count;}\n\nconst inputString = \"Hello, world!\";\nconst vowelCount = countVowels(inputString);\nconsole.log(`The number of vowels in \"${inputString}\" is ${vowelCount}.`);"
    },
    {
        "instruction": "How would you write a shell script to iterate through a list of words and print each word in reverse?",
        "input": "apple banana orange",
        "response": "#!/bin/bash\n\nlist=\"apple banana orange\"\n\nfor word in $list; do\n    reverse=$(echo \"$word\" | rev)\n    echo \"$reverse\"\ndone",
        "output": "#!/bin/bash\n\nlist=\"apple banana orange\"\n\nfor word in $list; do\n    reverse=$(echo \"$word\" | rev)\n    echo \"$reverse\"\ndone"
    },
    {
        "instruction": "Develop a C++ program to compute the factorial of a non-negative integer.",
        "input": "7",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 7;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 7;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python program that computes the first n Fibonacci numbers using recursion.",
        "input": "10",
        "response": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef first_n_fibonacci_numbers(n):\n    return [fibonacci(i) for i in range(n)]\n\nn = 10\nfibonacci_numbers = first_n_fibonacci_numbers(n)\nprint(fibonacci_numbers)",
        "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef first_n_fibonacci_numbers(n):\n    return [fibonacci(i) for i in range(n)]\n\nn = 10\nfibonacci_numbers = first_n_fibonacci_numbers(n)\nprint(fibonacci_numbers)"
    },
    {
        "instruction": "How would you implement a JavaScript function that reverses a given string?",
        "input": "\"code generation\"",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst originalString = \"code generation\";\nconst reversedString = reverseString(originalString);\nconsole.log(reversedString);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');}\n\nconst originalString = \"code generation\";\nconst reversedString = reverseString(originalString);\nconsole.log(reversedString);"
    },
    {
        "instruction": "Create a shell script that displays the current date and time in a custom format.",
        "input": "Format: \"%Y-%m-%d %H:%M:%S\"",
        "response": "#!/bin/bash\n\ndate +\"%Y-%m-%d %H:%M:%S\"",
        "output": "#!/bin/bash\n\ndate +\"%Y-%m-%d %H:%M:%S\""
    },
    {
        "instruction": "Design a Python function that reads a CSV file and returns the number of rows and columns.",
        "input": "example.csv: \nname, age, email\nAlice, 30, alice@example.com\nBob, 25, bob@example.com",
        "response": "import csv\n\ndef get_dimensions(csv_file):\n    with open(csv_file, 'r') as file:\n        reader = csv.reader(file)\n        rows = 0\n        cols = 0\n        for row in reader:\n            rows += 1\n            cols = max(cols, len(row))\n    return rows, cols\n\nrows, columns = get_dimensions('example.csv')\nprint('Rows:', rows, 'Columns:', columns)",
        "output": "import csv\n\ndef get_dimensions(csv_file):\n    with open(csv_file, 'r') as file:\n        reader = csv.reader(file)\n        rows = 0\n        cols = 0\n        for row in reader:\n            rows += 1\n            cols = max(cols, len(row))\n    return rows, cols\n\nrows, columns = get_dimensions('example.csv')\nprint('Rows:', rows, 'Columns:', columns)"
    },
    {
        "instruction": "Write a C++ function that takes an integer array and its size, then returns the index of the largest element.",
        "input": "int arr[] = {1, 3, 10, 4, 7};\nint size = sizeof(arr) / sizeof(arr[0]);",
        "response": "#include <iostream>\n\nint find_largest_index(int arr[], int size) {\n    int max_idx = 0;\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > arr[max_idx]) {\n            max_idx = i;\n        }\n    }\n    return max_idx;}\n\nint main() {\n    int arr[] = {1, 3, 10, 4, 7};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int largest_index = find_largest_index(arr, size);\n    std::cout << \"Largest element index: \" << largest_index;}",
        "output": "#include <iostream>\n\nint find_largest_index(int arr[], int size) {\n    int max_idx = 0;\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > arr[max_idx]) {\n            max_idx = i;\n        }\n    }\n    return max_idx;}\n\nint main() {\n    int arr[] = {1, 3, 10, 4, 7};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int largest_index = find_largest_index(arr, size);\n    std::cout << \"Largest element index: \" << largest_index;}"
    },
    {
        "instruction": "How would you write a PHP script that takes a JSON-encoded string, decodes it to an associative array, and calculates the total value of a specific key within the array?",
        "input": "{\"data\": [{\"product\": \"A\", \"value\": 200}, {\"product\": \"B\", \"value\": 150}, {\"product\": \"C\", \"value\": 100}]}",
        "response": "<?php\n\n$json_str = '{\"data\": [{\"product\": \"A\", \"value\": 200}, {\"product\": \"B\", \"value\": 150}, {\"product\": \"C\", \"value\": 100}]}';\n\nfunction calculate_total_value($json_str, $key) {\n    $decoded_array = json_decode($json_str, true);\n    $total_value = 0;\n\n    foreach ($decoded_array['data'] as $item) {\n        if (array_key_exists($key, $item)) {\n            $total_value += $item[$key];\n        }\n    }\n\n    return $total_value;}\n\n$total_value = calculate_total_value($json_str, 'value');\necho \"Total value: \" . $total_value;\n?>",
        "output": "<?php\n\n$json_str = '{\"data\": [{\"product\": \"A\", \"value\": 200}, {\"product\": \"B\", \"value\": 150}, {\"product\": \"C\", \"value\": 100}]}';\n\nfunction calculate_total_value($json_str, $key) {\n    $decoded_array = json_decode($json_str, true);\n    $total_value = 0;\n\n    foreach ($decoded_array['data'] as $item) {\n        if (array_key_exists($key, $item)) {\n            $total_value += $item[$key];\n        }\n    }\n\n    return $total_value;}\n\n$total_value = calculate_total_value($json_str, 'value');\necho \"Total value: \" . $total_value;\n?>"
    },
    {
        "instruction": "Write a Bash script that takes a list of file paths as command-line arguments and outputs the total number of lines in all the files combined.",
        "input": "./script.sh file1.txt file2.txt file3.txt",
        "response": "#!/bin/bash\n\ntotal_lines=0\n\nfor file in \"$@\"; do\n    lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + lines))\ndone\n\necho \"Total lines: $total_lines\"",
        "output": "#!/bin/bash\n\ntotal_lines=0\n\nfor file in \"$@\"; do\n    lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + lines))\ndone\n\necho \"Total lines: $total_lines\""
    },
    {
        "instruction": "Compose a Python script that fetches bibliographic information for a given ISBN using the Open Library API.",
        "input": "9780143126560",
        "response": "import requests\n\ndef fetch_bibliographic_info(isbn):\n    url = f'https://openlibrary.org/api/books?bibkeys=ISBN:{isbn}&format=json&jscmd=data'\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        return data.get(f'ISBN:{isbn}', {})\n    else:\n        return None\n\nisbn = '9780143126560'\nbibliographic_info = fetch_bibliographic_info(isbn)\nprint(bibliographic_info)",
        "output": "import requests\n\ndef fetch_bibliographic_info(isbn):\n    url = f'https://openlibrary.org/api/books?bibkeys=ISBN:{isbn}&format=json&jscmd=data'\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        return data.get(f'ISBN:{isbn}', {})\n    else:\n        return None\n\nisbn = '9780143126560'\nbibliographic_info = fetch_bibliographic_info(isbn)\nprint(bibliographic_info)"
    },
    {
        "instruction": "Design a Java class representing a bank account with methods to deposit, withdraw, and check the balance.",
        "input": "Initial balance: 1000, Deposit: 500, Withdraw: 300",
        "response": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds.\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(1000);\n        account.deposit(500);\n        account.withdraw(300);\n        System.out.println(\"Balance: \" + account.getBalance());\n    }}",
        "output": "public class BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds.\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(1000);\n        account.deposit(500);\n        account.withdraw(300);\n        System.out.println(\"Balance: \" + account.getBalance());\n    }}"
    },
    {
        "instruction": "Develop a C++ program that reads a text file and displays the number of lines, words, and characters.",
        "input": "file.txt (with any text content)",
        "response": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::string filename = \"file.txt\";\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file.\" << std::endl;\n        return 1;\n    }\n\n    int lines = 0, words = 0, characters = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines++;\n        std::istringstream iss(line);\n        std::string word;\n        while (iss >> word) {\n            words++;\n            characters += word.length();\n        }\n    }\n\n    file.close();\n    std::cout << \"Lines: \" << lines << std::endl;\n    std::cout << \"Words: \" << words << std::endl;\n    std::cout << \"Characters: \" << characters << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::string filename = \"file.txt\";\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file.\" << std::endl;\n        return 1;\n    }\n\n    int lines = 0, words = 0, characters = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines++;\n        std::istringstream iss(line);\n        std::string word;\n        while (iss >> word) {\n            words++;\n            characters += word.length();\n        }\n    }\n\n    file.close();\n    std::cout << \"Lines: \" << lines << std::endl;\n    std::cout << \"Words: \" << words << std::endl;\n    std::cout << \"Characters: \" << characters << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Create a Shell script that lists all files in the current directory that have been modified in the previous 24 hours.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -type f -mtime 0 -print",
        "output": "#!/bin/bash\n\nfind . -type f -mtime 0 -print"
    },
    {
        "instruction": "Implement a C++ function that calculates the n-th Fibonacci number using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nint main() {\n    int n = 6;\n    std::cout << \"The \" << n << \"-th Fibonacci number is: \" << fibonacci(n) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nint main() {\n    int n = 6;\n    std::cout << \"The \" << n << \"-th Fibonacci number is: \" << fibonacci(n) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "In Python, write a program that reads a file called 'example.txt' and prints the number of lines in the file.",
        "input": "example.txt containing:\n'Hello, World!\nThis is a simple text file.\nIt contains three lines.'",
        "response": "with open('example.txt', 'r') as file:\n    lines = file.readlines()\n    number_of_lines = len(lines)\n\nprint(f'The file has {number_of_lines} lines.')",
        "output": "with open('example.txt', 'r') as file:\n    lines = file.readlines()\n    number_of_lines = len(lines)\n\nprint(f'The file has {number_of_lines} lines.')"
    },
    {
        "instruction": "Show me how to implement a JavaScript utility that fetches data from the following API endpoint, 'https://jsonplaceholder.typicode.com/posts', and displays just the 'title' and 'body' fields of the fetched posts.",
        "input": "",
        "response": "async function fetchData() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const posts = await response.json();\n\n    posts.forEach(post => {\n        console.log(`Title: ${post.title}\nBody: ${post.body}\n`);\n    });}\n\nfetchData();",
        "output": "async function fetchData() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n    const posts = await response.json();\n\n    posts.forEach(post => {\n        console.log(`Title: ${post.title}\nBody: ${post.body}\n`);\n    });}\n\nfetchData();"
    },
    {
        "instruction": "Write a Shell script that lists all files in a directory and counts the number of files in the directory.",
        "input": "A directory containing: file1.txt, file2.txt, file3.txt",
        "response": "#!/bin/bash\n\ndir_path=\"./\"\nfile_count=0\n\necho \"Files in the directory:\"\nfor file in \"${dir_path}\"*\ndo\n    if [ -f \"${file}\" ]\n    then\n        echo \"${file}\"\n        ((file_count++))\n    fi\ndone\n\necho \"Total number of files: ${file_count}\"",
        "output": "#!/bin/bash\n\ndir_path=\"./\"\nfile_count=0\n\necho \"Files in the directory:\"\nfor file in \"${dir_path}\"*\ndo\n    if [ -f \"${file}\" ]\n    then\n        echo \"${file}\"\n        ((file_count++))\n    fi\ndone\n\necho \"Total number of files: ${file_count}\""
    },
    {
        "instruction": "Write a C program to calculate the factorial of a given integer using a recursive function.",
        "input": "6",
        "response": "#include <stdio.h>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    unsigned int num = 6;\n    printf(\"Factorial of %u is %llu\\n\", num, factorial(num));\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    unsigned int num = 6;\n    printf(\"Factorial of %u is %llu\\n\", num, factorial(num));\n    return 0;\n}"
    },
    {
        "instruction": "Implement a JavaScript function that, given an input string, produces a reversed copy of the string.",
        "input": "OpenAI",
        "response": "function reverseString(s) {\n    return s.split('').reverse().join('');\n}\n\nconsole.log(reverseString(\"OpenAI\"));",
        "output": "function reverseString(s) {\n    return s.split('').reverse().join('');\n}\n\nconsole.log(reverseString(\"OpenAI\"));"
    },
    {
        "instruction": "Can you provide a Python code that calculates the nth number in the Fibonacci sequence using dynamic programming?",
        "input": "20",
        "response": "def fibonacci(n): \n    fib = [0] * (n+1) \n    fib[1] = 1\n\n    for i in range(2, n+1): \n        fib[i] = fib[i-1] + fib[i-2] \n    return fib[n]\n\nn = 20\nresult = fibonacci(n)\nprint(f\"The {n}th number in the Fibonacci sequence is {result}\")",
        "output": "def fibonacci(n): \n    fib = [0] * (n+1) \n    fib[1] = 1\n\n    for i in range(2, n+1): \n        fib[i] = fib[i-1] + fib[i-2] \n    return fib[n]\n\nn = 20\nresult = fibonacci(n)\nprint(f\"The {n}th number in the Fibonacci sequence is {result}\")"
    },
    {
        "instruction": "Develop a PHP function that accepts an array of strings and returns a new array with each string's length.",
        "input": "['apple', 'banana', 'orange']",
        "response": "<?php\n\nfunction arrayOfLengths($arr) {\n    $lengths = [];\n    foreach ($arr as $str) {\n        $lengths[] = strlen($str);\n    }\n    return $lengths;\n}\n\n$strings = ['apple', 'banana', 'orange'];\n$result = arrayOfLengths($strings);\nprint_r($result);\n\n?>",
        "output": "<?php\n\nfunction arrayOfLengths($arr) {\n    $lengths = [];\n    foreach ($arr as $str) {\n        $lengths[] = strlen($str);\n    }\n    return $lengths;\n}\n\n$strings = ['apple', 'banana', 'orange'];\n$result = arrayOfLengths($strings);\nprint_r($result);\n\n?>"
    },
    {
        "instruction": "How would you create a simple Python script to download a webpage using the requests library and store its content in a text file?",
        "input": "https://www.example.com, downloaded_page.txt",
        "response": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nwith open('downloaded_page.txt', 'w') as file:\n    file.write(response.text)",
        "output": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nwith open('downloaded_page.txt', 'w') as file:\n    file.write(response.text)"
    },
    {
        "instruction": "Write a shell script that lists all files in the current directory, sorted by size in descending order, with human-readable file sizes displayed.",
        "input": "",
        "response": "#!/bin/bash\n\nls -lhS",
        "output": "#!/bin/bash\n\nls -lhS"
    },
    {
        "instruction": "Construct a JavaScript function that takes an input string and returns a new string with vowels removed.",
        "input": "\"This is an example sentence.\"",
        "response": "function removeVowels(str) {\n    const vowels = /[AEIOUaeiou]/g;\n    return str.replace(vowels, '');}\n\nconst input = 'This is an example sentence.';\nconst result = removeVowels(input);\nconsole.log(result);",
        "output": "function removeVowels(str) {\n    const vowels = /[AEIOUaeiou]/g;\n    return str.replace(vowels, '');}\n\nconst input = 'This is an example sentence.';\nconst result = removeVowels(input);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a given positive integer, utilizing recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"The factorial of \" << num << \" is: \" << factorial(num) << endl;\n\n    return 0;}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    cout << \"The factorial of \" << num << \" is: \" << factorial(num) << endl;\n\n    return 0;}"
    },
    {
        "instruction": "Write a Python script that reads a CSV file and prints the column names and data types to the console.",
        "input": "path/to/your/csv.csv",
        "response": "import pandas as pd\n\ndef print_csv_info(file_path):\n    df = pd.read_csv(file_path)\n    print('Column name | Data Type:')\n    for column_name, dtype in df.dtypes.items():\n        print(f'{column_name} | {dtype}')\n\ncsv_file_path = 'path/to/your/csv.csv'\nprint_csv_info(csv_file_path)",
        "output": "import pandas as pd\n\ndef print_csv_info(file_path):\n    df = pd.read_csv(file_path)\n    print('Column name | Data Type:')\n    for column_name, dtype in df.dtypes.items():\n        print(f'{column_name} | {dtype}')\n\ncsv_file_path = 'path/to/your/csv.csv'\nprint_csv_info(csv_file_path)"
    },
    {
        "instruction": "How would you implement a JavaScript function that takes an array of objects with varying key-value pairs and filters out objects containing a specific key-value pair? Show an example.",
        "input": "[{ \"foo\": 1, \"bar\": 2 }, { \"foo\": 3, \"baz\": 4 }, { \"bar\": 5 }], \"foo\", 1",
        "response": "function filterObjectsWithKeyValue(array, key, value) {\n    return array.filter(obj => obj[key] === value);}\n\nconst data = [\n    { \"foo\": 1, \"bar\": 2 },\n    { \"foo\": 3, \"baz\": 4 },\n    { \"bar\": 5 }\n];\nconst result = filterObjectsWithKeyValue(data, \"foo\", 1);\nconsole.log(result);",
        "output": "function filterObjectsWithKeyValue(array, key, value) {\n    return array.filter(obj => obj[key] === value);}\n\nconst data = [\n    { \"foo\": 1, \"bar\": 2 },\n    { \"foo\": 3, \"baz\": 4 },\n    { \"bar\": 5 }\n];\nconst result = filterObjectsWithKeyValue(data, \"foo\", 1);\nconsole.log(result);"
    },
    {
        "instruction": "Write a shell script that accepts a directory path as an argument and finds all files with a specific file extension, such as .txt, in that directory and its subdirectories.",
        "input": "/path/to/directory txt",
        "response": "#!/bin/bash\n\ndirectory=$1\nextension=$2\n\nfind \"$directory\" -type f -name \"*.${extension}\"",
        "output": "#!/bin/bash\n\ndirectory=$1\nextension=$2\n\nfind \"$directory\" -type f -name \"*.${extension}\""
    },
    {
        "instruction": "What would be a Python code for finding the minimum element in a list of integers?",
        "input": "[7, 3, 1, 5]",
        "response": "def find_minimum(numbers):\n    min_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n    return min_num\n\nexample_list = [7, 3, 1, 5]\nprint(find_minimum(example_list))",
        "output": "def find_minimum(numbers):\n    min_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n    return min_num\n\nexample_list = [7, 3, 1, 5]\nprint(find_minimum(example_list))"
    },
    {
        "instruction": "Write a code in JavaScript that prints the even numbers from an array of integers.",
        "input": "[11, 4, -8, 12, -6, 3]",
        "response": "function printEvenNumbers(arr) {\n    for (const num of arr) {\n        if (num % 2 === 0) {\n            console.log(num);\n        }\n    }}\n\nconst exampleArray = [11, 4, -8, 12, -6, 3];\nprintEvenNumbers(exampleArray);",
        "output": "function printEvenNumbers(arr) {\n    for (const num of arr) {\n        if (num % 2 === 0) {\n            console.log(num);\n        }\n    }}\n\nconst exampleArray = [11, 4, -8, 12, -6, 3];\nprintEvenNumbers(exampleArray);"
    },
    {
        "instruction": "Create a Bash script that takes two file names as arguments and copies the content of the first file to the second file.",
        "input": "file1.txt, file2.txt",
        "response": "#!/bin/bash\n# File: copy_content.sh\n\nif [ $# -ne 2 ]; then\n    echo \"Usage: $0 source_file destination_file\"\n    exit 1\nfi\n\nsource_file=$1\ndestination_file=$2\n\ncat \"$source_file\" > \"$destination_file\"\necho \"Content of $source_file copied to $destination_file\"\n\n# Usage: bash copy_content.sh file1.txt file2.txt",
        "output": "#!/bin/bash\n# File: copy_content.sh\n\nif [ $# -ne 2 ]; then\n    echo \"Usage: $0 source_file destination_file\"\n    exit 1\nfi\n\nsource_file=$1\ndestination_file=$2\n\ncat \"$source_file\" > \"$destination_file\"\necho \"Content of $source_file copied to $destination_file\"\n\n# Usage: bash copy_content.sh file1.txt file2.txt"
    },
    {
        "instruction": "Design a C++ function that takes a user's input for a string and reverses it.",
        "input": "Artificial Intelligence",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverse_string(const std::string &input) {\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, userInput);\n\n    std::string reversedResult = reverse_string(userInput);\n    std::cout << \"Reversed: \" << reversedResult << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverse_string(const std::string &input) {\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;}\n\nint main() {\n    std::string userInput;\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, userInput);\n\n    std::string reversedResult = reverse_string(userInput);\n    std::cout << \"Reversed: \" << reversedResult << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "Create a Bash script that prints the number of files and directories in the current directory.",
        "input": "",
        "response": "#!/bin/bash\n\nfile_count=0\ndir_count=0\n\nfor entry in *; do\n    if [ -f \"$entry\" ]; then\n        file_count=$((file_count + 1))\n    elif [ -d \"$entry\" ]; then\n        dir_count=$((dir_count + 1))\n    fi\ndone\n\necho \"Number of files: $file_count\"\necho \"Number of directories: $dir_count\"",
        "output": "#!/bin/bash\n\nfile_count=0\ndir_count=0\n\nfor entry in *; do\n    if [ -f \"$entry\" ]; then\n        file_count=$((file_count + 1))\n    elif [ -d \"$entry\" ]; then\n        dir_count=$((dir_count + 1))\n    fi\ndone\n\necho \"Number of files: $file_count\"\necho \"Number of directories: $dir_count\""
    },
    {
        "instruction": "How would you write a C# method that calculates and returns the factorial of a given integer?",
        "input": "5",
        "response": "using System;\n\nclass FactorialCalculator {\n    public static int CalculateFactorial(int num) {\n        if (num == 0) {\n            return 1;\n        }\n        return num * CalculateFactorial(num - 1);\n    }\n\n    public static void Main() {\n        int userInput = 5;\n        int factorial = CalculateFactorial(userInput);\n        Console.WriteLine(\"Factorial of \" + userInput + \" is \" + factorial);\n    }}",
        "output": "using System;\n\nclass FactorialCalculator {\n    public static int CalculateFactorial(int num) {\n        if (num == 0) {\n            return 1;\n        }\n        return num * CalculateFactorial(num - 1);\n    }\n\n    public static void Main() {\n        int userInput = 5;\n        int factorial = CalculateFactorial(userInput);\n        Console.WriteLine(\"Factorial of \" + userInput + \" is \" + factorial);\n    }}"
    },
    {
        "instruction": "Write a Python program that retrieves a user's current IP address using the 'ipify' API.",
        "input": "",
        "response": "import requests\n\ndef get_ip_address():\n    response = requests.get('https://api.ipify.org?format=json')\n    return response.json()['ip']\n\nuser_ip = get_ip_address()\nprint(\"Your IP address: \" + user_ip)",
        "output": "import requests\n\ndef get_ip_address():\n    response = requests.get('https://api.ipify.org?format=json')\n    return response.json()['ip']\n\nuser_ip = get_ip_address()\nprint(\"Your IP address: \" + user_ip)"
    },
    {
        "instruction": "Implement a simple HTTP server in Python that listens on port 8080 and responds with 'Hello, World!' for any requests",
        "input": "",
        "response": "from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass MyRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, World!')\n\nif __name__ == '__main__':\n    server_address = ('', 8080)\n    httpd = HTTPServer(server_address, MyRequestHandler)\n    print('Running server on port 8080...')\n    httpd.serve_forever()",
        "output": "from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass MyRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, World!')\n\nif __name__ == '__main__':\n    server_address = ('', 8080)\n    httpd = HTTPServer(server_address, MyRequestHandler)\n    print('Running server on port 8080...')\n    httpd.serve_forever()"
    },
    {
        "instruction": "In JavaScript, give an example of using the Fetch API to make a GET request to a specific URL.",
        "input": "https://jsonplaceholder.typicode.com/posts/1",
        "response": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));",
        "output": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));"
    },
    {
        "instruction": "Write a C++ program that asks a user for their name and age, and prints them out.",
        "input": "Alice, 25",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"What is your name? \";\n    std::getline(std::cin, name);\n\n    std::cout << \"How old are you? \";\n    std::cin >> age;\n\n    std::cout << \"Hello, \" << name << \"! You are \" << age << \" years old.\" << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"What is your name? \";\n    std::getline(std::cin, name);\n\n    std::cout << \"How old are you? \";\n    std::cin >> age;\n\n    std::cout << \"Hello, \" << name << \"! You are \" << age << \" years old.\" << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "How would you write a Bash script that accepts a file path as an argument and checks if the file exists?",
        "input": "/etc/mysql/my.cnf",
        "response": "#!/bin/bash\n\nfile_path=\"$1\"\n\nif [ -f \"$file_path\" ]; then\n    echo \"File exists\"\nelse\n    echo \"File does not exist\"\nfi",
        "output": "#!/bin/bash\n\nfile_path=\"$1\"\n\nif [ -f \"$file_path\" ]; then\n    echo \"File exists\"\nelse\n    echo \"File does not exist\"\nfi"
    },
    {
        "instruction": "Develop a C++ function that calculates the factorial of a positive integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    unsigned int num = 6;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    unsigned int num = 6;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "How would you implement a Python script that reads a CSV file and prints its content?",
        "input": "file.csv",
        "response": "import csv\n\nfile_path = 'file.csv'\n\nwith open(file_path, 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)",
        "output": "import csv\n\nfile_path = 'file.csv'\n\nwith open(file_path, 'r') as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)"
    },
    {
        "instruction": "Design a shell script that counts the number of lines in a specified text file.",
        "input": "file.txt",
        "response": "#!/bin/sh\n\nfile_path=\"file.txt\"\n\nline_count=$(wc -l < \"$file_path\")\necho \"Number of lines in the file: $line_count\"",
        "output": "#!/bin/sh\n\nfile_path=\"file.txt\"\n\nline_count=$(wc -l < \"$file_path\")\necho \"Number of lines in the file: $line_count\""
    },
    {
        "instruction": "Construct a PHP function that takes an input array of strings and returns an array of the occurrences of the letter 'a' in each string.",
        "input": "['apple', 'banana', 'avocado']",
        "response": "<?php\n\nfunction count_a_occurrences($arr) {\n    $result = [];\n    foreach ($arr as $str) {\n        $result[] = substr_count($str, 'a');\n    }\n    return $result;}\n\n$fruit_array = ['apple', 'banana', 'avocado'];\n$occurrences_array = count_a_occurrences($fruit_array);\n\nprint_r($occurrences_array);\n\n?>",
        "output": "<?php\n\nfunction count_a_occurrences($arr) {\n    $result = [];\n    foreach ($arr as $str) {\n        $result[] = substr_count($str, 'a');\n    }\n    return $result;}\n\n$fruit_array = ['apple', 'banana', 'avocado'];\n$occurrences_array = count_a_occurrences($fruit_array);\n\nprint_r($occurrences_array);\n\n?>"
    },
    {
        "instruction": "Implement a PHP script that takes a user's input of their name and prints a personalized greeting.",
        "input": "John",
        "response": "<?php\n$name = 'John';\necho 'Hello, ' . htmlspecialchars($name, ENT_QUOTES, 'UTF-8') . '!';\n?>",
        "output": "<?php\n$name = 'John';\necho 'Hello, ' . htmlspecialchars($name, ENT_QUOTES, 'UTF-8') . '!';\n?>"
    },
    {
        "instruction": "How would you write a SQL query that selects all columns from a table 'employees' where the 'salary' is greater than 50000?",
        "input": "",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "Write a Haskell function that takes two strings as inputs and concatenates them together.",
        "input": "String 1: 'Hello', String 2: 'World'",
        "response": "concatStrings :: String -> String -> String\nconcatStrings s1 s2 = s1 ++ s2\n\nmain :: IO ()\nmain = putStrLn (concatStrings \"Hello\" \"World\")",
        "output": "concatStrings :: String -> String -> String\nconcatStrings s1 s2 = s1 ++ s2\n\nmain :: IO ()\nmain = putStrLn (concatStrings \"Hello\" \"World\")"
    },
    {
        "instruction": "Design a JavaScript function that takes a string as a parameter and returns the number of vowels it contains.",
        "input": "\"computational linguistics\"",
        "response": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (const char of str.toLowerCase()) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;}\n\nconst result = countVowels(\"computational linguistics\");\nconsole.log(result);",
        "output": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (const char of str.toLowerCase()) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;}\n\nconst result = countVowels(\"computational linguistics\");\nconsole.log(result);"
    },
    {
        "instruction": "Design a C# program that has a function that receives an array of integers, reverses it, and prints the reversed array.",
        "input": "int[] arr = {1, 2, 3, 4, 5};",
        "response": "using System;\n\nclass Program {\n    public static void ReverseAndPrint(int[] arr) {\n        Array.Reverse(arr);\n        foreach (int num in arr) {\n            Console.Write(num + \" \");\n        }\n    }\n\n    public static void Main() {\n        int[] arr = {1, 2, 3, 4, 5};\n        ReverseAndPrint(arr);\n    }}",
        "output": "using System;\n\nclass Program {\n    public static void ReverseAndPrint(int[] arr) {\n        Array.Reverse(arr);\n        foreach (int num in arr) {\n            Console.Write(num + \" \");\n        }\n    }\n\n    public static void Main() {\n        int[] arr = {1, 2, 3, 4, 5};\n        ReverseAndPrint(arr);\n    }}"
    },
    {
        "instruction": "Write a Python function that takes a list of words and returns a dictionary with the word lengths as keys and the corresponding words as values.",
        "input": "['Python', 'is', 'awesome']",
        "response": "def word_length_dict(words):\n    result = {}\n    for word in words:\n        length = len(word)\n        if length in result:\n            result[length].append(word)\n        else:\n            result[length] = [word]\n    return result\n\nexample = ['Python', 'is', 'awesome']\nprint(word_length_dict(example))",
        "output": "def word_length_dict(words):\n    result = {}\n    for word in words:\n        length = len(word)\n        if length in result:\n            result[length].append(word)\n        else:\n            result[length] = [word]\n    return result\n\nexample = ['Python', 'is', 'awesome']\nprint(word_length_dict(example))"
    },
    {
        "instruction": "What would be the code for a Java method that accepts a string and returns the same string with every other character capitalized?",
        "input": "\"alternating characters\"",
        "response": "public static String alternatingCaps(String input) {\n    StringBuilder result = new StringBuilder();\n\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (i % 2 == 0) {\n            c = Character.toUpperCase(c);\n        }\n        result.append(c);\n    }\n\n    return result.toString();}\n\nString example = \"alternating characters\";\nSystem.out.println(alternatingCaps(example));",
        "output": "public static String alternatingCaps(String input) {\n    StringBuilder result = new StringBuilder();\n\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (i % 2 == 0) {\n            c = Character.toUpperCase(c);\n        }\n        result.append(c);\n    }\n\n    return result.toString();}\n\nString example = \"alternating characters\";\nSystem.out.println(alternatingCaps(example));"
    },
    {
        "instruction": "Can you write a Python script that reads data from a CSV file and prints the total number of lines?",
        "input": "sample.csv",
        "response": "import csv\n\ndef count_lines(file_name):\n    with open(file_name, 'r') as file:\n        csv_reader = csv.reader(file)\n        line_count = sum(1 for _ in csv_reader)\n    return line_count\n\nfile_name = 'sample.csv'\ntotal_lines = count_lines(file_name)\nprint(f'Total number of lines in {file_name}: {total_lines}')",
        "output": "import csv\n\ndef count_lines(file_name):\n    with open(file_name, 'r') as file:\n        csv_reader = csv.reader(file)\n        line_count = sum(1 for _ in csv_reader)\n    return line_count\n\nfile_name = 'sample.csv'\ntotal_lines = count_lines(file_name)\nprint(f'Total number of lines in {file_name}: {total_lines}')"
    },
    {
        "instruction": "Create a PHP function that accepts a string and returns a reversed version of the string.",
        "input": "\"Hello, world!\"",
        "response": "<?php\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input_string = 'Hello, world!';\n$reversed_string = reverse_string($input_string);\necho 'Input: ' . $input_string . '\\n';\necho 'Reversed: ' . $reversed_string . '\\n';\n?>",
        "output": "<?php\nfunction reverse_string($str) {\n    return strrev($str);}\n\n$input_string = 'Hello, world!';\n$reversed_string = reverse_string($input_string);\necho 'Input: ' . $input_string . '\\n';\necho 'Reversed: ' . $reversed_string . '\\n';\n?>"
    },
    {
        "instruction": "Construct a SQL query to find the total revenue of a list of order items with their quantities and unit prices.",
        "input": "Table: order_items (id, product_id, order_id, quantity, unit_price)",
        "response": "SELECT SUM(quantity * unit_price) as total_revenue\nFROM order_items;",
        "output": "SELECT SUM(quantity * unit_price) as total_revenue\nFROM order_items;"
    },
    {
        "instruction": "Write a C++ function that takes a list of integers and determines the average of the values.",
        "input": "vector<int> numbers = {10, 20, 30, 40, 50};",
        "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\ndouble find_average(vector<int> numbers) {\n    double sum = 0.0;\n\n    for (const int &num : numbers) {\n        sum += num;\n    }\n\n    return sum / numbers.size();}\n\nint main() {\n    vector<int> numbers = {10, 20, 30, 40, 50};\n    cout << \"The average is: \" << find_average(numbers) << endl;}",
        "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\ndouble find_average(vector<int> numbers) {\n    double sum = 0.0;\n\n    for (const int &num : numbers) {\n        sum += num;\n    }\n\n    return sum / numbers.size();}\n\nint main() {\n    vector<int> numbers = {10, 20, 30, 40, 50};\n    cout << \"The average is: \" << find_average(numbers) << endl;}"
    },
    {
        "instruction": "How would you create a Bash script to count the number of lines in a text file?",
        "input": "data.txt",
        "response": "#!/bin/bash\n\nfilename=\"data.txt\"\ncount_lines() {\n    wc -l < \"$1\"}\n\nnum_lines=$(count_lines \"$filename\")\necho \"The file $filename has $num_lines lines.\"",
        "output": "#!/bin/bash\n\nfilename=\"data.txt\"\ncount_lines() {\n    wc -l < \"$1\"}\n\nnum_lines=$(count_lines \"$filename\")\necho \"The file $filename has $num_lines lines.\""
    },
    {
        "instruction": "Implement a JavaScript function that accepts a string and returns the count of unique characters in it. Test it with the given string.",
        "input": "\"hello world\"",
        "response": "function countUniqueCharacters(str) {\n    const charSet = new Set(str);\n    return charSet.size;}\n\nconst testString = \"hello world\";\nconst uniqueCount = countUniqueCharacters(testString);\nconsole.log(`The string \"${testString}\" has ${uniqueCount} unique characters.`);",
        "output": "function countUniqueCharacters(str) {\n    const charSet = new Set(str);\n    return charSet.size;}\n\nconst testString = \"hello world\";\nconst uniqueCount = countUniqueCharacters(testString);\nconsole.log(`The string \"${testString}\" has ${uniqueCount} unique characters.`);"
    },
    {
        "instruction": "Design a Python program that reads a text file and prints the count of words in the file.",
        "input": "sample_text_file.txt",
        "response": "def count_words_in_file(filename):\n    with open(filename, 'r') as file:\n        content = file.read()\n        words = content.split()\n        return len(words)\n\nfilename = 'sample_text_file.txt'\nword_count = count_words_in_file(filename)\nprint(f'The file {filename} contains {word_count} words.')",
        "output": "def count_words_in_file(filename):\n    with open(filename, 'r') as file:\n        content = file.read()\n        words = content.split()\n        return len(words)\n\nfilename = 'sample_text_file.txt'\nword_count = count_words_in_file(filename)\nprint(f'The file {filename} contains {word_count} words.')"
    },
    {
        "instruction": "Write a C program that reads a character from the user and returns its ASCII value.",
        "input": "c",
        "response": "#include <stdio.h>\n\nint main() {\n    char ch;\n    printf(\"Enter a character: \");\n    scanf(\"%c\", &ch);\n    printf(\"ASCII value of '%c': %d\", ch, ch);\n    return 0;}",
        "output": "#include <stdio.h>\n\nint main() {\n    char ch;\n    printf(\"Enter a character: \");\n    scanf(\"%c\", &ch);\n    printf(\"ASCII value of '%c': %d\", ch, ch);\n    return 0;}"
    },
    {
        "instruction": "Can you provide an example of using the filter() function in Python to remove all even numbers from a list?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def is_odd(number):\n    return number % 2 != 0\n\nnumbers = [1, 2, 3, 4, 5]\nfiltered_numbers = list(filter(is_odd, numbers))\nprint(filtered_numbers)",
        "output": "def is_odd(number):\n    return number % 2 != 0\n\nnumbers = [1, 2, 3, 4, 5]\nfiltered_numbers = list(filter(is_odd, numbers))\nprint(filtered_numbers)"
    },
    {
        "instruction": "Design a simple calculator program in JavaScript that takes two numbers and a basic arithmetic operation (+, -, *, /) as input and displays the result.",
        "input": "5, 7, '+'",
        "response": "function calculate(num1, num2, operation) {\n    switch (operation) {\n        case '+':\n            return num1 + num2;\n        case '-':\n            return num1 - num2;\n        case '*':\n            return num1 * num2;\n        case '/':\n            return num1 / num2;\n        default:\n            throw new Error('Invalid operation');\n    }}\n\nconst result = calculate(5, 7, '+');\nconsole.log(result);",
        "output": "function calculate(num1, num2, operation) {\n    switch (operation) {\n        case '+':\n            return num1 + num2;\n        case '-':\n            return num1 - num2;\n        case '*':\n            return num1 * num2;\n        case '/':\n            return num1 / num2;\n        default:\n            throw new Error('Invalid operation');\n    }}\n\nconst result = calculate(5, 7, '+');\nconsole.log(result);"
    },
    {
        "instruction": "Create a PHP function to find the factorial of a given number using recursion.",
        "input": "5",
        "response": "<?php\n\nfunction factorial($n) {\n    if ($n === 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$result = factorial(5);\necho 'Factorial of 5: ' . $result;\n\n?>",
        "output": "<?php\n\nfunction factorial($n) {\n    if ($n === 0) {\n        return 1;\n    }\n    return $n * factorial($n - 1);}\n\n$result = factorial(5);\necho 'Factorial of 5: ' . $result;\n\n?>"
    },
    {
        "instruction": "Implement a Python script that utilizes the pandas library to read a CSV file and print the statistics for each column.",
        "input": "filename.csv\nid,age,salary\n1,35,60000\n2,42,80000\n3,28,55000",
        "response": "import pandas as pd\n\nfilename = 'filename.csv'\ndata = pd.read_csv(filename)\n\nstatistics = data.describe()\nprint(statistics)",
        "output": "import pandas as pd\n\nfilename = 'filename.csv'\ndata = pd.read_csv(filename)\n\nstatistics = data.describe()\nprint(statistics)"
    },
    {
        "instruction": "In JavaScript, create a function that calculates the mean value of an array filled with numeric data.",
        "input": "[10, 20, 30, 40, 50]",
        "response": "function calculateMean(array) {\n    const sum = array.reduce((acc, current) => acc + current, 0);\n    const mean = sum / array.length;\n    return mean;}\n\nconst result = calculateMean([10, 20, 30, 40, 50]);\nconsole.log(result);",
        "output": "function calculateMean(array) {\n    const sum = array.reduce((acc, current) => acc + current, 0);\n    const mean = sum / array.length;\n    return mean;}\n\nconst result = calculateMean([10, 20, 30, 40, 50]);\nconsole.log(result);"
    },
    {
        "instruction": "Compose a SQL query that joins two tables 'orders' and 'customers', using the condition that the customer_id field matches.",
        "input": "orders: id, customer_id, total\n1, 1, 150\n2, 2, 75\n3, 3, 90\ncustomers: id, name, email\n1, Alice, alice123@example.com\n2, Bob, bob321@example.com\n3, Carol, carol1998@example.com",
        "response": "SELECT o.id, o.total, c.name, c.email\nFROM orders o\nJOIN customers c ON o.customer_id = c.id;",
        "output": "SELECT o.id, o.total, c.name, c.email\nFROM orders o\nJOIN customers c ON o.customer_id = c.id;"
    },
    {
        "instruction": "Construct a C++ class called Circle with a constructor to set the radius, a method to calculate the area, and another method to calculate the circumference.",
        "input": "",
        "response": "#include <iostream>\n#include <cmath>\n\nclass Circle {\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() {\n        return M_PI * radius * radius;\n    }\n\n    double circumference() {\n        return 2 * M_PI * radius;\n    }\n\nprivate:\n    double radius;};\n\nint main() {\n    Circle c(5);\n    std::cout << \"Area: \" << c.area() << std::endl;\n    std::cout << \"Circumference: \" << c.circumference() << std::endl;}",
        "output": "#include <iostream>\n#include <cmath>\n\nclass Circle {\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() {\n        return M_PI * radius * radius;\n    }\n\n    double circumference() {\n        return 2 * M_PI * radius;\n    }\n\nprivate:\n    double radius;};\n\nint main() {\n    Circle c(5);\n    std::cout << \"Area: \" << c.area() << std::endl;\n    std::cout << \"Circumference: \" << c.circumference() << std::endl;}"
    },
    {
        "instruction": "Design a Python function that calculates the factorial of a given integer n, and implement it recursively.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "In JavaScript, how would you write a function to find the total number of vowels in a given string?",
        "input": "\"hello, world!\"",
        "response": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;}\n\nconst result = countVowels(\"hello, world!\");\nconsole.log(result);",
        "output": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;}\n\nconst result = countVowels(\"hello, world!\");\nconsole.log(result);"
    },
    {
        "instruction": "Craft a shell script that will receive a directory as an argument and print the total count of files, including hidden ones.",
        "input": "/home/user/some_directory",
        "response": "#!/bin/bash\n\ndir=$1\ncount=$(ls -a \"$dir\" | wc -l)\n\necho \"Total files (including hidden): $count\"",
        "output": "#!/bin/bash\n\ndir=$1\ncount=$(ls -a \"$dir\" | wc -l)\n\necho \"Total files (including hidden): $count\""
    },
    {
        "instruction": "Write a C++ program that reads a string from the user and reverses it.",
        "input": "OpenAI",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input;\n    \n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, input);\n\n    std::reverse(input.begin(), input.end());\n\n    std::cout << \"Reversed string: \" << input << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input;\n    \n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, input);\n\n    std::reverse(input.begin(), input.end());\n\n    std::cout << \"Reversed string: \" << input << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a Python function to calculate the factorial of a given non-negative integer using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "What would be the JavaScript code to fetch weather information from the OpenWeatherMap API given an API key and a city name?",
        "input": "{ \"api_key\": \"your_api_key\", \"city\": \"London\" }",
        "response": "async function fetchWeather(api_key, city) {\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_key}`;\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        \n        if (response.status === 200) {\n            console.log('Weather data:', data);\n        } else {\n            console.error('Error fetching weather data:', data.message);\n        }\n    } catch (err) {\n        console.error('Error connecting to OpenWeatherMap API:', err);\n    }}\n\nconst apiKey = 'your_api_key';\nconst cityName = 'London';\nfetchWeather(apiKey, cityName);",
        "output": "async function fetchWeather(api_key, city) {\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_key}`;\n    try {\n        const response = await fetch(apiUrl);\n        const data = await response.json();\n        \n        if (response.status === 200) {\n            console.log('Weather data:', data);\n        } else {\n            console.error('Error fetching weather data:', data.message);\n        }\n    } catch (err) {\n        console.error('Error connecting to OpenWeatherMap API:', err);\n    }}\n\nconst apiKey = 'your_api_key';\nconst cityName = 'London';\nfetchWeather(apiKey, cityName);"
    },
    {
        "instruction": "Craft a Shell script to count the number of lines in a text file.",
        "input": "example.txt (File content: 'Welcome to OpenAI\\nWe are creating AI tools.\\nThis is the GPT-3 model.')",
        "response": "#!/bin/bash\nfilename=\"example.txt\"\n\nif [ -f \"$filename\" ]; then\n    line_count=$(wc -l < \"$filename\")\n    echo \"Number of lines in $filename: $line_count\"\nelse\n    echo \"File $filename not found.\"\nfi",
        "output": "#!/bin/bash\nfilename=\"example.txt\"\n\nif [ -f \"$filename\" ]; then\n    line_count=$(wc -l < \"$filename\")\n    echo \"Number of lines in $filename: $line_count\"\nelse\n    echo \"File $filename not found.\"\nfi"
    },
    {
        "instruction": "How can one implement a simple HTTP server in Node.js?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!');});\n\nconst port = 3000;\nserver.listen(port, () => {\n  console.log(`Simple HTTP server is running on: http://localhost:${port}`);});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!');});\n\nconst port = 3000;\nserver.listen(port, () => {\n  console.log(`Simple HTTP server is running on: http://localhost:${port}`);});"
    },
    {
        "instruction": "Design a Python program that receives a CSV file, reads its content, and displays the average of a specific column.",
        "input": "CSV file content:\nname,age,score\nAlice,24,89\nBob,30,75\nCharlie,22,90",
        "response": "import csv\nfrom io import StringIO\n\ncsv_content = 'name,age,score\\nAlice,24,89\\nBob,30,75\\nCharlie,22,90'\nfile = StringIO(csv_content)\n\ndef calculate_average(column_name, file):\n    reader = csv.DictReader(file)\n    total = 0\n    count = 0\n    for row in reader:\n        total += int(row[column_name])\n        count += 1\n    return total / count if count > 0 else None\n\navg_score = calculate_average('score', file)\nprint(f'The average score is: {avg_score}')",
        "output": "import csv\nfrom io import StringIO\n\ncsv_content = 'name,age,score\\nAlice,24,89\\nBob,30,75\\nCharlie,22,90'\nfile = StringIO(csv_content)\n\ndef calculate_average(column_name, file):\n    reader = csv.DictReader(file)\n    total = 0\n    count = 0\n    for row in reader:\n        total += int(row[column_name])\n        count += 1\n    return total / count if count > 0 else None\n\navg_score = calculate_average('score', file)\nprint(f'The average score is: {avg_score}')"
    },
    {
        "instruction": "Develop a shell script that loops through all files in a directory and calculates the total number of lines in all the files.",
        "input": "Files in the directory:\nfile1.txt: 'line1\\nline2\\nline3'\nfile2.txt: 'line1\\nline2'",
        "response": "#!/bin/bash\n\ndirectory='./'\ntotal_lines=0\n\nfor file in \"$directory\"*; do\n    if [ -f \"$file\" ]; then\n        lines=$(wc -l < \"$file\")\n        total_lines=$((total_lines+lines))\n    fi\ndone\n\necho \"Total lines in all files: $total_lines\"",
        "output": "#!/bin/bash\n\ndirectory='./'\ntotal_lines=0\n\nfor file in \"$directory\"*; do\n    if [ -f \"$file\" ]; then\n        lines=$(wc -l < \"$file\")\n        total_lines=$((total_lines+lines))\n    fi\ndone\n\necho \"Total lines in all files: $total_lines\""
    },
    {
        "instruction": "Design a C++ program that accepts an integer from the user and counts the number of digits in the given integer.",
        "input": "12345",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num;\n    int count = 0;\n\n    cout << \"Enter an integer: \";\n    cin >> num;\n\n    while (num != 0) {\n        num /= 10;\n        count++;\n    }\n\n    cout << \"Number of digits: \" << count << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num;\n    int count = 0;\n\n    cout << \"Enter an integer: \";\n    cin >> num;\n\n    while (num != 0) {\n        num /= 10;\n        count++;\n    }\n\n    cout << \"Number of digits: \" << count << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you construct a Python program to find and display the first n prime numbers?",
        "input": "10",
        "response": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef first_n_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = 10\nresult = first_n_primes(n)\nprint(result)",
        "output": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef first_n_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = 10\nresult = first_n_primes(n)\nprint(result)"
    },
    {
        "instruction": "Fix the following JavaScript code to find and display the factorial of a given number after correcting errors.",
        "input": "5",
        "response": "function factorial(num) {\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    let result = num;\n    for (let i = num - 1; i > 0; i--) {\n        result *= i;\n    }\n    return result;}\n\nconst num = 5;\nconst result = factorial(num);\nconsole.log(`Factorial of ${num} is: ${result}`);",
        "output": "function factorial(num) {\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    let result = num;\n    for (let i = num - 1; i > 0; i--) {\n        result *= i;\n    }\n    return result;}\n\nconst num = 5;\nconst result = factorial(num);\nconsole.log(`Factorial of ${num} is: ${result}`);"
    },
    {
        "instruction": "Write a Shell script that reads a text file and counts the number of lines, words and characters in it.",
        "input": "file.txt (contents): Hello, World!\nThis is a test.\nHave a nice day.",
        "response": "#!/bin/bash\n\nif [ ! -f \"$1\" ]; then\n  echo \"File not found!\"\n  exit 1\nfi\n\nfile=\"$1\"\n\nline_count=$(wc -l < \"$file\")\nword_count=$(wc -w < \"$file\")\nchar_count=$(wc -m < \"$file\")\n\necho \"Lines: ${line_count}\"\necho \"Words: ${word_count}\"\necho \"Characters: ${char_count}\"",
        "output": "#!/bin/bash\n\nif [ ! -f \"$1\" ]; then\n  echo \"File not found!\"\n  exit 1\nfi\n\nfile=\"$1\"\n\nline_count=$(wc -l < \"$file\")\nword_count=$(wc -w < \"$file\")\nchar_count=$(wc -m < \"$file\")\n\necho \"Lines: ${line_count}\"\necho \"Words: ${word_count}\"\necho \"Characters: ${char_count}\""
    },
    {
        "instruction": "Design a Python function that calculates the factorial of a given integer using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)",
        "output": "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(6)\nprint(result)"
    },
    {
        "instruction": "Develop a C# method that reverses a string without using the built-in Reverse() function.",
        "input": "\"HelloWorld\"",
        "response": "public static string ReverseString(string input)\n{\n    char[] inputChars = input.ToCharArray();\n    Array.Reverse(inputChars);\n    return new string(inputChars);}\n\nstring reversedString = ReverseString(\"HelloWorld\");\nConsole.WriteLine(reversedString);",
        "output": "public static string ReverseString(string input)\n{\n    char[] inputChars = input.ToCharArray();\n    Array.Reverse(inputChars);\n    return new string(inputChars);}\n\nstring reversedString = ReverseString(\"HelloWorld\");\nConsole.WriteLine(reversedString);"
    },
    {
        "instruction": "How would you implement a JavaScript code snippet to find the longest word in a given sentence?",
        "input": "\"The quick brown fox jumped over the lazy dogs\"",
        "response": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n    let maxLength = 0;\n\n    for (const word of words) {\n        if (word.length > maxLength) {\n            maxLength = word.length;\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst sentence = \"The quick brown fox jumped over the lazy dogs\";\nconst longestWord = findLongestWord(sentence);\nconsole.log(longestWord);",
        "output": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n    let maxLength = 0;\n\n    for (const word of words) {\n        if (word.length > maxLength) {\n            maxLength = word.length;\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst sentence = \"The quick brown fox jumped over the lazy dogs\";\nconst longestWord = findLongestWord(sentence);\nconsole.log(longestWord);"
    },
    {
        "instruction": "Implement a shell script that counts the number of files and directories in a specified path.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\npath=\"/path/to/directory\"\ndir_count=$(find \"$path\" -type d -print | wc -l)\nfile_count=$(find \"$path\" -type f -print | wc -l)\n\necho \"Directories: $dir_count\"\necho \"Files: $file_count\"",
        "output": "#!/bin/bash\npath=\"/path/to/directory\"\ndir_count=$(find \"$path\" -type d -print | wc -l)\nfile_count=$(find \"$path\" -type f -print | wc -l)\n\necho \"Directories: $dir_count\"\necho \"Files: $file_count\""
    },
    {
        "instruction": "Design a C++ program that reads a user's input for an integer value and returns the factorial of that number using a recursive function.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n);\n\nint main() {\n    int num;\n    cout << \"Enter a positive integer: \";\n    cin >> num;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}"
    },
    {
        "instruction": "Implement a Python script that retrieves the current weather data for a given city using the OpenWeatherMap API.",
        "input": "{\"api_key\": \"your_api_key\", \"city_name\": \"Austin\"}",
        "response": "import requests\nimport json\n\ndata = {'api_key': 'your_api_key', 'city_name': 'Austin'}\n\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={data['city_name']}&appid={data['api_key']}\"\nresponse = requests.get(url)\nweather_data = json.loads(response.content)\n\nprint(weather_data)",
        "output": "import requests\nimport json\n\ndata = {'api_key': 'your_api_key', 'city_name': 'Austin'}\n\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={data['city_name']}&appid={data['api_key']}\"\nresponse = requests.get(url)\nweather_data = json.loads(response.content)\n\nprint(weather_data)"
    },
    {
        "instruction": "How would you handle errors in a Node.js application using Express and properly send a clear error message when a requested route is not found?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n    res.send('Welcome to the homepage!');});\n\n// Other routes go here...\n\n// Handle 404 errors\napp.use((req, res, next) => {\n    res.status(404).send('The requested route was not found');});\n\napp.listen(3000, () => {\n    console.log('App listening on port 3000');});",
        "output": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n    res.send('Welcome to the homepage!');});\n\n// Other routes go here...\n\n// Handle 404 errors\napp.use((req, res, next) => {\n    res.status(404).send('The requested route was not found');});\n\napp.listen(3000, () => {\n    console.log('App listening on port 3000');});"
    },
    {
        "instruction": "Generate a PHP code snippet that demonstrates how to validate an email address.",
        "input": "john@example.com",
        "response": "<?php\n\n$email = \"john@example.com\";\n\nif (filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Valid email address.\";} else {\n    echo \"Invalid email address.\";}\n\n?>",
        "output": "<?php\n\n$email = \"john@example.com\";\n\nif (filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Valid email address.\";} else {\n    echo \"Invalid email address.\";}\n\n?>"
    },
    {
        "instruction": "Create a Python script that reads a CSV file line by line and calculates the average of the values in the second column.",
        "input": "field1,5\nfield1,10\nfield1,15",
        "response": "import csv\n\ndef calculate_average(file_content):\n    total = 0\n    count = 0\n    for row in csv.reader(file_content.strip().split('\\n')):\n        total += float(row[1])\n        count += 1\n    return total / count\n\ncsv_data = \"field1,5\\nfield1,10\\nfield1,15\"\nresult = calculate_average(csv_data)\nprint(result)",
        "output": "import csv\n\ndef calculate_average(file_content):\n    total = 0\n    count = 0\n    for row in csv.reader(file_content.strip().split('\\n')):\n        total += float(row[1])\n        count += 1\n    return total / count\n\ncsv_data = \"field1,5\\nfield1,10\\nfield1,15\"\nresult = calculate_average(csv_data)\nprint(result)"
    },
    {
        "instruction": "Design a C++ program that asks a user for their name and stores that value in a string variable, then outputs a greeting using their input name.",
        "input": "Alice",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    std::cout << \"Please enter your name:\" << std::endl;\n    std::getline(std::cin, name);\n    std::cout << \"Hello, \" << name << \"! Welcome to this C++ program.\" << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    std::cout << \"Please enter your name:\" << std::endl;\n    std::getline(std::cin, name);\n    std::cout << \"Hello, \" << name << \"! Welcome to this C++ program.\" << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a JavaScript function that uses the Fetch API to send a GET request to a specified endpoint and returns the data.",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "async function fetchData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;}\n\nconst endpoint = 'https://jsonplaceholder.typicode.com/todos/1';\nfetchData(endpoint).then((data) => console.log(data));",
        "output": "async function fetchData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;}\n\nconst endpoint = 'https://jsonplaceholder.typicode.com/todos/1';\nfetchData(endpoint).then((data) => console.log(data));"
    },
    {
        "instruction": "How would you write an SQL query that selects all columns from a table named 'employees' where their 'salary' is greater than 50000?",
        "input": "employees\nid,name,salary\n1,John,60000\n2,Jane,40000\n3,Jim,55000",
        "response": "SELECT * FROM employees WHERE salary > 50000;",
        "output": "SELECT * FROM employees WHERE salary > 50000;"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers and returns the squared elements in a new vector.",
        "input": "{3, 2, 5}",
        "response": "#include <iostream>\n#include <vector>\n\nstd::vector<int> square_elements(const std::vector<int>& input) {\n    std::vector<int> squared;\n    for(auto num : input) {\n        squared.push_back(num * num);\n    }\n    return squared;}\n\nint main() {\n    std::vector<int> input = {3, 2, 5};\n    std::vector<int> squared = square_elements(input);\n\n    for(auto num : squared) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}",
        "output": "#include <iostream>\n#include <vector>\n\nstd::vector<int> square_elements(const std::vector<int>& input) {\n    std::vector<int> squared;\n    for(auto num : input) {\n        squared.push_back(num * num);\n    }\n    return squared;}\n\nint main() {\n    std::vector<int> input = {3, 2, 5};\n    std::vector<int> squared = square_elements(input);\n\n    for(auto num : squared) {\n        std::cout << num << ' ';\n    }\n\n    return 0;}"
    },
    {
        "instruction": "Design a JavaScript function that reverses the order of words in a given sentence.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');}\n\nconst input = 'The quick brown fox jumps over the lazy dog';\nconst reversed = reverseWords(input);\nconsole.log(reversed);",
        "output": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');}\n\nconst input = 'The quick brown fox jumps over the lazy dog';\nconst reversed = reverseWords(input);\nconsole.log(reversed);"
    },
    {
        "instruction": "How would you write a Python function that validates whether a given password has at least 8 characters, including at least one uppercase letter, one lowercase letter, one number, and one special character?",
        "input": "P@ssw0rd1",
        "response": "import re\n\ndef is_valid_password(password):\n    if len(password) < 8:\n        return False\n\n    has_uppercase = re.search(r'[A-Z]', password)\n    has_lowercase = re.search(r'[a-z]', password)\n    has_number = re.search(r'[0-9]', password)\n    has_special_char = re.search(r'[!@#$%^&*()]', password)\n\n    return has_uppercase and has_lowercase and has_special_char and has_number\n\npassword = 'P@ssw0rd1'\nprint(is_valid_password(password))",
        "output": "import re\n\ndef is_valid_password(password):\n    if len(password) < 8:\n        return False\n\n    has_uppercase = re.search(r'[A-Z]', password)\n    has_lowercase = re.search(r'[a-z]', password)\n    has_number = re.search(r'[0-9]', password)\n    has_special_char = re.search(r'[!@#$%^&*()]', password)\n\n    return has_uppercase and has_lowercase and has_special_char and has_number\n\npassword = 'P@ssw0rd1'\nprint(is_valid_password(password))"
    },
    {
        "instruction": "Construct a shell script that takes a file name as an argument and outputs the file's word count.",
        "input": "file.txt",
        "response": "#!/bin/sh\n\nif [ -z \"$1\" ]\nthen\n  echo \"Usage: $0 file\"\n  exit 1\nfi\n\nword_count=$(cat \"$1\" | wc -w)\necho \"Word count of file '$1': $word_count\"",
        "output": "#!/bin/sh\n\nif [ -z \"$1\" ]\nthen\n  echo \"Usage: $0 file\"\n  exit 1\nfi\n\nword_count=$(cat \"$1\" | wc -w)\necho \"Word count of file '$1': $word_count\""
    },
    {
        "instruction": "Implement a C++ program that finds and outputs the largest prime number less than a given integer.",
        "input": "50",
        "response": "#include <iostream>\n#include <math.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;}\n\nint find_largest_prime(int limit) {\n    for (int i = limit - 1; i > 1; i--) {\n        if (is_prime(i)) return i;\n    }\n    return -1;}\n\nint main() {\n    int limit = 50;\n    int largest_prime = find_largest_prime(limit);\n    std::cout << largest_prime << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <math.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;}\n\nint find_largest_prime(int limit) {\n    for (int i = limit - 1; i > 1; i--) {\n        if (is_prime(i)) return i;\n    }\n    return -1;}\n\nint main() {\n    int limit = 50;\n    int largest_prime = find_largest_prime(limit);\n    std::cout << largest_prime << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Design a Python function that calculates the sum of even numbers within an input list of integers.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def sum_even_numbers(numbers):\n    return sum([num for num in numbers if num % 2 == 0])\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_even_numbers(numbers)\nprint(result)",
        "output": "def sum_even_numbers(numbers):\n    return sum([num for num in numbers if num % 2 == 0])\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_even_numbers(numbers)\nprint(result)"
    },
    {
        "instruction": "Write a PHP function which accepts a CSV file and returns the read data in the form of an associative array.",
        "input": "sample.csv",
        "response": "<?php\n\nfunction read_csv($filename) {\n    $csv_data = [];\n\n    if (($handle = fopen($filename, 'r')) !== false) {\n        $headers = fgetcsv($handle, 1000, ',');\n\n        while (($data = fgetcsv($handle, 1000, ',')) !== false) {\n            $row = [];\n            for ($i = 0; $i < count($headers); $i++) {\n                $row[$headers[$i]] = $data[$i];\n            }\n            $csv_data[] = $row;\n        }\n        fclose($handle);\n    }\n\n    return $csv_data;}\n\n$csv_data = read_csv('sample.csv');\nprint_r($csv_data);\n\n?>",
        "output": "<?php\n\nfunction read_csv($filename) {\n    $csv_data = [];\n\n    if (($handle = fopen($filename, 'r')) !== false) {\n        $headers = fgetcsv($handle, 1000, ',');\n\n        while (($data = fgetcsv($handle, 1000, ',')) !== false) {\n            $row = [];\n            for ($i = 0; $i < count($headers); $i++) {\n                $row[$headers[$i]] = $data[$i];\n            }\n            $csv_data[] = $row;\n        }\n        fclose($handle);\n    }\n\n    return $csv_data;}\n\n$csv_data = read_csv('sample.csv');\nprint_r($csv_data);\n\n?>"
    },
    {
        "instruction": "Can you provide a JavaScript function that takes a string as input and returns the count of vowels in the string?",
        "input": "This is an example sentence",
        "response": "function count_vowels(str) {\n    const vowels = 'aeiouAEIOU';\n\n    let count = 0;\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n\n    return count;}\n\nconst input_string = 'This is an example sentence';\nconst vowels_count = count_vowels(input_string);\nconsole.log(vowels_count);",
        "output": "function count_vowels(str) {\n    const vowels = 'aeiouAEIOU';\n\n    let count = 0;\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n\n    return count;}\n\nconst input_string = 'This is an example sentence';\nconst vowels_count = count_vowels(input_string);\nconsole.log(vowels_count);"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a positive integer.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "How would you implement a Python script that downloads and saves a file from a given URL?",
        "input": "https://example.com/file.txt",
        "response": "import requests\n\nurl = 'https://example.com/file.txt'\nresponse = requests.get(url)\n\nwith open('downloaded_file.txt', 'wb') as f:\n    f.write(response.content)\n\nprint('File downloaded successfully: downloaded_file.txt')",
        "output": "import requests\n\nurl = 'https://example.com/file.txt'\nresponse = requests.get(url)\n\nwith open('downloaded_file.txt', 'wb') as f:\n    f.write(response.content)\n\nprint('File downloaded successfully: downloaded_file.txt')"
    },
    {
        "instruction": "Design a JavaScript function responsible for capitalizing the first letter of each word in a given sentence.",
        "input": "the quick brown fox jumps over the lazy dog",
        "response": "function capitalizeFirstLetters(sentence) {\n    const words = sentence.split(' ');\n    const capitalizedWords = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));\n    return capitalizedWords.join(' ');}\n\nconst input = 'the quick brown fox jumps over the lazy dog';\nconst result = capitalizeFirstLetters(input);\nconsole.log(result);",
        "output": "function capitalizeFirstLetters(sentence) {\n    const words = sentence.split(' ');\n    const capitalizedWords = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));\n    return capitalizedWords.join(' ');}\n\nconst input = 'the quick brown fox jumps over the lazy dog';\nconst result = capitalizeFirstLetters(input);\nconsole.log(result);"
    },
    {
        "instruction": "Create a shell script that displays the total size of all files in a directory passed as an argument, including subdirectories.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nif [ \"$#\" != 1 ]; then\n    echo \"Usage: $0 <directory>\"\n    exit 1\nfi\n\ndirectory=\"$1\"\ntotal_size=$(du -sk \"$directory\" | awk '{print $1}')\n\necho \"Total size of $directory (including subdirectories): ${total_size}KB\"",
        "output": "#!/bin/bash\n\nif [ \"$#\" != 1 ]; then\n    echo \"Usage: $0 <directory>\"\n    exit 1\nfi\n\ndirectory=\"$1\"\ntotal_size=$(du -sk \"$directory\" | awk '{print $1}')\n\necho \"Total size of $directory (including subdirectories): ${total_size}KB\""
    },
    {
        "instruction": "Write a Python script to read a CSV file and filter rows based on a specific column value.",
        "input": "filename: \"data.csv\", column_name: \"status\", filter_value: \"active\"",
        "response": "import csv\n\ndef filter_csv_rows(filename, column_name, filter_value):\n    with open(filename, 'r') as file:\n        reader = csv.DictReader(file)\n        filtered_rows = [row for row in reader if row[column_name] == filter_value]\n    return filtered_rows\n\nfiltered_data = filter_csv_rows(\"data.csv\", \"status\", \"active\")\nfor row in filtered_data:\n    print(row)",
        "output": "import csv\n\ndef filter_csv_rows(filename, column_name, filter_value):\n    with open(filename, 'r') as file:\n        reader = csv.DictReader(file)\n        filtered_rows = [row for row in reader if row[column_name] == filter_value]\n    return filtered_rows\n\nfiltered_data = filter_csv_rows(\"data.csv\", \"status\", \"active\")\nfor row in filtered_data:\n    print(row)"
    },
    {
        "instruction": "Develop a JavaScript function to parse a URL and return an object containing its various components.",
        "input": "https://example.com:8080/path/page?query=value#fragment",
        "response": "function parseURL(url) {\n    const urlElement = document.createElement('a');\n    urlElement.href = url;\n    return {\n        protocol: urlElement.protocol,\n        hostname: urlElement.hostname,\n        port: urlElement.port,\n        pathname: urlElement.pathname,\n        search: urlElement.search,\n        hash: urlElement.hash\n    };}\n\nconst parsedUrl = parseURL('https://example.com:8080/path/page?query=value#fragment');\nconsole.log(parsedUrl);",
        "output": "function parseURL(url) {\n    const urlElement = document.createElement('a');\n    urlElement.href = url;\n    return {\n        protocol: urlElement.protocol,\n        hostname: urlElement.hostname,\n        port: urlElement.port,\n        pathname: urlElement.pathname,\n        search: urlElement.search,\n        hash: urlElement.hash\n    };}\n\nconst parsedUrl = parseURL('https://example.com:8080/path/page?query=value#fragment');\nconsole.log(parsedUrl);"
    },
    {
        "instruction": "Implement a Java class for a simple calculator with methods for addition, subtraction, multiplication, and division.",
        "input": "num1: 10, num2: 5, operation: \"addition\"",
        "response": "public class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public double divide(double a, double b) {\n        if (b == 0) {\n            throw new IllegalArgumentException(\"Cannot divide by zero\");\n        }\n        return a / b;\n    }\n\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 10;\n        double num2 = 5;\n        String operation = \"addition\";\n        double result;\n        switch (operation) {\n            case \"addition\":\n                result = calculator.add(num1, num2);\n                break;\n            case \"subtraction\":\n                result = calculator.subtract(num1, num2);\n                break;\n            case \"multiplication\":\n                result = calculator.multiply(num1, num2);\n                break;\n            case \"division\":\n                result = calculator.divide(num1, num2);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid operation: \" + operation);\n        }\n        System.out.println(result);\n    }}",
        "output": "public class SimpleCalculator {\n    public double add(double a, double b) {\n        return a + b;\n    }\n\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public double divide(double a, double b) {\n        if (b == 0) {\n            throw new IllegalArgumentException(\"Cannot divide by zero\");\n        }\n        return a / b;\n    }\n\n    public static void main(String[] args) {\n        SimpleCalculator calculator = new SimpleCalculator();\n        double num1 = 10;\n        double num2 = 5;\n        String operation = \"addition\";\n        double result;\n        switch (operation) {\n            case \"addition\":\n                result = calculator.add(num1, num2);\n                break;\n            case \"subtraction\":\n                result = calculator.subtract(num1, num2);\n                break;\n            case \"multiplication\":\n                result = calculator.multiply(num1, num2);\n                break;\n            case \"division\":\n                result = calculator.divide(num1, num2);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid operation: \" + operation);\n        }\n        System.out.println(result);\n    }}"
    },
    {
        "instruction": "Write a Shell script that takes two arguments, the first is the name of a directory and the second is the extension of the files you want to list. The script should list all the files inside the specified directory with the given extension.",
        "input": "directory: \"/home/user/documents\", extension: \".pdf\"",
        "response": "#!/bin/sh\n\ndirectory=\"$1\"\nextension=\"$2\"\n\nfind \"$directory\" -type f -name \"*$extension\"\n\n# Run the script with the following command in the terminal:\n# sh script.sh /home/user/documents .pdf",
        "output": "#!/bin/sh\n\ndirectory=\"$1\"\nextension=\"$2\"\n\nfind \"$directory\" -type f -name \"*$extension\"\n\n# Run the script with the following command in the terminal:\n# sh script.sh /home/user/documents .pdf"
    },
    {
        "instruction": "Implement a C++ program that reads two integers and displays their product on the screen.",
        "input": "8, 12",
        "response": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n    cout << \"The product is: \" << a * b << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n    cout << \"The product is: \" << a * b << endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you write a PHP script that calculates and prints the square of a given integer?",
        "input": "5",
        "response": "<?php\n\nfunction square($n) {\n    return $n * $n;\n}\n\n$number = 5;\n$result = square($number);\necho \"The square of $number is: \" . $result;\n\n?>",
        "output": "<?php\n\nfunction square($n) {\n    return $n * $n;\n}\n\n$number = 5;\n$result = square($number);\necho \"The square of $number is: \" . $result;\n\n?>"
    },
    {
        "instruction": "Design a Bash script that accepts a filename as an argument and displays the number of lines containing a specific word.",
        "input": "file.txt, 'hello'",
        "response": "#!/bin/bash\n\nFILENAME=$1\nWORD=$2\n\nCOUNT=$(grep -i -c \"$WORD\" $FILENAME)\n\necho \"Number of lines containing the word '$WORD': $COUNT\"",
        "output": "#!/bin/bash\n\nFILENAME=$1\nWORD=$2\n\nCOUNT=$(grep -i -c \"$WORD\" $FILENAME)\n\necho \"Number of lines containing the word '$WORD': $COUNT\""
    },
    {
        "instruction": "Write a Swift function that accepts an array of integers and returns the average of all positive elements.",
        "input": "[4, -3, 2, 0, 10, -8]",
        "response": "func averageOfPositiveElements(arr: [Int]) -> Double {\n    let sum = arr.filter { $0 > 0 }.reduce(0, +)\n    let count = arr.filter { $0 > 0 }.count\n    return Double(sum) / Double(count)\n}\n\nlet result = averageOfPositiveElements(arr: [4, -3, 2, 0, 10, -8])\nprint(result)",
        "output": "func averageOfPositiveElements(arr: [Int]) -> Double {\n    let sum = arr.filter { $0 > 0 }.reduce(0, +)\n    let count = arr.filter { $0 > 0 }.count\n    return Double(sum) / Double(count)\n}\n\nlet result = averageOfPositiveElements(arr: [4, -3, 2, 0, 10, -8])\nprint(result)"
    },
    {
        "instruction": "Write a Python script that replaces all occurrences of a given word in a text file with another word, and saves the modified content to a new file.",
        "input": "source.txt, 'apple', 'banana', target.txt",
        "response": "def replace_words(src_file, old_word, new_word, tgt_file):\n    with open(src_file, 'r') as f:\n        content = f.read()\n    \n    modified_content = content.replace(old_word, new_word)\n    \n    with open(tgt_file, 'w') as f:\n        f.write(modified_content)\n\nreplace_words('source.txt', 'apple', 'banana', 'target.txt')",
        "output": "def replace_words(src_file, old_word, new_word, tgt_file):\n    with open(src_file, 'r') as f:\n        content = f.read()\n    \n    modified_content = content.replace(old_word, new_word)\n    \n    with open(tgt_file, 'w') as f:\n        f.write(modified_content)\n\nreplace_words('source.txt', 'apple', 'banana', 'target.txt')"
    },
    {
        "instruction": "Implement a C++ function that computes the factorial of a given positive integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << 'Factorial of ' << num << ' is ' << factorial(num) << std::endl;\n    return 0}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << 'Factorial of ' << num << ' is ' << factorial(num) << std::endl;\n    return 0}"
    },
    {
        "instruction": "How can you use the jQuery library to get the value of an HTML input field with the ID 'username'?",
        "input": "<input type='text' id='username' value='JohnDoe'>",
        "response": "$(document).ready(function() {\n    var username = $('#username').val();\n    console.log(username);});",
        "output": "$(document).ready(function() {\n    var username = $('#username').val();\n    console.log(username);});"
    },
    {
        "instruction": "Create a Node.js script that reads the content of a text file and logs the number of lines, words, and characters in the file.",
        "input": "example.txt",
        "response": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n    if (err) throw err;\n    \n    const lines = data.split('\\n');\n    const words = data.split(/\\s+/);\n    const characters = data.replace(/\\s+/g, '');\n\n    console.log(`Lines: ${lines.length}`);\n    console.log(`Words: ${words.length}`);\n    console.log(`Characters: ${characters.length}`);});",
        "output": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n    if (err) throw err;\n    \n    const lines = data.split('\\n');\n    const words = data.split(/\\s+/);\n    const characters = data.replace(/\\s+/g, '');\n\n    console.log(`Lines: ${lines.length}`);\n    console.log(`Words: ${words.length}`);\n    console.log(`Characters: ${characters.length}`);});"
    },
    {
        "instruction": "Implement a PHP function to convert an input string to title case.",
        "input": "this is a string",
        "response": "<?php\nfunction to_title_case($str) {\n    return ucwords(strtolower($str));}\n\n$input = \"this is a string\";\n$result = to_title_case($input);\necho $result;\n?>",
        "output": "<?php\nfunction to_title_case($str) {\n    return ucwords(strtolower($str));}\n\n$input = \"this is a string\";\n$result = to_title_case($input);\necho $result;\n?>"
    },
    {
        "instruction": "Provide the code to create a SQL database table named 'employees' with columns: id (integer), first_name (text), last_name (text), and email (text).",
        "input": "",
        "response": "CREATE TABLE employees (\n    id INTEGER PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    email TEXT NOT NULL UNIQUE\n);",
        "output": "CREATE TABLE employees (\n    id INTEGER PRIMARY KEY,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    email TEXT NOT NULL UNIQUE\n);"
    },
    {
        "instruction": "How would you write a Bash script that takes a directory path as an argument and finds all files in it that are larger than 1MB?",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nDIRECTORY=$1\n\nif [ -d \"$DIRECTORY\" ]; then\n    find \"$DIRECTORY\" -type f -size +1M\nelse\n    echo \"Directory not found.\"\nfi",
        "output": "#!/bin/bash\n\nDIRECTORY=$1\n\nif [ -d \"$DIRECTORY\" ]; then\n    find \"$DIRECTORY\" -type f -size +1M\nelse\n    echo \"Directory not found.\"\nfi"
    },
    {
        "instruction": "Generate a C++ function that takes a string as input and returns a string with all vowels replaced by the character 'x'.",
        "input": "\"Computational Linguistics\"",
        "response": "#include <iostream>\n#include <string>\n\nstd::string replace_vowels(std::string input) {\n    std::string vowels = \"AEIOUaeiou\";\n    for (char &c : input) {\n        if (vowels.find(c) != std::string::npos) {\n            c = 'x';\n        }\n    }\n    return input;}\n\nint main() {\n    std::string str = \"Computational Linguistics\";\n    std::string result = replace_vowels(str);\n    std::cout << result << std::endl;}",
        "output": "#include <iostream>\n#include <string>\n\nstd::string replace_vowels(std::string input) {\n    std::string vowels = \"AEIOUaeiou\";\n    for (char &c : input) {\n        if (vowels.find(c) != std::string::npos) {\n            c = 'x';\n        }\n    }\n    return input;}\n\nint main() {\n    std::string str = \"Computational Linguistics\";\n    std::string result = replace_vowels(str);\n    std::cout << result << std::endl;}"
    },
    {
        "instruction": "How would you implement a simple web server in Node.js that serves a static HTML page?",
        "input": "\"./index.html\"",
        "response": "const http = require('http');\nconst fs = require('fs');\n\nconst server = http.createServer((req, res) => {\n    fs.readFile('./index.html', 'utf8', (err, data) => {\n        if (err) {\n            res.writeHead(404);\n            res.end('File not found');\n        } else {\n            res.writeHead(200, {'Content-Type': 'text/html'});\n            res.end(data);\n        }\n    });});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});",
        "output": "const http = require('http');\nconst fs = require('fs');\n\nconst server = http.createServer((req, res) => {\n    fs.readFile('./index.html', 'utf8', (err, data) => {\n        if (err) {\n            res.writeHead(404);\n            res.end('File not found');\n        } else {\n            res.writeHead(200, {'Content-Type': 'text/html'});\n            res.end(data);\n        }\n    });});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');});"
    },
    {
        "instruction": "Write a Bash script that converts a given directory of images from one format (e.g., jpg) to another format (e.g, png) using the 'convert' command from ImageMagick.",
        "input": "\"images\",\n\"jpg\",\n\"png\"",
        "response": "#!/bin/bash\n\ninput_dir=\"images\"\ninput_format=\"jpg\"\noutput_format=\"png\"\n\nmkdir -p \"${input_dir}/${output_format}\"\n\nfor file in \"${input_dir}\"/*.\"${input_format}\"\ndo\n    filename=$(basename \"${file}\" .\"${input_format}\")\n    convert \"${file}\" \"${input_dir}/${output_format}/${filename}.${output_format}\"\ndone\n\necho 'Conversion complete.'",
        "output": "#!/bin/bash\n\ninput_dir=\"images\"\ninput_format=\"jpg\"\noutput_format=\"png\"\n\nmkdir -p \"${input_dir}/${output_format}\"\n\nfor file in \"${input_dir}\"/*.\"${input_format}\"\ndo\n    filename=$(basename \"${file}\" .\"${input_format}\")\n    convert \"${file}\" \"${input_dir}/${output_format}/${filename}.${output_format}\"\ndone\n\necho 'Conversion complete.'"
    },
    {
        "instruction": "Design a SQL query that retrieves the top 10 highest-scoring users from a 'users' table with columns 'userID', 'username', and 'score'.",
        "input": "`users`\n`userID`\n`username`\n`score`",
        "response": "SELECT userID, username, score\nFROM users\nORDER BY score DESC\nLIMIT 10;",
        "output": "SELECT userID, username, score\nFROM users\nORDER BY score DESC\nLIMIT 10;"
    },
    {
        "instruction": "Write a C++ function that takes an integer n and returns the nth Fibonacci number.",
        "input": "10",
        "response": "#include <iostream>\nusing namespace std;\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nint main() {\n    int n = 10;\n    cout << \"The nth Fibonacci number is: \" << fibonacci(n) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);}\n\nint main() {\n    int n = 10;\n    cout << \"The nth Fibonacci number is: \" << fibonacci(n) << endl;\n    return 0;}"
    },
    {
        "instruction": "Implement a Python script that reads a text file and outputs the frequency of words in descending order.",
        "input": "file.txt (content: 'This is a sample text file. This file contains sample text.')",
        "response": "import collections\nimport re\n\nwith open('file.txt', 'r') as file:\n    text = file.read().lower()\n    words = re.findall(r'\\w+', text)\n    word_count = collections.Counter(words)\n\nsorted_word_frequency = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\nfor word, count in sorted_word_frequency:\n    print(f\"{word}: {count}\")",
        "output": "import collections\nimport re\n\nwith open('file.txt', 'r') as file:\n    text = file.read().lower()\n    words = re.findall(r'\\w+', text)\n    word_count = collections.Counter(words)\n\nsorted_word_frequency = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\nfor word, count in sorted_word_frequency:\n    print(f\"{word}: {count}\")"
    },
    {
        "instruction": "How can I implement a function in JavaScript that takes a string as input and returns the longest word in the string?",
        "input": "\"The quick brown fox jumped over the lazy dog\"",
        "response": "function findLongestWord(str) {\n    const words = str.split(' ');\n    let longestWord = '';\n\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst input = \"The quick brown fox jumped over the lazy dog\";\nconst longestWord = findLongestWord(input);\nconsole.log(longestWord);",
        "output": "function findLongestWord(str) {\n    const words = str.split(' ');\n    let longestWord = '';\n\n    for (const word of words) {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    }\n\n    return longestWord;}\n\nconst input = \"The quick brown fox jumped over the lazy dog\";\nconst longestWord = findLongestWord(input);\nconsole.log(longestWord);"
    },
    {
        "instruction": "Write a PHP script to display the current date and time in the following format: 'Today is: Monday, 25th of March 2022, 15:30:40'",
        "input": "",
        "response": "<?php\n\ndate_default_timezone_set('UTC');\necho \"Today is: \" . date('l, jS \\o\\f F Y, H:i:s');\n\n?>",
        "output": "<?php\n\ndate_default_timezone_set('UTC');\necho \"Today is: \" . date('l, jS \\o\\f F Y, H:i:s');\n\n?>"
    },
    {
        "instruction": "Write a C# method that takes a list of strings and returns a dictionary containing the frequency of each string in the list.",
        "input": "['apple', 'orange', 'banana', 'apple', 'orange', 'apple']",
        "response": "using System;\nusing System.Collections.Generic;\n\npublic class StringFrequency\n{\n    public static Dictionary<string, int> CountFrequency(List<string> list)\n    {\n        Dictionary<string, int> frequencyDict = new Dictionary<string, int>();\n\n        foreach (string element in list)\n        {\n            if (frequencyDict.ContainsKey(element))\n            {\n                frequencyDict[element]++;\n            }\n            else\n            {\n                frequencyDict[element] = 1;\n            }\n        }\n\n        return frequencyDict;\n    }\n\n    public static void Main()\n    {\n        List<string> fruits = new List<string> { 'apple', 'orange', 'banana', 'apple', 'orange', 'apple' };\n        Dictionary<string, int> result = CountFrequency(fruits);\n        foreach (KeyValuePair<string, int> entry in result)\n        {\n            Console.WriteLine('{0}: {1}', entry.Key, entry.Value);\n        }\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\npublic class StringFrequency\n{\n    public static Dictionary<string, int> CountFrequency(List<string> list)\n    {\n        Dictionary<string, int> frequencyDict = new Dictionary<string, int>();\n\n        foreach (string element in list)\n        {\n            if (frequencyDict.ContainsKey(element))\n            {\n                frequencyDict[element]++;\n            }\n            else\n            {\n                frequencyDict[element] = 1;\n            }\n        }\n\n        return frequencyDict;\n    }\n\n    public static void Main()\n    {\n        List<string> fruits = new List<string> { 'apple', 'orange', 'banana', 'apple', 'orange', 'apple' };\n        Dictionary<string, int> result = CountFrequency(fruits);\n        foreach (KeyValuePair<string, int> entry in result)\n        {\n            Console.WriteLine('{0}: {1}', entry.Key, entry.Value);\n        }\n    }}"
    },
    {
        "instruction": "Develop a Python script that reads the content of a text file and displays the number of lines, the number of words, and the number of characters in the file. Do not count whitespace characters.",
        "input": "file_path = 'path/to/your/text-file.txt'",
        "response": "def file_summary(file_path):\n    with open(file_path, 'r') as file:\n        \n        lines = file.readlines()\n        line_count = len(lines)\n        word_count = sum(len(line.split()) for line in lines)\n        char_count = sum(len(word) for line in lines for word in line.split())\n        \n        return line_count, word_count, char_count\n\nfile_path = 'path/to/your/text-file.txt'\nline_count, word_count, char_count = file_summary(file_path)\n\nprint(f'Lines: {line_count}')\nprint(f'Words: {word_count}')\nprint(f'Characters: {char_count}')",
        "output": "def file_summary(file_path):\n    with open(file_path, 'r') as file:\n        \n        lines = file.readlines()\n        line_count = len(lines)\n        word_count = sum(len(line.split()) for line in lines)\n        char_count = sum(len(word) for line in lines for word in line.split())\n        \n        return line_count, word_count, char_count\n\nfile_path = 'path/to/your/text-file.txt'\nline_count, word_count, char_count = file_summary(file_path)\n\nprint(f'Lines: {line_count}')\nprint(f'Words: {word_count}')\nprint(f'Characters: {char_count}')"
    },
    {
        "instruction": "Implement a JavaScript function that creates an HTML table from a 2D array of strings. The function should return a string containing the generated HTML markup.",
        "input": "[['Name', 'Age', 'City'], ['Alice', '30', 'New York'], ['Bob', '25', 'San Francisco']]",
        "response": "function generateHTMLTable(data) {\n    let table = '<table>';\n\n    for (const row of data) {\n        let tr = '<tr>';\n        for (const cell of row) {\n            tr += `<td>${cell}</td>`;\n        }\n        tr += '</tr>';\n        table += tr;\n    }\n\n    table += '</table>';\n    return table;}\n\nconst data = [['Name', 'Age', 'City'], ['Alice', '30', 'New York'], ['Bob', '25', 'San Francisco']];\nconst htmlTable = generateHTMLTable(data);\ndocument.body.innerHTML = htmlTable;",
        "output": "function generateHTMLTable(data) {\n    let table = '<table>';\n\n    for (const row of data) {\n        let tr = '<tr>';\n        for (const cell of row) {\n            tr += `<td>${cell}</td>`;\n        }\n        tr += '</tr>';\n        table += tr;\n    }\n\n    table += '</table>';\n    return table;}\n\nconst data = [['Name', 'Age', 'City'], ['Alice', '30', 'New York'], ['Bob', '25', 'San Francisco']];\nconst htmlTable = generateHTMLTable(data);\ndocument.body.innerHTML = htmlTable;"
    },
    {
        "instruction": "Create a shell script to find and display the largest file in a given directory.",
        "input": "directory_path='/path/to/your/directory'",
        "response": "#!/bin/bash\n\ndirectory_path='/path/to/your/directory'\nlargest_file=''\nlargest_size=0\n\nfor file in \"$directory_path\"/*; do\n    if [[ -f \"$file\" ]]; then\n        size=$(stat -c%s \"$file\")\n        if (( size > largest_size )); then\n            largest_size=$size\n            largest_file=$file\n        fi\n    fi\ndone\n\necho \"Largest file: $largest_file\"\necho \"Size: $largest_size bytes\"",
        "output": "#!/bin/bash\n\ndirectory_path='/path/to/your/directory'\nlargest_file=''\nlargest_size=0\n\nfor file in \"$directory_path\"/*; do\n    if [[ -f \"$file\" ]]; then\n        size=$(stat -c%s \"$file\")\n        if (( size > largest_size )); then\n            largest_size=$size\n            largest_file=$file\n        fi\n    fi\ndone\n\necho \"Largest file: $largest_file\"\necho \"Size: $largest_size bytes\""
    },
    {
        "instruction": "Create a C++ program that calculates the factorial of a given integer using a recursive function.",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" = \" << factorial(num) << std::endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}",
        "output": "#include <iostream>\n\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" = \" << factorial(num) << std::endl;\n    return 0;}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}"
    },
    {
        "instruction": "Generate a Python script that reads a text file, line by line, and prints each line's length.",
        "input": "example.txt: \"Hello, world!\nThis is a text file.\nHave a great day!\"",
        "response": "with open('example.txt', 'r') as file:\n    for line in file:\n        print(len(line.strip()))",
        "output": "with open('example.txt', 'r') as file:\n    for line in file:\n        print(len(line.strip()))"
    },
    {
        "instruction": "How would you write a JavaScript function that takes a URL as input and returns a Promise that fetches the data from the URL?",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return response.json();\n    } catch (error) {\n        console.error('Fetch error:', error);\n    }}\n\nfetchData('https://jsonplaceholder.typicode.com/todos/1').then(data => console.log(data));",
        "output": "async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return response.json();\n    } catch (error) {\n        console.error('Fetch error:', error);\n    }}\n\nfetchData('https://jsonplaceholder.typicode.com/todos/1').then(data => console.log(data));"
    },
    {
        "instruction": "Construct a Bash script that loops through all files and directories in the current directory, printing the type of each entry.",
        "input": "",
        "response": "#!/bin/bash\n\nfor entry in *; do\n    if [ -f \"$entry\" ]; then\n        echo \"$entry is a file\"\n    elif [ -d \"$entry\" ]; then\n        echo \"$entry is a directory\"\n    else\n        echo \"$entry is of an unknown type\"\n    fi\ndone",
        "output": "#!/bin/bash\n\nfor entry in *; do\n    if [ -f \"$entry\" ]; then\n        echo \"$entry is a file\"\n    elif [ -d \"$entry\" ]; then\n        echo \"$entry is a directory\"\n    else\n        echo \"$entry is of an unknown type\"\n    fi\ndone"
    },
    {
        "instruction": "Implement a C++ function that accepts a string as input and counts the number of vowels in it.",
        "input": "\"This is an example.\"",
        "response": "#include <iostream>\n#include <string>\n\nint count_vowels(const std::string &input) {\n    int vowels_count = 0;\n    for (char ch : input) {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||\n            ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n            vowels_count++;\n        }\n    }\n    return vowels_count;}\n\nint main() {\n    std::string input = \"This is an example.\";\n    std::cout << \"Number of vowels: \" << count_vowels(input) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <string>\n\nint count_vowels(const std::string &input) {\n    int vowels_count = 0;\n    for (char ch : input) {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||\n            ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n            vowels_count++;\n        }\n    }\n    return vowels_count;}\n\nint main() {\n    std::string input = \"This is an example.\";\n    std::cout << \"Number of vowels: \" << count_vowels(input) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a C# method that takes a list of integers and returns a new list containing only the even numbers.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "using System;\nusing System.Collections.Generic;\n\nclass MainClass {\n    public static List<int> GetEvenNumbers(List<int> input) {\n        List<int> even_numbers = new List<int>();\n        foreach (int num in input) {\n            if (num % 2 == 0) {\n                even_numbers.Add(num);\n            }\n        }\n        return even_numbers;\n    }\n\n    public static void Main(string[] args) {\n        List<int> nums = new List<int> {1, 2, 3, 4, 5, 6};\n        List<int> even_nums = GetEvenNumbers(nums);\n        Console.WriteLine(string.Join(\", \", even_nums));\n    }}",
        "output": "using System;\nusing System.Collections.Generic;\n\nclass MainClass {\n    public static List<int> GetEvenNumbers(List<int> input) {\n        List<int> even_numbers = new List<int>();\n        foreach (int num in input) {\n            if (num % 2 == 0) {\n                even_numbers.Add(num);\n            }\n        }\n        return even_numbers;\n    }\n\n    public static void Main(string[] args) {\n        List<int> nums = new List<int> {1, 2, 3, 4, 5, 6};\n        List<int> even_nums = GetEvenNumbers(nums);\n        Console.WriteLine(string.Join(\", \", even_nums));\n    }}"
    },
    {
        "instruction": "Could you create a shell script to calculate the factorial of a given integer?",
        "input": "5",
        "response": "#!/bin/bash\n\nfunction factorial() {\n    local num=$1\n    if [ $num -eq 0 ]; then\n        echo 1\n    else\n        echo $((num * $(factorial $((num - 1)))))\n    fi}\n\ninput=5\nresult=$(factorial $input)\necho \"Factorial of $input is $result\"",
        "output": "#!/bin/bash\n\nfunction factorial() {\n    local num=$1\n    if [ $num -eq 0 ]; then\n        echo 1\n    else\n        echo $((num * $(factorial $((num - 1)))))\n    fi}\n\ninput=5\nresult=$(factorial $input)\necho \"Factorial of $input is $result\""
    },
    {
        "instruction": "Write a PHP function that takes a sentence as input and returns the number of words in the sentence with a specific length provided by the caller.",
        "input": "\"This is a GPT model evaluation input.\"",
        "response": "<?php\nfunction count_words_with_length(string $sentence, int $length): int {\n    $words = explode(' ', $sentence);\n    $count = 0;\n    foreach ($words as $word) {\n        if (strlen($word) == $length) {\n            $count++;\n        }\n    }\n    return $count;}\n\n$input = 'This is a GPT model evaluation input.';\n$requested_word_length = 4;\n$result = count_words_with_length($input, $requested_word_length);\necho 'Number of words with length ' . $requested_word_length . ': ' . $result;\n?>",
        "output": "<?php\nfunction count_words_with_length(string $sentence, int $length): int {\n    $words = explode(' ', $sentence);\n    $count = 0;\n    foreach ($words as $word) {\n        if (strlen($word) == $length) {\n            $count++;\n        }\n    }\n    return $count;}\n\n$input = 'This is a GPT model evaluation input.';\n$requested_word_length = 4;\n$result = count_words_with_length($input, $requested_word_length);\necho 'Number of words with length ' . $requested_word_length . ': ' . $result;\n?>"
    },
    {
        "instruction": "Design a C++ program that calculates the area of a circle given its radius.",
        "input": "6.5",
        "response": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.141592653589793238;\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double radius = 6.5;\n    double area = circle_area(radius);\n    std::cout << \"Area of the circle with radius \" << radius << \" is: \" << area << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.141592653589793238;\n\ndouble circle_area(double radius) {\n    return PI * pow(radius, 2);}\n\nint main() {\n    double radius = 6.5;\n    double area = circle_area(radius);\n    std::cout << \"Area of the circle with radius \" << radius << \" is: \" << area << std::endl;\n    return 0;}"
    },
    {
        "instruction": "Write a Python code snippet that can find the longest word in a given sentence.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "def find_longest_word(sentence):\n    words = sentence.split(' ')\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = 'The quick brown fox jumps over the lazy dog'\nlongest_word = find_longest_word(sentence)\nprint('The longest word is:', longest_word)",
        "output": "def find_longest_word(sentence):\n    words = sentence.split(' ')\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = 'The quick brown fox jumps over the lazy dog'\nlongest_word = find_longest_word(sentence)\nprint('The longest word is:', longest_word)"
    },
    {
        "instruction": "Fix the following C# code that tries to find the sum of an integer array but returns wrong output.",
        "input": "int[] numbers = {2, 4, 6, 8, 10};\nint sum = 0;\nfor (int i = 0; i <= numbers.Length; i++) {\n    sum += numbers[i];\n}\nConsole.WriteLine(\"Sum: \" + sum);",
        "response": "int[] numbers = {2, 4, 6, 8, 10};\nint sum = 0;\nfor (int i = 0; i < numbers.Length; i++) {\n    sum += numbers[i];}\nConsole.WriteLine(\"Sum: \" + sum);",
        "output": "int[] numbers = {2, 4, 6, 8, 10};\nint sum = 0;\nfor (int i = 0; i < numbers.Length; i++) {\n    sum += numbers[i];}\nConsole.WriteLine(\"Sum: \" + sum);"
    },
    {
        "instruction": "Create a shell script that accepts a directory path as an argument and lists all files in that directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndirectory=$1\n\nif [ -d \"$directory\" ]; then\n    ls \"$directory\"\nelse\n    echo \"Directory not found\"\nfi",
        "output": "#!/bin/bash\n\ndirectory=$1\n\nif [ -d \"$directory\" ]; then\n    ls \"$directory\"\nelse\n    echo \"Directory not found\"\nfi"
    },
    {
        "instruction": "How would you write ashell script that lists all directories in the current location?",
        "input": "",
        "response": "#!/bin/sh\n\nfor item in ./*; do\n    if [ -d \"${item}\" ]; then\n        echo \"${item}\"\n    fi\ndone",
        "output": "#!/bin/sh\n\nfor item in ./*; do\n    if [ -d \"${item}\" ]; then\n        echo \"${item}\"\n    fi\ndone"
    },
    {
        "instruction": "Construct an SQL query that selects all records from the 'employees' table with a salary between 50000 and 100000, ordered by their last name.",
        "input": "",
        "response": "SELECT * FROM employees WHERE salary >= 50000 AND salary <= 100000 ORDER BY last_name;",
        "output": "SELECT * FROM employees WHERE salary >= 50000 AND salary <= 100000 ORDER BY last_name;"
    },
    {
        "instruction": "Write a Python script that counts and prints out the occurrences of each word in a given sentence.",
        "input": "This is an example sentence for the text analysis task.",
        "response": "sentence = \"This is an example sentence for the text analysis task.\"\nwords = sentence.lower().split()\n\nword_count = {}\nfor word in words:\n    word_count[word] = word_count.get(word, 0) + 1\n\nfor word, count in word_count.items():\n    print(f\"{word}: {count}\")",
        "output": "sentence = \"This is an example sentence for the text analysis task.\"\nwords = sentence.lower().split()\n\nword_count = {}\nfor word in words:\n    word_count[word] = word_count.get(word, 0) + 1\n\nfor word, count in word_count.items():\n    print(f\"{word}: {count}\")"
    },
    {
        "instruction": "Write a C program to calculate the factorial of a given integer.",
        "input": "5",
        "response": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    printf(\"Factorial of %d is %d\\n\", n, factorial(n));\n    return 0;}",
        "output": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nint main() {\n    int n = 5;\n    printf(\"Factorial of %d is %d\\n\", n, factorial(n));\n    return 0;}"
    },
    {
        "instruction": "Implement a Python function to generate Fibonacci numbers up to a given limit.",
        "input": "10",
        "response": "def generate_fibonacci(limit):\n    sequence = [0, 1]\n    while (sequence[-1] + sequence[-2]) < limit:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nfibonacci_numbers = generate_fibonacci(10)\nprint(fibonacci_numbers)",
        "output": "def generate_fibonacci(limit):\n    sequence = [0, 1]\n    while (sequence[-1] + sequence[-2]) < limit:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nfibonacci_numbers = generate_fibonacci(10)\nprint(fibonacci_numbers)"
    },
    {
        "instruction": "How would you fix the following Python code that results in a ValueError when trying to convert the string to an integer?",
        "input": "def calculate_age(birth_year):\n    current_year = '2022'\n    age = int(current_year) - int(birth_year)\n    return age\n\nprint(calculate_age('1995'))",
        "response": "def calculate_age(birth_year):\n    current_year = '2022'\n    age = int(current_year) - int(birth_year)\n    return age\n\nprint(calculate_age('1995'))",
        "output": "def calculate_age(birth_year):\n    current_year = '2022'\n    age = int(current_year) - int(birth_year)\n    return age\n\nprint(calculate_age('1995'))"
    },
    {
        "instruction": "Create a Shell script that takes a directory path as an argument, counts the number of files in that directory, and prints the total.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\nif [ ! -d \"$1\" ]; then\n    echo \"Error: Directory $1 does not exist.\"\n    exit 1\nfi\n\ndirectory=\"$1\"\nfile_count=$(find \"$directory\" -type f | wc -l)\necho \"Total number of files in $directory: $file_count\"",
        "output": "#!/bin/bash\n\nif [ ! -d \"$1\" ]; then\n    echo \"Error: Directory $1 does not exist.\"\n    exit 1\nfi\n\ndirectory=\"$1\"\nfile_count=$(find \"$directory\" -type f | wc -l)\necho \"Total number of files in $directory: $file_count\""
    },
    {
        "instruction": "Implement a C++ program that reads a text input from a file, and counts the number of lines in it.",
        "input": "File contents:\nHello World!\nThis is a text file.\nIt contains multiple lines.",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"input.txt\");\n    std::string line;\n    int line_count = 0;\n\n    while (std::getline(file, line)) {\n        line_count++;\n    }\n\n    std::cout << \"Number of lines: \" << line_count << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"input.txt\");\n    std::string line;\n    int line_count = 0;\n\n    while (std::getline(file, line)) {\n        line_count++;\n    }\n\n    std::cout << \"Number of lines: \" << line_count << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function that takes a list of words and returns a dictionary with each word as a key and its length as a value.",
        "input": "['apple', 'orange', 'banana']",
        "response": "def words_lengths(words):\n    return {word: len(word) for word in words}\n\nword_list = ['apple', 'orange', 'banana']\nresult = words_lengths(word_list)\nprint(result)",
        "output": "def words_lengths(words):\n    return {word: len(word) for word in words}\n\nword_list = ['apple', 'orange', 'banana']\nresult = words_lengths(word_list)\nprint(result)"
    },
    {
        "instruction": "Create a C# method that receives an integer n and generates the Fibonacci sequence up to the nth element.",
        "input": "6",
        "response": "using System;\n\npublic class Fibonacci {\n    public static int[] GenerateFibonacci(int n) {\n        int[] sequence = new int[n];\n        for (int i = 0; i < n; i++) {\n            sequence[i] = i <= 1 ? 1 : sequence[i - 1] + sequence[i - 2];\n        }\n        return sequence;\n    }\n\n    public static void Main(string[] args) {\n        int[] result = GenerateFibonacci(6);\n        Console.WriteLine(string.Join(\", \", result));\n    }\n}",
        "output": "using System;\n\npublic class Fibonacci {\n    public static int[] GenerateFibonacci(int n) {\n        int[] sequence = new int[n];\n        for (int i = 0; i < n; i++) {\n            sequence[i] = i <= 1 ? 1 : sequence[i - 1] + sequence[i - 2];\n        }\n        return sequence;\n    }\n\n    public static void Main(string[] args) {\n        int[] result = GenerateFibonacci(6);\n        Console.WriteLine(string.Join(\", \", result));\n    }\n}"
    },
    {
        "instruction": "Implement a Node.js script that makes an HTTP GET request to an API and logs the response JSON.",
        "input": "https://api.example.com/data",
        "response": "const https = require('https');\n\nhttps.get('https://api.example.com/data', (res) => {\n    let data = '';\n\n    res.on('data', (chunk) => {\n        data += chunk;\n    });\n\n    res.on('end', () => {\n        const parsedData = JSON.parse(data);\n        console.log(parsedData);\n    });\n}).on('error', (err) => {\n    console.error(`Request Error: ${err.message}`);\n});",
        "output": "const https = require('https');\n\nhttps.get('https://api.example.com/data', (res) => {\n    let data = '';\n\n    res.on('data', (chunk) => {\n        data += chunk;\n    });\n\n    res.on('end', () => {\n        const parsedData = JSON.parse(data);\n        console.log(parsedData);\n    });\n}).on('error', (err) => {\n    console.error(`Request Error: ${err.message}`);\n});"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a non-negative integer using recursion.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}",
        "output": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }}\n\nint main() {\n    int num = 6;\n    cout << \"Factorial of \" << num << \" is \" << factorial(num) << endl;\n    return 0;}"
    },
    {
        "instruction": "Develop a PHP script to find the longest common prefix of an array of strings.",
        "input": "[\"flower\", \"flow\", \"flight\"]",
        "response": "<?php\nfunction find_common_prefix($strs) {\n    if (count($strs) == 0) {\n        return \"\";\n    }\n    $prefix = $strs[0];\n\n    for ($i = 1; $i < count($strs); $i++) {\n        while (strpos($strs[$i], $prefix) !== 0) {\n            $prefix = substr($prefix, 0, -1);\n            if (empty($prefix)) {\n                return \"\";\n            }\n        }\n    }\n    return $prefix;}\n\n$strings = array(\"flower\", \"flow\", \"flight\");\necho \"Longest common prefix: \" . find_common_prefix($strings);\n?>",
        "output": "<?php\nfunction find_common_prefix($strs) {\n    if (count($strs) == 0) {\n        return \"\";\n    }\n    $prefix = $strs[0];\n\n    for ($i = 1; $i < count($strs); $i++) {\n        while (strpos($strs[$i], $prefix) !== 0) {\n            $prefix = substr($prefix, 0, -1);\n            if (empty($prefix)) {\n                return \"\";\n            }\n        }\n    }\n    return $prefix;}\n\n$strings = array(\"flower\", \"flow\", \"flight\");\necho \"Longest common prefix: \" . find_common_prefix($strings);\n?>"
    },
    {
        "instruction": "How would you implement a shell script that accepts a filename as an argument and counts the number of lines in the file?",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n    echo \"Usage: $0 <filename>\"\n    exit 1\nfi\n\nfilename=\"$1\"\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\"",
        "output": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n    echo \"Usage: $0 <filename>\"\n    exit 1\nfi\n\nfilename=\"$1\"\nline_count=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $line_count\""
    },
    {
        "instruction": "Create a JavaScript code snippet that calculates the number of occurrences of each word in a given text string, and returns the result as an object.",
        "input": "Apples are red, and oranges are orange.",
        "response": "function countWords(text) {\n    let words = text.toLowerCase().match(/[a-z]+/g) || [];\n    let wordCounts = {};\n\n    for (const word of words) {\n        if (wordCounts.hasOwnProperty(word)) {\n            wordCounts[word]++;\n        } else {\n            wordCounts[word] = 1;\n        }\n    }\n    return wordCounts;}\n\nconst inputText = 'Apples are red, and oranges are orange.';\nconst result = countWords(inputText);\nconsole.log(result);",
        "output": "function countWords(text) {\n    let words = text.toLowerCase().match(/[a-z]+/g) || [];\n    let wordCounts = {};\n\n    for (const word of words) {\n        if (wordCounts.hasOwnProperty(word)) {\n            wordCounts[word]++;\n        } else {\n            wordCounts[word] = 1;\n        }\n    }\n    return wordCounts;}\n\nconst inputText = 'Apples are red, and oranges are orange.';\nconst result = countWords(inputText);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a C++ program that calculates the factorial of a given number.",
        "input": "6",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1)\n        return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1)\n        return 1;\n    return n * factorial(n - 1);}\n\nint main() {\n    int num = 6;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;}"
    },
    {
        "instruction": "How would you determine the length of the longest common subsequence of two strings in Python?",
        "input": "'ABCDEF', 'ACDFE'",
        "response": "def lcs_length(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\nresult = lcs_length('ABCDEF', 'ACDFE')\nprint(result)",
        "output": "def lcs_length(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\nresult = lcs_length('ABCDEF', 'ACDFE')\nprint(result)"
    },
    {
        "instruction": "Design a simple API server using Node.js and Express that accepts a GET request and returns a JSON response containing the user's id, name, and age.",
        "input": "GET \"/user?id=42&name=John%20Doe&age=29\"",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/user', (req, res) => {\n    const {id, name, age} = req.query;\n    const user = {id: parseInt(id), name, age: parseInt(age)};\n    res.json(user);});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/user', (req, res) => {\n    const {id, name, age} = req.query;\n    const user = {id: parseInt(id), name, age: parseInt(age)};\n    res.json(user);});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);});"
    },
    {
        "instruction": "Write a shell script that accepts a directory path as an argument and lists all the files present in it, displaying their size in kilobytes.",
        "input": "/path/to/directory",
        "response": "#!/bin/sh\n\ndirectory_path=$1\nfind \"$directory_path\" -type f -exec du -sk {} \\; | sort -n\n\n# Usage: ./list_files_with_size.sh /path/to/directory",
        "output": "#!/bin/sh\n\ndirectory_path=$1\nfind \"$directory_path\" -type f -exec du -sk {} \\; | sort -n\n\n# Usage: ./list_files_with_size.sh /path/to/directory"
    },
    {
        "instruction": "Design a C program that calculates the factorial of a given number using recursion.",
        "input": "6",
        "response": "#include <stdio.h>\n\nint factorial(int n);\n\nint main() {\n    int n = 6;\n    printf(\"Factorial of %d is %d\", n, factorial(n));\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}",
        "output": "#include <stdio.h>\n\nint factorial(int n);\n\nint main() {\n    int n = 6;\n    printf(\"Factorial of %d is %d\", n, factorial(n));\n    return 0;}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}"
    },
    {
        "instruction": "How would you implement a merge sort algorithm in Python?",
        "input": "[8, 3, 5, 4, 1, 9, 6]",
        "response": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    middle = len(arr) // 2\n    left = merge_sort(arr[:middle])\n    right = merge_sort(arr[middle:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    left_index, right_index = 0, 0\n\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n\n    result += left[left_index:]\n    result += right[right_index:]\n    return result\n\ninput_array = [8, 3, 5, 4, 1, 9, 6]\nsorted_array = merge_sort(input_array)\nprint(sorted_array)",
        "output": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    middle = len(arr) // 2\n    left = merge_sort(arr[:middle])\n    right = merge_sort(arr[middle:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    left_index, right_index = 0, 0\n\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n\n    result += left[left_index:]\n    result += right[right_index:]\n    return result\n\ninput_array = [8, 3, 5, 4, 1, 9, 6]\nsorted_array = merge_sort(input_array)\nprint(sorted_array)"
    },
    {
        "instruction": "In C++, create a function template to find the maximum value of two input variables.",
        "input": "4.5, 7.5",
        "response": "#include <iostream>\n\ntemplate <typename T>\nT find_max(T a, T b) {\n    return (a > b) ? a : b;}\n\nint main() {\n    double num1 = 4.5, num2 = 7.5;\n    double max_num = find_max(num1, num2);\n    std::cout << \"Maximum of \" << num1 << \" and \" << num2 << \" is \" << max_num;\n    return 0;}",
        "output": "#include <iostream>\n\ntemplate <typename T>\nT find_max(T a, T b) {\n    return (a > b) ? a : b;}\n\nint main() {\n    double num1 = 4.5, num2 = 7.5;\n    double max_num = find_max(num1, num2);\n    std::cout << \"Maximum of \" << num1 << \" and \" << num2 << \" is \" << max_num;\n    return 0;}"
    },
    {
        "instruction": "Write a shell script to count the number of lines in a given file.",
        "input": "filename.txt",
        "response": "#!/bin/bash\n\nfilename=\"filename.txt\"\n\nif [ -f \"$filename\" ]; then\n    num_lines=$(wc -l < \"$filename\")\n    echo \"There are $num_lines lines in $filename.\"\nelse\n    echo \"File does not exist.\"\nfi",
        "output": "#!/bin/bash\n\nfilename=\"filename.txt\"\n\nif [ -f \"$filename\" ]; then\n    num_lines=$(wc -l < \"$filename\")\n    echo \"There are $num_lines lines in $filename.\"\nelse\n    echo \"File does not exist.\"\nfi"
    },
    {
        "instruction": "Design a Python script that counts the occurrences of each word in a given text string and outputs a dictionary with the words and their counts.",
        "input": "The quick brown fox jumps over the lazy dog. The dog barked at the fox.",
        "response": "from collections import Counter\n\ndef count_words(text):\n    words = text.split()\n    return Counter(words)\n\ninput_text = 'The quick brown fox jumps over the lazy dog. The dog barked at the fox.'\nword_counts = count_words(input_text)\nprint(word_counts)",
        "output": "from collections import Counter\n\ndef count_words(text):\n    words = text.split()\n    return Counter(words)\n\ninput_text = 'The quick brown fox jumps over the lazy dog. The dog barked at the fox.'\nword_counts = count_words(input_text)\nprint(word_counts)"
    },
    {
        "instruction": "Implement a C++ program that reads a text file containing a list of integers, one per line, and calculates the sum of those integers.",
        "input": "example.txt contents: \n42\n65\n794\n23",
        "response": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream file(\"example.txt\");\n    int sum = 0, tmp;\n\n    while (file >> tmp) {\n        sum += tmp;\n    }\n\n    file.close();\n    std::cout << \"Sum: \" << sum << std::endl;\n\n    return 0;}",
        "output": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream file(\"example.txt\");\n    int sum = 0, tmp;\n\n    while (file >> tmp) {\n        sum += tmp;\n    }\n\n    file.close();\n    std::cout << \"Sum: \" << sum << std::endl;\n\n    return 0;}"
    },
    {
        "instruction": "How to write a JavaScript function to recursively calculate the factorial of a given positive integer?",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst number = 5;\nconsole.log(`Factorial of ${number} is ${factorial(number)}`);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);}\n\nconst number = 5;\nconsole.log(`Factorial of ${number} is ${factorial(number)}`);"
    },
    {
        "instruction": "Create a shell script that takes a directory path as an argument and outputs the total number of files and directories in it.",
        "input": "/home/user/test_directory",
        "response": "#!/bin/bash\n\nif [ $# -ne 1 ]\nthen\n    echo \"Usage: ./count_files_and_directories.sh [path]\"\n    exit 1\nfi\n\npath=$1\ntotal_count=$(ls -l \"$path\" | wc -l)\nlet \"total_count -= 1\"\n\necho \"Total number of files and directories in $path: $total_count\"",
        "output": "#!/bin/bash\n\nif [ $# -ne 1 ]\nthen\n    echo \"Usage: ./count_files_and_directories.sh [path]\"\n    exit 1\nfi\n\npath=$1\ntotal_count=$(ls -l \"$path\" | wc -l)\nlet \"total_count -= 1\"\n\necho \"Total number of files and directories in $path: $total_count\""
    },
    {
        "instruction": "Create a JavaScript function that returns the reverse of a given string.",
        "input": "",
        "response": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Explain how you would write a Python script that reads a CSV file, removes a specified column, and saves the result to a new CSV file.",
        "input": "",
        "response": "1. Import the required libraries using 'import csv' and 'import sys'.\n2. Open the input CSV file using 'with open(input_filename) as csvfile'.\n3. Initialize the CSV reader with 'csv.reader(csvfile)'.\n4. Open a new CSV file to write the output using 'with open(output_filename, 'w', newline='') as csvfile_out'.\n5. Create a CSV writer using 'csv.writer(csvfile_out)'.\n6. Iterate through the rows in the input CSV file, remove the specified column by index, and write the modified rows to the output CSV file.",
        "output": "1. Import the required libraries using 'import csv' and 'import sys'.\n2. Open the input CSV file using 'with open(input_filename) as csvfile'.\n3. Initialize the CSV reader with 'csv.reader(csvfile)'.\n4. Open a new CSV file to write the output using 'with open(output_filename, 'w', newline='') as csvfile_out'.\n5. Create a CSV writer using 'csv.writer(csvfile_out)'.\n6. Iterate through the rows in the input CSV file, remove the specified column by index, and write the modified rows to the output CSV file."
    },
    {
        "instruction": "Write a Java program that calculates the sum of a sequence of Fibonacci numbers, given the length of the sequence.",
        "input": "",
        "response": "public class FibonacciSum {\n\n   public static void main(String[] args) {\n\n       int n = Integer.parseInt(args[0]);\n       int a = 0, b = 1, c = 1, sum = 1;\n       for (int i = 3; i <= n; i++) {\n           c = a + b;\n           sum += c;\n           a = b;\n           b = c;\n       }\n       System.out.println('Sum of Fibonacci series up to ' + n + ' is: ' + sum);\n\n   }\n\n}",
        "output": "public class FibonacciSum {\n\n   public static void main(String[] args) {\n\n       int n = Integer.parseInt(args[0]);\n       int a = 0, b = 1, c = 1, sum = 1;\n       for (int i = 3; i <= n; i++) {\n           c = a + b;\n           sum += c;\n           a = b;\n           b = c;\n       }\n       System.out.println('Sum of Fibonacci series up to ' + n + ' is: ' + sum);\n\n   }\n\n}"
    },
    {
        "instruction": "How would you create a Bash script that performs a backup of a directory to a given target directory?",
        "input": "",
        "response": "1. Start the script with the shebang '#!/bin/bash'.\n2. Accept the source directory and target directory as arguments using '$1' and '$2'.\n3. Validate the input directories, and exit the script with an error message if they are invalid.\n4. Create a timestamp and append it to the target directory name.\n5. Use the 'rsync' command with appropriate flags to perform the backup: 'rsync -av --progress --delete $1 $target_directory_with_timestamp'.\n6. Print a success message after the backup completes.",
        "output": "1. Start the script with the shebang '#!/bin/bash'.\n2. Accept the source directory and target directory as arguments using '$1' and '$2'.\n3. Validate the input directories, and exit the script with an error message if they are invalid.\n4. Create a timestamp and append it to the target directory name.\n5. Use the 'rsync' command with appropriate flags to perform the backup: 'rsync -av --progress --delete $1 $target_directory_with_timestamp'.\n6. Print a success message after the backup completes."
    },
    {
        "instruction": "Create a function in JavaScript to detect if a string contains only unique characters.",
        "input": "",
        "response": "function hasUniqueChars(str) {\n  const charSet = new Set(str);\n  return charSet.size === str.length;\n}",
        "output": "function hasUniqueChars(str) {\n  const charSet = new Set(str);\n  return charSet.size === str.length;\n}"
    },
    {
        "instruction": "How would you write a Python function to calculate the Fibonacci sequence up to the nth element?",
        "input": "",
        "response": "def fibonacci(n):\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  else:\n    sequence = [0, 1]\n    while len(sequence) < n:\n      sequence.append(sequence[-1] + sequence[-2])\n    return sequence",
        "output": "def fibonacci(n):\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  else:\n    sequence = [0, 1]\n    while len(sequence) < n:\n      sequence.append(sequence[-1] + sequence[-2])\n    return sequence"
    },
    {
        "instruction": "In C++, create a program that takes a user inputted string and outputs the number of vowels, consonants, digits, and spaces within the string.",
        "input": "",
        "response": "#include <iostream>\n#include <cctype>\nusing namespace std;\n\nint main() {\n  string input;\n  int vowels = 0, consonants = 0, digits = 0, spaces = 0;\n\n  getline(cin, input);\n  for (char c : input) {\n    if (isspace(c)) spaces++;\n    else if (isdigit(c)) digits++;\n    else if (isalpha(c)) {\n      char lowerC = tolower(c);\n      if (lowerC == 'a' || lowerC == 'e' || lowerC == 'i' || lowerC == 'o' || lowerC == 'u')\n        vowels++;\n      else\n        consonants++;\n    }\n  }\n\n  cout << \"Vowels: \" << vowels << \"\\nConsonants: \" << consonants << \"\\nDigits: \" << digits << \"\\nSpaces: \" << spaces << endl;\n  return 0;\n}",
        "output": "#include <iostream>\n#include <cctype>\nusing namespace std;\n\nint main() {\n  string input;\n  int vowels = 0, consonants = 0, digits = 0, spaces = 0;\n\n  getline(cin, input);\n  for (char c : input) {\n    if (isspace(c)) spaces++;\n    else if (isdigit(c)) digits++;\n    else if (isalpha(c)) {\n      char lowerC = tolower(c);\n      if (lowerC == 'a' || lowerC == 'e' || lowerC == 'i' || lowerC == 'o' || lowerC == 'u')\n        vowels++;\n      else\n        consonants++;\n    }\n  }\n\n  cout << \"Vowels: \" << vowels << \"\\nConsonants: \" << consonants << \"\\nDigits: \" << digits << \"\\nSpaces: \" << spaces << endl;\n  return 0;\n}"
    },
    {
        "instruction": "Write a shell script that takes a filename as an input parameter and prints the number of non-empty lines in the file.",
        "input": "",
        "response": "#!/bin/bash\n\nfilename=$1\ngrep -c '^[^[:blank:]]' $filename",
        "output": "#!/bin/bash\n\nfilename=$1\ngrep -c '^[^[:blank:]]' $filename"
    },
    {
        "instruction": "Implement a function in JavaScript that takes an array of strings and returns an array of counts of each vowel in the strings.",
        "input": "['apple', 'banana', 'cherry']",
        "response": "function countVowels(arr) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const result = [];\n    arr.forEach(word => {\n        const wordCount = { a: 0, e: 0, i: 0, o: 0, u: 0 };\n        const lowerWord = word.toLowerCase();\n        for (let char of lowerWord) {\n            if (vowels.includes(char)) {\n                wordCount[char] += 1;\n            }\n        }\n        result.push(wordCount);\n    });\n    return result;\n}\n\nconsole.log(countVowels(['apple', 'banana', 'cherry']));",
        "output": "function countVowels(arr) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const result = [];\n    arr.forEach(word => {\n        const wordCount = { a: 0, e: 0, i: 0, o: 0, u: 0 };\n        const lowerWord = word.toLowerCase();\n        for (let char of lowerWord) {\n            if (vowels.includes(char)) {\n                wordCount[char] += 1;\n            }\n        }\n        result.push(wordCount);\n    });\n    return result;\n}\n\nconsole.log(countVowels(['apple', 'banana', 'cherry']));"
    },
    {
        "instruction": "Create a Java method that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "public class Factorial {\n\n    public static int recursiveFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * recursiveFactorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int result = recursiveFactorial(5);\n        System.out.println(result);\n    }\n}",
        "output": "public class Factorial {\n\n    public static int recursiveFactorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * recursiveFactorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int result = recursiveFactorial(5);\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "Fix the syntax error in the following Python code and provide the corrected code.",
        "input": "def greet_user(name):\n    print('Hello, ' + name'!')\ndef main():\n    user_name = 'Alice'\n    greet_user(user_name)\nmain()",
        "response": "def greet_user(name):\n    print('Hello, ' + name + '!')\n\ndef main():\n    user_name = 'Alice'\n    greet_user(user_name)\n\nmain()",
        "output": "def greet_user(name):\n    print('Hello, ' + name + '!')\n\ndef main():\n    user_name = 'Alice'\n    greet_user(user_name)\n\nmain()"
    },
    {
        "instruction": "What is the expected output of the following C++ code?",
        "input": "#include <iostream>\nusing namespace std;\nint main() {\n  int x = 10;\n  int y = 20;\n  if (x > y) {\n    cout << 'A';\n  } else if (x == y) {\n    cout << 'B';\n  } else {\n    cout << 'C';\n  }\n  return 0;\n}",
        "response": "C",
        "output": "C"
    },
    {
        "instruction": "Write a JavaScript function to check if a user input string is a palindrome or not.",
        "input": "Palindrome is a word, phrase, number, or other sequences of characters which reads the same backward and forward, ignoring spaces and punctuation.",
        "response": "function isPalindrome(inputStr) {\n  const cleanedStr = inputStr.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n  const reversedStr = cleanedStr.split('').reverse().join('');\n  return cleanedStr === reversedStr;\n}",
        "output": "function isPalindrome(inputStr) {\n  const cleanedStr = inputStr.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n  const reversedStr = cleanedStr.split('').reverse().join('');\n  return cleanedStr === reversedStr;\n}"
    },
    {
        "instruction": "In Python, create a code snippet that implements the Bubble Sort algorithm.",
        "input": "Bubble Sort is a simple sorting algorithm that works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order.",
        "response": "def bubble_sort(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n - i - 1):\n      if arr[j] > arr[j + 1]:\n        arr[j], arr[j + 1] = arr[j + 1], arr[j]\n  return arr",
        "output": "def bubble_sort(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n - i - 1):\n      if arr[j] > arr[j + 1]:\n        arr[j], arr[j + 1] = arr[j + 1], arr[j]\n  return arr"
    },
    {
        "instruction": "Find and correct any syntax errors in this Java code:",
        "input": "public class Test {\n public static void main(String[] args) {\n  System.out.printn(\"Hello World\");\n }\n}",
        "response": "public class Test {\n public static void main(String[] args) {\n  // The method is println, not printn\n  System.out.println(\"Hello World\");\n }\n}",
        "output": "public class Test {\n public static void main(String[] args) {\n  // The method is println, not printn\n  System.out.println(\"Hello World\");\n }\n}"
    },
    {
        "instruction": "Translate the following shell script to C++ code: Calculate and print the factorial of a given number.",
        "input": "#!/bin/bash\n\nread -p \"Enter a number: \" num\nfact=1\n\nfor(( i=1; i<=num; i++ ))\ndo\n   fact=$((fact * i))\ndone\n\necho \"Factorial of $num is $fact\"",
        "response": "#include<iostream>\n\nint main() {\n  int num, fact = 1;\n  std::cout << \"Enter a number: \";\n  std::cin >> num;\n\n  for(int i = 1; i <= num; ++i) {\n    fact *= i;\n  }\n\n  std::cout << \"Factorial of \" << num << \" is \" << fact << std::endl;\n\n  return 0;\n}",
        "output": "#include<iostream>\n\nint main() {\n  int num, fact = 1;\n  std::cout << \"Enter a number: \";\n  std::cin >> num;\n\n  for(int i = 1; i <= num; ++i) {\n    fact *= i;\n  }\n\n  std::cout << \"Factorial of \" << num << \" is \" << fact << std::endl;\n\n  return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers and returns the sum of even numbers.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "response": "function sumEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0).reduce((a, b) => a + b, 0);\n}",
        "output": "function sumEvenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0).reduce((a, b) => a + b, 0);\n}"
    },
    {
        "instruction": "Implement a Java method that takes a string and reverses the words in it, making sure to keep the original character case intact.",
        "input": "Hello World! Goodbye Moon!",
        "response": "public String reverseWords(String input) {\n    String[] words = input.split(' ');\n    StringBuilder result = new StringBuilder();\n    for (int i = words.length - 1; i >= 0; i--) {\n        result.append(words[i]);\n        if (i != 0) {\n            result.append(' ');\n        }\n    }\n    return result.toString();\n}",
        "output": "public String reverseWords(String input) {\n    String[] words = input.split(' ');\n    StringBuilder result = new StringBuilder();\n    for (int i = words.length - 1; i >= 0; i--) {\n        result.append(words[i]);\n        if (i != 0) {\n            result.append(' ');\n        }\n    }\n    return result.toString();\n}"
    },
    {
        "instruction": "Write a script in Bash that will receive a positive integer and output the sum of its digits.",
        "input": "123",
        "response": "#!/bin/bash\n\nnumber=$1\ntotal=0\n\nwhile [ $number -gt 0 ]; do\n  digit=$((number % 10))\n  number=$((number / 10))\n  total=$((total + digit))\ndone\n\necho $total",
        "output": "#!/bin/bash\n\nnumber=$1\ntotal=0\n\nwhile [ $number -gt 0 ]; do\n  digit=$((number % 10))\n  number=$((number / 10))\n  total=$((total + digit))\ndone\n\necho $total"
    },
    {
        "instruction": "Construct a Python function that takes a list of strings and returns the longest common prefix for the input list.",
        "input": "['houseplant', 'houseware', 'household']",
        "response": "def longest_common_prefix(strs):\n    if not strs:\n        return ''\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for string in strs:\n            if string[i] != char:\n                return shortest[:i]\n    return shortest",
        "output": "def longest_common_prefix(strs):\n    if not strs:\n        return ''\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for string in strs:\n            if string[i] != char:\n                return shortest[:i]\n    return shortest"
    },
    {
        "instruction": "Create a JavaScript function to find the current local time in a 12-hour format (including AM or PM).",
        "input": "",
        "response": "function getCurrentLocalTime() {\n  var now = new Date();\n  var hours = now.getHours();\n  var minutes = now.getMinutes();\n  var ampm = hours >= 12 ? 'PM' : 'AM';\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  var time = hours + ':' + minutes + ' ' + ampm;\n  return time;\n}",
        "output": "function getCurrentLocalTime() {\n  var now = new Date();\n  var hours = now.getHours();\n  var minutes = now.getMinutes();\n  var ampm = hours >= 12 ? 'PM' : 'AM';\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  var time = hours + ':' + minutes + ' ' + ampm;\n  return time;\n}"
    },
    {
        "instruction": "Implement a basic LinkedList class in Java with methods for appending data and traversing the linked list.",
        "input": "",
        "response": "public class LinkedList {\n    Node head;\n\n    class Node {\n        int data;\n        Node next;\n\n        Node(int data) {\n            this.data = data;\n            next = null;\n        }\n    }\n\n    public void append(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n            return;\n        }\n\n        Node last = head;\n        while (last.next != null) {\n            last = last.next;\n        }\n        last.next = newNode;\n    }\n\n    public void printList() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n}",
        "output": "public class LinkedList {\n    Node head;\n\n    class Node {\n        int data;\n        Node next;\n\n        Node(int data) {\n            this.data = data;\n            next = null;\n        }\n    }\n\n    public void append(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n            return;\n        }\n\n        Node last = head;\n        while (last.next != null) {\n            last = last.next;\n        }\n        last.next = newNode;\n    }\n\n    public void printList() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n}"
    },
    {
        "instruction": "How would you calculate the product of all elements in a list using Python?",
        "input": "[4, 3, 2, 1]",
        "response": "from functools import reduce\nimport operator\n\nlst = [4, 3, 2, 1]\nproduct = reduce(operator.mul, lst)\nprint(product)",
        "output": "from functools import reduce\nimport operator\n\nlst = [4, 3, 2, 1]\nproduct = reduce(operator.mul, lst)\nprint(product)"
    },
    {
        "instruction": "Fix the following C++ code snippet, which calculates the sum of the first n natural numbers:",
        "input": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n\n    std::cout << \"Enter the value of n:\";\n    std::cin >> n;\n\n    for(int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n\n    std::cout < \"Sum = \" < sum;\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n\n    std::cout << \"Enter the value of n:\";\n    std::cin >> n;\n\n    for(int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n\n    std::cout << \"Sum = \" << sum;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n\n    std::cout << \"Enter the value of n:\";\n    std::cin >> n;\n\n    for(int i = 1; i <= n; ++i) {\n        sum += i;\n    }\n\n    std::cout << \"Sum = \" << sum;\n    return 0;\n}"
    },
    {
        "instruction": "Create a C function to calculate the power of a number using recursion.",
        "input": "2, 3",
        "response": "#include<stdio.h>\n\nlong int power(int base, int exponent) {\n    if (exponent == 0)\n        return 1;\n    else\n        return base * power(base, exponent-1);\n}\n\nint main() {\n    int base = 2, exponent = 3;\n    long int result = power(base, exponent);\n    printf(\"%d raised to the power %d is: %ld\", base, exponent, result);\n    return 0;\n}",
        "output": "#include<stdio.h>\n\nlong int power(int base, int exponent) {\n    if (exponent == 0)\n        return 1;\n    else\n        return base * power(base, exponent-1);\n}\n\nint main() {\n    int base = 2, exponent = 3;\n    long int result = power(base, exponent);\n    printf(\"%d raised to the power %d is: %ld\", base, exponent, result);\n    return 0;\n}"
    },
    {
        "instruction": "What is the output of the following JavaScript code snippet? Can you provide an explanation?",
        "input": "let arr = [3, 5, 1];\narr.sort();\nconsole.log(arr);",
        "response": "Output: [1, 3, 5]\n\nExplanation: This code snippet defines an array named 'arr' with 3 elements: 3, 5, and 1. Calling the 'sort()' method on the array arranges its elements in ascending lexicographic order by default, so the sorted array becomes [1, 3, 5]. To print the sorted array, the 'console.log()' function is used, resulting in the output: [1, 3, 5].",
        "output": "Output: [1, 3, 5]\n\nExplanation: This code snippet defines an array named 'arr' with 3 elements: 3, 5, and 1. Calling the 'sort()' method on the array arranges its elements in ascending lexicographic order by default, so the sorted array becomes [1, 3, 5]. To print the sorted array, the 'console.log()' function is used, resulting in the output: [1, 3, 5]."
    },
    {
        "instruction": "Write a Python code snippet to count the frequency of words in the given string, ignoring case.",
        "input": "Machine Learning and Artificial Intelligence are sub-domains of Data Science, focusing on making machines smart and efficient.",
        "response": "def word_freq(string):\n    string = string.lower()\n    words = string.split()\n    word_count = dict()\n\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n\n    return word_count\n\ninput_string = 'Machine Learning and Artificial Intelligence are sub-domains of Data Science, focusing on making machines smart and efficient.'\nprint(word_freq(input_string))",
        "output": "def word_freq(string):\n    string = string.lower()\n    words = string.split()\n    word_count = dict()\n\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n\n    return word_count\n\ninput_string = 'Machine Learning and Artificial Intelligence are sub-domains of Data Science, focusing on making machines smart and efficient.'\nprint(word_freq(input_string))"
    },
    {
        "instruction": "Write a Shell script that will print the first n even numbers.",
        "input": "5",
        "response": "#!/bin/bash\n\nn=$1\ncount=1\neven_num=2\n\nwhile [ $count -le $n ]\ndo\n    echo $even_num\n    even_num=$((even_num + 2))\n    count=$((count + 1))\ndone",
        "output": "#!/bin/bash\n\nn=$1\ncount=1\neven_num=2\n\nwhile [ $count -le $n ]\ndo\n    echo $even_num\n    even_num=$((even_num + 2))\n    count=$((count + 1))\ndone"
    },
    {
        "instruction": "Explain how the following Python code works and identify potential issues:",
        "input": "def fibonacci(n):\n    if n <= 0:\n        return 'Input must be a positive integer'\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)",
        "response": "The code is a recursive implementation of the Fibonacci sequence. It takes a positive integer n as argument and returns the n-th Fibonacci number. When n is 1 or 2, the function returns 1 as the base case. For any other positive integer, the function makes two recursive calls to itself, computing the n-th Fibonacci number as the sum of the (n-1)-th and (n-2)-th Fibonacci numbers. However, this implementation is inefficient for large values of n due to its exponential time complexity. It can be improved using memoization or iterative approaches to avoid redundant calculations.",
        "output": "The code is a recursive implementation of the Fibonacci sequence. It takes a positive integer n as argument and returns the n-th Fibonacci number. When n is 1 or 2, the function returns 1 as the base case. For any other positive integer, the function makes two recursive calls to itself, computing the n-th Fibonacci number as the sum of the (n-1)-th and (n-2)-th Fibonacci numbers. However, this implementation is inefficient for large values of n due to its exponential time complexity. It can be improved using memoization or iterative approaches to avoid redundant calculations."
    },
    {
        "instruction": "Implement a function in JavaScript that takes a list of numbers and returns their sum.",
        "input": "",
        "response": "function sum(numbers) {\n  let total = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    total += numbers[i];\n  }\n  return total;\n}",
        "output": "function sum(numbers) {\n  let total = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    total += numbers[i];\n  }\n  return total;\n}"
    },
    {
        "instruction": "In the given Java code snippet, locate and fix the syntax error.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.printlnHello, World!);\n    }\n}",
        "response": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Create a Bash script that reads lines from a text file and writes them to another file in reversed order.",
        "input": "",
        "response": "#!/bin/bash\n\ninput_file=$1\noutput_file=$2\n\ncat $input_file | tac > $output_file",
        "output": "#!/bin/bash\n\ninput_file=$1\noutput_file=$2\n\ncat $input_file | tac > $output_file"
    },
    {
        "instruction": "Create a Python function that counts the number of vowels in a given string and returns the result.",
        "input": "For example, consider the following string: 'GPT-3 is an advanced language model.'",
        "response": "def count_vowels(text):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n\nstring = 'GPT-3 is an advanced language model.'\nresult = count_vowels(string)\nprint(result)",
        "output": "def count_vowels(text):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n\nstring = 'GPT-3 is an advanced language model.'\nresult = count_vowels(string)\nprint(result)"
    },
    {
        "instruction": "Fix the given Java code so that it compiles and runs correctly.",
        "input": "public class Main {\n    public static void main(String[] args) {\n        System.ot.println('Hello, World!');\n    }\n}\n",
        "response": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "output": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Write a Bash function that takes a directory path as an argument and prints the total number of files in that directory.",
        "input": "For example, consider the following directory path: '~/scripts'",
        "response": "count_files() {\n    dir_path=$1\n    num_files=$(find \"$dir_path\" -type f | wc -l)\n    echo \"Total number of files in $dir_path: $num_files\"\n}\n\ndirectory_path=\"~/scripts\"\ncount_files \"$directory_path\"",
        "output": "count_files() {\n    dir_path=$1\n    num_files=$(find \"$dir_path\" -type f | wc -l)\n    echo \"Total number of files in $dir_path: $num_files\"\n}\n\ndirectory_path=\"~/scripts\"\ncount_files \"$directory_path\""
    },
    {
        "instruction": "How would you implement a function in JavaScript that receives two arrays of integers and returns the numbers that are present in both arrays?",
        "input": "For example, consider the following arrays: array1 = [1, 2, 3, 4, 5], array2 = [4, 5, 6, 7, 8]",
        "response": "function findCommonElements(arr1, arr2) {\n    return arr1.filter(value => arr2.includes(value));\n}\n\nconst array1 = [1, 2, 3, 4, 5];\nconst array2 = [4, 5, 6, 7, 8];\nconst commonElements = findCommonElements(array1, array2);\nconsole.log(commonElements);",
        "output": "function findCommonElements(arr1, arr2) {\n    return arr1.filter(value => arr2.includes(value));\n}\n\nconst array1 = [1, 2, 3, 4, 5];\nconst array2 = [4, 5, 6, 7, 8];\nconst commonElements = findCommonElements(array1, array2);\nconsole.log(commonElements);"
    },
    {
        "instruction": "Create a JavaScript function that takes a list of numbers as an input, squares each number in the list, and returns the result as a new list.",
        "input": "[2, 4, 6, 8]",
        "response": "function squareNumbers(numbers) {\n    return numbers.map(function(number) {\n        return number * number;\n    });\n}\n\nconst input = [2, 4, 6, 8];\nconsole.log(squareNumbers(input));",
        "output": "function squareNumbers(numbers) {\n    return numbers.map(function(number) {\n        return number * number;\n    });\n}\n\nconst input = [2, 4, 6, 8];\nconsole.log(squareNumbers(input));"
    },
    {
        "instruction": "What could be the cause if a Python script throws a 'NameError: name 'x' is not defined'? Describe the issue and provide a potential fix.",
        "input": "",
        "response": "The error is caused when the variable 'x' is referenced before it is assigned a value. This could happen if the variable is misspelled or if the assignment statement is missing. To fix the issue, make sure the variable 'x' is correctly spelled and assigned a value before being used. Example:\n\n# Incorrect usage, causes NameError\nprint(x)\nx = 5\n\n# Correct usage, avoids NameError\nx = 5\nprint(x)",
        "output": "The error is caused when the variable 'x' is referenced before it is assigned a value. This could happen if the variable is misspelled or if the assignment statement is missing. To fix the issue, make sure the variable 'x' is correctly spelled and assigned a value before being used. Example:\n\n# Incorrect usage, causes NameError\nprint(x)\nx = 5\n\n# Correct usage, avoids NameError\nx = 5\nprint(x)"
    },
    {
        "instruction": "Write a Java program that calculates the area of a rectangle given its length and width.",
        "input": "length: 5, width: 10",
        "response": "public class RectangleArea {\n\n    public static int calculateArea(int length, int width) {\n        return length * width;\n    }\n\n    public static void main(String[] args) {\n        int length = 5;\n        int width = 10;\n        int area = calculateArea(length, width);\n        System.out.println(\"The area of the rectangle is: \" + area);\n    }\n}",
        "output": "public class RectangleArea {\n\n    public static int calculateArea(int length, int width) {\n        return length * width;\n    }\n\n    public static void main(String[] args) {\n        int length = 5;\n        int width = 10;\n        int area = calculateArea(length, width);\n        System.out.println(\"The area of the rectangle is: \" + area);\n    }\n}"
    },
    {
        "instruction": "Translate the provided Python function into an equivalent C++ function. The function takes an integer as input and returns the factorial of that integer.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n-1);\n    }\n}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n-1);\n    }\n}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that accepts a string and returns the string reversed.",
        "input": "'hello world'",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nlet reversed = reverseString('hello world');\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nlet reversed = reverseString('hello world');\nconsole.log(reversed);"
    },
    {
        "instruction": "How would you implement a simple bubble sort algorithm in Java?",
        "input": "int[] nums = {37, 45, 29, 8, 12, 88, 58};",
        "response": "public static void bubbleSort(int[] nums) {\n    int n = nums.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - 1 - i; j++) {\n            if (nums[j] > nums[j + 1]) {\n                int temp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint[] nums = {37, 45, 29, 8, 12, 88, 58};\nbubbleSort(nums);",
        "output": "public static void bubbleSort(int[] nums) {\n    int n = nums.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - 1 - i; j++) {\n            if (nums[j] > nums[j + 1]) {\n                int temp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint[] nums = {37, 45, 29, 8, 12, 88, 58};\nbubbleSort(nums);"
    },
    {
        "instruction": "Write a C++ program to calculate the factorial of a given number.",
        "input": "5",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int num = 5;\n    cout << 'Factorial of ' << num << ' is ' << factorial(num) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int num = 5;\n    cout << 'Factorial of ' << num << ' is ' << factorial(num) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Shell script that accepts two numbers and calculates their greatest common divisor (GCD).",
        "input": "42, 56",
        "response": "#!/bin/bash\n\ngcd() {\n    local a=$1\n    local b=$2\n\n    while [ $b -ne 0 ]; do\n        local temp=$b\n        b=$((a % b))\n        a=$temp\n    done\n\n    echo $a\n}\n\nnum1=42\nnum2=56\nresult=$(gcd $num1 $num2)\necho 'The GCD of' $num1 'and' $num2 'is:' $result",
        "output": "#!/bin/bash\n\ngcd() {\n    local a=$1\n    local b=$2\n\n    while [ $b -ne 0 ]; do\n        local temp=$b\n        b=$((a % b))\n        a=$temp\n    done\n\n    echo $a\n}\n\nnum1=42\nnum2=56\nresult=$(gcd $num1 $num2)\necho 'The GCD of' $num1 'and' $num2 'is:' $result"
    },
    {
        "instruction": "Create a C++ function that calculates the length of a null-terminated string.",
        "input": "const char *string = \"Calculate my length!\";",
        "response": "size_t string_length(const char *str) {\n    size_t length = 0;\n    while (*str != '\\0') {\n        length++;\n        str++;\n    }\n    return length;\n}",
        "output": "size_t string_length(const char *str) {\n    size_t length = 0;\n    while (*str != '\\0') {\n        length++;\n        str++;\n    }\n    return length;\n}"
    },
    {
        "instruction": "What is the alteration needed to change the API endpoint from 'http://my-api.com/old-endpoint' to 'https://new-api.com/new-endpoint' in the following JavaScript code?",
        "input": "const axios = require('axios');\n\nasync function fetchData() {\n    const response = await axios.get('http://my-api.com/old-endpoint');\n    return response.data;\n}\nfetchData();",
        "response": "Replace the old endpoint URL with the new one on the axios.get line. The new line would look like:\n\nconst response = await axios.get('https://new-api.com/new-endpoint');",
        "output": "Replace the old endpoint URL with the new one on the axios.get line. The new line would look like:\n\nconst response = await axios.get('https://new-api.com/new-endpoint');"
    },
    {
        "instruction": "Compute the sum of elements in an array in Java, given an integer array.",
        "input": "int[] numbers = {3, 5, 7, 9, 2};",
        "response": "public int sum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "output": "public int sum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "In Python, convert a given list of strings into a dictionary, where each string is a key and its length is the corresponding value.",
        "input": "words = ['apple', 'banana', 'cherry']",
        "response": "def strings_to_dict(words):\n    word_dict = {}\n    for word in words:\n        word_dict[word] = len(word)\n    return word_dict",
        "output": "def strings_to_dict(words):\n    word_dict = {}\n    for word in words:\n        word_dict[word] = len(word)\n    return word_dict"
    },
    {
        "instruction": "Create a Python function to calculate the area of a triangle, given its base and height.",
        "input": "base = 10, height = 5",
        "response": "def triangle_area(base, height):\n    return 0.5 * base * height\n\narea = triangle_area(10, 5)\nprint(area)",
        "output": "def triangle_area(base, height):\n    return 0.5 * base * height\n\narea = triangle_area(10, 5)\nprint(area)"
    },
    {
        "instruction": "How can we fix the indentation error in the following Python code?",
        "input": "def foo():\nprint('Hello World')",
        "response": "def foo():\n    print('Hello World')\n\nfoo()",
        "output": "def foo():\n    print('Hello World')\n\nfoo()"
    },
    {
        "instruction": "Translate the following Python code into JavaScript: def add(a, b): return a + b",
        "input": "",
        "response": "function add(a, b) {\n    return a + b;\n}",
        "output": "function add(a, b) {\n    return a + b;\n}"
    },
    {
        "instruction": "What is the expected output of the following Java code? public class Main { public static void main(String[] args) { int x = 5; int y = 7; System.out.println(x + y); } }",
        "input": "",
        "response": "The expected output of the provided code is:\n\n12",
        "output": "The expected output of the provided code is:\n\n12"
    },
    {
        "instruction": "Design a Javascript function that takes an array of integers as input and returns an object with the properties 'sum' and 'average', representing the sum of these integers and their average.",
        "input": "[4, 6, 8, 2]",
        "response": "function arrayStats(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let average = sum / arr.length;\n  return { sum: sum, average: average };\n}",
        "output": "function arrayStats(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let average = sum / arr.length;\n  return { sum: sum, average: average };\n}"
    },
    {
        "instruction": "Write a Python function that accepts a string and returns a boolean indicating whether the string consists of only uppercase letters.",
        "input": "HELLO",
        "response": "def is_all_uppercase(s):\n    for char in s:\n        if not char.isupper():\n            return False\n    return True",
        "output": "def is_all_uppercase(s):\n    for char in s:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "instruction": "Implement a Java method that, given a List of strings, returns the string with the maximum length. If there is a tie, return the first occurrence of the longest string.",
        "input": "[\"hello\", \"world\", \"programming\", \"java\"]",
        "response": "public String findLongestString(List<String> strings) {\n    String longest = \"\";\n    for (String str : strings) {\n        if (str.length() > longest.length()) {\n            longest = str;\n        }\n    }\n    return longest;\n}",
        "output": "public String findLongestString(List<String> strings) {\n    String longest = \"\";\n    for (String str : strings) {\n        if (str.length() > longest.length()) {\n            longest = str;\n        }\n    }\n    return longest;\n}"
    },
    {
        "instruction": "Create a C++ function that takes a vector of strings as input, and modifies it in-place by reversing the order of the elements.",
        "input": "[\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"]",
        "response": "#include <vector>\n#include <algorithm>\n\nvoid reverseVector(std::vector<std::string> &input) {\n    std::reverse(input.begin(), input.end());\n}",
        "output": "#include <vector>\n#include <algorithm>\n\nvoid reverseVector(std::vector<std::string> &input) {\n    std::reverse(input.begin(), input.end());\n}"
    },
    {
        "instruction": "Explain the purpose of the following Python code:",
        "input": "import os\n\nfile_path = 'example.txt'\n\nif os.path.exists(file_path):\n    os.remove(file_path)\n    print(f'{file_path} has been deleted.')\nelse:\n    print(f'{file_path} does not exist.')",
        "response": "The given Python code imports the 'os' module and then checks if a file named 'example.txt' exists in the current directory. If the file exists, it deletes the file and prints a message indicating that the file has been deleted. If the file does not exist, it prints a message stating that the 'example.txt' file does not exist.",
        "output": "The given Python code imports the 'os' module and then checks if a file named 'example.txt' exists in the current directory. If the file exists, it deletes the file and prints a message indicating that the file has been deleted. If the file does not exist, it prints a message stating that the 'example.txt' file does not exist."
    },
    {
        "instruction": "Rewrite the JavaScript code in its equivalent Python code:",
        "input": "function fibonacciRecursive(n) {\n  if (n < 2) return n;\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n}\n\nconsole.log(fibonacciRecursive(10));",
        "response": "def fibonacci_recursive(n):\n    if n < 2:\n        return n\n    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\n\nprint(fibonacci_recursive(10))",
        "output": "def fibonacci_recursive(n):\n    if n < 2:\n        return n\n    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n\n\nprint(fibonacci_recursive(10))"
    },
    {
        "instruction": "Given a matrix represented by a list of lists in Python, write a function to transpose the matrix.",
        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "response": "def transpose_matrix(matrix):\n    return [list(row) for row in zip(*matrix)]\n\n\ninput_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nresult = transpose_matrix(input_matrix)\nprint(result)",
        "output": "def transpose_matrix(matrix):\n    return [list(row) for row in zip(*matrix)]\n\n\ninput_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nresult = transpose_matrix(input_matrix)\nprint(result)"
    },
    {
        "instruction": "What would be the output of the following C++ code?",
        "input": "#include <iostream>\n\nint main() {\n    int x = 10;\n    int y = 3;\n\n    double z = static_cast<double>(x) / y;\n    std::cout << z << std::endl;\n\n    return 0;\n}",
        "response": "The output of the given C++ code would be '3.33333'. The code divides an integer x (10) by an integer y (3), and it casts x to a double to perform a floating-point division, resulting in the floating-point value '3.33333' which is printed to the console.",
        "output": "The output of the given C++ code would be '3.33333'. The code divides an integer x (10) by an integer y (3), and it casts x to a double to perform a floating-point division, resulting in the floating-point value '3.33333' which is printed to the console."
    },
    {
        "instruction": "Create a JavaScript function that generates the Fibonacci sequence up to a given number of terms.",
        "input": "10",
        "response": "function generateFibonacci(n) {\n    let sequence = [0, 1];\n\n    for (let i = 2; i < n; i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2]);\n    }\n\n    return sequence.slice(0, n);\n}\n\nconsole.log(generateFibonacci(10));",
        "output": "function generateFibonacci(n) {\n    let sequence = [0, 1];\n\n    for (let i = 2; i < n; i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2]);\n    }\n\n    return sequence.slice(0, n);\n}\n\nconsole.log(generateFibonacci(10));"
    },
    {
        "instruction": "How do you convert a string to an integer in the C programming language?",
        "input": "\"42\"",
        "response": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    char str[] = \"42\";\n    int num = atoi(str);\n    printf(\"The integer value is: %d\\n\", num);\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    char str[] = \"42\";\n    int num = atoi(str);\n    printf(\"The integer value is: %d\\n\", num);\n    return 0;\n}"
    },
    {
        "instruction": "Write a Ruby program to count the number of occurrences of a specified character in a given string.",
        "input": "string: 'programming', character: 'm'",
        "response": "def count_char_occurrences(str, char)\n    count = 0\n    str.each_char { |c| count += 1 if c == char }\n    count\nend\n\nputs count_char_occurrences('programming', 'm')",
        "output": "def count_char_occurrences(str, char)\n    count = 0\n    str.each_char { |c| count += 1 if c == char }\n    count\nend\n\nputs count_char_occurrences('programming', 'm')"
    },
    {
        "instruction": "What would be the best approach to implement a queue in Python?",
        "input": "",
        "response": "from collections import deque\n\nclass Queue:\n\n    def __init__(self):\n        self.elements = deque()\n\n    def enqueue(self, item):\n        self.elements.append(item)\n\n    def dequeue(self):\n        if len(self.elements) < 1:\n            return None\n        return self.elements.popleft()\n\n    def size(self):\n        return len(self.elements)\n\n# Example usage:\nqueue = Queue()\nqueue.enqueue('apple')\nqueue.enqueue('banana')\nqueue.enqueue('cherry')\nprint(queue.dequeue())",
        "output": "from collections import deque\n\nclass Queue:\n\n    def __init__(self):\n        self.elements = deque()\n\n    def enqueue(self, item):\n        self.elements.append(item)\n\n    def dequeue(self):\n        if len(self.elements) < 1:\n            return None\n        return self.elements.popleft()\n\n    def size(self):\n        return len(self.elements)\n\n# Example usage:\nqueue = Queue()\nqueue.enqueue('apple')\nqueue.enqueue('banana')\nqueue.enqueue('cherry')\nprint(queue.dequeue())"
    },
    {
        "instruction": "Create a JavaScript function that generates an array of Fibonacci numbers up to a given limit.",
        "input": "Limit: 30",
        "response": "function generateFibonacci(limit) {\n    let sequence = [0, 1];\n    while (sequence[sequence.length - 1] + sequence[sequence.length - 2] <= limit) {\n        sequence.push(sequence[sequence.length - 1] + sequence[sequence.length - 2]);\n    }\n    return sequence;\n}\n\nvar fibonacciArray = generateFibonacci(30);\nconsole.log(fibonacciArray);",
        "output": "function generateFibonacci(limit) {\n    let sequence = [0, 1];\n    while (sequence[sequence.length - 1] + sequence[sequence.length - 2] <= limit) {\n        sequence.push(sequence[sequence.length - 1] + sequence[sequence.length - 2]);\n    }\n    return sequence;\n}\n\nvar fibonacciArray = generateFibonacci(30);\nconsole.log(fibonacciArray);"
    },
    {
        "instruction": "What should be the output of the following C++ code?\n\n#include<iostream>\nusing namespace std;\nint main() {\n    int x = 10;\n    x += x - -5;\n    cout << x;\n    return 0;\n}",
        "input": "",
        "response": "25",
        "output": "25"
    },
    {
        "instruction": "Rewrite the following Python code using a list comprehension: numbers = [1, 2, 3, 4, 5]\nevens = []\nfor num in numbers:\n    if num % 2 == 0:\n        evens.append(num)",
        "input": "numbers = [1, 2, 3, 4, 5]",
        "response": "evens = [num for num in numbers if num % 2 == 0]",
        "output": "evens = [num for num in numbers if num % 2 == 0]"
    },
    {
        "instruction": "Implement a Java method called countVowels which takes a string as input and returns the number of vowels in the given string.",
        "input": "Input string: 'AI Learns to Code'",
        "response": "public static int countVowels(String input) {\n    int vowelCount = 0;\n    String vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (vowels.indexOf(c) != -1) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}\n\nString input = \"AI Learns to Code\";\nint result = countVowels(input);\nSystem.out.println(result);",
        "output": "public static int countVowels(String input) {\n    int vowelCount = 0;\n    String vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (vowels.indexOf(c) != -1) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}\n\nString input = \"AI Learns to Code\";\nint result = countVowels(input);\nSystem.out.println(result);"
    },
    {
        "instruction": "Create a C++ function that takes two integers as input and returns their greatest common divisor (GCD).",
        "input": "",
        "response": "int gcd(int a, int b) {\n   if (b == 0) return a;\n   return gcd(b, a % b);\n}",
        "output": "int gcd(int a, int b) {\n   if (b == 0) return a;\n   return gcd(b, a % b);\n}"
    },
    {
        "instruction": "Implement a Python function that reads a CSV file and outputs the sum of all numeric values in a given column.",
        "input": "CSV Example: name,age\nAlice,30\nBob,22\nCarol,45\n",
        "response": "import csv\n\ndef sum_column(filename, column):\n    total = 0\n    with open(filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total += int(row[column])\n    return total",
        "output": "import csv\n\ndef sum_column(filename, column):\n    total = 0\n    with open(filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total += int(row[column])\n    return total"
    },
    {
        "instruction": "How would you correct the following Java code to prevent possible NullPointerException?",
        "input": "String projectName = project.getName();\nif (projectName.equals('example')) {\n    System.out.println('Example project');\n}",
        "response": "String projectName = project != null ? project.getName() : null;\nif ('example'.equals(projectName)) {\n    System.out.println('Example project');\n}",
        "output": "String projectName = project != null ? project.getName() : null;\nif ('example'.equals(projectName)) {\n    System.out.println('Example project');\n}"
    },
    {
        "instruction": "Create a shell script that lists all the .txt files in the current directory and appends the modified date and time to their respective contents.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *.txt; do\n   modDate=$(stat -c %y \"${file}\")\n   echo \"\nModified Date: ${modDate}\" >> \"${file}\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt; do\n   modDate=$(stat -c %y \"${file}\")\n   echo \"\nModified Date: ${modDate}\" >> \"${file}\"\ndone"
    },
    {
        "instruction": "Create a Python function that counts the number of vowels in a given string and returns the count as an integer.",
        "input": "Example string: 'Artificial Intelligence is fascinating.'",
        "response": "def count_vowels(text):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n\nexample_string = 'Artificial Intelligence is fascinating.'\nresult = count_vowels(example_string)\nprint(result)",
        "output": "def count_vowels(text):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n\nexample_string = 'Artificial Intelligence is fascinating.'\nresult = count_vowels(example_string)\nprint(result)"
    },
    {
        "instruction": "What would be the output of the following Java code?",
        "input": "public class Test {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 5;\n        int c = a / b * 2;\n        System.out.println(c);\n    }\n}",
        "response": "The output would be 4. The calculation is (a / b) * 2, and (10 / 5) * 2 = 4.",
        "output": "The output would be 4. The calculation is (a / b) * 2, and (10 / 5) * 2 = 4."
    },
    {
        "instruction": "Modify the following SQL query to return the first 10 rows of the 'students' table.",
        "input": "SELECT * FROM students;",
        "response": "SELECT * FROM students LIMIT 10;",
        "output": "SELECT * FROM students LIMIT 10;"
    },
    {
        "instruction": "Given a CSS rule, demonstrate how to apply the rule to a specific HTML element using an inline style.",
        "input": "CSS rule: 'font-weight: bold;'",
        "response": "<p style='font-weight: bold;'>This text is bold using an inline style.</p>",
        "output": "<p style='font-weight: bold;'>This text is bold using an inline style.</p>"
    },
    {
        "instruction": "Write a Javascript function that calculates the Fibonacci sequence up to a given integer n, returning the result as an array.",
        "input": "10",
        "response": "function fibonacci(n) {\n    const sequence = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2]);\n    }\n    return sequence;\n}\n\nconsole.log(fibonacci(10));",
        "output": "function fibonacci(n) {\n    const sequence = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2]);\n    }\n    return sequence;\n}\n\nconsole.log(fibonacci(10));"
    },
    {
        "instruction": "Find and fix the error in the following C++ code for calculating the factorial of a given number.",
        "input": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n);\n}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;\n}",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python script that takes a text file as input and removes all the vowels in the file, then saves the result to a new file.",
        "input": "input_file.txt",
        "response": "import sys\n\ninput_file = 'input_file.txt'\noutput_file = 'output_file.txt'\n\nvowels = 'AEIOUaeiou'\n\nwith open(input_file, 'r') as infile, open(output_file, 'w') as outfile:\n    for line in infile:\n        for vowel in vowels:\n            line = line.replace(vowel, '')\n        outfile.write(line)\n\nprint('Vowels removed and saved to:', output_file)",
        "output": "import sys\n\ninput_file = 'input_file.txt'\noutput_file = 'output_file.txt'\n\nvowels = 'AEIOUaeiou'\n\nwith open(input_file, 'r') as infile, open(output_file, 'w') as outfile:\n    for line in infile:\n        for vowel in vowels:\n            line = line.replace(vowel, '')\n        outfile.write(line)\n\nprint('Vowels removed and saved to:', output_file)"
    },
    {
        "instruction": "Can you provide an example of a Shell script to create a directory only if it doesn't exist?",
        "input": "new_directory",
        "response": "#!/bin/sh\n\ndir_name='new_directory'\n\nif [ ! -d \"$dir_name\" ]; then\n    mkdir \"$dir_name\"\n    echo \"Directory '$dir_name' created.\"\nelse\n    echo \"Directory '$dir_name' already exists.\"\nfi",
        "output": "#!/bin/sh\n\ndir_name='new_directory'\n\nif [ ! -d \"$dir_name\" ]; then\n    mkdir \"$dir_name\"\n    echo \"Directory '$dir_name' created.\"\nelse\n    echo \"Directory '$dir_name' already exists.\"\nfi"
    },
    {
        "instruction": "Create a JavaScript function that takes a string, convert it's all alphabets to uppercase.",
        "input": "hello world",
        "response": "function toUpperCase(str) {\n    return str.toUpperCase();\n}\n\nconsole.log(toUpperCase('hello world'));",
        "output": "function toUpperCase(str) {\n    return str.toUpperCase();\n}\n\nconsole.log(toUpperCase('hello world'));"
    },
    {
        "instruction": "In Java, implement a method that computes the factorial of a non-negative integer.",
        "input": "5",
        "response": "public static int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint result = factorial(5);\nSystem.out.println(result);",
        "output": "public static int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint result = factorial(5);\nSystem.out.println(result);"
    },
    {
        "instruction": "Write a C++ code which detects if the input string contains any digits.",
        "input": "Hello2World",
        "response": "#include <iostream>\n#include <string>\n#include <cctype>\n\nbool has_digit(const std::string& str) {\n    for (char ch : str) {\n        if (isdigit(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::string input = \"Hello2World\";\n    std::cout << (has_digit(input) ? \"Yes\" : \"No\") << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <cctype>\n\nbool has_digit(const std::string& str) {\n    for (char ch : str) {\n        if (isdigit(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::string input = \"Hello2World\";\n    std::cout << (has_digit(input) ? \"Yes\" : \"No\") << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How to implement FizzBuzz algorithm in Python which iterates over numbers from 1 to 100 and prints 'Fizz' when the number is divisible by 3, 'Buzz' when divisible by 5, and 'FizzBuzz' when divisible by both 3 and 5?",
        "input": "",
        "response": "for num in range(1, 101):\n    if num % 3 == 0 and num % 5 == 0:\n        print('FizzBuzz')\n    elif num % 3 == 0:\n        print('Fizz')\n    elif num % 5 == 0:\n        print('Buzz')\n    else:\n        print(num)",
        "output": "for num in range(1, 101):\n    if num % 3 == 0 and num % 5 == 0:\n        print('FizzBuzz')\n    elif num % 3 == 0:\n        print('Fizz')\n    elif num % 5 == 0:\n        print('Buzz')\n    else:\n        print(num)"
    },
    {
        "instruction": "Create a Java method that calculates the Fibonacci number at a given position using recursion.",
        "input": "",
        "response": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}",
        "output": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}"
    },
    {
        "instruction": "How would you implement bubble sort in C++?",
        "input": "",
        "response": "void bubbleSort(int arr[], int n) {\n   for (int i = 0; i < n-1; i++)\n       for (int j = 0; j < n-i-1; j++)\n           if (arr[j] > arr[j+1])\n              swap(&arr[j], &arr[j+1]);\n}\n\nvoid swap(int *xp, int *yp) {\n    int temp = *xp;\n    *xp = *yp;\n    *yp = temp;\n}",
        "output": "void bubbleSort(int arr[], int n) {\n   for (int i = 0; i < n-1; i++)\n       for (int j = 0; j < n-i-1; j++)\n           if (arr[j] > arr[j+1])\n              swap(&arr[j], &arr[j+1]);\n}\n\nvoid swap(int *xp, int *yp) {\n    int temp = *xp;\n    *xp = *yp;\n    *yp = temp;\n}"
    },
    {
        "instruction": "Provide a Python code snippet that encodes a given text input using Base64 encoding.",
        "input": "text = 'Hello, World!'",
        "response": "import base64\n\ntext = 'Hello, World!'\nencoded_text = base64.b64encode(text.encode('utf-8'))\nprint(encoded_text.decode('utf-8'))",
        "output": "import base64\n\ntext = 'Hello, World!'\nencoded_text = base64.b64encode(text.encode('utf-8'))\nprint(encoded_text.decode('utf-8'))"
    },
    {
        "instruction": "In JavaScript, write a function that takes a string as input and returns the number of vowels in the string.",
        "input": "",
        "response": "function countVowels(str) {\n  const vowels = 'aeiouAEIOU';\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "output": "function countVowels(str) {\n  const vowels = 'aeiouAEIOU';\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      count++;\n    }\n  }\n  return count;\n}"
    },
    {
        "instruction": "Create a JavaScript function that checks if a string contains a specified substring and returns a boolean value.",
        "input": "'hello world', 'world'",
        "response": "function containsSubstring(str, substring) {\n  return str.includes(substring);\n}\n\nconsole.log(containsSubstring('hello world', 'world'));",
        "output": "function containsSubstring(str, substring) {\n  return str.includes(substring);\n}\n\nconsole.log(containsSubstring('hello world', 'world'));"
    },
    {
        "instruction": "Write a Java method that takes a string and reverses its characters.",
        "input": "Hello, GPT-3!",
        "response": "public String reverseString(String input) {\n  StringBuilder reversed = new StringBuilder();\n  for (int i = input.length() - 1; i >= 0; i--) {\n    reversed.append(input.charAt(i));\n  }\n  return reversed.toString();\n}\n\nString result = reverseString('Hello, GPT-3!');\nSystem.out.println(result);",
        "output": "public String reverseString(String input) {\n  StringBuilder reversed = new StringBuilder();\n  for (int i = input.length() - 1; i >= 0; i--) {\n    reversed.append(input.charAt(i));\n  }\n  return reversed.toString();\n}\n\nString result = reverseString('Hello, GPT-3!');\nSystem.out.println(result);"
    },
    {
        "instruction": "Fix the C++ syntax error in the given code for calculating the factorial of a given number.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int n, factorial = 1;\n  cout << 'Enter an integer: ';\n  cin >> n;\n\n for (int i = 1; i <= n; ++i) {\n    factorial *= i;\n  ;\n\n  cout << 'Factorial of ' << n << ' = ' << factorial;\n  return 0;\n}",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int n, factorial = 1;\n  cout << 'Enter an integer: ';\n  cin >> n;\n\n  for (int i = 1; i <= n; ++i) {\n    factorial *= i;\n  }\n\n  cout << 'Factorial of ' << n << ' = ' << factorial;\n  return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int n, factorial = 1;\n  cout << 'Enter an integer: ';\n  cin >> n;\n\n  for (int i = 1; i <= n; ++i) {\n    factorial *= i;\n  }\n\n  cout << 'Factorial of ' << n << ' = ' << factorial;\n  return 0;\n}"
    },
    {
        "instruction": "In Python, create a function that takes a list of words, removes duplicates, and returns the unique words in alphabetical order.",
        "input": "['apple', 'banana', 'orange', 'banana', 'apple']",
        "response": "def unique_words(words):\n  unique_set = set(words)\n  unique_list = list(unique_set)\n  unique_list.sort()\n  return unique_list\n\nwords = ['apple', 'banana', 'orange', 'banana', 'apple']\nresult = unique_words(words)\nprint(result)",
        "output": "def unique_words(words):\n  unique_set = set(words)\n  unique_list = list(unique_set)\n  unique_list.sort()\n  return unique_list\n\nwords = ['apple', 'banana', 'orange', 'banana', 'apple']\nresult = unique_words(words)\nprint(result)"
    },
    {
        "instruction": "Construct a Python function that calculates the sum of squares of all even numbers in a given list.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "def sum_even_squares(numbers):\n    sum_of_squares = 0\n    for number in numbers:\n        if number % 2 == 0:\n            sum_of_squares += number ** 2\n    return sum_of_squares",
        "output": "def sum_even_squares(numbers):\n    sum_of_squares = 0\n    for number in numbers:\n        if number % 2 == 0:\n            sum_of_squares += number ** 2\n    return sum_of_squares"
    },
    {
        "instruction": "Implement a JavaScript function that calculates the sum of all multiples of a given number within a given range.",
        "input": "number: 3, range: 1 to 10",
        "response": "function sumOfMultiples(num, maxRange) {\n    let sum = 0;\n    for (let i = 1; i <= maxRange; i++) {\n        if (i % num === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}",
        "output": "function sumOfMultiples(num, maxRange) {\n    let sum = 0;\n    for (let i = 1; i <= maxRange; i++) {\n        if (i % num === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Show me how to use an API in Java to get data from an endpoint and print the response.",
        "input": "API endpoint: 'https://jsonplaceholder.typicode.com/users'",
        "response": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class ApiRequest {\n\n    public static void main(String[] args) throws Exception {\n        String apiUrl = 'https://jsonplaceholder.typicode.com/users';\n        URL url = new URL(apiUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\n        connection.setRequestMethod('GET');\n        connection.setRequestProperty('Accept', 'application/json');\n\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        StringBuilder response = new StringBuilder();\n        String line;\n\n        while ((line = bufferedReader.readLine()) != null) {\n            response.append(line);\n        }\n\n        bufferedReader.close();\n        System.out.println(response.toString());\n    }\n}",
        "output": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class ApiRequest {\n\n    public static void main(String[] args) throws Exception {\n        String apiUrl = 'https://jsonplaceholder.typicode.com/users';\n        URL url = new URL(apiUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\n        connection.setRequestMethod('GET');\n        connection.setRequestProperty('Accept', 'application/json');\n\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        StringBuilder response = new StringBuilder();\n        String line;\n\n        while ((line = bufferedReader.readLine()) != null) {\n            response.append(line);\n        }\n\n        bufferedReader.close();\n        System.out.println(response.toString());\n    }\n}"
    },
    {
        "instruction": "What would be the shell script code to count the number of files in a directory?",
        "input": "directory: '/home/user/documents'",
        "response": "#!/bin/sh\n\ndir='/home/user/documents'\ncount=$(ls -1A \"$dir\" | wc -l)\necho \"Number of files in $dir: $count\"",
        "output": "#!/bin/sh\n\ndir='/home/user/documents'\ncount=$(ls -1A \"$dir\" | wc -l)\necho \"Number of files in $dir: $count\""
    },
    {
        "instruction": "Create a Java method that takes an array of integers as input and returns the array sorted in ascending order using the Bubble Sort algorithm.",
        "input": "",
        "response": "public int[] bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}",
        "output": "public int[] bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}"
    },
    {
        "instruction": "Write a JavaScript function that accepts a string as input and returns the string with its letters reversed.",
        "input": "",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "How can exception handling be implemented in Python to catch errors when trying to convert a string to an integer?",
        "input": "",
        "response": "def convert_to_int(input_str):\n    try:\n        integer_value = int(input_str)\n        return integer_value\n    except ValueError:\n        print('Unable to convert input to integer. Please provide a valid integer.')\n        return None",
        "output": "def convert_to_int(input_str):\n    try:\n        integer_value = int(input_str)\n        return integer_value\n    except ValueError:\n        print('Unable to convert input to integer. Please provide a valid integer.')\n        return None"
    },
    {
        "instruction": "Translate the following Python code to C++: 'def add_two_numbers(a, b): return a + b'",
        "input": "",
        "response": "#include <iostream>\n\nint add_two_numbers(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int num1 = 3, num2 = 4;\n    int sum = add_two_numbers(num1, num2);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint add_two_numbers(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int num1 = 3, num2 = 4;\n    int sum = add_two_numbers(num1, num2);\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java function that takes an integer and returns its corresponding Roman numeral representation. The input number will be between 1 and 3999.",
        "input": "",
        "response": "public class RomanNumerals {\n\n    public static String intToRoman(int num) {\n        String[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\n        String[] hundreds = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] tens = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] ones = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n        return thousands[num / 1000] +\n            hundreds[(num % 1000) / 100] +\n            tens[(num % 100) / 10] +\n            ones[num % 10];\n    }\n}",
        "output": "public class RomanNumerals {\n\n    public static String intToRoman(int num) {\n        String[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\n        String[] hundreds = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] tens = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] ones = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n        return thousands[num / 1000] +\n            hundreds[(num % 1000) / 100] +\n            tens[(num % 100) / 10] +\n            ones[num % 10];\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function called 'mergeArrays' that efficiently merges two sorted arrays into a single, new sorted array.",
        "input": "mergeArrays([1, 4, 6, 8], [2, 3, 7, 9])",
        "response": "function mergeArrays(arr1, arr2) {\n  let merged = [];\n  let i = 0, j = 0;\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) {\n      merged.push(arr1[i]);\n      i++;\n    } else {\n      merged.push(arr2[j]);\n      j++;\n    }\n  }\n\n  while (i < arr1.length) {\n    merged.push(arr1[i]);\n    i++;\n  }\n\n  while (j < arr2.length) {\n    merged.push(arr2[j]);\n    j++;\n  }\n\n  return merged;\n}",
        "output": "function mergeArrays(arr1, arr2) {\n  let merged = [];\n  let i = 0, j = 0;\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) {\n      merged.push(arr1[i]);\n      i++;\n    } else {\n      merged.push(arr2[j]);\n      j++;\n    }\n  }\n\n  while (i < arr1.length) {\n    merged.push(arr1[i]);\n    i++;\n  }\n\n  while (j < arr2.length) {\n    merged.push(arr2[j]);\n    j++;\n  }\n\n  return merged;\n}"
    },
    {
        "instruction": "Can you provide a Python code snippet that, utilizing the requests library, fetches data from a REST API specified by an endpoint, and prints it in the 'JSON' format?",
        "input": "URI: https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\nimport json\n\nresponse = requests.get('https://jsonplaceholder.typicode.com/todos/1')\nprint(response.json())",
        "output": "import requests\nimport json\n\nresponse = requests.get('https://jsonplaceholder.typicode.com/todos/1')\nprint(response.json())"
    },
    {
        "instruction": "Provide a C++ function that takes a vector of integers as input and reorders it such that even numbers appear before odd numbers. The relative order of even and odd numbers should remain unchanged.",
        "input": "std::vector<int> input = {1, 2, 3, 4, 5, 6, 7, 8, 9};",
        "response": "#include <vector>\n#include <algorithm>\n\nvoid reorderEvenOdd(std::vector<int>& input) {\n  std::stable_partition(input.begin(), input.end(), [](int x) { return x % 2 == 0; });\n}\n",
        "output": "#include <vector>\n#include <algorithm>\n\nvoid reorderEvenOdd(std::vector<int>& input) {\n  std::stable_partition(input.begin(), input.end(), [](int x) { return x % 2 == 0; });\n}\n"
    },
    {
        "instruction": "Create a Java method that accepts a string and returns the word count.",
        "input": "public class WordCounter {\n    public static void main(String[] args) {\n        String testString = \"This is a test sentence with seven words.\";\n        System.out.println(wordCount(testString));\n    }\n}",
        "response": "public static int wordCount(String input) {\n    String[] words = input.split(\"\\\\s+\");\n    return words.length;\n}",
        "output": "public static int wordCount(String input) {\n    String[] words = input.split(\"\\\\s+\");\n    return words.length;\n}"
    },
    {
        "instruction": "How to write a simple Python script that reads data from a CSV file and prints the content of the second column?",
        "input": "import csv\n\ndata = \"\"\"Name,Age\nAlice,30\nBob,25\nCharlie,22\"\"\"\n\nwith open('sample.csv', 'w') as file:\n    file.write(data)\n\n# Read the content of the second column from 'sample.csv'",
        "response": "import csv\n\nwith open('sample.csv', 'r') as file:\n    reader = csv.reader(file)\n    next(reader)\n    for row in reader:\n        print(row[1])",
        "output": "import csv\n\nwith open('sample.csv', 'r') as file:\n    reader = csv.reader(file)\n    next(reader)\n    for row in reader:\n        print(row[1])"
    },
    {
        "instruction": "Write a C++ program that computes the gcd (greatest common divisor) of two integers using the Euclidean algorithm.",
        "input": "#include <iostream>\n\nint main() {\n    int a, b;\n    std::cout << \"Enter two integers: \";\n    std::cin >> a >> b;\n    // Calculate gcd of a and b\n\n    return 0;\n}",
        "response": "int gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n// In the main function, add the following line:\nstd::cout << \"gcd(\" << a << \", \" << b << \") = \" << gcd(a, b) << std::endl;",
        "output": "int gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n// In the main function, add the following line:\nstd::cout << \"gcd(\" << a << \", \" << b << \") = \" << gcd(a, b) << std::endl;"
    },
    {
        "instruction": "Find and fix the error in the following JavaScript code to reverse the order of words in a given sentence.",
        "input": "function reverseWords(sentence) {\n    return sentence.split(,).reverse().join(' ');\n}\n\nconsole.log(reverseWords('The quick brown fox jumps over the lazy dog'));",
        "response": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');\n}\n\nconsole.log(reverseWords('The quick brown fox jumps over the lazy dog'));",
        "output": "function reverseWords(sentence) {\n    return sentence.split(' ').reverse().join(' ');\n}\n\nconsole.log(reverseWords('The quick brown fox jumps over the lazy dog'));"
    },
    {
        "instruction": "Write a Python function that converts a string to a list of words, then reverses that list, and finally joins the reversed words as a single string.",
        "input": "text: 'Welcome to the world of artificial intelligence'",
        "response": "def reverse_words(text):\n    words = text.split()  # Split string into words\n    words.reverse()  # Reverse the list of words\n    return ' '.join(words)  # Join the reversed words into a string\n\nresult = reverse_words('Welcome to the world of artificial intelligence')\nprint(result)  # Output: 'intelligence artificial of world the to Welcome'",
        "output": "def reverse_words(text):\n    words = text.split()  # Split string into words\n    words.reverse()  # Reverse the list of words\n    return ' '.join(words)  # Join the reversed words into a string\n\nresult = reverse_words('Welcome to the world of artificial intelligence')\nprint(result)  # Output: 'intelligence artificial of world the to Welcome'"
    },
    {
        "instruction": "Given a JavaScript code snippet, refactor it to use arrow functions instead of traditional function expressions, making the code more concise.",
        "input": "function sum(a, b) {\n  return a + b;\n}\n\nvar multiply = function(a, b) {\n  return a * b;\n};\n\nsetTimeout(function() {\n  console.log('Executed later after 1 second')\n}, 1000);",
        "response": "const sum = (a, b) => a + b;\n\nconst multiply = (a, b) => a * b;\n\nsetTimeout(() => {\n  console.log('Executed later after 1 second')\n}, 1000);",
        "output": "const sum = (a, b) => a + b;\n\nconst multiply = (a, b) => a * b;\n\nsetTimeout(() => {\n  console.log('Executed later after 1 second')\n}, 1000);"
    },
    {
        "instruction": "In Java, compose a simple program that calculates and displays the area of a circle with a given radius, using the formula A = \u00cf\u20ac * r^2.",
        "input": "radius: 5",
        "response": "public class CircleArea {\n    public static void main(String[] args) {\n        double radius = 5;\n        double area = Math.PI * Math.pow(radius, 2);\n        System.out.printf(\"Area of the circle with radius %.2f is: %.2f\\n\", radius, area);\n    }\n}",
        "output": "public class CircleArea {\n    public static void main(String[] args) {\n        double radius = 5;\n        double area = Math.PI * Math.pow(radius, 2);\n        System.out.printf(\"Area of the circle with radius %.2f is: %.2f\\n\", radius, area);\n    }\n}"
    },
    {
        "instruction": "How would you implement a recursive C++ function to calculate the Fibonacci sequence for a given integer value n?",
        "input": "n: 10",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 10;\n    int result = fibonacci(n);\n    std::cout << \"The Fibonacci value for n =\" << n << \" is: \" << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 10;\n    int result = fibonacci(n);\n    std::cout << \"The Fibonacci value for n =\" << n << \" is: \" << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that returns the longest word in a list of words.",
        "input": "[\"apple\", \"banana\", \"cherry\", \"blueberry\"]",
        "response": "def find_longest_word(words):\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nwords = [\"apple\", \"banana\", \"cherry\", \"blueberry\"]\nprint(find_longest_word(words))",
        "output": "def find_longest_word(words):\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nwords = [\"apple\", \"banana\", \"cherry\", \"blueberry\"]\nprint(find_longest_word(words))"
    },
    {
        "instruction": "How would you write a Java program to find the sum of all even integers between 1 and 100?",
        "input": "",
        "response": "public class SumEvenNumbers {\n    public static void main(String[] args) {\n        int sum = 0;\n        for (int i = 2; i <= 100; i += 2) {\n            sum += i;\n        }\n        System.out.println(\"Sum of even integers between 1 and 100: \" + sum);\n    }\n}",
        "output": "public class SumEvenNumbers {\n    public static void main(String[] args) {\n        int sum = 0;\n        for (int i = 2; i <= 100; i += 2) {\n            sum += i;\n        }\n        System.out.println(\"Sum of even integers between 1 and 100: \" + sum);\n    }\n}"
    },
    {
        "instruction": "Write SQL code to create a database table named 'employees' with fields 'id', 'first_name', 'last_name', 'email', 'salary', and 'date_hired'.",
        "input": "",
        "response": "CREATE TABLE employees (\n    id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    salary DECIMAL(10, 2) NOT NULL,\n    date_hired DATE NOT NULL\n);",
        "output": "CREATE TABLE employees (\n    id INT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    salary DECIMAL(10, 2) NOT NULL,\n    date_hired DATE NOT NULL\n);"
    },
    {
        "instruction": "Demonstrate a C++ code snippet to count the occurrence of a character within a given string.",
        "input": "\"This is a sample string\", 's'",
        "response": "#include <iostream>\n#include <string>\n\nint count_char_occurrence(const std::string &str, char character) {\n    int count = 0;\n    for (char c : str) {\n        if (c == character) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    std::string str = \"This is a sample string\";\n    char character = 's';\n    std::cout << \"Occurrence of '\" << character << \"'\": \" << count_char_occurrence(str, character) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint count_char_occurrence(const std::string &str, char character) {\n    int count = 0;\n    for (char c : str) {\n        if (c == character) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    std::string str = \"This is a sample string\";\n    char character = 's';\n    std::cout << \"Occurrence of '\" << character << \"'\": \" << count_char_occurrence(str, character) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function to calculate the sum of squares for numbers in a given list.",
        "input": "[2, 4, 6, 8, 10]",
        "response": "def sum_of_squares(numbers):\n    return sum([x**2 for x in numbers])\n\nnumbers = [2, 4, 6, 8, 10]\nresult = sum_of_squares(numbers)\nprint(result)",
        "output": "def sum_of_squares(numbers):\n    return sum([x**2 for x in numbers])\n\nnumbers = [2, 4, 6, 8, 10]\nresult = sum_of_squares(numbers)\nprint(result)"
    },
    {
        "instruction": "How can I fix the following JavaScript code snippet to sum up the values of an array?",
        "input": "let arr = [1, 2, 3, 4, 5];\nlet sum = 0;\nfor(let i = 0; i <= arr.length; i++) {\n  sum += arr[i];\n}",
        "response": "let arr = [1, 2, 3, 4, 5];\nlet sum = 0;\nfor(let i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\nconsole.log(sum);",
        "output": "let arr = [1, 2, 3, 4, 5];\nlet sum = 0;\nfor(let i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\nconsole.log(sum);"
    },
    {
        "instruction": "Write a Java program to demonstrate the use of inheritance by creating a class 'Animal' with a single method 'speak()' and a class 'Dog' that extends the 'Animal' class.",
        "input": "",
        "response": "class Animal {\n    void speak() {\n        System.out.println(\"Animal is speaking\");\n    }\n}\n\nclass Dog extends Animal {\n    void speak() {\n        System.out.println(\"Dog is barking\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myAnimal = new Animal();\n        Animal myDog = new Dog();\n\n        myAnimal.speak();\n        myDog.speak();\n    }\n}",
        "output": "class Animal {\n    void speak() {\n        System.out.println(\"Animal is speaking\");\n    }\n}\n\nclass Dog extends Animal {\n    void speak() {\n        System.out.println(\"Dog is barking\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myAnimal = new Animal();\n        Animal myDog = new Dog();\n\n        myAnimal.speak();\n        myDog.speak();\n    }\n}"
    },
    {
        "instruction": "Examine the given shell script code and detect possible syntax errors.",
        "input": "#!/bin/bash\n\nread -p \"Enter a number: \" number\necho\n\nif [ $number -eq 0 ]\nthen\n  echo \"Number is zero\"\nelif [ $number -lt 0 ]\nthen\n  echo \"Number is negative\"\nelse\n  echo \"Number is positive\"\nfi",
        "response": "No syntax errors detected.",
        "output": "No syntax errors detected."
    },
    {
        "instruction": "Create a JavaScript function that reverses a given string.",
        "input": "Reverse the string: 'hello world'",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconst reversedString = reverseString('hello world');\nconsole.log(reversedString);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconst reversedString = reverseString('hello world');\nconsole.log(reversedString);"
    },
    {
        "instruction": "How would you implement a C program to count the occurrences of each character in a given string?",
        "input": "Count the occurrences of each character in the string: 'programming'",
        "response": "#include <stdio.h>\n#include <string.h>\n\nvoid countOccurrences(char *str) {\n    int counts[256] = { 0 };\n    for (int i = 0; i < strlen(str); i++) {\n        counts[(int)str[i]]++;\n    }\n    for (int i = 0; i < 256; i++) {\n        if (counts[i] > 0) {\n            printf('%c: %d\\n', i, counts[i]);\n        }\n    }\n}\n\nint main() {\n    char input[] = 'programming';\n    countOccurrences(input);\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <string.h>\n\nvoid countOccurrences(char *str) {\n    int counts[256] = { 0 };\n    for (int i = 0; i < strlen(str); i++) {\n        counts[(int)str[i]]++;\n    }\n    for (int i = 0; i < 256; i++) {\n        if (counts[i] > 0) {\n            printf('%c: %d\\n', i, counts[i]);\n        }\n    }\n}\n\nint main() {\n    char input[] = 'programming';\n    countOccurrences(input);\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python script to find the Fibonacci sequence up to the nth term.",
        "input": "Find the Fibonacci sequence up to the 10th term.",
        "response": "def fibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    while len(sequence) < n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nn_terms = 10\nresult = fibonacci(n_terms)\nprint(f'The first {n_terms} terms of the Fibonacci sequence are: {result}')",
        "output": "def fibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    while len(sequence) < n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nn_terms = 10\nresult = fibonacci(n_terms)\nprint(f'The first {n_terms} terms of the Fibonacci sequence are: {result}')"
    },
    {
        "instruction": "Translate the following Java code to C++ code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, world!\" << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, world!\" << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a simple HTTP server in Python that responds with \"Hello, World!\" when accessed.",
        "input": "",
        "response": "import http.server\nimport socketserver\n\nPORT = 8000\n\nclass MyRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, World!')\n\nHandler = MyRequestHandler\n\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    print('serving at port', PORT)\n    httpd.serve_forever()",
        "output": "import http.server\nimport socketserver\n\nPORT = 8000\n\nclass MyRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'Hello, World!')\n\nHandler = MyRequestHandler\n\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    print('serving at port', PORT)\n    httpd.serve_forever()"
    },
    {
        "instruction": "Write a program in JavaScript that calculates the factorial of a given number.",
        "input": "",
        "response": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nconsole.log(factorial(5)); // Output: 120",
        "output": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nconsole.log(factorial(5)); // Output: 120"
    },
    {
        "instruction": "How would you implement a basic class in C++ to represent a 2D point?",
        "input": "",
        "response": "class Point2D {\npublic:\n    Point2D(double x, double y) : x_(x), y_(y) {}\n    double getX() const { return x_; }\n    double getY() const { return y_; }\n    void setX(double x) { x_ = x; }\n    void setY(double y) { y_ = y; }\n\nprivate:\n    double x_;\n    double y_;\n};",
        "output": "class Point2D {\npublic:\n    Point2D(double x, double y) : x_(x), y_(y) {}\n    double getX() const { return x_; }\n    double getY() const { return y_; }\n    void setX(double x) { x_ = x; }\n    void setY(double y) { y_ = y; }\n\nprivate:\n    double x_;\n    double y_;\n};"
    },
    {
        "instruction": "Create a Ruby script that takes a CSV file as input and outputs the unique values in the first column.",
        "input": "CSV file contents:\nName,Age,Location\nAlice,30,New York\nBob,25,Los Angeles\nAlice,31,San Francisco\nCharles,22,Chicago",
        "response": "require 'csv'\n\nfile_content = \"Name,Age,Location\\nAlice,30,New York\\nBob,25,Los Angeles\\nAlice,31,San Francisco\\nCharles,22,Chicago\"\nfile_path = 'input.csv'\nFile.write(file_path, file_content)\n\ncsv_data = CSV.read(file_path)\ncolumn_index = 0\n\nunique_values = csv_data[1..-1].map { |row| row[column_index] }.uniq\nputs unique_values",
        "output": "require 'csv'\n\nfile_content = \"Name,Age,Location\\nAlice,30,New York\\nBob,25,Los Angeles\\nAlice,31,San Francisco\\nCharles,22,Chicago\"\nfile_path = 'input.csv'\nFile.write(file_path, file_content)\n\ncsv_data = CSV.read(file_path)\ncolumn_index = 0\n\nunique_values = csv_data[1..-1].map { |row| row[column_index] }.uniq\nputs unique_values"
    },
    {
        "instruction": "Write a Python function that calculates the sum of squares of all even numbers between 1 and a given integer n, inclusive.",
        "input": "",
        "response": "def sum_of_squares(n):\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**2\n    return total",
        "output": "def sum_of_squares(n):\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "instruction": "What's the expected output of this Java code snippet? Identify any syntax errors, if present.```\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, \";\n        System.out.println(\"World!\");\n    }\n}```",
        "input": "",
        "response": "There is a syntax error in the code. Replace `System.out.println(\"Hello, \";` with `System.out.println(\"Hello, \");`. After the correction, the code will output the following text:\n\nHello, \nWorld!",
        "output": "There is a syntax error in the code. Replace `System.out.println(\"Hello, \";` with `System.out.println(\"Hello, \");`. After the correction, the code will output the following text:\n\nHello, \nWorld!"
    },
    {
        "instruction": "Create a JavaScript function named fibonacci that takes an integer n as an argument and returns the nth Fibonacci number.",
        "input": "",
        "response": "function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}",
        "output": "function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}"
    },
    {
        "instruction": "Develop a simple C++ program that prompts the user for inputting two integers, and then prints the sum, difference, product, and quotient of the two integers to the console.",
        "input": "",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a, b;\n  cout << \"Enter first integer: \";\n  cin >> a;\n  cout << \"Enter second integer: \";\n  cin >> b;\n\n  int sum = a + b;\n  int difference = a - b;\n  int product = a * b;\n  double quotient = static_cast<double>(a) / b;\n\n  cout << \"Sum: \" << sum << endl;\n  cout << \"Difference: \" << difference << endl;\n  cout << \"Product: \" << product << endl;\n  cout << \"Quotient: \" << quotient << endl;\n\n  return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a, b;\n  cout << \"Enter first integer: \";\n  cin >> a;\n  cout << \"Enter second integer: \";\n  cin >> b;\n\n  int sum = a + b;\n  int difference = a - b;\n  int product = a * b;\n  double quotient = static_cast<double>(a) / b;\n\n  cout << \"Sum: \" << sum << endl;\n  cout << \"Difference: \" << difference << endl;\n  cout << \"Product: \" << product << endl;\n  cout << \"Quotient: \" << quotient << endl;\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of integers and returns the product of all the numbers.",
        "input": "[2, 4, 6]",
        "response": "function productOfArray(arr) {\n  return arr.reduce((acc, val) => acc * val, 1);\n}",
        "output": "function productOfArray(arr) {\n  return arr.reduce((acc, val) => acc * val, 1);\n}"
    },
    {
        "instruction": "What would be the output of this given Java code snippet?",
        "input": "public class Main {\n  public static void main(String[] args) {\n    int[] nums = { 10, 20, 30, 40, 50 };\n    for (int i = 0; i < nums.length; i++) {\n      if (i % 2 == 0) {\n        System.out.print(nums[i] + \" \");\n      }\n    }\n  }\n}",
        "response": "The output would be: 10 30 50, because the loop iterates through the array and prints out only the numbers at even indices.",
        "output": "The output would be: 10 30 50, because the loop iterates through the array and prints out only the numbers at even indices."
    },
    {
        "instruction": "Create a simple C++ program that reads a user input line of text and outputs the number of characters in that line.",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n std::string inputLine;\n std::getline(std::cin, inputLine);\n std::cout << \"The number of characters in your input is: \" << inputLine.length();\n return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n std::string inputLine;\n std::getline(std::cin, inputLine);\n std::cout << \"The number of characters in your input is: \" << inputLine.length();\n return 0;\n}"
    },
    {
        "instruction": "How would you fix this Python code that crashes due to an indentation error?",
        "input": "def divide_num(a, b):\n   try:\n  result = a / b\n  print(result)\nexcept ZeroDivisionError:\n  print('Error: division by zero')\n\ndivide_num(10, 2)",
        "response": "def divide_num(a, b):\n   try:\n       result = a / b\n       print(result)\n   except ZeroDivisionError:\n       print('Error: division by zero')\n\ndivide_num(10, 2)",
        "output": "def divide_num(a, b):\n   try:\n       result = a / b\n       print(result)\n   except ZeroDivisionError:\n       print('Error: division by zero')\n\ndivide_num(10, 2)"
    },
    {
        "instruction": "Write a C# function that checks if an input string is a palindrome.",
        "input": "",
        "response": "public static bool IsPalindrome(string input)\n{\n    int start = 0;\n    int end = input.Length - 1;\n    while (start < end)\n    {\n        if (input[start] != input[end])\n        {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}",
        "output": "public static bool IsPalindrome(string input)\n{\n    int start = 0;\n    int end = input.Length - 1;\n    while (start < end)\n    {\n        if (input[start] != input[end])\n        {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}"
    },
    {
        "instruction": "How would you optimally merge two sorted lists in Python?",
        "input": "list1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6, 8]",
        "response": "def merge_sorted_lists(list1, list2):\n    i = j = 0\n    merged_list = []\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    merged_list.extend(list1[i:])\n    merged_list.extend(list2[j:])\n    return merged_list\n\nmerged_list = merge_sorted_lists(list1, list2)",
        "output": "def merge_sorted_lists(list1, list2):\n    i = j = 0\n    merged_list = []\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    merged_list.extend(list1[i:])\n    merged_list.extend(list2[j:])\n    return merged_list\n\nmerged_list = merge_sorted_lists(list1, list2)"
    },
    {
        "instruction": "Create a Java program that prints the factorial of a given number using recursion.",
        "input": "int number = 5;",
        "response": "public class Factorial {\n    public static void main(String[] args) {\n        int number = 5;\n        System.out.println(\"Factorial of \" + number + \" is \" + factorial(number));\n    }\n\n    public static int factorial(int number) {\n        if (number == 1 || number == 0) {\n            return 1;\n        }\n        return number * factorial(number - 1);\n    }\n}",
        "output": "public class Factorial {\n    public static void main(String[] args) {\n        int number = 5;\n        System.out.println(\"Factorial of \" + number + \" is \" + factorial(number));\n    }\n\n    public static int factorial(int number) {\n        if (number == 1 || number == 0) {\n            return 1;\n        }\n        return number * factorial(number - 1);\n    }\n}"
    },
    {
        "instruction": "Write a shell script that checks if a file exists and prints a respective message.",
        "input": "filename.txt",
        "response": "#!/bin/sh\n\nFILE=\"filename.txt\"\n\nif [ -e \"$FILE\" ]; then\n    echo \"File $FILE exists.\"\nelse\n    echo \"File $FILE does not exist.\"\nfi",
        "output": "#!/bin/sh\n\nFILE=\"filename.txt\"\n\nif [ -e \"$FILE\" ]; then\n    echo \"File $FILE exists.\"\nelse\n    echo \"File $FILE does not exist.\"\nfi"
    },
    {
        "instruction": "Create a JavaScript function that takes two lists as arguments and returns a new list with the elements combined alternately from both lists.",
        "input": "",
        "response": "function combineAlternately(list1, list2) {\n  let result = [];\n  for (let i = 0; i < Math.max(list1.length, list2.length); i++) {\n    if (i < list1.length) result.push(list1[i]);\n    if (i < list2.length) result.push(list2[i]);\n  }\n  return result;\n}",
        "output": "function combineAlternately(list1, list2) {\n  let result = [];\n  for (let i = 0; i < Math.max(list1.length, list2.length); i++) {\n    if (i < list1.length) result.push(list1[i]);\n    if (i < list2.length) result.push(list2[i]);\n  }\n  return result;\n}"
    },
    {
        "instruction": "Write a Java code snippet that calculates the square root of a given number and rounds up the result to the nearest integer.",
        "input": "",
        "response": "import java.lang.Math;\n\nint n = 25;\nint squareRoot = (int) Math.ceil(Math.sqrt(n));\nSystem.out.println(squareRoot);",
        "output": "import java.lang.Math;\n\nint n = 25;\nint squareRoot = (int) Math.ceil(Math.sqrt(n));\nSystem.out.println(squareRoot);"
    },
    {
        "instruction": "How do I fix the syntax error in the following Python code snippet that calculates a factorial using recursion? 'def factorial(n): if n <= 1 return 1 else return n * factorial(n - 1)'",
        "input": "",
        "response": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "Create a simple API in Python using the Flask library that accepts a string from the user and returns the reversed string as the output. Provide an example of the API route and function.",
        "input": "",
        "response": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/reverse', methods=['POST'])\ndef reverse_string():\n    text = request.form['text']\n    reversed_text = text[::-1]\n    return reversed_text\n\nif __name__ == '__main__':\n    app.run()",
        "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/reverse', methods=['POST'])\ndef reverse_string():\n    text = request.form['text']\n    reversed_text = text[::-1]\n    return reversed_text\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Create a JavaScript function that accepts a string and returns the word count.",
        "input": "'This is an example input'",
        "response": "function wordCount(str) {\n  return str.trim().split(/\\s+/).length;\n}\n\nlet count = wordCount('This is an example input');\nconsole.log(count);",
        "output": "function wordCount(str) {\n  return str.trim().split(/\\s+/).length;\n}\n\nlet count = wordCount('This is an example input');\nconsole.log(count);"
    },
    {
        "instruction": "Provide a C++ program that determines if a given number is prime or not.",
        "input": "23",
        "response": "#include <iostream>\n#include <cmath>\n\nbool isPrime(int num) {\n  if (num <= 1) return false;\n  for (int i = 2; i <= sqrt(num); i++) {\n    if (num % i == 0) return false;\n  }\n  return true;\n}\n\nint main() {\n  int num = 23;\n  bool prime = isPrime(num);\n  std::cout << (prime ? \"Prime\" : \"Not Prime\") << '\\n';\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nbool isPrime(int num) {\n  if (num <= 1) return false;\n  for (int i = 2; i <= sqrt(num); i++) {\n    if (num % i == 0) return false;\n  }\n  return true;\n}\n\nint main() {\n  int num = 23;\n  bool prime = isPrime(num);\n  std::cout << (prime ? \"Prime\" : \"Not Prime\") << '\\n';\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a Shell script to append the content of one file to another, using command line arguments.",
        "input": "input_file.txt, output_file.txt",
        "response": "#!/bin/bash\n\ninput_file=$1\noutput_file=$2\n\ncat $input_file >> $output_file",
        "output": "#!/bin/bash\n\ninput_file=$1\noutput_file=$2\n\ncat $input_file >> $output_file"
    },
    {
        "instruction": "In Python, given a list of integers, find the index of the smallest element.",
        "input": "[4, 8, 1, 5, 3]",
        "response": "def find_min_index(numbers):\n    return numbers.index(min(numbers))\n\nexample_list = [4, 8, 1, 5, 3]\nindex = find_min_index(example_list)\nprint(index)",
        "output": "def find_min_index(numbers):\n    return numbers.index(min(numbers))\n\nexample_list = [4, 8, 1, 5, 3]\nindex = find_min_index(example_list)\nprint(index)"
    },
    {
        "instruction": "Implement a C++ function that merges two sorted vectors into a new sorted vector.",
        "input": "vector<int> vec1 = {1, 3, 5};\nvector<int> vec2 = {2, 4, 6};",
        "response": "#include <iostream>\n#include <vector>\n\nstd::vector<int> mergeSortedVectors(std::vector<int>& vec1, std::vector<int>& vec2) {\n    std::vector<int> merged;\n    int i = 0, j = 0;\n    while (i < vec1.size() && j < vec2.size()) {\n        if (vec1[i] < vec2[j]) {\n            merged.push_back(vec1[i++]);\n        } else {\n            merged.push_back(vec2[j++]);\n        }\n    }\n    while (i < vec1.size()) {\n        merged.push_back(vec1[i++]);\n    }\n    while (j < vec2.size()) {\n        merged.push_back(vec2[j++]);\n    }\n    return merged;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 3, 5};\n    std::vector<int> vec2 = {2, 4, 6};\n    std::vector<int> merged = mergeSortedVectors(vec1, vec2);\n    for (int num : merged) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nstd::vector<int> mergeSortedVectors(std::vector<int>& vec1, std::vector<int>& vec2) {\n    std::vector<int> merged;\n    int i = 0, j = 0;\n    while (i < vec1.size() && j < vec2.size()) {\n        if (vec1[i] < vec2[j]) {\n            merged.push_back(vec1[i++]);\n        } else {\n            merged.push_back(vec2[j++]);\n        }\n    }\n    while (i < vec1.size()) {\n        merged.push_back(vec1[i++]);\n    }\n    while (j < vec2.size()) {\n        merged.push_back(vec2[j++]);\n    }\n    return merged;\n}\n\nint main() {\n    std::vector<int> vec1 = {1, 3, 5};\n    std::vector<int> vec2 = {2, 4, 6};\n    std::vector<int> merged = mergeSortedVectors(vec1, vec2);\n    for (int num : merged) {\n        std::cout << num << ' ';\n    }\n    return 0;\n}"
    },
    {
        "instruction": "How can I count the frequency of each character in a string using Python?",
        "input": "sample_string = 'hello world'",
        "response": "from collections import Counter\n\nsample_string = 'hello world'\nchar_count = Counter(sample_string)\n\nfor char, count in char_count.items():\n    print(f'{char}: {count}')",
        "output": "from collections import Counter\n\nsample_string = 'hello world'\nchar_count = Counter(sample_string)\n\nfor char, count in char_count.items():\n    print(f'{char}: {count}')"
    },
    {
        "instruction": "Compose a Java method to calculate the Euclidean distance between two points represented by arrays of doubles.",
        "input": "double[] pointA = {2, 3};\ndouble[] pointB = {5, 7};",
        "response": "public class EuclideanDistance {\n\n    public static double calculateDistance(double[] pointA, double[] pointB) {\n        double sum = 0;\n        for (int i = 0; i < pointA.length; i++) {\n            sum += Math.pow(pointA[i] - pointB[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static void main(String[] args) {\n        double[] pointA = {2, 3};\n        double[] pointB = {5, 7};\n        double distance = calculateDistance(pointA, pointB);\n        System.out.println(\"Euclidean distance: \" + distance);\n    }\n}",
        "output": "public class EuclideanDistance {\n\n    public static double calculateDistance(double[] pointA, double[] pointB) {\n        double sum = 0;\n        for (int i = 0; i < pointA.length; i++) {\n            sum += Math.pow(pointA[i] - pointB[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static void main(String[] args) {\n        double[] pointA = {2, 3};\n        double[] pointB = {5, 7};\n        double distance = calculateDistance(pointA, pointB);\n        System.out.println(\"Euclidean distance: \" + distance);\n    }\n}"
    },
    {
        "instruction": "Construct a shell script that takes a directory path as its argument and deletes all the empty subdirectories within it.",
        "input": "directory_path='/path/to/target/directory'",
        "response": "#!/bin/sh\n\ndirectory_path=\"$1\"\nfind \"$directory_path\" -type d -empty -exec rmdir {} \\;\n\n#Usage: ./remove_empty_subdirs.sh /path/to/target/directory",
        "output": "#!/bin/sh\n\ndirectory_path=\"$1\"\nfind \"$directory_path\" -type d -empty -exec rmdir {} \\;\n\n#Usage: ./remove_empty_subdirs.sh /path/to/target/directory"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a non-negative integer using a recursive approach.",
        "input": "",
        "response": "unsigned long long factorial(unsigned int n) {\n  if (n == 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}",
        "output": "unsigned long long factorial(unsigned int n) {\n  if (n == 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Translate the following Java code into Python code: 'public int addNumbers(int a, int b) { return a + b; }'",
        "input": "",
        "response": "def add_numbers(a, b):\n  return a + b",
        "output": "def add_numbers(a, b):\n  return a + b"
    },
    {
        "instruction": "How would you create a RESTful API in Node.js using the Express.js framework?",
        "input": "",
        "response": "1. Install Node.js and npm\n2. Create a new folder for your project and navigate to it in terminal\n3. Run 'npm init' to initialize a new Node.js project\n4. Install Express.js by running 'npm install express --save'\n5. Create a file called 'app.js'\n6. Add the following code in 'app.js':\n\n  const express = require('express');\n  const app = express();\n  const port = 3000;\n\n  // Define your API endpoints here\n  app.get('/', (req, res) => res.send('Hello World!'));\n\n  // Start the server\n  app.listen(port, () => console.log(`Example app listening at http://localhost:${port}`));\n\n7. Run 'node app.js' to start the server",
        "output": "1. Install Node.js and npm\n2. Create a new folder for your project and navigate to it in terminal\n3. Run 'npm init' to initialize a new Node.js project\n4. Install Express.js by running 'npm install express --save'\n5. Create a file called 'app.js'\n6. Add the following code in 'app.js':\n\n  const express = require('express');\n  const app = express();\n  const port = 3000;\n\n  // Define your API endpoints here\n  app.get('/', (req, res) => res.send('Hello World!'));\n\n  // Start the server\n  app.listen(port, () => console.log(`Example app listening at http://localhost:${port}`));\n\n7. Run 'node app.js' to start the server"
    },
    {
        "instruction": "Debug the following JavaScript code: 'function add(x, y) { return x + y; } console.lor(add(2, 3));'",
        "input": "",
        "response": "function add(x, y) {\n  return x + y;\n}\nconsole.log(add(2, 3));",
        "output": "function add(x, y) {\n  return x + y;\n}\nconsole.log(add(2, 3));"
    },
    {
        "instruction": "Create a function in Java that checks if a given string contains only unique characters.",
        "input": "",
        "response": "public boolean containsUniqueCharacters(String input) {\n    Set<Character> characterSet = new HashSet<>();\n    for (char c : input.toCharArray()) {\n        if (characterSet.contains(c)) {\n            return false;\n        }\n        characterSet.add(c);\n    }\n    return true;\n}",
        "output": "public boolean containsUniqueCharacters(String input) {\n    Set<Character> characterSet = new HashSet<>();\n    for (char c : input.toCharArray()) {\n        if (characterSet.contains(c)) {\n            return false;\n        }\n        characterSet.add(c);\n    }\n    return true;\n}"
    },
    {
        "instruction": "How would you write a Python function to find the first non-repeated character in a given string?",
        "input": "s = 'hellohe'",
        "response": "def first_non_repeated_char(s):\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    for c in s:\n        if char_count[c] == 1:\n            return c\n\nfirst_char = first_non_repeated_char(s)",
        "output": "def first_non_repeated_char(s):\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    for c in s:\n        if char_count[c] == 1:\n            return c\n\nfirst_char = first_non_repeated_char(s)"
    },
    {
        "instruction": "Design and implement a simple calculator in JavaScript that takes two numbers and a mathematical operation (addition, subtraction, multiplication or division) as input and returns the result.",
        "input": "number1 = 5, number2 = 3, operation = 'add'",
        "response": "function simpleCalculator(number1, number2, operation) {\n    switch (operation) {\n        case 'add':\n            return number1 + number2;\n        case 'subtract':\n            return number1 - number2;\n        case 'multiply':\n            return number1 * number2;\n        case 'divide':\n            return number1 / number2;\n        default:\n            return 'Invalid operation';\n    }\n}\n\nresult = simpleCalculator(number1, number2, operation);",
        "output": "function simpleCalculator(number1, number2, operation) {\n    switch (operation) {\n        case 'add':\n            return number1 + number2;\n        case 'subtract':\n            return number1 - number2;\n        case 'multiply':\n            return number1 * number2;\n        case 'divide':\n            return number1 / number2;\n        default:\n            return 'Invalid operation';\n    }\n}\n\nresult = simpleCalculator(number1, number2, operation);"
    },
    {
        "instruction": "Implement a C++ function that takes a vector of integers and returns the minimum difference between any two adjacent elements.",
        "input": "std::vector<int> nums = {1, 5, 10, 25, 40};",
        "response": "#include <vector>\n#include <algorithm>\n\nint min_adjacent_difference(const std::vector<int>& nums) {\n    int min_diff = INT_MAX;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        int diff = std::abs(nums[i] - nums[i + 1]);\n        min_diff = std::min(min_diff, diff);\n    }\n    return min_diff;\n}\n\nint result = min_adjacent_difference(nums);",
        "output": "#include <vector>\n#include <algorithm>\n\nint min_adjacent_difference(const std::vector<int>& nums) {\n    int min_diff = INT_MAX;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        int diff = std::abs(nums[i] - nums[i + 1]);\n        min_diff = std::min(min_diff, diff);\n    }\n    return min_diff;\n}\n\nint result = min_adjacent_difference(nums);"
    },
    {
        "instruction": "Create a Python function that takes a list of strings and returns a dictionary with the frequency of each word.",
        "input": "['apple', 'orange', 'banana', 'apple', 'orange', 'apple']",
        "response": "def word_freq(words):\n    freq = {}\n    for word in words:\n        freq[word] = freq.get(word, 0) + 1\n    return freq\n\ninput_list = ['apple', 'orange', 'banana', 'apple', 'orange', 'apple']\nprint(word_freq(input_list))",
        "output": "def word_freq(words):\n    freq = {}\n    for word in words:\n        freq[word] = freq.get(word, 0) + 1\n    return freq\n\ninput_list = ['apple', 'orange', 'banana', 'apple', 'orange', 'apple']\nprint(word_freq(input_list))"
    },
    {
        "instruction": "Design a Java method that calculates the sum of all even Fibonacci numbers up to a given limit.",
        "input": "4000000",
        "response": "public class EvenFibonacciSum {\n    public static int calculateEvenFibSum(int limit) {\n        int prev = 0;\n        int current = 1;\n        int sum = 0;\n\n        while (current <= limit) {\n            if (current % 2 == 0) {\n                sum += current;\n            }\n            int temp = current;\n            current += prev;\n            prev = temp;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int limit = 4000000;\n        System.out.println(\"Sum of even Fibonacci numbers up to \" + limit + \": \" + calculateEvenFibSum(limit));\n    }\n}",
        "output": "public class EvenFibonacciSum {\n    public static int calculateEvenFibSum(int limit) {\n        int prev = 0;\n        int current = 1;\n        int sum = 0;\n\n        while (current <= limit) {\n            if (current % 2 == 0) {\n                sum += current;\n            }\n            int temp = current;\n            current += prev;\n            prev = temp;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int limit = 4000000;\n        System.out.println(\"Sum of even Fibonacci numbers up to \" + limit + \": \" + calculateEvenFibSum(limit));\n    }\n}"
    },
    {
        "instruction": "Write a C program to display the full path of the current working directory.",
        "input": "",
        "response": "#include <stdio.h>\n#include <unistd.h>\n#include <limits.h>\n\nint main() {\n    char cwd[PATH_MAX];\n    if (getcwd(cwd, sizeof(cwd)) != NULL) {\n        printf(\"Current working directory: %s\\n\", cwd);\n    } else {\n        perror(\"getcwd() error\");\n        return 1;\n    }\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <unistd.h>\n#include <limits.h>\n\nint main() {\n    char cwd[PATH_MAX];\n    if (getcwd(cwd, sizeof(cwd)) != NULL) {\n        printf(\"Current working directory: %s\\n\", cwd);\n    } else {\n        perror(\"getcwd() error\");\n        return 1;\n    }\n    return 0;\n}"
    },
    {
        "instruction": "In JavaScript, create a function that takes an array of integers and returns the difference between the maximum and minimum value.",
        "input": "[12, 5, 7, 15, 9]",
        "response": "function findDifference(array) {\n    let max = Math.max(...array);\n    let min = Math.min(...array);\n    return max - min;\n}\n\nconst inputArray = [12, 5, 7, 15, 9];\nconsole.log(findDifference(inputArray));",
        "output": "function findDifference(array) {\n    let max = Math.max(...array);\n    let min = Math.min(...array);\n    return max - min;\n}\n\nconst inputArray = [12, 5, 7, 15, 9];\nconsole.log(findDifference(inputArray));"
    },
    {
        "instruction": "Create a recursive function for calculating the Fibonacci sequence in Python.",
        "input": "",
        "response": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
        "output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"
    },
    {
        "instruction": "In Java, provide code to reverse a given input string and return the reversed string.",
        "input": "Input String: HelloWorld",
        "response": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}",
        "output": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}"
    },
    {
        "instruction": "What will the JavaScript code below output when run? Explain your answers.",
        "input": "console.log(3+3+'3');\nconsole.log('3'+3+3);",
        "response": "The outputs will be '63' and '333', respectively. For the first line, since the addition operation is executed left-to-right, 3 + 3 results in 6, which when concatenated with '3' results in the string '63'. In the second line, the string '3' is concatenated with 3 resulting in '33', which is then concatenated with 3 to result in the string '333'.",
        "output": "The outputs will be '63' and '333', respectively. For the first line, since the addition operation is executed left-to-right, 3 + 3 results in 6, which when concatenated with '3' results in the string '63'. In the second line, the string '3' is concatenated with 3 resulting in '33', which is then concatenated with 3 to result in the string '333'."
    },
    {
        "instruction": "Debug and fix the given C++ code below, which is intended to calculate the area of a rectangle.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n  double width, height;\n  cout << \"Enter width: \";\n  cin >> width;\n  cout << \"Enter height: \";\n  cin >> height;\n}\n\nvoid area(width, height) {\n  width * height;\n}\n\narea(width, height);\ncout << \"Area: \" << area(width, height);",
        "response": "#include <iostream>\nusing namespace std;\n\ndouble area(double width, double height) {\n  return width * height;\n}\n\nint main() {\n  double width, height;\n  cout << \"Enter width: \";\n  cin >> width;\n  cout << \"Enter height: \";\n  cin >> height;\n  double rectangleArea = area(width, height);\n  cout << \"Area: \" << rectangleArea;\n  return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\ndouble area(double width, double height) {\n  return width * height;\n}\n\nint main() {\n  double width, height;\n  cout << \"Enter width: \";\n  cin >> width;\n  cout << \"Enter height: \";\n  cin >> height;\n  double rectangleArea = area(width, height);\n  cout << \"Area: \" << rectangleArea;\n  return 0;\n}"
    },
    {
        "instruction": "Implement a Java code snippet to create a Stack data structure that uses LinkedList as its internal storage.",
        "input": "",
        "response": "import java.util.LinkedList;\n\npublic class Stack<T> {\n    private LinkedList<T> list = new LinkedList<T>();\n\n    public void push(T value) {\n        list.addFirst(value);\n    }\n\n    public T pop() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty\");\n        }\n        return list.removeFirst();\n    }\n\n    public T peek() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty\");\n        }\n        return list.getFirst();\n    }\n\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    public int size() {\n        return list.size();\n    }\n}",
        "output": "import java.util.LinkedList;\n\npublic class Stack<T> {\n    private LinkedList<T> list = new LinkedList<T>();\n\n    public void push(T value) {\n        list.addFirst(value);\n    }\n\n    public T pop() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty\");\n        }\n        return list.removeFirst();\n    }\n\n    public T peek() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty\");\n        }\n        return list.getFirst();\n    }\n\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    public int size() {\n        return list.size();\n    }\n}"
    },
    {
        "instruction": "Given a snippet of JavaScript code, identify any variable names not following camelCase convention.",
        "input": "const first_name = 'John';\nconst lastName = 'Doe';\nlet Age = 30;\nlet isLoggedIn = true;\nvar item_Price = 50;",
        "response": "['first_name', 'Age', 'item_Price']",
        "output": "['first_name', 'Age', 'item_Price']"
    },
    {
        "instruction": "Provide an example of using Pandas library in Python to read a CSV file and find the average value of a specific column.",
        "input": "CSV content:\nid, name, age\n1, Alice, 25\n2, Bob, 30\n3, Charlie, 35",
        "response": "import pandas as pd\n\n# Assume the CSV content is saved in a file named 'data.csv'\ndata = pd.read_csv('data.csv')\n\n# Get the mean of the 'age' column\naverage_age = data['age'].mean()\n\nprint(average_age)",
        "output": "import pandas as pd\n\n# Assume the CSV content is saved in a file named 'data.csv'\ndata = pd.read_csv('data.csv')\n\n# Get the mean of the 'age' column\naverage_age = data['age'].mean()\n\nprint(average_age)"
    },
    {
        "instruction": "Fix the following C++ code that sorts an array of integers in descending order using std::sort.",
        "input": "#include <algorithm>\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {8, 3, 7, 10, 15, 38, 23};\n\n    std::sort(numbers.begin(), numbers.end());\n\n    for (int n : numbers) {\n        std::cout << n << ' ';\n    }\n\n    return 0;\n}",
        "response": "#include <algorithm>\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {8, 3, 7, 10, 15, 38, 23};\n\n    std::sort(numbers.begin(), numbers.end(), std::greater<int>());\n\n    for (int n : numbers) {\n        std::cout << n << ' ';\n    }\n\n    return 0;\n}",
        "output": "#include <algorithm>\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {8, 3, 7, 10, 15, 38, 23};\n\n    std::sort(numbers.begin(), numbers.end(), std::greater<int>());\n\n    for (int n : numbers) {\n        std::cout << n << ' ';\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a function in JavaScript that takes an array of numbers and returns the product of all the elements.",
        "input": "[1, 2, 3, 4]",
        "response": "function product(arr) {\n  return arr.reduce((total, num) => total * num, 1);\n}",
        "output": "function product(arr) {\n  return arr.reduce((total, num) => total * num, 1);\n}"
    },
    {
        "instruction": "Provide a solution in C++ to find the factorial of a given positive integer.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n  if (n == 0 || n == 1)\n    return 1;\n  else\n    return n * factorial(n - 1);\n}\n\nint main() {\n  int n = 5;\n  cout << 'Factorial of ' << n << ' is: ' << factorial(n) << endl;\n  return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n  if (n == 0 || n == 1)\n    return 1;\n  else\n    return n * factorial(n - 1);\n}\n\nint main() {\n  int n = 5;\n  cout << 'Factorial of ' << n << ' is: ' << factorial(n) << endl;\n  return 0;\n}"
    },
    {
        "instruction": "Refactor the given Python code snippet using list comprehension.",
        "input": "orig_list = [2, 4, 6, 8]\nmultiples_of_four = []\n\nfor num in orig_list:\n    if num % 4 == 0:\n        multiples_of_four.append(num)",
        "response": "orig_list = [2, 4, 6, 8]\nmultiples_of_four = [num for num in orig_list if num % 4 == 0]",
        "output": "orig_list = [2, 4, 6, 8]\nmultiples_of_four = [num for num in orig_list if num % 4 == 0]"
    },
    {
        "instruction": "Explain the purpose of the following shell script code and demonstrate its expected output.",
        "input": "#!/bin/bash\n\nfor i in {1..5}; do\n  echo \"Hello, this is iteration number $i\"\ndone",
        "response": "The purpose of this shell script is to output a message 5 times, specifying the iteration number for each iteration. Expected output:\n\nHello, this is iteration number 1\nHello, this is iteration number 2\nHello, this is iteration number 3\nHello, this is iteration number 4\nHello, this is iteration number 5",
        "output": "The purpose of this shell script is to output a message 5 times, specifying the iteration number for each iteration. Expected output:\n\nHello, this is iteration number 1\nHello, this is iteration number 2\nHello, this is iteration number 3\nHello, this is iteration number 4\nHello, this is iteration number 5"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers as input and returns the sum of its elements.",
        "input": "[3, 5, 2, 8, 1]",
        "response": "function sumArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}",
        "output": "function sumArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}"
    },
    {
        "instruction": "Can you provide an example of a basic Java class that represents a \"Person\" with a name, age, and a method to print their information?",
        "input": "",
        "response": "public class Person {\n\n  private String name;\n  private int age;\n\n  public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  public void printInfo() {\n    System.out.println(\"Name: \" + name + \", Age: \" + age);\n  }\n\n}",
        "output": "public class Person {\n\n  private String name;\n  private int age;\n\n  public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  public void printInfo() {\n    System.out.println(\"Name: \" + name + \", Age: \" + age);\n  }\n\n}"
    },
    {
        "instruction": "Write a C++ function that reverses the given string without using any built-in functions.",
        "input": "Hello, World!",
        "response": "#include <iostream>\n\nvoid reverseString(std::string &str) {\n  int n = str.length();\n  for (int i = 0; i < n / 2; i++) {\n    char temp = str[i];\n    str[i] = str[n - i - 1];\n    str[n - i - 1] = temp;\n  }\n}\n\nint main() {\n  std::string s = \"Hello, World!\";\n  reverseString(s);\n  std::cout << s << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nvoid reverseString(std::string &str) {\n  int n = str.length();\n  for (int i = 0; i < n / 2; i++) {\n    char temp = str[i];\n    str[i] = str[n - i - 1];\n    str[n - i - 1] = temp;\n  }\n}\n\nint main() {\n  std::string s = \"Hello, World!\";\n  reverseString(s);\n  std::cout << s << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Fix the syntax errors in this Python code snippet, which should compute the factorial of a given number.",
        "input": "def factorial(n):\n    if (n == 0) or n = 1;;\n        return 1\n    return n * factorial(n-1)\n\nprint(factorial(5)",
        "response": "def factorial(n):\n    if (n == 0) or (n == 1):\n        return 1\n    return n * factorial(n-1)\n\nprint(factorial(5))",
        "output": "def factorial(n):\n    if (n == 0) or (n == 1):\n        return 1\n    return n * factorial(n-1)\n\nprint(factorial(5))"
    },
    {
        "instruction": "Implement a Java method that accepts an array of strings and returns the longest string.",
        "input": "String[] words = {\"apple\", \"orange\", \"grape\", \"banana\"};",
        "response": "public String findLongestString(String[] words) {\n    String longestWord = \"\";\n    for (String word : words) {\n        if (word.length() > longestWord.length()) {\n            longestWord = word;\n        }\n    }\n    return longestWord;\n}\n\nString[] words = {\"apple\", \"orange\", \"grape\", \"banana\"};\nSystem.out.println(findLongestString(words));",
        "output": "public String findLongestString(String[] words) {\n    String longestWord = \"\";\n    for (String word : words) {\n        if (word.length() > longestWord.length()) {\n            longestWord = word;\n        }\n    }\n    return longestWord;\n}\n\nString[] words = {\"apple\", \"orange\", \"grape\", \"banana\"};\nSystem.out.println(findLongestString(words));"
    },
    {
        "instruction": "How can I write a C++ program that reads a user's input for name and age, then outputs a formatted message?",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::cin >> name;\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Hello, \" << name << \"! You are \" << age << \" years old.\" << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::cin >> name;\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Hello, \" << name << \"! You are \" << age << \" years old.\" << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that calculates the factorial of a given number.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconst num = 5;\nconst result = factorial(num);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconst num = 5;\nconst result = factorial(num);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Bash script that renames all files in a directory with the '.txt' extension to have a '.bak' extension.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *.txt; do\n    newFile=${file%%.txt}.bak\n    mv \"$file\" \"$newFile\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt; do\n    newFile=${file%%.txt}.bak\n    mv \"$file\" \"$newFile\"\ndone"
    },
    {
        "instruction": "Create a Python function that generates a list of Fibonacci numbers up to the given value n.",
        "input": "10",
        "response": "def generate_fibonacci(n):\n    fib_seq = [0, 1]\n    while fib_seq[-1] + fib_seq[-2] <= n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[:-1]\n\nresult = generate_fibonacci(10)\nprint(result)",
        "output": "def generate_fibonacci(n):\n    fib_seq = [0, 1]\n    while fib_seq[-1] + fib_seq[-2] <= n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[:-1]\n\nresult = generate_fibonacci(10)\nprint(result)"
    },
    {
        "instruction": "Write a Java program that takes an integer as input and outputs the sum of its digits.",
        "input": "123",
        "response": "import java.util.Scanner;\n\npublic class SumOfDigits {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter an integer:\");\n        int num = sc.nextInt();\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        System.out.println(\"Sum of digits: \" + sum);\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class SumOfDigits {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter an integer:\");\n        int num = sc.nextInt();\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        System.out.println(\"Sum of digits: \" + sum);\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function that accepts two strings and checks if they are anagrams of each other.",
        "input": "mary, army",
        "response": "function areAnagrams(str1, str2) {\n    const sortedStr1 = str1.toLowerCase().split('').sort().join('');\n    const sortedStr2 = str2.toLowerCase().split('').sort().join('');\n    return sortedStr1 === sortedStr2;\n}\n\nconst result = areAnagrams('mary', 'army');\nconsole.log(result);",
        "output": "function areAnagrams(str1, str2) {\n    const sortedStr1 = str1.toLowerCase().split('').sort().join('');\n    const sortedStr2 = str2.toLowerCase().split('').sort().join('');\n    return sortedStr1 === sortedStr2;\n}\n\nconst result = areAnagrams('mary', 'army');\nconsole.log(result);"
    },
    {
        "instruction": "Given the following PHP code, identify and fix the syntax error.",
        "input": "<?php\n$day = 'wednesday';\n$wednesday = 'day off';\n\nif ($$day == 'day off') {\n    echo 'Enjoy your day off!'\n} else {\n    echo 'Back to work!';\n}\n?>",
        "response": "<?php\n$day = 'wednesday';\n$wednesday = 'day off';\n\nif ($$day == 'day off') {\n    echo 'Enjoy your day off!'; // Added missing semicolon\n} else {\n    echo 'Back to work!';\n}\n?>",
        "output": "<?php\n$day = 'wednesday';\n$wednesday = 'day off';\n\nif ($$day == 'day off') {\n    echo 'Enjoy your day off!'; // Added missing semicolon\n} else {\n    echo 'Back to work!';\n}\n?>"
    },
    {
        "instruction": "Write a Python function to check if a given word is a palindrome without using any built-in functions. A word is considered a palindrome if it reads the same backward as forward.",
        "input": "racecar",
        "response": "def is_palindrome(word):\n    i = 0\n    j = len(word) - 1\n    while i < j:\n        if word[i] != word[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\nprint(is_palindrome('racecar'))",
        "output": "def is_palindrome(word):\n    i = 0\n    j = len(word) - 1\n    while i < j:\n        if word[i] != word[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\nprint(is_palindrome('racecar'))"
    },
    {
        "instruction": "Implement a Java function named 'swapCharPairs' that takes a string input, and swaps adjacent characters. If the input string has an odd length, keep the last character in place.",
        "input": "abcdefg",
        "response": "public String swapCharPairs(String input) {\n    StringBuilder result = new StringBuilder(input);\n    for (int i = 0; i < input.length() - 1; i += 2) {\n        char temp = result.charAt(i);\n        result.setCharAt(i, result.charAt(i + 1));\n        result.setCharAt(i + 1, temp);\n    }\n    return result.toString();\n}\n\nString input = \"abcdefg\";\nString output = swapCharPairs(input);\nSystem.out.println(output);",
        "output": "public String swapCharPairs(String input) {\n    StringBuilder result = new StringBuilder(input);\n    for (int i = 0; i < input.length() - 1; i += 2) {\n        char temp = result.charAt(i);\n        result.setCharAt(i, result.charAt(i + 1));\n        result.setCharAt(i + 1, temp);\n    }\n    return result.toString();\n}\n\nString input = \"abcdefg\";\nString output = swapCharPairs(input);\nSystem.out.println(output);"
    },
    {
        "instruction": "In Javascript, design a simple counter object with increment and decrement methods, and a property to return the current count value.",
        "input": "",
        "response": "const counter = {\n    count: 0,\n    increment: function() {\n        this.count += 1;\n    },\n    decrement: function() {\n        this.count -= 1;\n    },\n    getCurrentValue: function() {\n        return this.count;\n    }\n};\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.getCurrentValue());\ncounter.decrement();\nconsole.log(counter.getCurrentValue());",
        "output": "const counter = {\n    count: 0,\n    increment: function() {\n        this.count += 1;\n    },\n    decrement: function() {\n        this.count -= 1;\n    },\n    getCurrentValue: function() {\n        return this.count;\n    }\n};\n\ncounter.increment();\ncounter.increment();\nconsole.log(counter.getCurrentValue());\ncounter.decrement();\nconsole.log(counter.getCurrentValue());"
    },
    {
        "instruction": "Develop a C++ program that reads a user-inputed integer and calculates the sum of all odd numbers from 1 to n.",
        "input": "10",
        "response": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> n;\n\n    for (int i = 1; i <= n; i += 2) {\n        sum += i;\n    }\n\n    std::cout << \"Sum of odd numbers from 1 to \" << n << \" is: \" << sum << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> n;\n\n    for (int i = 1; i <= n; i += 2) {\n        sum += i;\n    }\n\n    std::cout << \"Sum of odd numbers from 1 to \" << n << \" is: \" << sum << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes a string input and returns the count of the number of vowels in that string.",
        "input": "I am excited about exploring the world of programming.",
        "response": "function countVowels(str) {\n  const vowels = 'aeiouAEIOU';\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "output": "function countVowels(str) {\n  const vowels = 'aeiouAEIOU';\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      count++;\n    }\n  }\n  return count;\n}"
    },
    {
        "instruction": "Create a Java method to calculate the distance between two points in 2D space, given their x and y coordinates.",
        "input": "",
        "response": "public double distance(double x1, double y1, double x2, double y2) {\n  double xDiff = x2 - x1;\n  double yDiff = y2 - y1;\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}",
        "output": "public double distance(double x1, double y1, double x2, double y2) {\n  double xDiff = x2 - x1;\n  double yDiff = y2 - y1;\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}"
    },
    {
        "instruction": "How would you implement a bubble sort algorithm in Python?",
        "input": "",
        "response": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]",
        "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]"
    },
    {
        "instruction": "In C++, implement a function to find the factorial of a positive integer n using a recursive approach.",
        "input": "",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n  if (n == 0) return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int num;\n  std::cin >> num;\n  std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n  if (n == 0) return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int num;\n  std::cin >> num;\n  std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n}"
    },
    {
        "instruction": "Write a recursive function in Python to compute the nth Fibonacci number.",
        "input": "10",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nnth_fibonacci_number = fibonacci(10)\nprint(nth_fibonacci_number)",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nnth_fibonacci_number = fibonacci(10)\nprint(nth_fibonacci_number)"
    },
    {
        "instruction": "How would you find the length of a singly linked list using Java?",
        "input": "5 -> 3 -> 6 -> 2 -> 8 -> 9",
        "response": "public class LinkedList {\n    Node head;\n\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int d) {\n            data = d;\n            next = null;\n        }\n    }\n\n    public int listLength() {\n        int count = 0;\n        Node n = head;\n        while (n != null) {\n            count++;\n            n = n.next;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        LinkedList linkedList = new LinkedList();\n        linkedList.head = new Node(5);\n        Node second = new Node(3);\n        Node third = new Node(6);\n        Node fourth = new Node(2);\n        Node fifth = new Node(8);\n        Node sixth = new Node(9);\n\n        linkedList.head.next = second;\n        second.next = third;\n        third.next = fourth;\n        fourth.next = fifth;\n        fifth.next = sixth;\n\n        int length = linkedList.listLength();\n        System.out.println(\"Length of the linked list: \" + length);\n    }\n}",
        "output": "public class LinkedList {\n    Node head;\n\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int d) {\n            data = d;\n            next = null;\n        }\n    }\n\n    public int listLength() {\n        int count = 0;\n        Node n = head;\n        while (n != null) {\n            count++;\n            n = n.next;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        LinkedList linkedList = new LinkedList();\n        linkedList.head = new Node(5);\n        Node second = new Node(3);\n        Node third = new Node(6);\n        Node fourth = new Node(2);\n        Node fifth = new Node(8);\n        Node sixth = new Node(9);\n\n        linkedList.head.next = second;\n        second.next = third;\n        third.next = fourth;\n        fourth.next = fifth;\n        fifth.next = sixth;\n\n        int length = linkedList.listLength();\n        System.out.println(\"Length of the linked list: \" + length);\n    }\n}"
    },
    {
        "instruction": "Implement a C++ program that reads user input consisting of integers until 0 is entered, and calculates the average of these numbers.",
        "input": "4 7 1 3 0",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num, count = 0, sum = 0;\n    float average;\n\n    do {\n        cout << \"Enter an integer (0 to end): \";\n        cin >> num;\n        if (num != 0) {\n            sum += num;\n            count++;\n        }\n    } while (num != 0);\n\n    if (count > 0) {\n        average = (float) sum / count;\n        cout << \"Average of entered numbers: \" << average << endl;\n    } else {\n        cout << \"No numbers were entered.\" << endl;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num, count = 0, sum = 0;\n    float average;\n\n    do {\n        cout << \"Enter an integer (0 to end): \";\n        cin >> num;\n        if (num != 0) {\n            sum += num;\n            count++;\n        }\n    } while (num != 0);\n\n    if (count > 0) {\n        average = (float) sum / count;\n        cout << \"Average of entered numbers: \" << average << endl;\n    } else {\n        cout << \"No numbers were entered.\" << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that replaces each vowel in a given string with the letter 'x'.",
        "input": "The given string is: 'Hello, I am an AI assistant.'",
        "response": "function replaceVowels(str) {\n  return str.replace(/[aeiou]/gi, 'x');\n}\n\nconst inputString = 'Hello, I am an AI assistant.';\nconst result = replaceVowels(inputString);\nconsole.log(result);",
        "output": "function replaceVowels(str) {\n  return str.replace(/[aeiou]/gi, 'x');\n}\n\nconst inputString = 'Hello, I am an AI assistant.';\nconst result = replaceVowels(inputString);\nconsole.log(result);"
    },
    {
        "instruction": "Design a Java method to reverse a given array in-place.",
        "input": "The given array is: int[] numbers = {1, 2, 3, 4, 5};",
        "response": "public static void reverseArray(int[] arr) {\n    int start = 0;\n    int end = arr.length - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint[] numbers = {1, 2, 3, 4, 5};\nreverseArray(numbers);\nfor (int num : numbers) {\n    System.out.print(num + \" \");\n}",
        "output": "public static void reverseArray(int[] arr) {\n    int start = 0;\n    int end = arr.length - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint[] numbers = {1, 2, 3, 4, 5};\nreverseArray(numbers);\nfor (int num : numbers) {\n    System.out.print(num + \" \");\n}"
    },
    {
        "instruction": "Implement a Python function that reads content from a file called 'data.txt' and returns the word count.",
        "input": "Assume the file 'data.txt' contains: 'This is an example text file. Reading files in Python is easy!'.",
        "response": "def word_count(file_name):\n    with open(file_name, 'r') as file:\n        content = file.read()\n        words = content.split()\n        return len(words)\n\nfile_name = 'data.txt'\nword_count = word_count(file_name)\nprint('The word count is:', word_count)",
        "output": "def word_count(file_name):\n    with open(file_name, 'r') as file:\n        content = file.read()\n        words = content.split()\n        return len(words)\n\nfile_name = 'data.txt'\nword_count = word_count(file_name)\nprint('The word count is:', word_count)"
    },
    {
        "instruction": "Construct a shell script that recursively finds all file names that end with '.log' and deletes them.",
        "input": "Assume the directory structure is as follows:\n- logs\n  - sub1\n    - access1.log\n  - sub2\n    - access2.log",
        "response": "#!/bin/bash\n\nfind . -type f -name '*.log' -exec rm -f {} +",
        "output": "#!/bin/bash\n\nfind . -type f -name '*.log' -exec rm -f {} +"
    },
    {
        "instruction": "Implement a Java function that calculates the length of the longest common subsequence of two strings.",
        "input": "String str1 = \"ABCDGH\";\nString str2 = \"AEDFHR\";",
        "response": "public class LCS {\n    public static int longestCommonSubsequence(String str1, String str2) {\n        int[][] dp = new int[str1.length() + 1][str2.length() + 1];\n        for (int i = 1; i <= str1.length(); i++) {\n            for (int j = 1; j <= str2.length(); j++) {\n                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[str1.length()][str2.length()];\n    }\n\n    public static void main(String[] args) {\n        String str1 = \"ABCDGH\";\n        String str2 = \"AEDFHR\";\n        System.out.println(longestCommonSubsequence(str1, str2));\n    }\n}",
        "output": "public class LCS {\n    public static int longestCommonSubsequence(String str1, String str2) {\n        int[][] dp = new int[str1.length() + 1][str2.length() + 1];\n        for (int i = 1; i <= str1.length(); i++) {\n            for (int j = 1; j <= str2.length(); j++) {\n                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[str1.length()][str2.length()];\n    }\n\n    public static void main(String[] args) {\n        String str1 = \"ABCDGH\";\n        String str2 = \"AEDFHR\";\n        System.out.println(longestCommonSubsequence(str1, str2));\n    }\n}"
    },
    {
        "instruction": "Assuming I'm using the pandas library in Python, how can I drop all rows with NaN values in a DataFrame?",
        "input": "import pandas as pd\n\ndata = {'A': [1, 2, None], 'B': [4, None, 6], 'C': [7, 8, 9]}\ndf = pd.DataFrame(data)",
        "response": "import pandas as pd\n\ndata = {'A': [1, 2, None], 'B': [4, None, 6], 'C': [7, 8, 9]}\ndf = pd.DataFrame(data)\n\ndf = df.dropna()\nprint(df)",
        "output": "import pandas as pd\n\ndata = {'A': [1, 2, None], 'B': [4, None, 6], 'C': [7, 8, 9]}\ndf = pd.DataFrame(data)\n\ndf = df.dropna()\nprint(df)"
    },
    {
        "instruction": "Design and write a shell script that archives and compresses a given directory, and appends the current date to the archive file name.",
        "input": "/path/to/directory",
        "response": "#!/bin/sh\n\ndirpath='/path/to/directory'\ndatestr=`date '+%Y-%m-%d'`\ntar cvzf \"${dirpath}_${datestr}.tar.gz\" -C \"${dirpath}\" .",
        "output": "#!/bin/sh\n\ndirpath='/path/to/directory'\ndatestr=`date '+%Y-%m-%d'`\ntar cvzf \"${dirpath}_${datestr}.tar.gz\" -C \"${dirpath}\" ."
    },
    {
        "instruction": "Fix the following JavaScript code so that the intended output of 42 is correctly returned by the function.",
        "input": "function brokenAddition(a = 0, b) {\n  return a + b;\n}\n",
        "response": "function fixedAddition(a = 0, b = 0) {\n  return a + b;\n}\n\nconsole.log(fixedAddition(42));",
        "output": "function fixedAddition(a = 0, b = 0) {\n  return a + b;\n}\n\nconsole.log(fixedAddition(42));"
    },
    {
        "instruction": "Create a Python function that generates Fibonacci sequence up to the given number.",
        "input": "10",
        "response": "def generate_fibonacci(n):\n    sequence = [0, 1]\n    while sequence[-1] + sequence[-2] < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nresult = generate_fibonacci(10)\nprint(result)",
        "output": "def generate_fibonacci(n):\n    sequence = [0, 1]\n    while sequence[-1] + sequence[-2] < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nresult = generate_fibonacci(10)\nprint(result)"
    },
    {
        "instruction": "In C, write a program that calculates the exponential value of a given number using recursion.",
        "input": "2, 3",
        "response": "#include <stdio.h>\n\nint exp(int base, int exponent) {\n    if (exponent == 0)\n        return 1;\n    else\n        return base * exp(base, exponent - 1);\n}\n\nint main() {\n    int base = 2, exponent = 3;\n    printf('\\nThe exponential value is: %d', exp(base, exponent));\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint exp(int base, int exponent) {\n    if (exponent == 0)\n        return 1;\n    else\n        return base * exp(base, exponent - 1);\n}\n\nint main() {\n    int base = 2, exponent = 3;\n    printf('\\nThe exponential value is: %d', exp(base, exponent));\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a Java function to check whether a given string is a palindrome or not?",
        "input": "madam",
        "response": "public class PalindromeCheck {\n    public static boolean isPalindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right))\n                return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String input = 'madam';\n        System.out.println(isPalindrome(input) ? 'The string is a palindrome' : 'The string is not a palindrome');\n    }\n}",
        "output": "public class PalindromeCheck {\n    public static boolean isPalindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right))\n                return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String input = 'madam';\n        System.out.println(isPalindrome(input) ? 'The string is a palindrome' : 'The string is not a palindrome');\n    }\n}"
    },
    {
        "instruction": "Can you provide an example of using JavaScript Fetch API to fetch data from a RESTful API and display the output?",
        "input": "https://jsonplaceholder.typicode.com/posts/1",
        "response": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n    .then(response => response.json())\n    .then(data => { console.log('Title:', data.title); })\n    .catch(error => { console.error('Error:', error); });",
        "output": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n    .then(response => response.json())\n    .then(data => { console.log('Title:', data.title); })\n    .catch(error => { console.error('Error:', error); });"
    },
    {
        "instruction": "Create a simple Java program that calculates the area of a rectangle by taking the length and width as input arguments.",
        "input": "Length: 8.5, Width: 6.3",
        "response": "public class RectangleArea {\n    public static double calculateArea(double length, double width) {\n        return length * width;\n    }\n\n    public static void main(String[] args) {\n        double length = 8.5;\n        double width = 6.3;\n        double area = calculateArea(length, width);\n        System.out.println(\"The area of the rectangle is: \" + area);\n    }\n}",
        "output": "public class RectangleArea {\n    public static double calculateArea(double length, double width) {\n        return length * width;\n    }\n\n    public static void main(String[] args) {\n        double length = 8.5;\n        double width = 6.3;\n        double area = calculateArea(length, width);\n        System.out.println(\"The area of the rectangle is: \" + area);\n    }\n}"
    },
    {
        "instruction": "Find and fix the bug in the provided Python code which is intended to print the square of a given number.",
        "input": "def print_square(num):\n    square = num * num\n    print(\"The square of \" + num + \" is \" + square)\n\nprint_square(5)",
        "response": "def print_square(num):\n    square = num * num\n    print(\"The square of \" + str(num) + \" is \" + str(square))\n\nprint_square(5)",
        "output": "def print_square(num):\n    square = num * num\n    print(\"The square of \" + str(num) + \" is \" + str(square))\n\nprint_square(5)"
    },
    {
        "instruction": "Which additional line of code is needed in the given C++ code snippet to properly include and use the `std::cout` function?",
        "input": "int main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}",
        "response": "#include <iostream>",
        "output": "#include <iostream>"
    },
    {
        "instruction": "Translate the following shell script into a Python script that accomplishes the same task: output the list of files in the current directory and the number of files.",
        "input": "#!/bin/sh\n\necho \"Files in the current directory:\"\nls\n\necho \"Number of files:\"\nls | wc -l",
        "response": "import os\n\nfile_list = os.listdir()\n\nprint(\"Files in the current directory:\")\nfor file in file_list:\n    print(file)\n\nprint(\"Number of files:\")\nprint(len(file_list))",
        "output": "import os\n\nfile_list = os.listdir()\n\nprint(\"Files in the current directory:\")\nfor file in file_list:\n    print(file)\n\nprint(\"Number of files:\")\nprint(len(file_list))"
    },
    {
        "instruction": "Create a C++ function that calculates the nth Fibonacci number using recursion.",
        "input": "",
        "response": "int fibonacci(int n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}",
        "output": "int fibonacci(int n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}"
    },
    {
        "instruction": "Fix the following Java code that aims to reverse a string:",
        "input": "public class ReverseString {\n\n  public static void main(String[] args) {\n    String str = \"Hello, World!\";\n    System.out.println(reverse(str));\n  } \n\n  public static String reverse(String s) {\n    if (s.length() == 0is) return s;\n    return reverse(s.substring(1)) + s.charAt(0);\n  }\n}",
        "response": "public class ReverseString {\n\n  public static void main(String[] args) {\n    String str = \"Hello, World!\";\n    System.out.println(reverse(str));\n  } \n\n  public static String reverse(String s) {\n    if (s.length() == 0) return s;\n    return reverse(s.substring(1)) + s.charAt(0);\n  }\n}",
        "output": "public class ReverseString {\n\n  public static void main(String[] args) {\n    String str = \"Hello, World!\";\n    System.out.println(reverse(str));\n  } \n\n  public static String reverse(String s) {\n    if (s.length() == 0) return s;\n    return reverse(s.substring(1)) + s.charAt(0);\n  }\n}"
    },
    {
        "instruction": "Write a Python code snippet to calculate the area of a circle given its radius.",
        "input": "radius = 7",
        "response": "import math\n\nradius = 7\narea = math.pi * radius ** 2",
        "output": "import math\n\nradius = 7\narea = math.pi * radius ** 2"
    },
    {
        "instruction": "Explain the purpose of the following JavaScript code:",
        "input": "function debounce(fn, wait) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn.apply(this, args), wait);\n  };\n}",
        "response": "This JavaScript function implements a 'debounce' utility. It takes two parameters, a function 'fn' and an integer 'wait'. The purpose of the 'debounce' function is to limit the rate at which the given function 'fn' can be called. The returned function, when called, will only execute the original function 'fn' after the specified 'wait' time has elapsed since the last call. This is useful in cases when we want to avoid rapid and unnecessary execution of a function due to repeated events, like resizing a window or typing in a search input field.",
        "output": "This JavaScript function implements a 'debounce' utility. It takes two parameters, a function 'fn' and an integer 'wait'. The purpose of the 'debounce' function is to limit the rate at which the given function 'fn' can be called. The returned function, when called, will only execute the original function 'fn' after the specified 'wait' time has elapsed since the last call. This is useful in cases when we want to avoid rapid and unnecessary execution of a function due to repeated events, like resizing a window or typing in a search input field."
    },
    {
        "instruction": "Write a Python program that simulates rolling a six-sided die until a specific number is rolled (between 1-6), and outputs the number of attempts it took.",
        "input": "desired_roll = 3",
        "response": "import random\n\ndef roll_until(target):\n    attempts = 0\n    while True:\n        roll = random.randint(1, 6)\n        attempts += 1\n        if roll == target:\n            break\n    return attempts\n\nif __name__ == '__main__':\n    desired_roll = 3\n    print(f'It took {roll_until(desired_roll)} attempts to roll a {desired_roll}.')",
        "output": "import random\n\ndef roll_until(target):\n    attempts = 0\n    while True:\n        roll = random.randint(1, 6)\n        attempts += 1\n        if roll == target:\n            break\n    return attempts\n\nif __name__ == '__main__':\n    desired_roll = 3\n    print(f'It took {roll_until(desired_roll)} attempts to roll a {desired_roll}.')"
    },
    {
        "instruction": "In Java, demonstrate how to create a custom exception class called 'InvalidAgeException' that takes a string message as a parameter.",
        "input": "",
        "response": "public class InvalidAgeException extends Exception {\n\n    public InvalidAgeException(String message) {\n        super(message);\n    }\n\n}",
        "output": "public class InvalidAgeException extends Exception {\n\n    public InvalidAgeException(String message) {\n        super(message);\n    }\n\n}"
    },
    {
        "instruction": "Given this JavaScript code, explain the purpose of the 'reduce()' function and the expected output.",
        "input": "const numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue);",
        "response": "The 'reduce()' function in JavaScript is used to apply a specific function on all elements of an array, providing an accumulated value. In the given code, the 'reduce()' function is used to calculate the sum of all elements in the array 'numbers'. The 'accumulator' parameter represents the running total or accumulated result, while 'currentValue' represents the current value of the array. The arrow function inside the 'reduce()' function simply adds the 'accumulator' and 'currentValue' and returns the new 'accumulator' value. In this case, the expected output of 'sum' would be 15, which is the sum of all elements in the 'numbers' array.",
        "output": "The 'reduce()' function in JavaScript is used to apply a specific function on all elements of an array, providing an accumulated value. In the given code, the 'reduce()' function is used to calculate the sum of all elements in the array 'numbers'. The 'accumulator' parameter represents the running total or accumulated result, while 'currentValue' represents the current value of the array. The arrow function inside the 'reduce()' function simply adds the 'accumulator' and 'currentValue' and returns the new 'accumulator' value. In this case, the expected output of 'sum' would be 15, which is the sum of all elements in the 'numbers' array."
    },
    {
        "instruction": "Create a C# method that takes an array of integers and returns the lowest non-negative integer that is not present in the array.",
        "input": "int[] numbers = { 3, 4, -1, 1 }",
        "response": "public static int FindMissingInteger(int[] numbers)\n{\n    int minValue = 1;\n\n    if (numbers != null)\n    {\n        Array.Sort(numbers);\n        foreach (int number in numbers)\n        {\n            if (number > 0)\n            {\n                if (number == minValue)\n                {\n                    minValue++;\n                }\n                else if (number > minValue)\n                {\n                    break;\n                }\n            }\n        }\n    }\n\n    return minValue;\n}",
        "output": "public static int FindMissingInteger(int[] numbers)\n{\n    int minValue = 1;\n\n    if (numbers != null)\n    {\n        Array.Sort(numbers);\n        foreach (int number in numbers)\n        {\n            if (number > 0)\n            {\n                if (number == minValue)\n                {\n                    minValue++;\n                }\n                else if (number > minValue)\n                {\n                    break;\n                }\n            }\n        }\n    }\n\n    return minValue;\n}"
    },
    {
        "instruction": "Create a Python function that finds the longest word in a given list of words.",
        "input": "words = ['apple', 'banana', 'kiwi', 'watermelon', 'grape']",
        "response": "def find_longest_word(word_list):\n    return max(word_list, key=len)\n\nlongest_word = find_longest_word(words)",
        "output": "def find_longest_word(word_list):\n    return max(word_list, key=len)\n\nlongest_word = find_longest_word(words)"
    },
    {
        "instruction": "Write a JavaScript function to calculate the factorial of a positive integer.",
        "input": "let number = 5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nlet result = factorial(number);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nlet result = factorial(number);"
    },
    {
        "instruction": "Explain a C++ code to remove duplicates from an unsorted linked list.",
        "input": "#include<iostream>\n#include<unordered_set>\nusing namespace std;\n\nstruct Node {\n  int data;\n  Node* next;\n};",
        "response": "The C++ code uses the `unordered_set` from the standard library. The main idea is to iterate through the unsorted linked list, and use the `unordered_set` to store the unique elements found. During the iteration, if a duplicate element is encountered, it's removed from the list. Here's the complete code:\n\n```cpp\nvoid remove_duplicates(Node* head) {\n  unordered_set<int> seen;\n  Node* current = head;\n  Node* previous = nullptr;\n  while (current != nullptr) {\n    if (seen.find(current->data) != seen.end()) {\n      previous->next = current->next;\n      delete current;\n    } else {\n      seen.insert(current->data);\n      previous = current;\n    }\n    current = previous->next;\n  }\n}\n```\n\nThis code removes duplicates from the linked list while maintaining its relative order.",
        "output": "The C++ code uses the `unordered_set` from the standard library. The main idea is to iterate through the unsorted linked list, and use the `unordered_set` to store the unique elements found. During the iteration, if a duplicate element is encountered, it's removed from the list. Here's the complete code:\n\n```cpp\nvoid remove_duplicates(Node* head) {\n  unordered_set<int> seen;\n  Node* current = head;\n  Node* previous = nullptr;\n  while (current != nullptr) {\n    if (seen.find(current->data) != seen.end()) {\n      previous->next = current->next;\n      delete current;\n    } else {\n      seen.insert(current->data);\n      previous = current;\n    }\n    current = previous->next;\n  }\n}\n```\n\nThis code removes duplicates from the linked list while maintaining its relative order."
    },
    {
        "instruction": "How would you write a shell script to download a file from a given URL and save it as a specific filename?",
        "input": "URL='https://www.example.com/file.txt'\nFILENAME='downloaded_file.txt'",
        "response": "#!/bin/bash\n\nURL='https://www.example.com/file.txt'\nFILENAME='downloaded_file.txt'\n\ncurl -L -o \"$FILENAME\" \"$URL\"",
        "output": "#!/bin/bash\n\nURL='https://www.example.com/file.txt'\nFILENAME='downloaded_file.txt'\n\ncurl -L -o \"$FILENAME\" \"$URL\""
    },
    {
        "instruction": "Detect and fix any syntax errors in this Java code snippet.",
        "input": "public class Main { \n  public static void main(String[] args) { \n    system.out.printIn(\"Hello, World!\"); \n  -?}",
        "response": "public class Main { \n  public static void main(String[] args) { \n    System.out.println(\"Hello, World!\"); \n  }\n}",
        "output": "public class Main { \n  public static void main(String[] args) { \n    System.out.println(\"Hello, World!\"); \n  }\n}"
    },
    {
        "instruction": "Translate the following Python code to JavaScript.",
        "input": "def greet(name):\n    return \"Hello, \" + name\n\nprint(greet(\"John\"))",
        "response": "function greet(name) {\n  return \"Hello, \" + name;\n}\n\nconsole.log(greet(\"John\"));",
        "output": "function greet(name) {\n  return \"Hello, \" + name;\n}\n\nconsole.log(greet(\"John\"));"
    },
    {
        "instruction": "Create a C++ program that reads a file line by line and print each line that contains a given keyword.",
        "input": "keyword: \"example\"",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n  std::string keyword = \"example\";\n  std::ifstream inputFile(\"file.txt\");\n  std::string line;\n\n  if (inputFile.is_open()) {\n    while (std::getline(inputFile, line)) {\n      if (line.find(keyword) != std::string::npos) {\n        std::cout << line << std::endl;\n      }\n    }\n    inputFile.close();\n  } else {\n    std::cerr << \"Unable to open file\" << std::endl;\n  }\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n  std::string keyword = \"example\";\n  std::ifstream inputFile(\"file.txt\");\n  std::string line;\n\n  if (inputFile.is_open()) {\n    while (std::getline(inputFile, line)) {\n      if (line.find(keyword) != std::string::npos) {\n        std::cout << line << std::endl;\n      }\n    }\n    inputFile.close();\n  } else {\n    std::cerr << \"Unable to open file\" << std::endl;\n  }\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a Python function to query data from the provided RESTful API and return a parsed JSON response.",
        "input": "API URL: \"https://api.example.com/data\"",
        "response": "import requests\nimport json\n\ndef query_api(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n\napi_url = \"https://api.example.com/data\"\ndata = query_api(api_url)\nif data is not None:\n    print(data)\nelse:\n    print(\"Failed to fetch data from API\")",
        "output": "import requests\nimport json\n\ndef query_api(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n\napi_url = \"https://api.example.com/data\"\ndata = query_api(api_url)\nif data is not None:\n    print(data)\nelse:\n    print(\"Failed to fetch data from API\")"
    },
    {
        "instruction": "Create a short shell script that takes a file name as an argument and appends the current date to the file name, preserving the original file extension.",
        "input": "",
        "response": "#!/bin/bash\n\nfile_name=$1\nextension=${file_name##*.}\nbase_name=${file_name%.*}\ndate_string=$(date +'%Y%m%d')\nnew_file_name=\"${base_name}_${date_string}.${extension}\"\n\ncp $file_name $new_file_name",
        "output": "#!/bin/bash\n\nfile_name=$1\nextension=${file_name##*.}\nbase_name=${file_name%.*}\ndate_string=$(date +'%Y%m%d')\nnew_file_name=\"${base_name}_${date_string}.${extension}\"\n\ncp $file_name $new_file_name"
    },
    {
        "instruction": "Write JavaScript code to make an asynchronous fetch request to a given API endpoint and log the JSON response.",
        "input": "API endpoint: https://jsonplaceholder.typicode.com/posts/1",
        "response": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n .then(response => response.json())\n .then(json => console.log(json))\n .catch(error => console.error('Error fetching data:', error));",
        "output": "fetch('https://jsonplaceholder.typicode.com/posts/1')\n .then(response => response.json())\n .then(json => console.log(json))\n .catch(error => console.error('Error fetching data:', error));"
    },
    {
        "instruction": "Using Java, write a method to count the frequency of each character in a given string and return the results in a HashMap.",
        "input": "String text = \"Hello, world!\";",
        "response": "public HashMap<Character, Integer> charFrequency(String text) {\n HashMap<Character, Integer> charCountMap = new HashMap<>();\n\n for (char c : text.toCharArray()) {\n  charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n }\n\n return charCountMap;\n}",
        "output": "public HashMap<Character, Integer> charFrequency(String text) {\n HashMap<Character, Integer> charCountMap = new HashMap<>();\n\n for (char c : text.toCharArray()) {\n  charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n }\n\n return charCountMap;\n}"
    },
    {
        "instruction": "Can you provide me with an example of how to use `while` loop in Python to print the numbers from 1 to 10?",
        "input": "",
        "response": "number = 1\n\nwhile number <= 10:\n  print(number)\n  number += 1",
        "output": "number = 1\n\nwhile number <= 10:\n  print(number)\n  number += 1"
    },
    {
        "instruction": "Translate the following Python code into an equivalent Java code snippet.",
        "input": "def is_even(num):\n    return num % 2 == 0\n\nn = 10\nprint(is_even(n))",
        "response": "public class EvenCheck {\n    public static void main(String[] args) {\n        int n = 10;\n        System.out.println(is_even(n));\n    }\n\n    public static boolean is_even(int num) {\n        return num % 2 == 0;\n    }\n}",
        "output": "public class EvenCheck {\n    public static void main(String[] args) {\n        int n = 10;\n        System.out.println(is_even(n));\n    }\n\n    public static boolean is_even(int num) {\n        return num % 2 == 0;\n    }\n}"
    },
    {
        "instruction": "Explain the functionality of the given C++ code and add comments to each step.",
        "input": "#include <iostream>\nusing namespace std;\nint main() {\n    int a = 8;\n    int b = 10;\n    int sum = a + b;\n    cout << sum << endl;\n    return 0;\n}",
        "response": "The given C++ code performs the following steps:\n\n1. Includes the 'iostream' header, which provides input and output facilities.\n2. Uses standard 'std' namespace to avoid the need to use fully qualified names for objects and functions.\n3. Defines the 'main' function as the starting point of the program.\n4. Inside the 'main' function, declares and initializes two integer variables 'a' and 'b' with the values 8 and 10, respectively.\n5. Calculates the sum of 'a' and 'b' and stores the result in the variable 'sum'.\n6. Outputs the value of 'sum' to the console using 'cout'.\n7. The 'endl' keyword ends the current line in the console output.\n8. Returns 0 from the 'main' function, indicating the program completed successfully.",
        "output": "The given C++ code performs the following steps:\n\n1. Includes the 'iostream' header, which provides input and output facilities.\n2. Uses standard 'std' namespace to avoid the need to use fully qualified names for objects and functions.\n3. Defines the 'main' function as the starting point of the program.\n4. Inside the 'main' function, declares and initializes two integer variables 'a' and 'b' with the values 8 and 10, respectively.\n5. Calculates the sum of 'a' and 'b' and stores the result in the variable 'sum'.\n6. Outputs the value of 'sum' to the console using 'cout'.\n7. The 'endl' keyword ends the current line in the console output.\n8. Returns 0 from the 'main' function, indicating the program completed successfully."
    },
    {
        "instruction": "Implement a function in Ruby that returns the sum of squares of the numbers received in an array.",
        "input": "[3, 4, 5]",
        "response": "def sum_of_squares(numbers)\n    numbers.map { |number| number * number }.reduce(:+)\nend\n\n# Example usage\nnumbers = [3, 4, 5]\nresult = sum_of_squares(numbers)\nputs result",
        "output": "def sum_of_squares(numbers)\n    numbers.map { |number| number * number }.reduce(:+)\nend\n\n# Example usage\nnumbers = [3, 4, 5]\nresult = sum_of_squares(numbers)\nputs result"
    },
    {
        "instruction": "Can you identify any syntax errors in the provided JavaScript code?",
        "input": "let names = ['John', 'Jane', 'Jerry'];\nfor (let name of names) {\n    console log(name);\n}",
        "response": "Yes, there is a syntax error in the given JavaScript code:\n  Inside the 'for' loop where it tries to print the value of 'name' to the console using 'console log(name);'. It should be 'console.log(name);', as the correct syntax uses a period (.) instead of a space between 'console' and 'log'.",
        "output": "Yes, there is a syntax error in the given JavaScript code:\n  Inside the 'for' loop where it tries to print the value of 'name' to the console using 'console log(name);'. It should be 'console.log(name);', as the correct syntax uses a period (.) instead of a space between 'console' and 'log'."
    },
    {
        "instruction": "Create a JavaScript function that returns the first n Fibonacci numbers as an array.",
        "input": "",
        "response": "function generateFibonacci(n) {\n  let fib = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib.slice(0, n);\n}",
        "output": "function generateFibonacci(n) {\n  let fib = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib.slice(0, n);\n}"
    },
    {
        "instruction": "What is the expected output for the following Python code?",
        "input": "s = 'Hello, world!'\nprint(s.split(','))",
        "response": "The expected output is: ['Hello', ' world!']",
        "output": "The expected output is: ['Hello', ' world!']"
    },
    {
        "instruction": "Please rewrite the following Java code snippet to use a lambda function instead of a method reference.",
        "input": "List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\nnames.forEach(System.out::println);",
        "response": "List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\nnames.forEach(name -> System.out.println(name));",
        "output": "List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\nnames.forEach(name -> System.out.println(name));"
    },
    {
        "instruction": "Find and fix the syntax error in the given C++ code snippet.",
        "input": "#include <iostream>;\n\nint main() {\n  int x = 10;\n  int y = 25;\n  int z;\n\n  z = x + y;\n  std::cout << \"Sum of x and y: \"  z << std::endl;\n\n  return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n  int x = 10;\n  int y = 25;\n  int z;\n\n  z = x + y;\n  std::cout << \"Sum of x and y: \" << z << std::endl;\n\n  return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n  int x = 10;\n  int y = 25;\n  int z;\n\n  z = x + y;\n  std::cout << \"Sum of x and y: \" << z << std::endl;\n\n  return 0;\n}"
    },
    {
        "instruction": "Design a Python function to calculate the area of a triangle using its base and height.",
        "input": "base = 10, height = 5",
        "response": "def triangle_area(base, height):\n    return 0.5 * base * height\n\narea = triangle_area(10, 5)\nprint('Area of the triangle:', area)",
        "output": "def triangle_area(base, height):\n    return 0.5 * base * height\n\narea = triangle_area(10, 5)\nprint('Area of the triangle:', area)"
    },
    {
        "instruction": "Rewrite the following Python code snippet to make it more Pythonic.",
        "input": "numbers = [5, 2, 9, 1, 5, 6]\n\nminimum = numbers[0]\n\nfor num in numbers:\n    if num < minimum:\n        minimum = num\n\nprint(minimum)",
        "response": "numbers = [5, 2, 9, 1, 5, 6]\n\nminimum = min(numbers)\nprint(minimum)",
        "output": "numbers = [5, 2, 9, 1, 5, 6]\n\nminimum = min(numbers)\nprint(minimum)"
    },
    {
        "instruction": "Find any syntax errors in the given C++ code and point it out.",
        "input": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int x, y, sum;\n    cout << \"Enter two integers:\";\n    cin >> x >> y;\n\n    sum = x + y;\n\n    cout << \"Sum is: \" << sum << endl;\n    return 0;\n}",
        "response": "false",
        "output": "false"
    },
    {
        "instruction": "Translate the following Python code into JavaScript. Make sure to only use standard ES6 syntax.",
        "input": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)\nprint(result)",
        "response": "const addNumbers = (a, b) => a + b;\n\nconst result = addNumbers(5, 3);\nconsole.log(result);",
        "output": "const addNumbers = (a, b) => a + b;\n\nconst result = addNumbers(5, 3);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a bubble sort algorithm in Python to sort a list of integers in ascending order.",
        "input": "[5, 1, 8, 2, 6]",
        "response": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [5, 1, 8, 2, 6]\nbubble_sort(arr)\nprint(arr)",
        "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [5, 1, 8, 2, 6]\nbubble_sort(arr)\nprint(arr)"
    },
    {
        "instruction": "How would you demonstrate JSON parsing from an API response in JavaScript?",
        "input": "{\"name\": \"David\", \"age\": 35}",
        "response": "fetch('https://example.com/api/data')\n    .then(response => response.json())\n    .then(data => {\n        console.log(data);\n        console.log(`Name: ${data.name}, Age: ${data.age}`);\n    })\n    .catch(error => console.error(error));",
        "output": "fetch('https://example.com/api/data')\n    .then(response => response.json())\n    .then(data => {\n        console.log(data);\n        console.log(`Name: ${data.name}, Age: ${data.age}`);\n    })\n    .catch(error => console.error(error));"
    },
    {
        "instruction": "In Java, provide a code snippet that shows how to create a new instance of ArrayList, add elements to it, and then iterate over the elements using a for-each loop.",
        "input": "",
        "response": "import java.util.ArrayList;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        ArrayList<String> myList = new ArrayList<>();\n        myList.add(\"Apple\");\n        myList.add(\"Banana\");\n        myList.add(\"Cherry\");\n\n        for (String item : myList) {\n            System.out.println(item);\n        }\n    }\n}",
        "output": "import java.util.ArrayList;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        ArrayList<String> myList = new ArrayList<>();\n        myList.add(\"Apple\");\n        myList.add(\"Banana\");\n        myList.add(\"Cherry\");\n\n        for (String item : myList) {\n            System.out.println(item);\n        }\n    }\n}"
    },
    {
        "instruction": "Write a recursive C++ function to calculate the sum of the first n natural numbers.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nint sum_of_n(int n) {\n    if(n == 1) {\n        return 1;\n    }\n    else {\n        return (n + sum_of_n(n - 1));\n    }\n}\n\nint main() {\n    int n = 5;\n    cout << \"Sum of first \" << n << \" natural numbers is: \" << sum_of_n(n) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint sum_of_n(int n) {\n    if(n == 1) {\n        return 1;\n    }\n    else {\n        return (n + sum_of_n(n - 1));\n    }\n}\n\nint main() {\n    int n = 5;\n    cout << \"Sum of first \" << n << \" natural numbers is: \" << sum_of_n(n) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a function in Python to recursively calculate the greatest common divisor of two numbers using Euclid's algorithm.",
        "input": "",
        "response": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)",
        "output": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)"
    },
    {
        "instruction": "Write a Java class that implements a simple stack using an ArrayList. Include methods for push, pop, and peek.",
        "input": "",
        "response": "import java.util.ArrayList;\n\npublic class Stack {\n\n    private ArrayList<Integer> stack = new ArrayList<>();\n\n    public void push(int value) {\n        stack.add(value);\n    }\n\n    public int pop() {\n        if (!isEmpty()) {\n            int value = stack.get(stack.size() - 1);\n            stack.remove(stack.size() - 1);\n            return value;\n        }\n        throw new RuntimeException('Stack is empty');\n    }\n\n    public int peek() {\n        if (!isEmpty()) {\n            return stack.get(stack.size() - 1);\n        }\n        throw new RuntimeException('Stack is empty');\n    }\n\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}",
        "output": "import java.util.ArrayList;\n\npublic class Stack {\n\n    private ArrayList<Integer> stack = new ArrayList<>();\n\n    public void push(int value) {\n        stack.add(value);\n    }\n\n    public int pop() {\n        if (!isEmpty()) {\n            int value = stack.get(stack.size() - 1);\n            stack.remove(stack.size() - 1);\n            return value;\n        }\n        throw new RuntimeException('Stack is empty');\n    }\n\n    public int peek() {\n        if (!isEmpty()) {\n            return stack.get(stack.size() - 1);\n        }\n        throw new RuntimeException('Stack is empty');\n    }\n\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}"
    },
    {
        "instruction": "Create a C++ program to reverse the words in a given sentence. For example, if the input is 'Hello, how are you?', the output should be 'you? are how Hello,'.",
        "input": "",
        "response": "#include <iostream>\n#include <sstream>\n#include <stack>\n#include <string>\n\nint main() {\n  std::string input;\n  std::getline(std::cin, input);\n\n  std::istringstream iss(input);\n  std::stack<std::string> words;\n\n  std::string word;\n  while (iss >> word) {\n    words.push(word);\n  }\n\n  while (!words.empty()) {\n    std::cout << words.top() << ' ';\n    words.pop();\n  }\n\n  std::cout << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n#include <sstream>\n#include <stack>\n#include <string>\n\nint main() {\n  std::string input;\n  std::getline(std::cin, input);\n\n  std::istringstream iss(input);\n  std::stack<std::string> words;\n\n  std::string word;\n  while (iss >> word) {\n    words.push(word);\n  }\n\n  while (!words.empty()) {\n    std::cout << words.top() << ' ';\n    words.pop();\n  }\n\n  std::cout << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "How can I write an SQL query for calculating the total sales for each product in a 'sales' table with columns 'product_id' and 'quantity_sold'?",
        "input": "",
        "response": "SELECT product_id, SUM(quantity_sold) as total_sales\nFROM sales\nGROUP BY product_id;",
        "output": "SELECT product_id, SUM(quantity_sold) as total_sales\nFROM sales\nGROUP BY product_id;"
    },
    {
        "instruction": "Design a Python function that reads a given CSV file and returns a list of dictionaries where each dictionary contains key-value pairs corresponding to each header and value in the CSV.",
        "input": "csv_filename = 'sample_data.csv'",
        "response": "import csv\n\ndef read_csv_to_dict(filename):\n    with open(filename, mode='r', newline='') as file:\n        reader = csv.DictReader(file)\n        return [row for row in reader]\n\n\ncsv_filename = 'sample_data.csv'\ndata = read_csv_to_dict(csv_filename)\nprint(data)",
        "output": "import csv\n\ndef read_csv_to_dict(filename):\n    with open(filename, mode='r', newline='') as file:\n        reader = csv.DictReader(file)\n        return [row for row in reader]\n\n\ncsv_filename = 'sample_data.csv'\ndata = read_csv_to_dict(csv_filename)\nprint(data)"
    },
    {
        "instruction": "Create a Java method that takes a string input representing an email address and returns true if the format is valid, false otherwise.",
        "input": "testEmail = \"John.Doe@example.com\"",
        "response": "import java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\npublic class EmailValidator {\n\n    public static boolean isValidEmail(String email) {\n        String regex = \"^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(email);\n        return matcher.matches();\n    }\n\n    public static void main(String[] args) {\n        String testEmail = \"John.Doe@example.com\";\n        System.out.println(isValidEmail(testEmail));\n    }\n}",
        "output": "import java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\npublic class EmailValidator {\n\n    public static boolean isValidEmail(String email) {\n        String regex = \"^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(email);\n        return matcher.matches();\n    }\n\n    public static void main(String[] args) {\n        String testEmail = \"John.Doe@example.com\";\n        System.out.println(isValidEmail(testEmail));\n    }\n}"
    },
    {
        "instruction": "Write a shell script that searches for a given pattern in a specified file and counts the number of occurrences.",
        "input": "filename = 'sample.txt', pattern = 'example'",
        "response": "#!/bin/bash\n\nfilename=\"sample.txt\"\npattern=\"example\"\n\ncount=$(grep -o \"${pattern}\" \"${filename}\" | wc -l)\necho \"The pattern '${pattern}' was found ${count} times in the file '${filename}'\"",
        "output": "#!/bin/bash\n\nfilename=\"sample.txt\"\npattern=\"example\"\n\ncount=$(grep -o \"${pattern}\" \"${filename}\" | wc -l)\necho \"The pattern '${pattern}' was found ${count} times in the file '${filename}'\""
    },
    {
        "instruction": "How to implement a JavaScript function that receives a hexadecimal color code as input and returns the RGB values as an object?",
        "input": "hexColor = '#FF5733'",
        "response": "function hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nconst hexColor = '#FF5733';\nconst rgb = hexToRgb(hexColor);\nconsole.log(rgb);",
        "output": "function hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nconst hexColor = '#FF5733';\nconst rgb = hexToRgb(hexColor);\nconsole.log(rgb);"
    },
    {
        "instruction": "Design a Python function that reads a comma-separated list of integers in a string format, converts it to a list of integers, and prints the maximum value.",
        "input": "3,5,9,2,5,12",
        "response": "def find_max(input_str):\n    input_list = [int(num) for num in input_str.split(',')]\n    max_value = max(input_list)\n    print(max_value)\n\nfind_max('3,5,9,2,5,12')",
        "output": "def find_max(input_str):\n    input_list = [int(num) for num in input_str.split(',')]\n    max_value = max(input_list)\n    print(max_value)\n\nfind_max('3,5,9,2,5,12')"
    },
    {
        "instruction": "Using Java, create a class named Circle with a private attribute radius, a public constructor to initialize the radius, and an instance method to calculate the area. Test the implemented code.",
        "input": "Circle circle = new Circle(5);",
        "response": "class Circle {\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double calculateArea() {\n        return Math.PI * this.radius * this.radius;\n    }\n}\n\npublic static void main(String[] args) {\n    Circle circle = new Circle(5);\n    System.out.println(circle.calculateArea());\n}",
        "output": "class Circle {\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double calculateArea() {\n        return Math.PI * this.radius * this.radius;\n    }\n}\n\npublic static void main(String[] args) {\n    Circle circle = new Circle(5);\n    System.out.println(circle.calculateArea());\n}"
    },
    {
        "instruction": "Can you find the syntax error in this C# code snippet and provide a corrected version? 'public static void Main(){ int num1 = 10; int num2 = 20; int num3; Console.WriteLine(num3 = num1 + num2;); }'",
        "input": "",
        "response": "public static void Main(){\n    int num1 = 10;\n    int num2 = 20;\n    int num3;\n    num3 = num1 + num2;\n    Console.WriteLine(num3);\n}",
        "output": "public static void Main(){\n    int num1 = 10;\n    int num2 = 20;\n    int num3;\n    num3 = num1 + num2;\n    Console.WriteLine(num3);\n}"
    },
    {
        "instruction": "Implement and call a JavaScript function named 'capitalizeWords' that takes a string input and returns a new string with each word capitalized.",
        "input": "'hello world'",
        "response": "function capitalizeWords(str) {\n    return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}\n\nconst inputString = 'hello world';\nconst result = capitalizeWords(inputString);\nconsole.log(result);",
        "output": "function capitalizeWords(str) {\n    return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}\n\nconst inputString = 'hello world';\nconst result = capitalizeWords(inputString);\nconsole.log(result);"
    },
    {
        "instruction": "Provide an example of a simple shell script that executes a python file and stores its output in a text file.",
        "input": "Python file path: /path/to/my_script.py",
        "response": "#!/bin/sh\n\n# Execute the python script and store the output in a text file\necho \"Running my_script.py and storing the output in output.txt\"\npython /path/to/my_script.py > output.txt\n",
        "output": "#!/bin/sh\n\n# Execute the python script and store the output in a text file\necho \"Running my_script.py and storing the output in output.txt\"\npython /path/to/my_script.py > output.txt\n"
    },
    {
        "instruction": "Debug the following JavaScript code snippet and explain the issue.",
        "input": "function findMax(arr) {\n var max = arr[0];\n for (var i = 2; i < arr.length; i++) {\n if (arr[i] > max) {\n max = arr[i];\n }\n }\n return max;\n}\n\nfindMax([1, 5, 7, 10, 2, 8]);",
        "response": "There is a small issue in the code snippet, specifically in the 'for' loop initialization. Instead of starting from index 2, it should start from index 1 for proper comparison.\n\nHere is the corrected code:\n\nfunction findMax(arr) {\n var max = arr[0];\n for (var i = 1; i < arr.length; i++) { // Corrected initialization from i = 2 to i = 1\n if (arr[i] > max) {\n max = arr[i];\n }\n }\n return max;\n}\n\nfindMax([1, 5, 7, 10, 2, 8]);",
        "output": "There is a small issue in the code snippet, specifically in the 'for' loop initialization. Instead of starting from index 2, it should start from index 1 for proper comparison.\n\nHere is the corrected code:\n\nfunction findMax(arr) {\n var max = arr[0];\n for (var i = 1; i < arr.length; i++) { // Corrected initialization from i = 2 to i = 1\n if (arr[i] > max) {\n max = arr[i];\n }\n }\n return max;\n}\n\nfindMax([1, 5, 7, 10, 2, 8]);"
    },
    {
        "instruction": "Translate the following Java code to C++.",
        "input": "class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}",
        "response": "#include<iostream>\n\nusing namespace std;\n\nint main() {\n    // Print Hello, world! in C++\n    cout << \"Hello, world!\" << endl;\n    return 0;\n}",
        "output": "#include<iostream>\n\nusing namespace std;\n\nint main() {\n    // Print Hello, world! in C++\n    cout << \"Hello, world!\" << endl;\n    return 0;\n}"
    },
    {
        "instruction": "What is the expected output of this Python code snippet?",
        "input": "def fibonacci_series(n):\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  elif n == 2:\n    return [0, 1]\n  else:\n    fib = [0, 1]\n    for i in range(2, n):\n      fib.append(fib[-1] + fib[-2])\n    return fib\n\nfibonacci_series(6)",
        "response": "The expected output of the given Python code snippet is the first 6 Fibonacci numbers in a list: [0, 1, 1, 2, 3, 5]",
        "output": "The expected output of the given Python code snippet is the first 6 Fibonacci numbers in a list: [0, 1, 1, 2, 3, 5]"
    },
    {
        "instruction": "Create a Python function that takes a list of numbers and returns their product.",
        "input": "[3, 4, 2]",
        "response": "def product(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n\nprint(product([3, 4, 2]))",
        "output": "def product(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n\nprint(product([3, 4, 2]))"
    },
    {
        "instruction": "Write a JavaScript code snippet that sorts an array of integers in ascending order.",
        "input": "[45, 32, 15, 20, 67]",
        "response": "function sortArray(arr) {\n  return arr.sort(function(a, b) {\n    return a - b;\n  });\n}\n\nconsole.log(sortArray([45, 32, 15, 20, 67]));",
        "output": "function sortArray(arr) {\n  return arr.sort(function(a, b) {\n    return a - b;\n  });\n}\n\nconsole.log(sortArray([45, 32, 15, 20, 67]));"
    },
    {
        "instruction": "How do I write a Java method that counts the number of occurrences of a character in a given string?",
        "input": "string = \"programming\", character = 'g'",
        "response": "public int countOccurrences(String string, char character) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.charAt(i) == character) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint result = countOccurrences(\"programming\", 'g');\nSystem.out.println(result);",
        "output": "public int countOccurrences(String string, char character) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.charAt(i) == character) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint result = countOccurrences(\"programming\", 'g');\nSystem.out.println(result);"
    },
    {
        "instruction": "Implement a C++ function to calculate the factorial of n using recursion.",
        "input": "n = 5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    std::cout << factorial(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    std::cout << factorial(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Design a Python function that calculates the total cost of a shopping cart, given a dictionary of items and their respective prices and quantities.",
        "input": "shopping_cart = {'apple': {'price': 1.5, 'quantity': 4}, 'banana': {'price': 0.8, 'quantity': 6}, 'orange': {'price': 1, 'quantity': 5}}",
        "response": "def total_cost(cart):\n    total = 0\n    for item in cart:\n        total += cart[item]['price'] * cart[item]['quantity']\n    return total\n\ncart_value = total_cost(shopping_cart)\nprint(cart_value)",
        "output": "def total_cost(cart):\n    total = 0\n    for item in cart:\n        total += cart[item]['price'] * cart[item]['quantity']\n    return total\n\ncart_value = total_cost(shopping_cart)\nprint(cart_value)"
    },
    {
        "instruction": "Convert a piece of C# code containing a class with its methods to a similar code in Java.",
        "input": "using System;\n\npublic class Vehicle\n{\n    private string make;\n    public string Make\n    {\n        get { return make; }\n        set { make = value; }\n    }\n    public void Drive()\n    {\n        Console.WriteLine(\"Driving the \" + Make);\n    }\n}",
        "response": "public class Vehicle {\n    private String make;\n\n    public String getMake() {\n        return make;\n    }\n\n    public void setMake(String make) {\n        this.make = make;\n    }\n\n    public void drive() {\n        System.out.println(\"Driving the \" + getMake());\n    }\n}",
        "output": "public class Vehicle {\n    private String make;\n\n    public String getMake() {\n        return make;\n    }\n\n    public void setMake(String make) {\n        this.make = make;\n    }\n\n    public void drive() {\n        System.out.println(\"Driving the \" + getMake());\n    }\n}"
    },
    {
        "instruction": "What changes would be needed in a Python script to prevent a FileNotFound error when opening and reading a file?",
        "input": "file_name = 'sample.txt'\nwith open(file_name, 'r') as file:\n    contents = file.read()",
        "response": "import os\n\nfile_name = 'sample.txt'\n\nif os.path.exists(file_name):\n    with open(file_name, 'r') as file:\n        contents = file.read()\nelse:\n    print(f'Error: {file_name} not found.')",
        "output": "import os\n\nfile_name = 'sample.txt'\n\nif os.path.exists(file_name):\n    with open(file_name, 'r') as file:\n        contents = file.read()\nelse:\n    print(f'Error: {file_name} not found.')"
    },
    {
        "instruction": "Create a Java method to determine if a given string is a palindrome.",
        "input": "",
        "response": "public static boolean isPalindrome(String input) {\n    int start = 0;\n    int end = input.length() - 1;\n    while (start < end) {\n        if (input.charAt(start) != input.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}",
        "output": "public static boolean isPalindrome(String input) {\n    int start = 0;\n    int end = input.length() - 1;\n    while (start < end) {\n        if (input.charAt(start) != input.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}"
    },
    {
        "instruction": "Write a function in C++ that takes an integer array and returns the sum of only odd elements.",
        "input": "",
        "response": "#include<iostream>\nusing namespace std;\n\nint sum_odd_elements(int arr[], int size) {\n    int sum = 0;\n    for(int i = 0; i < size; ++i) {\n        if (arr[i] % 2 != 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint sum_odd_elements(int arr[], int size) {\n    int sum = 0;\n    for(int i = 0; i < size; ++i) {\n        if (arr[i] % 2 != 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Explain how the Bubble Sort algorithm works and give a Python code example.",
        "input": "",
        "response": "Bubble Sort is a simple sorting algorithm that iterates through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until no more swaps are needed, indicating that the list is sorted. The worst-case time complexity of the Bubble Sort algorithm is O(n^2). Here's a Python code example:\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint('Sorted array is:', arr)",
        "output": "Bubble Sort is a simple sorting algorithm that iterates through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until no more swaps are needed, indicating that the list is sorted. The worst-case time complexity of the Bubble Sort algorithm is O(n^2). Here's a Python code example:\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint('Sorted array is:', arr)"
    },
    {
        "instruction": "Implement binary search in Ruby to find the index of a target value in a sorted array.",
        "input": "",
        "response": "def binary_search(arr, target)\n    left = 0\n    right = arr.length - 1\n\n    while left <= right\n        mid = (left + right) / 2\n\n        if arr[mid] == target\n            return mid\n        elsif arr[mid] < target\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n\n    return -1\nend\n\narr = [2, 3, 4, 10, 40]\ntarget = 10\nresult = binary_search(arr, target)\nputs 'Element is not present' if result == -1\nputs \"Element is at index #{result}\" if result != -1",
        "output": "def binary_search(arr, target)\n    left = 0\n    right = arr.length - 1\n\n    while left <= right\n        mid = (left + right) / 2\n\n        if arr[mid] == target\n            return mid\n        elsif arr[mid] < target\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n\n    return -1\nend\n\narr = [2, 3, 4, 10, 40]\ntarget = 10\nresult = binary_search(arr, target)\nputs 'Element is not present' if result == -1\nputs \"Element is at index #{result}\" if result != -1"
    },
    {
        "instruction": "Create a JavaScript function that parses JSON data received from an API and extracts the values of 'price' and 'description' from the received data.",
        "input": "{\"data\": [{\"price\": 35.99, \"description\": \"Red T-Shirt\", \"stock\": 10}, {\"price\": 45.99, \"description\": \"Blue Jeans\", \"stock\": 5}]}",
        "response": "function extractPriceDescription(jsonData) {\n  const data = JSON.parse(jsonData);\n  const result = data.data.map(item => ({ price: item.price, description: item.description }));\n  return result;\n}",
        "output": "function extractPriceDescription(jsonData) {\n  const data = JSON.parse(jsonData);\n  const result = data.data.map(item => ({ price: item.price, description: item.description }));\n  return result;\n}"
    },
    {
        "instruction": "What would be the output of this C++ code snippet? Identify any syntax errors if present.",
        "input": "#include <iostream>\n\nint main() {\n  int a = 10, b = 20;\n  if (a > b) \n    std::cout << \"a > b\\n\";\n  else\n    std::cout << \"a <= b\\n\";\n\n  return 0;\n}",
        "response": "The output will be: 'a <= b'. There are no syntax errors in the code.",
        "output": "The output will be: 'a <= b'. There are no syntax errors in the code."
    },
    {
        "instruction": "Translate the following Python code for calculating Fibonacci numbers into Java:",
        "input": "def fibonacci(n):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)",
        "response": "public int fibonacci(int n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}",
        "output": "public int fibonacci(int n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}"
    },
    {
        "instruction": "Given a C# method to calculate the square of a number, find what's incorrect and suggest changes.",
        "input": "public int CalculateSquare(int number) {\n  int result = number * result;\n  return result;\n}",
        "response": "There is an error in the calculation line. It should be 'int result = number * number;' instead of 'int result = number * result;'. Revised method:\n\npublic int CalculateSquare(int number) {\n  int result = number * number;\n  return result;\n}",
        "output": "There is an error in the calculation line. It should be 'int result = number * number;' instead of 'int result = number * result;'. Revised method:\n\npublic int CalculateSquare(int number) {\n  int result = number * number;\n  return result;\n}"
    },
    {
        "instruction": "Create a simple Python script to read the contents of a text file and count the number of lines.",
        "input": "example.txt",
        "response": "with open('example.txt', 'r') as file:\n    lines = file.readlines()\n    line_count = len(lines)\nprint('Number of lines:', line_count)",
        "output": "with open('example.txt', 'r') as file:\n    lines = file.readlines()\n    line_count = len(lines)\nprint('Number of lines:', line_count)"
    },
    {
        "instruction": "Write a JavaScript function that takes a string and returns the count of each character.",
        "input": "hello world",
        "response": "function characterCount(str) {\n  const count = {};\n  for(const char of str) {\n    count[char] = count[char] ? count[char] + 1 : 1;\n  }\n  return count;\n}\nconsole.log(characterCount('hello world'));",
        "output": "function characterCount(str) {\n  const count = {};\n  for(const char of str) {\n    count[char] = count[char] ? count[char] + 1 : 1;\n  }\n  return count;\n}\nconsole.log(characterCount('hello world'));"
    },
    {
        "instruction": "Design a SQL query to retrieve a list of employees who has a salary greater than the average salary of all employees in the table.",
        "input": "EMPLOYEE (id, name, salary)",
        "response": "SELECT id, name, salary\nFROM EMPLOYEE\nWHERE salary > (SELECT AVG(salary) FROM EMPLOYEE);",
        "output": "SELECT id, name, salary\nFROM EMPLOYEE\nWHERE salary > (SELECT AVG(salary) FROM EMPLOYEE);"
    },
    {
        "instruction": "In C++, implement a simple stack class that supports push, pop, and getTop operations.",
        "input": "",
        "response": "#include<iostream>\nusing namespace std;\n\nclass Stack {\nprivate:\n int top;\n int capacity;\n int* data;\npublic:\n Stack(int size) {\n  top = -1;\n  capacity = size;\n  data = new int[size];\n }\n\n void push(int value) {\n  if(top >= capacity - 1) {\n   cout << \"Stack Overflow\\n\";\n  } else {\n   data[++top] = value;\n  }\n }\n\n int pop() {\n  if(top < 0) {\n   cout << \"Stack Underflow\\n\";\n   return -1;\n  } else {\n   return data[top--];\n  }\n }\n\n int getTop() {\n  if(top < 0) {\n   cout << \"Stack is empty\\n\";\n   return -1;\n  } else {\n   return data[top];\n  }\n }\n};",
        "output": "#include<iostream>\nusing namespace std;\n\nclass Stack {\nprivate:\n int top;\n int capacity;\n int* data;\npublic:\n Stack(int size) {\n  top = -1;\n  capacity = size;\n  data = new int[size];\n }\n\n void push(int value) {\n  if(top >= capacity - 1) {\n   cout << \"Stack Overflow\\n\";\n  } else {\n   data[++top] = value;\n  }\n }\n\n int pop() {\n  if(top < 0) {\n   cout << \"Stack Underflow\\n\";\n   return -1;\n  } else {\n   return data[top--];\n  }\n }\n\n int getTop() {\n  if(top < 0) {\n   cout << \"Stack is empty\\n\";\n   return -1;\n  } else {\n   return data[top];\n  }\n }\n};"
    },
    {
        "instruction": "Create a Python function that takes a list of numbers as input and returns the triangle numbers for each element.",
        "input": "[1, 3, 6]",
        "response": "def triangle_numbers(numbers):\n    result = []\n    for n in numbers:\n        triangle_num = n * (n + 1) // 2\n        result.append(triangle_num)\n    return result",
        "output": "def triangle_numbers(numbers):\n    result = []\n    for n in numbers:\n        triangle_num = n * (n + 1) // 2\n        result.append(triangle_num)\n    return result"
    },
    {
        "instruction": "Implement a C++ function to concatenate two strings without using any standard library functions.",
        "input": "Hello, C++",
        "response": "#include <iostream>\n#include <cstring>\n\nchar* concat(char* str1, char* str2) {\n    int len1 = 0, len2 = 0;\n    while (str1[len1] != '\\0') len1++;\n    while (str2[len2] != '\\0') len2++;\n\n    char* result = new char[len1 + len2 + 1];\n\n    for (int i = 0; i < len1; i++)\n        result[i] = str1[i];\n    for (int i = 0; i < len2; i++)\n        result[len1 + i] = str2[i];\n\n    result[len1 + len2] = '\\0';\n    return result;\n}\n\nint main() {\n    char str1[] = \"Hello, \";\n    char str2[] = \"C++\";\n    char* result = concat(str1, str2);\n\n    std::cout << \"Concatenated String: \" << result << std::endl;\n    delete[] result;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cstring>\n\nchar* concat(char* str1, char* str2) {\n    int len1 = 0, len2 = 0;\n    while (str1[len1] != '\\0') len1++;\n    while (str2[len2] != '\\0') len2++;\n\n    char* result = new char[len1 + len2 + 1];\n\n    for (int i = 0; i < len1; i++)\n        result[i] = str1[i];\n    for (int i = 0; i < len2; i++)\n        result[len1 + i] = str2[i];\n\n    result[len1 + len2] = '\\0';\n    return result;\n}\n\nint main() {\n    char str1[] = \"Hello, \";\n    char str2[] = \"C++\";\n    char* result = concat(str1, str2);\n\n    std::cout << \"Concatenated String: \" << result << std::endl;\n    delete[] result;\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you convert a Unix timestamp to a human-readable date using JavaScript?",
        "input": "1618250661",
        "response": "function unixToHuman(timestamp) {\n    const dateObj = new Date(timestamp * 1000);\n    return dateObj.toLocaleString();\n}\n\nlet timestamp = 1618250661;\nlet humanDate = unixToHuman(timestamp);\nconsole.log('Human-readable date:', humanDate);",
        "output": "function unixToHuman(timestamp) {\n    const dateObj = new Date(timestamp * 1000);\n    return dateObj.toLocaleString();\n}\n\nlet timestamp = 1618250661;\nlet humanDate = unixToHuman(timestamp);\nconsole.log('Human-readable date:', humanDate);"
    },
    {
        "instruction": "Write a Bash script that takes a path to a file and finds the largest file with the '.txt' extension in the given directory and its subdirectories.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\npath=\"$1\"\n\nfind \"$path\" -type f -name \"*.txt\" -exec du -sh {} \\; | sort -rh | head -n 1",
        "output": "#!/bin/bash\n\npath=\"$1\"\n\nfind \"$path\" -type f -name \"*.txt\" -exec du -sh {} \\; | sort -rh | head -n 1"
    },
    {
        "instruction": "Create a JavaScript function that takes a string input and reverses the characters inside.",
        "input": "Reversed String",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nlet input = 'Reversed String';\nlet result = reverseString(input);\nconsole.log(result);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nlet input = 'Reversed String';\nlet result = reverseString(input);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a recursive Java method that calculates the nth number in the Fibonacci sequence.",
        "input": "6",
        "response": "public class Fibonacci {\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n    public static void main(String[] args) {\n        int n = 6;\n        int result = fibonacci(n);\n        System.out.println(result);\n    }\n}",
        "output": "public class Fibonacci {\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n    public static void main(String[] args) {\n        int n = 6;\n        int result = fibonacci(n);\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "How would you use the datetime library in Python to return the current date and time?",
        "input": "",
        "response": "from datetime import datetime\n\ndef current_date_time():\n    return datetime.now()\n\nprint(current_date_time())",
        "output": "from datetime import datetime\n\ndef current_date_time():\n    return datetime.now()\n\nprint(current_date_time())"
    },
    {
        "instruction": "Write a Shell script that prints out the file names in the current directory, separated by a newline.",
        "input": "",
        "response": "#!/bin/sh\n\nfor file in *;\ndo\n    echo \"$file\"\ndone",
        "output": "#!/bin/sh\n\nfor file in *;\ndo\n    echo \"$file\"\ndone"
    },
    {
        "instruction": "Create a Python function to convert a given temperature in Celsius to Fahrenheit.",
        "input": "celsius_temperature = 30",
        "response": "def celsius_to_fahrenheit(celsius_temperature):\n    fahrenheit_temperature = (celsius_temperature * 9/5) + 32\n    return fahrenheit_temperature\n\nfahrenheit_result = celsius_to_fahrenheit(30)\nprint(fahrenheit_result)",
        "output": "def celsius_to_fahrenheit(celsius_temperature):\n    fahrenheit_temperature = (celsius_temperature * 9/5) + 32\n    return fahrenheit_temperature\n\nfahrenheit_result = celsius_to_fahrenheit(30)\nprint(fahrenheit_result)"
    },
    {
        "instruction": "In JavaScript, write a function that takes a string and returns its reversed version.",
        "input": "original_string = 'Hello, World!'",
        "response": "function reverseString(original_string) {\n    return original_string.split('').reverse().join('');\n}\n\nconst reversed_string = reverseString('Hello, World!');\nconsole.log(reversed_string);",
        "output": "function reverseString(original_string) {\n    return original_string.split('').reverse().join('');\n}\n\nconst reversed_string = reverseString('Hello, World!');\nconsole.log(reversed_string);"
    },
    {
        "instruction": "How would you modify the following Java code to handle a possible NullPointerException?",
        "input": "String cityName = cities.get(index);\nint cityNameLength = cityName.length();",
        "response": "String cityName = cities.get(index);\nint cityNameLength = 0;\n\nif (cityName != null) {\n    cityNameLength = cityName.length();\n} else {\n    System.out.println('City name is null.');\n}",
        "output": "String cityName = cities.get(index);\nint cityNameLength = 0;\n\nif (cityName != null) {\n    cityNameLength = cityName.length();\n} else {\n    System.out.println('City name is null.');\n}"
    },
    {
        "instruction": "Write a shell script that checks if a given directory exists and creates it if it does not.",
        "input": "directory_name=my_directory",
        "response": "#!/bin/bash\n\ndirectory_name='my_directory'\n\nif [ ! -d \"$directory_name\" ]; then\n  mkdir \"$directory_name\"\n  echo \"Directory $directory_name created.\"\nelse\n  echo \"Directory $directory_name already exists.\"\nfi",
        "output": "#!/bin/bash\n\ndirectory_name='my_directory'\n\nif [ ! -d \"$directory_name\" ]; then\n  mkdir \"$directory_name\"\n  echo \"Directory $directory_name created.\"\nelse\n  echo \"Directory $directory_name already exists.\"\nfi"
    },
    {
        "instruction": "Create a Python function that calculates the Fibonacci sequence up to the given number n.",
        "input": "10",
        "response": "def fibonacci_seq(n):\n    fib_seq = [0, 1]\n    while len(fib_seq) < n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nprint(fibonacci_seq(10))",
        "output": "def fibonacci_seq(n):\n    fib_seq = [0, 1]\n    while len(fib_seq) < n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq\n\nprint(fibonacci_seq(10))"
    },
    {
        "instruction": "How would you implement a JavaScript function to calculate the sum of all even numbers between 1 and a given limit?",
        "input": "20",
        "response": "function sum_even_numbers(limit) {\n    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nconsole.log(sum_even_numbers(20));",
        "output": "function sum_even_numbers(limit) {\n    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nconsole.log(sum_even_numbers(20));"
    },
    {
        "instruction": "Fix the syntax error and refactor the code in the following C++ function for finding the largest number in an integer array.",
        "input": "#include <iostream>\n\nint find_largest(int arr[], int arr_size) {\n    int largest_num = arr[0];\n    for (int i = 0; i < arr_size; ++i) {\n        ifarr[i] > largest_num) {\n            largest_num = arr[i];\n        }\n    }\n    return largest_num;\n}\n\nint main() {\n    int arr[] = {10, 20, 4, 45, 99};\n    int arr_size = sizeof(arr) / sizeof(arr[0]);\n    cout << 'Largest element of the array is: ' << find_largest(arr, arr_size);\n    return 0;\n}",
        "response": "#include <iostream>\n\nint find_largest(int arr[], int arr_size) {\n    int largest_num = arr[0];\n    for (int i = 1; i < arr_size; ++i) {\n        if (arr[i] > largest_num) {\n            largest_num = arr[i];\n        }\n    }\n    return largest_num;\n}\n\nint main() {\n    int arr[] = {10, 20, 4, 45, 99};\n    int arr_size = sizeof(arr) / sizeof(arr[0]);\n    std::cout << \"Largest element of the array is: \" << find_largest(arr, arr_size);\n    return 0;\n}",
        "output": "#include <iostream>\n\nint find_largest(int arr[], int arr_size) {\n    int largest_num = arr[0];\n    for (int i = 1; i < arr_size; ++i) {\n        if (arr[i] > largest_num) {\n            largest_num = arr[i];\n        }\n    }\n    return largest_num;\n}\n\nint main() {\n    int arr[] = {10, 20, 4, 45, 99};\n    int arr_size = sizeof(arr) / sizeof(arr[0]);\n    std::cout << \"Largest element of the array is: \" << find_largest(arr, arr_size);\n    return 0;\n}"
    },
    {
        "instruction": "Develop a shell script that takes two command-line arguments as input and displays their sum.",
        "input": "4 7",
        "response": "#!/bin/bash\n\nif [ $# -ne 2 ]; then\n  echo 'Usage: ./sum_script.sh num1 num2'\n  exit 1\nfi\n\nsum=$(( $1 + $2 ))\necho \"The sum of $1 and $2 is $sum\"",
        "output": "#!/bin/bash\n\nif [ $# -ne 2 ]; then\n  echo 'Usage: ./sum_script.sh num1 num2'\n  exit 1\nfi\n\nsum=$(( $1 + $2 ))\necho \"The sum of $1 and $2 is $sum\""
    },
    {
        "instruction": "Create a JavaScript function to determine if an input string is a palindrome or not.",
        "input": "madam",
        "response": "function isPalindrome(str) {\n    const reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n}\n\nconsole.log(isPalindrome('madam'));",
        "output": "function isPalindrome(str) {\n    const reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n}\n\nconsole.log(isPalindrome('madam'));"
    },
    {
        "instruction": "Show how to open a file named 'example.txt' in read mode using Python.",
        "input": "",
        "response": "with open('example.txt', 'r') as file:\n    content = file.read()\nprint(content)",
        "output": "with open('example.txt', 'r') as file:\n    content = file.read()\nprint(content)"
    },
    {
        "instruction": "In Java, write a method to calculate the nth Fibonacci number using recursion.",
        "input": "5",
        "response": "public class Fibonacci {\n\n    public static int fibonacciRecursion(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacciRecursion(n - 1) + fibonacciRecursion(n - 2);\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(fibonacciRecursion(n));\n    }\n}",
        "output": "public class Fibonacci {\n\n    public static int fibonacciRecursion(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacciRecursion(n - 1) + fibonacciRecursion(n - 2);\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(fibonacciRecursion(n));\n    }\n}"
    },
    {
        "instruction": "Can you debug the following C++ code snippet which contains syntax errors?",
        "input": "#include <iostream>\n\nint main() {\nstd::cout >> \"Hello, World!\" << std::endl;\nreturn 0;}",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a SQL query that selects all rows from a table called 'users' where the user's age is 25 and sorts the results by the date joined in descending order.",
        "input": "",
        "response": "SELECT * FROM users WHERE age = 25 ORDER BY date_joined DESC;",
        "output": "SELECT * FROM users WHERE age = 25 ORDER BY date_joined DESC;"
    },
    {
        "instruction": "Design a simple Java class called 'Person' with properties 'name' and 'age', along with getter and setter methods for each property.",
        "input": "",
        "response": "public class Person {\n\n private String name;\n private int age;\n\n public String getName() {\n return name;\n }\n\n public void setName(String name) {\n this.name = name;\n }\n\n public int getAge() {\n return age;\n }\n\n public void setAge(int age) {\n this.age = age;\n }\n}",
        "output": "public class Person {\n\n private String name;\n private int age;\n\n public String getName() {\n return name;\n }\n\n public void setName(String name) {\n this.name = name;\n }\n\n public int getAge() {\n return age;\n }\n\n public void setAge(int age) {\n this.age = age;\n }\n}"
    },
    {
        "instruction": "In JavaScript, write a function to calculate the sum of all elements in an array of numbers using the reduce method.",
        "input": "",
        "response": "function sumArray(numbers) {\n return numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}",
        "output": "function sumArray(numbers) {\n return numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}"
    },
    {
        "instruction": "Explain how to use exception handling in Python to deal with a ZeroDivisionError when dividing two numbers.",
        "input": "",
        "response": "To handle a ZeroDivisionError in Python, you can use a try-except block. Place the code that may cause the error inside the try block and handle the exception in the except block. Here's an example:\n\ndef safe_divide(a, b):\n try:\n result = a / b\n except ZeroDivisionError:\n print(\"Cannot divide by zero\")\n result = None\n return result",
        "output": "To handle a ZeroDivisionError in Python, you can use a try-except block. Place the code that may cause the error inside the try block and handle the exception in the except block. Here's an example:\n\ndef safe_divide(a, b):\n try:\n result = a / b\n except ZeroDivisionError:\n print(\"Cannot divide by zero\")\n result = None\n return result"
    },
    {
        "instruction": "Generate a JavaScript function that reverses a given string.",
        "input": "Hello, GPT!",
        "response": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nlet reversedStr = reverseString('Hello, GPT!');\nconsole.log(reversedStr);",
        "output": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nlet reversedStr = reverseString('Hello, GPT!');\nconsole.log(reversedStr);"
    },
    {
        "instruction": "Create a Java method to find the largest even number in an array of integers.",
        "input": "int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};",
        "response": "public static int findLargestEven(int[] numbers) {\n  int largestEven = Integer.MIN_VALUE;\n  for (int number : numbers) {\n    if (number % 2 == 0 && number > largestEven) {\n      largestEven = number;\n    }\n  }\n  return largestEven;\n}\n\nint[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nSystem.out.println(findLargestEven(numbers));",
        "output": "public static int findLargestEven(int[] numbers) {\n  int largestEven = Integer.MIN_VALUE;\n  for (int number : numbers) {\n    if (number % 2 == 0 && number > largestEven) {\n      largestEven = number;\n    }\n  }\n  return largestEven;\n}\n\nint[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nSystem.out.println(findLargestEven(numbers));"
    },
    {
        "instruction": "Implement a function in Python that counts the number of occurrences of each word in a given text and returns a dictionary with word counts.",
        "input": "text = 'It was the best of times it was the worst of times'",
        "response": "def count_words(text):\n    word_count = {}\n    words = text.lower().split()\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\ntext = 'It was the best of times it was the worst of times'\nword_count_dict = count_words(text)\nprint(word_count_dict)",
        "output": "def count_words(text):\n    word_count = {}\n    words = text.lower().split()\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\ntext = 'It was the best of times it was the worst of times'\nword_count_dict = count_words(text)\nprint(word_count_dict)"
    },
    {
        "instruction": "Create a shell script that displays a list of all the files in the current directory with their file sizes in kilobytes.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *;\ndo\n  if [ -f \"${file}\" ]; then\n    file_size=$(du -k \"${file}\" | cut -f1)\n    echo \"${file} - ${file_size}K\"\n  fi\ndone",
        "output": "#!/bin/bash\n\nfor file in *;\ndo\n  if [ -f \"${file}\" ]; then\n    file_size=$(du -k \"${file}\" | cut -f1)\n    echo \"${file} - ${file_size}K\"\n  fi\ndone"
    },
    {
        "instruction": "Create a JavaScript function that reverses a string by taking a single argument.",
        "input": "OpenAI",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconst reversed = reverseString('OpenAI');\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconst reversed = reverseString('OpenAI');\nconsole.log(reversed);"
    },
    {
        "instruction": "Explain the purpose and the process of the following Python code.",
        "input": "words = ['apple', 'banana', 'cherry']\nword_lengths = [len(word) for word in words]\nprint(word_lengths)",
        "response": "The purpose of this code is to calculate the length of each word in the `words` list and store the lengths in a new list called `word_lengths`. The code does this using list comprehension, which is a concise way to create a new list using a single line of code. The `for` loop iterates over each word in the `words` list and applies the `len()` function to calculate its length. These lengths are added to the `word_lengths` list. Finally, the code prints the `word_lengths` list which will output: [5, 6, 6].",
        "output": "The purpose of this code is to calculate the length of each word in the `words` list and store the lengths in a new list called `word_lengths`. The code does this using list comprehension, which is a concise way to create a new list using a single line of code. The `for` loop iterates over each word in the `words` list and applies the `len()` function to calculate its length. These lengths are added to the `word_lengths` list. Finally, the code prints the `word_lengths` list which will output: [5, 6, 6]."
    },
    {
        "instruction": "Write a Python script that receives a list of ages and calculates the average age.",
        "input": "[25, 30, 35, 40, 45]",
        "response": "def average_age(ages):\n    total_age = sum(ages)\n    num_of_ages = len(ages)\n    average = total_age / num_of_ages\n    return average\n\nages_list = [25, 30, 35, 40, 45]\navg_age = average_age(ages_list)\nprint(avg_age)",
        "output": "def average_age(ages):\n    total_age = sum(ages)\n    num_of_ages = len(ages)\n    average = total_age / num_of_ages\n    return average\n\nages_list = [25, 30, 35, 40, 45]\navg_age = average_age(ages_list)\nprint(avg_age)"
    },
    {
        "instruction": "Find the error in the following Java code and suggest how it can be fixed.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.printIn('Hello, World!');\n    }\n}",
        "response": "There is a typo in the `System.out.printIn()` method call. It should be `System.out.println()`. The corrected code is:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println('Hello, World!');\n    }\n}",
        "output": "There is a typo in the `System.out.printIn()` method call. It should be `System.out.println()`. The corrected code is:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println('Hello, World!');\n    }\n}"
    },
    {
        "instruction": "Create a Python program that reads a CSV file and calculates the average value of each column.",
        "input": "data.csv: col_a,col_b,col_c\n3,5,2\n2,6,8",
        "response": "import csv\n\nfilename = 'data.csv'\n\ndef column_average(filename):\n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        column_count = len(next(reader))\n        csvfile.seek(0) \n\n        column_sum = [0] * column_count\n        row_count = 0\n\n        for row in reader:\n            row_count += 1\n            for i in range(column_count):\n                column_sum[i] += float(row[i])\n\n        column_avg = [sum_val / row_count for sum_val in column_sum]\n        return column_avg\n\naverages = column_average(filename)\nprint('Column averages:', averages)",
        "output": "import csv\n\nfilename = 'data.csv'\n\ndef column_average(filename):\n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        column_count = len(next(reader))\n        csvfile.seek(0) \n\n        column_sum = [0] * column_count\n        row_count = 0\n\n        for row in reader:\n            row_count += 1\n            for i in range(column_count):\n                column_sum[i] += float(row[i])\n\n        column_avg = [sum_val / row_count for sum_val in column_sum]\n        return column_avg\n\naverages = column_average(filename)\nprint('Column averages:', averages)"
    },
    {
        "instruction": "Write a JavaScript function that takes a date string as its parameter and returns the number of days between that date and now.",
        "input": "2022-03-01",
        "response": "function daysBetween(dateStr) {\n    const date = new Date(dateStr);\n    const now = new Date();\n    const msPerDay = 24 * 60 * 60 * 1000;\n\n    return Math.floor(Math.abs(now - date) / msPerDay);\n}\n\nconst days = daysBetween('2022-03-01');\nconsole.log(days);",
        "output": "function daysBetween(dateStr) {\n    const date = new Date(dateStr);\n    const now = new Date();\n    const msPerDay = 24 * 60 * 60 * 1000;\n\n    return Math.floor(Math.abs(now - date) / msPerDay);\n}\n\nconst days = daysBetween('2022-03-01');\nconsole.log(days);"
    },
    {
        "instruction": "Given a C++ class named 'Car', write a method called 'speedUp' that takes an integer parameter 'acceleration' and updates the 'speed' attribute accordingly.",
        "input": "",
        "response": "class Car {\npublic:\n    int speed;\n\n    void speedUp(int acceleration) {\n        speed += acceleration;\n    }\n};",
        "output": "class Car {\npublic:\n    int speed;\n\n    void speedUp(int acceleration) {\n        speed += acceleration;\n    }\n};"
    },
    {
        "instruction": "Can you provide a Ruby code that takes an input array and generates its corresponding Fibonacci sequence up to the index number?",
        "input": "[5, 8, 10]",
        "response": "def generate_fibonacci_sequence(index)\n  return [0] if index == 0\n  return [0, 1] if index == 1\n\n  fibonacci = [0, 1]\n  (index - 1).times do\n    fibonacci.push(fibonacci[-2] + fibonacci[-1])\n  end\n  fibonacci\nend\n\ninput_array = [5, 8, 10]\n\ninput_array.each do |index|\n  fibonacci_sequence = generate_fibonacci_sequence(index)\n  puts 'Fibonacci sequence up to index ' + index.to_s + ': ' + fibonacci_sequence.join(', ')\nend",
        "output": "def generate_fibonacci_sequence(index)\n  return [0] if index == 0\n  return [0, 1] if index == 1\n\n  fibonacci = [0, 1]\n  (index - 1).times do\n    fibonacci.push(fibonacci[-2] + fibonacci[-1])\n  end\n  fibonacci\nend\n\ninput_array = [5, 8, 10]\n\ninput_array.each do |index|\n  fibonacci_sequence = generate_fibonacci_sequence(index)\n  puts 'Fibonacci sequence up to index ' + index.to_s + ': ' + fibonacci_sequence.join(', ')\nend"
    },
    {
        "instruction": "Develop a Java method that reverses a given string without using any built-in functions or additional libraries.",
        "input": "Hello, world!",
        "response": "public String reverseString(String input) {\n    char[] original = input.toCharArray();\n    char[] reversed = new char[original.length];\n    for (int i = original.length - 1, j = 0; i >= 0; i--, j++) {\n        reversed[j] = original[i];\n    }\n    return new String(reversed);\n}\n\nString reversed = reverseString(\"Hello, world!\");\nSystem.out.println(reversed);",
        "output": "public String reverseString(String input) {\n    char[] original = input.toCharArray();\n    char[] reversed = new char[original.length];\n    for (int i = original.length - 1, j = 0; i >= 0; i--, j++) {\n        reversed[j] = original[i];\n    }\n    return new String(reversed);\n}\n\nString reversed = reverseString(\"Hello, world!\");\nSystem.out.println(reversed);"
    },
    {
        "instruction": "What would be the equivalent code for a Python list comprehension to filter odd numbers from a given list of integers?",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "numbers = [1, 2, 3, 4, 5, 6]\nodds = [num for num in numbers if num % 2 != 0]\nprint(odds)",
        "output": "numbers = [1, 2, 3, 4, 5, 6]\nodds = [num for num in numbers if num % 2 != 0]\nprint(odds)"
    },
    {
        "instruction": "Implement an HTTP GET request in JavaScript using the Fetch API to retrieve data from a sample URL.",
        "input": "https://api.example.com/data",
        "response": "const fetchData = async () => {\n    try {\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n};\n\nfetchData();",
        "output": "const fetchData = async () => {\n    try {\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n};\n\nfetchData();"
    },
    {
        "instruction": "Write a C++ function that calculates the Fibonacci sequence for a given number n, using a recursive approach.",
        "input": "7",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 7;\n    std::cout << \"Fibonacci sequence value for \" << n << \" is: \" << fibonacci(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 7;\n    std::cout << \"Fibonacci sequence value for \" << n << \" is: \" << fibonacci(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function to check if a given number is prime, and print a message accordingly.",
        "input": "",
        "response": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\nnumber = int(input('Enter a number: '))\nif is_prime(number):\n    print('The number is prime')\nelse:\n    print('The number is not prime')",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\nnumber = int(input('Enter a number: '))\nif is_prime(number):\n    print('The number is prime')\nelse:\n    print('The number is not prime')"
    },
    {
        "instruction": "What is the output of the following Java code snippet? String a = \"Hello\"; String b = \" World\"; System.out.println(a + b);",
        "input": "",
        "response": "The output of the code will be: \"Hello World\".",
        "output": "The output of the code will be: \"Hello World\"."
    },
    {
        "instruction": "Write JavaScript code to implement a function that takes an array of numbers and returns the sum of its elements.",
        "input": "",
        "response": "function sumOfArrayElements(arr) {\n    return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}\n\nlet numbers = [1, 2, 3, 4, 5];\nconsole.log(sumOfArrayElements(numbers));",
        "output": "function sumOfArrayElements(arr) {\n    return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}\n\nlet numbers = [1, 2, 3, 4, 5];\nconsole.log(sumOfArrayElements(numbers));"
    },
    {
        "instruction": "Design a C# function to accept two strings and return a merged string as output. In this merged string, the first character of the first string should be followed by the first character of the second string, then the second character of the first string followed by the second character of the second string, and so on.",
        "input": "",
        "response": "public static string MergeStrings(string str1, string str2)\n{\n    StringBuilder mergedString = new StringBuilder();\n    int minLength = Math.Min(str1.Length, str2.Length);\n    for (int i = 0; i < minLength; i++)\n    {\n        mergedString.Append(str1[i]);\n        mergedString.Append(str2[i]);\n    }\n    if (str1.Length > str2.Length)\n    {\n        mergedString.Append(str1.Substring(str2.Length));\n    }\n    else if (str1.Length < str2.Length)\n    {\n        mergedString.Append(str2.Substring(str1.Length));\n    }\n    return mergedString.ToString();\n}\n\nstring merged = MergeStrings(\"abc\", \"1234\");\nConsole.WriteLine(merged);",
        "output": "public static string MergeStrings(string str1, string str2)\n{\n    StringBuilder mergedString = new StringBuilder();\n    int minLength = Math.Min(str1.Length, str2.Length);\n    for (int i = 0; i < minLength; i++)\n    {\n        mergedString.Append(str1[i]);\n        mergedString.Append(str2[i]);\n    }\n    if (str1.Length > str2.Length)\n    {\n        mergedString.Append(str1.Substring(str2.Length));\n    }\n    else if (str1.Length < str2.Length)\n    {\n        mergedString.Append(str2.Substring(str1.Length));\n    }\n    return mergedString.ToString();\n}\n\nstring merged = MergeStrings(\"abc\", \"1234\");\nConsole.WriteLine(merged);"
    },
    {
        "instruction": "Create a Java function to calculate the greatest common divisor (GCD) of two integers.",
        "input": "",
        "response": "public int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
        "output": "public int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}"
    },
    {
        "instruction": "How would you implement a JavaScript function to capitalize the first letter of each word in a given string?",
        "input": "",
        "response": "function capitalizeFirstLetters(str) {\n    return str.replace(/\\b\\w/g, (char) => char.toUpperCase());\n}",
        "output": "function capitalizeFirstLetters(str) {\n    return str.replace(/\\b\\w/g, (char) => char.toUpperCase());\n}"
    },
    {
        "instruction": "Find and fix the error in this C++ code snippet meant to output the numbers from 1-10 using a while loop.",
        "input": "int main() {\n    int num = 1;\n    while(num < 11);\n    {\n        cout << num;\n        num++;\n    }\n}",
        "response": "int main() {\n    int num = 1;\n    while(num < 11) {\n        cout << num;\n        num++;\n    }\n}",
        "output": "int main() {\n    int num = 1;\n    while(num < 11) {\n        cout << num;\n        num++;\n    }\n}"
    },
    {
        "instruction": "Write a Bash script that reads a file containing a list of filenames and outputs the total number of lines in each of those files.",
        "input": "filelist.txt:\nexample1.txt\nexample2.txt\nexample3.txt",
        "response": "#!/bin/bash\n\nwhile read filename;\ndo\n    line_count=$(wc -l < \"$filename\")\n    printf '%s: %d\\n' \"$filename\" \"$line_count\"\ndone < filelist.txt",
        "output": "#!/bin/bash\n\nwhile read filename;\ndo\n    line_count=$(wc -l < \"$filename\")\n    printf '%s: %d\\n' \"$filename\" \"$line_count\"\ndone < filelist.txt"
    },
    {
        "instruction": "Implement a Java method to calculate and return the factorial of a given integer using recursion.",
        "input": "",
        "response": "public static long factorial(int n) {\n  if (n <= 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}",
        "output": "public static long factorial(int n) {\n  if (n <= 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}"
    },
    {
        "instruction": "Write a Bash script that takes a file path as a command-line argument and prints the number of lines, words, and characters in the file.",
        "input": "",
        "response": "#!/bin/bash\n\nif [ -f \"$1\" ]; then\n  wc -l -w -m \"$1\"\nelse\n  echo \"File does not exist\"\nfi",
        "output": "#!/bin/bash\n\nif [ -f \"$1\" ]; then\n  wc -l -w -m \"$1\"\nelse\n  echo \"File does not exist\"\nfi"
    },
    {
        "instruction": "What is the expected JavaScript code output when creating an object using object-oriented programming principles and displaying its properties?",
        "input": "class Employee {\n  constructor(firstName, lastName, position) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.position = position;\n  }\n}\n\nconst employee1 = new Employee('John', 'Doe', 'Software Engineer');\nconsole.log(employee1);",
        "response": "{ firstName: 'John', lastName: 'Doe', position: 'Software Engineer' }",
        "output": "{ firstName: 'John', lastName: 'Doe', position: 'Software Engineer' }"
    },
    {
        "instruction": "In C++, create a simple function that calculates the sum of an array of integers, taking the array and its size as input parameters.",
        "input": "",
        "response": "#include <iostream>\n\nint array_sum(int arr[], int size) {\n  int sum = 0;\n  for(int i = 0; i < size; ++i) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\nint main() {\n  int arr[] = {1, 2, 3, 4, 5};\n  int size = sizeof(arr) / sizeof(arr[0]);\n  std::cout << \"Sum of array elements: \" << array_sum(arr, size) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint array_sum(int arr[], int size) {\n  int sum = 0;\n  for(int i = 0; i < size; ++i) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\nint main() {\n  int arr[] = {1, 2, 3, 4, 5};\n  int size = sizeof(arr) / sizeof(arr[0]);\n  std::cout << \"Sum of array elements: \" << array_sum(arr, size) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Create a Python function that takes a list of numbers as input and returns the mean of those numbers.",
        "input": "[1, 3, 5, 7, 9]",
        "response": "def mean(numbers):\n    return sum(numbers) / len(numbers)",
        "output": "def mean(numbers):\n    return sum(numbers) / len(numbers)"
    },
    {
        "instruction": "How can you optimize this JavaScript code to calculate the factorial of a given number using recursion?",
        "input": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}",
        "response": "function factorial(n, accum = 1) {\n  if (n === 0) {\n    return accum;\n  }\n  return factorial(n - 1, n * accum);\n}",
        "output": "function factorial(n, accum = 1) {\n  if (n === 0) {\n    return accum;\n  }\n  return factorial(n - 1, n * accum);\n}"
    },
    {
        "instruction": "Debug the following Java code which is meant to reverse a string.",
        "input": "public static String reverse(String s) {\n    String reversed = \"\";\n    for (int i = 0; i <= s.length; i++) {\n        reversed = s.charAt(i) + reversed;\n    }\n    return reversed;\n}",
        "response": "public static String reverse(String s) {\n    String reversed = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        reversed = s.charAt(i) + reversed;\n    }\n    return reversed;\n}",
        "output": "public static String reverse(String s) {\n    String reversed = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        reversed = s.charAt(i) + reversed;\n    }\n    return reversed;\n}"
    },
    {
        "instruction": "Write a C++ function to merge two sorted arrays into one sorted array.",
        "input": "void mergeSortedArrays(int arr1[], int size1, int arr2[], int size2, int outputArray[]);",
        "response": "void mergeSortedArrays(int arr1[], int size1, int arr2[], int size2, int outputArray[]) {\n    int i = 0, j = 0, k = 0;\n    while (i < size1 && j < size2) {\n        if (arr1[i] < arr2[j]) {\n            outputArray[k++] = arr1[i++];\n        } else {\n            outputArray[k++] = arr2[j++];\n        }\n    }\n    while (i < size1) {\n        outputArray[k++] = arr1[i++];\n    }\n    while (j < size2) {\n        outputArray[k++] = arr2[j++];\n    }\n}",
        "output": "void mergeSortedArrays(int arr1[], int size1, int arr2[], int size2, int outputArray[]) {\n    int i = 0, j = 0, k = 0;\n    while (i < size1 && j < size2) {\n        if (arr1[i] < arr2[j]) {\n            outputArray[k++] = arr1[i++];\n        } else {\n            outputArray[k++] = arr2[j++];\n        }\n    }\n    while (i < size1) {\n        outputArray[k++] = arr1[i++];\n    }\n    while (j < size2) {\n        outputArray[k++] = arr2[j++];\n    }\n}"
    },
    {
        "instruction": "Design a Python function that accepts a list of strings and returns the strings concatenated in reverse order.",
        "input": "['Hello', 'world', '!']",
        "response": "def concat_reverse(strings):\n    strings_reversed = strings[::-1]\n    result = ''.join(strings_reversed)\n    return result\n\ninput_list = ['Hello', 'world', '!']\noutput = concat_reverse(input_list)\nprint(output)",
        "output": "def concat_reverse(strings):\n    strings_reversed = strings[::-1]\n    result = ''.join(strings_reversed)\n    return result\n\ninput_list = ['Hello', 'world', '!']\noutput = concat_reverse(input_list)\nprint(output)"
    },
    {
        "instruction": "Implement a Java method to check whether a given string is a palindrome.",
        "input": "racecar",
        "response": "public class PalindromeChecker {\n\n    public static boolean isPalindrome(String input) {\n        int n = input.length();\n        for (int i = 0; i < n / 2; i++) {\n            if (input.charAt(i) != input.charAt(n - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String input = \"racecar\";\n        System.out.println(isPalindrome(input));\n    }\n}",
        "output": "public class PalindromeChecker {\n\n    public static boolean isPalindrome(String input) {\n        int n = input.length();\n        for (int i = 0; i < n / 2; i++) {\n            if (input.charAt(i) != input.charAt(n - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String input = \"racecar\";\n        System.out.println(isPalindrome(input));\n    }\n}"
    },
    {
        "instruction": "Write a C++ code to calculate the factorial of a positive integer using a recursive function.",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int input = 5;\n    unsigned long long result = factorial(input);\n    std::cout << \"Factorial of \" << input << \" is: \" << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int input = 5;\n    unsigned long long result = factorial(input);\n    std::cout << \"Factorial of \" << input << \" is: \" << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Describe how to fix this PHP syntax error: Parse error: syntax error, unexpected ';', expecting ',' or ')' in test.php on line 3.",
        "input": "<?php\n$num = 10;\necho ('The number is ', $num;);\n?>",
        "response": "To fix the syntax error, replace the semicolon before the closing parenthesis with a comma. The corrected code should look like this:\n\n<?php\n$num = 10;\necho ('The number is ', $num);\n?>",
        "output": "To fix the syntax error, replace the semicolon before the closing parenthesis with a comma. The corrected code should look like this:\n\n<?php\n$num = 10;\necho ('The number is ', $num);\n?>"
    },
    {
        "instruction": "Create a Python function that takes two lists as input and returns a list containing the elements that are present in both lists.",
        "input": "",
        "response": "def common_elements(list1, list2):\n    return [element for element in list1 if element in list2]",
        "output": "def common_elements(list1, list2):\n    return [element for element in list1 if element in list2]"
    },
    {
        "instruction": "Write a Java function to find the longest consecutive sequence of integers in an unsorted array of distinct integers.",
        "input": "",
        "response": "import java.util.HashSet;\nimport java.util.Set;\n\npublic int findLongestConsecutive(int[] nums) {\n    Set<Integer> numberSet = new HashSet<>();\n    for (int n : nums) {\n        numberSet.add(n);\n    }\n\n    int longestStreak = 0;\n\n    for (int n : numberSet) {\n        if (!numberSet.contains(n - 1)) {\n            int currentNum = n;\n            int currentStreak = 1;\n\n            while (numberSet.contains(currentNum + 1)) {\n                currentNum += 1;\n                currentStreak += 1;\n            }\n\n            longestStreak = Math.max(longestStreak, currentStreak);\n        }\n    }\n\n    return longestStreak;\n}",
        "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic int findLongestConsecutive(int[] nums) {\n    Set<Integer> numberSet = new HashSet<>();\n    for (int n : nums) {\n        numberSet.add(n);\n    }\n\n    int longestStreak = 0;\n\n    for (int n : numberSet) {\n        if (!numberSet.contains(n - 1)) {\n            int currentNum = n;\n            int currentStreak = 1;\n\n            while (numberSet.contains(currentNum + 1)) {\n                currentNum += 1;\n                currentStreak += 1;\n            }\n\n            longestStreak = Math.max(longestStreak, currentStreak);\n        }\n    }\n\n    return longestStreak;\n}"
    },
    {
        "instruction": "How can a recursive function be written to search for a specific element in binary search tree, using JavaScript?",
        "input": "",
        "response": "function searchBST(node, target) {\n  if (node === null) return null;\n\n  if (node.val === target) return node;\n\n  if (target < node.val) {\n    return searchBST(node.left, target);\n  } else {\n    return searchBST(node.right, target);\n  }\n}",
        "output": "function searchBST(node, target) {\n  if (node === null) return null;\n\n  if (node.val === target) return node;\n\n  if (target < node.val) {\n    return searchBST(node.left, target);\n  } else {\n    return searchBST(node.right, target);\n  }\n}"
    },
    {
        "instruction": "Write a bash script to count the number of lines, words, and characters in a file.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nFILE_NAME=$1\n\nif [ -f \"$FILE_NAME\" ]; then\n  LINES=$(wc -l < \"$FILE_NAME\")\n  WORDS=$(wc -w < \"$FILE_NAME\")\n  CHARACTERS=$(wc -m < \"$FILE_NAME\")\n  echo \"Lines: $LINES\"\n  echo \"Words: $WORDS\"\n  echo \"Characters: $CHARACTERS\"\nelse\n  echo \"File not found.\"\nfi",
        "output": "#!/bin/bash\n\nFILE_NAME=$1\n\nif [ -f \"$FILE_NAME\" ]; then\n  LINES=$(wc -l < \"$FILE_NAME\")\n  WORDS=$(wc -w < \"$FILE_NAME\")\n  CHARACTERS=$(wc -m < \"$FILE_NAME\")\n  echo \"Lines: $LINES\"\n  echo \"Words: $WORDS\"\n  echo \"Characters: $CHARACTERS\"\nelse\n  echo \"File not found.\"\nfi"
    },
    {
        "instruction": "Create a Java class to represent a Student with properties like name, age, and grade, along with appropriate constructor, getters, and setters.",
        "input": "",
        "response": "public class Student {\n    private String name;\n    private int age;\n    private double grade;\n\n    public Student(String name, int age, double grade) {\n        this.name = name;\n        this.age = age;\n        this.grade = grade;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getGrade() {\n        return grade;\n    }\n\n    public void setGrade(double grade) {\n        this.grade = grade;\n    }\n}",
        "output": "public class Student {\n    private String name;\n    private int age;\n    private double grade;\n\n    public Student(String name, int age, double grade) {\n        this.name = name;\n        this.age = age;\n        this.grade = grade;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public double getGrade() {\n        return grade;\n    }\n\n    public void setGrade(double grade) {\n        this.grade = grade;\n    }\n}"
    },
    {
        "instruction": "Write a Python script to merge two dictionaries, updating the values in the first dictionary with the values from the second dictionary.",
        "input": "dict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'b': 4, 'd': 5}",
        "response": "def merge_dicts(d1, d2):\n    d1.update(d2)\n    return d1\n\n\nmerged_dict = merge_dicts(dict1, dict2)\nprint(merged_dict)",
        "output": "def merge_dicts(d1, d2):\n    d1.update(d2)\n    return d1\n\n\nmerged_dict = merge_dicts(dict1, dict2)\nprint(merged_dict)"
    },
    {
        "instruction": "What would be the jQuery equivalent code for selecting all paragraphs with class='test' in a web page?",
        "input": "",
        "response": "$('p.test');",
        "output": "$('p.test');"
    },
    {
        "instruction": "Provide a Bash script to search for a specific pattern in all text files in a directory and print the file names containing the pattern",
        "input": "pattern='your_pattern_here'\ndirectory='/path/to/your/directory'",
        "response": "#!/bin/bash\n\npattern='your_pattern_here'\ndirectory='/path/to/your/directory'\n\ngrep -l \"$pattern\" $directory/*.txt",
        "output": "#!/bin/bash\n\npattern='your_pattern_here'\ndirectory='/path/to/your/directory'\n\ngrep -l \"$pattern\" $directory/*.txt"
    },
    {
        "instruction": "Create a Python function that takes a list of integers and returns the sum of all even numbers in the list.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "def sum_even_numbers(numbers):\n    return sum([number for number in numbers if number % 2 == 0])\n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(sum_even_numbers(numbers))",
        "output": "def sum_even_numbers(numbers):\n    return sum([number for number in numbers if number % 2 == 0])\n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(sum_even_numbers(numbers))"
    },
    {
        "instruction": "Can you demonstrate the correct way to send a GET request using JavaScript's Fetch API to retrieve data from the provided example API endpoint?",
        "input": "https://jsonplaceholder.typicode.com/posts",
        "response": "fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error('There was an error fetching the data:', error);\n  });",
        "output": "fetch('https://jsonplaceholder.typicode.com/posts')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error('There was an error fetching the data:', error);\n  });"
    },
    {
        "instruction": "Detect and fix the syntax errors in this Java code snippet.",
        "input": "public class HelloWorld {\n    public static void main(String[] args)\n        System.out.println(\"Hello, World!\");\n        System.missingParenthesis;\n    }\n}",
        "response": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n        System.out.println(\"missingParenthesis\");\n    }\n}",
        "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n        System.out.println(\"missingParenthesis\");\n    }\n}"
    },
    {
        "instruction": "Show an SQL query that retrieves all columns from the 'employees' table where the 'salary' column is greater than or equal to 50000 and orders the results by the 'last_name' column alphabetically.",
        "input": "employee_id | first_name | last_name | title | salary\n1           | John       | Doe       | A     | 45000\n2           | Jane       | Smith     | B     | 55000\n3           | Mike       | Rogers    | C      | 52000",
        "response": "SELECT * FROM employees WHERE salary >= 50000 ORDER BY last_name ASC;",
        "output": "SELECT * FROM employees WHERE salary >= 50000 ORDER BY last_name ASC;"
    },
    {
        "instruction": "Write a Java function that calculates and returns the factorial of a given integer.",
        "input": "6",
        "response": "public static long factorial(int n) {\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    int input = 6;\n    long fact = factorial(input);\n    System.out.println(\"Factorial of \" + input + \" is: \" + fact);\n}",
        "output": "public static long factorial(int n) {\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    int input = 6;\n    long fact = factorial(input);\n    System.out.println(\"Factorial of \" + input + \" is: \" + fact);\n}"
    },
    {
        "instruction": "Explain how to fix the JavaScript syntax error in the given code snippet.",
        "input": "function calculateArea(length, width) {\n  let area = lenght*width;\n  return area;\n}\nconsole.log(calculateArea(10, 20));",
        "response": "There is a typo in the variable name 'lenght' which should be 'length'. To fix the syntax error, change 'lenght' to 'length' in the line that calculates the area.\n\nfunction calculateArea(length, width) {\n  let area = length * width;\n  return area;\n}\nconsole.log(calculateArea(10, 20));",
        "output": "There is a typo in the variable name 'lenght' which should be 'length'. To fix the syntax error, change 'lenght' to 'length' in the line that calculates the area.\n\nfunction calculateArea(length, width) {\n  let area = length * width;\n  return area;\n}\nconsole.log(calculateArea(10, 20));"
    },
    {
        "instruction": "Implement a C++ function that takes an array of integers as input and reverses the elements of the array in-place.",
        "input": "int arr[] = {1, 2, 3, 4, 5};\nint length = sizeof(arr) / sizeof(arr[0]);",
        "response": "#include <iostream>\n\nvoid reverseArray(int arr[], int length) {\n    for (int i = 0, j = length - 1; i < j; i++, j--) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int length = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, length);\n    for(int i = 0; i < length; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n\nvoid reverseArray(int arr[], int length) {\n    for (int i = 0, j = length - 1; i < j; i++, j--) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int length = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, length);\n    for(int i = 0; i < length; i++) {\n        std::cout << arr[i] << \" \";\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that accepts a list of strings and returns a dictionary with each string as the key and its length as the value.",
        "input": "['apple', 'orange', 'banana']",
        "response": "def string_length_dict(strings):\n    result = {}\n    for s in strings:\n        result[s] = len(s)\n    return result\n\nstrings_list = ['apple', 'orange', 'banana']\nlength_dict = string_length_dict(strings_list)\nprint(length_dict)",
        "output": "def string_length_dict(strings):\n    result = {}\n    for s in strings:\n        result[s] = len(s)\n    return result\n\nstrings_list = ['apple', 'orange', 'banana']\nlength_dict = string_length_dict(strings_list)\nprint(length_dict)"
    },
    {
        "instruction": "Create a Python function that takes a list of numbers and returns the arithmetic mean.",
        "input": "nums = [2.5, 4.0, 7.5, 1.0, 8.5]",
        "response": "def mean(numbers):\n    return sum(numbers) / len(numbers)\n\nnumbers = [2.5, 4.0, 7.5, 1.0, 8.5]\nresult = mean(numbers)\nprint(result)",
        "output": "def mean(numbers):\n    return sum(numbers) / len(numbers)\n\nnumbers = [2.5, 4.0, 7.5, 1.0, 8.5]\nresult = mean(numbers)\nprint(result)"
    },
    {
        "instruction": "What would be the expected output of this Java code snippet? public static int square(int x) { return x * x; } public static void main(String[] args) { System.out.println(square(5)); }",
        "input": "",
        "response": "The expected output of this Java code snippet is 25. The 'square()' function takes an integer parameter 'x' and returns its square (x * x). In the 'main()' method, the 'square()' function is called with the argument 5, which results in 5 * 5 = 25.",
        "output": "The expected output of this Java code snippet is 25. The 'square()' function takes an integer parameter 'x' and returns its square (x * x). In the 'main()' method, the 'square()' function is called with the argument 5, which results in 5 * 5 = 25."
    },
    {
        "instruction": "Implement a simple cache class in C++ that stores key-value pairs of integers using std::unordered_map.",
        "input": "",
        "response": "#include <iostream>\n#include <unordered_map>\nclass SimpleCache {\n  public:\n    int get(int key) {\n      if (cache.find(key) != cache.end()) {\n        return cache[key];\n      }\n      return -1;\n    }\n\n    void put(int key, int value) {\n      cache[key] = value;\n    }\n\n  private:\n    std::unordered_map<int, int> cache;\n};\n\nint main() {\n    SimpleCache cache;\n    cache.put(1, 10);\n    cache.put(2, 20);\n    std::cout << cache.get(1) << ' ' << cache.get(2) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <unordered_map>\nclass SimpleCache {\n  public:\n    int get(int key) {\n      if (cache.find(key) != cache.end()) {\n        return cache[key];\n      }\n      return -1;\n    }\n\n    void put(int key, int value) {\n      cache[key] = value;\n    }\n\n  private:\n    std::unordered_map<int, int> cache;\n};\n\nint main() {\n    SimpleCache cache;\n    cache.put(1, 10);\n    cache.put(2, 20);\n    std::cout << cache.get(1) << ' ' << cache.get(2) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script that sorts a given list of numbers in descending order.",
        "input": "10, 17, 5, 18, 6",
        "response": "#!/bin/bash\nnumbers=\"10 17 5 18 6\"\nsorted_numbers=$(echo $numbers | tr ' ' '\\n' | sort -nr | tr '\\n' ' ')\necho $sorted_numbers",
        "output": "#!/bin/bash\nnumbers=\"10 17 5 18 6\"\nsorted_numbers=$(echo $numbers | tr ' ' '\\n' | sort -nr | tr '\\n' ' ')\necho $sorted_numbers"
    },
    {
        "instruction": "Write a C++ function to compute the length of the longest common prefix in an array of strings.",
        "input": "Given an array of strings, ['flower', 'flow', 'float'], the function should return the length of the longest common prefix, which is 2 in this case (as 'fl' is the longest common prefix).",
        "response": "int longest_common_prefix(vector<string>& strs) {\n    if (strs.empty()) return 0;\n    int common_length = 0;\n    for (int i = 0;; ++i) {\n        char c = 0;\n        for (const auto& str : strs) {\n            if (i >= str.size()) return common_length;\n            if (c == 0) c = str[i];\n            if (str[i] != c) return common_length;\n        }\n        ++common_length;\n    }\n}",
        "output": "int longest_common_prefix(vector<string>& strs) {\n    if (strs.empty()) return 0;\n    int common_length = 0;\n    for (int i = 0;; ++i) {\n        char c = 0;\n        for (const auto& str : strs) {\n            if (i >= str.size()) return common_length;\n            if (c == 0) c = str[i];\n            if (str[i] != c) return common_length;\n        }\n        ++common_length;\n    }\n}"
    },
    {
        "instruction": "How can I modify the following Java code to also work for floating-point numbers?",
        "input": "public static int add(int a, int b) {\n    return a + b;\n}",
        "response": "You can make the function work for floating-point numbers by using method overloading. Add a new function for `float` or `double` arguments as shown below:\n\npublic static float add(float a, float b) {\n    return a + b;\n}\n\nor\n\npublic static double add(double a, double b) {\n    return a + b;\n}",
        "output": "You can make the function work for floating-point numbers by using method overloading. Add a new function for `float` or `double` arguments as shown below:\n\npublic static float add(float a, float b) {\n    return a + b;\n}\n\nor\n\npublic static double add(double a, double b) {\n    return a + b;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers, squares each number and returns the sum of the squared numbers.",
        "input": "Example input: [2, 3, 4].\nThe function should square each number: [4, 9, 16].\nAnd return the sum: 29.",
        "response": "function sumSquares(arr) {\n  return arr.reduce((sum, num) => sum + num * num, 0);\n}",
        "output": "function sumSquares(arr) {\n  return arr.reduce((sum, num) => sum + num * num, 0);\n}"
    },
    {
        "instruction": "Modify the following Python code to catch exceptions raised during the execution.",
        "input": "x = 10\ny = 0\nresult = x / y",
        "response": "x = 10\ny = 0\ntry:\n    result = x / y\nexcept ZeroDivisionError:\n    print('Division by zero is not allowed.')\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')",
        "output": "x = 10\ny = 0\ntry:\n    result = x / y\nexcept ZeroDivisionError:\n    print('Division by zero is not allowed.')\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')"
    },
    {
        "instruction": "Implement a Java function to calculate the nth number in the Fibonacci sequence using recursion.",
        "input": "10",
        "response": "public class Fibonacci {\n\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n\n    public static void main(String[] args) {\n        int n = 10;\n        System.out.println(fibonacci(n));\n    }\n}",
        "output": "public class Fibonacci {\n\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n\n    public static void main(String[] args) {\n        int n = 10;\n        System.out.println(fibonacci(n));\n    }\n}"
    },
    {
        "instruction": "How can I write a JavaScript function to reverse a given string?",
        "input": "Hello, world!",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nlet inputStr = 'Hello, world!';\nlet reversedStr = reverseString(inputStr);\nconsole.log(reversedStr);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nlet inputStr = 'Hello, world!';\nlet reversedStr = reverseString(inputStr);\nconsole.log(reversedStr);"
    },
    {
        "instruction": "Create a C# function that accepts an integer array, sorts the array in ascending order, and returns the sorted array.",
        "input": "int[] arr = { 8, 2, 4, 9, 1, 5 };",
        "response": "using System;\n\npublic class ArraySorter {\n    public static int[] SortArray(int[] arr) {\n        Array.Sort(arr);\n        return arr;\n    }\n\n    public static void Main() {\n        int[] arr = { 8, 2, 4, 9, 1, 5 };\n        int[] sortedArr = SortArray(arr);\n\n        foreach (int num in sortedArr) {\n            Console.Write(num + \" \");\n        }\n    }\n}",
        "output": "using System;\n\npublic class ArraySorter {\n    public static int[] SortArray(int[] arr) {\n        Array.Sort(arr);\n        return arr;\n    }\n\n    public static void Main() {\n        int[] arr = { 8, 2, 4, 9, 1, 5 };\n        int[] sortedArr = SortArray(arr);\n\n        foreach (int num in sortedArr) {\n            Console.Write(num + \" \");\n        }\n    }\n}"
    },
    {
        "instruction": "Write a shell script that takes a directory path as a command-line argument and lists all files in that directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\ndir_path=$1\n\nif [ -d \"$dir_path\" ]; then\n    for file in \"$dir_path\"/*\n    do\n        if [ -f \"$file\" ]; then\n            echo \"$file\"\n        fi\n    done\nelse\n    echo \"Error: Directory not found.\"\nfi",
        "output": "#!/bin/bash\n\ndir_path=$1\n\nif [ -d \"$dir_path\" ]; then\n    for file in \"$dir_path\"/*\n    do\n        if [ -f \"$file\" ]; then\n            echo \"$file\"\n        fi\n    done\nelse\n    echo \"Error: Directory not found.\"\nfi"
    },
    {
        "instruction": "Develop a Python function that reads a CSV file and prints the sum of values in a specified column.",
        "input": "Filename: 'data.csv', Column: 'Sales'",
        "response": "import csv\n\ndef sum_column(filename, column):\n    with open(filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        total = 0\n        for row in reader:\n            total += float(row[column])\n    print(f'Sum of {column}: {total}')\n\nsum_column('data.csv', 'Sales')",
        "output": "import csv\n\ndef sum_column(filename, column):\n    with open(filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        total = 0\n        for row in reader:\n            total += float(row[column])\n    print(f'Sum of {column}: {total}')\n\nsum_column('data.csv', 'Sales')"
    },
    {
        "instruction": "Write a C++ function that takes two integers as input and returns their greatest common divisor (GCD).",
        "input": "12, 16",
        "response": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 12, num2 = 16;\n    std::cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 12, num2 = 16;\n    std::cout << \"GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Explain how to use the 'querySelector()' and 'querySelectorAll()' functions in JavaScript.",
        "input": "",
        "response": "In JavaScript, 'querySelector()' is used to select the first matched element of a given CSS selector, and 'querySelectorAll()' is used to select all matched elements of a given CSS selector.\n\nTo use 'querySelector()', you can call it on the document or any element, providing a CSS selector as its argument.\n\nExample:\nconst firstParagraph = document.querySelector('p');\n\nTo use 'querySelectorAll()', the syntax is similar to 'querySelector()' but it will return a NodeList of all matched elements.\n\nExample:\nconst allParagraphs = document.querySelectorAll('p');\n\nYou can iterate through the NodeList using a loop, like for...of, to perform actions on each element.\n\nExample:\nfor (const paragraph of allParagraphs) {\n    console.log(paragraph.textContent);\n}",
        "output": "In JavaScript, 'querySelector()' is used to select the first matched element of a given CSS selector, and 'querySelectorAll()' is used to select all matched elements of a given CSS selector.\n\nTo use 'querySelector()', you can call it on the document or any element, providing a CSS selector as its argument.\n\nExample:\nconst firstParagraph = document.querySelector('p');\n\nTo use 'querySelectorAll()', the syntax is similar to 'querySelector()' but it will return a NodeList of all matched elements.\n\nExample:\nconst allParagraphs = document.querySelectorAll('p');\n\nYou can iterate through the NodeList using a loop, like for...of, to perform actions on each element.\n\nExample:\nfor (const paragraph of allParagraphs) {\n    console.log(paragraph.textContent);\n}"
    },
    {
        "instruction": "Write a shell script that takes a directory path as an argument and prints the total number of files and directories within it.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\nDIRECTORY=\"$1\"\n\nif [ -d \"${DIRECTORY}\" ]; then\n    total_files=$(find \"${DIRECTORY}\" -type f | wc -l)\n    total_directories=$(find \"${DIRECTORY}\" -type d | wc -l)\n\n    echo \"Total files: ${total_files}\"\n    echo \"Total directories: ${total_directories}\"\nelse\n    echo \"Invalid directory path\"\nfi",
        "output": "#!/bin/bash\n\nDIRECTORY=\"$1\"\n\nif [ -d \"${DIRECTORY}\" ]; then\n    total_files=$(find \"${DIRECTORY}\" -type f | wc -l)\n    total_directories=$(find \"${DIRECTORY}\" -type d | wc -l)\n\n    echo \"Total files: ${total_files}\"\n    echo \"Total directories: ${total_directories}\"\nelse\n    echo \"Invalid directory path\"\nfi"
    },
    {
        "instruction": "Design a Python function to find the longest common prefix among a list of strings.",
        "input": "['daydream', 'daisy', 'dangerous']",
        "response": "def longest_common_prefix(words):\n    if not words: return ''\n    prefix = words[0]\n    for word in words:\n        i = 0\n        while i < len(prefix) and i < len(word) and prefix[i] == word[i]:\n            i += 1\n        prefix = prefix[:i]\n    return prefix\n\nresult = longest_common_prefix(['daydream', 'daisy', 'dangerous'])\nprint(result)",
        "output": "def longest_common_prefix(words):\n    if not words: return ''\n    prefix = words[0]\n    for word in words:\n        i = 0\n        while i < len(prefix) and i < len(word) and prefix[i] == word[i]:\n            i += 1\n        prefix = prefix[:i]\n    return prefix\n\nresult = longest_common_prefix(['daydream', 'daisy', 'dangerous'])\nprint(result)"
    },
    {
        "instruction": "In C++, implement a function that calculates Fibonacci numbers in a non-recursive manner.",
        "input": "int n = 5;",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n  int a = 0;\n  int b = 1;\n  int temp;\n\n  for (int i = 0; i < n; ++i) {\n    temp = a;\n    a = b;\n    b = temp + b;\n  }\n  return a;\n}\n\nint main() {\n  int n = 5;\n  std::cout << \"Fibonacci of \" << n << \" is \" << fibonacci(n) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n  int a = 0;\n  int b = 1;\n  int temp;\n\n  for (int i = 0; i < n; ++i) {\n    temp = a;\n    a = b;\n    b = temp + b;\n  }\n  return a;\n}\n\nint main() {\n  int n = 5;\n  std::cout << \"Fibonacci of \" << n << \" is \" << fibonacci(n) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Would you please code a shell script to generate a backup of a directory? Input a source directory and a destination directory.",
        "input": "Source Directory: /home/user/documents\nDestination Directory: /home/user/backup/docs_backup",
        "response": "#!/bin/bash\n\nsrc='/home/user/documents'\ndest='/home/user/backup/docs_backup'\n\ndir_name=$(basename \"$src\")\n\ncurrent_date=$(date '+%Y-%m-%d_%H-%M-%S')\nbackup_name=\"$dest/${dir_name}_${current_date}.tar.gz\"\n\ntar -czf \"$backup_name\" \"$src\"\n\necho \"Backup created at $backup_name\"",
        "output": "#!/bin/bash\n\nsrc='/home/user/documents'\ndest='/home/user/backup/docs_backup'\n\ndir_name=$(basename \"$src\")\n\ncurrent_date=$(date '+%Y-%m-%d_%H-%M-%S')\nbackup_name=\"$dest/${dir_name}_${current_date}.tar.gz\"\n\ntar -czf \"$backup_name\" \"$src\"\n\necho \"Backup created at $backup_name\""
    },
    {
        "instruction": "Can you write a Java method that checks if a string is a palindrome? Examine the given string.",
        "input": "String s = \"racecar\";",
        "response": "public class Main {\n\n  public static boolean isPalindrome(String s) {\n    int i = 0;\n    int j = s.length() - 1;\n    while (i < j) {\n      if (s.charAt(i) != s.charAt(j)) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    String s = \"racecar\";\n    System.out.println(\"Is '\" + s + \"' a palindrome? \" + isPalindrome(s));\n  }\n}",
        "output": "public class Main {\n\n  public static boolean isPalindrome(String s) {\n    int i = 0;\n    int j = s.length() - 1;\n    while (i < j) {\n      if (s.charAt(i) != s.charAt(j)) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    String s = \"racecar\";\n    System.out.println(\"Is '\" + s + \"' a palindrome? \" + isPalindrome(s));\n  }\n}"
    },
    {
        "instruction": "Write a Python function that takes a list of integers and returns the sum of all even numbers in the list.",
        "input": "",
        "response": "def sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)",
        "output": "def sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)"
    },
    {
        "instruction": "What is the expected output of the given JavaScript code fragment?",
        "input": "const array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\nconsole.log(array1.reduce(reducer));",
        "response": "The expected output of the given JavaScript code fragment is 10. The code takes the array 'array1' and applies the 'reduce()' method with the 'reducer' function, which adds up all the array elements and returns the sum.",
        "output": "The expected output of the given JavaScript code fragment is 10. The code takes the array 'array1' and applies the 'reduce()' method with the 'reducer' function, which adds up all the array elements and returns the sum."
    },
    {
        "instruction": "Translate the following Python code into equivalent Java code.",
        "input": "def count_vowels(s):\n    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n    return count",
        "response": "public static int countVowels(String s) {\n    int count = 0;\n    for (char c : s.toCharArray()) {\n        if (\"aeiou\".indexOf(Character.toLowerCase(c)) >= 0) {\n            count++;\n        }\n    }\n    return count;\n}",
        "output": "public static int countVowels(String s) {\n    int count = 0;\n    for (char c : s.toCharArray()) {\n        if (\"aeiou\".indexOf(Character.toLowerCase(c)) >= 0) {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "Create a C++ program that reads a text file and counts the number of characters, words, and lines.",
        "input": "",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    ifstream inFile(\"input.txt\");\n    int charCount = 0, wordCount = 0, lineCount = 0;\n    string line;\n\n    while (getline(inFile, line)) {\n        lineCount++;\n        wordCount += count(line.begin(), line.end(), ' ') + 1;\n        charCount += line.size();\n    }\n\n    cout << \"Number of characters: \" << charCount << endl;\n    cout << \"Number of words: \" << wordCount << endl;\n    cout << \"Number of lines: \" << lineCount << endl;\n\n    inFile.close();\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    ifstream inFile(\"input.txt\");\n    int charCount = 0, wordCount = 0, lineCount = 0;\n    string line;\n\n    while (getline(inFile, line)) {\n        lineCount++;\n        wordCount += count(line.begin(), line.end(), ' ') + 1;\n        charCount += line.size();\n    }\n\n    cout << \"Number of characters: \" << charCount << endl;\n    cout << \"Number of words: \" << wordCount << endl;\n    cout << \"Number of lines: \" << lineCount << endl;\n\n    inFile.close();\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a C++ program to count the number of vowels in a given string (ignoring case).",
        "input": "Sample string: \"Aardvark Express\"",
        "response": "#include <iostream>\n#include <cctype>\n\nint countVowels(const std::string &str) {\n    int vowels = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            vowels++;\n        }\n    }\n    return vowels;\n}\n\nint main() {\n    std::string input = \"Aardvark Express\";\n    int vowels = countVowels(input);\n    std::cout << \"Number of vowels: \" << vowels << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cctype>\n\nint countVowels(const std::string &str) {\n    int vowels = 0;\n    for (char c : str) {\n        c = std::tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            vowels++;\n        }\n    }\n    return vowels;\n}\n\nint main() {\n    std::string input = \"Aardvark Express\";\n    int vowels = countVowels(input);\n    std::cout << \"Number of vowels: \" << vowels << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that converts a Fahrenheit temperature to Celsius and returns the result.",
        "input": "Sample input: 212",
        "response": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius\n\ninput_temperature = 212\nresult = fahrenheit_to_celsius(input_temperature)\nprint(f' Celsius: {result}')",
        "output": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius\n\ninput_temperature = 212\nresult = fahrenheit_to_celsius(input_temperature)\nprint(f' Celsius: {result}')"
    },
    {
        "instruction": "How do you parse JSON data in Java using the Gson library? Give a code example.",
        "input": "Sample JSON: {\"name\":\"John\", \"age\":30, \"city\":\"New York\"}",
        "response": "import com.google.gson.Gson;\n\npublic class Person {\n    private String name;\n    private int age;\n    private String city;\n\n    // Getters and Setters\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String json = \"{\\\"name\\\":\\\"John\\\", \\\"age\\\":30, \\\"city\\\":\\\"New York\\\"}\";\n\n        Gson gson = new Gson();\n        Person person = gson.fromJson(json, Person.class);\n\n        System.out.println(\"Name: \" + person.getName());\n        System.out.println(\"Age: \" + person.getAge());\n        System.out.println(\"City: \" + person.getCity());\n    }\n}",
        "output": "import com.google.gson.Gson;\n\npublic class Person {\n    private String name;\n    private int age;\n    private String city;\n\n    // Getters and Setters\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        String json = \"{\\\"name\\\":\\\"John\\\", \\\"age\\\":30, \\\"city\\\":\\\"New York\\\"}\";\n\n        Gson gson = new Gson();\n        Person person = gson.fromJson(json, Person.class);\n\n        System.out.println(\"Name: \" + person.getName());\n        System.out.println(\"Age: \" + person.getAge());\n        System.out.println(\"City: \" + person.getCity());\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function to check if a given string is a palindrome, ignoring whitespace, punctuation, and capitalization (use only basic loops and conditions).",
        "input": "Sample input: \"A man a plan a canal Panama\"",
        "response": "function isPalindrome(str) {\n    let left = 0;\n    let right = str.length - 1;\n\n    while (left < right) {\n        while (left < right && !isLetter(str[left])) left++;\n        while (left < right && !isLetter(str[right])) right--;\n\n        if (str[left].toLowerCase() !== str[right].toLowerCase()) return false;\n        left++;\n        right--;\n    }\n    return true;\n\n    function isLetter(c) {\n        return c.toLowerCase() !== c.toUpperCase();\n    }\n}\n\nconst input = \"A man a plan a canal Panama\";\nconst result = isPalindrome(input);\nconsole.log(result);",
        "output": "function isPalindrome(str) {\n    let left = 0;\n    let right = str.length - 1;\n\n    while (left < right) {\n        while (left < right && !isLetter(str[left])) left++;\n        while (left < right && !isLetter(str[right])) right--;\n\n        if (str[left].toLowerCase() !== str[right].toLowerCase()) return false;\n        left++;\n        right--;\n    }\n    return true;\n\n    function isLetter(c) {\n        return c.toLowerCase() !== c.toUpperCase();\n    }\n}\n\nconst input = \"A man a plan a canal Panama\";\nconst result = isPalindrome(input);\nconsole.log(result);"
    },
    {
        "instruction": "Write a JavaScript function that sorts an array of integers in ascending order using the bubble sort algorithm.",
        "input": "[54, 23, 65, 42, 16]",
        "response": "function bubbleSort(arr) {\n  let len = arr.length;\n  let swapped;\n  do {\n    swapped = false;\n    for (let i = 0; i < len - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n        swapped = true;\n      }\n    }\n    len--;\n  } while (swapped);\n  return arr;\n}\n\nconsole.log(bubbleSort([54, 23, 65, 42, 16]));",
        "output": "function bubbleSort(arr) {\n  let len = arr.length;\n  let swapped;\n  do {\n    swapped = false;\n    for (let i = 0; i < len - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n        swapped = true;\n      }\n    }\n    len--;\n  } while (swapped);\n  return arr;\n}\n\nconsole.log(bubbleSort([54, 23, 65, 42, 16]));"
    },
    {
        "instruction": "Debug this Java code that's supposed to calculate the area of a circle given its radius.",
        "input": "public class AreaCalculator {\n\n  public static double calculateArea(double radius) {\n    double area = 3.14 * radius ** 2;\n    return area;\n  }\n\n  public static void main(String[] args) {\n    double radius = 5;\n    double area = calculateArea(radius);\n    System.out.println(\"The area of the circle is: \" + area);\n  }\n}",
        "response": "public class AreaCalculator {\n\n  public static double calculateArea(double radius) {\n    double area = Math.PI * Math.pow(radius, 2);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    double radius = 5;\n    double area = calculateArea(radius);\n    System.out.println(\"The area of the circle is: \" + area);\n  }\n}",
        "output": "public class AreaCalculator {\n\n  public static double calculateArea(double radius) {\n    double area = Math.PI * Math.pow(radius, 2);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    double radius = 5;\n    double area = calculateArea(radius);\n    System.out.println(\"The area of the circle is: \" + area);\n  }\n}"
    },
    {
        "instruction": "Implement a Python function that takes a list of numbers as input and returns the first duplicate number.",
        "input": "[2, 5, 9, 6, 3, 5, 1, 8]",
        "response": "def find_first_duplicate(numbers):\n    seen_numbers = set()\n    for num in numbers:\n        if num in seen_numbers:\n            return num\n        seen_numbers.add(num)\n    return None\n\nprint(find_first_duplicate([2, 5, 9, 6, 3, 5, 1, 8]))",
        "output": "def find_first_duplicate(numbers):\n    seen_numbers = set()\n    for num in numbers:\n        if num in seen_numbers:\n            return num\n        seen_numbers.add(num)\n    return None\n\nprint(find_first_duplicate([2, 5, 9, 6, 3, 5, 1, 8]))"
    },
    {
        "instruction": "Create a C++ function that takes a vector of integers and reverses its elements. Do not use the 'reverse' function provided by the standard library.",
        "input": "std::vector<int> numbers = {1, 2, 3, 4, 5};",
        "response": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n  int n = vec.size();\n  for(int i = 0; i < n / 2; ++i) {\n    std::swap(vec[i], vec[n - i - 1]);\n  }\n}\n\nint main() {\n  std::vector<int> numbers = {1, 2, 3, 4, 5};\n  reverse_vector(numbers);\n\n  for (int num : numbers) {\n    std::cout << num << ' ';\n  }\n  std::cout << '\\n';\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nvoid reverse_vector(std::vector<int>& vec) {\n  int n = vec.size();\n  for(int i = 0; i < n / 2; ++i) {\n    std::swap(vec[i], vec[n - i - 1]);\n  }\n}\n\nint main() {\n  std::vector<int> numbers = {1, 2, 3, 4, 5};\n  reverse_vector(numbers);\n\n  for (int num : numbers) {\n    std::cout << num << ' ';\n  }\n  std::cout << '\\n';\n\n  return 0;\n}"
    },
    {
        "instruction": "Create a Python function to calculate the area of a rectangle, given its length and width.",
        "input": "length = 8\nwidth = 4",
        "response": "def rectangle_area(length, width):\n    return length * width",
        "output": "def rectangle_area(length, width):\n    return length * width"
    },
    {
        "instruction": "What would be a simple Java code to check if a given number is odd or even?",
        "input": "int number = 7;",
        "response": "boolean isEven = number % 2 == 0;",
        "output": "boolean isEven = number % 2 == 0;"
    },
    {
        "instruction": "Rewrite this JavaScript function to use arrow function syntax: function squareRoot(number) { return Math.sqrt(number); }",
        "input": "",
        "response": "const squareRoot = (number) => Math.sqrt(number);",
        "output": "const squareRoot = (number) => Math.sqrt(number);"
    },
    {
        "instruction": "How can you write a C++ function to calculate the maximum element of an input vector?",
        "input": "#include <vector>\nstd::vector<int> input_vector = {3, 7, 5, 2};",
        "response": "int find_max(const std::vector<int>& input_vector) {\n  int max_element = input_vector[0];\n  for (int element : input_vector) {\n    if (element > max_element) {\n      max_element = element;\n    }\n  }\n  return max_element;\n}",
        "output": "int find_max(const std::vector<int>& input_vector) {\n  int max_element = input_vector[0];\n  for (int element : input_vector) {\n    if (element > max_element) {\n      max_element = element;\n    }\n  }\n  return max_element;\n}"
    },
    {
        "instruction": "Write a Java method that accepts a list of integers, reverses the order of its elements, and returns the sum of its elements.",
        "input": "Example List: [5, 8, 2, 3, 15]",
        "response": "public int reverseAndSum(List<Integer> list) {\n    Collections.reverse(list);\n    int sum = 0;\n    for (int num : list) {\n        sum += num;\n    }\n    return sum;\n}",
        "output": "public int reverseAndSum(List<Integer> list) {\n    Collections.reverse(list);\n    int sum = 0;\n    for (int num : list) {\n        sum += num;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Create a Python function to calculate the length of a diagonal of a rectangle, given its width and height.",
        "input": "Example width: 10\nExample height: 20",
        "response": "def calculate_diagonal(width, height):\n    import math\n    return math.sqrt(width**2 + height**2)",
        "output": "def calculate_diagonal(width, height):\n    import math\n    return math.sqrt(width**2 + height**2)"
    },
    {
        "instruction": "Convert the following C# code snippet to C++ for reading a text file line by line and output the total lines count.",
        "input": "using System;\nusing System.IO;\n\nint count = 0;\nusing (StreamReader sr = new StreamReader(\"file.txt\")) {\n    while (sr.ReadLine() != null) {\n        count++;\n    }\n}\n\nConsole.WriteLine(\"Total Lines: \" + count);",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"file.txt\");\n    int count = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        count++;\n    }\n    file.close();\n\n    std::cout << \"Total Lines: \" << count << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"file.txt\");\n    int count = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        count++;\n    }\n    file.close();\n\n    std::cout << \"Total Lines: \" << count << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a Bubble Sort algorithm in JavaScript and sort an array in descending order?",
        "input": "Example array: [5, 8, 2, 3, 15]",
        "response": "function bubbleSortDescending(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n            if (arr[j] < arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}",
        "output": "function bubbleSortDescending(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n            if (arr[j] < arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}"
    },
    {
        "instruction": "Write a Java method to convert Celsius to Fahrenheit. The method should accept a double value in Celsius and return the converted value in Fahrenheit.",
        "input": "double celsius = 37.0;",
        "response": "public double celsiusToFahrenheit(double celsius) {\n    return (celsius * 9 / 5) + 32;\n}",
        "output": "public double celsiusToFahrenheit(double celsius) {\n    return (celsius * 9 / 5) + 32;\n}"
    },
    {
        "instruction": "In JavaScript, create a function that takes an array of integers and returns the median value. If the array has an even number of elements, return the average of the middle two elements.",
        "input": "let numbers = [1, 3, 5, 7, 8];",
        "response": "function findMedian(numbers) {\n    numbers.sort((a, b) => a - b);\n    let middle = Math.floor(numbers.length / 2);\n\n    if (numbers.length % 2 === 0) {\n        return (numbers[middle - 1] + numbers[middle]) / 2;\n    } else {\n        return numbers[middle];\n    }\n}",
        "output": "function findMedian(numbers) {\n    numbers.sort((a, b) => a - b);\n    let middle = Math.floor(numbers.length / 2);\n\n    if (numbers.length % 2 === 0) {\n        return (numbers[middle - 1] + numbers[middle]) / 2;\n    } else {\n        return numbers[middle];\n    }\n}"
    },
    {
        "instruction": "Can you find the error in this Python code and provide the corrected version? The code is intended to print the square of each number from 1 to 10 using a for loop.",
        "input": "for i in range(1, 11):\nprint(i * i)",
        "response": "for i in range(1, 11):\n    print(i * i)",
        "output": "for i in range(1, 11):\n    print(i * i)"
    },
    {
        "instruction": "Show a C++ code snippet that initializes an integer vector with the elements 2, 4, 6, 8, and 10, and outputs the element at index 1.",
        "input": "",
        "response": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {2, 4, 6, 8, 10};\n    std::cout << numbers[1] << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {2, 4, 6, 8, 10};\n    std::cout << numbers[1] << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a function in JavaScript that takes an array of words and returns a random word from the array.",
        "input": "['apple', 'banana', 'cherry', 'date', 'fig', 'grape']",
        "response": "function getRandomWord(words) {\n  // Calculate a random index\n  const index = Math.floor(Math.random() * words.length);\n\n  // Return the word at the calculated index\n  return words[index];\n}\n\nconst words = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape'];\nconsole.log(getRandomWord(words));",
        "output": "function getRandomWord(words) {\n  // Calculate a random index\n  const index = Math.floor(Math.random() * words.length);\n\n  // Return the word at the calculated index\n  return words[index];\n}\n\nconst words = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape'];\nconsole.log(getRandomWord(words));"
    },
    {
        "instruction": "Given this Java code snippet, what will be the output after running it?",
        "input": "public class Main {\n  public static void main(String[] args) {\n    int a = 3;\n    int b = 2;\n    System.out.println(\"The result is: \" + a + b);\n  }\n}",
        "response": "The output will be: The result is: 32\n\nThis is because, in Java, the '+' operator is left associative and string concatenation takes precedence over addition. Since the string \"The result is: \" is on the left, it first concatenates with '3', resulting in \"The result is: 3\". Then, it concatenates with '2', leading to the final output \"The result is: 32\".",
        "output": "The output will be: The result is: 32\n\nThis is because, in Java, the '+' operator is left associative and string concatenation takes precedence over addition. Since the string \"The result is: \" is on the left, it first concatenates with '3', resulting in \"The result is: 3\". Then, it concatenates with '2', leading to the final output \"The result is: 32\"."
    },
    {
        "instruction": "Describe how to fix the following C++ code to correctly calculate and output the sum of two integers.",
        "input": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int a, b;\n  cout << \"Enter two integers: \";\n  cin >> a >> b;\n  cout << \"Sum: \" << a + b;\n  return 0;\n}",
        "response": "The provided C++ code is already correct. It correctly reads two integers from the user and outputs their sum on the screen. No changes are necessary.",
        "output": "The provided C++ code is already correct. It correctly reads two integers from the user and outputs their sum on the screen. No changes are necessary."
    },
    {
        "instruction": "Translate the following Python code snippet to C#: Define a function `is_even` that takes an integer as input and returns `True` if the integer is even, and `False` otherwise.",
        "input": "def is_even(number):\n  if number % 2 == 0:\n    return True\n  else:\n    return False",
        "response": "using System;\n\npublic class MainClass\n{\n    public static bool IsEven(int number)\n    {\n        if (number % 2 == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}",
        "output": "using System;\n\npublic class MainClass\n{\n    public static bool IsEven(int number)\n    {\n        if (number % 2 == 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript function to calculate the Fibonacci sequence up to the given number n.",
        "input": "",
        "response": "function fibonacciSequence(n) {\n  let sequence = [0, 1];\n  for (let i = 2; i < n; i++) {\n    sequence.push(sequence[i - 1] + sequence[i - 2]);\n  }\n  return sequence;\n}",
        "output": "function fibonacciSequence(n) {\n  let sequence = [0, 1];\n  for (let i = 2; i < n; i++) {\n    sequence.push(sequence[i - 1] + sequence[i - 2]);\n  }\n  return sequence;\n}"
    },
    {
        "instruction": "Design a simple RESTful API in Python using the Flask framework that takes a string as input and returns the string in uppercase.",
        "input": "",
        "response": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/uppercase', methods=['POST'])\ndef uppercase():\n    input_string = request.json.get('input_string', '')\n    return {'uppercase': input_string.upper()}\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/uppercase', methods=['POST'])\ndef uppercase():\n    input_string = request.json.get('input_string', '')\n    return {'uppercase': input_string.upper()}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Given a piece of C++ code, identify any syntax errors and correct them:",
        "input": "#include <iostream>\n\nint main()\n{\n    int number;\n    std::cout << \"Enter a number:\";\n    std::cin >> number\n\n    if(number % 2 = 0)\n    {\n        std::cout << number << \" is even.\"\n    }\n    else\n    {\n        std::cout << number << \" is odd.\"\n    }\n}\n",
        "response": "#include <iostream>\n\nint main()\n{\n    int number;\n    std::cout << \"Enter a number:\";\n    std::cin >> number;\n\n    if(number % 2 == 0)\n    {\n        std::cout << number << \" is even.\";\n    }\n    else\n    {\n        std::cout << number << \" is odd.\";\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main()\n{\n    int number;\n    std::cout << \"Enter a number:\";\n    std::cin >> number;\n\n    if(number % 2 == 0)\n    {\n        std::cout << number << \" is even.\";\n    }\n    else\n    {\n        std::cout << number << \" is odd.\";\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "How do I write a C# function to check if a given word is a palindrome, ignoring case and special characters?",
        "input": "",
        "response": "public static bool IsPalindrome(string input)\n{\n    char[] validChars = input.ToLower().Where(c => char.IsLetter(c)).ToArray();\n    input = new string(validChars);\n    string reversed = new string(validChars.Reverse().ToArray());\n\n    return input.Equals(reversed);\n}",
        "output": "public static bool IsPalindrome(string input)\n{\n    char[] validChars = input.ToLower().Where(c => char.IsLetter(c)).ToArray();\n    input = new string(validChars);\n    string reversed = new string(validChars.Reverse().ToArray());\n\n    return input.Equals(reversed);\n}"
    },
    {
        "instruction": "How would you rewrite this JavaScript code using modern syntax (arrow function) and explain your changes with code comments?",
        "input": "function square(x) {\n    return x * x;\n}",
        "response": "// using arrow function\nconst square = (x) => {\n    return x * x;\n};\n\n/* Arrow function is a more compact syntax for declaring functions.\n   The 'function' keyword is replaced with the fat arrow (=>).\n   In this case, we use the const keyword to declare the function as a constant to avoid accidental reassignment. */",
        "output": "// using arrow function\nconst square = (x) => {\n    return x * x;\n};\n\n/* Arrow function is a more compact syntax for declaring functions.\n   The 'function' keyword is replaced with the fat arrow (=>).\n   In this case, we use the const keyword to declare the function as a constant to avoid accidental reassignment. */"
    },
    {
        "instruction": "Design a Python function that calculates the nth Fibonacci number using recursion.",
        "input": "",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n/* The function uses recursion to calculate the nth Fibonacci number.\n   Base condition: If n is 0 or 1, return n.\n   Else, return the sum of the two previous Fibonacci numbers using recursive calls. */",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n/* The function uses recursion to calculate the nth Fibonacci number.\n   Base condition: If n is 0 or 1, return n.\n   Else, return the sum of the two previous Fibonacci numbers using recursive calls. */"
    },
    {
        "instruction": "Find and fix syntax errors in the given Python code, then comment on any changes you made.",
        "input": "class MathUtility:\n    def __init__(self):\n        self.p = 3.14\n    def area_of_circle(r):\n        return p * (r**2)",
        "response": "class MathUtility:\n    def __init__(self):\n        self.p = 3.14\n\n    # Added 'self' as the first parameter\n    def area_of_circle(self, r):\n        # Replaced 'p' with 'self.p'\n        return self.p * (r**2)\n\n/* Changes:\n   1. Added 'self' as the first parameter in the area_of_circle method.\n   2. Replaced 'p' with 'self.p' to correctly access the class attribute. */",
        "output": "class MathUtility:\n    def __init__(self):\n        self.p = 3.14\n\n    # Added 'self' as the first parameter\n    def area_of_circle(self, r):\n        # Replaced 'p' with 'self.p'\n        return self.p * (r**2)\n\n/* Changes:\n   1. Added 'self' as the first parameter in the area_of_circle method.\n   2. Replaced 'p' with 'self.p' to correctly access the class attribute. */"
    },
    {
        "instruction": "Translate the given C++ function into an equivalent function in the Python programming language.",
        "input": "#include <iostream>\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    std::cout << multiply(3, 4) << std::endl;\n}",
        "response": "def multiply(a, b):\n    return a * b\n\nprint(multiply(3, 4))\n\n/* Translated the C++ function into Python:\n   1. Removed the '#include' statement since it is not needed in Python.\n   2. Defined the 'multiply' function with a 'def' keyword.\n   3. Replaced 'std::cout' with a 'print' statement in Python. */",
        "output": "def multiply(a, b):\n    return a * b\n\nprint(multiply(3, 4))\n\n/* Translated the C++ function into Python:\n   1. Removed the '#include' statement since it is not needed in Python.\n   2. Defined the 'multiply' function with a 'def' keyword.\n   3. Replaced 'std::cout' with a 'print' statement in Python. */"
    },
    {
        "instruction": "Write a Python function to remove duplicate elements from a list without using the set datatype.",
        "input": "",
        "response": "def remove_duplicates(lst):\n    result = []\n    for item in lst:\n        if item not in result:\n            result.append(item)\n    return result",
        "output": "def remove_duplicates(lst):\n    result = []\n    for item in lst:\n        if item not in result:\n            result.append(item)\n    return result"
    },
    {
        "instruction": "Fix the missing closing bracket in the JavaScript function below.",
        "input": "function calculateArea(width, height) {\n    return width * height;\n",
        "response": "function calculateArea(width, height) {\n    return width * height;\n}",
        "output": "function calculateArea(width, height) {\n    return width * height;\n}"
    },
    {
        "instruction": "Create a Java implementation to compute a sum of all elements in an array.",
        "input": "",
        "response": "public class SumArray {\n    public static int sum(int[] array) {\n        int total = 0;\n        for (int i = 0; i < array.length; i++) {\n            total += array[i];\n        }\n        return total;\n    }\n}",
        "output": "public class SumArray {\n    public static int sum(int[] array) {\n        int total = 0;\n        for (int i = 0; i < array.length; i++) {\n            total += array[i];\n        }\n        return total;\n    }\n}"
    },
    {
        "instruction": "Write a Python function to check if a given number is a prime number.",
        "input": "13",
        "response": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\nnumber = 13\nresult = is_prime(number)\nprint(f'Is {number} a prime number? {result}')",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\nnumber = 13\nresult = is_prime(number)\nprint(f'Is {number} a prime number? {result}')"
    },
    {
        "instruction": "Explain the purpose of the following C++ code and discuss any potential issues.",
        "input": "#include <iostream>\nint main() {\n    int a = 12;\n    int b = 0;\n    int c = a / b;\n    std::cout << \"Result: \" << c << std::endl;\n    return 0;\n}",
        "response": "The given C++ code is a simple program that initializes two integer variables 'a' and 'b' with the values 12 and 0, respectively. It then calculates the result of 'a' divided by 'b', stores the result in another integer variable 'c', and prints the result to the console. The primary issue with this code is that it performs division by zero, which is undefined and can cause an exception or crash. To resolve this, add a conditional check for a non-zero divisor before performing the division.",
        "output": "The given C++ code is a simple program that initializes two integer variables 'a' and 'b' with the values 12 and 0, respectively. It then calculates the result of 'a' divided by 'b', stores the result in another integer variable 'c', and prints the result to the console. The primary issue with this code is that it performs division by zero, which is undefined and can cause an exception or crash. To resolve this, add a conditional check for a non-zero divisor before performing the division."
    },
    {
        "instruction": "Translate the following Python code snippet to its equivalent in JavaScript.",
        "input": "numList = [1, 2, 3]\nprint(sum(numList))",
        "response": "const numList = [1, 2, 3];\nconst sum = numList.reduce((a, b) => a + b, 0);\nconsole.log(sum);",
        "output": "const numList = [1, 2, 3];\nconst sum = numList.reduce((a, b) => a + b, 0);\nconsole.log(sum);"
    },
    {
        "instruction": "Implement a recursive Fibonacci function in C, that takes an integer as input and returns the corresponding Fibonacci number.",
        "input": "10",
        "response": "#include <stdio.h>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return (fibonacci(n - 1)) + (fibonacci(n - 2));\n    }\n}\n\nint main() {\n    int n = 10;\n    int result = fibonacci(n);\n    printf(\"Fibonacci number %d: %d\\n\", n, result);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return (fibonacci(n - 1)) + (fibonacci(n - 2));\n    }\n}\n\nint main() {\n    int n = 10;\n    int result = fibonacci(n);\n    printf(\"Fibonacci number %d: %d\\n\", n, result);\n    return 0;\n}"
    },
    {
        "instruction": "Describe how to find the maximum value in an array using Python.",
        "input": "[42, 33, -12, 67, 29]",
        "response": "You can use the built-in function 'max' to find the maximum value in an array. Here's a code snippet:\n\narray = [42, 33, -12, 67, 29]\nmax_value = max(array)\nprint(max_value)\n\nIn this case, the output would be 67.",
        "output": "You can use the built-in function 'max' to find the maximum value in an array. Here's a code snippet:\n\narray = [42, 33, -12, 67, 29]\nmax_value = max(array)\nprint(max_value)\n\nIn this case, the output would be 67."
    },
    {
        "instruction": "Create a C++ code that calculates the sum of even numbers from 1 to n inclusive, where n is a user-given integer.",
        "input": "10",
        "response": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n    std::cout << \"Enter an integer: \";\n    std::cin >> n;\n\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n\n    std::cout << \"Sum of even numbers from 1 to \" << n << \" is: \" << sum << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n    std::cout << \"Enter an integer: \";\n    std::cin >> n;\n\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n\n    std::cout << \"Sum of even numbers from 1 to \" << n << \" is: \" << sum << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "What would be a one-liner code in Ruby to create an array containing the squares of numbers from 1 to 10?",
        "input": "",
        "response": "squares = (1..10).map { |n| n ** 2 }",
        "output": "squares = (1..10).map { |n| n ** 2 }"
    },
    {
        "instruction": "Fix the following Java code to properly initialize a 2D array called 'matrix' with dimensions 3x3 and fill it with zeros.",
        "input": "int[][] matrix;\n\nfor (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n        matrix[i][j] = 0;\n    }\n}",
        "response": "int[][] matrix = new int[3][3];\n\nfor (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n        matrix[i][j] = 0;\n    }\n}",
        "output": "int[][] matrix = new int[3][3];\n\nfor (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n        matrix[i][j] = 0;\n    }\n}"
    },
    {
        "instruction": "Develop a Python function that accepts a list of strings and an index, and returns the string at the provided index with all vowels removed.",
        "input": "['apple', 'banana', 'orange'], 1",
        "response": "def remove_vowels(strings, index):\n    vowels = 'aeiouAEIOU'\n    result = ''.join([c for c in strings[index] if c not in vowels])\n    return result\n\nstring_list = ['apple', 'banana', 'orange']\nfiltered_string = remove_vowels(string_list, 1)\nprint(filtered_string)",
        "output": "def remove_vowels(strings, index):\n    vowels = 'aeiouAEIOU'\n    result = ''.join([c for c in strings[index] if c not in vowels])\n    return result\n\nstring_list = ['apple', 'banana', 'orange']\nfiltered_string = remove_vowels(string_list, 1)\nprint(filtered_string)"
    },
    {
        "instruction": "Write a simple Java class that calculates the area and circumference of a circle, given its radius.",
        "input": "5",
        "response": "public class Circle {\n    private final double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double getArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public double getCircumference() {\n        return 2 * Math.PI * radius;\n    }\n\n    public static void main(String[] args) {\n        Circle circle = new Circle(5);\n        System.out.println(\"Area: \" + circle.getArea());\n        System.out.println(\"Circumference: \" + circle.getCircumference());\n    }\n}",
        "output": "public class Circle {\n    private final double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double getArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public double getCircumference() {\n        return 2 * Math.PI * radius;\n    }\n\n    public static void main(String[] args) {\n        Circle circle = new Circle(5);\n        System.out.println(\"Area: \" + circle.getArea());\n        System.out.println(\"Circumference: \" + circle.getCircumference());\n    }\n}"
    },
    {
        "instruction": "In C++, implement a function that accepts a vector of integers and finds the two numbers with the smallest product. Return these numbers as a pair.",
        "input": "{2, 5, 3, 8, -4, 9, -1}",
        "response": "#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\npair<int, int> find_min_product(vector<int> &nums) {\n    sort(nums.begin(), nums.end());\n    return make_pair(nums[0], nums[1]);\n}\n\nint main() {\n    vector<int> nums = {2, 5, 3, 8, -4, 9, -1};\n    pair<int, int> min_product = find_min_product(nums);\n    cout << \"Numbers with smallest product: \" << min_product.first << \", \" << min_product.second << endl;\n    return 0;\n}",
        "output": "#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\npair<int, int> find_min_product(vector<int> &nums) {\n    sort(nums.begin(), nums.end());\n    return make_pair(nums[0], nums[1]);\n}\n\nint main() {\n    vector<int> nums = {2, 5, 3, 8, -4, 9, -1};\n    pair<int, int> min_product = find_min_product(nums);\n    cout << \"Numbers with smallest product: \" << min_product.first << \", \" << min_product.second << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Can you create a shell script that counts the number of files in a directory, excluding hidden files?",
        "input": "",
        "response": "#!/bin/bash\n\nCOUNT=$(find . -maxdepth 1 -type f -not -name '.*' | wc -l)\necho \"Number of files in the current directory (excluding hidden files): $COUNT\"",
        "output": "#!/bin/bash\n\nCOUNT=$(find . -maxdepth 1 -type f -not -name '.*' | wc -l)\necho \"Number of files in the current directory (excluding hidden files): $COUNT\""
    },
    {
        "instruction": "Implement a Python function that counts the number of words in a given text file.",
        "input": "file.txt: 'Once upon a time, there lived a wise old man and a cunning fox. The wise old man lived near a small river and the cunning fox lived deep in the forest.'",
        "response": "def count_words(file_path):\n    with open(file_path, 'r') as file:\n        text = file.read()\n        words = text.split()\n        return len(words)\n\nfile_path = 'file.txt'\nprint(count_words(file_path))",
        "output": "def count_words(file_path):\n    with open(file_path, 'r') as file:\n        text = file.read()\n        words = text.split()\n        return len(words)\n\nfile_path = 'file.txt'\nprint(count_words(file_path))"
    },
    {
        "instruction": "Find and correct the syntax error in the following Java code snippet for calculating the square of a number.\n\npublic class Main {\n    public static void main(String[] args) {\n        int number = 5;\n        int square = number *n\n        System.out.println('The square of the number is: ' + square);\n    }\n}",
        "input": "",
        "response": "public class Main {\n    public static void main(String[] args) {\n        int number = 5;\n        int square = number * number;\n        System.out.println('The square of the number is: ' + square);\n    }\n}",
        "output": "public class Main {\n    public static void main(String[] args) {\n        int number = 5;\n        int square = number * number;\n        System.out.println('The square of the number is: ' + square);\n    }\n}"
    },
    {
        "instruction": "Create a C++ function that receives a string as input and returns the string reversed.",
        "input": "string to reverse: 'Hello, World!'",
        "response": "#include<iostream>\n#include<string>\n\nstd::string reverse_string(std::string input) {\n    int n = input.length();\n    for(int i = 0; i < n / 2; i++) {\n        std::swap(input[i], input[n - i - 1]);\n    }\n    return input;\n}\n\nint main() {\n    std::string input = 'Hello, World!';\n    std::string reversed = reverse_string(input);\n    std::cout << reversed << std::endl;\n    return 0;\n}",
        "output": "#include<iostream>\n#include<string>\n\nstd::string reverse_string(std::string input) {\n    int n = input.length();\n    for(int i = 0; i < n / 2; i++) {\n        std::swap(input[i], input[n - i - 1]);\n    }\n    return input;\n}\n\nint main() {\n    std::string input = 'Hello, World!';\n    std::string reversed = reverse_string(input);\n    std::cout << reversed << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Explain how to import and use the 'moment' library in a JavaScript project to display the current date and time.",
        "input": "moment library: https://momentjs.com/",
        "response": "1. First, you need to install the 'moment' library using NPM (Node.js Package Manager):\n   `npm install moment`\n\n2. Next, in your JavaScript file, import the 'moment' library:\n   `const moment = require('moment');`\n\n3. Now, you can use the 'moment' library to get the current date and time:\n   `console.log(moment().format());`\n\n   The `format()` function can be used to display the date and time in various formats, but without any parameters, it will use the ISO 8601 format. You can find more formatting options in the 'moment' library documentation: https://momentjs.com/docs/#/displaying/",
        "output": "1. First, you need to install the 'moment' library using NPM (Node.js Package Manager):\n   `npm install moment`\n\n2. Next, in your JavaScript file, import the 'moment' library:\n   `const moment = require('moment');`\n\n3. Now, you can use the 'moment' library to get the current date and time:\n   `console.log(moment().format());`\n\n   The `format()` function can be used to display the date and time in various formats, but without any parameters, it will use the ISO 8601 format. You can find more formatting options in the 'moment' library documentation: https://momentjs.com/docs/#/displaying/"
    },
    {
        "instruction": "Create a Python function called 'is_prime' that takes an integer as input and returns True if the integer is prime, otherwise returns False.",
        "input": "13",
        "response": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ninput_number = 13\nresult = is_prime(input_number)\nprint(result)",
        "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ninput_number = 13\nresult = is_prime(input_number)\nprint(result)"
    },
    {
        "instruction": "Write a C++ program to find the length of a given string without using the strlen function.",
        "input": "Hello, world!",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    char input_str[] = \"Hello, world!\";\n    int length = 0;\n    for(int i = 0; input_str[i] != '\\0'; i++) {\n        length++;\n    }\n    cout << \"The length of the string is: \" << length << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    char input_str[] = \"Hello, world!\";\n    int length = 0;\n    for(int i = 0; input_str[i] != '\\0'; i++) {\n        length++;\n    }\n    cout << \"The length of the string is: \" << length << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a simple math parser in JavaScript which takes a string containing an arithmetic expression and returns the result of the operation.",
        "input": "4 * (2 + 2)",
        "response": "function parseMathExpression(expression) {\n    try {\n        return eval(expression);\n    } catch (error) {\n        throw new Error('Invalid arithmetic expression');\n    }\n}\n\nconst result = parseMathExpression('4 * (2 + 2)');\nconsole.log(result);",
        "output": "function parseMathExpression(expression) {\n    try {\n        return eval(expression);\n    } catch (error) {\n        throw new Error('Invalid arithmetic expression');\n    }\n}\n\nconst result = parseMathExpression('4 * (2 + 2)');\nconsole.log(result);"
    },
    {
        "instruction": "Construct a shell script to collect running processes and their memory usage in a tabular format. Save the result into a text file named 'proc_mem_usage.txt'.",
        "input": "",
        "response": "#!/bin/bash\n\nps axo pid,user,%mem,command --sort=-%mem | head -n 15 > proc_mem_usage.txt",
        "output": "#!/bin/bash\n\nps axo pid,user,%mem,command --sort=-%mem | head -n 15 > proc_mem_usage.txt"
    },
    {
        "instruction": "Implement a JavaScript function that calculates the factorial of a given non-negative integer.",
        "input": "6",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(6));",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(6));"
    },
    {
        "instruction": "How would you create a Java program to reverse the words in a sentence?",
        "input": "This is a sample sentence",
        "response": "public class ReverseWords {\n    public static void main(String[] args) {\n        String input = \"This is a sample sentence\";\n        String output = reverseWords(input);\n        System.out.println(output);\n    }\n\n    public static String reverseWords(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder reversed = new StringBuilder();\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed.append(words[i]);\n            reversed.append(\" \");\n        }\n        return reversed.toString().trim();\n    }\n}",
        "output": "public class ReverseWords {\n    public static void main(String[] args) {\n        String input = \"This is a sample sentence\";\n        String output = reverseWords(input);\n        System.out.println(output);\n    }\n\n    public static String reverseWords(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder reversed = new StringBuilder();\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed.append(words[i]);\n            reversed.append(\" \");\n        }\n        return reversed.toString().trim();\n    }\n}"
    },
    {
        "instruction": "Design a C++ program to determine if a linked list has a cycle.",
        "input": "head node pointer",
        "response": "#include <iostream>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nbool hasCycle(ListNode* head) {\n    if (head == NULL || head->next == NULL) {\n        return false;\n    }\n    ListNode* slow = head;\n    ListNode* fast = head->next;\n    while (fast != slow) {\n        if (fast == NULL || fast->next == NULL) {\n            return false;\n        }\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    return true;\n}\n\nint main() {\n    // Test the function with a linked list\n    ListNode* head = new ListNode(1);\n    head->next = new ListNode(2);\n    head->next->next = new ListNode(3);\n    head->next->next->next = head->next;\n\n    cout << (hasCycle(head) ? \"Cycle detected\" : \"No cycle\") << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nbool hasCycle(ListNode* head) {\n    if (head == NULL || head->next == NULL) {\n        return false;\n    }\n    ListNode* slow = head;\n    ListNode* fast = head->next;\n    while (fast != slow) {\n        if (fast == NULL || fast->next == NULL) {\n            return false;\n        }\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    return true;\n}\n\nint main() {\n    // Test the function with a linked list\n    ListNode* head = new ListNode(1);\n    head->next = new ListNode(2);\n    head->next->next = new ListNode(3);\n    head->next->next->next = head->next;\n\n    cout << (hasCycle(head) ? \"Cycle detected\" : \"No cycle\") << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Craft a shell script that counts the number of files and directories in a given directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ninput_dir=\"/path/to/directory\"\n\nnum_files=$(find \"$input_dir\" -type f | wc -l)\nnum_dirs=$(find \"$input_dir\" -type d | wc -l)\n\necho \"Files: $num_files\"\necho \"Directories: $num_dirs\"",
        "output": "#!/bin/bash\n\ninput_dir=\"/path/to/directory\"\n\nnum_files=$(find \"$input_dir\" -type f | wc -l)\nnum_dirs=$(find \"$input_dir\" -type d | wc -l)\n\necho \"Files: $num_files\"\necho \"Directories: $num_dirs\""
    },
    {
        "instruction": "Create a JavaScript function that returns an array of prime numbers up to a given limit.",
        "input": "",
        "response": "function findPrimes(limit) {\n  const primes = [];\n  for (let i = 2; i <= limit; i++) {\n    let isPrime = true;\n    for (const p of primes) {\n      if (i % p === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}",
        "output": "function findPrimes(limit) {\n  const primes = [];\n  for (let i = 2; i <= limit; i++) {\n    let isPrime = true;\n    for (const p of primes) {\n      if (i % p === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}"
    },
    {
        "instruction": "Identify and correct any syntax errors present in the given Java code.",
        "input": "public class Main {\n public stati void main(String[] args) {\n  System.out.println('Hello, World!');\n %\n}",
        "response": "public class Main {\n public static void main(String[] args) {\n  System.out.println(\"Hello, World!\");\n }\n}",
        "output": "public class Main {\n public static void main(String[] args) {\n  System.out.println(\"Hello, World!\");\n }\n}"
    },
    {
        "instruction": "What would be an example of using the pandas library in Python to read a CSV file and display the first 5 rows of data?",
        "input": "",
        "response": "import pandas as pd\n\ndata = pd.read_csv('example.csv')\nprint(data.head(5))",
        "output": "import pandas as pd\n\ndata = pd.read_csv('example.csv')\nprint(data.head(5))"
    },
    {
        "instruction": "Write a C++ program that calculates the area of a circle given its radius. Use the value of PI as 3.14159.",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n  const double PI = 3.14159;\n  double radius, area;\n  std::cout << \"Enter the radius of the circle: \";\n  std::cin >> radius;\n  area = PI * radius * radius;\n  std::cout << \"Area of the circle: \" << area << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n  const double PI = 3.14159;\n  double radius, area;\n  std::cout << \"Enter the radius of the circle: \";\n  std::cin >> radius;\n  area = PI * radius * radius;\n  std::cout << \"Area of the circle: \" << area << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Create a Java function that accepts an array of strings and returns the longest common prefix of the strings.",
        "input": "String[] words = {\"flower\",\"flow\",\"float\"};",
        "response": "public static String longestCommonPrefix(String[] strs) {\n    if (strs == null || strs.length == 0) {\n        return \"\";\n    }\n    String prefix = strs[0];\n    for (int i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) {\n                return \"\";\n            }\n        }\n    }\n    return prefix;\n}",
        "output": "public static String longestCommonPrefix(String[] strs) {\n    if (strs == null || strs.length == 0) {\n        return \"\";\n    }\n    String prefix = strs[0];\n    for (int i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) {\n                return \"\";\n            }\n        }\n    }\n    return prefix;\n}"
    },
    {
        "instruction": "Can you provide a C++ program that calculates the nth Fibonacci number using recursion?",
        "input": "int n = 5;",
        "response": "#include<iostream>\nusing namespace std;\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 5;\n    cout << \"Fibonacci number at position \" << n << \" is \" << fibonacci(n) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 5;\n    cout << \"Fibonacci number at position \" << n << \" is \" << fibonacci(n) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Python function to determine if a given integer is a prime number.",
        "input": "int number = 11;",
        "response": "def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True",
        "output": "def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True"
    },
    {
        "instruction": "Write a JavaScript function to calculate the factorial of a given positive integer.",
        "input": "var n = 5;",
        "response": "function factorial(n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Create a Python function that takes a list of strings and counts the frequency of each unique word, returning a dictionary with the word-frequency pairs.",
        "input": "['apple', 'banana', 'apple', 'orange', 'banana', 'apple']",
        "response": "def count_words(words_list):\n    frequency_dict = {}\n    for word in words_list:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n    return frequency_dict",
        "output": "def count_words(words_list):\n    frequency_dict = {}\n    for word in words_list:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n    return frequency_dict"
    },
    {
        "instruction": "What changes need to be applied to the given Java code snippet so that the user can enter their name and display a greeting message with their name?",
        "input": "public class HelloName {\n    public static void main(String[] args) {\n        System.out.println('Hello, Name!');\n    }\n}",
        "response": "You need to import the java.util.Scanner package and create a Scanner object for reading user input. Then replace the 'Name' placeholder with the user-entered name. The updated code:\n\nimport java.util.Scanner;\n\npublic class HelloName {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print('Enter your name: ');\n        String name = scanner.nextLine();\n        System.out.println('Hello, ' + name + '!');\n    }\n}",
        "output": "You need to import the java.util.Scanner package and create a Scanner object for reading user input. Then replace the 'Name' placeholder with the user-entered name. The updated code:\n\nimport java.util.Scanner;\n\npublic class HelloName {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print('Enter your name: ');\n        String name = scanner.nextLine();\n        System.out.println('Hello, ' + name + '!');\n    }\n}"
    },
    {
        "instruction": "Given a JavaScript code snippet, write a function that accepts a string and capitalizes the first letter of each word in it.",
        "input": "const str = 'hello world';",
        "response": "function capitalizeWords(inputStr) {\n    return inputStr.replace(/\\b\\w/g, char => char.toUpperCase());\n}\n\nconst str = 'hello world';\nconsole.log(capitalizeWords(str));",
        "output": "function capitalizeWords(inputStr) {\n    return inputStr.replace(/\\b\\w/g, char => char.toUpperCase());\n}\n\nconst str = 'hello world';\nconsole.log(capitalizeWords(str));"
    },
    {
        "instruction": "Rewrite the provided C++ code to use a range-based for loop instead of a traditional for loop.",
        "input": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    for (size_t i = 0; i < vec.size(); i++) {\n        std::cout << vec[i] << ' ';\n    }\n    return 0;\n}",
        "response": "To use a range-based for loop, replace the traditional for loop with the range-based version. The updated code:\n\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    for (const auto &value : vec) {\n        std::cout << value << ' ';\n    }\n    return 0;\n}",
        "output": "To use a range-based for loop, replace the traditional for loop with the range-based version. The updated code:\n\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    for (const auto &value : vec) {\n        std::cout << value << ' ';\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Java class that represents a simple bank account with methods for depositing, withdrawing, and checking the account balance.",
        "input": "",
        "response": "public class BankAccount {\n\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (amount <= balance) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n}",
        "output": "public class BankAccount {\n\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (amount <= balance) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n}"
    },
    {
        "instruction": "How would you write a JavaScript function that converts a temperature in Celsius to Fahrenheit?",
        "input": "",
        "response": "function celsiusToFahrenheit(celsius) {\n    return (celsius * 9/5) + 32;\n}",
        "output": "function celsiusToFahrenheit(celsius) {\n    return (celsius * 9/5) + 32;\n}"
    },
    {
        "instruction": "Create a Python script that extracts email addresses from text files in a specific directory and stores them in a set.",
        "input": "directory_path = '/Users/johndoe/text_files'",
        "response": "import os\nimport re\n\ndef extract_emails(directory_path):\n    email_set = set()\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.txt'):\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                content = file.read()\n                emails = re.findall(r'[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,4}', content)\n                email_set.update(emails)\n    return email_set\n\nif __name__ == '__main__':\n    directory_path = '/Users/johndoe/text_files'\n    print(extract_emails(directory_path))",
        "output": "import os\nimport re\n\ndef extract_emails(directory_path):\n    email_set = set()\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.txt'):\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                content = file.read()\n                emails = re.findall(r'[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,4}', content)\n                email_set.update(emails)\n    return email_set\n\nif __name__ == '__main__':\n    directory_path = '/Users/johndoe/text_files'\n    print(extract_emails(directory_path))"
    },
    {
        "instruction": "Create a Java program that calculates and outputs the area of a rectangle. The user will input the length and width.",
        "input": "",
        "response": "import java.util.Scanner;\npublic class RectangleArea {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter length: \");\n        double length = sc.nextDouble();\n        System.out.print(\"Enter width: \");\n        double width = sc.nextDouble();\n        double area = length * width;\n        System.out.println(\"The area of the rectangle is: \" + area);\n    }\n}",
        "output": "import java.util.Scanner;\npublic class RectangleArea {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter length: \");\n        double length = sc.nextDouble();\n        System.out.print(\"Enter width: \");\n        double width = sc.nextDouble();\n        double area = length * width;\n        System.out.println(\"The area of the rectangle is: \" + area);\n    }\n}"
    },
    {
        "instruction": "What is the output of the following Python code snippet?",
        "input": "x = 9\ny = 2\nz = x % y\nprint(z)",
        "response": "1",
        "output": "1"
    },
    {
        "instruction": "Write a C++ function to calculate the sum of all integers from 1 to a given number 'n'.",
        "input": "",
        "response": "#include <iostream>\nint sum_upto_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}",
        "output": "#include <iostream>\nint sum_upto_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Given a JavaScript string of whitespace-separated words, write a function that counts the number of words in the string.",
        "input": "",
        "response": "function countWords(str) {\n    const words = str.trim().split(/\\s+/);\n    return words.length;\n}",
        "output": "function countWords(str) {\n    const words = str.trim().split(/\\s+/);\n    return words.length;\n}"
    },
    {
        "instruction": "Write a Python function that computes the Levenshtein distance between two strings.",
        "input": "string1: 'kitten', string2: 'sitting'",
        "response": "def levenshtein_distance(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein_distance(s2, s1)\n\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n\n        previous_row = current_row\n\n    return previous_row[-1]",
        "output": "def levenshtein_distance(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein_distance(s2, s1)\n\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n\n        previous_row = current_row\n\n    return previous_row[-1]"
    },
    {
        "instruction": "Create a Java method that takes a string input and outputs the string in reverse order.",
        "input": "string_input: 'Hello, World!'",
        "response": "public String reverseString(String s) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = s.length() - 1; i >= 0; i--) {\n        reversed.append(s.charAt(i));\n    }\n    return reversed.toString();\n}",
        "output": "public String reverseString(String s) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = s.length() - 1; i >= 0; i--) {\n        reversed.append(s.charAt(i));\n    }\n    return reversed.toString();\n}"
    },
    {
        "instruction": "Write a C++ program to find the sum of an array of integers using pointers.",
        "input": "array: [3, 1, 5, 7, 9], array_length: 5",
        "response": "#include <iostream>\nusing namespace std;\n\nint array_sum(int *arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += *(arr + i);\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {3, 1, 5, 7, 9};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int result = array_sum(arr, n);\n    cout << 'Sum: ' << result << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint array_sum(int *arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += *(arr + i);\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {3, 1, 5, 7, 9};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int result = array_sum(arr, n);\n    cout << 'Sum: ' << result << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function that identifies if a given string is a palindrome.",
        "input": "String: racecar",
        "response": "def is_palindrome(s):\n    return s == s[::-1]\n\nstring = 'racecar'\nprint(is_palindrome(string))  # Output: True",
        "output": "def is_palindrome(s):\n    return s == s[::-1]\n\nstring = 'racecar'\nprint(is_palindrome(string))  # Output: True"
    },
    {
        "instruction": "Translate the following JavaScript code to a C++ code snippet:",
        "input": "function sum(a, b) {\n  return a + b;\n}\n\nconsole.log(sum(5, 3));",
        "response": "#include<iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    std::cout << sum(5, 3) << std::endl;\n    return 0;\n}",
        "output": "#include<iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    std::cout << sum(5, 3) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "In a SQL query, calculate the average salary of employees in the 'employees' table with experience greater than 5 years.",
        "input": "",
        "response": "SELECT AVG(salary) FROM employees WHERE experience > 5;",
        "output": "SELECT AVG(salary) FROM employees WHERE experience > 5;"
    },
    {
        "instruction": "Debug the following C# code that should reverse a given string:",
        "input": "public string ReverseString(string s)\n{\n    char[] charArray = s.ToCharArray();\n    Array.Reverse(charArray);\n    return charArray.ToString();\n}",
        "response": "public string ReverseString(string s)\n{\n    char[] charArray = s.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n}",
        "output": "public string ReverseString(string s)\n{\n    char[] charArray = s.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n}"
    },
    {
        "instruction": "Create a JavaScript function that returns the factorial of a given number.",
        "input": "",
        "response": "function factorial(n) {\n  if(n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n  if(n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "What is the behavior of the following Java code? Explain the code.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\".replaceAll(\"World\", \"GPT-3\"));\n    }\n}",
        "response": "This Java code prints 'Hello, GPT-3!' to the console. It first replaces the word 'World' with 'GPT-3' in the string 'Hello, World!' using the replaceAll method, and then prints the modified string.",
        "output": "This Java code prints 'Hello, GPT-3!' to the console. It first replaces the word 'World' with 'GPT-3' in the string 'Hello, World!' using the replaceAll method, and then prints the modified string."
    },
    {
        "instruction": "Find and fix the error in the following Python code.",
        "input": "def power(base, exponent):\n    if exponent == 0:\n        return 0\n    else:\n        return base * power(base, exponent-1)",
        "response": "def power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * power(base, exponent-1)",
        "output": "def power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * power(base, exponent-1)"
    },
    {
        "instruction": "Implement a bash shell script that calculates the sum of all the integers from 1 to a given number N.",
        "input": "",
        "response": "#!/bin/bash\n\nN=$1\nsum=0\n\nfor i in $(seq 1 $N); do\n  sum=$((sum + i))\ndone\n\necho $sum",
        "output": "#!/bin/bash\n\nN=$1\nsum=0\n\nfor i in $(seq 1 $N); do\n  sum=$((sum + i))\ndone\n\necho $sum"
    },
    {
        "instruction": "Write a Python function to calculate the nth Fibonacci number using recursion.",
        "input": "9",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 9\nprint(fibonacci(n))",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 9\nprint(fibonacci(n))"
    },
    {
        "instruction": "Design a JavaScript function that takes an array of integers and returns the maximum element.",
        "input": "[12, 3, 45, 6, 9]",
        "response": "function findMax(arr) {\n    let max = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\nlet nums = [12, 3, 45, 6, 9];\nconsole.log(findMax(nums));",
        "output": "function findMax(arr) {\n    let max = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\nlet nums = [12, 3, 45, 6, 9];\nconsole.log(findMax(nums));"
    },
    {
        "instruction": "What code should I write in C to find out whether the given number is odd or even?",
        "input": "283",
        "response": "#include <stdio.h>\n\nint main() {\n    int num = 283;\n\n    if (num % 2 == 0) {\n        printf(\"%d is even\", num);\n    } else {\n        printf(\"%d is odd\", num);\n    }\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    int num = 283;\n\n    if (num % 2 == 0) {\n        printf(\"%d is even\", num);\n    } else {\n        printf(\"%d is odd\", num);\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java function that accepts a string and calculates the count of digits and letters. Display the counts.",
        "input": "abc123",
        "response": "public class CountDigitsAndLetters {\n    public static void count(String input) {\n        int digits = 0, letters = 0;\n\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (Character.isDigit(c)) {\n                digits++;\n            } else if (Character.isLetter(c)) {\n                letters++;\n            }\n        }\n\n        System.out.println(\"Digits: \" + digits);\n        System.out.println(\"Letters: \" + letters);\n    }\n\n    public static void main(String[] args) {\n        String input = \"abc123\";\n        count(input);\n    }\n}",
        "output": "public class CountDigitsAndLetters {\n    public static void count(String input) {\n        int digits = 0, letters = 0;\n\n        for (int i = 0; i < input.length(); i++) {\n            char c = input.charAt(i);\n            if (Character.isDigit(c)) {\n                digits++;\n            } else if (Character.isLetter(c)) {\n                letters++;\n            }\n        }\n\n        System.out.println(\"Digits: \" + digits);\n        System.out.println(\"Letters: \" + letters);\n    }\n\n    public static void main(String[] args) {\n        String input = \"abc123\";\n        count(input);\n    }\n}"
    },
    {
        "instruction": "Create a simple C++ program that calculates the area of a circle, given its radius.",
        "input": "",
        "response": "#include <iostream>\n#include <cmath>\n\nint main() {\n  float radius, area;\n\n  std::cout << \"Enter the radius of the circle: \";\n  std::cin >> radius;\n\n  area = 3.14159 * std::pow(radius, 2);\n  std::cout << \"Area of the circle: \" << area << std::endl;\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nint main() {\n  float radius, area;\n\n  std::cout << \"Enter the radius of the circle: \";\n  std::cin >> radius;\n\n  area = 3.14159 * std::pow(radius, 2);\n  std::cout << \"Area of the circle: \" << area << std::endl;\n\n  return 0;\n}"
    },
    {
        "instruction": "What is the correct fix for the following error in a JavaScript code? 'Uncaught TypeError: Cannot read property 'length' of undefined'.",
        "input": "function findLongestWord(words) {\n  var maxLength = 0;\n  for (var i = 0; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      maxLength = words[i].length;\n    }\n  }\n  return maxLength;\n}\n\nconsole.log(findLongestWord(null));",
        "response": "function findLongestWord(words) {\n  if (!words) return 0;\n  var maxLength = 0;\n\n  for (var i = 0; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      maxLength = words[i].length;\n    }\n  }\n  return maxLength;\n}\n\nconsole.log(findLongestWord(null));",
        "output": "function findLongestWord(words) {\n  if (!words) return 0;\n  var maxLength = 0;\n\n  for (var i = 0; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      maxLength = words[i].length;\n    }\n  }\n  return maxLength;\n}\n\nconsole.log(findLongestWord(null));"
    },
    {
        "instruction": "Convert the following list of tuple into a dictionary using a Python one-liner.",
        "input": "[('a', 1), ('b', 2), ('c', 3)]",
        "response": "{key: value for key, value in [('a', 1), ('b', 2), ('c', 3)]}",
        "output": "{key: value for key, value in [('a', 1), ('b', 2), ('c', 3)]}"
    },
    {
        "instruction": "Implement a Java method that reverses a given string without using a built-in reverse method.",
        "input": "public String reverseString(String originalString) {\n  // Your code here\n}",
        "response": "public String reverseString(String originalString) {\n  char[] charArray = originalString.toCharArray();\n  int left = 0;\n  int right = charArray.length - 1;\n\n  while (left < right) {\n    char temp = charArray[left];\n    charArray[left] = charArray[right];\n    charArray[right] = temp;\n    left++;\n    right--;\n  }\n\n  return new String(charArray);\n}",
        "output": "public String reverseString(String originalString) {\n  char[] charArray = originalString.toCharArray();\n  int left = 0;\n  int right = charArray.length - 1;\n\n  while (left < right) {\n    char temp = charArray[left];\n    charArray[left] = charArray[right];\n    charArray[right] = temp;\n    left++;\n    right--;\n  }\n\n  return new String(charArray);\n}"
    },
    {
        "instruction": "Create a Java method to calculate the area of a triangle, given its base and height as double parameters. The method should return the calculated area as a double value.",
        "input": "base: 5.0, height: 3.0",
        "response": "public double triangleArea(double base, double height) {\n    return (base * height) / 2;\n}",
        "output": "public double triangleArea(double base, double height) {\n    return (base * height) / 2;\n}"
    },
    {
        "instruction": "What is the correct Python code to remove all duplicates from a provided list while maintaining the original order of the elements?",
        "input": "sample_list = [1, 2, 2, 3, 4, 4, 5]",
        "response": "def remove_duplicates(lst):\n    result = []\n    for item in lst:\n        if item not in result:\n            result.append(item)\n    return result",
        "output": "def remove_duplicates(lst):\n    result = []\n    for item in lst:\n        if item not in result:\n            result.append(item)\n    return result"
    },
    {
        "instruction": "Please write a C++ program to check if a user-input number is a prime number using the 'isPrime' function. If it is prime, print 'The number is prime.' Else, print 'The number is not prime.'",
        "input": "",
        "response": "#include <iostream>\n#include <cmath>\n\nbool isPrime(int n) {\n  if (n <= 1) return false;\n  for (int i = 2; i <= sqrt(n); i++)\n    if (n % i == 0) return false;\n  return true;\n}\n\nint main() {\n  int number;\n  std::cout << \"Enter a number: \";\n  std::cin >> number;\n\n  if (isPrime(number))\n    std::cout << \"The number is prime.\";\n  else\n    std::cout << \"The number is not prime.\";\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nbool isPrime(int n) {\n  if (n <= 1) return false;\n  for (int i = 2; i <= sqrt(n); i++)\n    if (n % i == 0) return false;\n  return true;\n}\n\nint main() {\n  int number;\n  std::cout << \"Enter a number: \";\n  std::cin >> number;\n\n  if (isPrime(number))\n    std::cout << \"The number is prime.\";\n  else\n    std::cout << \"The number is not prime.\";\n\n  return 0;\n}"
    },
    {
        "instruction": "Show an example of a JavaScript 'reduce' function that takes an integer array as input and calculates the product of all elements in the array.",
        "input": "exampleArray = [1, 2, 3, 4]",
        "response": "const product = exampleArray.reduce((accumulator, currentValue) => accumulator * currentValue, 1);",
        "output": "const product = exampleArray.reduce((accumulator, currentValue) => accumulator * currentValue, 1);"
    },
    {
        "instruction": "Create a Python function that receives a list of strings and returns the longest common prefix of the strings.",
        "input": "['flower', 'flow', 'flight']",
        "response": "def longest_common_prefix(strings):\n    if not strings:\n        return ''\n\n    prefix = strings[0]\n    for string in strings[1:]:\n        i = 0\n        while i < min(len(prefix), len(string)) and prefix[i] == string[i]:\n            i += 1\n        prefix = prefix[:i]\n\n    return prefix\n\nstrings = ['flower', 'flow', 'flight']\nprint(longest_common_prefix(strings))",
        "output": "def longest_common_prefix(strings):\n    if not strings:\n        return ''\n\n    prefix = strings[0]\n    for string in strings[1:]:\n        i = 0\n        while i < min(len(prefix), len(string)) and prefix[i] == string[i]:\n            i += 1\n        prefix = prefix[:i]\n\n    return prefix\n\nstrings = ['flower', 'flow', 'flight']\nprint(longest_common_prefix(strings))"
    },
    {
        "instruction": "How would you implement a doubly linked list using C++?",
        "input": "",
        "response": "#include<iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* prev;\n    Node* next;\n};\n\nvoid append(Node** head_ref, int new_data) {\n    Node* new_node = new Node();\n    Node* last = *head_ref;\n\n    new_node->data = new_data;\n    new_node->next = NULL;\n\n    if (*head_ref == NULL) {\n        new_node->prev = NULL;\n        *head_ref = new_node;\n        return;\n    }\n\n    while (last->next != NULL)\n        last = last->next;\n\n    last->next = new_node;\n    new_node->prev = last;\n}\n\nvoid print_list(Node* node) {\n    while (node != NULL) {\n        cout << node->data << ' ';\n        node = node->next;\n    }\n}\n\nint main() {\n    Node* head = NULL;\n    append(&head, 1);\n    append(&head, 2);\n    append(&head, 3);\n    append(&head, 4);\n\n    print_list(head);\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* prev;\n    Node* next;\n};\n\nvoid append(Node** head_ref, int new_data) {\n    Node* new_node = new Node();\n    Node* last = *head_ref;\n\n    new_node->data = new_data;\n    new_node->next = NULL;\n\n    if (*head_ref == NULL) {\n        new_node->prev = NULL;\n        *head_ref = new_node;\n        return;\n    }\n\n    while (last->next != NULL)\n        last = last->next;\n\n    last->next = new_node;\n    new_node->prev = last;\n}\n\nvoid print_list(Node* node) {\n    while (node != NULL) {\n        cout << node->data << ' ';\n        node = node->next;\n    }\n}\n\nint main() {\n    Node* head = NULL;\n    append(&head, 1);\n    append(&head, 2);\n    append(&head, 3);\n    append(&head, 4);\n\n    print_list(head);\n    return 0;\n}"
    },
    {
        "instruction": "Write a program in Javascript to generate and display the first n Fibonacci numbers, given n as input.",
        "input": "10",
        "response": "function fibonacci(n) {\n  let fibArray = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n  }\n  return fibArray;\n}\n\nconst n = 10;\nconsole.log(fibonacci(n).join(', '));",
        "output": "function fibonacci(n) {\n  let fibArray = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n  }\n  return fibArray;\n}\n\nconst n = 10;\nconsole.log(fibonacci(n).join(', '));"
    },
    {
        "instruction": "Debug this Java code to find out why it isn't summing the elements correctly: int[] nums = {1, 2, 3, 4, 5}; int sum=0; for(int i=0; i <= nums.length; i++) { sum+=nums[i]; } System.out.println(sum);",
        "input": "",
        "response": "The issue is with the loop condition. The loop should run from i=0 to i<nums.length instead of i<=nums.length, because it will access an index out of the array bounds, causing errors.\n\nCorrected Java code:\nint[] nums = {1, 2, 3, 4, 5};\nint sum = 0;\nfor (int i = 0; i < nums.length; i++) {\n    sum += nums[i];\n}\nSystem.out.println(sum);",
        "output": "The issue is with the loop condition. The loop should run from i=0 to i<nums.length instead of i<=nums.length, because it will access an index out of the array bounds, causing errors.\n\nCorrected Java code:\nint[] nums = {1, 2, 3, 4, 5};\nint sum = 0;\nfor (int i = 0; i < nums.length; i++) {\n    sum += nums[i];\n}\nSystem.out.println(sum);"
    },
    {
        "instruction": "Create a JavaScript function that accepts a string as input and returns a new string with vowels removed.",
        "input": "This is an example.",
        "response": "function removeVowels(str) {\n    return str.replace(/[aeiou]/gi, '');\n}",
        "output": "function removeVowels(str) {\n    return str.replace(/[aeiou]/gi, '');\n}"
    },
    {
        "instruction": "Implement a C++ program to read a file, count the number of words present and display the count.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    ifstream inFile;\n    string fileName = \"input.txt\";\n    inFile.open(fileName);\n\n    if (!inFile) {\n        cerr << \"Unable to open file\" << endl;\n        exit(1);\n    }\n\n    string word;\n    int wordCount = 0;\n\n    while (inFile >> word) {\n        wordCount++;\n    }\n\n    inFile.close();\n    cout << \"Number of words: \" << wordCount << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    ifstream inFile;\n    string fileName = \"input.txt\";\n    inFile.open(fileName);\n\n    if (!inFile) {\n        cerr << \"Unable to open file\" << endl;\n        exit(1);\n    }\n\n    string word;\n    int wordCount = 0;\n\n    while (inFile >> word) {\n        wordCount++;\n    }\n\n    inFile.close();\n    cout << \"Number of words: \" << wordCount << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Can you provide a C# function that takes a string as input and checks if it is a palindrome or not, returning true or false respectively?",
        "input": "madam",
        "response": "public static bool IsPalindrome(string input)\n{\n    int left = 0;\n    int right = input.Length - 1;\n\n    while (left < right)\n    {\n        if (input[left] != input[right])\n        {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}",
        "output": "public static bool IsPalindrome(string input)\n{\n    int left = 0;\n    int right = input.Length - 1;\n\n    while (left < right)\n    {\n        if (input[left] != input[right])\n        {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}"
    },
    {
        "instruction": "Write a Bash script to calculate the sum of all integers from 1 to a specified number N.",
        "input": "5",
        "response": "#!/bin/bash\n\nN=$1\nsum=0\n\nfor ((i = 1; i <= N; i++))\ndo\n    sum=$((sum + i))\ndone\n\necho \"Sum: $sum\"",
        "output": "#!/bin/bash\n\nN=$1\nsum=0\n\nfor ((i = 1; i <= N; i++))\ndo\n    sum=$((sum + i))\ndone\n\necho \"Sum: $sum\""
    },
    {
        "instruction": "Create a Python code snippet to calculate the Fibonacci sequence up to the nth term specified by the user.",
        "input": "",
        "response": "def fibonacci(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[:n]",
        "output": "def fibonacci(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[:n]"
    },
    {
        "instruction": "In JavaScript, provide a function to determine whether a given number is prime or not.",
        "input": "",
        "response": "function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}",
        "output": "function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}"
    },
    {
        "instruction": "Can you show an example of using std::map in C++ to count the frequency of words in a given string?",
        "input": "",
        "response": "#include <iostream>\n#include <map>\n#include <sstream>\n\nint main() {\n    std::string input = \"Count the frequency of words in this string\";\n    std::map<std::string, int> word_freq;\n    std::istringstream iss(input);\n    std::string word;\n\n    while (iss >> word) {\n        word_freq[word]++;\n    }\n\n    for (const auto &word_count : word_freq) {\n        std::cout << word_count.first << \": \" << word_count.second << std::endl;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <map>\n#include <sstream>\n\nint main() {\n    std::string input = \"Count the frequency of words in this string\";\n    std::map<std::string, int> word_freq;\n    std::istringstream iss(input);\n    std::string word;\n\n    while (iss >> word) {\n        word_freq[word]++;\n    }\n\n    for (const auto &word_count : word_freq) {\n        std::cout << word_count.first << \": \" << word_count.second << std::endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Bash script to append the current date and time to a file called 'logfile.txt'.",
        "input": "",
        "response": "#!/bin/bash\n\ndate >> logfile.txt",
        "output": "#!/bin/bash\n\ndate >> logfile.txt"
    },
    {
        "instruction": "Create a Java method that finds the shortest distance between two given words in a given String.",
        "input": "Words: cat, mouse\nString: 'The cat chased the mouse around the house, and eventually, the cat caught the mouse.'",
        "response": "public int shortestDistance(String text, String word1, String word2) {\n    String[] words = text.split(' ');\n    int i1 = -1, i2 = -1, minDistance = Integer.MAX_VALUE;\n\n    for (int i = 0; i < words.length; i++) {\n        if (words[i].equals(word1)) {\n            i1 = i;\n        }\n        if (words[i].equals(word2)) {\n            i2 = i;\n        }\n        if (i1 != -1 && i2 != -1) {\n            minDistance = Math.min(minDistance, Math.abs(i1 - i2));\n        }\n    }\n\n    return minDistance;\n}",
        "output": "public int shortestDistance(String text, String word1, String word2) {\n    String[] words = text.split(' ');\n    int i1 = -1, i2 = -1, minDistance = Integer.MAX_VALUE;\n\n    for (int i = 0; i < words.length; i++) {\n        if (words[i].equals(word1)) {\n            i1 = i;\n        }\n        if (words[i].equals(word2)) {\n            i2 = i;\n        }\n        if (i1 != -1 && i2 != -1) {\n            minDistance = Math.min(minDistance, Math.abs(i1 - i2));\n        }\n    }\n\n    return minDistance;\n}"
    },
    {
        "instruction": "Modify the existing C++ code to implement exception handling using try, catch, and throw.",
        "input": "Code:\n\n#include <iostream>\nusing namespace std;\n\nint divide(int a, int b) {\n    return a / b;\n}\n\nint main() {\n    int x, y;\n    cout << \"Enter two numbers: \";\n    cin >> x >> y;\n    cout << \"The result is: \" << divide(x, y) << endl;\n    return 0;\n}\n\n",
        "response": "#include <iostream>\nusing namespace std;\n\nint divide(int a, int b) {\n    if (b == 0) {\n        throw \"Division by zero is not allowed.\";\n    }\n    return a / b;\n}\n\nint main() {\n    int x, y;\n    cout << \"Enter two numbers: \";\n    cin >> x >> y;\n\n    try {\n        cout << \"The result is: \" << divide(x, y) << endl;\n    } catch (const char* msg) {\n        cerr << msg << endl;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint divide(int a, int b) {\n    if (b == 0) {\n        throw \"Division by zero is not allowed.\";\n    }\n    return a / b;\n}\n\nint main() {\n    int x, y;\n    cout << \"Enter two numbers: \";\n    cin >> x >> y;\n\n    try {\n        cout << \"The result is: \" << divide(x, y) << endl;\n    } catch (const char* msg) {\n        cerr << msg << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "What would be the equivalent code in JavaScript for converting user input into an array of unique words?",
        "input": "User Input: 'today is a great day, today will be great'",
        "response": "function uniqueWords(input) {\n  const words = input.split(/\\s|,\\s/);\n  const uniqueWordsSet = new Set(words);\n  const uniqueWordsArray = Array.from(uniqueWordsSet);\n  return uniqueWordsArray;\n}\n\nconst userInput = 'today is a great day, today will be great';\nconst result = uniqueWords(userInput);",
        "output": "function uniqueWords(input) {\n  const words = input.split(/\\s|,\\s/);\n  const uniqueWordsSet = new Set(words);\n  const uniqueWordsArray = Array.from(uniqueWordsSet);\n  return uniqueWordsArray;\n}\n\nconst userInput = 'today is a great day, today will be great';\nconst result = uniqueWords(userInput);"
    },
    {
        "instruction": "Write a C# method that calculates the area of a triangle given its base and height.",
        "input": "Base: 5\nHeight: 10",
        "response": "public double CalculateTriangleArea(double base, double height)\n{\n    return (base * height) / 2;\n}",
        "output": "public double CalculateTriangleArea(double base, double height)\n{\n    return (base * height) / 2;\n}"
    },
    {
        "instruction": "Create a Python function to calculate the area of a rectangle given its length and width.",
        "input": "length = 10\nwidth = 5",
        "response": "def rectangle_area(length, width):\n    return length * width\n\narea = rectangle_area(10, 5)\nprint(area)",
        "output": "def rectangle_area(length, width):\n    return length * width\n\narea = rectangle_area(10, 5)\nprint(area)"
    },
    {
        "instruction": "In Java, write a method that takes a string input and returns the count of vowels in the string.",
        "input": "inputString = \"Hello, I am an AI language model.\"",
        "response": "public int countVowels(String inputString) {\n    int vowelCount = 0;\n    for (char c : inputString.toLowerCase().toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}\n\nint result = countVowels(\"Hello, I am an AI language model.\");\nSystem.out.println(result);",
        "output": "public int countVowels(String inputString) {\n    int vowelCount = 0;\n    for (char c : inputString.toLowerCase().toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}\n\nint result = countVowels(\"Hello, I am an AI language model.\");\nSystem.out.println(result);"
    },
    {
        "instruction": "Write a Shell script that will receive a file name as an argument and print 1 if the file exists and 0 if it doesn't.",
        "input": "filename.txt (assuming this file exists in the current directory)",
        "response": "#!/bin/bash\n\nif [ -e $1 ]; then\n    echo 1\nelse\n    echo 0\nfi\n\n# Usage: ./file_exists.sh filename.txt",
        "output": "#!/bin/bash\n\nif [ -e $1 ]; then\n    echo 1\nelse\n    echo 0\nfi\n\n# Usage: ./file_exists.sh filename.txt"
    },
    {
        "instruction": "What would be the output of this C++ code and explain why? Will there be any error or not?",
        "input": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int a = 5;\n    int b = 3;\n    int c = a / b;\n    cout << \"Division: \" << c << endl;\n}\n\n// Output if any error",
        "response": "Output: Division: 1\nExplanation: In this code, integer division is being performed because both 'a' and 'b' are integers. This means that the result will also be an integer, and any decimal part will be truncated. 5 divided by 3 is equal to 1.6667, but after truncation of the decimal part, we get 1. There will be no error in the code.",
        "output": "Output: Division: 1\nExplanation: In this code, integer division is being performed because both 'a' and 'b' are integers. This means that the result will also be an integer, and any decimal part will be truncated. 5 divided by 3 is equal to 1.6667, but after truncation of the decimal part, we get 1. There will be no error in the code."
    },
    {
        "instruction": "Write a Java method that takes two strings, concatenates them, and returns the concatenated result.",
        "input": "",
        "response": "public String concatenateStrings(String s1, String s2) {\n    return s1.concat(s2);\n}",
        "output": "public String concatenateStrings(String s1, String s2) {\n    return s1.concat(s2);\n}"
    },
    {
        "instruction": "Create a C++ function that reverses the order of the words in a given sentence.",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nstd::string reverse_words(std::string input) {\n  std::istringstream iss(input);\n  std::vector<std::string> words;\n  std::string word;\n\n  while (iss >> word) {\n    words.push_back(word);\n  }\n\n  std::reverse(words.begin(), words.end());\n\n  std::ostringstream oss;\n  for (size_t i = 0; i < words.size(); i++) {\n    oss << words[i];\n    if (i != words.size() - 1) {\n      oss << ' ';\n    }\n  }\n\n  return oss.str();\n}",
        "output": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nstd::string reverse_words(std::string input) {\n  std::istringstream iss(input);\n  std::vector<std::string> words;\n  std::string word;\n\n  while (iss >> word) {\n    words.push_back(word);\n  }\n\n  std::reverse(words.begin(), words.end());\n\n  std::ostringstream oss;\n  for (size_t i = 0; i < words.size(); i++) {\n    oss << words[i];\n    if (i != words.size() - 1) {\n      oss << ' ';\n    }\n  }\n\n  return oss.str();\n}"
    },
    {
        "instruction": "Create a Python function that calculates the Levenshtein distance between two strings.",
        "input": "",
        "response": "def levenshtein_distance(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein_distance(s2, s1)\n\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n\n    return previous_row[-1]",
        "output": "def levenshtein_distance(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein_distance(s2, s1)\n\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n\n    return previous_row[-1]"
    },
    {
        "instruction": "Identify and fix the syntax errors in the provided JavaScript code snippet.",
        "input": "function changeBackground(color) {\n    document.getElementByTagName('body')[0].style.background = color;\n}\nOnChangeBackground(\"#ff8833\");",
        "response": "function changeBackground(color) {\n    document.getElementsByTagName('body')[0].style.background = color;\n}\nchangeBackground(\"#ff8833\");",
        "output": "function changeBackground(color) {\n    document.getElementsByTagName('body')[0].style.background = color;\n}\nchangeBackground(\"#ff8833\");"
    },
    {
        "instruction": "Create a Java method that calculates the circumference of a circle, given its radius.",
        "input": "",
        "response": "public double calculateCircumference(double radius) {\n    return 2 * Math.PI * radius;\n}",
        "output": "public double calculateCircumference(double radius) {\n    return 2 * Math.PI * radius;\n}"
    },
    {
        "instruction": "How can you implement a simple HTTP server using Node.js and Express?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});"
    },
    {
        "instruction": "Write a Bash script that reads a file line by line and counts the number of lines in the file.",
        "input": "",
        "response": "#!/bin/bash\n\nFILE=$1\nLINE_COUNT=0\n\nwhile read -r LINE; do\n  LINE_COUNT=$((LINE_COUNT+1))\ndone < \"$FILE\"\n\necho \"Line count: $LINE_COUNT\"",
        "output": "#!/bin/bash\n\nFILE=$1\nLINE_COUNT=0\n\nwhile read -r LINE; do\n  LINE_COUNT=$((LINE_COUNT+1))\ndone < \"$FILE\"\n\necho \"Line count: $LINE_COUNT\""
    },
    {
        "instruction": "Fix the following Python code that uses the wrong loop to iterate through a list and finds the sum of all elements:",
        "input": "numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor i in range(len(numbers)):\n    sum += numbers[i]\nprint(sum)",
        "response": "numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor number in numbers:\n    sum += number\nprint(sum)",
        "output": "numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor number in numbers:\n    sum += number\nprint(sum)"
    },
    {
        "instruction": "Implement a function in JavaScript to reverse a given string without using the built-in `split()`, `reverse()` and `join()` functions.",
        "input": "",
        "response": "function reverseString(str) {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n}",
        "output": "function reverseString(str) {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n}"
    },
    {
        "instruction": "Create a Java function to calculate the area of a triangle, given its base and height.",
        "input": "",
        "response": "public double triangleArea(double base, double height) {\n  return (base * height) / 2;\n}",
        "output": "public double triangleArea(double base, double height) {\n  return (base * height) / 2;\n}"
    },
    {
        "instruction": "Could you help me identify the time complexity of the given Python code?",
        "input": "def find_duplicates(lst):\n  duplicates = []\n  for i in range(len(lst)):\n    for j in range(i+1, len(lst)):\n      if lst[i] == lst[j]:\n        duplicates.append(lst[i])\n  return duplicates",
        "response": "O(n^2), due to the nested loops iterating over the input list.",
        "output": "O(n^2), due to the nested loops iterating over the input list."
    },
    {
        "instruction": "Write a sample C++ code to demonstrate the usage of polymorphism with inheritance, where you have a base class called Shape and two derived classes, Circle and Rectangle.",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nclass Shape {\npublic:\n  virtual void area() = 0;\n};\n\nclass Circle : public Shape {\npublic:\n  void area() {\n    cout << 'Circle Area' << endl;\n  }\n};\n\nclass Rectangle : public Shape {\npublic:\n  void area() {\n    cout << 'Rectangle Area' << endl;\n  }\n};\n\nint main() {\n  Shape* shape;\n  Circle circle;\n  Rectangle rectangle;\n\n  shape = &circle;\n  shape->area();\n\n  shape = &rectangle;\n  shape->area();\n\n  return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nclass Shape {\npublic:\n  virtual void area() = 0;\n};\n\nclass Circle : public Shape {\npublic:\n  void area() {\n    cout << 'Circle Area' << endl;\n  }\n};\n\nclass Rectangle : public Shape {\npublic:\n  void area() {\n    cout << 'Rectangle Area' << endl;\n  }\n};\n\nint main() {\n  Shape* shape;\n  Circle circle;\n  Rectangle rectangle;\n\n  shape = &circle;\n  shape->area();\n\n  shape = &rectangle;\n  shape->area();\n\n  return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns the square of each number as a new array.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function squareArray(numbers) {\n  return numbers.map(number => number ** 2);\n}",
        "output": "function squareArray(numbers) {\n  return numbers.map(number => number ** 2);\n}"
    },
    {
        "instruction": "Implement a C++ function that takes a string as input and determines if it contains balanced parentheses.",
        "input": "({[()]})",
        "response": "#include <iostream>\n#include <stack>\n#include <string>\n\nbool areBalanced(std::string str) {\n  std::stack<char> parentheses;\n\n  for (char c : str) {\n    if (c == '(' || c == '{' || c == '[') {\n      parentheses.push(c);\n    } else {\n      if (parentheses.empty()) return false;\n\n      char top = parentheses.top();\n      parentheses.pop();\n\n      if ((c == ')' && top != '(') ||\n          (c == '}' && top != '{') ||\n          (c == ']' && top != '[')) {\n        return false;\n      }\n    }\n  }\n\n  return parentheses.empty();\n}\n\nint main() {\n  std::string input = \"({[()]})\";\n  std::cout << \"Are the parentheses balanced? \" << (areBalanced(input) ? \"Yes\" : \"No\") << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n#include <stack>\n#include <string>\n\nbool areBalanced(std::string str) {\n  std::stack<char> parentheses;\n\n  for (char c : str) {\n    if (c == '(' || c == '{' || c == '[') {\n      parentheses.push(c);\n    } else {\n      if (parentheses.empty()) return false;\n\n      char top = parentheses.top();\n      parentheses.pop();\n\n      if ((c == ')' && top != '(') ||\n          (c == '}' && top != '{') ||\n          (c == ']' && top != '[')) {\n        return false;\n      }\n    }\n  }\n\n  return parentheses.empty();\n}\n\nint main() {\n  std::string input = \"({[()]})\";\n  std::cout << \"Are the parentheses balanced? \" << (areBalanced(input) ? \"Yes\" : \"No\") << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Write a Python function to generate the first 'n' Fibonacci numbers as a list, where 'n' is a given positive integer.",
        "input": "8",
        "response": "def generate_fibonacci(n):\n  if n == 0: return []\n  if n == 1: return [0]\n  fibonacci = [0, 1]\n\n  for _ in range(2, n):\n    fibonacci.append(fibonacci[-1] + fibonacci[-2])\n\n  return fibonacci",
        "output": "def generate_fibonacci(n):\n  if n == 0: return []\n  if n == 1: return [0]\n  fibonacci = [0, 1]\n\n  for _ in range(2, n):\n    fibonacci.append(fibonacci[-1] + fibonacci[-2])\n\n  return fibonacci"
    },
    {
        "instruction": "Given a shell script, correct any syntax errors and modify the script to allow for directory input validation.",
        "input": "if [ $# -eq 0 ]; then\n  echo \"Please provide a directory as an argument.\"\n  exit 1\nfi\ndir=$1\nif [ ! -d \"$dir\" ]; /! (check if the given argument is a valid directory) then\n  echo \"Invalid directory provided.\"\n  exit 1\nfi\nfind \"$dir\" -type f -name \"*.txt\" -exec cat {} +",
        "response": "if [ $# -eq 0 ]; then\n  echo \"Please provide a directory as an argument.\"\n  exit 1\nfi\ndir=$1\nif [ ! -d \"$dir\" ]; then\n  echo \"Invalid directory provided.\"\n  exit 1\nfi\nfind \"$dir\" -type f -name \"*.txt\" -exec cat {} +",
        "output": "if [ $# -eq 0 ]; then\n  echo \"Please provide a directory as an argument.\"\n  exit 1\nfi\ndir=$1\nif [ ! -d \"$dir\" ]; then\n  echo \"Invalid directory provided.\"\n  exit 1\nfi\nfind \"$dir\" -type f -name \"*.txt\" -exec cat {} +"
    },
    {
        "instruction": "Create a C++ function that reads a user input and calculates its square root.",
        "input": "9",
        "response": "#include <iostream>\n#include <cmath>\n\nfloat square_root(float x) {\n    return sqrt(x);\n}\n\nint main() {\n    float num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    float result = square_root(num);\n    std::cout << \"Square root of \" << num << \" is: \" << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nfloat square_root(float x) {\n    return sqrt(x);\n}\n\nint main() {\n    float num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    float result = square_root(num);\n    std::cout << \"Square root of \" << num << \" is: \" << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would one write a Java method to reverse a given string?",
        "input": "Hello, GPT!",
        "response": "public class StringReverser {\n    public static String reverse(String input) {\n        StringBuilder sb = new StringBuilder(input);\n        return sb.reverse().toString();\n    }\n    public static void main(String[] args) {\n        String input = \"Hello, GPT!\";\n        System.out.println(\"Original string: \" + input);\n        System.out.println(\"Reversed string: \" + reverse(input));\n    }\n}",
        "output": "public class StringReverser {\n    public static String reverse(String input) {\n        StringBuilder sb = new StringBuilder(input);\n        return sb.reverse().toString();\n    }\n    public static void main(String[] args) {\n        String input = \"Hello, GPT!\";\n        System.out.println(\"Original string: \" + input);\n        System.out.println(\"Reversed string: \" + reverse(input));\n    }\n}"
    },
    {
        "instruction": "What would be the Python code to find the largest number in a list?",
        "input": "[34, 62, 18, 95, 47, 83]",
        "response": "def find_largest_number(numbers):\n    return max(numbers)\n\nnumbers = [34, 62, 18, 95, 47, 83]\nresult = find_largest_number(numbers)\nprint(\"The largest number in the list is:\", result)",
        "output": "def find_largest_number(numbers):\n    return max(numbers)\n\nnumbers = [34, 62, 18, 95, 47, 83]\nresult = find_largest_number(numbers)\nprint(\"The largest number in the list is:\", result)"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and finds the average of them.",
        "input": "[12, 47, 83, 96, 27]",
        "response": "function findAverage(arr) {\n    const sum = arr.reduce((acc, num) => acc + num, 0);\n    return sum / arr.length;\n}\n\nconst numbers = [12, 47, 83, 96, 27];\nconst average = findAverage(numbers);\nconsole.log('The average of the numbers is:', average);",
        "output": "function findAverage(arr) {\n    const sum = arr.reduce((acc, num) => acc + num, 0);\n    return sum / arr.length;\n}\n\nconst numbers = [12, 47, 83, 96, 27];\nconst average = findAverage(numbers);\nconsole.log('The average of the numbers is:', average);"
    },
    {
        "instruction": "Explain the inner workings of the following Java code snippet.",
        "input": "public class MyStack<T> {\n    private static class StackNode<T> {\n        private T data;\n        private StackNode<T> next;\n\n        public StackNode(T data) {\n            this.data = data;\n        }\n    }\n\n    private StackNode<T> top;\n\n    public T pop() {\n        if (top == null) throw new EmptyStackException();\n        T item = top.data;\n        top = top.next;\n        return item;\n    }\n}",
        "response": "This Java code snippet defines a generic stack class called `MyStack`. The stack holds elements of a given type `T`. The inner class `StackNode` is used to represent each node in the stack, encapsulating the data and a reference to the next node in the stack. The constructor of the `StackNode` class initializes the `data` with the provided value. The `MyStack` class has a private field `top` representing the top element of the stack.\n\nThe `pop` method of the `MyStack` class removes the top element from the stack and returns its data. If the stack is empty, it throws an `EmptyStackException`. The method retrieves the data from the top element, updates the `top` reference to the next node, and then returns the data.",
        "output": "This Java code snippet defines a generic stack class called `MyStack`. The stack holds elements of a given type `T`. The inner class `StackNode` is used to represent each node in the stack, encapsulating the data and a reference to the next node in the stack. The constructor of the `StackNode` class initializes the `data` with the provided value. The `MyStack` class has a private field `top` representing the top element of the stack.\n\nThe `pop` method of the `MyStack` class removes the top element from the stack and returns its data. If the stack is empty, it throws an `EmptyStackException`. The method retrieves the data from the top element, updates the `top` reference to the next node, and then returns the data."
    },
    {
        "instruction": "Given this sample Python code, can you identify and fix the syntax error?",
        "input": "def is_even(num):\n    if num % 2 = 0:\n        return True\n    else:\n        return False",
        "response": "The syntax error is in the line `if num % 2 = 0:`. The correct comparison operator for equality is `==`. Here's the corrected code:\n\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False",
        "output": "The syntax error is in the line `if num % 2 = 0:`. The correct comparison operator for equality is `==`. Here's the corrected code:\n\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Translate the following C++ code into equivalent Python code:",
        "input": "#include <iostream>\n\nint main() {\n    int a, b;\n    std::cout << \"Enter two integers: \";\n    std::cin >> a >> b;\n    int sum = a + b;\n    std::cout << \"The sum is: \" << sum;\n\n    return 0;\n}",
        "response": "Here is the equivalent Python code:\n\ndef main():\n    a = int(input(\"Enter the first integer: \"))\n    b = int(input(\"Enter the second integer: \"))\n    sum = a + b\n    print(\"The sum is: {}\".format(sum))\n\nmain()",
        "output": "Here is the equivalent Python code:\n\ndef main():\n    a = int(input(\"Enter the first integer: \"))\n    b = int(input(\"Enter the second integer: \"))\n    sum = a + b\n    print(\"The sum is: {}\".format(sum))\n\nmain()"
    },
    {
        "instruction": "Create a program in JavaScript that calculates the factorial of a given integer.",
        "input": "",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));"
    },
    {
        "instruction": "Provide a JavaScript function named 'urlParams' that takes a URL string as input and returns an object containing its query parameters as key-value pairs.",
        "input": "https://example.com/?name=John&age=25&city=NewYork",
        "response": "function urlParams(url) {\n  const params = new URL(url).searchParams;\n  const result = {};\n  for (const [key, value] of params.entries()) {\n    result[key] = value;\n  }\n  return result;\n}\n\nconst url = 'https://example.com/?name=John&age=25&city=NewYork';\nconsole.log(urlParams(url));",
        "output": "function urlParams(url) {\n  const params = new URL(url).searchParams;\n  const result = {};\n  for (const [key, value] of params.entries()) {\n    result[key] = value;\n  }\n  return result;\n}\n\nconst url = 'https://example.com/?name=John&age=25&city=NewYork';\nconsole.log(urlParams(url));"
    },
    {
        "instruction": "Create a Python function that accepts a list of names and prints them sorted alphabetically, and then sorted by length, with the shortest names first.",
        "input": "['Alice', 'Bob', 'Charlotte', 'Daniel', 'Eve']",
        "response": "def sort_names(names):\n    names.sort()\n    print('Alphabetically sorted:', names)\n    names.sort(key=len)\n    print('Sorted by length:', names)\n\nnames = ['Alice', 'Bob', 'Charlotte', 'Daniel', 'Eve']\nsort_names(names)",
        "output": "def sort_names(names):\n    names.sort()\n    print('Alphabetically sorted:', names)\n    names.sort(key=len)\n    print('Sorted by length:', names)\n\nnames = ['Alice', 'Bob', 'Charlotte', 'Daniel', 'Eve']\nsort_names(names)"
    },
    {
        "instruction": "Explain the purpose of the following Java code and identify any possible issues.",
        "input": "public class Test {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int index = 5;\n        System.out.println(numbers[index]);\n    }\n}",
        "response": "The given Java code is a simple program that initializes an array 'numbers' with integer values and tries to access an element of the array using 'index'. The purpose of this code is to print the integer value at the given 'index' in the array.\n\nHowever, there is an issue in the code: The index 5 is out of bounds, as the array contains 5 elements and is indexed from 0 to 4. The correct way to avoid this issue would be to check if the index is within the bounds (0 to array length - 1) before accessing the array element. Alternatively, choose a valid index within the range of the array.",
        "output": "The given Java code is a simple program that initializes an array 'numbers' with integer values and tries to access an element of the array using 'index'. The purpose of this code is to print the integer value at the given 'index' in the array.\n\nHowever, there is an issue in the code: The index 5 is out of bounds, as the array contains 5 elements and is indexed from 0 to 4. The correct way to avoid this issue would be to check if the index is within the bounds (0 to array length - 1) before accessing the array element. Alternatively, choose a valid index within the range of the array."
    },
    {
        "instruction": "Write a C++ program that calculates the sum of all even numbers between 1 and a given integer n.",
        "input": "The integer n is 10.",
        "response": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n    std::cout << \"Enter the value of n: \";\n    std::cin >> n;\n\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n\n    std::cout << \"The sum of even numbers between 1 and \" << n << \" is: \" << sum << std::endl;\n    return 0;\n}\n\n// When provided with the input '10', the output will be 'The sum of even numbers between 1 and 10 is: 30'",
        "output": "#include <iostream>\n\nint main() {\n    int n, sum = 0;\n    std::cout << \"Enter the value of n: \";\n    std::cin >> n;\n\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n\n    std::cout << \"The sum of even numbers between 1 and \" << n << \" is: \" << sum << std::endl;\n    return 0;\n}\n\n// When provided with the input '10', the output will be 'The sum of even numbers between 1 and 10 is: 30'"
    },
    {
        "instruction": "Create a JavaScript function that calculates the difference between two given dates in days.",
        "input": "date1 = '2022-01-01';\ndate2 = '2022-01-10';",
        "response": "function daysBetweenDates(date1, date2) {\n  const dt1 = new Date(date1);\n  const dt2 = new Date(date2);\n  const msPerDay = 1000 * 60 * 60 * 24;\n  const diffInMs = Math.abs(dt2 - dt1);\n  return Math.floor(diffInMs / msPerDay);\n}\n\nconsole.log(daysBetweenDates(date1, date2));",
        "output": "function daysBetweenDates(date1, date2) {\n  const dt1 = new Date(date1);\n  const dt2 = new Date(date2);\n  const msPerDay = 1000 * 60 * 60 * 24;\n  const diffInMs = Math.abs(dt2 - dt1);\n  return Math.floor(diffInMs / msPerDay);\n}\n\nconsole.log(daysBetweenDates(date1, date2));"
    },
    {
        "instruction": "Write a program in Java to reverse the digits of a given integer number.",
        "input": "int number = 12345;",
        "response": "public class ReverseInteger {\n\n  public static void main(String[] args) {\n    int number = 12345;\n    int reversed = 0;\n\n    while (number != 0) {\n      int digit = number % 10;\n      reversed = reversed * 10 + digit;\n      number /= 10;\n    }\n\n    System.out.println(\"Reversed number: \" + reversed);\n  }\n}",
        "output": "public class ReverseInteger {\n\n  public static void main(String[] args) {\n    int number = 12345;\n    int reversed = 0;\n\n    while (number != 0) {\n      int digit = number % 10;\n      reversed = reversed * 10 + digit;\n      number /= 10;\n    }\n\n    System.out.println(\"Reversed number: \" + reversed);\n  }\n}"
    },
    {
        "instruction": "Given a list of integers in Python, find the two numbers that add up to a specific target.",
        "input": "nums = [2, 7, 11, 15];\ntarget = 9;",
        "response": "def two_sum(nums, target):\n  hashmap = {}\n\n  for i, num in enumerate(nums):\n    diff = target - num\n    if diff in hashmap:\n      return [hashmap[diff], i]\n    hashmap[num] = i\n\nsolution = two_sum(nums, target)\nprint(solution)",
        "output": "def two_sum(nums, target):\n  hashmap = {}\n\n  for i, num in enumerate(nums):\n    diff = target - num\n    if diff in hashmap:\n      return [hashmap[diff], i]\n    hashmap[num] = i\n\nsolution = two_sum(nums, target)\nprint(solution)"
    },
    {
        "instruction": "Write a C++ program that finds the first non-repeated character in a given string.",
        "input": "std::string input = \"hellohe\";",
        "response": "#include <iostream>\n#include <string>\n#include <unordered_map>\n\nchar findFirstNonRepeated(std::string input) {\n  std::unordered_map<char, int> frequency;\n\n  for (char c : input) {\n    ++frequency[c];\n  }\n\n  for (char c : input) {\n    if (frequency[c] == 1) {\n      return c;\n    }\n  }\n\n  return '-';\n}\n\nint main() {\n  std::string input = \"hellohe\";\n  std::cout << \"First non-repeated character: \" << findFirstNonRepeated(input) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <unordered_map>\n\nchar findFirstNonRepeated(std::string input) {\n  std::unordered_map<char, int> frequency;\n\n  for (char c : input) {\n    ++frequency[c];\n  }\n\n  for (char c : input) {\n    if (frequency[c] == 1) {\n      return c;\n    }\n  }\n\n  return '-';\n}\n\nint main() {\n  std::string input = \"hellohe\";\n  std::cout << \"First non-repeated character: \" << findFirstNonRepeated(input) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Create a Python function named 'sum_of_squares' that takes an integer 'n' and calculates the sum of the squares of all positive integers up to and including 'n'.",
        "input": "",
        "response": "def sum_of_squares(n):\n    return sum(i**2 for i in range(1, n+1))",
        "output": "def sum_of_squares(n):\n    return sum(i**2 for i in range(1, n+1))"
    },
    {
        "instruction": "Implement a Java method that accepts an array of integers and returns the indices of the two numbers whose sum is equal to a given target.",
        "input": "int[] nums = {2, 7, 11, 15};\nint target = 9;",
        "response": "public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}",
        "output": "public int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    throw new IllegalArgumentException(\"No two sum solution\");\n}"
    },
    {
        "instruction": "How would you write a JavaScript function to calculate the factorial of a positive integer?",
        "input": "",
        "response": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Explain the steps and the code required to reverse a string in C#.",
        "input": "",
        "response": "1. Convert the input string to a character array using the ToCharArray() method.\n2. Use the Array.Reverse() method to reverse the character array.\n3. Convert the reversed character array back to a string using the new string() constructor.\n\nHere is the code:\n\nstring ReverseString(string input) {\n    char[] charArray = input.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n}",
        "output": "1. Convert the input string to a character array using the ToCharArray() method.\n2. Use the Array.Reverse() method to reverse the character array.\n3. Convert the reversed character array back to a string using the new string() constructor.\n\nHere is the code:\n\nstring ReverseString(string input) {\n    char[] charArray = input.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n}"
    },
    {
        "instruction": "Create a C++ function that calculates the sum of numbers from 1 to n.",
        "input": "10",
        "response": "#include <iostream>\n\nint sum_of_numbers(int n) {\n    return (n * (n + 1)) / 2;\n}\n\nint main() {\n    int n = 10;\n    std::cout << \"Sum of numbers from 1 to \" << n << \": \" << sum_of_numbers(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint sum_of_numbers(int n) {\n    return (n * (n + 1)) / 2;\n}\n\nint main() {\n    int n = 10;\n    std::cout << \"Sum of numbers from 1 to \" << n << \": \" << sum_of_numbers(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "In JavaScript, can you detect if a number is odd or even and log the result to the console?",
        "input": "7",
        "response": "function isOdd(num) {\n    return num % 2 !== 0;\n}\n\nconst number = 7;\nconst result = isOdd(number) ? 'odd' : 'even';\nconsole.log(`The number ${number} is ${result}.`);",
        "output": "function isOdd(num) {\n    return num % 2 !== 0;\n}\n\nconst number = 7;\nconst result = isOdd(number) ? 'odd' : 'even';\nconsole.log(`The number ${number} is ${result}.`);"
    },
    {
        "instruction": "Correct the syntax error in the following Python code snippet: 'def calculate_area(width, height): return witdh*height'",
        "input": "",
        "response": "def calculate_area(width, height):\n    return width * height",
        "output": "def calculate_area(width, height):\n    return width * height"
    },
    {
        "instruction": "Using C#, write a program that takes a string input and counts the occurrence of each distinct character, ignoring case differences.",
        "input": "Hello, World!",
        "response": "using System;\nusing System.Collections.Generic;\n\npublic class CharacterCounter {\n    public static IDictionary<char, int> CountCharacters(string input) {\n        Dictionary<char, int> characterCount = new Dictionary<char, int>();\n        foreach (char c in input.ToLower()) {\n            if (characterCount.ContainsKey(c))\n                characterCount[c] += 1;\n            else\n                characterCount[c] = 1;\n        }\n        return characterCount;\n    }\n\n    public static void Main(string[] args) {\n        string input = \"Hello, World!\";\n        IDictionary<char, int> charCount = CountCharacters(input);\n        foreach (KeyValuePair<char, int> entry in charCount) {\n            Console.WriteLine(\"Character: \" + entry.Key + \" - Count: \" + entry.Value);\n        }\n    }\n}",
        "output": "using System;\nusing System.Collections.Generic;\n\npublic class CharacterCounter {\n    public static IDictionary<char, int> CountCharacters(string input) {\n        Dictionary<char, int> characterCount = new Dictionary<char, int>();\n        foreach (char c in input.ToLower()) {\n            if (characterCount.ContainsKey(c))\n                characterCount[c] += 1;\n            else\n                characterCount[c] = 1;\n        }\n        return characterCount;\n    }\n\n    public static void Main(string[] args) {\n        string input = \"Hello, World!\";\n        IDictionary<char, int> charCount = CountCharacters(input);\n        foreach (KeyValuePair<char, int> entry in charCount) {\n            Console.WriteLine(\"Character: \" + entry.Key + \" - Count: \" + entry.Value);\n        }\n    }\n}"
    },
    {
        "instruction": "Write a Python function that calculates the total cost of a list of products with their quantities, given as input.",
        "input": "Product cost list: {'apple': 1.25, 'banana': 0.75, 'cherry': 0.5}, Product quantity list: {'apple': 5, 'banana': 10, 'cherry': 20}",
        "response": "def calculate_total_cost(product_costs, product_quantities):\n    total_cost = 0\n    for product, cost in product_costs.items():\n        total_cost += cost * product_quantities[product]\n    return total_cost\n\nproduct_costs = {'apple': 1.25, 'banana': 0.75, 'cherry': 0.5}\nproduct_quantities = {'apple': 5, 'banana': 10, 'cherry': 20}\nprint(calculate_total_cost(product_costs, product_quantities))",
        "output": "def calculate_total_cost(product_costs, product_quantities):\n    total_cost = 0\n    for product, cost in product_costs.items():\n        total_cost += cost * product_quantities[product]\n    return total_cost\n\nproduct_costs = {'apple': 1.25, 'banana': 0.75, 'cherry': 0.5}\nproduct_quantities = {'apple': 5, 'banana': 10, 'cherry': 20}\nprint(calculate_total_cost(product_costs, product_quantities))"
    },
    {
        "instruction": "Write JavaScript code to reverse the order of an array in-place.",
        "input": "Array: [8, 1, 4, 2, 5]",
        "response": "function reverseArray(arr) {\n    for (let i = 0; i < arr.length / 2; i++) {\n        const temp = arr[i];\n        arr[i] = arr[arr.length - 1 - i];\n        arr[arr.length - 1 - i] = temp;\n    }\n    return arr;\n}\n\nlet arr = [8, 1, 4, 2, 5];\nconsole.log(reverseArray(arr));",
        "output": "function reverseArray(arr) {\n    for (let i = 0; i < arr.length / 2; i++) {\n        const temp = arr[i];\n        arr[i] = arr[arr.length - 1 - i];\n        arr[arr.length - 1 - i] = temp;\n    }\n    return arr;\n}\n\nlet arr = [8, 1, 4, 2, 5];\nconsole.log(reverseArray(arr));"
    },
    {
        "instruction": "How would you refactor the following C++ code which calculates the square of every element in an array using a for loop?",
        "input": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    for (int i = 0; i < arr.size(); i++) {\n        arr[i] = arr[i] * arr[i];\n    }\n    return 0;\n}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    std::transform(arr.begin(), arr.end(), arr.begin(), [](int num) { return num * num; });\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> arr = {1, 2, 3, 4, 5};\n    std::transform(arr.begin(), arr.end(), arr.begin(), [](int num) { return num * num; });\n    return 0;\n}"
    },
    {
        "instruction": "Fix the SQL query that should list all employees whose name starts with a given prefix.",
        "input": "Given Query: SELECT * FROM employees WHERE name LIKE 'John%'",
        "response": "To fix the query, replace the hardcoded name prefix 'John' with a parameter placeholder. In SQL, you can use @name_prefix as a placeholder. The final query would look like this:\n\nSELECT * FROM employees WHERE name LIKE @name_prefix + '%'",
        "output": "To fix the query, replace the hardcoded name prefix 'John' with a parameter placeholder. In SQL, you can use @name_prefix as a placeholder. The final query would look like this:\n\nSELECT * FROM employees WHERE name LIKE @name_prefix + '%'"
    },
    {
        "instruction": "Create a JavaScript function that takes a string argument and returns the number of vowels in the string.",
        "input": "",
        "response": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.includes(str.charAt(i))) {\n            count++;\n        }\n    }\n    return count;\n}",
        "output": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.includes(str.charAt(i))) {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "How would you implement an insertion sort algorithm in C++?",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    insertionSort(arr, n);\n\n    for(int i = 0; i < n; i++) {\n        cout << arr[i] << \" \";\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    insertionSort(arr, n);\n\n    for(int i = 0; i < n; i++) {\n        cout << arr[i] << \" \";\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Explain how to create a Python decorator that logs the execution time of a function.",
        "input": "",
        "response": "import time\n\n# Define the decorator function\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        # Record start time\n        start_time = time.perf_counter()\n\n        # Call the original function\n        result = func(*args, **kwargs)\n\n        # Record end time\n        end_time = time.perf_counter()\n\n        # Calculate elapsed time\n        elapsed_time = end_time - start_time\n\n        # Print the elapsed time\n        print(f'{func.__name__} executed in {elapsed_time:.4f} seconds')\n\n        return result\n\n    return wrapper\n\n# Usage:\n\n@timing_decorator\ndef example_function():\n    # Your code here\n    pass",
        "output": "import time\n\n# Define the decorator function\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        # Record start time\n        start_time = time.perf_counter()\n\n        # Call the original function\n        result = func(*args, **kwargs)\n\n        # Record end time\n        end_time = time.perf_counter()\n\n        # Calculate elapsed time\n        elapsed_time = end_time - start_time\n\n        # Print the elapsed time\n        print(f'{func.__name__} executed in {elapsed_time:.4f} seconds')\n\n        return result\n\n    return wrapper\n\n# Usage:\n\n@timing_decorator\ndef example_function():\n    # Your code here\n    pass"
    },
    {
        "instruction": "Write a Java method that accepts an ArrayList of integers and returns the second largest value in the list.",
        "input": "",
        "response": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic static int secondLargest(ArrayList<Integer> list) {\n    if (list.size() < 2) {\n        throw new IllegalArgumentException(\"List must contain at least 2 elements\");\n    }\n\n    Collections.sort(list, Collections.reverseOrder());\n    return list.get(1);\n}",
        "output": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic static int secondLargest(ArrayList<Integer> list) {\n    if (list.size() < 2) {\n        throw new IllegalArgumentException(\"List must contain at least 2 elements\");\n    }\n\n    Collections.sort(list, Collections.reverseOrder());\n    return list.get(1);\n}"
    },
    {
        "instruction": "Create a Python function called 'vowel_count' that accepts a string as its argument and returns the total number of vowels (a, e, i, o, u) within the input string.",
        "input": "This is an example text.",
        "response": "def vowel_count(text):\n    vowels = 'aeiou'\n    count = 0\n    for char in text.lower():\n        if char in vowels:\n            count += 1\n    return count",
        "output": "def vowel_count(text):\n    vowels = 'aeiou'\n    count = 0\n    for char in text.lower():\n        if char in vowels:\n            count += 1\n    return count"
    },
    {
        "instruction": "Design a Java method named 'isPalindrome' that takes a single string parameter and returns a boolean value. If the input string is a palindrome, return true, otherwise return false.",
        "input": "racecar",
        "response": "public boolean isPalindrome(String str) {\n    int start = 0;\n    int end = str.length() - 1;\n    while (start < end) {\n        if (str.charAt(start) != str.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}",
        "output": "public boolean isPalindrome(String str) {\n    int start = 0;\n    int end = str.length() - 1;\n    while (start < end) {\n        if (str.charAt(start) != str.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}"
    },
    {
        "instruction": "Demonstrate a JavaScript function named 'reverseWords' which accepts a string as an argument and returns the same string with each word reversed but the original word order maintained.",
        "input": "Hello JavaScript World",
        "response": "function reverseWords(str) {\n    return str.split(' ').map(function (word) {\n        return word.split('').reverse().join('');\n    }).join(' ');\n}",
        "output": "function reverseWords(str) {\n    return str.split(' ').map(function (word) {\n        return word.split('').reverse().join('');\n    }).join(' ');\n}"
    },
    {
        "instruction": "Write a C++ program to prompt the user for an integer n, and then calculate and print the sum of the square of the first n integers (1^2 + 2^2 + 3^2 + ... + n^2).",
        "input": "Enter an integer: 4",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n    cout << \"Enter an integer: \";\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    cout << \"Sum of squares: \" << sum << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n    cout << \"Enter an integer: \";\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    cout << \"Sum of squares: \" << sum << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Python function to find the longest common prefix between two strings.",
        "input": "\"hello\", \"hellboy\"",
        "response": "def longest_common_prefix(str1, str2):\n    common_prefix = \"\"\n    for i in range(min(len(str1), len(str2))):\n        if str1[i] == str2[i]:\n            common_prefix += str1[i]\n        else:\n            break\n    return common_prefix\n\nresult = longest_common_prefix('hello', 'hellboy')\nprint(result)",
        "output": "def longest_common_prefix(str1, str2):\n    common_prefix = \"\"\n    for i in range(min(len(str1), len(str2))):\n        if str1[i] == str2[i]:\n            common_prefix += str1[i]\n        else:\n            break\n    return common_prefix\n\nresult = longest_common_prefix('hello', 'hellboy')\nprint(result)"
    },
    {
        "instruction": "How can we create a Java method that checks if a given string is a palindrome?",
        "input": "Input: \"madam\"\nExpected Output: true",
        "response": "public boolean isPalindrome(String inputStr) {\n    int left = 0;\n    int right = inputStr.length() - 1;\n\n    while (left < right) {\n        if (inputStr.charAt(left) != inputStr.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nString testInput = 'madam';\nSystem.out.println(isPalindrome(testInput));",
        "output": "public boolean isPalindrome(String inputStr) {\n    int left = 0;\n    int right = inputStr.length() - 1;\n\n    while (left < right) {\n        if (inputStr.charAt(left) != inputStr.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nString testInput = 'madam';\nSystem.out.println(isPalindrome(testInput));"
    },
    {
        "instruction": "Write C++ code to calculate the Euclidean distance between two points in a 2D graph.",
        "input": "Input: point1 = {3, 4}, point2 = {6, 8}\nExpected Output: 5",
        "response": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\ndouble euclidean_distance(double x1, double y1, double x2, double y2) {\n    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));\n}\n\nint main() {\n    double x1 = 3, y1 = 4;\n    double x2 = 6, y2 = 8;\n    double distance = euclidean_distance(x1, y1, x2, y2);\n    cout << 'Distance: ' << distance << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\ndouble euclidean_distance(double x1, double y1, double x2, double y2) {\n    return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));\n}\n\nint main() {\n    double x1 = 3, y1 = 4;\n    double x2 = 6, y2 = 8;\n    double distance = euclidean_distance(x1, y1, x2, y2);\n    cout << 'Distance: ' << distance << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Construct a function in JavaScript that adds an element to the beginning of an array and shifts existing elements to the right.",
        "input": "[1, 2, 3], 0",
        "response": "function prependElement(arr, element) {\n    for (let i = arr.length; i > 0; i--) {\n        arr[i] = arr[i - 1];\n    }\n    arr[0] = element;\n    return arr;\n}\n\nconst inputArr = [1, 2, 3];\nconst result = prependElement(inputArr, 0);\nconsole.log(result);",
        "output": "function prependElement(arr, element) {\n    for (let i = arr.length; i > 0; i--) {\n        arr[i] = arr[i - 1];\n    }\n    arr[0] = element;\n    return arr;\n}\n\nconst inputArr = [1, 2, 3];\nconst result = prependElement(inputArr, 0);\nconsole.log(result);"
    },
    {
        "instruction": "Design a function in C++ that takes a vector of integers and returns the average of the even numbers.",
        "input": "{2, 7, 4, 9, 10}",
        "response": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ndouble evenAverage(const vector<int>& nums) {\n    double sum = 0;\n    int count = 0;\n    for (const int& num : nums) {\n        if (num % 2 == 0) {\n            sum += num;\n            count++;\n        }\n    }\n    return count == 0 ? 0 : sum / count;\n}\n\nint main() {\n    vector<int> nums = {2, 7, 4, 9, 10};\n    double avg = evenAverage(nums);\n    cout << \"The average of even numbers is: \" << avg << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\ndouble evenAverage(const vector<int>& nums) {\n    double sum = 0;\n    int count = 0;\n    for (const int& num : nums) {\n        if (num % 2 == 0) {\n            sum += num;\n            count++;\n        }\n    }\n    return count == 0 ? 0 : sum / count;\n}\n\nint main() {\n    vector<int> nums = {2, 7, 4, 9, 10};\n    double avg = evenAverage(nums);\n    cout << \"The average of even numbers is: \" << avg << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Show me the usage of the Python requests library to make a GET request to a given URL and print the status code.",
        "input": "https://api.example.com/data",
        "response": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\n\nprint('Status code:', response.status_code)",
        "output": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\n\nprint('Status code:', response.status_code)"
    },
    {
        "instruction": "What would be a simple shell script to iterate over a list of file names and remove each file?",
        "input": "file1.txt, file2.txt, file3.txt",
        "response": "#!/bin/bash\n\nfile_list=\"file1.txt file2.txt file3.txt\"\n\nfor file in $file_list;\ndo\n  rm $file\ndone",
        "output": "#!/bin/bash\n\nfile_list=\"file1.txt file2.txt file3.txt\"\n\nfor file in $file_list;\ndo\n  rm $file\ndone"
    },
    {
        "instruction": "Construct a JavaScript function that takes a string and returns an object with the frequency of each character in the string.",
        "input": "counthefrequency",
        "response": "function charFrequency(str) {\n    let freq = {};\n\n    for (let char of str) {\n        if (freq[char]) {\n            freq[char]++;\n        } else {\n            freq[char] = 1;\n        }\n    }\n\n    return freq;\n}\n\nconst result = charFrequency('counthefrequency');\nconsole.log(result);",
        "output": "function charFrequency(str) {\n    let freq = {};\n\n    for (let char of str) {\n        if (freq[char]) {\n            freq[char]++;\n        } else {\n            freq[char] = 1;\n        }\n    }\n\n    return freq;\n}\n\nconst result = charFrequency('counthefrequency');\nconsole.log(result);"
    },
    {
        "instruction": "Write a Python function that converts a hexadecimal string to its decimal equivalent.",
        "input": "hex_string = '1A3F'",
        "response": "def hex_to_decimal(hex_string):\n    return int(hex_string, 16)\n\nhex_string = '1A3F'\ndecimal_value = hex_to_decimal(hex_string)\nprint(decimal_value)",
        "output": "def hex_to_decimal(hex_string):\n    return int(hex_string, 16)\n\nhex_string = '1A3F'\ndecimal_value = hex_to_decimal(hex_string)\nprint(decimal_value)"
    },
    {
        "instruction": "Create a Java class with a method to find the length of the longest substring without repeating characters in a given string.",
        "input": "String inputString = 'abcabcbb';",
        "response": "public class LongestSubstring {\n    public static int lengthOfLongestSubstring(String s) {\n        int maxLength = 0;\n        Set<Character> uniqueChars = new HashSet<>();\n        int i = 0;\n        int j = 0;\n\n        while (j < s.length()) {\n            if (!uniqueChars.contains(s.charAt(j))) {\n                uniqueChars.add(s.charAt(j));\n                j++;\n                maxLength = Math.max(maxLength, j - i);\n            } else {\n                uniqueChars.remove(s.charAt(i));\n                i++;\n            }\n        }\n        return maxLength;\n    }\n\n    public static void main(String[] args) {\n        String inputString = 'abcabcbb';\n        int result = lengthOfLongestSubstring(inputString);\n        System.out.println(result);\n    }\n}",
        "output": "public class LongestSubstring {\n    public static int lengthOfLongestSubstring(String s) {\n        int maxLength = 0;\n        Set<Character> uniqueChars = new HashSet<>();\n        int i = 0;\n        int j = 0;\n\n        while (j < s.length()) {\n            if (!uniqueChars.contains(s.charAt(j))) {\n                uniqueChars.add(s.charAt(j));\n                j++;\n                maxLength = Math.max(maxLength, j - i);\n            } else {\n                uniqueChars.remove(s.charAt(i));\n                i++;\n            }\n        }\n        return maxLength;\n    }\n\n    public static void main(String[] args) {\n        String inputString = 'abcabcbb';\n        int result = lengthOfLongestSubstring(inputString);\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "How would you implement a Python function that checks whether a given string is a palindrome or not?",
        "input": "input_string = 'madam'",
        "response": "def is_palindrome(input_string):\n    input_string = input_string.lower()\n    reversed_string = input_string[::-1]\n    return input_string == reversed_string\n\ninput_string = 'madam'\nprint(is_palindrome(input_string))",
        "output": "def is_palindrome(input_string):\n    input_string = input_string.lower()\n    reversed_string = input_string[::-1]\n    return input_string == reversed_string\n\ninput_string = 'madam'\nprint(is_palindrome(input_string))"
    },
    {
        "instruction": "Create a shell script to count the number of files in a directory, excluding hidden files.",
        "input": "directory='/path/to/directory'",
        "response": "#!/bin/bash\n\ndirectory='/path/to/directory'\n\nfile_count=$(find \"$directory\" -type f ! -name '.*' | wc -l)\necho \"Number of files (excluding hidden files) in $directory: $file_count\"",
        "output": "#!/bin/bash\n\ndirectory='/path/to/directory'\n\nfile_count=$(find \"$directory\" -type f ! -name '.*' | wc -l)\necho \"Number of files (excluding hidden files) in $directory: $file_count\""
    },
    {
        "instruction": "Create a JavaScript function that takes an array of strings and removes all duplicates, returning a new array.",
        "input": "['apple', 'orange', 'banana', 'apple', 'orange']",
        "response": "function removeDuplicates(arr) {\n  return Array.from(new Set(arr));\n}\n\n// Usage: removeDuplicates(['apple', 'orange', 'banana', 'apple', 'orange']);",
        "output": "function removeDuplicates(arr) {\n  return Array.from(new Set(arr));\n}\n\n// Usage: removeDuplicates(['apple', 'orange', 'banana', 'apple', 'orange']);"
    },
    {
        "instruction": "In C++, write a program to find the median of a given array. Your function should return the median as a double value if the array's length is even, otherwise return the middle element as a single integer.",
        "input": "{5, 15, 1, 7, 4}",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\ndouble findMedian(std::vector<int> arr) {\n  size_t size = arr.size();\n  std::sort(arr.begin(), arr.end());\n\n  if (size % 2 == 0) {\n    return (arr[size / 2 - 1] + arr[size / 2]) / 2.0;\n  } else {\n    return arr[size / 2];\n  }\n}\n\n// Usage: std::vector<int> data = {5, 15, 1, 7, 4};\n//        std::cout << findMedian(data) << std::endl;",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\ndouble findMedian(std::vector<int> arr) {\n  size_t size = arr.size();\n  std::sort(arr.begin(), arr.end());\n\n  if (size % 2 == 0) {\n    return (arr[size / 2 - 1] + arr[size / 2]) / 2.0;\n  } else {\n    return arr[size / 2];\n  }\n}\n\n// Usage: std::vector<int> data = {5, 15, 1, 7, 4};\n//        std::cout << findMedian(data) << std::endl;"
    },
    {
        "instruction": "How can you write a Python code to calculate the factorial of a positive integer using recursion?",
        "input": "5",
        "response": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)\n\n# Usage: print(factorial(5))",
        "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)\n\n# Usage: print(factorial(5))"
    },
    {
        "instruction": "Write a PHP function that takes a string and reverses it using a loop.",
        "input": "'Hello, world!'",
        "response": "<?php\n\nfunction reverseString($str) {\n  $reversed = '';\n  $length = strlen($str);\n\n  for ($i = $length - 1; $i >= 0; $i--) {\n    $reversed .= $str[$i];\n  }\n\n  return $reversed;\n}\n\n// Usage: echo reverseString('Hello, world!');\n?>",
        "output": "<?php\n\nfunction reverseString($str) {\n  $reversed = '';\n  $length = strlen($str);\n\n  for ($i = $length - 1; $i >= 0; $i--) {\n    $reversed .= $str[$i];\n  }\n\n  return $reversed;\n}\n\n// Usage: echo reverseString('Hello, world!');\n?>"
    },
    {
        "instruction": "Create a Python function that receives a string and returns the count of vowels and consonants separately.",
        "input": "",
        "response": "def count_vowels_consonants(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowel_count = sum(1 for c in s.lower() if c in vowels)\n    consonant_count = sum(1 for c in s.lower() if c in consonants)\n    return vowel_count, consonant_count",
        "output": "def count_vowels_consonants(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowel_count = sum(1 for c in s.lower() if c in vowels)\n    consonant_count = sum(1 for c in s.lower() if c in consonants)\n    return vowel_count, consonant_count"
    },
    {
        "instruction": "In Java, write a method to calculate and return the square of a given number using the following method signature: public static int square(int number).",
        "input": "",
        "response": "public static int square(int number) {\n    return number * number;\n}",
        "output": "public static int square(int number) {\n    return number * number;\n}"
    },
    {
        "instruction": "What is the equivalent code of the following JavaScript arrow function in Python? const add = (x, y) => x + y;",
        "input": "",
        "response": "add = lambda x, y: x + y",
        "output": "add = lambda x, y: x + y"
    },
    {
        "instruction": "Implement a C++ function that takes a filename as a parameter and reads and returns the contents of the file as a string. Use the following function signature: std::string read_file_contents(std::string filename);",
        "input": "",
        "response": "#include <fstream>\n#include <sstream>\n\nstd::string read_file_contents(std::string filename) {\n    std::ifstream file(filename);\n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    return buffer.str();\n}",
        "output": "#include <fstream>\n#include <sstream>\n\nstd::string read_file_contents(std::string filename) {\n    std::ifstream file(filename);\n    std::stringstream buffer;\n    buffer << file.rdbuf();\n    file.close();\n    return buffer.str();\n}"
    },
    {
        "instruction": "Write a Python function that reorders a given string by moving all vowels to the leftmost position.",
        "input": "example_string = 'construction'",
        "response": "def move_vowels_left(s):\n    vowels = 'AEIOUaeiou'\n    sorted_str = ''.join(sorted(s, key=lambda x: x not in vowels))\n    return sorted_str",
        "output": "def move_vowels_left(s):\n    vowels = 'AEIOUaeiou'\n    sorted_str = ''.join(sorted(s, key=lambda x: x not in vowels))\n    return sorted_str"
    },
    {
        "instruction": "Create a Java method to find the longest increasing subsequence in an array of integers.",
        "input": "int[] arr = {10, 22, 9, 33, 21, 50, 41, 60};",
        "response": "public int longestIncreasingSubsequence(int[] arr) {\n    int[] dp = new int[arr.length];\n    int max = 0;\n\n    for (int i = 0; i < arr.length; i++) {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n            }\n        }\n        max = Math.max(max, dp[i]);\n    }\n\n    return max;\n}",
        "output": "public int longestIncreasingSubsequence(int[] arr) {\n    int[] dp = new int[arr.length];\n    int max = 0;\n\n    for (int i = 0; i < arr.length; i++) {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n            }\n        }\n        max = Math.max(max, dp[i]);\n    }\n\n    return max;\n}"
    },
    {
        "instruction": "How would you write a C++ program for extracting the maximum and minimum value from a vector of integers?",
        "input": "std::vector<int> v = {5, 10, 15, 20, -5};",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> v = {5, 10, 15, 20, -5};\n    int max_val = *std::max_element(v.begin(), v.end());\n    int min_val = *std::min_element(v.begin(), v.end());\n\n    std::cout << \"Max: \" << max_val << \"\\n\" << \"Min: \" << min_val << \"\\n\";\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> v = {5, 10, 15, 20, -5};\n    int max_val = *std::max_element(v.begin(), v.end());\n    int min_val = *std::min_element(v.begin(), v.end());\n\n    std::cout << \"Max: \" << max_val << \"\\n\" << \"Min: \" << min_val << \"\\n\";\n    return 0;\n}"
    },
    {
        "instruction": "Construct a Bash script for renaming every file with extension .txt in the current directory to .bak.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *.txt; do\n    base=${file%.txt}\n    mv \"$file\" \"$base.bak\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt; do\n    base=${file%.txt}\n    mv \"$file\" \"$base.bak\"\ndone"
    },
    {
        "instruction": "Create a JavaScript function to filter an array containing integers but return only even numbers.",
        "input": "[4, 7, 9, 2, 6]",
        "response": "function filterEvenNumbers(arr) {\n  return arr.filter(number => number % 2 === 0);\n}\n\nconst result = filterEvenNumbers([4, 7, 9, 2, 6]);\nconsole.log(result);",
        "output": "function filterEvenNumbers(arr) {\n  return arr.filter(number => number % 2 === 0);\n}\n\nconst result = filterEvenNumbers([4, 7, 9, 2, 6]);\nconsole.log(result);"
    },
    {
        "instruction": "Could you write a Python function that accepts a string and returns the string with its characters sorted alphabetically?",
        "input": "developer",
        "response": "def sort_string(string):\n    return ''.join(sorted(string))\n\nsorted_string = sort_string('developer')\nprint(sorted_string)",
        "output": "def sort_string(string):\n    return ''.join(sorted(string))\n\nsorted_string = sort_string('developer')\nprint(sorted_string)"
    },
    {
        "instruction": "What is an example of a Ruby script that reverses the order of words in a given sentence?",
        "input": "This is an example",
        "response": "def reverse_words(sentence)\n  sentence.split(' ').reverse.join(' ')\nend\n\nreversed_sentence = reverse_words('This is an example')\nputs reversed_sentence",
        "output": "def reverse_words(sentence)\n  sentence.split(' ').reverse.join(' ')\nend\n\nreversed_sentence = reverse_words('This is an example')\nputs reversed_sentence"
    },
    {
        "instruction": "Show me how to write a Java program that prompts the user to input two integers and then calculates the Greatest Common Divisor (GCD) of those integers.",
        "input": "56, 98",
        "response": "import java.util.Scanner;\n\nclass GCD {\n    public static int findGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return findGCD(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print('Enter two integers: ');\n        int num1 = scanner.nextInt();\n        int num2 = scanner.nextInt();\n        int gcd = findGCD(num1, num2);\n        System.out.println('Greatest Common Divisor: ' + gcd);\n        scanner.close();\n    }\n}",
        "output": "import java.util.Scanner;\n\nclass GCD {\n    public static int findGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return findGCD(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print('Enter two integers: ');\n        int num1 = scanner.nextInt();\n        int num2 = scanner.nextInt();\n        int gcd = findGCD(num1, num2);\n        System.out.println('Greatest Common Divisor: ' + gcd);\n        scanner.close();\n    }\n}"
    },
    {
        "instruction": "Create a Python function to calculate the area of a circle given its radius.",
        "input": "radius = 5",
        "response": "def area_of_circle(radius):\n    import math\n    return math.pi * radius * radius\n\nradius = 5\narea = area_of_circle(radius)\nprint(f'The area of the circle with radius {radius} is {area}')",
        "output": "def area_of_circle(radius):\n    import math\n    return math.pi * radius * radius\n\nradius = 5\narea = area_of_circle(radius)\nprint(f'The area of the circle with radius {radius} is {area}')"
    },
    {
        "instruction": "How can I create a linked list in JavaScript, where each node contains an integer value and a reference to the next node?",
        "input": "values = [3, 5, 1, 7]",
        "response": "class Node {\n    constructor(value, next = null) {\n        this.value = value;\n        this.next = next;\n    }\n}\n\nfunction createLinkedList(values) {\n    let head = null;\n    let tail = null;\n\n    for (let value of values) {\n        let node = new Node(value);\n\n        if (!head) {\n            head = node;\n        } else {\n            tail.next = node;\n        }\n\n        tail = node;\n    }\n\n    return head;\n}\n\nconst values = [3, 5, 1, 7];\nconst linkedList = createLinkedList(values);",
        "output": "class Node {\n    constructor(value, next = null) {\n        this.value = value;\n        this.next = next;\n    }\n}\n\nfunction createLinkedList(values) {\n    let head = null;\n    let tail = null;\n\n    for (let value of values) {\n        let node = new Node(value);\n\n        if (!head) {\n            head = node;\n        } else {\n            tail.next = node;\n        }\n\n        tail = node;\n    }\n\n    return head;\n}\n\nconst values = [3, 5, 1, 7];\nconst linkedList = createLinkedList(values);"
    },
    {
        "instruction": "Write a C++ program that takes an array of integers and prints out the sum of all the elements.",
        "input": "int arr[] = {2, 4, 6, 1, 3, 7};",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int arr[] = {2, 4, 6, 1, 3, 7};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int sum = 0;\n\n    for(int i = 0; i < size; ++i) {\n        sum += arr[i];\n    }\n\n    cout << \"Sum of elements is: \" << sum << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int arr[] = {2, 4, 6, 1, 3, 7};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int sum = 0;\n\n    for(int i = 0; i < size; ++i) {\n        sum += arr[i];\n    }\n\n    cout << \"Sum of elements is: \" << sum << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Provide a shell script that counts the number of lines containing a given pattern in a given file.",
        "input": "file_name='example.log'\npattern='error'",
        "response": "#!/bin/bash\n\nfile_name='example.log'\npattern='error'\n\nline_count=$(grep -c \"$pattern\" \"$file_name\")\necho \"Number of lines containing the pattern '$pattern': $line_count\"",
        "output": "#!/bin/bash\n\nfile_name='example.log'\npattern='error'\n\nline_count=$(grep -c \"$pattern\" \"$file_name\")\necho \"Number of lines containing the pattern '$pattern': $line_count\""
    },
    {
        "instruction": "Implement a recursive function in Python that calculates the length of a string without using the len() function.",
        "input": "sample_string = 'Recursion is Fun!'",
        "response": "def string_length_recursive(s):\n    if not s:\n        return 0\n    return 1 + string_length_recursive(s[1:])\n\nsample_string = 'Recursion is Fun!'\nresult = string_length_recursive(sample_string)\nprint(result)",
        "output": "def string_length_recursive(s):\n    if not s:\n        return 0\n    return 1 + string_length_recursive(s[1:])\n\nsample_string = 'Recursion is Fun!'\nresult = string_length_recursive(sample_string)\nprint(result)"
    },
    {
        "instruction": "Create a C++ function that takes two integers as inputs and returns their greatest common divisor (GCD) using the Euclidean algorithm.",
        "input": "int a = 28;\nint b = 42;",
        "response": "#include<iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}\n\nint main() {\n    int a = 28;\n    int b = 42;\n    std::cout << 'GCD of ' << a << ' and ' << b << ' is ' << gcd(a, b) << std::endl;\n    return 0;\n}",
        "output": "#include<iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}\n\nint main() {\n    int a = 28;\n    int b = 42;\n    std::cout << 'GCD of ' << a << ' and ' << b << ' is ' << gcd(a, b) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Java code that finds the average of an array of integers, and print the result.",
        "input": "int[] numbers = {10, 20, 30, 40, 50};",
        "response": "public class AverageCalculator {\n\n    public static void main(String[] args) {\n\n        int[] numbers = {10, 20, 30, 40, 50};\n        int sum = 0;\n\n        for (int num : numbers) {\n            sum += num;\n        }\n\n        double average = (double) sum / numbers.length;\n        System.out.println('The average is: ' + average);\n    }\n}",
        "output": "public class AverageCalculator {\n\n    public static void main(String[] args) {\n\n        int[] numbers = {10, 20, 30, 40, 50};\n        int sum = 0;\n\n        for (int num : numbers) {\n            sum += num;\n        }\n\n        double average = (double) sum / numbers.length;\n        System.out.println('The average is: ' + average);\n    }\n}"
    },
    {
        "instruction": "Given an input array of strings, write a JavaScript function to capitalize the first letter of each string.",
        "input": "const inputArray = ['apple', 'banana', 'cherry'];",
        "response": "function capitalizeFirstLetter(array) {\n    return array.map(string => {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n}\n\nconst inputArray = ['apple', 'banana', 'cherry'];\nconst resultArray = capitalizeFirstLetter(inputArray);\nconsole.log(resultArray);",
        "output": "function capitalizeFirstLetter(array) {\n    return array.map(string => {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    });\n}\n\nconst inputArray = ['apple', 'banana', 'cherry'];\nconst resultArray = capitalizeFirstLetter(inputArray);\nconsole.log(resultArray);"
    },
    {
        "instruction": "In C++, write a simple program that utilizes an enum class for color and prints the value of a color.",
        "input": "{\"colors\": [\"RED\", \"GREEN\", \"BLUE\"]}",
        "response": "#include <iostream>\n\nenum class Color { RED, GREEN, BLUE };\n\nint main() {\n    Color myColor = Color::GREEN;\n    std::cout << \"Value of myColor: \" << static_cast<int>(myColor) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nenum class Color { RED, GREEN, BLUE };\n\nint main() {\n    Color myColor = Color::GREEN;\n    std::cout << \"Value of myColor: \" << static_cast<int>(myColor) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you modify the following JavaScript code snippet to catch any errors and log them in the console?",
        "input": "async function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  return data;\n}",
        "response": "async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('An error occurred:', error);\n  }\n}",
        "output": "async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('An error occurred:', error);\n  }\n}"
    },
    {
        "instruction": "Examine the C# code below and identify potential issues in the implementation of the Singleton pattern.",
        "input": "public sealed class Singleton {\n    private static Singleton _instance = null;\n\n    private Singleton() { }\n\n    public static Singleton Instance {\n        get { return _instance ?? (_instance = new Singleton()); }\n    }\n}",
        "response": "The provided C# Singleton implementation is not thread-safe. Multiple threads could potentially create multiple instances of the Singleton class, causing unexpected behavior. Consider using the Lazy<T> approach or implementing double-checked locking to ensure thread safety.",
        "output": "The provided C# Singleton implementation is not thread-safe. Multiple threads could potentially create multiple instances of the Singleton class, causing unexpected behavior. Consider using the Lazy<T> approach or implementing double-checked locking to ensure thread safety."
    },
    {
        "instruction": "Given data in a .csv file with two columns, 'ID' and 'Name', write Python code to read the data and generate a list of dictionaries, where each dictionary maps 'ID' to a corresponding 'Name'.",
        "input": "ID,Name\n1,Alice\n2,Bob\n3,Carol",
        "response": "import csv\n\nfile_name = 'data.csv'\n\nwith open(file_name) as csvfile:\n    reader = csv.DictReader(csvfile)\n    id_name_list = [{row['ID']: row['Name']} for row in reader]\n\nprint(id_name_list)",
        "output": "import csv\n\nfile_name = 'data.csv'\n\nwith open(file_name) as csvfile:\n    reader = csv.DictReader(csvfile)\n    id_name_list = [{row['ID']: row['Name']} for row in reader]\n\nprint(id_name_list)"
    },
    {
        "instruction": "Design a Java method that accepts a string and returns the count of vowels in the string.",
        "input": "inputString: \"Hello World\"",
        "response": "public int countVowels(String inputString) {\n    int vowelCount = 0;\n    for (char ch : inputString.toLowerCase().toCharArray()) {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}\n\nint result = countVowels(\"Hello World\");\nSystem.out.println(result);",
        "output": "public int countVowels(String inputString) {\n    int vowelCount = 0;\n    for (char ch : inputString.toLowerCase().toCharArray()) {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}\n\nint result = countVowels(\"Hello World\");\nSystem.out.println(result);"
    },
    {
        "instruction": "Modify the following Python code snippet to raise an exception if the denominator is zero.",
        "input": "numerator = 10\ndenominator = 0\nresult = numerator / denominator",
        "response": "numerator = 10\ndenominator = 0\nif denominator == 0:\n    raise ZeroDivisionError('Denominator cannot be zero.')\nresult = numerator / denominator",
        "output": "numerator = 10\ndenominator = 0\nif denominator == 0:\n    raise ZeroDivisionError('Denominator cannot be zero.')\nresult = numerator / denominator"
    },
    {
        "instruction": "Explain step by step how the following JavaScript code works to sort an array of numbers in descending order.",
        "input": "const numbers = [5, 1, 8, 3];\nnumbers.sort((a, b) => b - a);",
        "response": "1. Declare an array 'numbers' containing the elements 5, 1, 8, and 3.\n2. Call the 'sort' method on the 'numbers' array, which rearranges its elements according to the provided comparison function.\n3. In the comparison function, two parameters 'a' and 'b' are used to represent any pair of elements in the array.\n4. The function returns the difference between 'b' and 'a' to sort the elements in descending order.\n5. If the difference between 'b' and 'a' is greater than 0, 'b' comes first; if it's less than 0, 'a' comes first; and if it's 0, they remain unchanged in order.\n6. The 'sort' method rearranges the elements in the 'numbers' array based on the comparison function's return value, resulting in a sorted array in descending order.",
        "output": "1. Declare an array 'numbers' containing the elements 5, 1, 8, and 3.\n2. Call the 'sort' method on the 'numbers' array, which rearranges its elements according to the provided comparison function.\n3. In the comparison function, two parameters 'a' and 'b' are used to represent any pair of elements in the array.\n4. The function returns the difference between 'b' and 'a' to sort the elements in descending order.\n5. If the difference between 'b' and 'a' is greater than 0, 'b' comes first; if it's less than 0, 'a' comes first; and if it's 0, they remain unchanged in order.\n6. The 'sort' method rearranges the elements in the 'numbers' array based on the comparison function's return value, resulting in a sorted array in descending order."
    },
    {
        "instruction": "In C++, write a function that takes two integers and returns their greatest common divisor (GCD) using the Euclidean algorithm.",
        "input": "a: 56, b: 98",
        "response": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int a = 56, b = 98;\n    std::cout << \"GCD of \" << a << \" and \" << b << \" is: \" << gcd(a, b) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int a = 56, b = 98;\n    std::cout << \"GCD of \" << a << \" and \" << b << \" is: \" << gcd(a, b) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java method that converts a given Fahrenheit temperature value to Celsius.",
        "input": "",
        "response": "public static double fahrenheitToCelsius(double fahrenheit) {\n    return (fahrenheit - 32) * 5 / 9;\n}",
        "output": "public static double fahrenheitToCelsius(double fahrenheit) {\n    return (fahrenheit - 32) * 5 / 9;\n}"
    },
    {
        "instruction": "Can you devise a Javascript function that takes an array of numbers and returns an array containing the square of each number?",
        "input": "",
        "response": "function squareArray(numbers) {\n    return numbers.map(number => number ** 2);\n}",
        "output": "function squareArray(numbers) {\n    return numbers.map(number => number ** 2);\n}"
    },
    {
        "instruction": "Explain how to reverse a string using a Python one-liner.",
        "input": "",
        "response": "You can reverse a string in Python using slicing with the following one-liner: `reversed_string = original_string[::-1]`.",
        "output": "You can reverse a string in Python using slicing with the following one-liner: `reversed_string = original_string[::-1]`."
    },
    {
        "instruction": "Correct the syntax error in the following C++ code snippet: `for (int i = 0; i < 10; i++ { cout << i; }`",
        "input": "",
        "response": "The corrected code should have a closing parenthesis after `i++`: `for (int i = 0; i < 10; i++) { cout << i; }`",
        "output": "The corrected code should have a closing parenthesis after `i++`: `for (int i = 0; i < 10; i++) { cout << i; }`"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers as input and returns the sum of the even integers.",
        "input": "[2, 5, 8, 11, 14]",
        "response": "function sumEvenNumbers(numbers) {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 === 0) {\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}",
        "output": "function sumEvenNumbers(numbers) {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 === 0) {\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Write a C++ program that reads a list of grades from the user and calculates and outputs the average grade.",
        "input": "Enter grades (enter -1 to quit): 90, 78, 92, 75, -1",
        "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> grades;\n    int grade;\n    double sum = 0;\n\n    cout << \"Enter grades (enter -1 to quit): \";\n    while (cin >> grade && grade != -1) {\n        grades.push_back(grade);\n    }\n\n    for (int g : grades) {\n        sum += g;\n    }\n\n    double average = sum / grades.size();\n    cout << \"Average grade: \" << average << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> grades;\n    int grade;\n    double sum = 0;\n\n    cout << \"Enter grades (enter -1 to quit): \";\n    while (cin >> grade && grade != -1) {\n        grades.push_back(grade);\n    }\n\n    for (int g : grades) {\n        sum += g;\n    }\n\n    double average = sum / grades.size();\n    cout << \"Average grade: \" << average << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "In Python, write a code snippet that changes the first element of a given list without modifying the original list.",
        "input": "Original list: [34, 67, 83, 20], New first element: 50",
        "response": "original_list = [34, 67, 83, 20]\nnew_first_element = 50\n\nnew_list = [new_first_element] + original_list[1:]",
        "output": "original_list = [34, 67, 83, 20]\nnew_first_element = 50\n\nnew_list = [new_first_element] + original_list[1:]"
    },
    {
        "instruction": "What's the proper way to declare and initialize a string variable to be used in a C# console application?",
        "input": "Sentence: Programming is fun!",
        "response": "using System;\n\nnamespace ConsoleApp {\n    class Program {\n        static void Main(string[] args) {\n            string sentence = \"Programming is fun!\";\n            Console.WriteLine(sentence);\n        }\n    }\n}",
        "output": "using System;\n\nnamespace ConsoleApp {\n    class Program {\n        static void Main(string[] args) {\n            string sentence = \"Programming is fun!\";\n            Console.WriteLine(sentence);\n        }\n    }\n}"
    },
    {
        "instruction": "Create a Python function to find the longest consecutive subsequence that is strictly increasing in a given list of integers.",
        "input": "[10, 11, 1, 2, 3, 1, 2, 3, 4, 5]",
        "response": "def longest_increasing_subsequence(arr):\n    max_len = 1\n    cur_len = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            cur_len += 1\n        else:\n            max_len = max(max_len, cur_len)\n            cur_len = 1\n\n    return max(max_len, cur_len)\n\n\ninput_list = [10, 11, 1, 2, 3, 1, 2, 3, 4, 5]\nresult = longest_increasing_subsequence(input_list)\nprint(result)",
        "output": "def longest_increasing_subsequence(arr):\n    max_len = 1\n    cur_len = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            cur_len += 1\n        else:\n            max_len = max(max_len, cur_len)\n            cur_len = 1\n\n    return max(max_len, cur_len)\n\n\ninput_list = [10, 11, 1, 2, 3, 1, 2, 3, 4, 5]\nresult = longest_increasing_subsequence(input_list)\nprint(result)"
    },
    {
        "instruction": "Translate this Java class into a JavaScript class: public class Vehicle { private String color; public Vehicle(String color) { this.color = color; } public String getColor() { return color; } }",
        "input": "",
        "response": "class Vehicle {\n    constructor(color) {\n        this.color = color;\n    }\n\n    getColor() {\n        return this.color;\n    }\n}",
        "output": "class Vehicle {\n    constructor(color) {\n        this.color = color;\n    }\n\n    getColor() {\n        return this.color;\n    }\n}"
    },
    {
        "instruction": "What is the output of the following Java code? public class Main { public static void main(String[] args) { Integer intObject = 10; int num = intObject; System.out.println(num); } }",
        "input": "",
        "response": "The output will be: '10'. In this code, an Integer object 'intObject' is created and assigned the value of 10. Then, the primitive int 'num' is assigned the value of 'intObject' using auto-unboxing. Finally, 'num' is printed, which will output '10'.",
        "output": "The output will be: '10'. In this code, an Integer object 'intObject' is created and assigned the value of 10. Then, the primitive int 'num' is assigned the value of 'intObject' using auto-unboxing. Finally, 'num' is printed, which will output '10'."
    },
    {
        "instruction": "Debug the given JavaScript code to resolve the error and make the 'getFullName' function work. const person = { firstName: 'John', lastName: 'Doe', getFullName: () => { return this.firstName + ' ' + this.lastName; } }; console.log(person.getFullName());",
        "input": "",
        "response": "const person = {\n    firstName: 'John',\n    lastName: 'Doe',\n    getFullName: function() {\n        return this.firstName + ' ' + this.lastName;\n    }\n};\nconsole.log(person.getFullName());",
        "output": "const person = {\n    firstName: 'John',\n    lastName: 'Doe',\n    getFullName: function() {\n        return this.firstName + ' ' + this.lastName;\n    }\n};\nconsole.log(person.getFullName());"
    },
    {
        "instruction": "Write a Python function that calculates the distance between two points using the Euclidean distance formula.",
        "input": "point1 = (3, 4)\npoint2 = (7, 8)",
        "response": "def euclidean_distance(point1, point2):\n    import math\n    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)\n\ndistance = euclidean_distance(point1, point2)\nprint(distance)",
        "output": "def euclidean_distance(point1, point2):\n    import math\n    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)\n\ndistance = euclidean_distance(point1, point2)\nprint(distance)"
    },
    {
        "instruction": "How can I check the Python version being used in the system using shell commands?",
        "input": "",
        "response": "import sys\nprint(f'Python {sys.version}')",
        "output": "import sys\nprint(f'Python {sys.version}')"
    },
    {
        "instruction": "Create a Java class for a simple, immutable Student object. The class should have a constructor, private final fields for name and age, and public getters for those fields.",
        "input": "",
        "response": "public class Student {\n    private final String name;\n    private final int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}",
        "output": "public class Student {\n    private final String name;\n    private final int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}"
    },
    {
        "instruction": "Given the following JavaScript code, identify the root cause of the error and fix it.",
        "input": "function oddNumbers(numbers) {\n  var odd = [];\n  for (var i = 0; i < numbers.length); i++) {\n    if (numbers[i] % 2 !== 0) {\n      odd.push(numbers[i]);\n    }\n  }\n  return odd;\n}\n\nconsole.log(oddNumbers([0, 1, 2, 3, 4, 5]));",
        "response": "function oddNumbers(numbers) {\n  var odd = [];\n  for (var i = 0; i < numbers.length; i++) { // Remove the extra ')' after 'length'\n    if (numbers[i] % 2 !== 0) {\n      odd.push(numbers[i]);\n    }\n  }\n  return odd;\n}\n\nconsole.log(oddNumbers([0, 1, 2, 3, 4, 5]));",
        "output": "function oddNumbers(numbers) {\n  var odd = [];\n  for (var i = 0; i < numbers.length; i++) { // Remove the extra ')' after 'length'\n    if (numbers[i] % 2 !== 0) {\n      odd.push(numbers[i]);\n    }\n  }\n  return odd;\n}\n\nconsole.log(oddNumbers([0, 1, 2, 3, 4, 5]));"
    },
    {
        "instruction": "Implement a Java method that replaces all occurrences of a word with another word in a given string, maintaining the original capitalization.",
        "input": "Original: \"I like walking my dog. The dog is really friendly.\" Replace 'dog' with 'cat'",
        "response": "public String replaceWords(String original, String from, String to) {\n\tStringBuilder result = new StringBuilder();\n\tString[] words = original.split(\"\\\\s+\");\n\tfor (String word : words) {\n\t\tif (word.equalsIgnoreCase(from)) {\n\t\t\tresult.append(word.charAt(0) == word.toUpperCase().charAt(0) ? to.substring(0, 1).toUpperCase() + to.substring(1) : to);\n\t\t} else {\n\t\t\tresult.append(word);\n\t\t}\n\t\tresult.append(' ');\n\t}\n\treturn result.toString().trim();\n}",
        "output": "public String replaceWords(String original, String from, String to) {\n\tStringBuilder result = new StringBuilder();\n\tString[] words = original.split(\"\\\\s+\");\n\tfor (String word : words) {\n\t\tif (word.equalsIgnoreCase(from)) {\n\t\t\tresult.append(word.charAt(0) == word.toUpperCase().charAt(0) ? to.substring(0, 1).toUpperCase() + to.substring(1) : to);\n\t\t} else {\n\t\t\tresult.append(word);\n\t\t}\n\t\tresult.append(' ');\n\t}\n\treturn result.toString().trim();\n}"
    },
    {
        "instruction": "Write a C++ function that calculates the fibonacci sequence using memoization.",
        "input": "",
        "response": "#include <unordered_map>\n\nlong long fibonacci(int n, std::unordered_map<int, long long>& memo) {\n\tif (memo.find(n) != memo.end()) return memo[n];\n\tif (n <= 1) return n;\n\tmemo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n\treturn memo[n];\n}\n\nlong long fibonacci(int n) {\n\tstd::unordered_map<int, long long> memo;\n\treturn fibonacci(n, memo);\n}",
        "output": "#include <unordered_map>\n\nlong long fibonacci(int n, std::unordered_map<int, long long>& memo) {\n\tif (memo.find(n) != memo.end()) return memo[n];\n\tif (n <= 1) return n;\n\tmemo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n\treturn memo[n];\n}\n\nlong long fibonacci(int n) {\n\tstd::unordered_map<int, long long> memo;\n\treturn fibonacci(n, memo);\n}"
    },
    {
        "instruction": "How would you implement the quicksort algorithm in JavaScript?",
        "input": "",
        "response": "function quickSort(arr) {\n\tif (arr.length <= 1) {\n\t\treturn arr;\n\t}\n\n\tconst pivot = arr[arr.length - 1];\n\tconst left = [];\n\tconst right = [];\n\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] < pivot) {\n\t\t\tleft.push(arr[i]);\n\t\t} else {\n\t\t\tright.push(arr[i]);\n\t\t}\n\t}\n\n\treturn [...quickSort(left), pivot, ...quickSort(right)];\n}",
        "output": "function quickSort(arr) {\n\tif (arr.length <= 1) {\n\t\treturn arr;\n\t}\n\n\tconst pivot = arr[arr.length - 1];\n\tconst left = [];\n\tconst right = [];\n\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] < pivot) {\n\t\t\tleft.push(arr[i]);\n\t\t} else {\n\t\t\tright.push(arr[i]);\n\t\t}\n\t}\n\n\treturn [...quickSort(left), pivot, ...quickSort(right)];\n}"
    },
    {
        "instruction": "Create a shell script to count the number of lines in a text file.",
        "input": "Filename: example.txt",
        "response": "#!/bin/bash\n\nfilename=\"$1\"\ncount=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $count\"",
        "output": "#!/bin/bash\n\nfilename=\"$1\"\ncount=$(wc -l < \"$filename\")\necho \"Number of lines in $filename: $count\""
    },
    {
        "instruction": "Write a Python function that calculates the nth Fibonacci number using recursion.",
        "input": "",
        "response": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
        "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"
    },
    {
        "instruction": "How would you fix the following Java code to calculate the factorial of a non-negative integer correctly?",
        "input": "public int factorial(int n) {\n    if (n == 0) return 0;\n    return n * factorial(n - 1);\n}",
        "response": "public int factorial(int n) {\n    if (n == 0) return 1; // change this line to return 1 instead of 0\n    return n * factorial(n - 1);\n}",
        "output": "public int factorial(int n) {\n    if (n == 0) return 1; // change this line to return 1 instead of 0\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Translate the given JavaScript function that reverses a string into an equivalent Python function.",
        "input": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}",
        "response": "def reverse_string(str):\n    return ''.join(reversed(str))",
        "output": "def reverse_string(str):\n    return ''.join(reversed(str))"
    },
    {
        "instruction": "What would be the output of the following C++ program?",
        "input": "#include<iostream>\nusing namespace std;\nint main() {\n    int x = 10;\n    int *ptr = &x;\n    cout << *ptr << endl;\n    return 0;\n}",
        "response": "10",
        "output": "10"
    },
    {
        "instruction": "Write a shell script to print the size of each file in a directory in a human-readable format, sorted by size in descending order.",
        "input": "",
        "response": "#!/bin/bash\n\ndu -sh * | sort -hr",
        "output": "#!/bin/bash\n\ndu -sh * | sort -hr"
    },
    {
        "instruction": "How would you refactor the following JavaScript code to use the spread operator for concatenating arrays? const newArray = array1.concat(array2);",
        "input": "const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst newArray = array1.concat(array2);",
        "response": "const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst newArray = [...array1, ...array2];",
        "output": "const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst newArray = [...array1, ...array2];"
    },
    {
        "instruction": "Provide a Python function to calculate the average of odd numbers in a given list.",
        "input": "numbers = [1, 2, 3, 4, 5]",
        "response": "def avg_of_odd_numbers(numbers):\n    odd_numbers = [n for n in numbers if n % 2 != 0]\n    return sum(odd_numbers) / len(odd_numbers)\n\nnumbers = [1, 2, 3, 4, 5]\nprint(avg_of_odd_numbers(numbers))",
        "output": "def avg_of_odd_numbers(numbers):\n    odd_numbers = [n for n in numbers if n % 2 != 0]\n    return sum(odd_numbers) / len(odd_numbers)\n\nnumbers = [1, 2, 3, 4, 5]\nprint(avg_of_odd_numbers(numbers))"
    },
    {
        "instruction": "Fix the SQL query to display all records from table1 and table2 where table1's 'id' column matches table2's 'table1_id' column.",
        "input": "SELECT * FROM table1, table2 WHERE table1.id = table2.id;",
        "response": "SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.table1_id;",
        "output": "SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.table1_id;"
    },
    {
        "instruction": "Write a Python function to find the longest common prefix of a given list of strings.",
        "input": "['flower', 'flow', 'flight']",
        "response": "def longest_common_prefix(strings):\n    if not strings:\n        return ''\n    min_length = min(len(s) for s in strings)\n    common_prefix = ''\n    for i in range(min_length):\n        char = strings[0][i]\n        if all(s[i] == char for s in strings):\n            common_prefix += char\n        else:\n            break\n    return common_prefix\n\nstrings = ['flower', 'flow', 'flight']\nresult = longest_common_prefix(strings)\nprint(result)",
        "output": "def longest_common_prefix(strings):\n    if not strings:\n        return ''\n    min_length = min(len(s) for s in strings)\n    common_prefix = ''\n    for i in range(min_length):\n        char = strings[0][i]\n        if all(s[i] == char for s in strings):\n            common_prefix += char\n        else:\n            break\n    return common_prefix\n\nstrings = ['flower', 'flow', 'flight']\nresult = longest_common_prefix(strings)\nprint(result)"
    },
    {
        "instruction": "In C++, implement a function that takes two integers and returns their greatest common divisor.",
        "input": "12, 16",
        "response": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 12;\n    int num2 = 16;\n    std::cout << \"The GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 12;\n    int num2 = 16;\n    std::cout << \"The GCD of \" << num1 << \" and \" << num2 << \" is: \" << gcd(num1, num2) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How can I create a JavaScript function that calculates the sum of odd numbers in an input array?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function sumOddNumbers(arr) {\n    let sum = 0;\n    for (const num of arr) {\n        if (num % 2 !== 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\nlet inputArray = [1, 2, 3, 4, 5];\nlet result = sumOddNumbers(inputArray);\nconsole.log(result);",
        "output": "function sumOddNumbers(arr) {\n    let sum = 0;\n    for (const num of arr) {\n        if (num % 2 !== 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\nlet inputArray = [1, 2, 3, 4, 5];\nlet result = sumOddNumbers(inputArray);\nconsole.log(result);"
    },
    {
        "instruction": "Create a Shell script that takes a directory name as an argument and counts the number of files in that directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndirectory=$1\n\nif [ -d \"$directory\" ]; then\n    count=$(find \"$directory\" -type f | wc -l)\n    echo \"There are $count files in the directory $directory\"\nelse\n    echo \"Error: Directory $directory does not exist.\"\nfi",
        "output": "#!/bin/bash\n\ndirectory=$1\n\nif [ -d \"$directory\" ]; then\n    count=$(find \"$directory\" -type f | wc -l)\n    echo \"There are $count files in the directory $directory\"\nelse\n    echo \"Error: Directory $directory does not exist.\"\nfi"
    },
    {
        "instruction": "Write a Python function to get the first n Fibonacci numbers in a list.",
        "input": "n = 10",
        "response": "def fibonacci(n):\n    fib_series = [0, 1]\n    for i in range(2, n):\n        fib_series.append(fib_series[i-1] + fib_series[i-2])\n    return fib_series[:n]\n\nfib_numbers = fibonacci(10)\nprint(fib_numbers)",
        "output": "def fibonacci(n):\n    fib_series = [0, 1]\n    for i in range(2, n):\n        fib_series.append(fib_series[i-1] + fib_series[i-2])\n    return fib_series[:n]\n\nfib_numbers = fibonacci(10)\nprint(fib_numbers)"
    },
    {
        "instruction": "Java code: Detect and remove duplicates from an ArrayList.",
        "input": "import java.util.ArrayList;\n\nArrayList<String> names = new ArrayList<String>();\nnames.add(\"Alice\");\nnames.add(\"Bob\");\nnames.add(\"Alice\");\nnames.add(\"Eve\");",
        "response": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic static <T> ArrayList<T> removeDuplicates(ArrayList<T> list) {\n    Set<T> set = new HashSet<>(list);\n    list.clear();\n    list.addAll(set);\n    return list;\n}\n\nArrayList<String> names = new ArrayList<String>();\nnames.add(\"Alice\");\nnames.add(\"Bob\");\nnames.add(\"Alice\");\nnames.add(\"Eve\");\n\nArrayList<String> uniqueNames = removeDuplicates(names);\nSystem.out.println(uniqueNames);",
        "output": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic static <T> ArrayList<T> removeDuplicates(ArrayList<T> list) {\n    Set<T> set = new HashSet<>(list);\n    list.clear();\n    list.addAll(set);\n    return list;\n}\n\nArrayList<String> names = new ArrayList<String>();\nnames.add(\"Alice\");\nnames.add(\"Bob\");\nnames.add(\"Alice\");\nnames.add(\"Eve\");\n\nArrayList<String> uniqueNames = removeDuplicates(names);\nSystem.out.println(uniqueNames);"
    },
    {
        "instruction": "Create a shell script to delete all files in a directory older than 30 days.",
        "input": "directory_path=\"/path/to/directory\"",
        "response": "#!/bin/bash\ndirectory_path=\"/path/to/directory\"\nfind \"$directory_path\" -type f -mtime +30 -exec rm {} \\;",
        "output": "#!/bin/bash\ndirectory_path=\"/path/to/directory\"\nfind \"$directory_path\" -type f -mtime +30 -exec rm {} \\;"
    },
    {
        "instruction": "How can I compare two strings in C and print \"%s is the longest string\"?",
        "input": "char string1[] = \"Hello\";\nchar string2[] = \"World\";",
        "response": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char string1[] = \"Hello\";\n    char string2[] = \"World\";\n    char *longest_string;\n    \n    if (strlen(string1) > strlen(string2)) {\n        longest_string = string1;\n    } else {\n        longest_string = string2;\n    }\n\n    printf(\"%s is the longest string\", longest_string);\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char string1[] = \"Hello\";\n    char string2[] = \"World\";\n    char *longest_string;\n    \n    if (strlen(string1) > strlen(string2)) {\n        longest_string = string1;\n    } else {\n        longest_string = string2;\n    }\n\n    printf(\"%s is the longest string\", longest_string);\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function that, given a list of integers, returns the sum of all even numbers in the list.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\nexample_list = [1, 2, 3, 4, 5, 6]\nresult = sum_even_numbers(example_list)\nprint(result)",
        "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\nexample_list = [1, 2, 3, 4, 5, 6]\nresult = sum_even_numbers(example_list)\nprint(result)"
    },
    {
        "instruction": "Identify and fix the syntax error in the given C++ code snippet.",
        "input": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::sndl;\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Can you provide an example of how to use Python's requests library to make a GET request to a given URL and print the response content?",
        "input": "URL: https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print(response.content)\nelse:\n    print(f'Error: {response.status_code}')",
        "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    print(response.content)\nelse:\n    print(f'Error: {response.status_code}')"
    },
    {
        "instruction": "Translate the following JavaScript code that calculates the factorial of a number into an equivalent Python code.",
        "input": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nconsole.log(factorial(5));",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))"
    },
    {
        "instruction": "Create a JavaScript function that takes a string input, splits it by spaces, and returns the count of words.",
        "input": "This is a test string",
        "response": "function countWords(text) {\n    let words = text.split(' ');\n    return words.length;\n}\n\nlet input = 'This is a test string';\nlet wordCount = countWords(input);\nconsole.log(wordCount);",
        "output": "function countWords(text) {\n    let words = text.split(' ');\n    return words.length;\n}\n\nlet input = 'This is a test string';\nlet wordCount = countWords(input);\nconsole.log(wordCount);"
    },
    {
        "instruction": "Implement Bubble Sort algorithm in Java to sort an array of integers in ascending order.",
        "input": "int[] numbers = {4, 3, 8, 1, 6};",
        "response": "public class BubbleSort {\n    public static void main(String[] args) {\n        int[] numbers = {4, 3, 8, 1, 6};\n        bubbleSort(numbers);\n        System.out.println(Arrays.toString(numbers));\n    }\n\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n}",
        "output": "public class BubbleSort {\n    public static void main(String[] args) {\n        int[] numbers = {4, 3, 8, 1, 6};\n        bubbleSort(numbers);\n        System.out.println(Arrays.toString(numbers));\n    }\n\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n}"
    },
    {
        "instruction": "What would be the output of the following Python code? Explain the reasoning step by step.",
        "input": "x = 5\ny = 2\nprint(x // y, x % y)",
        "response": "The output would be: 2 1\n\nExplanation:\n1. x = 5 and y = 2 are assigned.\n2. The floor division operator (//) divides 5 by 2 and returns the largest integer not greater than the result. In this case, 5 divided by 2 is 2.5, and the largest integer not greater than the result is 2.\n3. The modulo operator (%) returns the remainder when 5 is divided by 2. The remainder is 1.\n4. As a result, the output of the print statement is 2 1.",
        "output": "The output would be: 2 1\n\nExplanation:\n1. x = 5 and y = 2 are assigned.\n2. The floor division operator (//) divides 5 by 2 and returns the largest integer not greater than the result. In this case, 5 divided by 2 is 2.5, and the largest integer not greater than the result is 2.\n3. The modulo operator (%) returns the remainder when 5 is divided by 2. The remainder is 1.\n4. As a result, the output of the print statement is 2 1."
    },
    {
        "instruction": "Write a C program that calculates the factorial of a given positive integer using a recursive function.",
        "input": "5",
        "response": "#include <stdio.h>\n\nunsigned long long factorial(int n);\n\nint main() {\n    int number = 5;\n    printf(\"Factorial of %d = %llu\\n\", number, factorial(number));\n    return 0;\n}\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) { return 1; }\n    else { return n * factorial(n - 1); }\n}",
        "output": "#include <stdio.h>\n\nunsigned long long factorial(int n);\n\nint main() {\n    int number = 5;\n    printf(\"Factorial of %d = %llu\\n\", number, factorial(number));\n    return 0;\n}\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) { return 1; }\n    else { return n * factorial(n - 1); }\n}"
    },
    {
        "instruction": "Create a program in Java that accepts a string and counts the number of words in it.",
        "input": "Hello, world! Welcome to the program.",
        "response": "public class WordCount {\n\n  public static void main(String[] args) {\n    String sentence = \"Hello, world! Welcome to the program.\";\n    int wordCount = countWords(sentence);\n    System.out.println(\"Number of words: \" + wordCount);\n  }\n\n  public static int countWords(String str) {\n    String[] words = str.trim().split(\"\\\\s+\");\n    return words.length;\n  }\n}",
        "output": "public class WordCount {\n\n  public static void main(String[] args) {\n    String sentence = \"Hello, world! Welcome to the program.\";\n    int wordCount = countWords(sentence);\n    System.out.println(\"Number of words: \" + wordCount);\n  }\n\n  public static int countWords(String str) {\n    String[] words = str.trim().split(\"\\\\s+\");\n    return words.length;\n  }\n}"
    },
    {
        "instruction": "What would be the code to convert a temperature given in Celsius to Fahrenheit using JavaScript?",
        "input": "20",
        "response": "function celsiusToFahrenheit(celsius) {\n  return (celsius * 9/5) + 32;\n}\n\nvar temperatureInCelsius = 20;\nvar temperatureInFahrenheit = celsiusToFahrenheit(temperatureInCelsius);\nconsole.log(temperatureInFahrenheit);",
        "output": "function celsiusToFahrenheit(celsius) {\n  return (celsius * 9/5) + 32;\n}\n\nvar temperatureInCelsius = 20;\nvar temperatureInFahrenheit = celsiusToFahrenheit(temperatureInCelsius);\nconsole.log(temperatureInFahrenheit);"
    },
    {
        "instruction": "Write a shell script that takes user input, calculates the factorial of the input number, and prints the result.",
        "input": "5",
        "response": "#!/bin/bash\n\nfactorial() {\n  local num=$1\n  if [ $num -le 1 ]; then\n    echo 1\n  else\n    echo $((num * $(factorial $((num - 1))))))\n  fi\n}\n\nread -p \"Enter a number: \" number\nresult=$(factorial $number)\necho \"Factorial of $number is $result\"",
        "output": "#!/bin/bash\n\nfactorial() {\n  local num=$1\n  if [ $num -le 1 ]; then\n    echo 1\n  else\n    echo $((num * $(factorial $((num - 1))))))\n  fi\n}\n\nread -p \"Enter a number: \" number\nresult=$(factorial $number)\necho \"Factorial of $number is $result\""
    },
    {
        "instruction": "Rewrite the following Python code to use a list comprehension instead of a for loop:\n\nnumbers = [1, 2, 3, 4, 5]\nsquares = []\nfor number in numbers:\n  squares.append(number * number)\nprint(squares)",
        "input": "",
        "response": "numbers = [1, 2, 3, 4, 5]\nsquares = [number * number for number in numbers]\nprint(squares)",
        "output": "numbers = [1, 2, 3, 4, 5]\nsquares = [number * number for number in numbers]\nprint(squares)"
    },
    {
        "instruction": "Create a Python function that calculates the length of the hypotenuse of a right-angled triangle, given the lengths of the other two sides.",
        "input": "a = 3\nb = 4",
        "response": "import math\n\ndef hypotenuse_length(a, b):\n    # Use the Pythagorean theorem (a^2 + b^2 = c^2) to calculate the length of the hypotenuse\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# Example usage\na = 3\nb = 4\nlength = hypotenuse_length(a, b)\nprint(length)",
        "output": "import math\n\ndef hypotenuse_length(a, b):\n    # Use the Pythagorean theorem (a^2 + b^2 = c^2) to calculate the length of the hypotenuse\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# Example usage\na = 3\nb = 4\nlength = hypotenuse_length(a, b)\nprint(length)"
    },
    {
        "instruction": "In Java, how do you read the contents of a text file called 'example.txt' into a String?",
        "input": "'example.txt' containing: 'This is an example text file.\nLine 2 of the file.'",
        "response": "import java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class ReadFileToString {\n\n  public static void main(String[] args) {\n    String filePath = 'example.txt';\n    String content = readFileToString(filePath);\n    System.out.println(content);\n  }\n\n  public static String readFileToString(String filePath) {\n    String content = '';\n    try {\n      content = new String(Files.readAllBytes(Paths.get(filePath)));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return content;\n  }\n}\n",
        "output": "import java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class ReadFileToString {\n\n  public static void main(String[] args) {\n    String filePath = 'example.txt';\n    String content = readFileToString(filePath);\n    System.out.println(content);\n  }\n\n  public static String readFileToString(String filePath) {\n    String content = '';\n    try {\n      content = new String(Files.readAllBytes(Paths.get(filePath)));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return content;\n  }\n}\n"
    },
    {
        "instruction": "Translate the following code snippet from Python to JavaScript: \n\nparsedNames = ['Arya', 'Bran', 'Sansa']\nnewNames = ','.join(parsedNames)\nprint(newNames)",
        "input": "",
        "response": "const parsedNames = ['Arya', 'Bran', 'Sansa'];\nconst newNames = parsedNames.join(',');\nconsole.log(newNames);",
        "output": "const parsedNames = ['Arya', 'Bran', 'Sansa'];\nconst newNames = parsedNames.join(',');\nconsole.log(newNames);"
    },
    {
        "instruction": "Fix the following broken JavaScript code that calculates the factorial of a number:\n\nfunction factorial(n) {\n  if (n === 0) {\n  } else {\n    return n * factorial(n - 1)\n  }\n}",
        "input": "",
        "response": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n// Test case\nconsole.log(factorial(5));",
        "output": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\n// Test case\nconsole.log(factorial(5));"
    },
    {
        "instruction": "Write a function in JavaScript to generate a random string of a specific length.",
        "input": "",
        "response": "function generateRandomString(length) {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for ( let i = 0; i < length; i++ ) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n}",
        "output": "function generateRandomString(length) {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for ( let i = 0; i < length; i++ ) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n}"
    },
    {
        "instruction": "Rewrite the following Java code snippet so that it uses a lambda expression instead of an anonymous class.",
        "input": "Collections.sort(list, new Comparator<Integer>() {\n    public int compare(Integer a, Integer b) {\n        return a - b;\n    }\n});",
        "response": "Collections.sort(list, (Integer a, Integer b) -> a - b);",
        "output": "Collections.sort(list, (Integer a, Integer b) -> a - b);"
    },
    {
        "instruction": "Explain what the following C++ code does.",
        "input": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int n = 5;\n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= i; j++) {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n    return 0;\n}",
        "response": "The given C++ code prints a right-angled triangle pattern using '*' (asterisks). It takes an integer 'n' as the number of rows for the triangle, in this case, n=5. Then, it uses two nested 'for' loops to print the '*' characters in each row. The outer loop iterates from 1 to n, and the inner loop iterates from 1 to the current value of the outer loop. For each iteration of the inner loop, a '*' character is printed. After the inner loop finishes, it starts a new line. This continues until the entire triangle pattern is printed.",
        "output": "The given C++ code prints a right-angled triangle pattern using '*' (asterisks). It takes an integer 'n' as the number of rows for the triangle, in this case, n=5. Then, it uses two nested 'for' loops to print the '*' characters in each row. The outer loop iterates from 1 to n, and the inner loop iterates from 1 to the current value of the outer loop. For each iteration of the inner loop, a '*' character is printed. After the inner loop finishes, it starts a new line. This continues until the entire triangle pattern is printed."
    },
    {
        "instruction": "What is the output of the following Python code?",
        "input": "def my_function(a, b):\n    return a * a - b * b\n\nresult = my_function(5, 3)",
        "response": "The output of the given Python code will be the result of the expression 'a * a - b * b' with 'a' = 5 and 'b' = 3. So the output value is '25 - 9 = 16'. The value of 'result' variable will be 16.",
        "output": "The output of the given Python code will be the result of the expression 'a * a - b * b' with 'a' = 5 and 'b' = 3. So the output value is '25 - 9 = 16'. The value of 'result' variable will be 16."
    },
    {
        "instruction": "Create a JavaScript function to calculate the age in days, given a birthdate.",
        "input": "birthdate: '1995-05-15'",
        "response": "function calculateAgeInDays(birthdate) {\n  const birthDateObject = new Date(birthdate);\n  const currentDate = new Date();\n  const timeDifference = currentDate.getTime() - birthDateObject.getTime();\n  const daysDifference = Math.floor(timeDifference / (1000 * 3600 * 24));\n  return daysDifference;\n}\n\ncalculateAgeInDays('1995-05-15');",
        "output": "function calculateAgeInDays(birthdate) {\n  const birthDateObject = new Date(birthdate);\n  const currentDate = new Date();\n  const timeDifference = currentDate.getTime() - birthDateObject.getTime();\n  const daysDifference = Math.floor(timeDifference / (1000 * 3600 * 24));\n  return daysDifference;\n}\n\ncalculateAgeInDays('1995-05-15');"
    },
    {
        "instruction": "Rewrite the following Python code to use a list comprehension.",
        "input": "def get_odd_numbers(numbers):\n    odds = []\n    for n in numbers:\n        if n % 2 != 0:\n            odds.append(n)\n    return odds",
        "response": "def get_odd_numbers(numbers):\n    return [n for n in numbers if n % 2 != 0]",
        "output": "def get_odd_numbers(numbers):\n    return [n for n in numbers if n % 2 != 0]"
    },
    {
        "instruction": "Explain the purpose of the Java `switch` statement and provide a simple example.",
        "input": "",
        "response": "The Java `switch` statement allows you to execute different blocks of code based on the value of a variable or expression. It can be used as an alternative to a series of `if-else` statements when dealing with multiple possibilities. Here's a simple example:\n\nint dayOfWeek = 3;\nString day;\n\nswitch (dayOfWeek) {\n  case 1:\n    day = 'Monday';\n    break;\n  case 2:\n    day = 'Tuesday';\n    break;\n  case 3:\n    day = 'Wednesday';\n    break;\n  // Add cases for the remaining days\n  default:\n    day = 'Invalid day';\n}\n\nSystem.out.println(day);",
        "output": "The Java `switch` statement allows you to execute different blocks of code based on the value of a variable or expression. It can be used as an alternative to a series of `if-else` statements when dealing with multiple possibilities. Here's a simple example:\n\nint dayOfWeek = 3;\nString day;\n\nswitch (dayOfWeek) {\n  case 1:\n    day = 'Monday';\n    break;\n  case 2:\n    day = 'Tuesday';\n    break;\n  case 3:\n    day = 'Wednesday';\n    break;\n  // Add cases for the remaining days\n  default:\n    day = 'Invalid day';\n}\n\nSystem.out.println(day);"
    },
    {
        "instruction": "What's wrong with the following C++ code snippet and how could it be corrected?",
        "input": "#include <iostream>\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n\n    if (num > 10);\n    {\n        std::cout << \"The number is greater than 10.\";\n    }\n\n    return 0;\n}",
        "response": "The issue with the code snippet is the semicolon immediately after the `if` statement condition. It causes the following block to execute regardless of the condition. To correct it, remove the semicolon:\n\n#include <iostream>\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n\n    if (num > 10)\n    {\n        std::cout << \"The number is greater than 10.\";\n    }\n\n    return 0;\n}",
        "output": "The issue with the code snippet is the semicolon immediately after the `if` statement condition. It causes the following block to execute regardless of the condition. To correct it, remove the semicolon:\n\n#include <iostream>\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n\n    if (num > 10)\n    {\n        std::cout << \"The number is greater than 10.\";\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns a new array with each element squared.",
        "input": "[2, 3, 4]",
        "response": "function squareArray(numbers) {\n    return numbers.map(num => num * num);\n}\n\nconsole.log(squareArray([2, 3, 4]));",
        "output": "function squareArray(numbers) {\n    return numbers.map(num => num * num);\n}\n\nconsole.log(squareArray([2, 3, 4]));"
    },
    {
        "instruction": "Write a Java program to find the smallest and largest elements in an integer array.",
        "input": "int[] arr = {12, 7, 3, 22, 49, 29};",
        "response": "public class SmallestLargest {\n    public static void main(String[] args) {\n        int[] arr = {12, 7, 3, 22, 49, 29};\n        int smallest = arr[0];\n        int largest = arr[0];\n\n        for (int num : arr) {\n            if (num < smallest) {\n                smallest = num;\n            }\n\n            if (num > largest) {\n                largest = num;\n            }\n        }\n\n        System.out.println(\"Smallest: \" + smallest + \" Largest: \" + largest);\n    }\n}",
        "output": "public class SmallestLargest {\n    public static void main(String[] args) {\n        int[] arr = {12, 7, 3, 22, 49, 29};\n        int smallest = arr[0];\n        int largest = arr[0];\n\n        for (int num : arr) {\n            if (num < smallest) {\n                smallest = num;\n            }\n\n            if (num > largest) {\n                largest = num;\n            }\n        }\n\n        System.out.println(\"Smallest: \" + smallest + \" Largest: \" + largest);\n    }\n}"
    },
    {
        "instruction": "In Python, rewrite the following code snippet to make it more efficient by using a list comprehension.",
        "input": "original_list = [1, 4, -5, 10, -7, 2, 3, -1]\npositive_list = []\nfor num in original_list:\n   if num > 0:\n      positive_list.append(num)",
        "response": "original_list = [1, 4, -5, 10, -7, 2, 3, -1]\npositive_list = [num for num in original_list if num > 0]",
        "output": "original_list = [1, 4, -5, 10, -7, 2, 3, -1]\npositive_list = [num for num in original_list if num > 0]"
    },
    {
        "instruction": "Write a shell script that prints the sum of numbers from 1 to a given value entered by the user.",
        "input": "20",
        "response": "#!/bin/sh\n\nread -p 'Enter a number: ' n\nsum=0\n\nfor num in $(seq 1 $n)\ndo\n    sum=$((sum + num))\ndone\n\necho \"The sum of numbers from 1 to $n is $sum\"",
        "output": "#!/bin/sh\n\nread -p 'Enter a number: ' n\nsum=0\n\nfor num in $(seq 1 $n)\ndo\n    sum=$((sum + num))\ndone\n\necho \"The sum of numbers from 1 to $n is $sum\""
    },
    {
        "instruction": "Create a C++ function that receives a string and outputs the string in reverse.",
        "input": "example",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string(const std::string& input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    std::cout << reversed << std::endl;\n}\n\nint main() {\n    std::string input = \"example\";\n    reverse_string(input);\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string(const std::string& input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    std::cout << reversed << std::endl;\n}\n\nint main() {\n    std::string input = \"example\";\n    reverse_string(input);\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Java method to calculate and return the square root of a given positive number using the Babylonian method.",
        "input": "25",
        "response": "public class SquareRoot {\n    public static double babylonianSqrt(double number) {\n        double guess = number / 2;\n        double accuracy = 0.000001;\n        while (Math.abs(guess * guess - number) > accuracy) {\n            guess = (guess + number / guess) / 2;\n        }\n        return guess;\n    }\n\n    public static void main(String[] args) {\n        double number = 25;\n        double result = babylonianSqrt(number);\n        System.out.println(\"Square root: \" + result);\n    }\n}",
        "output": "public class SquareRoot {\n    public static double babylonianSqrt(double number) {\n        double guess = number / 2;\n        double accuracy = 0.000001;\n        while (Math.abs(guess * guess - number) > accuracy) {\n            guess = (guess + number / guess) / 2;\n        }\n        return guess;\n    }\n\n    public static void main(String[] args) {\n        double number = 25;\n        double result = babylonianSqrt(number);\n        System.out.println(\"Square root: \" + result);\n    }\n}"
    },
    {
        "instruction": "In JavaScript, write a function that takes a list of numbers as input and returns the list in ascending order.",
        "input": "[3, 1, 4, 1, 5, 9, 2, 6, 5]",
        "response": "function ascendingOrder(numbers) {\n    return numbers.sort((a, b) => a - b);\n}\n\nconst inputList = [3, 1, 4, 1, 5, 9, 2, 6, 5];\nconst sortedList = ascendingOrder(inputList);\nconsole.log(sortedList);",
        "output": "function ascendingOrder(numbers) {\n    return numbers.sort((a, b) => a - b);\n}\n\nconst inputList = [3, 1, 4, 1, 5, 9, 2, 6, 5];\nconst sortedList = ascendingOrder(inputList);\nconsole.log(sortedList);"
    },
    {
        "instruction": "Given the Python code below, can you refactor it using list comprehension to achieve the same result? \n\nresult = []\nfor i in range(10):\n    if i % 2 == 0:\n        result.append(i ** 2)\nprint(result)",
        "input": "",
        "response": "result = [i ** 2 for i in range(10) if i % 2 == 0]\nprint(result)",
        "output": "result = [i ** 2 for i in range(10) if i % 2 == 0]\nprint(result)"
    },
    {
        "instruction": "Fix the syntax errors in the provided Java code snippet.",
        "input": "public class SyntaxErrorExample {\n    public static void main(String[] args {\n        int number1 = 10;\n        int number2 = 20;\n        int sum = number1 + number2;\n        System.ou.println(\"Sum =\" + sum);\n    }\n}",
        "response": "public class SyntaxErrorExample {\n    public static void main(String[] args) {\n        int number1 = 10;\n        int number2 = 20;\n        int sum = number1 + number2;\n        System.out.println(\"Sum =\" + sum);\n    }\n}",
        "output": "public class SyntaxErrorExample {\n    public static void main(String[] args) {\n        int number1 = 10;\n        int number2 = 20;\n        int sum = number1 + number2;\n        System.out.println(\"Sum =\" + sum);\n    }\n}"
    },
    {
        "instruction": "Explain the purpose of the os.path library in Python and create a short code example illustrating its usage.",
        "input": "",
        "response": "The os.path library is a submodule in the os library in Python that provides functions to work with file paths. It is platform-independent, allowing for easy manipulation of file paths across different operating systems. Example: \n\nimport os.path\n\nfile_path = '/path/to/myfile.txt'\n\nif os.path.exists(file_path):\n    print('File exists!')\nelse:\n    print('File not found.')",
        "output": "The os.path library is a submodule in the os library in Python that provides functions to work with file paths. It is platform-independent, allowing for easy manipulation of file paths across different operating systems. Example: \n\nimport os.path\n\nfile_path = '/path/to/myfile.txt'\n\nif os.path.exists(file_path):\n    print('File exists!')\nelse:\n    print('File not found.')"
    },
    {
        "instruction": "Create a simple API request using Python's requests library to fetch the current weather information for a given city. Use the OpenWeatherMap API for this task.",
        "input": "API_KEY = 'your_api_key'\ncity_name = 'London'",
        "response": "import requests\n\nAPI_KEY = 'your_api_key'\ncity_name = 'London'\n\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={API_KEY}\"\n\nresponse = requests.get(url)\nweather_data = response.json()\nprint(weather_data)",
        "output": "import requests\n\nAPI_KEY = 'your_api_key'\ncity_name = 'London'\n\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={API_KEY}\"\n\nresponse = requests.get(url)\nweather_data = response.json()\nprint(weather_data)"
    },
    {
        "instruction": "Implement a C++ function to count the number of occurrences of a specific character in a given string.",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n\nint count_char_occurrences(const std::string& str, char search_char) {\n    int count = 0;\n    for (char c : str) {\n        if (c == search_char) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    std::string sample = \"hello, world\";\n    char target = 'l';\n    int occurrences = count_char_occurrences(sample, target);\n    std::cout << \"Occurrences of '\" << target << \"': \" << occurrences << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint count_char_occurrences(const std::string& str, char search_char) {\n    int count = 0;\n    for (char c : str) {\n        if (c == search_char) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    std::string sample = \"hello, world\";\n    char target = 'l';\n    int occurrences = count_char_occurrences(sample, target);\n    std::cout << \"Occurrences of '\" << target << \"': \" << occurrences << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that accepts a list and returns the number of unique elements in the list.",
        "input": "",
        "response": "def count_unique_elements(lst):\n    return len(set(lst))",
        "output": "def count_unique_elements(lst):\n    return len(set(lst))"
    },
    {
        "instruction": "How would you reverse a string in JavaScript? Write a function to demonstrate.",
        "input": "",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "In Java, write a method to find the largest and smallest numbers in an array of integers.",
        "input": "",
        "response": "public static void largestAndSmallest(int[] arr) {\n    int smallest = arr[0];\n    int largest = arr[0];\n\n    for (int number : arr) {\n        if (number > largest) {\n            largest = number;\n        } else if (number < smallest) {\n            smallest = number;\n        }\n    }\n\n    System.out.println(\"Largest number: \" + largest);\n    System.out.println(\"Smallest number: \" + smallest);\n}",
        "output": "public static void largestAndSmallest(int[] arr) {\n    int smallest = arr[0];\n    int largest = arr[0];\n\n    for (int number : arr) {\n        if (number > largest) {\n            largest = number;\n        } else if (number < smallest) {\n            smallest = number;\n        }\n    }\n\n    System.out.println(\"Largest number: \" + largest);\n    System.out.println(\"Smallest number: \" + smallest);\n}"
    },
    {
        "instruction": "Implement a C++ function that takes a character array and removes all the vowels from the array.",
        "input": "",
        "response": "#include <algorithm>\n\nvoid removeVowels(char arr[], int size) {\n    std::string str(arr);\n    std::string vowels = \"AEIOUaeiou\";\n\n    for (char vowel : vowels) {\n        str.erase(std::remove(str.begin(), str.end(), vowel), str.end());\n    }\n\n    strncpy(arr, str.c_str(), size);\n}",
        "output": "#include <algorithm>\n\nvoid removeVowels(char arr[], int size) {\n    std::string str(arr);\n    std::string vowels = \"AEIOUaeiou\";\n\n    for (char vowel : vowels) {\n        str.erase(std::remove(str.begin(), str.end(), vowel), str.end());\n    }\n\n    strncpy(arr, str.c_str(), size);\n}"
    },
    {
        "instruction": "Implement a JavaScript function that checks if a given string is a palindrome.",
        "input": "",
        "response": "function isPalindrome(str) {\n  const original = str.replace(/\\W/g, '').toLowerCase();\n  const reversed = original.split('').reverse().join('');\n  return original === reversed;\n}",
        "output": "function isPalindrome(str) {\n  const original = str.replace(/\\W/g, '').toLowerCase();\n  const reversed = original.split('').reverse().join('');\n  return original === reversed;\n}"
    },
    {
        "instruction": "How would you create an HTTP server in Node.js that returns 'Hello, World!' upon receiving a GET request?",
        "input": "",
        "response": "const http = require('http');\nconst hostname = '127.0.0.1';\nconst port = 3000;\nconst server = http.createServer((req, res) => {\n  if (req.method === 'GET') {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!');\n  }\n});\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});",
        "output": "const http = require('http');\nconst hostname = '127.0.0.1';\nconst port = 3000;\nconst server = http.createServer((req, res) => {\n  if (req.method === 'GET') {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!');\n  }\n});\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});"
    },
    {
        "instruction": "Write a C++ code that uses the 'ofstream' class to write the content of a string variable to a file.",
        "input": "",
        "response": "#include <fstream>\n#include <iostream>\n#include <string>\n\nint main() {\n  std::string content = \"Hello, World!\";\n  std::ofstream outputFile(\"output.txt\");\n  if (outputFile.is_open()) {\n    outputFile << content;\n    outputFile.close();\n    std::cout << \"Content successfully written to file.\" << std::endl;\n  } else {\n    std::cout << \"Unable to open file.\" << std::endl;\n  }\n  return 0;\n}",
        "output": "#include <fstream>\n#include <iostream>\n#include <string>\n\nint main() {\n  std::string content = \"Hello, World!\";\n  std::ofstream outputFile(\"output.txt\");\n  if (outputFile.is_open()) {\n    outputFile << content;\n    outputFile.close();\n    std::cout << \"Content successfully written to file.\" << std::endl;\n  } else {\n    std::cout << \"Unable to open file.\" << std::endl;\n  }\n  return 0;\n}"
    },
    {
        "instruction": "In Python, refactor the given snippet of code using a list comprehension.",
        "input": "squares = []\nfor x in range(10):\n    squares.append(x*x)",
        "response": "squares = [x*x for x in range(10)]",
        "output": "squares = [x*x for x in range(10)]"
    },
    {
        "instruction": "What is the output of the following C++ code snippet?",
        "input": "#include<iostream>\n\nint main() {\n    int x = 5;\n    int y = x++ + ++x;\n    std::cout << y;\n}",
        "response": "11",
        "output": "11"
    },
    {
        "instruction": "Explain the process of initializing a JavaScript object using the constructor pattern to create instances with the same properties and methods.",
        "input": "",
        "response": "1. Create a constructor function that defines the object's properties and methods.\n2. Use the 'this' keyword inside the constructor function to assign properties and methods to the object instance.\n3. Create object instances by using the 'new' keyword followed by the constructor function's name.\n4. The 'new' keyword creates a new instance of the object and assigns it the properties and methods defined in the constructor function.",
        "output": "1. Create a constructor function that defines the object's properties and methods.\n2. Use the 'this' keyword inside the constructor function to assign properties and methods to the object instance.\n3. Create object instances by using the 'new' keyword followed by the constructor function's name.\n4. The 'new' keyword creates a new instance of the object and assigns it the properties and methods defined in the constructor function."
    },
    {
        "instruction": "Create a shell script that takes a filename as its first argument and prints the last five lines of the file.",
        "input": "",
        "response": "#!/bin/bash\n\nfile=$1\ntail -n 5 \"$file\"",
        "output": "#!/bin/bash\n\nfile=$1\ntail -n 5 \"$file\""
    },
    {
        "instruction": "Given a Java method that takes an integer array and computes the sum of its values, fix the following method to avoid IndexOutOfBoundsException.",
        "input": "public int sumArray(int[] arr) {\n    int sum = arr[0];\n    for (int i = 1; i <= arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "response": "public int sumArray(int[] arr) {\n    int sum = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "output": "public int sumArray(int[] arr) {\n    int sum = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Create a simple Python script to count the number of lines in a text file.",
        "input": "sample_text.txt content: 'Lorem ipsum dolor sit amet...\nCurabitur odio sapien...'",
        "response": "with open('sample_text.txt', 'r') as file:\n    lines = file.readlines()\n    num_lines = len(lines)\nprint(f'Number of lines in the file: {num_lines}')",
        "output": "with open('sample_text.txt', 'r') as file:\n    lines = file.readlines()\n    num_lines = len(lines)\nprint(f'Number of lines in the file: {num_lines}')"
    },
    {
        "instruction": "Write a JavaScript function that takes in an array of numbers and returns their sum.",
        "input": "[3, 7, 9, 1]",
        "response": "function sumArray(arr) {\n    return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}\n\nconsole.log(sumArray([3, 7, 9, 1]));",
        "output": "function sumArray(arr) {\n    return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}\n\nconsole.log(sumArray([3, 7, 9, 1]));"
    },
    {
        "instruction": "What would be Java code to read the content of an HTML file and display it in Java Swing JFrame?",
        "input": "HTML file: 'example.html'",
        "response": "import javax.swing.*;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class HtmlDisplay extends JFrame {\n    public HtmlDisplay() {\n        JEditorPane editorPane = new JEditorPane();\n        editorPane.setEditable(false);\n        editorPane.setContentType(\"text/html\");\n        try {\n            String content = new String(Files.readAllBytes(Paths.get(\"example.html\")), StandardCharsets.UTF_8);\n            editorPane.setText(content);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        JScrollPane scrollPane = new JScrollPane(editorPane);\n        add(scrollPane);\n        setSize(800, 600);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(() -> {\n            HtmlDisplay htmlDisplay = new HtmlDisplay();\n            htmlDisplay.setVisible(true);\n        });\n    }\n}",
        "output": "import javax.swing.*;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class HtmlDisplay extends JFrame {\n    public HtmlDisplay() {\n        JEditorPane editorPane = new JEditorPane();\n        editorPane.setEditable(false);\n        editorPane.setContentType(\"text/html\");\n        try {\n            String content = new String(Files.readAllBytes(Paths.get(\"example.html\")), StandardCharsets.UTF_8);\n            editorPane.setText(content);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        JScrollPane scrollPane = new JScrollPane(editorPane);\n        add(scrollPane);\n        setSize(800, 600);\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    }\n\n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(() -> {\n            HtmlDisplay htmlDisplay = new HtmlDisplay();\n            htmlDisplay.setVisible(true);\n        });\n    }\n}"
    },
    {
        "instruction": "Implement a bubble sort algorithm in C++ and sort an array of integers in ascending order.",
        "input": "int arr[] = {5, 3, 1, 4, 2};",
        "response": "#include <iostream>\n\nvoid bubble_sort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {5, 3, 1, 4, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    bubble_sort(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nvoid bubble_sort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {5, 3, 1, 4, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    bubble_sort(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python script to read a plain text file and count the words, lines, and characters with spaces.",
        "input": "",
        "response": "def count_text_elements(file_path):\n  with open(file_path, 'r') as file:\n    content = file.readlines()\n    word_count = sum([len(line.split(' ')) for line in content])\n    line_count = len(content)\n    character_count = sum([len(line) for line in content])\n  return word_count, line_count, character_count",
        "output": "def count_text_elements(file_path):\n  with open(file_path, 'r') as file:\n    content = file.readlines()\n    word_count = sum([len(line.split(' ')) for line in content])\n    line_count = len(content)\n    character_count = sum([len(line) for line in content])\n  return word_count, line_count, character_count"
    },
    {
        "instruction": "Create a JavaScript function to calculate compound interest with parameters: initial amount, annual interest rate, number of times interest is compounded per year, and the number of years.",
        "input": "",
        "response": "function calculateCompoundInterest(initialAmount, annualInterestRate, timesCompoundedPerYear, years) {\n  let factor = 1 + (annualInterestRate / 100 / timesCompoundedPerYear);\n  let power = timesCompoundedPerYear * years;\n  let compoundInterest = initialAmount * Math.pow(factor, power);\n  return compoundInterest;\n}",
        "output": "function calculateCompoundInterest(initialAmount, annualInterestRate, timesCompoundedPerYear, years) {\n  let factor = 1 + (annualInterestRate / 100 / timesCompoundedPerYear);\n  let power = timesCompoundedPerYear * years;\n  let compoundInterest = initialAmount * Math.pow(factor, power);\n  return compoundInterest;\n}"
    },
    {
        "instruction": "Given this Java code snippet that has some syntax errors, identify and correct the errors and provide the correct code.",
        "input": "public class HelloWorld {\n  public static void main(string[] args) \n    System.out.println('Hello, World!');\n  }\n}",
        "response": "public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n  }\n}",
        "output": "public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n  }\n}"
    },
    {
        "instruction": "Write a Bash script that takes two command line arguments, adds them together, and prints the result. Handle the case when the arguments are not integers.",
        "input": "",
        "response": "#!/bin/bash\n\nif [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]]; then\n  result=$(( $1 + $2 ))\n  echo $result\nelse\n  echo \"Both arguments must be integers.\"\n  exit 1\nfi",
        "output": "#!/bin/bash\n\nif [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]]; then\n  result=$(( $1 + $2 ))\n  echo $result\nelse\n  echo \"Both arguments must be integers.\"\n  exit 1\nfi"
    },
    {
        "instruction": "Create a function in JavaScript to check if a given number is a prime number.",
        "input": "13",
        "response": "function isPrime(number) {\n    if (number <= 1) {\n        return false;\n    }\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(isPrime(13)); // returns true",
        "output": "function isPrime(number) {\n    if (number <= 1) {\n        return false;\n    }\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(isPrime(13)); // returns true"
    },
    {
        "instruction": "What would be the output of the following Python code?",
        "input": "def increment_values(start=1, end=5):\n    result = []\n    for i in range(start, end):\n        result.append(i + 3)\n    return result\n\nprint(increment_values())",
        "response": "The output of the code would be: [4, 5, 6, 7]",
        "output": "The output of the code would be: [4, 5, 6, 7]"
    },
    {
        "instruction": "Write a program in C# that prints the cube of the first 10 natural numbers.",
        "input": "",
        "response": "using System;\n\nnamespace CubesOfNumbers\n{\n    class Program\n    {\n        public static void Main(string[] args)\n        {\n            for (int i = 1; i <= 10; i++)\n            {\n                int cube = i * i * i;\n                Console.WriteLine(\"Cube of {0} is {1}\", i, cube);\n            }\n        }\n    }\n}",
        "output": "using System;\n\nnamespace CubesOfNumbers\n{\n    class Program\n    {\n        public static void Main(string[] args)\n        {\n            for (int i = 1; i <= 10; i++)\n            {\n                int cube = i * i * i;\n                Console.WriteLine(\"Cube of {0} is {1}\", i, cube);\n            }\n        }\n    }\n}"
    },
    {
        "instruction": "Explain the purpose and operation of the following shell script.",
        "input": "#!/bin/bash\n\nFILE=$1\nSEARCH=$2\n\ngrep -nh \"$SEARCH\" \"$FILE\"",
        "response": "The shell script is designed to search for occurrences of a specified string (SEARCH) within a specified file (FILE). It takes two arguments: the name of the file and the search string. The script utilizes the 'grep' command, which searches for a pattern within a file. The '-n' flag shows the line number where the pattern was found, and the '-h' flag prevents the file name from being displayed in the output. The script outputs line numbers and lines containing the search string in the input file.",
        "output": "The shell script is designed to search for occurrences of a specified string (SEARCH) within a specified file (FILE). It takes two arguments: the name of the file and the search string. The script utilizes the 'grep' command, which searches for a pattern within a file. The '-n' flag shows the line number where the pattern was found, and the '-h' flag prevents the file name from being displayed in the output. The script outputs line numbers and lines containing the search string in the input file."
    },
    {
        "instruction": "Create a Python function to find the longest word in a given string.",
        "input": "text = 'Python programming is highly resourceful'",
        "response": "def find_longest_word(input_text):\n    words = input_text.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
        "output": "def find_longest_word(input_text):\n    words = input_text.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word"
    },
    {
        "instruction": "Write a C++ program to remove all occurrences of a given character from a string.",
        "input": "char_to_remove = 'a';\nstring input_string = 'abrakadabra';",
        "response": "#include <iostream>\n#include <string>\n\nvoid remove_character(std::string& str, char c) {\n    auto pos = str.find(c);\n    while (pos != std::string::npos) {\n        str.erase(pos, 1);\n        pos = str.find(c, pos);\n    }\n}\n\nint main() {\n    char char_to_remove = 'a';\n    std::string input_string = 'abrakadabra';\n    remove_character(input_string, char_to_remove);\n    std::cout << input_string << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nvoid remove_character(std::string& str, char c) {\n    auto pos = str.find(c);\n    while (pos != std::string::npos) {\n        str.erase(pos, 1);\n        pos = str.find(c, pos);\n    }\n}\n\nint main() {\n    char char_to_remove = 'a';\n    std::string input_string = 'abrakadabra';\n    remove_character(input_string, char_to_remove);\n    std::cout << input_string << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you create a basic REST API using Node.js and the Express framework?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json()); // To parse JSON request body\n\nconst sample_data = [\n  { id: 1, name: 'item1'},\n  { id: 2, name: 'item2'}\n];\n\n// GET request to fetch all items\napp.get('/api/items', (req, res) => {\n  res.send(sample_data);\n});\n\n// Server start listener\napp.listen(port, () => {\n  console.log(`Listening on port ${port}`);\n});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json()); // To parse JSON request body\n\nconst sample_data = [\n  { id: 1, name: 'item1'},\n  { id: 2, name: 'item2'}\n];\n\n// GET request to fetch all items\napp.get('/api/items', (req, res) => {\n  res.send(sample_data);\n});\n\n// Server start listener\napp.listen(port, () => {\n  console.log(`Listening on port ${port}`);\n});"
    },
    {
        "instruction": "Write a shell script that finds all files larger than a given size in a specified directory.",
        "input": "directory = '/home/user/documents'\nfile_size = '100M'",
        "response": "#!/bin/bash\n\ndirectory='/home/user/documents'\nfile_size='100M'\n\nfind $directory -type f -size +$file_size -exec ls -lh {} \\; | awk '{ print $9 \": \" $5 }'",
        "output": "#!/bin/bash\n\ndirectory='/home/user/documents'\nfile_size='100M'\n\nfind $directory -type f -size +$file_size -exec ls -lh {} \\; | awk '{ print $9 \": \" $5 }'"
    },
    {
        "instruction": "Create a Python function to determine if a given string is a palindrome. The function should handle case sensitivity and ignore punctuation and whitespace.",
        "input": "A man, a plan, a canal, Panama!",
        "response": "def is_palindrome(s):\n    import re\n    cleaned_str = re.sub(r'\\W', '', s).lower()\n    return cleaned_str == cleaned_str[::-1]\n\ninput_str = \"A man, a plan, a canal, Panama!\"\nprint(is_palindrome(input_str))",
        "output": "def is_palindrome(s):\n    import re\n    cleaned_str = re.sub(r'\\W', '', s).lower()\n    return cleaned_str == cleaned_str[::-1]\n\ninput_str = \"A man, a plan, a canal, Panama!\"\nprint(is_palindrome(input_str))"
    },
    {
        "instruction": "Write an SQL query that, given a database table 'students' with columns 'id', 'first_name', 'last_name', 'age', and 'grade', returns the full names and ages of all students with a grade higher than 80.",
        "input": "",
        "response": "SELECT first_name, last_name, age FROM students WHERE grade > 80;",
        "output": "SELECT first_name, last_name, age FROM students WHERE grade > 80;"
    },
    {
        "instruction": "How would you convert the following JavaScript ES6 arrow function to a regular function declaration?",
        "input": "const add = (a, b) => a + b;",
        "response": "function add(a, b) {\n    return a + b;\n}",
        "output": "function add(a, b) {\n    return a + b;\n}"
    },
    {
        "instruction": "Assuming you have a C++ vector of integers called 'numbers', write a C++ function to find the smallest missing positive integer from the vector.",
        "input": "vector<int> numbers = {3, 5, -1, 1};",
        "response": "#include <algorithm>\n#include <vector>\n\nint find_smallest_missing_positive_integer(std::vector<int>& numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    int missing_int = 1;\n    for (int element : numbers) {\n        if (element == missing_int) {\n            ++missing_int;\n        }\n    }\n    return missing_int;\n}\n\n// Example usage:\n// std::vector<int> numbers = {3, 5, -1, 1};\n// int smallest_missing = find_smallest_missing_positive_integer(numbers);",
        "output": "#include <algorithm>\n#include <vector>\n\nint find_smallest_missing_positive_integer(std::vector<int>& numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    int missing_int = 1;\n    for (int element : numbers) {\n        if (element == missing_int) {\n            ++missing_int;\n        }\n    }\n    return missing_int;\n}\n\n// Example usage:\n// std::vector<int> numbers = {3, 5, -1, 1};\n// int smallest_missing = find_smallest_missing_positive_integer(numbers);"
    },
    {
        "instruction": "Implement a bubble sort algorithm in Java to sort an array of integers in ascending order.",
        "input": "int[] arr = {3, 7, 2, 1, 9, 4};",
        "response": "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}",
        "output": "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}"
    },
    {
        "instruction": "Explain what a list comprehension does in Python and demonstrate how to use it to generate a list of even numbers up to 10.",
        "input": "",
        "response": "A list comprehension in Python is a concise way to create a list using a single line of code. It combines a for loop, a condition, and the desired output expression. Example: even_numbers = [x for x in range(1, 11) if x % 2 == 0]",
        "output": "A list comprehension in Python is a concise way to create a list using a single line of code. It combines a for loop, a condition, and the desired output expression. Example: even_numbers = [x for x in range(1, 11) if x % 2 == 0]"
    },
    {
        "instruction": "What is the output of the following JavaScript code if the input string is 'openai'?",
        "input": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconsole.log(reverseString('openai'));",
        "response": "The output will be 'ianepo', which is the reverse of the input string 'openai'.",
        "output": "The output will be 'ianepo', which is the reverse of the input string 'openai'."
    },
    {
        "instruction": "Debug the following C++ code, which is meant to print the factorial of a given number n.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int factorial = 0;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    cout << factorial << endl;\n    return 0;\n}",
        "response": "The issue is with the initial value of the factorial variable. It should be initialized to 1 instead of 0. Corrected code:\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int factorial = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    cout << factorial << endl;\n    return 0;\n}",
        "output": "The issue is with the initial value of the factorial variable. It should be initialized to 1 instead of 0. Corrected code:\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int factorial = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    cout << factorial << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Develop a Java function that calculates the sum of all even numbers in an array.",
        "input": "[1, 3, 5, 6, 10]",
        "response": "public int sumEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}\n\nint[] inputArray = {1, 3, 5, 6, 10};\nint result = sumEvenNumbers(inputArray);\nSystem.out.println(result);",
        "output": "public int sumEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}\n\nint[] inputArray = {1, 3, 5, 6, 10};\nint result = sumEvenNumbers(inputArray);\nSystem.out.println(result);"
    },
    {
        "instruction": "Describe the purpose of the following C++ code snippet and identify any syntax errors.",
        "input": "#include <iostream>\n\nint main() {\n  int a[5];\n  int i;\n  for (i = 0; i <= 4; i++) {\ncount << \"Enter Value\" << i + 1 << std::endl;\n    std::cin >> a[i];\n  }\n\n  return 0;\n}",
        "response": "The purpose of this C++ code snippet is to take 5 integer inputs from the user and store them in an array. However, there is a syntax error in the code. The 'count' should be replaced with 'std::cout'. Replace it with the following code:\n\n#include <iostream>\n\nint main() {\n  int a[5];\n  int i;\n  for (i = 0; i <= 4; i++) {\n    std::cout << \"Enter Value \" << (i + 1) << std::endl;\n    std::cin >> a[i];\n  }\n\n  return 0;\n}",
        "output": "The purpose of this C++ code snippet is to take 5 integer inputs from the user and store them in an array. However, there is a syntax error in the code. The 'count' should be replaced with 'std::cout'. Replace it with the following code:\n\n#include <iostream>\n\nint main() {\n  int a[5];\n  int i;\n  for (i = 0; i <= 4; i++) {\n    std::cout << \"Enter Value \" << (i + 1) << std::endl;\n    std::cin >> a[i];\n  }\n\n  return 0;\n}"
    },
    {
        "instruction": "Implement a Python function to fetch data from a RESTful API using 'requests' library and parse the JSON response.",
        "input": "https://jsonplaceholder.typicode.com/todos",
        "response": "import requests\n\ndef fetch_api_data(url):\n  response = requests.get(url)\n  if response.status_code == 200:\n    data = response.json()\n    return data\n  else:\n    return None\n\napi_url = 'https://jsonplaceholder.typicode.com/todos'\napi_data = fetch_api_data(api_url)\nprint(api_data)",
        "output": "import requests\n\ndef fetch_api_data(url):\n  response = requests.get(url)\n  if response.status_code == 200:\n    data = response.json()\n    return data\n  else:\n    return None\n\napi_url = 'https://jsonplaceholder.typicode.com/todos'\napi_data = fetch_api_data(api_url)\nprint(api_data)"
    },
    {
        "instruction": "Write a shell script that calculates the total disk usage of the current directory and each of its subdirectories, displaying the results in a human-readable format.",
        "input": "",
        "response": "#!/bin/bash\n\ndu -h --max-depth=1",
        "output": "#!/bin/bash\n\ndu -h --max-depth=1"
    },
    {
        "instruction": "Create a simple program in C that asks the user to enter two integers and then outputs the product of these integers.",
        "input": "4, 9",
        "response": "#include<stdio.h>\n\nint main() {\n    int a, b, product;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &a, &b);\n\n    product = a * b;\n    printf(\"Product: %d\\n\", product);\n    return 0;\n}",
        "output": "#include<stdio.h>\n\nint main() {\n    int a, b, product;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &a, &b);\n\n    product = a * b;\n    printf(\"Product: %d\\n\", product);\n    return 0;\n}"
    },
    {
        "instruction": "Write a Java function to reverse the order of words in a given string.",
        "input": "Hello World!",
        "response": "public String reverseWords(String input) {\n    String[] words = input.split(\" \");\n    StringBuilder reversedString = new StringBuilder();\n\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversedString.append(words[i]).append(' ');\n    }\n\n    return reversedString.toString().trim();\n}\n\nString input = \"Hello World!\";\nSystem.out.println(reverseWords(input));",
        "output": "public String reverseWords(String input) {\n    String[] words = input.split(\" \");\n    StringBuilder reversedString = new StringBuilder();\n\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversedString.append(words[i]).append(' ');\n    }\n\n    return reversedString.toString().trim();\n}\n\nString input = \"Hello World!\";\nSystem.out.println(reverseWords(input));"
    },
    {
        "instruction": "Explain the following Python code and its output: `print(list(map(lambda x: x ** 2, [1, 2, 3, 4, 5])))`",
        "input": "",
        "response": "This Python code takes a list of numbers [1, 2, 3, 4, 5] and applies the lambda function `lambda x: x ** 2` to each element using the built-in `map` function. The lambda function takes an argument 'x' and returns the square (x ** 2) of the argument. The `list` function then converts the result of the map operation into a list. Consequently, the output will be a list of the squares of the input list, i.e., [1, 4, 9, 16, 25].",
        "output": "This Python code takes a list of numbers [1, 2, 3, 4, 5] and applies the lambda function `lambda x: x ** 2` to each element using the built-in `map` function. The lambda function takes an argument 'x' and returns the square (x ** 2) of the argument. The `list` function then converts the result of the map operation into a list. Consequently, the output will be a list of the squares of the input list, i.e., [1, 4, 9, 16, 25]."
    },
    {
        "instruction": "Write a Shell script that receives a filename as an argument, checks whether the file exists, and prints positive or negative feedback.",
        "input": "sample.txt",
        "response": "#!/bin/sh\n\nfile=$1\n\nif [ -e \"$file\" ]; then\n    echo \"The file '$file' exists.\"\nelse\n    echo \"The file '$file' does not exist.\"\nfi",
        "output": "#!/bin/sh\n\nfile=$1\n\nif [ -e \"$file\" ]; then\n    echo \"The file '$file' exists.\"\nelse\n    echo \"The file '$file' does not exist.\"\nfi"
    },
    {
        "instruction": "Translate the following Python code into Java, which reverses words in a given string: s = 'hello world', output: 'world hello'.",
        "input": "s = 'hello world'\nwords = s.split()\nwords.reverse()\nreverse_s = ' '.join(words)\nprint(reverse_s)",
        "response": "public class ReverseWords {\n    public static void main(String[] args) {\n        String s = \"hello world\";\n        String[] words = s.split(\" \");\n        int start = 0;\n        int end = words.length - 1;\n        while (start < end) {\n            String temp = words[start];\n            words[start] = words[end];\n            words[end] = temp;\n            start++;\n            end--;\n        }\n        String reverseS = String.join(\" \", words);\n        System.out.println(reverseS);\n    }\n}",
        "output": "public class ReverseWords {\n    public static void main(String[] args) {\n        String s = \"hello world\";\n        String[] words = s.split(\" \");\n        int start = 0;\n        int end = words.length - 1;\n        while (start < end) {\n            String temp = words[start];\n            words[start] = words[end];\n            words[end] = temp;\n            start++;\n            end--;\n        }\n        String reverseS = String.join(\" \", words);\n        System.out.println(reverseS);\n    }\n}"
    },
    {
        "instruction": "Create a C++ function that receives a vector of strings and returns the longest string.",
        "input": "std::vector<std::string> string_vector = {\"apple\", \"banana\", \"blueberry\"};",
        "response": "#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string find_longest_string(std::vector<std::string> &strings) {\n    std::string longest_string = \"\";\n    for(const auto &str : strings) {\n        if(str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n    return longest_string;\n}\n\nint main() {\n    std::vector<std::string> string_vector = {\"apple\", \"banana\", \"blueberry\"};\n    std::string longest = find_longest_string(string_vector);\n    std::cout << \"Longest string: \" << longest << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string find_longest_string(std::vector<std::string> &strings) {\n    std::string longest_string = \"\";\n    for(const auto &str : strings) {\n        if(str.length() > longest_string.length()) {\n            longest_string = str;\n        }\n    }\n    return longest_string;\n}\n\nint main() {\n    std::vector<std::string> string_vector = {\"apple\", \"banana\", \"blueberry\"};\n    std::string longest = find_longest_string(string_vector);\n    std::cout << \"Longest string: \" << longest << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "In JavaScript, create a function that takes an array of numbers and finds the two elements that sum up to a specific target number. Return the elements' indexes as an array.",
        "input": "[2, 7, 11, 15], target = 9",
        "response": "function findTwoIndexes(arr, target) {\n    const indexDict = {};\n    for (let i = 0; i < arr.length; i++) {\n        const diff = target - arr[i];\n        if (indexDict.hasOwnProperty(diff)) {\n            return [indexDict[diff], i];\n        }\n        indexDict[arr[i]] = i;\n    }\n    return [];\n}\n\nconst inputArr = [2, 7, 11, 15];\nconst target = 9;\nconst indexes = findTwoIndexes(inputArr, target);\nconsole.log(indexes);",
        "output": "function findTwoIndexes(arr, target) {\n    const indexDict = {};\n    for (let i = 0; i < arr.length; i++) {\n        const diff = target - arr[i];\n        if (indexDict.hasOwnProperty(diff)) {\n            return [indexDict[diff], i];\n        }\n        indexDict[arr[i]] = i;\n    }\n    return [];\n}\n\nconst inputArr = [2, 7, 11, 15];\nconst target = 9;\nconst indexes = findTwoIndexes(inputArr, target);\nconsole.log(indexes);"
    },
    {
        "instruction": "How can I rewrite this Python code using a list comprehension? \nfor i in range(1, 11):\n    if i % 2 == 0:\n        result.append(i*i)",
        "input": "",
        "response": "[i*i for i in range(1, 11) if i % 2 == 0]",
        "output": "[i*i for i in range(1, 11) if i % 2 == 0]"
    },
    {
        "instruction": "Create a JavaScript function that counts the number of occurrences of each character in a given string, and returns an object containing the character count pairs.",
        "input": "abracadabra",
        "response": "function countCharacters(str) {\n  const count = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (count[char]) {\n      count[char]++;\n    } else {\n      count[char] = 1;\n    }\n  }\n  return count;\n}\n\nconst input = 'abracadabra';\nconsole.log(countCharacters(input));",
        "output": "function countCharacters(str) {\n  const count = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (count[char]) {\n      count[char]++;\n    } else {\n      count[char] = 1;\n    }\n  }\n  return count;\n}\n\nconst input = 'abracadabra';\nconsole.log(countCharacters(input));"
    },
    {
        "instruction": "Write a SQL query to retrieve the top 3 highest paid employees from a 'salary' table with 'employee_id' and 'salary_usd' columns, and display their 'employee_id' and 'salary_usd'.",
        "input": "",
        "response": "SELECT employee_id, salary_usd\nFROM salary\nORDER BY salary_usd DESC\nLIMIT 3;",
        "output": "SELECT employee_id, salary_usd\nFROM salary\nORDER BY salary_usd DESC\nLIMIT 3;"
    },
    {
        "instruction": "Implement a C++ program that reads a user's input for two integers (a and b), then calculates and prints the smallest common multiple for the two.",
        "input": "6 8",
        "response": "#include<iostream>\nusing namespace std;\n\nint lcm(int a, int b) {\n    int max, lcm;\n    max = (a > b) ? a : b;\n    lcm = max;\n    while (lcm % a || lcm % b) {\n        lcm += max;\n    }\n    return lcm;\n}\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n    cout << \"Smallest common multiple: \" << lcm(a, b) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint lcm(int a, int b) {\n    int max, lcm;\n    max = (a > b) ? a : b;\n    lcm = max;\n    while (lcm % a || lcm % b) {\n        lcm += max;\n    }\n    return lcm;\n}\n\nint main() {\n    int a, b;\n    cout << \"Enter two integers: \";\n    cin >> a >> b;\n    cout << \"Smallest common multiple: \" << lcm(a, b) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Given the following Python code snippet that contains a syntax error, can you identify and correct the error?\n\nimport math\n\nifn = 5:\n    res = math.sqrt(n)\n    print('The square root of', n, 'is', res)",
        "input": "",
        "response": "import math\n\nn = 5\nif n:  # The correct syntax for assignment and indentation\n    res = math.sqrt(n)\n    print('The square root of', n, 'is', res)",
        "output": "import math\n\nn = 5\nif n:  # The correct syntax for assignment and indentation\n    res = math.sqrt(n)\n    print('The square root of', n, 'is', res)"
    },
    {
        "instruction": "Implement a simple queue using an array in JavaScript. Include the enqueue and dequeue methods.",
        "input": "",
        "response": "class Queue {\n  constructor() {\n    this.items = [];\n  }\n\n  enqueue(element) {\n    this.items.push(element);\n  }\n\n  dequeue() {\n    if (this.isEmpty()) {\n      return 'Queue is empty';\n    }\n    return this.items.shift();\n  }\n\n  isEmpty() {\n    return this.items.length === 0;\n  }\n}",
        "output": "class Queue {\n  constructor() {\n    this.items = [];\n  }\n\n  enqueue(element) {\n    this.items.push(element);\n  }\n\n  dequeue() {\n    if (this.isEmpty()) {\n      return 'Queue is empty';\n    }\n    return this.items.shift();\n  }\n\n  isEmpty() {\n    return this.items.length === 0;\n  }\n}"
    },
    {
        "instruction": "How would you fix this Python code to correctly calculate the area of a triangle given its base and height?",
        "input": "def triangle_area(base, height):\n    return base * height / 1",
        "response": "def triangle_area(base, height):\n    return 0.5 * base * height  # Modify the formula to (0.5 * base * height)",
        "output": "def triangle_area(base, height):\n    return 0.5 * base * height  # Modify the formula to (0.5 * base * height)"
    },
    {
        "instruction": "Write a Java function that takes a string, reverses its characters and returns the resulting string.",
        "input": "",
        "response": "public String reverseString(String input) {\n  StringBuilder reversedString = new StringBuilder(input);\n  return reversedString.reverse().toString();\n}",
        "output": "public String reverseString(String input) {\n  StringBuilder reversedString = new StringBuilder(input);\n  return reversedString.reverse().toString();\n}"
    },
    {
        "instruction": "Given a CSV file content, write a Python code to convert it into a list of dictionaries, where the keys are the header elements and the values are the respective row elements.",
        "input": "Name,Age,Occupation\nAlice,30,Doctor\nBob,25,Engineer",
        "response": "import csv\nfrom io import StringIO\n\n\ndef csv_to_dict(csv_content):\n  csv_file = StringIO(csv_content)\n  reader = csv.DictReader(csv_file)\n  rows = [row for row in reader]\n  return rows",
        "output": "import csv\nfrom io import StringIO\n\n\ndef csv_to_dict(csv_content):\n  csv_file = StringIO(csv_content)\n  reader = csv.DictReader(csv_file)\n  rows = [row for row in reader]\n  return rows"
    },
    {
        "instruction": "Create a Python function that receives a dictionary of items and their prices, and returns the total cost of those items.",
        "input": "{'apple': 1.99, 'banana': 0.49, 'orange': 0.89}",
        "response": "def total_cost(item_prices):\n    return sum(item_prices.values())",
        "output": "def total_cost(item_prices):\n    return sum(item_prices.values())"
    },
    {
        "instruction": "In Java, design a class named Rectangle with two private integer properties width and height, write a constructor to initialize them and add a public method to calculate the area of the rectangle.",
        "input": "",
        "response": "public class Rectangle {\n\n    private int width;\n    private int height;\n\n    public Rectangle(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public int area() {\n        return width * height;\n    }\n}",
        "output": "public class Rectangle {\n\n    private int width;\n    private int height;\n\n    public Rectangle(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public int area() {\n        return width * height;\n    }\n}"
    },
    {
        "instruction": "Explain how to create an HTTP GET request in JavaScript using the Fetch API to retrieve a JSON object from a given URL.",
        "input": "https://api.example.com/data",
        "response": "To create an HTTP GET request in JavaScript using the Fetch API, you can use the following code:\n\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error fetching data:', error));\n\nYou replace 'https://api.example.com/data' with your own URL. This code uses the 'fetch' function to make a GET request to the specified URL, then it converts the response to JSON using 'response.json()' and logs the retrieved JSON object in the console. If there's an error, it will be caught and logged to the console.",
        "output": "To create an HTTP GET request in JavaScript using the Fetch API, you can use the following code:\n\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error fetching data:', error));\n\nYou replace 'https://api.example.com/data' with your own URL. This code uses the 'fetch' function to make a GET request to the specified URL, then it converts the response to JSON using 'response.json()' and logs the retrieved JSON object in the console. If there's an error, it will be caught and logged to the console."
    },
    {
        "instruction": "Write a shell script that accepts a directory path as an input argument and finds and lists all files with a '.txt' extension in that directory, recursively.",
        "input": "/path/to/directory",
        "response": "#!/bin/sh\n\nDIRECTORY_PATH=\"$1\"\nfind \"$DIRECTORY_PATH\" -name '*.txt' -type f -print",
        "output": "#!/bin/sh\n\nDIRECTORY_PATH=\"$1\"\nfind \"$DIRECTORY_PATH\" -name '*.txt' -type f -print"
    },
    {
        "instruction": "Create a Java method to calculate the area of a circle using its radius as a parameter.",
        "input": "",
        "response": "public double calculateArea(double radius) {\n    return Math.PI * Math.pow(radius, 2);\n}",
        "output": "public double calculateArea(double radius) {\n    return Math.PI * Math.pow(radius, 2);\n}"
    },
    {
        "instruction": "In JavaScript, how could one check if a given string is a valid IPv4 address?",
        "input": "",
        "response": "function isValidIPv4Address(ip) {\n  const segments = ip.split('.');\n  if (segments.length !== 4) return false;\n\n  for (const segment of segments) {\n    if (isNaN(segment) || parseInt(segment) < 0 || parseInt(segment) > 255) {\n      return false;\n    }\n  }\n\n  return true;\n}",
        "output": "function isValidIPv4Address(ip) {\n  const segments = ip.split('.');\n  if (segments.length !== 4) return false;\n\n  for (const segment of segments) {\n    if (isNaN(segment) || parseInt(segment) < 0 || parseInt(segment) > 255) {\n      return false;\n    }\n  }\n\n  return true;\n}"
    },
    {
        "instruction": "Fix the following code in C++ to correctly compute Fibonacci numbers, returning the nth Fibonacci number given n. Note: the function signature should be 'int fibonacci(int n)'.",
        "input": "int fibonacci(int n) {\n  if (n == 0)\n    return 0;\n  int a = 0, b = 1;\n  for (int i = 0; i < n - 1; ++i) {\n    int temp = b;\n    b = a + b;\n    a = temp;\n  }\n}",
        "response": "int fibonacci(int n) {\n  if (n == 0)\n    return 0;\n  int a = 0, b = 1;\n  for (int i = 0; i < n - 1; ++i) {\n    int temp = b;\n    b = a + b;\n    a = temp;\n  }\n  return b;\n}",
        "output": "int fibonacci(int n) {\n  if (n == 0)\n    return 0;\n  int a = 0, b = 1;\n  for (int i = 0; i < n - 1; ++i) {\n    int temp = b;\n    b = a + b;\n    a = temp;\n  }\n  return b;\n}"
    },
    {
        "instruction": "Create a Python function to verify if a provided input email address is in a valid format. Use email_regex to validate the email.",
        "input": "",
        "response": "import re\n\n\ndef is_valid_email(email):\n    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(email_regex, email))",
        "output": "import re\n\n\ndef is_valid_email(email):\n    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(email_regex, email))"
    },
    {
        "instruction": "Provide a Java function to find the longest word in a given string of words. Ignore case sensitivity and handle multiple words with the same length.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Main {\n    public static String findLongestWord(String input) {\n        String[] words = input.split(\" \");\n        List<String> longestWords = new ArrayList<>();\n        int maxLength = 0;\n        for(String word: words) {\n            if (word.length() > maxLength) {\n                maxLength = word.length();\n                longestWords.clear();\n                longestWords.add(word);\n            } else if (word.length() == maxLength) {\n               longestWords.add(word);\n            }\n\n        }\n\n        return String.join(\", \", longestWords);\n    }\n\n    public static void main(String[] args) {\n        String input = \"The quick brown fox jumps over the lazy dog\";\n        System.out.println(findLongestWord(input));\n    }\n}",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Main {\n    public static String findLongestWord(String input) {\n        String[] words = input.split(\" \");\n        List<String> longestWords = new ArrayList<>();\n        int maxLength = 0;\n        for(String word: words) {\n            if (word.length() > maxLength) {\n                maxLength = word.length();\n                longestWords.clear();\n                longestWords.add(word);\n            } else if (word.length() == maxLength) {\n               longestWords.add(word);\n            }\n\n        }\n\n        return String.join(\", \", longestWords);\n    }\n\n    public static void main(String[] args) {\n        String input = \"The quick brown fox jumps over the lazy dog\";\n        System.out.println(findLongestWord(input));\n    }\n}"
    },
    {
        "instruction": "Write a C++ program that prompts the user for their favorite number and displays the provided number on the screen.",
        "input": "7",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int favoriteNumber;\n    cout << \"Please enter your favorite number: \";\n    cin >> favoriteNumber;\n    cout << \"Your favorite number is: \" << favoriteNumber << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int favoriteNumber;\n    cout << \"Please enter your favorite number: \";\n    cin >> favoriteNumber;\n    cout << \"Your favorite number is: \" << favoriteNumber << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Implement a shell script that takes a folder path as an argument and counts and displays the number of files in that folder.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\nfolderPath=\"$1\"\nfileCount=$(find \"$folderPath\" -type f | wc -l)\necho \"Number of files in folder '\"$folderPath\"': $fileCount\"",
        "output": "#!/bin/bash\n\nfolderPath=\"$1\"\nfileCount=$(find \"$folderPath\" -type f | wc -l)\necho \"Number of files in folder '\"$folderPath\"': $fileCount\""
    },
    {
        "instruction": "What would be the expected output of the following Python code snippet? Explain your reasoning.",
        "input": "def mystery_operation(x):\n    y = x * 2\n    x.append(y)\n    return y\n\nnumbers = [1, 2, 3]\nresult = mystery_operation(numbers)\nprint(result)\nprint(numbers)",
        "response": "The output would be:\n\n4 4\n[1, 2, 3, 4, 4]\n\nExplanation:\nThe function 'mystery_operation' receives a list 'x' and first multiplies the second element in the list (2) by 2, resulting in 'y' being assigned the value 4. The function then appends 'y' to the list twice, modifying the original list 'numbers'. Finally, 'y' is returned, and both 'result' and the modified 'numbers' list are printed.",
        "output": "The output would be:\n\n4 4\n[1, 2, 3, 4, 4]\n\nExplanation:\nThe function 'mystery_operation' receives a list 'x' and first multiplies the second element in the list (2) by 2, resulting in 'y' being assigned the value 4. The function then appends 'y' to the list twice, modifying the original list 'numbers'. Finally, 'y' is returned, and both 'result' and the modified 'numbers' list are printed."
    },
    {
        "instruction": "Write a JavaScript function to sum the elements of an array.",
        "input": "Array: [10, 5, 2, 1]",
        "response": "function sumArray(array) {\n return array.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}\n\nsumArray([10, 5, 2, 1]);",
        "output": "function sumArray(array) {\n return array.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}\n\nsumArray([10, 5, 2, 1]);"
    },
    {
        "instruction": "Create a C++ function to swap the values of two integer variables using pass by reference.",
        "input": "int a = 3; int b = 5;",
        "response": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n int temp = a; a = b; b = temp;\n}\n\nint main() {\n int a = 3; int b = 5;\n swap(a, b);\n std::cout << 'a: ' << a << ', b: ' << b << std::endl;\n return 0;\n}",
        "output": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n int temp = a; a = b; b = temp;\n}\n\nint main() {\n int a = 3; int b = 5;\n swap(a, b);\n std::cout << 'a: ' << a << ', b: ' << b << std::endl;\n return 0;\n}"
    },
    {
        "instruction": "Can you provide a Java example of listing all files in a given directory along with their sizes?",
        "input": "Directory Path: /path/to/directory",
        "response": "import java.io.File;\n\npublic class FileLister {\n public static void main(String[] args) {\n  File dir = new File('/path/to/directory');\n  if (dir.isDirectory()) {\n   File[] files = dir.listFiles();\n   for (File file : files) {\n    System.out.println('File: ' + file.getName() + ' - Size: ' + file.length() + ' bytes');\n   }\n  }\n }\n}",
        "output": "import java.io.File;\n\npublic class FileLister {\n public static void main(String[] args) {\n  File dir = new File('/path/to/directory');\n  if (dir.isDirectory()) {\n   File[] files = dir.listFiles();\n   for (File file : files) {\n    System.out.println('File: ' + file.getName() + ' - Size: ' + file.length() + ' bytes');\n   }\n  }\n }\n}"
    },
    {
        "instruction": "Create a Python script to send an email via SMTP to a recipient.",
        "input": "To: recipient@example.com\nSubject: Greetings\nBody: Hello, greetings from the user!",
        "response": "import smtplib\n\ndef send_email(to_email, subject, body):\n server = smtplib.SMTP('smtp.gmail.com', 587)\n server.starttls()\n server.login('you@gmail.com', 'your-password')\n\n message = 'Subject: {}\\n\\n{}'.format(subject, body)\n server.sendmail('you@gmail.com', to_email, message)\n server.quit()\n\n\nsend_email('recipient@example.com', 'Greetings', 'Hello, greetings from the user!')",
        "output": "import smtplib\n\ndef send_email(to_email, subject, body):\n server = smtplib.SMTP('smtp.gmail.com', 587)\n server.starttls()\n server.login('you@gmail.com', 'your-password')\n\n message = 'Subject: {}\\n\\n{}'.format(subject, body)\n server.sendmail('you@gmail.com', to_email, message)\n server.quit()\n\n\nsend_email('recipient@example.com', 'Greetings', 'Hello, greetings from the user!')"
    },
    {
        "instruction": "Create a Python function to merge two sorted lists into a new sorted list.",
        "input": "list1 = [1, 3, 5, 7], list2 = [2, 4, 6, 8]",
        "response": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    if i < len(list1):\n        merged_list.extend(list1[i:])\n    if j < len(list2):\n        merged_list.extend(list2[j:])\n    return merged_list",
        "output": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    if i < len(list1):\n        merged_list.extend(list1[i:])\n    if j < len(list2):\n        merged_list.extend(list2[j:])\n    return merged_list"
    },
    {
        "instruction": "Write a JavaScript function to find the greatest common divisor of two given numbers.",
        "input": "number1 = 14, number2 = 28",
        "response": "function gcd(number1, number2) {\n  if (number2 === 0) return number1;\n  return gcd(number2, number1 % number2);\n}",
        "output": "function gcd(number1, number2) {\n  if (number2 === 0) return number1;\n  return gcd(number2, number1 % number2);\n}"
    },
    {
        "instruction": "Modify the following C code to handle integer division by zero and return -1 in such cases.",
        "input": "int integer_division(int a, int b) {\n    return a / b;\n}",
        "response": "int integer_division(int a, int b) {\n    if (b == 0) {\n        return -1;\n    }\n    return a / b;\n}",
        "output": "int integer_division(int a, int b) {\n    if (b == 0) {\n        return -1;\n    }\n    return a / b;\n}"
    },
    {
        "instruction": "Explain how the following Java code snippet iterates through a HashMap and prints its keys and values.",
        "input": "HashMap<String, Integer> map = new HashMap<String, Integer>();\nmap.put(\"apple\", 3);\nmap.put(\"banana\", 2);\nmap.put(\"orange\", 1);\n\nfor (Map.Entry<String, Integer> entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \": \" + entry.getValue());\n}",
        "response": "The code first initializes a HashMap called 'map' with String keys and Integer values. Then, it adds three key-value pairs to the HashMap. After that, it uses a for-each loop to iterate through the HashMap using 'entrySet()' method. The 'entrySet()' method returns a set of all entries contained in the HashMap. For each entry, it prints the key using 'entry.getKey()' and the value using 'entry.getValue()', separated by a colon and a space.",
        "output": "The code first initializes a HashMap called 'map' with String keys and Integer values. Then, it adds three key-value pairs to the HashMap. After that, it uses a for-each loop to iterate through the HashMap using 'entrySet()' method. The 'entrySet()' method returns a set of all entries contained in the HashMap. For each entry, it prints the key using 'entry.getKey()' and the value using 'entry.getValue()', separated by a colon and a space."
    },
    {
        "instruction": "Develop a C++ function that reads a text file and prints the contents to the console.",
        "input": "example_file.txt (Content: 'Hello, World!\\nWelcome to the file reading demo.')",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid readFile(const std::string& fileName) {\n    std::ifstream file(fileName);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            std::cout << line << std::endl;\n        }\n        file.close();\n    } else {\n        std::cout << \"Unable to open file\" << std::endl;\n    }\n}\n\nint main() {\n    readFile(\"example_file.txt\");\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid readFile(const std::string& fileName) {\n    std::ifstream file(fileName);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            std::cout << line << std::endl;\n        }\n        file.close();\n    } else {\n        std::cout << \"Unable to open file\" << std::endl;\n    }\n}\n\nint main() {\n    readFile(\"example_file.txt\");\n    return 0;\n}"
    },
    {
        "instruction": "How can we implement a Python script that takes user input and checks if it is a valid email address?",
        "input": "example_email@example.com",
        "response": "import re\n\ndef is_valid_email(email):\n    pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\n    return re.match(pattern, email) is not None\n\nuser_input = input('Enter an email address: ')\nif is_valid_email(user_input):\n    print('The email address is valid.')\nelse:\n    print('The email address is invalid.')",
        "output": "import re\n\ndef is_valid_email(email):\n    pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\n    return re.match(pattern, email) is not None\n\nuser_input = input('Enter an email address: ')\nif is_valid_email(user_input):\n    print('The email address is valid.')\nelse:\n    print('The email address is invalid.')"
    },
    {
        "instruction": "Mouse over event in JavaScript, change the font color of a paragraph element with the id 'target' to red.",
        "input": "<p id='target'>Hover over me!</p>",
        "response": "document.getElementById('target').addEventListener('mouseover', function() {\n    this.style.color = 'red';\n});",
        "output": "document.getElementById('target').addEventListener('mouseover', function() {\n    this.style.color = 'red';\n});"
    },
    {
        "instruction": "Create a Python script that calculates the area of a triangle using the Heron's formula. Prompt the user for the side lengths.",
        "input": "Side A: 3\\nSide B: 4\\nSide C: 5",
        "response": "import math\n\ndef herons_formula(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\nside_a = float(input('Side A: '))\nside_b = float(input('Side B: '))\nside_c = float(input('Side C: '))\n\narea = herons_formula(side_a, side_b, side_c)\nprint('Triangle area:', area)",
        "output": "import math\n\ndef herons_formula(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\nside_a = float(input('Side A: '))\nside_b = float(input('Side B: '))\nside_c = float(input('Side C: '))\n\narea = herons_formula(side_a, side_b, side_c)\nprint('Triangle area:', area)"
    },
    {
        "instruction": "Create a JavaScript function that takes a string input, reverses it, and returns the reversed string.",
        "input": "reverseString('Hello, GPT!')",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\nconsole.log(reverseString('Hello, GPT!'));",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\nconsole.log(reverseString('Hello, GPT!'));"
    },
    {
        "instruction": "How to implement a simple server in Node.js using the Express framework?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => res.send('Hello World!'));\n\napp.listen(port, () => console.log(`Server running at http://localhost:${port}`));",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => res.send('Hello World!'));\n\napp.listen(port, () => console.log(`Server running at http://localhost:${port}`));"
    },
    {
        "instruction": "Write a C++ program to find the sum of two integers using a function.",
        "input": "int a = 5;\nint b = 3;",
        "response": "#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int a = 5;\n    int b = 3;\n    std::cout << \"The sum of \" << a << \" and \" << b << \" is \" << sum(a, b) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int a = 5;\n    int b = 3;\n    std::cout << \"The sum of \" << a << \" and \" << b << \" is \" << sum(a, b) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "What is a proper way to implement a selection sort algorithm in Python?",
        "input": "arr = [64, 34, 25, 12, 22, 11, 90]",
        "response": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nselection_sort(arr)\nprint('Sorted array:', arr)",
        "output": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nselection_sort(arr)\nprint('Sorted array:', arr)"
    },
    {
        "instruction": "Provide a Python function that receives a list of strings and returns a dictionary with the frequency count of each unique string.",
        "input": "['apple', 'pear', 'banana', 'apple', 'banana']",
        "response": "def string_frequency(strings_list):\n    frequency_dict = {}\n    for string in strings_list:\n        if string in frequency_dict:\n            frequency_dict[string] += 1\n        else:\n            frequency_dict[string] = 1\n    return frequency_dict\n\nresult = string_frequency(['apple', 'pear', 'banana', 'apple', 'banana'])\nprint(result)",
        "output": "def string_frequency(strings_list):\n    frequency_dict = {}\n    for string in strings_list:\n        if string in frequency_dict:\n            frequency_dict[string] += 1\n        else:\n            frequency_dict[string] = 1\n    return frequency_dict\n\nresult = string_frequency(['apple', 'pear', 'banana', 'apple', 'banana'])\nprint(result)"
    },
    {
        "instruction": "Create a Java method that calculates the area of a rectangle given its width and height.",
        "input": "Width: 5, Height: 3",
        "response": "public class RectangleArea {\n    public static void main(String[] args) {\n        double width = 5;\n        double height = 3;\n        double area = calculateArea(width, height);\n        System.out.println(area);\n    }\n\n    public static double calculateArea(double width, double height) {\n        return width * height;\n    }\n}",
        "output": "public class RectangleArea {\n    public static void main(String[] args) {\n        double width = 5;\n        double height = 3;\n        double area = calculateArea(width, height);\n        System.out.println(area);\n    }\n\n    public static double calculateArea(double width, double height) {\n        return width * height;\n    }\n}"
    },
    {
        "instruction": "How would you modify the following Python code to check if a given number is an Armstrong number?",
        "input": "num = 153",
        "response": "def is_armstrong_number(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    armstrong_result = 0\n\n    for digit_str in num_str:\n        armstrong_result += int(digit_str) ** num_len\n\n    return armstrong_result == num\n\nnum = 153;\nresult = is_armstrong_number(num)\nprint(result)",
        "output": "def is_armstrong_number(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    armstrong_result = 0\n\n    for digit_str in num_str:\n        armstrong_result += int(digit_str) ** num_len\n\n    return armstrong_result == num\n\nnum = 153;\nresult = is_armstrong_number(num)\nprint(result)"
    },
    {
        "instruction": "Translate the following C++ code to JavaScript:",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 7;\n    int b = 11;\n    int sum = a + b;\n\n    cout << \"Sum: \" << sum << endl;\n    return 0;\n}",
        "response": "const a = 7;\nconst b = 11;\nconst sum = a + b;\nconsole.log(`Sum: ${sum}`);",
        "output": "const a = 7;\nconst b = 11;\nconst sum = a + b;\nconsole.log(`Sum: ${sum}`);"
    },
    {
        "instruction": "Write a Java function that converts a given temperature in Celsius to Fahrenheit.",
        "input": "",
        "response": "public double celsiusToFahrenheit(double celsius) {\n    return (celsius * 9/5) + 32;\n}",
        "output": "public double celsiusToFahrenheit(double celsius) {\n    return (celsius * 9/5) + 32;\n}"
    },
    {
        "instruction": "How would you implement a simple REST API endpoint in JavaScript using Express?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\n\napp.get('/api/endpoint', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.listen(3000, () => {\n  console.log('App listening on port 3000');\n});",
        "output": "const express = require('express');\nconst app = express();\n\napp.get('/api/endpoint', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.listen(3000, () => {\n  console.log('App listening on port 3000');\n});"
    },
    {
        "instruction": "Translate the following Python code to C++:",
        "input": "def function_name(param1, param2):\n    result = param1 * param2\n    return result",
        "response": "#include <iostream>\n\nint function_name(int param1, int param2) {\n    int result = param1 * param2;\n    return result;\n}\n\nint main() {\n  std::cout << \"Result: \" << function_name(5, 6) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint function_name(int param1, int param2) {\n    int result = param1 * param2;\n    return result;\n}\n\nint main() {\n  std::cout << \"Result: \" << function_name(5, 6) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Provide a shell script to check if a file exists and if it does not, create a new empty file with the given name.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nFILE='example.txt'\n\nif [ ! -f $FILE ]; then\n  touch $FILE\n  echo \"Created file: $FILE\"\nelse\n  echo \"File already exists: $FILE\"\nfi",
        "output": "#!/bin/bash\n\nFILE='example.txt'\n\nif [ ! -f $FILE ]; then\n  touch $FILE\n  echo \"Created file: $FILE\"\nelse\n  echo \"File already exists: $FILE\"\nfi"
    },
    {
        "instruction": "Write Python code to find the first non-repeated character in a text string.",
        "input": "Example: 'PythonProgrammingLanguage'",
        "response": "def first_non_repeated_char(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\nexample = 'PythonProgrammingLanguage'\nresult = first_non_repeated_char(example)\nprint(result)",
        "output": "def first_non_repeated_char(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\nexample = 'PythonProgrammingLanguage'\nresult = first_non_repeated_char(example)\nprint(result)"
    },
    {
        "instruction": "In Java, implement a server that listens on TCP port 8080 and prints any messages received to stdout.",
        "input": "",
        "response": "import java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TCPServer {\n\n public static void main(String[] args) throws IOException {\n int port = 8080;\n try (ServerSocket serverSocket = new ServerSocket(port)) {\n while (true) {\n Socket socket = serverSocket.accept();\n BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n String message = in.readLine();\n System.out.println(message);\n }\n }\n }\n}",
        "output": "import java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TCPServer {\n\n public static void main(String[] args) throws IOException {\n int port = 8080;\n try (ServerSocket serverSocket = new ServerSocket(port)) {\n while (true) {\n Socket socket = serverSocket.accept();\n BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n String message = in.readLine();\n System.out.println(message);\n }\n }\n }\n}"
    },
    {
        "instruction": "Explain the code of this JavaScript function that debounces input.",
        "input": "function debounce(func, wait) {\n    let timeout;\n    return function (...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), wait);\n    };\n}",
        "response": "This JavaScript function 'debounce' takes two arguments: 'func', which is the function to execute, and 'wait', which is the number of milliseconds to wait before executing 'func'.\n\nThe function returns a new anonym function that takes '...args' - this represents an array of arguments that will be passed to 'func'.\n\nInside the returned function: \n1. Clears any previously set timeout using 'clearTimeout', preventing the execution of the previous 'func' call.\n2. Sets up a new timeout using 'setTimeout' to execute 'func' after the specified 'wait' time. Inside the 'setTimeout', 'func' is executed with the passed arguments using 'func.apply(this, args)'.\n\nThe result is that the 'func' call is 'debounced', meaning it is only executed once after the specified 'wait' time has passed since the most recent call.",
        "output": "This JavaScript function 'debounce' takes two arguments: 'func', which is the function to execute, and 'wait', which is the number of milliseconds to wait before executing 'func'.\n\nThe function returns a new anonym function that takes '...args' - this represents an array of arguments that will be passed to 'func'.\n\nInside the returned function: \n1. Clears any previously set timeout using 'clearTimeout', preventing the execution of the previous 'func' call.\n2. Sets up a new timeout using 'setTimeout' to execute 'func' after the specified 'wait' time. Inside the 'setTimeout', 'func' is executed with the passed arguments using 'func.apply(this, args)'.\n\nThe result is that the 'func' call is 'debounced', meaning it is only executed once after the specified 'wait' time has passed since the most recent call."
    },
    {
        "instruction": "Fix the syntax and semantic issues in the given C++ code.",
        "input": "#include <iostream>\nint main() {\n int x = 25;\n int y - 12;\n std::cout << 'The sum of x + y = ' << x + y;\n return 0;\n}",
        "response": "#include <iostream>\nint main() {\n int x = 25;\n int y = 12;\n std::cout << 'The sum of x + y = ' << (x + y);\n return 0;\n}",
        "output": "#include <iostream>\nint main() {\n int x = 25;\n int y = 12;\n std::cout << 'The sum of x + y = ' << (x + y);\n return 0;\n}"
    },
    {
        "instruction": "Create a Java class named 'PrimeFinder' that includes a static method 'isPrime' which takes an integer as input and returns a boolean indicating if the given number is a prime number or not.",
        "input": "",
        "response": "public class PrimeFinder {\n\n  public static boolean isPrime(int number) {\n    if (number <= 1) {\n      return false;\n    }\n    for (int i = 2; i <= Math.sqrt(number); i++) {\n      if (number % i == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "output": "public class PrimeFinder {\n\n  public static boolean isPrime(int number) {\n    if (number <= 1) {\n      return false;\n    }\n    for (int i = 2; i <= Math.sqrt(number); i++) {\n      if (number % i == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
    },
    {
        "instruction": "How would you implement bubble sort in a Python function to sort a given list of integers in ascending order?",
        "input": "",
        "response": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr",
        "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr"
    },
    {
        "instruction": "Fix the given Python code to correct the syntax errors in this basic calculator program.",
        "input": "def add(x, y):\n  return x y)\ndef subtract(x, y):\n  return x - y\ndef multiply(x, y):\n  return x * y\ndef divide(x, y):\n  return x / y\nprint(add(3, 5 multiply(7, 1))",
        "response": "def add(x, y):\n  return x + y\n\ndef subtract(x, y):\n  return x - y\n\ndef multiply(x, y):\n  return x * y\n\ndef divide(x, y):\n  return x / y\n\nprint(add(3, 5) * multiply(7, 1))",
        "output": "def add(x, y):\n  return x + y\n\ndef subtract(x, y):\n  return x - y\n\ndef multiply(x, y):\n  return x * y\n\ndef divide(x, y):\n  return x / y\n\nprint(add(3, 5) * multiply(7, 1))"
    },
    {
        "instruction": "Write a simple program in C++ that generates Fibonacci sequence up to the 'n' terms where 'n' is given by the user. Also, implement an error check for negative input values.",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int n, t1 = 0, t2 = 1, nextTerm;\n\n  cout << \"Enter the number of terms: \";\n  cin >> n;\n\n  if (n <= 0) {\n    cout << \"Invalid input!\";\n    return 1;\n  }\n\n  cout << \"Fibonacci Series: \";\n\n  for (int i = 1; i <= n; ++i) {\n    if (i == 1) {\n      cout << t1 << \" \";\n      continue;\n    }\n    if (i == 2) {\n      cout << t2 << \" \";\n      continue;\n    }\n    nextTerm = t1 + t2;\n    t1 = t2;\n    t2 = nextTerm;\n    cout << nextTerm << \" \";\n  }\n\n  return 0;\n}\n",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int n, t1 = 0, t2 = 1, nextTerm;\n\n  cout << \"Enter the number of terms: \";\n  cin >> n;\n\n  if (n <= 0) {\n    cout << \"Invalid input!\";\n    return 1;\n  }\n\n  cout << \"Fibonacci Series: \";\n\n  for (int i = 1; i <= n; ++i) {\n    if (i == 1) {\n      cout << t1 << \" \";\n      continue;\n    }\n    if (i == 2) {\n      cout << t2 << \" \";\n      continue;\n    }\n    nextTerm = t1 + t2;\n    t1 = t2;\n    t2 = nextTerm;\n    cout << nextTerm << \" \";\n  }\n\n  return 0;\n}\n"
    },
    {
        "instruction": "Create a Python function that calculates the length of a hypotenuse given the lengths of the other two sides of a right-angled triangle.",
        "input": "6, 8",
        "response": "import math\n\ndef calculate_hypotenuse(a, b):\n    return math.sqrt(a ** 2 + b ** 2)\n\nside_a = 6\nside_b = 8\nhypotenuse = calculate_hypotenuse(side_a, side_b)\nprint(hypotenuse)",
        "output": "import math\n\ndef calculate_hypotenuse(a, b):\n    return math.sqrt(a ** 2 + b ** 2)\n\nside_a = 6\nside_b = 8\nhypotenuse = calculate_hypotenuse(side_a, side_b)\nprint(hypotenuse)"
    },
    {
        "instruction": "Construct the implementation of the Bubble Sort algorithm in C++.",
        "input": "[5, 3, 8, 4, 2]",
        "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid bubbleSort(vector<int> &arr) {\n    int n = arr.size();\n    for (int i = 0; i < n-1; i++)\n        for (int j = 0; j < n-i-1; j++)\n            if (arr[j] > arr[j+1])\n                swap(arr[j], arr[j+1]);\n}\n\nint main() {\n    vector<int> data = {5, 3, 8, 4, 2};\n    bubbleSort(data);\n    for (int val : data) {\n        cout << val << ' ';\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid bubbleSort(vector<int> &arr) {\n    int n = arr.size();\n    for (int i = 0; i < n-1; i++)\n        for (int j = 0; j < n-i-1; j++)\n            if (arr[j] > arr[j+1])\n                swap(arr[j], arr[j+1]);\n}\n\nint main() {\n    vector<int> data = {5, 3, 8, 4, 2};\n    bubbleSort(data);\n    for (int val : data) {\n        cout << val << ' ';\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Show me how to create a Node.js Express server that serves a static HTML file.",
        "input": "index.html:<html><head><title>Hello</title></head><body><h1>Hello, Express!</h1></body></html>",
        "response": "const express = require('express');\nconst path = require('path');\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.get('/', (req, res) => {\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});\n\n// Create a 'public' folder and place the index.html file inside it.",
        "output": "const express = require('express');\nconst path = require('path');\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.get('/', (req, res) => {\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});\n\n// Create a 'public' folder and place the index.html file inside it."
    },
    {
        "instruction": "What would be the correct way of writing a bash script that lists all the files in the current directory and writes the output to a text file?",
        "input": "",
        "response": "#!/bin/bash\n\nls > file_list.txt",
        "output": "#!/bin/bash\n\nls > file_list.txt"
    },
    {
        "instruction": "Create a JavaScript function that receives an array of numbers as input and returns an array of their squares.",
        "input": "[2, 4, 6, 8]",
        "response": "function squareNumbers(numbers) {\n    return numbers.map(number => number * number);\n}\n\nconst squaredArray = squareNumbers([2, 4, 6, 8]);\nconsole.log(squaredArray);",
        "output": "function squareNumbers(numbers) {\n    return numbers.map(number => number * number);\n}\n\nconst squaredArray = squareNumbers([2, 4, 6, 8]);\nconsole.log(squaredArray);"
    },
    {
        "instruction": "Write code, in the C programming language, that prints the first n Fibonacci numbers.",
        "input": "n = 10",
        "response": "#include <stdio.h>\n\nvoid printFibonacci(int n) {\n    int t1 = 0, t2 = 1, nextTerm;\n\n    for (int i = 1; i <= n; ++i) {\n        printf(\"%d, \", t1);\n        nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n    }\n}\n\nint main() {\n    int n = 10;\n    printFibonacci(n);\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nvoid printFibonacci(int n) {\n    int t1 = 0, t2 = 1, nextTerm;\n\n    for (int i = 1; i <= n; ++i) {\n        printf(\"%d, \", t1);\n        nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n    }\n}\n\nint main() {\n    int n = 10;\n    printFibonacci(n);\n\n    return 0;\n}"
    },
    {
        "instruction": "In Java, create a function that accepts a String and returns the number of vowels present in the input string.",
        "input": "Hello, world!",
        "response": "public int countVowels(String input) {\n    int count = 0;\n    String vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint numberOfVowels = countVowels(\"Hello, world!\");\nSystem.out.println(numberOfVowels);",
        "output": "public int countVowels(String input) {\n    int count = 0;\n    String vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint numberOfVowels = countVowels(\"Hello, world!\");\nSystem.out.println(numberOfVowels);"
    },
    {
        "instruction": "What would be the SQL query to retrieve the top 5 customers by their total spending from a given relational database having the following tables: 'customers', 'orders', and 'order_items'?",
        "input": "Table 'customers': id, name\nTable 'orders': id, customer_id\nTable 'order_items': id, order_id, quantity, unit_price",
        "response": "SELECT c.id, c.name, SUM(oi.quantity * oi.unit_price) as total_spent\nFROM customers c\nJOIN orders o ON c.id = o.customer_id\nJOIN order_items oi ON o.id = oi.order_id\nGROUP BY c.id, c.name\nORDER BY total_spent DESC\nLIMIT 5;",
        "output": "SELECT c.id, c.name, SUM(oi.quantity * oi.unit_price) as total_spent\nFROM customers c\nJOIN orders o ON c.id = o.customer_id\nJOIN order_items oi ON o.id = oi.order_id\nGROUP BY c.id, c.name\nORDER BY total_spent DESC\nLIMIT 5;"
    },
    {
        "instruction": "Create a JavaScript function that calculates the Fibonacci sequence up to the given number n as input and returns an array of the numbers in the sequence.",
        "input": "",
        "response": "function fibonacci(n) {\n  const sequence = [0, 1];\n  for (let i = 2; i < n; i++) {\n    sequence[i] = sequence[i - 1] + sequence[i - 2];\n  }\n  return sequence;\n}",
        "output": "function fibonacci(n) {\n  const sequence = [0, 1];\n  for (let i = 2; i < n; i++) {\n    sequence[i] = sequence[i - 1] + sequence[i - 2];\n  }\n  return sequence;\n}"
    },
    {
        "instruction": "Translate the following Python code to C++ that takes an integer input and prints 'Even' if it is even, and 'Odd' if it is odd.",
        "input": "def check_even_odd(num):\n    if num % 2 == 0:\n        print('Even')\n    else:\n        print('Odd')",
        "response": "#include <iostream>\n\nvoid check_even_odd(int num) {\n  if (num % 2 == 0) {\n    std::cout << 'Even' << std::endl;\n  } else {\n    std::cout << 'Odd' << std::endl;\n  }\n}",
        "output": "#include <iostream>\n\nvoid check_even_odd(int num) {\n  if (num % 2 == 0) {\n    std::cout << 'Even' << std::endl;\n  } else {\n    std::cout << 'Odd' << std::endl;\n  }\n}"
    },
    {
        "instruction": "Given this Java code snippet, find any syntax errors and provide the corrected code. Additionally, provide a brief explanation of the identified syntax errors.",
        "input": "public class Main { \n    public static void main(String[] args) {\n        system.out.println(Hello, World!);\n    }\n}",
        "response": "public class Main { \n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n\nThe identified syntax errors are:\n1. 'System' should be capitalized.\n2. The string 'Hello, World!' should be surrounded by double quotes (\").",
        "output": "public class Main { \n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n\nThe identified syntax errors are:\n1. 'System' should be capitalized.\n2. The string 'Hello, World!' should be surrounded by double quotes (\")."
    },
    {
        "instruction": "Write a shell script to find all files with a .txt extension in the current directory and its subdirectories, and then count the number of lines in each file.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -type f -name '*.txt' | while read file;\ndo\n  echo \"$file: $(wc -l <\"$file\") lines\";\ndone",
        "output": "#!/bin/bash\n\nfind . -type f -name '*.txt' | while read file;\ndo\n  echo \"$file: $(wc -l <\"$file\") lines\";\ndone"
    },
    {
        "instruction": "Create a Python function that takes in a list of numbers and returns the sum of all even numbers in the list.",
        "input": "[1, 5, 8, 12, 17, 28]",
        "response": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\nresult = sum_even_numbers([1, 5, 8, 12, 17, 28])\nprint(result)",
        "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n\nresult = sum_even_numbers([1, 5, 8, 12, 17, 28])\nprint(result)"
    },
    {
        "instruction": "Find the syntax error in the following Java code snippet and provide the corrected code.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.printn(\"Hello, world!\")\n    }\n}",
        "response": "public class HelloWorld {\n    public static void main(String[] args) {\n        // The correct method is 'println', not 'printn'\n        System.out.println(\"Hello, world!\");\n    }\n}",
        "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        // The correct method is 'println', not 'printn'\n        System.out.println(\"Hello, world!\");\n    }\n}"
    },
    {
        "instruction": "Translate the following JavaScript function that calculates the factorial of a positive integer into an equivalent C++ function.",
        "input": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    int result = factorial(n);\n    std::cout << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    int result = factorial(n);\n    std::cout << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Given an API endpoint, write a Python script using the 'requests' library to fetch data from the endpoint, parse the resulting JSON data, and print each item in a human-readable format.",
        "input": "https://api.example.com/v1/data",
        "response": "import requests\nimport json\n\nurl = 'https://api.example.com/v1/data'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = json.loads(response.text)\n    for item in data:\n        print(json.dumps(item, indent=4))\nelse:\n    print('Error:', response.status_code)",
        "output": "import requests\nimport json\n\nurl = 'https://api.example.com/v1/data'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = json.loads(response.text)\n    for item in data:\n        print(json.dumps(item, indent=4))\nelse:\n    print('Error:', response.status_code)"
    },
    {
        "instruction": "Create a function in JavaScript that takes an array of numbers as input and returns the sum of all even elements.",
        "input": "[6, 13, 8, 15, 21, 2]",
        "response": "function sumEven(arr) {\n    return arr.filter(x => x % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nlet exampleArray = [6, 13, 8, 15, 21, 2];\nlet result = sumEven(exampleArray);\nconsole.log(result);",
        "output": "function sumEven(arr) {\n    return arr.filter(x => x % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nlet exampleArray = [6, 13, 8, 15, 21, 2];\nlet result = sumEven(exampleArray);\nconsole.log(result);"
    },
    {
        "instruction": "Please fix the syntax error in this Java code snippet.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println('Hello, World!');\n    }\n}",
        "response": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Implement a C++ code that reads a text file and prints each line in reverse order.",
        "input": "file.txt:\nHello World\nI am a programmer\n\n",
        "response": "#include<iostream>\n#include<fstream>\n#include<string>\n#include<algorithm>\n\nint main() {\n    std::ifstream inputFile(\"file.txt\");\n    if (!inputFile.is_open()) {\n        std::cerr << \"Unable to open file\" << std::endl;\n        return 1;\n    }\n\n    std::string line;\n    while(getline(inputFile, line)) {\n        std::reverse(line.begin(), line.end());\n        std::cout << line << std::endl;\n    }\n\n    inputFile.close();\n    return 0;\n}",
        "output": "#include<iostream>\n#include<fstream>\n#include<string>\n#include<algorithm>\n\nint main() {\n    std::ifstream inputFile(\"file.txt\");\n    if (!inputFile.is_open()) {\n        std::cerr << \"Unable to open file\" << std::endl;\n        return 1;\n    }\n\n    std::string line;\n    while(getline(inputFile, line)) {\n        std::reverse(line.begin(), line.end());\n        std::cout << line << std::endl;\n    }\n\n    inputFile.close();\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement an API call to retrieve user details from an external JSON data source using Python?",
        "input": "API URL: https://api.example.com/user/1",
        "response": "import requests\n\nurl = 'https://api.example.com/user/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    user_data = response.json()\n    print(user_data)\nelse:\n    print(f\"Error {response.status_code}: Unable to retrieve user data.\")",
        "output": "import requests\n\nurl = 'https://api.example.com/user/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    user_data = response.json()\n    print(user_data)\nelse:\n    print(f\"Error {response.status_code}: Unable to retrieve user data.\")"
    },
    {
        "instruction": "Write a Python function that accepts a list of integers, reverses the integers in each element, and returns the list.",
        "input": "[123, 456, 789]",
        "response": "def reverse_integers(numbers):\n    return [int(str(num)[::-1]) for num in numbers]\n\ninput_list = [123, 456, 789]\nresult = reverse_integers(input_list)\nprint(result)",
        "output": "def reverse_integers(numbers):\n    return [int(str(num)[::-1]) for num in numbers]\n\ninput_list = [123, 456, 789]\nresult = reverse_integers(input_list)\nprint(result)"
    },
    {
        "instruction": "Provide a Java function that takes two strings, and returns a boolean indicating if they are anagrams of each other. Two strings are anagrams if they have the same characters but in a different order.",
        "input": "listen, silent",
        "response": "public static boolean areAnagrams(String first, String second) {\n    char[] firstChars = first.toCharArray();\n    char[] secondChars = second.toCharArray();\n    Arrays.sort(firstChars);\n    Arrays.sort(secondChars);\n    return Arrays.equals(firstChars, secondChars);\n}\n\nString str1 = \"listen\";\nString str2 = \"silent\";\nSystem.out.println(areAnagrams(str1, str2));",
        "output": "public static boolean areAnagrams(String first, String second) {\n    char[] firstChars = first.toCharArray();\n    char[] secondChars = second.toCharArray();\n    Arrays.sort(firstChars);\n    Arrays.sort(secondChars);\n    return Arrays.equals(firstChars, secondChars);\n}\n\nString str1 = \"listen\";\nString str2 = \"silent\";\nSystem.out.println(areAnagrams(str1, str2));"
    },
    {
        "instruction": "Create a Shell script that finds all files in the current directory and its subdirectories, which have been modified within the last 7 days and have a .txt extension.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -name \"*.txt\" -mtime -7 -print",
        "output": "#!/bin/bash\n\nfind . -name \"*.txt\" -mtime -7 -print"
    },
    {
        "instruction": "How do you implement a simple HTTP server using Node.js that serves a static HTML file located at /path/to/your/index.html?",
        "input": "/path/to/your/index.html",
        "response": "const http = require('http');\nconst fs = require('fs');\nconst path = '/path/to/your/index.html';\n\nconst server = http.createServer((req, res) => {\n  fs.readFile(path, 'utf-8', (err, data) => {\n    if (err) {\n      res.statusCode = 404;\n      res.end('File not found');\n    } else {\n      res.statusCode = 200;\n      res.setHeader('Content-Type', 'text/html');\n      res.end(data);\n    }\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});",
        "output": "const http = require('http');\nconst fs = require('fs');\nconst path = '/path/to/your/index.html';\n\nconst server = http.createServer((req, res) => {\n  fs.readFile(path, 'utf-8', (err, data) => {\n    if (err) {\n      res.statusCode = 404;\n      res.end('File not found');\n    } else {\n      res.statusCode = 200;\n      res.setHeader('Content-Type', 'text/html');\n      res.end(data);\n    }\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
    },
    {
        "instruction": "Convert the following Python code snippet to JavaScript: def add(x, y): return x + y",
        "input": "",
        "response": "function add(x, y) {\n  return x + y;\n}",
        "output": "function add(x, y) {\n  return x + y;\n}"
    },
    {
        "instruction": "Implement a Java method that calculates fibonacci sequence of a given number n.",
        "input": "public static int fibonacci(int n)",
        "response": "public static int fibonacci(int n) {\n  if (n <= 1) {\n   return n;\n  } else {\n   return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}",
        "output": "public static int fibonacci(int n) {\n  if (n <= 1) {\n   return n;\n  } else {\n   return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}"
    },
    {
        "instruction": "Using JavaScript, write a function to find the longest word in a given sentence.",
        "input": "function findLongestWord(sentence)",
        "response": "function findLongestWord(sentence) {\n  var words = sentence.split(' ');\n  var maxLength = 0;\n  var longestWord = '';\n\n  for (var i = 0; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      maxLength = words[i].length;\n      longestWord = words[i];\n    }\n  }\n  return longestWord;\n}",
        "output": "function findLongestWord(sentence) {\n  var words = sentence.split(' ');\n  var maxLength = 0;\n  var longestWord = '';\n\n  for (var i = 0; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      maxLength = words[i].length;\n      longestWord = words[i];\n    }\n  }\n  return longestWord;\n}"
    },
    {
        "instruction": "Create a Bash shell script that calculates the factorial of a given number n.",
        "input": "#!/bin/bash\n\nfactorial()",
        "response": "#!/bin/bash\n\nfactorial() {\n  local n=$1\n  if [ $n -le 1 ]; then\n    echo 1\n  else\n    local result=$(factorial $((n-1)))\n    echo $((n * result))\n  fi\n}\n\nfactorial $1",
        "output": "#!/bin/bash\n\nfactorial() {\n  local n=$1\n  if [ $n -le 1 ]; then\n    echo 1\n  else\n    local result=$(factorial $((n-1)))\n    echo $((n * result))\n  fi\n}\n\nfactorial $1"
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns the longest word in the string. If there are multiple longest words, return the first one encountered.",
        "input": "Text: The quick brown fox jumped effortlessly over the lazy dogs.",
        "response": "def longest_word(text):\n    words = text.split()\n    max_len = max(len(word) for word in words)\n    for word in words:\n        if len(word) == max_len:\n            return word\n\ninput_text = 'The quick brown fox jumped effortlessly over the lazy dogs.'\nprint(longest_word(input_text))",
        "output": "def longest_word(text):\n    words = text.split()\n    max_len = max(len(word) for word in words)\n    for word in words:\n        if len(word) == max_len:\n            return word\n\ninput_text = 'The quick brown fox jumped effortlessly over the lazy dogs.'\nprint(longest_word(input_text))"
    },
    {
        "instruction": "Given a piece of JavaScript code, identify any variables that are declared but not used.",
        "input": "let arr = [1, 2, 3];\nlet sum = 0;\nlet average = 0;\n\nfor (let i = 0; i < arr.length; i++) {\n sum += arr[i];\n}\nconsole.log('Sum:', sum);",
        "response": "average",
        "output": "average"
    },
    {
        "instruction": "Implement an API call to https://api.comments.com/ to fetch the comments array for a postId using JavaScript fetch API.",
        "input": "postId: 1",
        "response": "const fetchComments = async (postId) => {\n    try {\n        const response = await fetch(`https://api.comments.com/posts/${postId}/comments`);\n        const comments = await response.json();\n        console.log(comments);\n    } catch (error) {\n        console.error('Error fetching comments:', error);\n    }\n}\n\nfetchComments(1);",
        "output": "const fetchComments = async (postId) => {\n    try {\n        const response = await fetch(`https://api.comments.com/posts/${postId}/comments`);\n        const comments = await response.json();\n        console.log(comments);\n    } catch (error) {\n        console.error('Error fetching comments:', error);\n    }\n}\n\nfetchComments(1);"
    },
    {
        "instruction": "Write a shell script to list all directories and files in the current directory sorted by size in descending order.",
        "input": "",
        "response": "#!/bin/sh\n\ndu -a | sort -nr | awk '{print $2}'",
        "output": "#!/bin/sh\n\ndu -a | sort -nr | awk '{print $2}'"
    },
    {
        "instruction": "Create a Python function that calculates the average of a list of numbers.",
        "input": "[5, 10, 15, 20, 25]",
        "response": "def average(numbers):\n    sum_of_numbers = sum(numbers)\n    count_of_numbers = len(numbers)\n    return sum_of_numbers / count_of_numbers\n\nnumbers_list = [5, 10, 15, 20, 25]\navg = average(numbers_list)\nprint('Average of the numbers in the list:', avg)",
        "output": "def average(numbers):\n    sum_of_numbers = sum(numbers)\n    count_of_numbers = len(numbers)\n    return sum_of_numbers / count_of_numbers\n\nnumbers_list = [5, 10, 15, 20, 25]\navg = average(numbers_list)\nprint('Average of the numbers in the list:', avg)"
    },
    {
        "instruction": "Rewrite the following JavaScript code by turning it into an arrow function.",
        "input": "function multiply(x, y) {\n    return x * y;\n}",
        "response": "const multiply = (x, y) => x * y;",
        "output": "const multiply = (x, y) => x * y;"
    },
    {
        "instruction": "How would you find the length of the longest increasing subarray in a given integer array using C++?",
        "input": "Array: [5, 6, 3, 5, 7, 8, 1, 2, 3, 4]",
        "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint longest_increasing_subarray(vector<int>& arr) {\n    int n = arr.size();\n    int max_len = 1;\n    int len = 1;\n\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > arr[i - 1]) {\n            len++;\n        } else {\n            max_len = max(max_len, len);\n            len = 1;\n        }\n    }\n\n    return max(max_len, len);\n}\n\nint main() {\n    vector<int> arr = {5, 6, 3, 5, 7, 8, 1, 2, 3, 4};\n    cout << \"Length of longest increasing subarray: \" << longest_increasing_subarray(arr) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint longest_increasing_subarray(vector<int>& arr) {\n    int n = arr.size();\n    int max_len = 1;\n    int len = 1;\n\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > arr[i - 1]) {\n            len++;\n        } else {\n            max_len = max(max_len, len);\n            len = 1;\n        }\n    }\n\n    return max(max_len, len);\n}\n\nint main() {\n    vector<int> arr = {5, 6, 3, 5, 7, 8, 1, 2, 3, 4};\n    cout << \"Length of longest increasing subarray: \" << longest_increasing_subarray(arr) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Develop a Ruby method that can remove duplicate elements from an array while keeping the original order of elements.",
        "input": "[5, 6, 5, 3, 6, 1, 9, 3]",
        "response": "def remove_duplicates(array)\n    unique_elements = []\n    array.each do |element|\n        unique_elements << element unless unique_elements.include?(element)\n    end\n    unique_elements\nend\n\narray_with_duplicates = [5, 6, 5, 3, 6, 1, 9, 3]\nunique_array = remove_duplicates(array_with_duplicates)\nputs \"Unique elements: #{unique_array}\"\n",
        "output": "def remove_duplicates(array)\n    unique_elements = []\n    array.each do |element|\n        unique_elements << element unless unique_elements.include?(element)\n    end\n    unique_elements\nend\n\narray_with_duplicates = [5, 6, 5, 3, 6, 1, 9, 3]\nunique_array = remove_duplicates(array_with_duplicates)\nputs \"Unique elements: #{unique_array}\"\n"
    },
    {
        "instruction": "Create a JavaScript function that receives a string and returns its reversed version.",
        "input": "reverseString('Hello, world!')",
        "response": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Write a Python function to remove the first occurrence of a given element from a list.",
        "input": "remove_element([1, 2, 3, 1, 4, 5], 1)",
        "response": "def remove_element(lst, element):\n    if element in lst:\n        lst.remove(element)\n    return lst",
        "output": "def remove_element(lst, element):\n    if element in lst:\n        lst.remove(element)\n    return lst"
    },
    {
        "instruction": "How would you write a program in Java that checks whether a given word is a palindrome?",
        "input": "isPalindrome('racecar')",
        "response": "public class PalindromeCheck {\n    public static boolean isPalindrome(String word) {\n        int i = 0;\n        int j = word.length() - 1;\n        while (i < j) {\n            if (word.charAt(i) != word.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}",
        "output": "public class PalindromeCheck {\n    public static boolean isPalindrome(String word) {\n        int i = 0;\n        int j = word.length() - 1;\n        while (i < j) {\n            if (word.charAt(i) != word.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"
    },
    {
        "instruction": "Create a shell script that lists directory contents in descending order of file size while excluding hidden files.",
        "input": "",
        "response": "#!/bin/bash\n\ndu -ah . | grep -v '\\.*\\./\\.' | sort -rh",
        "output": "#!/bin/bash\n\ndu -ah . | grep -v '\\.*\\./\\.' | sort -rh"
    },
    {
        "instruction": "Create a Python function that finds the longest common prefix of an array of strings.",
        "input": "['flower', 'flow', 'flight']",
        "response": "def longest_common_prefix(strs):\n    # Edge case: empty input\n    if not strs:\n        return ''\n\n    # Find the minimum length among the input strings\n    min_length = min(len(s) for s in strs)\n\n    # Iterate through the characters of the strings\n    for i in range(min_length):\n        char = strs[0][i]\n\n        # Check if this character matches for all strings\n        if not all(s[i] == char for s in strs):\n            return strs[0][:i]\n\n    # Return the common prefix, if found\n    return strs[0][:min_length]",
        "output": "def longest_common_prefix(strs):\n    # Edge case: empty input\n    if not strs:\n        return ''\n\n    # Find the minimum length among the input strings\n    min_length = min(len(s) for s in strs)\n\n    # Iterate through the characters of the strings\n    for i in range(min_length):\n        char = strs[0][i]\n\n        # Check if this character matches for all strings\n        if not all(s[i] == char for s in strs):\n            return strs[0][:i]\n\n    # Return the common prefix, if found\n    return strs[0][:min_length]"
    },
    {
        "instruction": "How can I write a Java program that calculates the sum of even numbers in a given range, inclusive?",
        "input": "1, 10",
        "response": "public class SumEvenNumbers {\n    public static void main(String[] args) {\n        int lowerBound = 1;\n        int upperBound = 10;\n        int sum = 0;\n\n        // Adjust lowerBound if it's an odd number\n        if (lowerBound % 2 != 0) {\n            lowerBound++;\n        }\n\n        // Sum even numbers in range\n        for (int i = lowerBound; i <= upperBound; i += 2) {\n            sum += i;\n        }\n\n        System.out.println(\"Sum of even numbers: \" + sum);\n    }\n}",
        "output": "public class SumEvenNumbers {\n    public static void main(String[] args) {\n        int lowerBound = 1;\n        int upperBound = 10;\n        int sum = 0;\n\n        // Adjust lowerBound if it's an odd number\n        if (lowerBound % 2 != 0) {\n            lowerBound++;\n        }\n\n        // Sum even numbers in range\n        for (int i = lowerBound; i <= upperBound; i += 2) {\n            sum += i;\n        }\n\n        System.out.println(\"Sum of even numbers: \" + sum);\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function that checks if a given string is a palindrome.",
        "input": "\"level\"",
        "response": "function isPalindrome(str) {\n    // Convert input to lowercase and remove non-alphanumeric characters\n    const cleanedStr = str.replace(/\\W|_/g, '').toLowerCase();\n\n    // Reverse cleanedStr and compare it to the original\n    const reversedStr = cleanedStr.split('').reverse().join('');\n\n    return cleanedStr === reversedStr;\n}",
        "output": "function isPalindrome(str) {\n    // Convert input to lowercase and remove non-alphanumeric characters\n    const cleanedStr = str.replace(/\\W|_/g, '').toLowerCase();\n\n    // Reverse cleanedStr and compare it to the original\n    const reversedStr = cleanedStr.split('').reverse().join('');\n\n    return cleanedStr === reversedStr;\n}"
    },
    {
        "instruction": "Please provide a C# code snippet for a method that factors a given integer and returns a list of its factors.",
        "input": "12",
        "response": "public static List<int> GetFactors(int number) {\n    List<int> factors = new List<int>();\n\n    for (int i = 1; i <= Math.Sqrt(number); i++) {\n        if (number % i == 0) {\n            factors.Add(i);\n\n            // If the number is not a perfect square, add the other factor as well\n            if (i != number / i) {\n                factors.Add(number / i);\n            }\n        }\n    }\n\n    return factors;\n}",
        "output": "public static List<int> GetFactors(int number) {\n    List<int> factors = new List<int>();\n\n    for (int i = 1; i <= Math.Sqrt(number); i++) {\n        if (number % i == 0) {\n            factors.Add(i);\n\n            // If the number is not a perfect square, add the other factor as well\n            if (i != number / i) {\n                factors.Add(number / i);\n            }\n        }\n    }\n\n    return factors;\n}"
    },
    {
        "instruction": "Create a JavaScript function that returns the factorial of a given positive integer.",
        "input": "",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "What could be a possible fix for this Python script that should return the sum of all integers in the list?",
        "input": "def sum_of_integers(list):\n    total = 0\n    for number in list:\n        total += number\n    return total\n\nprint(sum_of_integers([1, 'a', 3, 5, 7]))",
        "response": "def sum_of_integers(lst):\n    total = 0\n    for number in lst:\n        if isinstance(number, int):\n            total += number\n    return total\n\nprint(sum_of_integers([1, 'a', 3, 5, 7]))",
        "output": "def sum_of_integers(lst):\n    total = 0\n    for number in lst:\n        if isinstance(number, int):\n            total += number\n    return total\n\nprint(sum_of_integers([1, 'a', 3, 5, 7]))"
    },
    {
        "instruction": "Translate this Python code that removes duplicate values from a list while preserving original order to equivalent Java code.",
        "input": "def remove_duplicates(values):\n    result = []\n    for value in values:\n        if value not in result:\n            result.append(value)\n    return result",
        "response": "import java.util.ArrayList;\n\npublic static ArrayList<Object> removeDuplicates(ArrayList<Object> values) {\n    ArrayList<Object> result = new ArrayList<Object>();\n    for (Object value : values) {\n        if (!result.contains(value)) {\n            result.add(value);\n        }\n    }\n    return result;\n}",
        "output": "import java.util.ArrayList;\n\npublic static ArrayList<Object> removeDuplicates(ArrayList<Object> values) {\n    ArrayList<Object> result = new ArrayList<Object>();\n    for (Object value : values) {\n        if (!result.contains(value)) {\n            result.add(value);\n        }\n    }\n    return result;\n}"
    },
    {
        "instruction": "Implement a C function to reverse a null-terminated string in place, without using strncpy or strtok.",
        "input": "",
        "response": "#include <stdio.h>\n\nvoid reverse_string(char *str) {\n    char *end = str;\n    char temp;\n\n    if (str) {\n        while (*end) {\n            ++end;\n        }\n        --end;\n\n        while (str < end) {\n            temp = *str;\n            *str = *end;\n            *end = temp;\n            ++str;\n            --end;\n        }\n    }\n}",
        "output": "#include <stdio.h>\n\nvoid reverse_string(char *str) {\n    char *end = str;\n    char temp;\n\n    if (str) {\n        while (*end) {\n            ++end;\n        }\n        --end;\n\n        while (str < end) {\n            temp = *str;\n            *str = *end;\n            *end = temp;\n            ++str;\n            --end;\n        }\n    }\n}"
    },
    {
        "instruction": "Develop a Python function that reverses a specified word or phrase by letter, while keeping its original capitalization.",
        "input": "Artificial Intelligence",
        "response": "def reverse_with_capitalization(text):\n    reversed_text = ''\n    for char in text[::-1]:\n        if char.isupper():\n            reversed_text += char.upper()\n        else:\n            reversed_text += char.lower()\n    return reversed_text\n\ninput_text = 'Artificial Intelligence'\nresult = reverse_with_capitalization(input_text)\nprint(result)",
        "output": "def reverse_with_capitalization(text):\n    reversed_text = ''\n    for char in text[::-1]:\n        if char.isupper():\n            reversed_text += char.upper()\n        else:\n            reversed_text += char.lower()\n    return reversed_text\n\ninput_text = 'Artificial Intelligence'\nresult = reverse_with_capitalization(input_text)\nprint(result)"
    },
    {
        "instruction": "How can I create a simple HTTP server using Node.js and display a 'Hello, World!' message at the root URL path?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    if (req.url === '/') {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('Hello, World!');\n    }\n});\n\nserver.listen(3000, () => {\n    console.log('Server running at http://localhost:3000/');\n});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    if (req.url === '/') {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('Hello, World!');\n    }\n});\n\nserver.listen(3000, () => {\n    console.log('Server running at http://localhost:3000/');\n});"
    },
    {
        "instruction": "Given the following C++ code, identify syntax errors and correct them to make the program functional.",
        "input": "#include <iostream>\n\nint main) {\n    std::cout << 'Hello, World!'\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\";\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\";\n    return 0;\n}"
    },
    {
        "instruction": "Write a Bash script that takes a list of file names as arguments and counts the number of lines in each file, printing the results.",
        "input": "file1.txt file2.txt file3.txt",
        "response": "#!/bin/bash\n\nfor file in \"$@\"; do\n    line_count=$(wc -l < \"${file}\")\n    echo \"${file}: ${line_count} lines\"\ndone\n\n# Usage: ./count_lines.sh file1.txt file2.txt file3.txt",
        "output": "#!/bin/bash\n\nfor file in \"$@\"; do\n    line_count=$(wc -l < \"${file}\")\n    echo \"${file}: ${line_count} lines\"\ndone\n\n# Usage: ./count_lines.sh file1.txt file2.txt file3.txt"
    },
    {
        "instruction": "Implement a JavaScript function that accepts an array of integers and returns a new array with the even numbers doubled.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "function doubleEvens(arr) {\n    return arr.map(num => (num % 2 === 0) ? num * 2 : num);\n}\n\nlet result = doubleEvens([1, 2, 3, 4, 5, 6]);\nconsole.log(result);",
        "output": "function doubleEvens(arr) {\n    return arr.map(num => (num % 2 === 0) ? num * 2 : num);\n}\n\nlet result = doubleEvens([1, 2, 3, 4, 5, 6]);\nconsole.log(result);"
    },
    {
        "instruction": "What changes are necessary in the given Java code to rectify the syntax errors?",
        "input": "public class HelloWorld {\n public static void main(String[] args {\n  System.out.println(\"Hello, world!\")\n }\n}",
        "response": "Corrected code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}\n\nChanges:\n1. Added parenthesis after args.\n2. Added semicolon after the println statement.",
        "output": "Corrected code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}\n\nChanges:\n1. Added parenthesis after args.\n2. Added semicolon after the println statement."
    },
    {
        "instruction": "Write a simple Bash script that reads a directory path from the user and prints the number of files within that directory.",
        "input": "/home/user/documents",
        "response": "#!/bin/bash\n\necho -n \"Enter the directory path: \"\nread dir_path\n\nfile_count=$(ls -l \"$dir_path\" | grep -v ^d | wc -l)\necho \"There are $file_count files in the directory $dir_path.\"",
        "output": "#!/bin/bash\n\necho -n \"Enter the directory path: \"\nread dir_path\n\nfile_count=$(ls -l \"$dir_path\" | grep -v ^d | wc -l)\necho \"There are $file_count files in the directory $dir_path.\""
    },
    {
        "instruction": "Create a Python function that takes a string as input and checks if it's a valid email address using regular expressions. It should return True if the email is valid, and False otherwise.",
        "input": "test@example.com",
        "response": "import re\n\ndef is_valid_email(email):\n    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(email_regex, email))\n\nemail = \"test@example.com\"\nresult = is_valid_email(email)\nprint(result)",
        "output": "import re\n\ndef is_valid_email(email):\n    email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(email_regex, email))\n\nemail = \"test@example.com\"\nresult = is_valid_email(email)\nprint(result)"
    },
    {
        "instruction": "Create a Java function that calculates the average of an array of floating-point numbers.",
        "input": "",
        "response": "public static double average(float[] numbers) {\n    float sum = 0;\n    for (float number : numbers) {\n        sum += number;\n    }\n    return sum / numbers.length;\n}",
        "output": "public static double average(float[] numbers) {\n    float sum = 0;\n    for (float number : numbers) {\n        sum += number;\n    }\n    return sum / numbers.length;\n}"
    },
    {
        "instruction": "What would be the expected output of this JavaScript code snippet: const myArray = ['a', 'b', 'c', 'd']; myArray.pop();",
        "input": "",
        "response": "'d'",
        "output": "'d'"
    },
    {
        "instruction": "Write a C++ function that takes a vector of strings as input and returns a new vector containing the unique elements of the input vector.",
        "input": "",
        "response": "#include <vector>\n#include <set>\n#include <string>\n\nstd::vector<std::string> unique_elements(const std::vector<std::string>& input) {\n    std::set<std::string> unique_set(input.begin(), input.end());\n    return std::vector<std::string>(unique_set.begin(), unique_set.end());\n}",
        "output": "#include <vector>\n#include <set>\n#include <string>\n\nstd::vector<std::string> unique_elements(const std::vector<std::string>& input) {\n    std::set<std::string> unique_set(input.begin(), input.end());\n    return std::vector<std::string>(unique_set.begin(), unique_set.end());\n}"
    },
    {
        "instruction": "I have a Python code that calculates Fibonacci series recursively. However, I want you to convert it to an iterative approach. Here's the current code:\ndef fibonacci_recursive(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)",
        "input": "",
        "response": "def fibonacci_iterative(n):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b",
        "output": "def fibonacci_iterative(n):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b"
    },
    {
        "instruction": "Design a Python function that reverses the order of words in a given sentence.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])\n\nreversed_sentence = reverse_words('The quick brown fox jumps over the lazy dog.')\nprint(reversed_sentence)",
        "output": "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])\n\nreversed_sentence = reverse_words('The quick brown fox jumps over the lazy dog.')\nprint(reversed_sentence)"
    },
    {
        "instruction": "Develop a Java program to calculate the factorial of a positive number using recursion.",
        "input": "5",
        "response": "public class Factorial {\n    public static int recursiveFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * recursiveFactorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int number = 5;\n        System.out.println(recursiveFactorial(number));\n    }\n}",
        "output": "public class Factorial {\n    public static int recursiveFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * recursiveFactorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int number = 5;\n        System.out.println(recursiveFactorial(number));\n    }\n}"
    },
    {
        "instruction": "In C++, implement a program that reads a text file and counts the occurrences of a given word.",
        "input": "Sample text file content: 'Testing the word count in the given text file with sample words'\nGiven word: 'word'",
        "response": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::string filename = 'sample.txt';\n    std::string search_word = 'word';\n    std::ifstream infile(filename);\n\n    int word_count = 0;\n    std::string line, word;\n    while (std::getline(infile, line)) {\n        std::istringstream iss(line);\n        while (iss >> word) {\n            if (word == search_word) {\n                word_count++;\n            }\n        }\n    }\n    std::cout << 'Occurrences of the word \"' << search_word << '\" are: ' << word_count << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::string filename = 'sample.txt';\n    std::string search_word = 'word';\n    std::ifstream infile(filename);\n\n    int word_count = 0;\n    std::string line, word;\n    while (std::getline(infile, line)) {\n        std::istringstream iss(line);\n        while (iss >> word) {\n            if (word == search_word) {\n                word_count++;\n            }\n        }\n    }\n    std::cout << 'Occurrences of the word \"' << search_word << '\" are: ' << word_count << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript function to extract unique email addresses from an array of emails and arrange them in alphabetical order.",
        "input": "['jon@example.com', 'jane@example.com', 'mary@email.com', 'jon@example.com', 'jane@sample.com']",
        "response": "function extractUniqueEmails(emails) {\n    return [...new Set(emails)].sort();\n}\n\nconst uniqueEmails = extractUniqueEmails(['jon@example.com', 'jane@example.com', 'mary@email.com', 'jon@example.com', 'jane@sample.com']);\nconsole.log(uniqueEmails);",
        "output": "function extractUniqueEmails(emails) {\n    return [...new Set(emails)].sort();\n}\n\nconst uniqueEmails = extractUniqueEmails(['jon@example.com', 'jane@example.com', 'mary@email.com', 'jon@example.com', 'jane@sample.com']);\nconsole.log(uniqueEmails);"
    },
    {
        "instruction": "Write a Python function that filters out even numbers from a list of integers and returns the list with only odd numbers.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "def filter_odd_numbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\nfiltered_list = filter_odd_numbers([1, 2, 3, 4, 5, 6])\nprint(filtered_list)",
        "output": "def filter_odd_numbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\nfiltered_list = filter_odd_numbers([1, 2, 3, 4, 5, 6])\nprint(filtered_list)"
    },
    {
        "instruction": "What is the expected output of the given Java code snippet?",
        "input": "class Test {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 5;\n        int result = a / b;\n        System.out.println(result);\n    }\n}",
        "response": "The expected output of the given Java code snippet is:\n2\n\nExplanation: The code declares two integer variables `a` and `b`, assigns them the values 10 and 5 respectively, and divides `a` by `b`. The result of the division (2) is then printed out.",
        "output": "The expected output of the given Java code snippet is:\n2\n\nExplanation: The code declares two integer variables `a` and `b`, assigns them the values 10 and 5 respectively, and divides `a` by `b`. The result of the division (2) is then printed out."
    },
    {
        "instruction": "In JavaScript, create a simple web page that displays an alert with a custom message when a button is clicked.",
        "input": "Custom message: 'Hello, GPT-3!'",
        "response": "<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction showAlert() {\n    alert('Hello, GPT-3!');\n}\n</script>\n</head>\n<body>\n\n<button onclick=\"showAlert()\">Click me</button>\n\n</body>\n</html>",
        "output": "<!DOCTYPE html>\n<html>\n<head>\n<script>\nfunction showAlert() {\n    alert('Hello, GPT-3!');\n}\n</script>\n</head>\n<body>\n\n<button onclick=\"showAlert()\">Click me</button>\n\n</body>\n</html>"
    },
    {
        "instruction": "Fix the given C++ code to reverse an integer without converting it to a string.",
        "input": "#include <iostream>\n\nint reverse_integer(int num) {\n    int reversed = 0;\n    while (num != 0) {\n        int last_digit = num % 10;\n        reversed *= 10 + last_digit;\n        num /= 10;\n    }\n    return reversed;\n}\n\nint main() {\n    std::cout << reverse_integer(1234) << std::endl;\n    return 0;\n}",
        "response": "#include <iostream>\n\nint reverse_integer(int num) {\n    int reversed = 0;\n    while (num != 0) {\n        int last_digit = num % 10;\n        reversed = reversed * 10 + last_digit;\n        num /= 10;\n    }\n    return reversed;\n}\n\nint main() {\n    std::cout << reverse_integer(1234) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint reverse_integer(int num) {\n    int reversed = 0;\n    while (num != 0) {\n        int last_digit = num % 10;\n        reversed = reversed * 10 + last_digit;\n        num /= 10;\n    }\n    return reversed;\n}\n\nint main() {\n    std::cout << reverse_integer(1234) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Correct the errors in the provided C++ code.",
        "input": "#include <iostream>\nusing namespac std;\n\nint main() {\n    int x, y;\n    cout << \"Enter two numbers: \";\n    cin >> x y;\n    int sum = x + y;\n\n    cou << \"Sum: \" << sum << end;\n    return 0;\n}",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x, y;\n    cout << \"Enter two numbers: \";\n    cin >> x >> y;\n    int sum = x + y;\n\n    cout << \"Sum: \" << sum << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x, y;\n    cout << \"Enter two numbers: \";\n    cin >> x >> y;\n    int sum = x + y;\n\n    cout << \"Sum: \" << sum << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function to compute the factorial of a number using recursion.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Create a Java method that calculates the average of an array of integers.",
        "input": "int[] numbers = {10, 20, 30, 40, 50};",
        "response": "public static double calculateAverage(int[] numbers) {\n    int total = 0;\n    for (int number : numbers) {\n        total += number;\n    }\n    return (double) total / numbers.length;\n}\n\nint[] numbers = {10, 20, 30, 40, 50};\ndouble average = calculateAverage(numbers);\nSystem.out.println(average);",
        "output": "public static double calculateAverage(int[] numbers) {\n    int total = 0;\n    for (int number : numbers) {\n        total += number;\n    }\n    return (double) total / numbers.length;\n}\n\nint[] numbers = {10, 20, 30, 40, 50};\ndouble average = calculateAverage(numbers);\nSystem.out.println(average);"
    },
    {
        "instruction": "How would you modify this JavaScript function to make it case-insensitive when comparing strings?",
        "input": "function compareStrings(string1, string2) {\n    return string1 === string2;\n}",
        "response": "function compareStrings(string1, string2) {\n    return string1.toLowerCase() === string2.toLowerCase();\n}",
        "output": "function compareStrings(string1, string2) {\n    return string1.toLowerCase() === string2.toLowerCase();\n}"
    },
    {
        "instruction": "Create a JavaScript function to calculate the factorial of a given positive integer.",
        "input": "",
        "response": "function factorial(n) {\n if (n === 0 || n === 1) {\n return 1;\n }\n return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n if (n === 0 || n === 1) {\n return 1;\n }\n return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "How would you implement a recursive binary search algorithm in Java for searching an element in a sorted array?",
        "input": "",
        "response": "public int binarySearch(int[] arr, int left, int right, int target) {\n if (right >= left) {\n int mid = left + (right - left) / 2;\n\n if (arr[mid] == target)\n return mid;\n\n if (arr[mid] > target)\n return binarySearch(arr, left, mid - 1, target);\n\n return binarySearch(arr, mid + 1, right, target);\n }\n return -1;\n}",
        "output": "public int binarySearch(int[] arr, int left, int right, int target) {\n if (right >= left) {\n int mid = left + (right - left) / 2;\n\n if (arr[mid] == target)\n return mid;\n\n if (arr[mid] > target)\n return binarySearch(arr, left, mid - 1, target);\n\n return binarySearch(arr, mid + 1, right, target);\n }\n return -1;\n}"
    },
    {
        "instruction": "Write a Python script to download an image file from an URL and save it locally with a given filename using 'requests' library.",
        "input": "url = 'https://www.example.com/image.jpg'\nfilename = 'local_image.jpg'",
        "response": "import requests\n\nurl = 'https://www.example.com/image.jpg'\nfilename = 'local_image.jpg'\n\nresponse = requests.get(url)\n\nwith open(filename, 'wb') as f:\n f.write(response.content)",
        "output": "import requests\n\nurl = 'https://www.example.com/image.jpg'\nfilename = 'local_image.jpg'\n\nresponse = requests.get(url)\n\nwith open(filename, 'wb') as f:\n f.write(response.content)"
    },
    {
        "instruction": "Construct a shell script that takes the names of two files as command-line arguments and checks if their sizes are equal, then outputs an appropriate message.",
        "input": "file1.txt file2.txt",
        "response": "#!/bin/bash\n\nfile1=$1\nfile2=$2\n\nsize1=$(stat -c %s $file1)\nsize2=$(stat -c %s $file2)\n\nif [ $size1 -eq $size2 ]; then\n echo 'Files are of equal size'\nelse\n echo 'Files have different sizes'\nfi",
        "output": "#!/bin/bash\n\nfile1=$1\nfile2=$2\n\nsize1=$(stat -c %s $file1)\nsize2=$(stat -c %s $file2)\n\nif [ $size1 -eq $size2 ]; then\n echo 'Files are of equal size'\nelse\n echo 'Files have different sizes'\nfi"
    },
    {
        "instruction": "Write a Python function that takes a string as an argument and returns the string in reverse order.",
        "input": "OpenAI",
        "response": "def reverse_string(s):\n    return s[::-1]\n\ninput_string = 'OpenAI'\nreversed_string = reverse_string(input_string)\nprint(reversed_string)",
        "output": "def reverse_string(s):\n    return s[::-1]\n\ninput_string = 'OpenAI'\nreversed_string = reverse_string(input_string)\nprint(reversed_string)"
    },
    {
        "instruction": "How can I make a POST request in JavaScript using the Fetch API?",
        "input": "URL: 'https://api.example.com/data', Request Body: { 'key': 'value' }",
        "response": "const url = 'https://api.example.com/data';\nconst data = { key: 'value' };\n\nfetch(url, {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify(data),\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error('Error:', error));",
        "output": "const url = 'https://api.example.com/data';\nconst data = { key: 'value' };\n\nfetch(url, {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify(data),\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error('Error:', error));"
    },
    {
        "instruction": "Generate a simple Shell script that reads a user's input and prints the sum of the entered numeric values.",
        "input": "Input values: 5, 10",
        "response": "#!/bin/sh\n\necho 'Enter two numbers separated by a space:'\nread first_number second_number\n\nsum=$((first_number + second_number))\necho 'The sum is:' $sum\n\n# To execute the script, save it as sum.sh and run 'sh sum.sh' in the terminal.",
        "output": "#!/bin/sh\n\necho 'Enter two numbers separated by a space:'\nread first_number second_number\n\nsum=$((first_number + second_number))\necho 'The sum is:' $sum\n\n# To execute the script, save it as sum.sh and run 'sh sum.sh' in the terminal."
    },
    {
        "instruction": "Please create a Java function that prints the Fibonacci sequence up to a specified number n.",
        "input": "8",
        "response": "public void printFibonacci(int n) {\n    int num1 = 0, num2 = 1;\n    System.out.print(\"Fibonacci numbers up to \" + n + \": \");\n    while(num1 <= n) {\n        System.out.print(num1 + \" \");\n        int sum = num1 + num2;\n        num1 = num2;\n        num2 = sum;\n    }\n}",
        "output": "public void printFibonacci(int n) {\n    int num1 = 0, num2 = 1;\n    System.out.print(\"Fibonacci numbers up to \" + n + \": \");\n    while(num1 <= n) {\n        System.out.print(num1 + \" \");\n        int sum = num1 + num2;\n        num1 = num2;\n        num2 = sum;\n    }\n}"
    },
    {
        "instruction": "A function in JavaScript takes an array of numbers as input, sums the squares of the numbers, and returns the result. Complete the function.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function sumOfSquares(numbers) {\n    return numbers.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}",
        "output": "function sumOfSquares(numbers) {\n    return numbers.reduce((acc, num) => acc + Math.pow(num, 2), 0);\n}"
    },
    {
        "instruction": "Can you write a C++ program that reads data from a file named 'input.txt', removes all vowels from the text, and writes the result to a new file named 'output.txt'?",
        "input": "",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nbool isVowel(char c) {\n    c = tolower(c);\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n\nint main() {\n    std::ifstream input(\"input.txt\");\n    std::ofstream output(\"output.txt\");\n    std::string line;\n\n    while (std::getline(input, line)) {\n        for (char c : line) {\n            if (!isVowel(c)) {\n                output << c;\n            }\n        }\n        output << '\\n';\n    }\n\n    input.close();\n    output.close();\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nbool isVowel(char c) {\n    c = tolower(c);\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n\nint main() {\n    std::ifstream input(\"input.txt\");\n    std::ofstream output(\"output.txt\");\n    std::string line;\n\n    while (std::getline(input, line)) {\n        for (char c : line) {\n            if (!isVowel(c)) {\n                output << c;\n            }\n        }\n        output << '\\n';\n    }\n\n    input.close();\n    output.close();\n    return 0;\n}"
    },
    {
        "instruction": "Design a Python function that takes a list of strings and returns a dictionary where each distinct string is a key and its frequency in the list is the value.",
        "input": "['apple', 'banana', 'apple', 'orange', 'banana']",
        "response": "def count_frequencies(strings):\n    result = {}\n    for string in strings:\n        if string in result:\n            result[string] += 1\n        else:\n            result[string] = 1\n    return result",
        "output": "def count_frequencies(strings):\n    result = {}\n    for string in strings:\n        if string in result:\n            result[string] += 1\n        else:\n            result[string] = 1\n    return result"
    },
    {
        "instruction": "Create a Python function that accepts a string as input and prints its reverse.",
        "input": "OpenAI",
        "response": "def reverse_string(text):\n    reversed_text = text[::-1]\n    return reversed_text\n\ninput_string = 'OpenAI'\nprint(reverse_string(input_string))",
        "output": "def reverse_string(text):\n    reversed_text = text[::-1]\n    return reversed_text\n\ninput_string = 'OpenAI'\nprint(reverse_string(input_string))"
    },
    {
        "instruction": "How would you implement a simple REST API using Flask in Python that returns a JSON object containing information about a user?",
        "input": "",
        "response": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/user')\ndef user_info():\n    user_data = {\n        'name': 'John Doe',\n        'age': 34,\n        'email': 'john@example.com'\n    }\n    return jsonify(user_data)\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/user')\ndef user_info():\n    user_data = {\n        'name': 'John Doe',\n        'age': 34,\n        'email': 'john@example.com'\n    }\n    return jsonify(user_data)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Write a Node.js script that reads a text file and prints its content to the console.",
        "input": "example.txt:\nHello, World!",
        "response": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});",
        "output": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});"
    },
    {
        "instruction": "Design a Java program that calculates the area of a circle given its radius as input.",
        "input": "5",
        "response": "public class CircleArea {\n\n    public static void main(String[] args) {\n        double radius = 5;\n        double area = Math.PI * Math.pow(radius, 2);\n        System.out.println(\"Area of the circle: \" + area);\n    }\n}",
        "output": "public class CircleArea {\n\n    public static void main(String[] args) {\n        double radius = 5;\n        double area = Math.PI * Math.pow(radius, 2);\n        System.out.println(\"Area of the circle: \" + area);\n    }\n}"
    },
    {
        "instruction": "Explain the given implementation of a Quick Sort algorithm in Python",
        "input": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)",
        "response": "The given Python code is implementing the Quick Sort algorithm, a comparison-based sorting method. The main steps of this implementation are:\n\n1. If the input array has length 1 or less, there is no need for sorting, so it's returned as is.\n2. The pivot is chosen as the middle element of the input array.\n3. All elements smaller than the pivot go in the 'left' array, elements equal to the pivot go in the 'middle' array, and elements greater than the pivot go in the 'right' array.\n4. Recursively call the quick_sort function on both 'left' and 'right' arrays, and combine the results with the 'middle' array to get the final sorted array.",
        "output": "The given Python code is implementing the Quick Sort algorithm, a comparison-based sorting method. The main steps of this implementation are:\n\n1. If the input array has length 1 or less, there is no need for sorting, so it's returned as is.\n2. The pivot is chosen as the middle element of the input array.\n3. All elements smaller than the pivot go in the 'left' array, elements equal to the pivot go in the 'middle' array, and elements greater than the pivot go in the 'right' array.\n4. Recursively call the quick_sort function on both 'left' and 'right' arrays, and combine the results with the 'middle' array to get the final sorted array."
    },
    {
        "instruction": "Write a Java method that checks if a given string is a palindrome.",
        "input": "",
        "response": "public boolean isPalindrome(String str) {\n    int left = 0;\n    int right = str.length() - 1;\n    while (left < right) {\n        if (str.charAt(left) != str.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}",
        "output": "public boolean isPalindrome(String str) {\n    int left = 0;\n    int right = str.length() - 1;\n    while (left < right) {\n        if (str.charAt(left) != str.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}"
    },
    {
        "instruction": "In C++, create a Car class with 'make', 'model', and 'year' attributes and constructors.",
        "input": "",
        "response": "#include <string>\n\nclass Car {\npublic:\n    std::string make;\n    std::string model;\n    int year;\n\n    Car() {}\n\n    Car(std::string make, std::string model, int year) {\n        this->make = make;\n        this->model = model;\n        this->year = year;\n    }\n};",
        "output": "#include <string>\n\nclass Car {\npublic:\n    std::string make;\n    std::string model;\n    int year;\n\n    Car() {}\n\n    Car(std::string make, std::string model, int year) {\n        this->make = make;\n        this->model = model;\n        this->year = year;\n    }\n};"
    },
    {
        "instruction": "How would you implement a function to calculate the factorial of a non-negative integer in JavaScript?",
        "input": "",
        "response": "function factorial(n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Create a Python function that takes a list of numbers as input and returns the average of the numbers.",
        "input": "[1, 5, 7, 99, 18]",
        "response": "def average(numbers):\n    if len(numbers) == 0:\n        raise ValueError(\"List cannot be empty\")\n    return sum(numbers) / len(numbers)\n\ninput_list = [1, 5, 7, 99, 18]\navg = average(input_list)\nprint(f'The average is {avg}')",
        "output": "def average(numbers):\n    if len(numbers) == 0:\n        raise ValueError(\"List cannot be empty\")\n    return sum(numbers) / len(numbers)\n\ninput_list = [1, 5, 7, 99, 18]\navg = average(input_list)\nprint(f'The average is {avg}')"
    },
    {
        "instruction": "Implement a Java method that reverses the words in a given sentence without using any libraries or built-in classes (other than String).",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "public class WordReverser {\n\n    public static String reverseWords(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = words.length - 1; i >= 0; i--) {\n            sb.append(words[i]);\n\n            if (i != 0) {\n                sb.append(\" \");\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"The quick brown fox jumps over the lazy dog\";\n        String reversed = reverseWords(input);\n        System.out.println(reversed);\n    }\n}",
        "output": "public class WordReverser {\n\n    public static String reverseWords(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = words.length - 1; i >= 0; i--) {\n            sb.append(words[i]);\n\n            if (i != 0) {\n                sb.append(\" \");\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"The quick brown fox jumps over the lazy dog\";\n        String reversed = reverseWords(input);\n        System.out.println(reversed);\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function that checks if a given string is a palindrome or not, ignoring whitespace and punctuation.",
        "input": "A man, a plan, a canal: Panama",
        "response": "function isPalindrome(str) {\n    const cleanedStr = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    const reversedStr = cleanedStr.split('').reverse().join('');\n    return cleanedStr === reversedStr;\n}\n\nconst input = 'A man, a plan, a canal: Panama';\nconst result = isPalindrome(input);\nconsole.log(`Is \"${input}\" a palindrome? Answer: ${result}`);",
        "output": "function isPalindrome(str) {\n    const cleanedStr = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    const reversedStr = cleanedStr.split('').reverse().join('');\n    return cleanedStr === reversedStr;\n}\n\nconst input = 'A man, a plan, a canal: Panama';\nconst result = isPalindrome(input);\nconsole.log(`Is \"${input}\" a palindrome? Answer: ${result}`);"
    },
    {
        "instruction": "Translate the following Python code to C++: 'def squared(x): return x * x'",
        "input": "def squared(x):\n    return x * x",
        "response": "#include <iostream>\n\nint squared(int x) {\n    return x * x;\n}\n\nint main() {\n    int number = 5;\n    int result = squared(number);\n    std::cout << \"The square of \" << number << \" is \" << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint squared(int x) {\n    return x * x;\n}\n\nint main() {\n    int number = 5;\n    int result = squared(number);\n    std::cout << \"The square of \" << number << \" is \" << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes a list of numbers as input and returns the arithmetic mean of the numbers.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function arithmeticMean(numbers) {\n    const sum = numbers.reduce((a, b) => a + b, 0);\n    const mean = sum / numbers.length;\n    return mean;\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconsole.log(arithmeticMean(numbers));",
        "output": "function arithmeticMean(numbers) {\n    const sum = numbers.reduce((a, b) => a + b, 0);\n    const mean = sum / numbers.length;\n    return mean;\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconsole.log(arithmeticMean(numbers));"
    },
    {
        "instruction": "In C++, implement a function that checks if a given string is a valid IPv4 address.",
        "input": "\"123.45.67.89\"",
        "response": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n\nbool is_valid_ipv4(const std::string &ip) {\n    std::istringstream iss(ip);\n    std::string part;\n    int count = 0;\n\n    while (std::getline(iss, part, '.')) {\n        count++;\n        int num = std::stoi(part);\n\n        if (part.size() > 3 || num < 0 || num > 255) {\n            return false;\n        }\n    }\n\n    return count == 4;\n}\n\nint main() {\n    std::string ip = \"123.45.67.89\";\n    std::cout << (is_valid_ipv4(ip) ? \"Valid\" : \"Invalid\") << \" IPv4 address\\n\";\n    return 0;\n}",
        "output": "#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n\nbool is_valid_ipv4(const std::string &ip) {\n    std::istringstream iss(ip);\n    std::string part;\n    int count = 0;\n\n    while (std::getline(iss, part, '.')) {\n        count++;\n        int num = std::stoi(part);\n\n        if (part.size() > 3 || num < 0 || num > 255) {\n            return false;\n        }\n    }\n\n    return count == 4;\n}\n\nint main() {\n    std::string ip = \"123.45.67.89\";\n    std::cout << (is_valid_ipv4(ip) ? \"Valid\" : \"Invalid\") << \" IPv4 address\\n\";\n    return 0;\n}"
    },
    {
        "instruction": "How would you modify the following C# code to prevent duplicate orders from being added to the List<Order> called orders?",
        "input": "public class Order {\n    public int OrderId { get; set; }\n}\n\nList<Order> orders = new List<Order>();\n\nvoid AddOrder(Order newOrder) {\n    orders.Add(newOrder);\n}",
        "response": "public class Order {\n    public int OrderId { get; set; }\n}\n\nList<Order> orders = new List<Order>();\n\nvoid AddOrder(Order newOrder) {\n    if (!orders.Exists(order => order.OrderId == newOrder.OrderId)) {\n        orders.Add(newOrder);\n    }\n}",
        "output": "public class Order {\n    public int OrderId { get; set; }\n}\n\nList<Order> orders = new List<Order>();\n\nvoid AddOrder(Order newOrder) {\n    if (!orders.Exists(order => order.OrderId == newOrder.OrderId)) {\n        orders.Add(newOrder);\n    }\n}"
    },
    {
        "instruction": "Write a Shell Script to find and print the common lines between two given files.",
        "input": "file1.txt:\napple\nbanana\norange\n\nfile2.txt:\nbanana\ngrape\npear",
        "response": "#!/bin/bash\n\nfile1=\"file1.txt\"\nfile2=\"file2.txt\"\n\ncomm -12 <(sort \"$file1\") <(sort \"$file2\")",
        "output": "#!/bin/bash\n\nfile1=\"file1.txt\"\nfile2=\"file2.txt\"\n\ncomm -12 <(sort \"$file1\") <(sort \"$file2\")"
    },
    {
        "instruction": "Create a function in Java that takes a string input and returns the reverse of the given string.",
        "input": "",
        "response": "public String reverseString(String input) {\n  StringBuilder sb = new StringBuilder(input);\n  return sb.reverse().toString();\n}",
        "output": "public String reverseString(String input) {\n  StringBuilder sb = new StringBuilder(input);\n  return sb.reverse().toString();\n}"
    },
    {
        "instruction": "Explain the purpose of the following Python code and predict its output.",
        "input": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "response": "This is a Python implementation of the binary search algorithm. The function takes a sorted list (arr) and a target value. It searches for the target value in the list and returns the index if it's found. If the target value is not found, it returns -1. The output depends on the input list and target value provided.",
        "output": "This is a Python implementation of the binary search algorithm. The function takes a sorted list (arr) and a target value. It searches for the target value in the list and returns the index if it's found. If the target value is not found, it returns -1. The output depends on the input list and target value provided."
    },
    {
        "instruction": "Modify the given Python code below to handle the KeyError exception and return the default value 0 when the requested key is not found in the dictionary.",
        "input": "def get_value(dictionary, key):\n    return dictionary[key]",
        "response": "def get_value(dictionary, key):\n    try:\n        return dictionary[key]\n    except KeyError:\n        return 0",
        "output": "def get_value(dictionary, key):\n    try:\n        return dictionary[key]\n    except KeyError:\n        return 0"
    },
    {
        "instruction": "Write a C program that calculates the sum of all integers from 1 to the given number (n).",
        "input": "",
        "response": "#include <stdio.h>\n\nint main() {\n    int n, i, sum = 0;\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &n);\n\n    for (i = 1; i <= n; ++i) {\n        sum += i;\n    }\n\n    printf(\"Sum = %d\", sum);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    int n, i, sum = 0;\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &n);\n\n    for (i = 1; i <= n; ++i) {\n        sum += i;\n    }\n\n    printf(\"Sum = %d\", sum);\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java program to compute the area of a circle, given its radius.",
        "input": "",
        "response": "public class CircleArea {\n\n  public static void main(String[] args) {\n    double radius = 5.0;\n    double area = Math.PI * Math.pow(radius, 2);\n    System.out.println(\"The area of the circle is: \" + area);\n  }\n\n}",
        "output": "public class CircleArea {\n\n  public static void main(String[] args) {\n    double radius = 5.0;\n    double area = Math.PI * Math.pow(radius, 2);\n    System.out.println(\"The area of the circle is: \" + area);\n  }\n\n}"
    },
    {
        "instruction": "What would be the output of the following C++ code snippet?",
        "input": "#include <iostream>\n\nint main() {\n  int x = 7;\n  int y = 3;\n  std::cout << x / y << std::endl;\n  return 0;\n}\n",
        "response": "2",
        "output": "2"
    },
    {
        "instruction": "Design a Python class representing a bank account, including methods for depositing, withdrawing, and checking the current balance.",
        "input": "",
        "response": "class BankAccount:\n\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise ValueError(\"Insufficient funds\")\n        self.balance -= amount\n        return self.balance\n\n    def check_balance(self):\n        return self.balance",
        "output": "class BankAccount:\n\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise ValueError(\"Insufficient funds\")\n        self.balance -= amount\n        return self.balance\n\n    def check_balance(self):\n        return self.balance"
    },
    {
        "instruction": "Write a bash shell script to create a directory named 'project' and navigate into it.",
        "input": "",
        "response": "#!/bin/bash\n\nmkdir project\ncd project",
        "output": "#!/bin/bash\n\nmkdir project\ncd project"
    },
    {
        "instruction": "Create a Java method that validates if a provided email address is in the correct format.",
        "input": "",
        "response": "public boolean isValidEmail(String email) {\n    String regex = \"^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$\";\n    return email.matches(regex);\n}",
        "output": "public boolean isValidEmail(String email) {\n    String regex = \"^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$\";\n    return email.matches(regex);\n}"
    },
    {
        "instruction": "How would you implement a function in JavaScript to count the occurrences of a specific character in a given string?",
        "input": "",
        "response": "function countOccurrences(str, char) {\n    return str.split(char).length - 1;\n}",
        "output": "function countOccurrences(str, char) {\n    return str.split(char).length - 1;\n}"
    },
    {
        "instruction": "Given a C++ code snippet, identify any syntax errors and provide corrected code.",
        "input": "#include <iostream>\n\nint main() {\nstd::cout << \"Hello World!\" << std::endl;\nreturn 0\n}",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello World!\" << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello World!\" << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function that takes in a list of strings and returns a list of the lengths of those strings.",
        "input": "",
        "response": "def string_lengths(strings):\n    return [len(s) for s in strings]",
        "output": "def string_lengths(strings):\n    return [len(s) for s in strings]"
    },
    {
        "instruction": "Create a Java function that recursively calculates the Fibonacci sequence of a given integer.",
        "input": "10",
        "response": "public int fibonacciRecursion(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacciRecursion(n - 1) + fibonacciRecursion(n - 2);\n    }\n}\n\nint result = fibonacciRecursion(10);\nSystem.out.println(result);",
        "output": "public int fibonacciRecursion(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacciRecursion(n - 1) + fibonacciRecursion(n - 2);\n    }\n}\n\nint result = fibonacciRecursion(10);\nSystem.out.println(result);"
    },
    {
        "instruction": "Construct a Python function to compute the factorial of a non-negative integer using the iterative approach.",
        "input": "",
        "response": "def factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
        "output": "def factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"
    },
    {
        "instruction": "What would be the expected output of the following JavaScript code snippet, and describe the reason behind it?",
        "input": "const arr = [1, 2, 3, 4, 5];\nconst filteredArr = arr.filter(num => num % 2 === 0);\nconsole.log(filteredArr);",
        "response": "The expected output of the code is [2, 4]. The program creates an array 'arr' containing the numbers 1 to 5. It then uses the filter method to create a new array 'filteredArr' containing only the even numbers from the original array, i.e., numbers divisible by 2 (num % 2 === 0). Finally, it logs the 'filteredArr' to the console, which would display [2, 4].",
        "output": "The expected output of the code is [2, 4]. The program creates an array 'arr' containing the numbers 1 to 5. It then uses the filter method to create a new array 'filteredArr' containing only the even numbers from the original array, i.e., numbers divisible by 2 (num % 2 === 0). Finally, it logs the 'filteredArr' to the console, which would display [2, 4]."
    },
    {
        "instruction": "Write a C# method that accepts a string input and returns the count of uppercase and lowercase characters in the string as a tuple.",
        "input": "\"Hello World\"",
        "response": "public (int upperCount, int lowerCount) CountUpperAndLower(string input) {\n    int upperCount = 0, lowerCount = 0;\n    foreach (char c in input) {\n        if (char.IsUpper(c)) {\n            upperCount++;\n        } else if (char.IsLower(c)) {\n            lowerCount++;\n        }\n    }\n    return (upperCount, lowerCount);\n}\n\nvar result = CountUpperAndLower(\"Hello World\");\nConsole.WriteLine($\"Uppercase: {result.upperCount}, Lowercase: {result.lowerCount}\");",
        "output": "public (int upperCount, int lowerCount) CountUpperAndLower(string input) {\n    int upperCount = 0, lowerCount = 0;\n    foreach (char c in input) {\n        if (char.IsUpper(c)) {\n            upperCount++;\n        } else if (char.IsLower(c)) {\n            lowerCount++;\n        }\n    }\n    return (upperCount, lowerCount);\n}\n\nvar result = CountUpperAndLower(\"Hello World\");\nConsole.WriteLine($\"Uppercase: {result.upperCount}, Lowercase: {result.lowerCount}\");"
    },
    {
        "instruction": "Create a Python function that accepts a list of integers and returns the sum of all even numbers in the list.",
        "input": "",
        "response": "def sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)",
        "output": "def sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)"
    },
    {
        "instruction": "What would be the output of the following Java code snippet? Explain your reasoning.",
        "input": "public static void main(String[] args) {\n    int a = 5;\n    int b = 10;\n    System.out.println((a++ * b) / 2);\n}",
        "response": "The output would be 25. In the code snippet, the post-increment operator is used. Initially, 'a' has the value 5; hence, the expression becomes (5 * 10) / 2. Then, the value of 'a' is incremented, but this doesn't affect the expression result. The calculation is 50 / 2, which equals 25.",
        "output": "The output would be 25. In the code snippet, the post-increment operator is used. Initially, 'a' has the value 5; hence, the expression becomes (5 * 10) / 2. Then, the value of 'a' is incremented, but this doesn't affect the expression result. The calculation is 50 / 2, which equals 25."
    },
    {
        "instruction": "Provide a JavaScript function that takes a string and returns the count of vowels in the string.",
        "input": "",
        "response": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;\n}",
        "output": "function countVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let count = 0;\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "Fix the given C++ code segment to calculate the factorial of a given positive integer.",
        "input": "int factorial(int n) {\n    int fact = 1;\n    for (int i = 1; i <= n; ++i) {\n        fact = fact * i;\n    }\n    return fact;\n}\n\nint main() {\n    std::cout << \"Enter a positive integer: \";\n    int n;\n    std::cin >> n;\n    std::cout << \"Factorial of \" << n << \" = \" << factorial(n) << std::endl;\n}",
        "response": "The provided code segment is already correct for calculating the factorial of a given positive integer.",
        "output": "The provided code segment is already correct for calculating the factorial of a given positive integer."
    },
    {
        "instruction": "Write a Java program to calculate the Fibonacci sequence up to a given term n.",
        "input": "",
        "response": "public class Fibonacci {\n    public static void main(String[] args) {\n        int n = 10;\n        for (int i = 1; i <= n; i++) {\n            System.out.print(fibonacci(i) + \" \");\n        }\n    }\n\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}",
        "output": "public class Fibonacci {\n    public static void main(String[] args) {\n        int n = 10;\n        for (int i = 1; i <= n; i++) {\n            System.out.print(fibonacci(i) + \" \");\n        }\n    }\n\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}"
    },
    {
        "instruction": "How can I accurately find the length of a string in bytes in C?",
        "input": "\"Hello, World!\"",
        "response": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[] = \"Hello, World!\";\n    size_t length = strlen(str);\n    printf(\"Length of the string in bytes: %zu\\n\", length);\n    return 0;\n}",
        "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[] = \"Hello, World!\";\n    size_t length = strlen(str);\n    printf(\"Length of the string in bytes: %zu\\n\", length);\n    return 0;\n}"
    },
    {
        "instruction": "Translate the following Python code snippet to C++ code: \ndef square(num):\n    return num**2\n\nsquared_value = square(6)\nprint(squared_value)\n",
        "input": "",
        "response": "#include <iostream>\n\nint square(int num) {\n    return num * num;\n}\n\nint main() {\n    int squared_value = square(6);\n    std::cout << squared_value << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint square(int num) {\n    return num * num;\n}\n\nint main() {\n    int squared_value = square(6);\n    std::cout << squared_value << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Construct a shell script that creates a directory structure as defined by a string input formatted like 'dir1/subdir1/subsubdir1,dir2/subdir2'. The script should create directories only if they don't exist already.",
        "input": "dir1/subdir1/subsubdir1,dir2/subdir2",
        "response": "#!/bin/bash\n\ndirectories=\"dir1/subdir1/subsubdir1,dir2/subdir2\"\n\nIFS=\",\"\nfor directory in $directories; do\n    mkdir -p \"$directory\"\ndone\n",
        "output": "#!/bin/bash\n\ndirectories=\"dir1/subdir1/subsubdir1,dir2/subdir2\"\n\nIFS=\",\"\nfor directory in $directories; do\n    mkdir -p \"$directory\"\ndone\n"
    },
    {
        "instruction": "Create a Python function to generate a list of prime numbers in a given range.",
        "input": "start = 10\nend = 50\n",
        "response": "def generate_primes(start, end):\n    primes = []\n    for num in range(start, end + 1):\n        if num > 1:  # primes are greater than 1\n            for i in range(2, num):\n                if num % i == 0:  # checking whether num is divisible by i\n                    break\n            else:\n                primes.append(num)\n    return primes\n\nprime_numbers = generate_primes(10, 50)\nprint(prime_numbers)",
        "output": "def generate_primes(start, end):\n    primes = []\n    for num in range(start, end + 1):\n        if num > 1:  # primes are greater than 1\n            for i in range(2, num):\n                if num % i == 0:  # checking whether num is divisible by i\n                    break\n            else:\n                primes.append(num)\n    return primes\n\nprime_numbers = generate_primes(10, 50)\nprint(prime_numbers)"
    },
    {
        "instruction": "Explain the given Java code snippet that calculates the sum of two numbers: `int sum = num1 + num2;`",
        "input": "num1 = 5\nnum2 = 7\n",
        "response": "In this Java code snippet, `int sum = num1 + num2;`, the statement declares an integer variable `sum` and initializes it with the sum of two other integer variables, `num1` and `num2`. In this specific case, the value of `num1` is 5 and that of `num2` is 7. The snippet calculates the sum of `num1` and `num2`, resulting in 12, and that value is then assigned to the `sum` variable. Hence, `sum` will store the value 12.",
        "output": "In this Java code snippet, `int sum = num1 + num2;`, the statement declares an integer variable `sum` and initializes it with the sum of two other integer variables, `num1` and `num2`. In this specific case, the value of `num1` is 5 and that of `num2` is 7. The snippet calculates the sum of `num1` and `num2`, resulting in 12, and that value is then assigned to the `sum` variable. Hence, `sum` will store the value 12."
    },
    {
        "instruction": "How can I fix the provided JavaScript code that throws an error? `const numbers = [1, 2, 3].push(4) ;`",
        "input": "",
        "response": "const numbersArray = [1, 2, 3];\nconst numbers = numbersArray.push(4);",
        "output": "const numbersArray = [1, 2, 3];\nconst numbers = numbersArray.push(4);"
    },
    {
        "instruction": "Implement a C++ class named Box, where it contains three private member variables: length, width, and height. Add public getter and setter methods for each of the variables.",
        "input": "",
        "response": "#include <iostream>\n\nclass Box {\n private:\n  double length;\n  double width;\n  double height;\n\n public:\n  void set_length(double new_length) { length = new_length; }\n  void set_width(double new_width) { width = new_width; }\n  void set_height(double new_height) { height = new_height; }\n\n  double get_length() { return length; }\n  double get_width() { return width; }\n  double get_height() { return height; }\n};",
        "output": "#include <iostream>\n\nclass Box {\n private:\n  double length;\n  double width;\n  double height;\n\n public:\n  void set_length(double new_length) { length = new_length; }\n  void set_width(double new_width) { width = new_width; }\n  void set_height(double new_height) { height = new_height; }\n\n  double get_length() { return length; }\n  double get_width() { return width; }\n  double get_height() { return height; }\n};"
    },
    {
        "instruction": "Create a Java function to check if a given string is a palindrome. A palindrome is a word that reads the same backward as forwards.",
        "input": "Example string: \"madam\"",
        "response": "public boolean isPalindrome(String inputStr) {\n    int start = 0;\n    int end = inputStr.length() - 1;\n    while (start < end) {\n        if (inputStr.charAt(start) != inputStr.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}",
        "output": "public boolean isPalindrome(String inputStr) {\n    int start = 0;\n    int end = inputStr.length() - 1;\n    while (start < end) {\n        if (inputStr.charAt(start) != inputStr.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}"
    },
    {
        "instruction": "In JavaScript, write a function that takes an array of integers and returns the highest product of three distinct integers.",
        "input": "Example array: [1, 10, 2, 6, 5, 3]",
        "response": "function highestProductOfThree(arr) {\n    arr.sort((a, b) => b - a);\n    const product1 = arr[0] * arr[1] * arr[2];\n    const product2 = arr[0] * arr[arr.length - 1] * arr[arr.length - 2];\n    return Math.max(product1, product2);\n}",
        "output": "function highestProductOfThree(arr) {\n    arr.sort((a, b) => b - a);\n    const product1 = arr[0] * arr[1] * arr[2];\n    const product2 = arr[0] * arr[arr.length - 1] * arr[arr.length - 2];\n    return Math.max(product1, product2);\n}"
    },
    {
        "instruction": "Explain step-by-step how a C++ code snippet would be able to reorder an array of integers in ascending order.",
        "input": "Example array: 5, 2, 9, 1, 5, 6",
        "response": "1. Use a sorting algorithm like bubble sort, insertion sort, or the standard library's sort function.\n2. For bubble sort, start by iterating through the array, comparing adjacent elements and swapping them if the first element is greater than the second element.\n3. Continue the loop until the entire array is sorted in ascending order.\n4. For insertion sort, loop through the entire array, and for each element, compare it with the previous elements and insert it in the correct position in the sorted section of the array.\n5. For the standard sort function, simply use `std::sort(arr.begin(), arr.end());` to sort the array in ascending order.",
        "output": "1. Use a sorting algorithm like bubble sort, insertion sort, or the standard library's sort function.\n2. For bubble sort, start by iterating through the array, comparing adjacent elements and swapping them if the first element is greater than the second element.\n3. Continue the loop until the entire array is sorted in ascending order.\n4. For insertion sort, loop through the entire array, and for each element, compare it with the previous elements and insert it in the correct position in the sorted section of the array.\n5. For the standard sort function, simply use `std::sort(arr.begin(), arr.end());` to sort the array in ascending order."
    },
    {
        "instruction": "Implement a function in Python that takes a list of strings and returns a dictionary containing the count of each unique string in the list.",
        "input": "Example list: ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']",
        "response": "def count_strings(lst):\n    string_count = {}\n    for item in lst:\n        if item in string_count:\n            string_count[item] += 1\n        else:\n            string_count[item] = 1\n    return string_count",
        "output": "def count_strings(lst):\n    string_count = {}\n    for item in lst:\n        if item in string_count:\n            string_count[item] += 1\n        else:\n            string_count[item] = 1\n    return string_count"
    },
    {
        "instruction": "Write a Java program that reads user input and reverses the given input string.",
        "input": "Hello, world!",
        "response": "import java.util.Scanner;\n\npublic class ReverseString {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n        String reversed = new StringBuilder(input).reverse().toString();\n        System.out.println(\"Reversed string: \" + reversed);\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class ReverseString {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n        String reversed = new StringBuilder(input).reverse().toString();\n        System.out.println(\"Reversed string: \" + reversed);\n    }\n}"
    },
    {
        "instruction": "Explain how to optimize the following Python code that calculates the factorial of a given number.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)",
        "response": "One way to optimize the given Python code is to use memoization, which caches previously computed results. This technique can be applied to avoid redundant function calls and save time when calculating the factorial of a given number. The updated code will look like:\n\ndef factorial(n, memo={}):\n    if n == 0:\n        return 1\n    if n not in memo:\n        memo[n] = n * factorial(n-1)\n    return memo[n]\n\nresult = factorial(5)\nprint(result)",
        "output": "One way to optimize the given Python code is to use memoization, which caches previously computed results. This technique can be applied to avoid redundant function calls and save time when calculating the factorial of a given number. The updated code will look like:\n\ndef factorial(n, memo={}):\n    if n == 0:\n        return 1\n    if n not in memo:\n        memo[n] = n * factorial(n-1)\n    return memo[n]\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Translate the following C++ code to equivalent Python code: int main() { int x; int y; x = 5; y = 7; int z; z = x + y; cout << x << '+' << y << '=' << z << endl; return 0; }",
        "input": "",
        "response": "def main():\n    x = 5\n    y = 7\n    z = x + y\n    print(x, '+', y, '=', z)\n\nmain()",
        "output": "def main():\n    x = 5\n    y = 7\n    z = x + y\n    print(x, '+', y, '=', z)\n\nmain()"
    },
    {
        "instruction": "Create an HTTP GET request in JavaScript using the Fetch API to retrieve data from the following URL: 'https://jsonplaceholder.typicode.com/todos/1'",
        "input": "",
        "response": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));",
        "output": "fetch('https://jsonplaceholder.typicode.com/todos/1')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));"
    },
    {
        "instruction": "Create a Python function that calculates the area of a circle, given the radius.",
        "input": "Radius: 5",
        "response": "def circle_area(radius):\n    import math\n    area = math.pi * (radius ** 2)\n    return area\n\nradius = 5\narea = circle_area(radius)\nprint(area)",
        "output": "def circle_area(radius):\n    import math\n    area = math.pi * (radius ** 2)\n    return area\n\nradius = 5\narea = circle_area(radius)\nprint(area)"
    },
    {
        "instruction": "What are the possible syntax errors found in this JavaScript code snippet, and how can they be fixed?",
        "input": "fuunction example() {\n   var a: 1\n   document.getElementById('demo').innerHTML = a;\n}",
        "response": "1. 'fuunction' should be 'function'\n2. 'a: 1' should be 'a = 1', using an assignment operator instead of a colon.\n\nFixed code snippet:\n\nfunction example() {\n   var a = 1;\n   document.getElementById('demo').innerHTML = a;\n}",
        "output": "1. 'fuunction' should be 'function'\n2. 'a: 1' should be 'a = 1', using an assignment operator instead of a colon.\n\nFixed code snippet:\n\nfunction example() {\n   var a = 1;\n   document.getElementById('demo').innerHTML = a;\n}"
    },
    {
        "instruction": "Implement a C++ program that asks the user for their name and age, and then prints out a message containing this information.",
        "input": "Name: John, Age: 25",
        "response": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    string name;\n    int age;\n    cout << \"Enter your name: \";\n    getline(cin, name);\n    cout << \"Enter your age: \";\n    cin >> age;\n    cout << \"Hello, \" << name << \". You are \" << age << \" years old.\" << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    string name;\n    int age;\n    cout << \"Enter your name: \";\n    getline(cin, name);\n    cout << \"Enter your age: \";\n    cin >> age;\n    cout << \"Hello, \" << name << \". You are \" << age << \" years old.\" << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script to find and display the total number of files and directories in the current directory.",
        "input": "",
        "response": "#!/bin/sh\n\nfile_count=0\nfolder_count=0\n\nfor entry in *;\ndo\n    if [ -f \"${entry}\" ]; then\n        file_count=$((file_count+1))\n    elif [ -d \"${entry}\" ]; then\n        folder_count=$((folder_count+1))\n    fi\ndone\n\necho \"Number of files: ${file_count}\"\necho \"Number of folders: ${folder_count}\"",
        "output": "#!/bin/sh\n\nfile_count=0\nfolder_count=0\n\nfor entry in *;\ndo\n    if [ -f \"${entry}\" ]; then\n        file_count=$((file_count+1))\n    elif [ -d \"${entry}\" ]; then\n        folder_count=$((folder_count+1))\n    fi\ndone\n\necho \"Number of files: ${file_count}\"\necho \"Number of folders: ${folder_count}\""
    },
    {
        "instruction": "Create a JavaScript function that takes a string and returns the number of vowels in that string.",
        "input": "",
        "response": "function countVowels(str) {\n const vowels = ['a', 'e', 'i', 'o', 'u'];\n let count = 0;\n for (let char of str.toLowerCase()) {\n if (vowels.includes(char)) {\n count++;\n }\n }\n return count;\n}",
        "output": "function countVowels(str) {\n const vowels = ['a', 'e', 'i', 'o', 'u'];\n let count = 0;\n for (let char of str.toLowerCase()) {\n if (vowels.includes(char)) {\n count++;\n }\n }\n return count;\n}"
    },
    {
        "instruction": "What is the expected output of the following Java code snippet?\n\nint x = 10;\nint y = ++x * 2 - x-- - --x + x++;\nSystem.out.println(y);",
        "input": "",
        "response": "19",
        "output": "19"
    },
    {
        "instruction": "Write a shell script to list all the files in the current directory that have a specific file extension, provided as an argument to the script.",
        "input": "",
        "response": "#!/bin/bash\n\nif [ $# -eq 1 ]; then\n ext=$1\n ls *.$ext\nelse\n echo \"Usage: $0 <extension>\"\nfi",
        "output": "#!/bin/bash\n\nif [ $# -eq 1 ]; then\n ext=$1\n ls *.$ext\nelse\n echo \"Usage: $0 <extension>\"\nfi"
    },
    {
        "instruction": "Modify the provided Python code to use a list comprehension to achieve the same result.\n\ninput_list = [2, 4, 6, 8, 10]\nsquared_list = []\n\nfor i in input_list:\n if i % 2 == 0:\n squared_list.append(i**2)\n\nprint(squared_list)",
        "input": "",
        "response": "input_list = [2, 4, 6, 8, 10]\n\nsquared_list = [i**2 for i in input_list if i % 2 == 0]\n\nprint(squared_list)",
        "output": "input_list = [2, 4, 6, 8, 10]\n\nsquared_list = [i**2 for i in input_list if i % 2 == 0]\n\nprint(squared_list)"
    },
    {
        "instruction": "Create a JavaScript function that takes a string input and reverses it.",
        "input": "Hello, World!",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconst reversed = reverseString('Hello, World!');\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconst reversed = reverseString('Hello, World!');\nconsole.log(reversed);"
    },
    {
        "instruction": "Implement a Java class that represents a person and overrides the toString method.",
        "input": "Name: John Doe, Age: 30",
        "response": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Name: \" + name + \", Age: \" + age;\n    }\n}\n\nPerson person = new Person(\"John Doe\", 30);\nSystem.out.println(person.toString());",
        "output": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Name: \" + name + \", Age: \" + age;\n    }\n}\n\nPerson person = new Person(\"John Doe\", 30);\nSystem.out.println(person.toString());"
    },
    {
        "instruction": "Write a C++ function that calculates the factorial of a given number.",
        "input": "6",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 6;\n    cout << \"Factorial of \" << number << \" is: \" << factorial(number) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Explain the purpose of each line of this Python code that calculates the greatest common divisor of two numbers.",
        "input": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "response": "1. The function 'gcd' takes two arguments, a and b.\n2. The base case of the recursion: if b equals 0, return a as the greatest common divisor.\n3. The recursive call: return the greatest common divisor of b and the remainder of a divided by b using the Euclidean algorithm.",
        "output": "1. The function 'gcd' takes two arguments, a and b.\n2. The base case of the recursion: if b equals 0, return a as the greatest common divisor.\n3. The recursive call: return the greatest common divisor of b and the remainder of a divided by b using the Euclidean algorithm."
    },
    {
        "instruction": "Implement a C++ function to calculate the Euclidean distance between two points in a 3D space represented as structs.",
        "input": "struct Point3D {\n    float x;\n    float y;\n    float z;\n};\n\nPoint3D p1 = {1.0, 2.0, 3.0};\nPoint3D p2 = {4.0, 5.0, 6.0};",
        "response": "#include <cmath>\n\nstruct Point3D {\n    float x;\n    float y;\n    float z;\n};\n\nfloat euclideanDistance(const Point3D &p1, const Point3D &p2) {\n    float deltaX = p1.x - p2.x;\n    float deltaY = p1.y - p2.y;\n    float deltaZ = p1.z - p2.z;\n\n    return std::sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n}\n\nint main() {\n    Point3D p1 = {1.0, 2.0, 3.0};\n    Point3D p2 = {4.0, 5.0, 6.0};\n\n    float distance = euclideanDistance(p1, p2);\n\n    std::cout << 'Distance between points: ' << distance << std::endl;\n\n    return 0;\n}",
        "output": "#include <cmath>\n\nstruct Point3D {\n    float x;\n    float y;\n    float z;\n};\n\nfloat euclideanDistance(const Point3D &p1, const Point3D &p2) {\n    float deltaX = p1.x - p2.x;\n    float deltaY = p1.y - p2.y;\n    float deltaZ = p1.z - p2.z;\n\n    return std::sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n}\n\nint main() {\n    Point3D p1 = {1.0, 2.0, 3.0};\n    Point3D p2 = {4.0, 5.0, 6.0};\n\n    float distance = euclideanDistance(p1, p2);\n\n    std::cout << 'Distance between points: ' << distance << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script that accepts a filename as a command-line argument, checks if the file exists, and counts the number of lines if it does.",
        "input": "sample.txt",
        "response": "#!/bin/bash\n\nfilename=$1\n\nif [ -e $filename ]; then\n  lines=$(wc -l < $filename)\n  echo 'The file '$filename' has '$lines' lines.'\nelse\n  echo 'File '$filename' does not exist.'\nfi\n\n# Usage: sh script.sh sample.txt",
        "output": "#!/bin/bash\n\nfilename=$1\n\nif [ -e $filename ]; then\n  lines=$(wc -l < $filename)\n  echo 'The file '$filename' has '$lines' lines.'\nelse\n  echo 'File '$filename' does not exist.'\nfi\n\n# Usage: sh script.sh sample.txt"
    },
    {
        "instruction": "How would you create a Java class containing a method that calculates the factorial of a given integer n using recursion?",
        "input": "n = 5",
        "response": "public class Factorial {\n\n    public static long factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        long result = factorial(n);\n        System.out.println('Factorial of ' + n + ' is ' + result);\n    }\n}",
        "output": "public class Factorial {\n\n    public static long factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        long result = factorial(n);\n        System.out.println('Factorial of ' + n + ' is ' + result);\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code to JavaScript using Node.js:\n \nimport requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos'\nresponse = requests.get(url)\njson_data = response.json()\n\nfor data in json_data:\n    print(data)\n    break",
        "input": "",
        "response": "const axios = require('axios');\n\nconst url = 'https://jsonplaceholder.typicode.com/todos';\n\naxios.get(url).then((response) => {\n    const json_data = response.data;\n\n    for (const data of json_data) {\n        console.log(data);\n        break;\n    }\n}).catch((error) => {\n    console.log('Error:', error);\n});",
        "output": "const axios = require('axios');\n\nconst url = 'https://jsonplaceholder.typicode.com/todos';\n\naxios.get(url).then((response) => {\n    const json_data = response.data;\n\n    for (const data of json_data) {\n        console.log(data);\n        break;\n    }\n}).catch((error) => {\n    console.log('Error:', error);\n});"
    },
    {
        "instruction": "Write a Python function named 'find_duplicates' that takes a list of integers and returns a list of duplicated elements.",
        "input": "[3, 8, 5, 6, 5, 3, 1, 8]",
        "response": "def find_duplicates(lst):\n    duplicates = []\n    seen = set()\n    for item in lst:\n        if item in seen:\n            duplicates.append(item)\n        else:\n            seen.add(item)\n    return duplicates",
        "output": "def find_duplicates(lst):\n    duplicates = []\n    seen = set()\n    for item in lst:\n        if item in seen:\n            duplicates.append(item)\n        else:\n            seen.add(item)\n    return duplicates"
    },
    {
        "instruction": "Create a simple graphical user interface (GUI) in Java using Swing that contains a JButton labeled \"Click me!\" and a JLabel that displays a counter, which updates each time the button is clicked.",
        "input": "",
        "response": "import javax.swing.*;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\n\npublic class SimpleGui {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"SimpleCounter\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        JButton button = new JButton(\"Click me!\");\n        JLabel counterLabel = new JLabel(\"Counter: 0\");\n\n        int[] counter = {0};\n\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                counter[0]++;\n                counterLabel.setText(\"Counter: \" + counter[0]);\n            }\n        });\n\n        frame.setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.Y_AXIS));\n        frame.add(button);\n        frame.add(counterLabel);\n\n        frame.pack();\n        frame.setVisible(true);\n    }\n}",
        "output": "import javax.swing.*;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\n\npublic class SimpleGui {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"SimpleCounter\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        JButton button = new JButton(\"Click me!\");\n        JLabel counterLabel = new JLabel(\"Counter: 0\");\n\n        int[] counter = {0};\n\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                counter[0]++;\n                counterLabel.setText(\"Counter: \" + counter[0]);\n            }\n        });\n\n        frame.setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.Y_AXIS));\n        frame.add(button);\n        frame.add(counterLabel);\n\n        frame.pack();\n        frame.setVisible(true);\n    }\n}"
    },
    {
        "instruction": "Examine the JavaScript code below and identify any syntax errors.\n\nfunction add(num1 num2) {}\nvar sum == add( 4, 5);\nconsole.log('The total sum is :', sum;)\n",
        "input": "",
        "response": "There are three syntax errors:\n1. A comma is missing between function parameters (num1, num2).\n2. The assignment operator should be '=' instead of '=='.\n3. A closing parenthesis is missing for console.log.\n\nCorrected code:\n\nfunction add(num1, num2) {}\nvar sum = add(4, 5);\nconsole.log('The total sum is :', sum);",
        "output": "There are three syntax errors:\n1. A comma is missing between function parameters (num1, num2).\n2. The assignment operator should be '=' instead of '=='.\n3. A closing parenthesis is missing for console.log.\n\nCorrected code:\n\nfunction add(num1, num2) {}\nvar sum = add(4, 5);\nconsole.log('The total sum is :', sum);"
    },
    {
        "instruction": "What would be the output of the following C++ code?\n\n#include <iostream>\n\nint main() {\n int i = 3;\n while (i >= 0) {\n std::cout << i << \" \";\n i -= 2;\n }\n return 0;\n}\n",
        "input": "",
        "response": "The output of the given C++ code would be: \"3 1 -1 \"",
        "output": "The output of the given C++ code would be: \"3 1 -1 \""
    },
    {
        "instruction": "Write a JavaScript function to calculate the distance between two points on a 2D plane using their coordinates (x1, y1) and (x2, y2).",
        "input": "x1: 3, y1: 4, x2: 6, y2: 8",
        "response": "function distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));\n}\n\ndistance(3, 4, 6, 8);",
        "output": "function distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));\n}\n\ndistance(3, 4, 6, 8);"
    },
    {
        "instruction": "Which design pattern should be used in Java to encapsulate the creation of related objects without specifying their concrete classes?",
        "input": "",
        "response": "Abstract Factory",
        "output": "Abstract Factory"
    },
    {
        "instruction": "Rewrite the following Python code snippet to use a list comprehension instead of a for loop.\n\nsquared_list = []\nfor number in range(10):\n    squared_list.append(number * number)",
        "input": "",
        "response": "squared_list = [number * number for number in range(10)]",
        "output": "squared_list = [number * number for number in range(10)]"
    },
    {
        "instruction": "You are asked to debug a C++ program that raises a 'segmentation fault' while executing. Identify a couple of reasons that may cause this error and suggest some ways to fix them.",
        "input": "",
        "response": "Common causes of segmentation fault include NULL pointer dereference, buffer overflow, and accessing freed memory. To fix these issues:\n\n1. Check for NULL pointers before dereferencing them.\n2. Ensure proper memory bounds when working with arrays or buffers.\n3. Track memory allocations/deallocations and validate usage to avoid accessing freed memory.",
        "output": "Common causes of segmentation fault include NULL pointer dereference, buffer overflow, and accessing freed memory. To fix these issues:\n\n1. Check for NULL pointers before dereferencing them.\n2. Ensure proper memory bounds when working with arrays or buffers.\n3. Track memory allocations/deallocations and validate usage to avoid accessing freed memory."
    },
    {
        "instruction": "Design a shell script to monitor disk usage and send an email notification if the disk usage exceeds 90%.",
        "input": "",
        "response": "#!/bin/bash\n\nTHRESHOLD=90\nEMAIL='youremail@example.com'\n\nfor disk in $(df | awk '{print $1}' | tail -n +2); do\n  usage=$(df | awk -v disk=\"$disk\" '$1 == disk {print $5}' | sed 's/%//')\n  if [ $usage -gt $THRESHOLD ]; then\n    echo \"Disk: $disk has exceeded the threshold of $THRESHOLD% with usage at $usage%\" | mail -s 'Disk Usage Alert' $EMAIL\n  fi\ndone",
        "output": "#!/bin/bash\n\nTHRESHOLD=90\nEMAIL='youremail@example.com'\n\nfor disk in $(df | awk '{print $1}' | tail -n +2); do\n  usage=$(df | awk -v disk=\"$disk\" '$1 == disk {print $5}' | sed 's/%//')\n  if [ $usage -gt $THRESHOLD ]; then\n    echo \"Disk: $disk has exceeded the threshold of $THRESHOLD% with usage at $usage%\" | mail -s 'Disk Usage Alert' $EMAIL\n  fi\ndone"
    },
    {
        "instruction": "Demonstrate the use of recursion in Java to calculate the factorial of a given number n.",
        "input": "",
        "response": "public class Factorial {\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(\"Factorial of \" + n + \" is: \" + factorial(n));\n    }\n}",
        "output": "public class Factorial {\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(\"Factorial of \" + n + \" is: \" + factorial(n));\n    }\n}"
    },
    {
        "instruction": "What is the proper way to define a Python class for a rectangle with length and width as properties, and methods to calculate the area and perimeter?",
        "input": "",
        "response": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * (self.length + self.width)",
        "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * (self.length + self.width)"
    },
    {
        "instruction": "Create a C# method named 'ReverseWords' that takes a string input and reverses the order of the words in that string.",
        "input": "",
        "response": "public static string ReverseWords(string input)\n{\n    string[] words = input.Split(' ');\n    Array.Reverse(words);\n    return string.Join(' ', words);\n}",
        "output": "public static string ReverseWords(string input)\n{\n    string[] words = input.Split(' ');\n    Array.Reverse(words);\n    return string.Join(' ', words);\n}"
    },
    {
        "instruction": "Implement a Java program that takes a user input integer and returns true if it's prime, otherwise false.",
        "input": "",
        "response": "import java.util.Scanner;\n\npublic class PrimeCheck {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n        System.out.println(\"Is prime: \" + isPrime(number));\n    }\n\n    public static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class PrimeCheck {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n        System.out.println(\"Is prime: \" + isPrime(number));\n    }\n\n    public static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    },
    {
        "instruction": "Write a Shell script that uses command substitution to find and output the number of files in the current directory.",
        "input": "",
        "response": "#!/bin/sh\n\nfile_count=$(ls | wc -l)\necho \"Number of files in the current directory: $file_count\"",
        "output": "#!/bin/sh\n\nfile_count=$(ls | wc -l)\necho \"Number of files in the current directory: $file_count\""
    },
    {
        "instruction": "Rewrite the given JavaScript code using async/await.",
        "input": "function getData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Data received!');\n    }, 1000);\n  });\n}\n\ndata = getData();\ndata.then((result) => {\n  console.log(result);\n});",
        "response": "async function getData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Data received!');\n    }, 1000);\n  });\n}\n\nasync function main() {\n  const data = await getData();\n  console.log(data);\n}\n\nmain();",
        "output": "async function getData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Data received!');\n    }, 1000);\n  });\n}\n\nasync function main() {\n  const data = await getData();\n  console.log(data);\n}\n\nmain();"
    },
    {
        "instruction": "Debug the Python code to fix the syntax error and make it reverse the words in a sentence.",
        "input": "sentence_input = \"Hello, world! How are you ?\"\n\nunknown_words = sentence_input.split(\", \")\nreversed_words = []\n\nfor word in unknown_words\n    reversed_words.append(word[::-1])\n\nreversed_sentence = \" \".join(reversed_words)\nprint(reversed_sentence)",
        "response": "sentence_input = \"Hello, world! How are you?\"\n\nunknown_words = sentence_input.split(\" \")\nreversed_words = []\n\nfor word in unknown_words:\n    reversed_words.append(word[::-1])\n\nreversed_sentence = \" \".join(reversed_words)\nprint(reversed_sentence)",
        "output": "sentence_input = \"Hello, world! How are you?\"\n\nunknown_words = sentence_input.split(\" \")\nreversed_words = []\n\nfor word in unknown_words:\n    reversed_words.append(word[::-1])\n\nreversed_sentence = \" \".join(reversed_words)\nprint(reversed_sentence)"
    },
    {
        "instruction": "Write a Python function called 'count_vowels' that takes a single string argument and returns the number of vowels (a, e, i, o, u) found in the input string.",
        "input": "'Hello, world!'",
        "response": "def count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ninput_str = 'Hello, world!'\nresult = count_vowels(input_str)\nprint(result)",
        "output": "def count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ninput_str = 'Hello, world!'\nresult = count_vowels(input_str)\nprint(result)"
    },
    {
        "instruction": "In Java, implement a static method 'isPalindromic', which accepts a string as a parameter and checks if it's a palindrome (case-insensitive). Return true if it is, otherwise false.",
        "input": "'Racecar'",
        "response": "public class PalindromeChecker {\n\n    public static boolean isPalindromic(String input) {\n        String cleanedInput = input.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        int left = 0;\n        int right = cleanedInput.length() - 1;\n        while (left < right) {\n            if (cleanedInput.charAt(left) != cleanedInput.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String input = \"Racecar\";\n        System.out.println(isPalindromic(input));\n    }\n}",
        "output": "public class PalindromeChecker {\n\n    public static boolean isPalindromic(String input) {\n        String cleanedInput = input.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        int left = 0;\n        int right = cleanedInput.length() - 1;\n        while (left < right) {\n            if (cleanedInput.charAt(left) != cleanedInput.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String input = \"Racecar\";\n        System.out.println(isPalindromic(input));\n    }\n}"
    },
    {
        "instruction": "How would you rewrite the following JavaScript code using the 'await' keyword inside an asynchronous function rather than using '.then()' for handling promises?",
        "input": "fetch('https://api.example.com/data')\n .then(response => response.json())\n .then(data => console.log(data));",
        "response": "async function fetchData() {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n}\n\nfetchData();",
        "output": "async function fetchData() {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n}\n\nfetchData();"
    },
    {
        "instruction": "Decode the given base64 encoded string using a shell script.",
        "input": "aGVsbG8gd29ybGQh",
        "response": "#!/bin/sh\n\nencoded_string='aGVsbG8gd29ybGQh'\necho \"$encoded_string\" | base64 -d",
        "output": "#!/bin/sh\n\nencoded_string='aGVsbG8gd29ybGQh'\necho \"$encoded_string\" | base64 -d"
    },
    {
        "instruction": "Identify and fix the syntax error in the following JavaScript code for a simple function that adds two numbers.",
        "input": "function add_numbers(a, b) {\n    consoe.log(a + b);\n}",
        "response": "function add_numbers(a, b) {\n    console.log(a + b);\n}",
        "output": "function add_numbers(a, b) {\n    console.log(a + b);\n}"
    },
    {
        "instruction": "Explain the purpose of each line in the following C++ code and identify any issues, if present.",
        "input": "#include <iostream>\nusing namespace std;\nint main() {\n    int num1, num2;\n    cout << \"Enter two integers: \";\n    cin >> num1 >> num2;\n    int sum = num1 + num2;\n    cout << \"The sum is: \" << sum << endl;\n    return 0;\n}",
        "response": "1. #include <iostream>: Include the 'iostream' header file required for input/output operations.\n2. using namespace std;: Bring identifiers from the 'std' namespace into the current scope.\n3. int main(): Define the main function that serves as an entry point for the program.\n4. int num1, num2;: Declare two integer variables, 'num1' and 'num2'.\n5. cout << \"Enter two integers: \": Print a prompt asking the user to enter two integers.\n6. cin >> num1 >> num2;: Read two integer values from the user into 'num1' and 'num2'.\n7. int sum = num1 + num2;: Calculate the sum of 'num1' and 'num2' and store it in the integer variable 'sum'.\n8. cout << \"The sum is: \" << sum << endl;: Print the result of the sum followed by a newline.\n9. return 0;: Exit the program, returning 0 to indicate successful execution.",
        "output": "1. #include <iostream>: Include the 'iostream' header file required for input/output operations.\n2. using namespace std;: Bring identifiers from the 'std' namespace into the current scope.\n3. int main(): Define the main function that serves as an entry point for the program.\n4. int num1, num2;: Declare two integer variables, 'num1' and 'num2'.\n5. cout << \"Enter two integers: \": Print a prompt asking the user to enter two integers.\n6. cin >> num1 >> num2;: Read two integer values from the user into 'num1' and 'num2'.\n7. int sum = num1 + num2;: Calculate the sum of 'num1' and 'num2' and store it in the integer variable 'sum'.\n8. cout << \"The sum is: \" << sum << endl;: Print the result of the sum followed by a newline.\n9. return 0;: Exit the program, returning 0 to indicate successful execution."
    },
    {
        "instruction": "Create a Python function to count the number of occurrences of a substring in a given string, ignoring case.",
        "input": "",
        "response": "def substring_count(main_string, pattern):\n    main_string_lower = main_string.lower()\n    pattern_lower = pattern.lower()\n    return main_string_lower.count(pattern_lower)",
        "output": "def substring_count(main_string, pattern):\n    main_string_lower = main_string.lower()\n    pattern_lower = pattern.lower()\n    return main_string_lower.count(pattern_lower)"
    },
    {
        "instruction": "Using Java, write a function that takes two strings as parameters and returns true if the characters in the first string are a permutation of the characters in the second string.",
        "input": "",
        "response": "public boolean isPermutation(String str1, String str2) {\n    if (str1.length() != str2.length()) {\n        return false;\n    }\n    int[] charCounts = new int[128];\n    for (int i = 0; i < str1.length(); i++) {\n        charCounts[str1.charAt(i)]++;\n    }\n    for (int i = 0; i < str2.length(); i++) {\n        if (--charCounts[str2.charAt(i)] < 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "output": "public boolean isPermutation(String str1, String str2) {\n    if (str1.length() != str2.length()) {\n        return false;\n    }\n    int[] charCounts = new int[128];\n    for (int i = 0; i < str1.length(); i++) {\n        charCounts[str1.charAt(i)]++;\n    }\n    for (int i = 0; i < str2.length(); i++) {\n        if (--charCounts[str2.charAt(i)] < 0) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Write a function in C# that takes a string and returns a list of characters containing consonants only, preserving the original order of characters.",
        "input": "",
        "response": "public static List<char> FilterConsonants(string input)\n{\n    List<char> consonants = new List<char>();\n    string vowels = \"AEIOUaeiou\";\n\n    foreach (char c in input)\n    {\n        if (!vowels.Contains(c))\n        {\n            consonants.Add(c);\n        }\n    }\n\n    return consonants;\n}",
        "output": "public static List<char> FilterConsonants(string input)\n{\n    List<char> consonants = new List<char>();\n    string vowels = \"AEIOUaeiou\";\n\n    foreach (char c in input)\n    {\n        if (!vowels.Contains(c))\n        {\n            consonants.Add(c);\n        }\n    }\n\n    return consonants;\n}"
    },
    {
        "instruction": "Implement a Python function that searches for a specific file extension within a given directory and returns a list with the file names.",
        "input": "Extension: .txt\nDirectory: /home/user/Documents",
        "response": "import os\n\ndef find_files_with_extension(extension, directory):\n    result = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if file.endswith(extension):\n                result.append(os.path.join(root, file))\n    return result\n\nfile_list = find_files_with_extension('.txt', '/home/user/Documents')",
        "output": "import os\n\ndef find_files_with_extension(extension, directory):\n    result = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if file.endswith(extension):\n                result.append(os.path.join(root, file))\n    return result\n\nfile_list = find_files_with_extension('.txt', '/home/user/Documents')"
    },
    {
        "instruction": "Create a Java function that takes two arrays of integers and returns a new array containing the sum of the elements at the same index.",
        "input": "Array 1: [1, 2, 3, 4, 5]\nArray 2: [5, 4, 3, 2, 1]",
        "response": "public int[] addArrays(int[] arr1, int[] arr2) {\n    if (arr1 == null || arr2 == null) {\n        throw new IllegalArgumentException(\"Input arrays cannot be null.\");\n    }\n    if (arr1.length != arr2.length) {\n        throw new IllegalArgumentException(\"Input arrays must have the same length.\");\n    }\n    int[] result = new int[arr1.length];\n    for (int i = 0; i < arr1.length; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n    return result;\n}",
        "output": "public int[] addArrays(int[] arr1, int[] arr2) {\n    if (arr1 == null || arr2 == null) {\n        throw new IllegalArgumentException(\"Input arrays cannot be null.\");\n    }\n    if (arr1.length != arr2.length) {\n        throw new IllegalArgumentException(\"Input arrays must have the same length.\");\n    }\n    int[] result = new int[arr1.length];\n    for (int i = 0; i < arr1.length; i++) {\n        result[i] = arr1[i] + arr2[i];\n    }\n    return result;\n}"
    },
    {
        "instruction": "Provide a Shell script that checks the disk usage of a target folder and sends an email alert if it's above a specified threshold.",
        "input": "Target folder: /var/log\nThreshold: 80%",
        "response": "#!/bin/bash\n\nfolder=\"/var/log\"\nthreshold=80\nemail=\"youremail@example.com\"\n\ncurrent_usage=$(df \"$folder\" | tail -n 1 | awk '{print $5}' | sed 's/%//')\n\nif [ $current_usage -gt $threshold ]; then\n    echo \"The folder $folder has exceeded the threshold ($threshold%) with a usage of $current_usage%\" | mail -s \"Disk Space Warning\" $email\nfi",
        "output": "#!/bin/bash\n\nfolder=\"/var/log\"\nthreshold=80\nemail=\"youremail@example.com\"\n\ncurrent_usage=$(df \"$folder\" | tail -n 1 | awk '{print $5}' | sed 's/%//')\n\nif [ $current_usage -gt $threshold ]; then\n    echo \"The folder $folder has exceeded the threshold ($threshold%) with a usage of $current_usage%\" | mail -s \"Disk Space Warning\" $email\nfi"
    },
    {
        "instruction": "Create a Python function that accepts a string of text and returns the number of vowels in it.",
        "input": "Sample text: 'The quick brown fox jumps over the lazy dog.'",
        "response": "def count_vowels(text):\n    vowels = 'aeiou'\n    count = 0\n    for char in text.lower():\n        if char in vowels:\n            count += 1\n    return count\n\nsample_text = 'The quick brown fox jumps over the lazy dog.'\nprint(count_vowels(sample_text))",
        "output": "def count_vowels(text):\n    vowels = 'aeiou'\n    count = 0\n    for char in text.lower():\n        if char in vowels:\n            count += 1\n    return count\n\nsample_text = 'The quick brown fox jumps over the lazy dog.'\nprint(count_vowels(sample_text))"
    },
    {
        "instruction": "What is the output of the following Java code snippet?\n\nint x = 5;\nint y = 10;\nint z = ++x * y--;\nSystem.out.println(z);",
        "input": "",
        "response": "The output is 60. The pre-increment operator (++x) increases x to 6 before the multiplication, and the post-decrement operator (y--) decreases y to 9 after the multiplication. So, z = 6 * 10 = 60.",
        "output": "The output is 60. The pre-increment operator (++x) increases x to 6 before the multiplication, and the post-decrement operator (y--) decreases y to 9 after the multiplication. So, z = 6 * 10 = 60."
    },
    {
        "instruction": "Given a JavaScript function that calculates the factorial of a non-negative integer number, identify and fix the syntax error(s).\n\nfunction factorial(n) {\nif (n == 0 || n == 1) return 1;\nreturn n * (factorial(n - 1),\n}",
        "input": "",
        "response": "Corrected JavaScript function:\n\nfunction factorial(n) {\n  if (n == 0 || n == 1) return 1;\n  return n * factorial(n - 1);\n}",
        "output": "Corrected JavaScript function:\n\nfunction factorial(n) {\n  if (n == 0 || n == 1) return 1;\n  return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Write a C++ program that reads an integer number from the user and outputs the factorial of the number. Ensure that the user's input is validated.",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned int n) {\n  if (n == 0 || n == 1) return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n;\n  cout << \"Enter a non-negative integer: \";\n  cin >> n;\n  if (n >= 0) {\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n  } else {\n    cout << \"Invalid input. Please enter a non-negative integer.\" << endl;\n  }\n  return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned int n) {\n  if (n == 0 || n == 1) return 1;\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n;\n  cout << \"Enter a non-negative integer: \";\n  cin >> n;\n  if (n >= 0) {\n    cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n  } else {\n    cout << \"Invalid input. Please enter a non-negative integer.\" << endl;\n  }\n  return 0;\n}"
    },
    {
        "instruction": "Implement a function in JavaScript to validate an email address using regular expressions.",
        "input": "",
        "response": "function validateEmail(email) {\n  const regex = /^(([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@[\\w-]+(\\.\\w{2,3})+$/;\n  return regex.test(email);\n}",
        "output": "function validateEmail(email) {\n  const regex = /^(([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@[\\w-]+(\\.\\w{2,3})+$/;\n  return regex.test(email);\n}"
    },
    {
        "instruction": "Create a C++ code to calculate the area of a triangle using Heron's formula given the sides a, b, and c.",
        "input": "",
        "response": "#include <iostream>\n#include <cmath>\n\ndouble areaOfTriangle(double a, double b, double c) {\n    double s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\nint main() {\n    double a, b, c;\n    std::cin >> a >> b >> c;\n    std::cout << areaOfTriangle(a, b, c) << std::endl;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\ndouble areaOfTriangle(double a, double b, double c) {\n    double s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\nint main() {\n    double a, b, c;\n    std::cin >> a >> b >> c;\n    std::cout << areaOfTriangle(a, b, c) << std::endl;\n}"
    },
    {
        "instruction": "Given the following Python code snippet, can you identify and correct the syntax error(s)?",
        "input": "def calculate_area(width, height)\n  area = width * height\n  return area",
        "response": "def calculate_area(width, height):\n  area = width * height\n  return area",
        "output": "def calculate_area(width, height):\n  area = width * height\n  return area"
    },
    {
        "instruction": "Write a Java code snippet to merge two given sorted arrays (ascending order) without using any built-in methods.",
        "input": "",
        "response": "public static int[] mergeSortedArrays(int[] arr1, int[] arr2) {\n  int[] mergedArray = new int[arr1.length + arr2.length];\n  int i = 0, j = 0, k = 0;\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) {\n      mergedArray[k++] = arr1[i++];\n    } else {\n      mergedArray[k++] = arr2[j++];\n    }\n  }\n\n  while (i < arr1.length) {\n    mergedArray[k++] = arr1[i++];\n  }\n  while (j < arr-2.length) {\n    mergedArray[k++] = arr2[j++];\n  }\n\n  return mergedArray;\n}",
        "output": "public static int[] mergeSortedArrays(int[] arr1, int[] arr2) {\n  int[] mergedArray = new int[arr1.length + arr2.length];\n  int i = 0, j = 0, k = 0;\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] < arr2[j]) {\n      mergedArray[k++] = arr1[i++];\n    } else {\n      mergedArray[k++] = arr2[j++];\n    }\n  }\n\n  while (i < arr1.length) {\n    mergedArray[k++] = arr1[i++];\n  }\n  while (j < arr-2.length) {\n    mergedArray[k++] = arr2[j++];\n  }\n\n  return mergedArray;\n}"
    },
    {
        "instruction": "Create a JavaScript function that calculates the Euclidean distance between two points (x1, y1) and (x2, y2).",
        "input": "x1 = 3, y1 = 4, x2 = 6, y2 = 8",
        "response": "function euclideanDistance(x1, y1, x2, y2) {\n    let x_diff = x2 - x1;\n    let y_diff = y2 - y1;\n    let distance = Math.sqrt(x_diff * x_diff + y_diff * y_diff);\n    return distance;\n}\n\n// Usage: euclideanDistance(3, 4, 6, 8)",
        "output": "function euclideanDistance(x1, y1, x2, y2) {\n    let x_diff = x2 - x1;\n    let y_diff = y2 - y1;\n    let distance = Math.sqrt(x_diff * x_diff + y_diff * y_diff);\n    return distance;\n}\n\n// Usage: euclideanDistance(3, 4, 6, 8)"
    },
    {
        "instruction": "Fix the Java code that adds two numbers: 'int addTwoNumbers(int a, int' without a closing parenthesis.",
        "input": "int addTwoNumbers(int a, int",
        "response": "int addTwoNumbers(int a, int b) {\n    return a + b;\n}\n\n// Fixed the missing parameter and closing parenthesis.",
        "output": "int addTwoNumbers(int a, int b) {\n    return a + b;\n}\n\n// Fixed the missing parameter and closing parenthesis."
    },
    {
        "instruction": "What would be the output of the following C++ code?\n\n#include <iostream>\n\nint func(int x) {\n    static int count = 0;\n    count += x;\n    return count;\n}\n\nint main() {\n    std::cout << func(3) << ' ' << func(5) << ' ' << func(-2) << std::endl;\n    return 0;\n}",
        "input": "",
        "response": "The output of the code would be:\n\n3 8 6\n\nExplanation: The function 'func' has a static variable 'count' that retains its value between function calls. The function increases 'count' by the value of 'x' and returns the new value of 'count'.",
        "output": "The output of the code would be:\n\n3 8 6\n\nExplanation: The function 'func' has a static variable 'count' that retains its value between function calls. The function increases 'count' by the value of 'x' and returns the new value of 'count'."
    },
    {
        "instruction": "Design a Python function that takes a list of numbers and returns a dictionary containing the minimum, maximum, and average of the numbers.",
        "input": "[5, 10, 2, 8, 9]",
        "response": "def list_stats(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    avg_val = sum(numbers) / len(numbers)\n    return {'min': min_val, 'max': max_val, 'avg': avg_val}\n\n# Usage: list_stats([5, 10, 2, 8, 9])",
        "output": "def list_stats(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    avg_val = sum(numbers) / len(numbers)\n    return {'min': min_val, 'max': max_val, 'avg': avg_val}\n\n# Usage: list_stats([5, 10, 2, 8, 9])"
    },
    {
        "instruction": "Create a JavaScript function that calculates the number of vowels in a given string and returns the count.",
        "input": "Hello world!",
        "response": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.includes(str[i].toLowerCase())) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst inputStr = 'Hello world!';\nconsole.log(countVowels(inputStr));",
        "output": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.includes(str[i].toLowerCase())) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst inputStr = 'Hello world!';\nconsole.log(countVowels(inputStr));"
    },
    {
        "instruction": "In Java, write a method that reverse a given string without using any library functions.",
        "input": "OpenAI",
        "response": "public String reverseString(String input) {\n    char[] inputChars = input.toCharArray();\n    int left = 0;\n    int right = inputChars.length - 1;\n    while (left < right) {\n        char temp = inputChars[left];\n        inputChars[left] = inputChars[right];\n        inputChars[right] = temp;\n        left++;\n        right--;\n    }\n    return new String(inputChars);\n}\n\nString input = \"OpenAI\";\nSystem.out.println(reverseString(input));",
        "output": "public String reverseString(String input) {\n    char[] inputChars = input.toCharArray();\n    int left = 0;\n    int right = inputChars.length - 1;\n    while (left < right) {\n        char temp = inputChars[left];\n        inputChars[left] = inputChars[right];\n        inputChars[right] = temp;\n        left++;\n        right--;\n    }\n    return new String(inputChars);\n}\n\nString input = \"OpenAI\";\nSystem.out.println(reverseString(input));"
    },
    {
        "instruction": "Write a Python function that computes the square of each element in a list and returns the list of squared elements while preserving the original order.",
        "input": "[1, 4, 3, 6, 2]",
        "response": "def square_elements(numbers):\n    return [x ** 2 for x in numbers]\n\ninput_list = [1, 4, 3, 6, 2]\nprint(square_elements(input_list))",
        "output": "def square_elements(numbers):\n    return [x ** 2 for x in numbers]\n\ninput_list = [1, 4, 3, 6, 2]\nprint(square_elements(input_list))"
    },
    {
        "instruction": "Can you generate a C++ code that calculates the factorial of a given non-negative integer number?",
        "input": "5",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) return 1;\n    else return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n <= 1) return 1;\n    else return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How to find the inverse of a 2x2 matrix in Python?",
        "input": "matrix = [[1, 2], [3, 4]]",
        "response": "def matrix_inverse(matrix):\n    a, b, c, d = matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        raise ValueError('Matrix is singular and has no inverse.')\n    inverse = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse\n\nmatrix = [[1, 2], [3, 4]]\ninverse = matrix_inverse(matrix)\nprint(inverse)",
        "output": "def matrix_inverse(matrix):\n    a, b, c, d = matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        raise ValueError('Matrix is singular and has no inverse.')\n    inverse = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse\n\nmatrix = [[1, 2], [3, 4]]\ninverse = matrix_inverse(matrix)\nprint(inverse)"
    },
    {
        "instruction": "In Java, create a program that prompts the user for a string and then reverses the order of the words in that string.",
        "input": "Portraying the Starry Night",
        "response": "import java.util.Scanner;\n\nclass ReverseWords {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print('Enter a string: ');\n        String input = scanner.nextLine();\n\n        String[] words = input.split(' ');\n        String reversed = '';\n\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed += words[i] + (i == 0 ? '' : ' ');\n        }\n\n        System.out.println('Reversed: ' + reversed);\n    }\n}",
        "output": "import java.util.Scanner;\n\nclass ReverseWords {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print('Enter a string: ');\n        String input = scanner.nextLine();\n\n        String[] words = input.split(' ');\n        String reversed = '';\n\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed += words[i] + (i == 0 ? '' : ' ');\n        }\n\n        System.out.println('Reversed: ' + reversed);\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript function that receives an array of numbers and returns the same array sorted in descending order.",
        "input": "[10, 4, 33, 8, 15]",
        "response": "function sortDescending(arr) {\n  return arr.sort((a, b) => b - a);\n}\n\nvar array = [10, 4, 33, 8, 15];\nvar sortedArray = sortDescending(array);\nconsole.log(sortedArray);",
        "output": "function sortDescending(arr) {\n  return arr.sort((a, b) => b - a);\n}\n\nvar array = [10, 4, 33, 8, 15];\nvar sortedArray = sortDescending(array);\nconsole.log(sortedArray);"
    },
    {
        "instruction": "Fix the following PHP code snippet that intends to calculate the factorial of a given number 'n' and store the result in a variable 'fact'.",
        "input": "<?php\n    function factorial($n) {\n        $fact = 0;\n        for($i = 1; $i <= $n; $i++) {\n            $fact = $fact * $i;\n        }\n        return $fact;\n    }\n    ?>",
        "response": "<?php\n    function factorial($n) {\n        $fact = 1;\n        for($i = 1; $i <= $n; $i++) {\n            $fact = $fact * $i;\n        }\n        return $fact;\n    }\n    ?>",
        "output": "<?php\n    function factorial($n) {\n        $fact = 1;\n        for($i = 1; $i <= $n; $i++) {\n            $fact = $fact * $i;\n        }\n        return $fact;\n    }\n    ?>"
    },
    {
        "instruction": "How can I determine if a given number is a prime number using JavaScript?",
        "input": "23",
        "response": "function isPrime(num) {\n  if (num <= 1) {\n    return false;\n  }\n\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nlet example = 23;\nconsole.log(isPrime(example));",
        "output": "function isPrime(num) {\n  if (num <= 1) {\n    return false;\n  }\n\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nlet example = 23;\nconsole.log(isPrime(example));"
    },
    {
        "instruction": "Write a C++ program that accepts an integer from the user and checks whether the input is an even or odd number.",
        "input": "13",
        "response": "#include <iostream>\n\nint main() {\n  int num;\n  std::cout << \"Enter an integer: \";\n  std::cin >> num;\n\n  if (num % 2 == 0) {\n    std::cout << num << \" is even.\";\n  } else {\n    std::cout << num << \" is odd.\";\n  }\n\n  return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n  int num;\n  std::cout << \"Enter an integer: \";\n  std::cin >> num;\n\n  if (num % 2 == 0) {\n    std::cout << num << \" is even.\";\n  } else {\n    std::cout << num << \" is odd.\";\n  }\n\n  return 0;\n}"
    },
    {
        "instruction": "Demonstrate how to read and parse a JSON object in Java using the JSON.simple library.",
        "input": "{\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}",
        "response": "import org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\npublic class JSONRead {\n    public static void main(String[] args) {\n        String json_str = \"{\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 30, \\\"city\\\": \\\"New York\\\"}\";\n        JSONParser parser = new JSONParser();\n\n        try {\n            JSONObject jsonObj = (JSONObject) parser.parse(json_str);\n            String name = (String) jsonObj.get(\"name\");\n            long age = (Long) jsonObj.get(\"age\");\n            String city = (String) jsonObj.get(\"city\");\n\n            System.out.println(\"Name: \" + name);\n            System.out.println(\"Age: \" + age);\n            System.out.println(\"City: \" + city);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "output": "import org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\npublic class JSONRead {\n    public static void main(String[] args) {\n        String json_str = \"{\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 30, \\\"city\\\": \\\"New York\\\"}\";\n        JSONParser parser = new JSONParser();\n\n        try {\n            JSONObject jsonObj = (JSONObject) parser.parse(json_str);\n            String name = (String) jsonObj.get(\"name\");\n            long age = (Long) jsonObj.get(\"age\");\n            String city = (String) jsonObj.get(\"city\");\n\n            System.out.println(\"Name: \" + name);\n            System.out.println(\"Age: \" + age);\n            System.out.println(\"City: \" + city);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
        "instruction": "Create a Python function that takes a positive integer n as an input and returns a list of the first n Fibonacci numbers.",
        "input": "5",
        "response": "def generate_fibonacci(n):\n    result = []\n    a, b = 0, 1\n    for i in range(n):\n        result.append(a)\n        a, b = b, a + b\n    return result",
        "output": "def generate_fibonacci(n):\n    result = []\n    a, b = 0, 1\n    for i in range(n):\n        result.append(a)\n        a, b = b, a + b\n    return result"
    },
    {
        "instruction": "Construct a SQL query to fetch a list of customers' names, emails, and ages where the age is greater than 25 and sort the result by age in descending order.",
        "input": "customers database table having id, name, email, age columns",
        "response": "SELECT name, email, age FROM customers WHERE age > 25 ORDER BY age DESC;",
        "output": "SELECT name, email, age FROM customers WHERE age > 25 ORDER BY age DESC;"
    },
    {
        "instruction": "Write a C++ function to check if a sentence has balanced parentheses, i.e., each opening bracket '(' has a matching closing bracket ')' and vice versa.",
        "input": "(Hello (World) (This is)) an example.",
        "response": "#include <iostream>\n#include <stack>\n#include <string>\n\nbool is_balanced(const std::string& sentence) {\n    std::stack<char> parentheses;\n\n    for (char ch : sentence) {\n        if (ch == '(') {\n            parentheses.push(ch);\n        } else if (ch == ')') {\n            if (parentheses.empty()) return false;\n            parentheses.pop();\n        }\n    }\n\n    return parentheses.empty();\n}\n\nint main() {\n    std::string input = \"(Hello (World) (This is)) an example.\";\n    std::cout << (is_balanced(input) ? \"Balanced\" : \"Not Balanced\") << std::endl;\n}",
        "output": "#include <iostream>\n#include <stack>\n#include <string>\n\nbool is_balanced(const std::string& sentence) {\n    std::stack<char> parentheses;\n\n    for (char ch : sentence) {\n        if (ch == '(') {\n            parentheses.push(ch);\n        } else if (ch == ')') {\n            if (parentheses.empty()) return false;\n            parentheses.pop();\n        }\n    }\n\n    return parentheses.empty();\n}\n\nint main() {\n    std::string input = \"(Hello (World) (This is)) an example.\";\n    std::cout << (is_balanced(input) ? \"Balanced\" : \"Not Balanced\") << std::endl;\n}"
    },
    {
        "instruction": "Implement a shell script that retrieves the total number of lines, words, and characters in a given text file.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfilename=$1\nlines=$(wc -l < $filename)\nwords=$(wc -w < $filename)\ncharacters=$(wc -m < $filename)\n\necho \"Total Lines: $lines\"\necho \"Total Words: $words\"\necho \"Total Characters: $characters\"",
        "output": "#!/bin/bash\n\nfilename=$1\nlines=$(wc -l < $filename)\nwords=$(wc -w < $filename)\ncharacters=$(wc -m < $filename)\n\necho \"Total Lines: $lines\"\necho \"Total Words: $words\"\necho \"Total Characters: $characters\""
    },
    {
        "instruction": "Write a C++ function to generate the Fibonacci sequence up to a given number of terms.",
        "input": "6",
        "response": "#include<iostream>\nusing namespace std;\n\nvoid generate_fibonacci(int terms) {\n  int t1 = 0, t2 = 1, nextTerm = 0;\n\n  for (int i = 1; i <= terms; ++i) {\n    if (i == 1) {\n      cout << t1 << \", \";\n      continue;\n    }\n    if (i == 2) {\n      cout << t2 << \", \";\n      continue;\n    }\n    nextTerm = t1 + t2;\n    t1 = t2;\n    t2 = nextTerm;\n    cout << nextTerm << \", \";\n  }\n}\n\nint main() {\n  int num_terms = 6;\n  generate_fibonacci(num_terms);\n  return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nvoid generate_fibonacci(int terms) {\n  int t1 = 0, t2 = 1, nextTerm = 0;\n\n  for (int i = 1; i <= terms; ++i) {\n    if (i == 1) {\n      cout << t1 << \", \";\n      continue;\n    }\n    if (i == 2) {\n      cout << t2 << \", \";\n      continue;\n    }\n    nextTerm = t1 + t2;\n    t1 = t2;\n    t2 = nextTerm;\n    cout << nextTerm << \", \";\n  }\n}\n\nint main() {\n  int num_terms = 6;\n  generate_fibonacci(num_terms);\n  return 0;\n}"
    },
    {
        "instruction": "Make a shell script to count the number of lines in a given file and display the result.",
        "input": "filename.txt",
        "response": "#!/bin/bash\n\nfile=\"filename.txt\"\n\nif [ -f \"$file\" ]; then\n  line_count=$(wc -l < \"$file\")\n  echo \"The number of lines in $file is $line_count.\"\nelse\n  echo \"File not found!\"\nfi",
        "output": "#!/bin/bash\n\nfile=\"filename.txt\"\n\nif [ -f \"$file\" ]; then\n  line_count=$(wc -l < \"$file\")\n  echo \"The number of lines in $file is $line_count.\"\nelse\n  echo \"File not found!\"\nfi"
    },
    {
        "instruction": "What would be the equivalent code to calculate the sum of an array of integers in Java?",
        "input": "int[] numbers = { 1, 2, 3, 4, 5 };",
        "response": "public class SumOfArray {\n\n  public static void main(String[] args) {\n    int[] numbers = { 1, 2, 3, 4, 5 };\n    int sum = 0;\n\n    for (int num : numbers) {\n      sum += num;\n    }\n    System.out.println(\"Sum of array elements is: \" + sum);\n  }\n}",
        "output": "public class SumOfArray {\n\n  public static void main(String[] args) {\n    int[] numbers = { 1, 2, 3, 4, 5 };\n    int sum = 0;\n\n    for (int num : numbers) {\n      sum += num;\n    }\n    System.out.println(\"Sum of array elements is: \" + sum);\n  }\n}"
    },
    {
        "instruction": "How can I implement a Python function that accepts a list of strings and returns a concatenated version of the strings without vowels?",
        "input": "['apple', 'banana', 'orange']",
        "response": "def concatenate_without_vowels(words):\n    vowels = 'aeiou'\n    result = ''\n    for word in words:\n        for char in word:\n            if char not in vowels:\n                result += char\n    return result\n\nwords = ['apple', 'banana', 'orange']\nresult = concatenate_without_vowels(words)\nprint(result)",
        "output": "def concatenate_without_vowels(words):\n    vowels = 'aeiou'\n    result = ''\n    for word in words:\n        for char in word:\n            if char not in vowels:\n                result += char\n    return result\n\nwords = ['apple', 'banana', 'orange']\nresult = concatenate_without_vowels(words)\nprint(result)"
    },
    {
        "instruction": "Implement a Java function that takes a string input and capitalizes the first letter of each word in the string.",
        "input": "the quick brown fox jumps over the lazy dog",
        "response": "public String capitalizeWords(String input) {\n    String[] words = input.split(' ');\n    StringBuilder capitalizedWords = new StringBuilder();\n\n    for (String word : words) {\n        capitalizedWords.append(word.substring(0, 1).toUpperCase());\n        capitalizedWords.append(word.substring(1).toLowerCase());\n        capitalizedWords.append(' ');\n    }\n\n    return capitalizedWords.toString().trim();\n}",
        "output": "public String capitalizeWords(String input) {\n    String[] words = input.split(' ');\n    StringBuilder capitalizedWords = new StringBuilder();\n\n    for (String word : words) {\n        capitalizedWords.append(word.substring(0, 1).toUpperCase());\n        capitalizedWords.append(word.substring(1).toLowerCase());\n        capitalizedWords.append(' ');\n    }\n\n    return capitalizedWords.toString().trim();\n}"
    },
    {
        "instruction": "How would you fix this JavaScript code that is intended to remove duplicates from an array?",
        "input": "function removeDuplicates(arr) {\n    let uniqueArray = [];\n    for(let i = 0; i < arr.length; i++) {\n        if(uniqueArray.indexOf(arr[i]) === -1) {\n            uniqueArray.push(arr[i]);\n        }\n    }\n    return uniqueArray;\n}",
        "response": "The provided JavaScript code actually works correctly for removing duplicates from an array. No changes or fixes are needed.",
        "output": "The provided JavaScript code actually works correctly for removing duplicates from an array. No changes or fixes are needed."
    },
    {
        "instruction": "Translate the following Python code to a C# implementation that calculates the sum of all even numbers in a given list.",
        "input": "def sum_of_evens(numbers):\n    return sum(x for x in numbers if x % 2 == 0)",
        "response": "public int SumOfEvens(List<int> numbers) {\n    return numbers.Where(x => x % 2 == 0).Sum();\n}",
        "output": "public int SumOfEvens(List<int> numbers) {\n    return numbers.Where(x => x % 2 == 0).Sum();\n}"
    },
    {
        "instruction": "Create a Bash script that counts the number of lines containing the word 'error' in a specified file.",
        "input": "example.log",
        "response": "#!/bin/bash\n\nfilename=$1\n\ngrep -i -c 'error' $filename",
        "output": "#!/bin/bash\n\nfilename=$1\n\ngrep -i -c 'error' $filename"
    },
    {
        "instruction": "Rewrite the following JavaScript code snippet with arrow functions.",
        "input": "function square(x) {\n  return x * x;\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction subtract(a, b) {\n  return a - b;\n}",
        "response": "const square = (x) => x * x;\n\nconst add = (a, b) => a + b;\n\nconst subtract = (a, b) => a - b;",
        "output": "const square = (x) => x * x;\n\nconst add = (a, b) => a + b;\n\nconst subtract = (a, b) => a - b;"
    },
    {
        "instruction": "What would be the expected output of the following C++ code?",
        "input": "#include <iostream>\n\nint main() {\n  int num1 = 19;\n  int num2 = 7;\n\n  std::cout << num1 << ' * ' << num2 << \" * \" << num1*num2 << std::endl;\n\n  return 0;\n}",
        "response": "The expected output would be:\n19 * 7 * 133",
        "output": "The expected output would be:\n19 * 7 * 133"
    },
    {
        "instruction": "Write a Java program that displays the factorial of a given number.",
        "input": "",
        "response": "import java.util.Scanner;\n\nclass Factorial {\n\n  public static void main(String[] args) {\n    int n, fact = 1;\n\n    Scanner input = new Scanner(System.in);\n    System.out.println(\"Enter a number:\");\n    n = input.nextInt();\n\n    for (int i = 1; i <= n; i++) {\n      fact = fact * i;\n    }\n\n    System.out.println(\"Factorial of \" + n + \" is: \" + fact);\n  }\n}",
        "output": "import java.util.Scanner;\n\nclass Factorial {\n\n  public static void main(String[] args) {\n    int n, fact = 1;\n\n    Scanner input = new Scanner(System.in);\n    System.out.println(\"Enter a number:\");\n    n = input.nextInt();\n\n    for (int i = 1; i <= n; i++) {\n      fact = fact * i;\n    }\n\n    System.out.println(\"Factorial of \" + n + \" is: \" + fact);\n  }\n}"
    },
    {
        "instruction": "Provide a Python function that counts the number of occurrences of a specified word in a list of strings.",
        "input": "",
        "response": "def count_occurrences(word, strings):\n    return strings.count(word)\n\nif __name__ == '__main__':\n    sample_list = ['apple', 'banana', 'orange', 'apple', 'apple', 'banana']\n    desired_word = 'apple'\n    print(f'Occurrences of {desired_word} in the list: {count_occurrences(desired_word, sample_list)}')",
        "output": "def count_occurrences(word, strings):\n    return strings.count(word)\n\nif __name__ == '__main__':\n    sample_list = ['apple', 'banana', 'orange', 'apple', 'apple', 'banana']\n    desired_word = 'apple'\n    print(f'Occurrences of {desired_word} in the list: {count_occurrences(desired_word, sample_list)}')"
    },
    {
        "instruction": "Create a Java function that reverses a given string without using any built-in methods or libraries.",
        "input": "Hello, world!",
        "response": "public class Main {\n\n    public static String reverseString(String input) {\n        char[] chars = input.toCharArray();\n        int len = chars.length;\n        for (int i = 0; i < len / 2; i++) {\n            char temp = chars[i];\n            chars[i] = chars[len - 1 - i];\n            chars[len - 1 - i] = temp;\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        String reversed = reverseString(\"Hello, world!\");\n        System.out.println(reversed);\n    }\n}",
        "output": "public class Main {\n\n    public static String reverseString(String input) {\n        char[] chars = input.toCharArray();\n        int len = chars.length;\n        for (int i = 0; i < len / 2; i++) {\n            char temp = chars[i];\n            chars[i] = chars[len - 1 - i];\n            chars[len - 1 - i] = temp;\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        String reversed = reverseString(\"Hello, world!\");\n        System.out.println(reversed);\n    }\n}"
    },
    {
        "instruction": "Implement a JavaScript function that finds the longest word in a given sentence.",
        "input": "The quick brown fox jumped over the lazy dog.",
        "response": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n\n    words.forEach(word => {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    });\n\n    return longestWord;\n}\n\nconst result = findLongestWord('The quick brown fox jumped over the lazy dog.');\nconsole.log(result);",
        "output": "function findLongestWord(sentence) {\n    const words = sentence.split(' ');\n    let longestWord = '';\n\n    words.forEach(word => {\n        if (word.length > longestWord.length) {\n            longestWord = word;\n        }\n    });\n\n    return longestWord;\n}\n\nconst result = findLongestWord('The quick brown fox jumped over the lazy dog.');\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ function that checks if a given number is prime.",
        "input": "17",
        "response": "#include<iostream>\n#include<cmath>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2 || num == 3) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= std::sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int num = 17;\n    if (isPrime(num)) {\n        std::cout << num << \" is prime.\" << std::endl;\n    } else {\n        std::cout << num << \" is not prime.\" << std::endl;\n    }\n    return 0;\n}",
        "output": "#include<iostream>\n#include<cmath>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num == 2 || num == 3) return true;\n    if (num % 2 == 0) return false;\n    for (int i = 3; i <= std::sqrt(num); i += 2) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int num = 17;\n    if (isPrime(num)) {\n        std::cout << num << \" is prime.\" << std::endl;\n    } else {\n        std::cout << num << \" is not prime.\" << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "instruction": "What would be the output if the following Python code is executed?",
        "input": "x = [10, 20, 30]\ny = x\nz = x.copy()\nx[1] = 42\nprint(x, y, z)",
        "response": "The output would be: [10, 42, 30], [10, 42, 30], [10, 20, 30]. It's because `y` is assigned to the same reference as `x`, so any changes in `x` are reflected in `y`. On the other hand, `z` is a deep copy of `x` using the `copy()` method, so the changes in `x` do not affect `z`.",
        "output": "The output would be: [10, 42, 30], [10, 42, 30], [10, 20, 30]. It's because `y` is assigned to the same reference as `x`, so any changes in `x` are reflected in `y`. On the other hand, `z` is a deep copy of `x` using the `copy()` method, so the changes in `x` do not affect `z`."
    },
    {
        "instruction": "Design a Python function that calculates the standard deviation of a list of numbers.",
        "input": "[7, 9, 3, 5, 2]",
        "response": "import math\n\ndef standard_deviation(nums):\n    mean = sum(nums) / len(nums)\n    squared_diff = [math.pow(x - mean, 2) for x in nums]\n    variance = sum(squared_diff) / len(squared_diff)\n    return math.sqrt(variance)\n\nnumbers = [7, 9, 3, 5, 2]\nstd_dev = standard_deviation(numbers)\nprint(std_dev)",
        "output": "import math\n\ndef standard_deviation(nums):\n    mean = sum(nums) / len(nums)\n    squared_diff = [math.pow(x - mean, 2) for x in nums]\n    variance = sum(squared_diff) / len(squared_diff)\n    return math.sqrt(variance)\n\nnumbers = [7, 9, 3, 5, 2]\nstd_dev = standard_deviation(numbers)\nprint(std_dev)"
    },
    {
        "instruction": "Create a C# method that counts the occurrences of a specific character in a string.",
        "input": "s = \"Computer Science\", c = 'e'",
        "response": "using System;\n\npublic class CharacterCounter {\n    public static int CountOccurrences(string s, char c) {\n        int count = 0;\n\n        foreach (char ch in s) {\n            if (ch == c) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void Main(string[] args) {\n        string inputStr = \"Computer Science\";\n        char targetChar = 'e';\n        int occurrences = CountOccurrences(inputStr, targetChar);\n        Console.WriteLine(\"Occurrences of '\" + targetChar + \"' in '\" + inputStr + \"': \" + occurrences);\n    }\n}",
        "output": "using System;\n\npublic class CharacterCounter {\n    public static int CountOccurrences(string s, char c) {\n        int count = 0;\n\n        foreach (char ch in s) {\n            if (ch == c) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void Main(string[] args) {\n        string inputStr = \"Computer Science\";\n        char targetChar = 'e';\n        int occurrences = CountOccurrences(inputStr, targetChar);\n        Console.WriteLine(\"Occurrences of '\" + targetChar + \"' in '\" + inputStr + \"': \" + occurrences);\n    }\n}"
    },
    {
        "instruction": "Write a shell script that takes a file as input and displays the total number of lines containing the word 'error' (case-insensitive).",
        "input": "logfile.txt\n\nContents of logfile.txt:\nError: file not found\nwarning: permission denied\nERROR: Invalid password\ndebug: success",
        "response": "#!/bin/bash\n\nfile_name=\"$1\"\nerror_count=$(grep -i 'error' \"${file_name}\" | wc -l)\necho \"Number of lines containing 'error': ${error_count}\"",
        "output": "#!/bin/bash\n\nfile_name=\"$1\"\nerror_count=$(grep -i 'error' \"${file_name}\" | wc -l)\necho \"Number of lines containing 'error': ${error_count}\""
    },
    {
        "instruction": "Construct a Java method to find and return the longest word in a given sentence.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "public class LongestWord {\n    public static String findLongestWord(String sentence) {\n        String[] words = sentence.split(\"\\s+\");\n        String longestWord = \"\";\n\n        for (String word : words) {\n            if (word.length() > longestWord.length()) {\n                longestWord = word;\n            }\n        }\n\n        return longestWord;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"The quick brown fox jumps over the lazy dog.\";\n        System.out.println(\"Longest word: \" + findLongestWord(sentence));\n    }\n}",
        "output": "public class LongestWord {\n    public static String findLongestWord(String sentence) {\n        String[] words = sentence.split(\"\\s+\");\n        String longestWord = \"\";\n\n        for (String word : words) {\n            if (word.length() > longestWord.length()) {\n                longestWord = word;\n            }\n        }\n\n        return longestWord;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"The quick brown fox jumps over the lazy dog.\";\n        System.out.println(\"Longest word: \" + findLongestWord(sentence));\n    }\n}"
    },
    {
        "instruction": "Identify possible syntax errors in the given JavaScript code and suggest the corrections.",
        "input": "function helloWorld() }\n  consol.log('Hello, World!';\n}",
        "response": "function helloWorld() {\n  console.log('Hello, World!');\n}",
        "output": "function helloWorld() {\n  console.log('Hello, World!');\n}"
    },
    {
        "instruction": "Write a function in Java to calculate the area of a rectangle given its width and height parameters.",
        "input": "",
        "response": "public double rectangleArea(double width, double height) {\n  if (width < 0 || height < 0) {\n    throw new IllegalArgumentException(\"Width and height must be greater than or equal to 0.\");\n  }\n  return width * height;\n}",
        "output": "public double rectangleArea(double width, double height) {\n  if (width < 0 || height < 0) {\n    throw new IllegalArgumentException(\"Width and height must be greater than or equal to 0.\");\n  }\n  return width * height;\n}"
    },
    {
        "instruction": "Implement a Python function that retrieves the top N most frequent elements from a provided list of integers.",
        "input": "example_list = [1, 2, 2, 3, 4, 4, 4, 5], top_N = 2",
        "response": "from collections import Counter\n\ndef top_N_elements(example_list, top_N):\n  count = Counter(example_list)\n  return [elem for elem, freq in count.most_common(top_N)]",
        "output": "from collections import Counter\n\ndef top_N_elements(example_list, top_N):\n  count = Counter(example_list)\n  return [elem for elem, freq in count.most_common(top_N)]"
    },
    {
        "instruction": "Create a simple Java program to find the average of three numbers.",
        "input": "7.5, 18.2, 12.1",
        "response": "public class AverageNumbers {\n    public static void main(String[] args) {\n        double num1 = 7.5;\n        double num2 = 18.2;\n        double num3 = 12.1;\n        double average = (num1 + num2 + num3) / 3;\n        System.out.println(\"Average of the three numbers is: \" + average);\n    }\n}",
        "output": "public class AverageNumbers {\n    public static void main(String[] args) {\n        double num1 = 7.5;\n        double num2 = 18.2;\n        double num3 = 12.1;\n        double average = (num1 + num2 + num3) / 3;\n        System.out.println(\"Average of the three numbers is: \" + average);\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes a string input and returns the number of vowels in the string.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "function countVowels(str) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i].toLowerCase())) {\n      count += 1;\n    }\n  }\n  return count;\n}\nconsole.log(countVowels(\"The quick brown fox jumps over the lazy dog\"));",
        "output": "function countVowels(str) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i].toLowerCase())) {\n      count += 1;\n    }\n  }\n  return count;\n}\nconsole.log(countVowels(\"The quick brown fox jumps over the lazy dog\"));"
    },
    {
        "instruction": "Implement a Python function that takes two strings and returns a boolean indicating whether they are anagrams of each other.",
        "input": "listen, silent",
        "response": "def are_anagrams(s1, s2):\n    return sorted(s1.lower()) == sorted(s2.lower())\n\ns1 = 'listen'\ns2 = 'silent'\nprint(are_anagrams(s1, s2))",
        "output": "def are_anagrams(s1, s2):\n    return sorted(s1.lower()) == sorted(s2.lower())\n\ns1 = 'listen'\ns2 = 'silent'\nprint(are_anagrams(s1, s2))"
    },
    {
        "instruction": "Detect and fix a syntax error in the given C++ code snippet.",
        "input": "#include<iostream>\nusing namespace std;\n\nvoid swapNums(int &x, int &y) {\n    int temp x;\n    temp = x;\n    x = y;\n    y = temp;\n}\n\nint main() {\n  int a = 5, b = 7;\n  swapNums(a, b);\n  cout << \"a: \" << a << \"\\n\" << \"b: \" << b << endl;\n  return 0;\n}",
        "response": "#include<iostream>\nusing namespace std;\n\nvoid swapNums(int &x, int &y) {\n    int temp = x; // Fixed syntax error by adding the assignment operator\n    temp = x;\n    x = y;\n    y = temp;\n}\n\nint main() {\n  int a = 5, b = 7;\n  swapNums(a, b);\n  cout << \"a: \" << a << \"\\n\" << \"b: \" << b << endl;\n  return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nvoid swapNums(int &x, int &y) {\n    int temp = x; // Fixed syntax error by adding the assignment operator\n    temp = x;\n    x = y;\n    y = temp;\n}\n\nint main() {\n  int a = 5, b = 7;\n  swapNums(a, b);\n  cout << \"a: \" << a << \"\\n\" << \"b: \" << b << endl;\n  return 0;\n}"
    },
    {
        "instruction": "Create a Java program that implements a simple text-based calculator which takes two numbers and an operator (+, -, *, /) as input and outputs the result.",
        "input": "",
        "response": "import java.util.Scanner;\n\npublic class TextBasedCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*':\n                result = num1 * num2;\n                break;\n            case '/':\n                result = num1 / num2;\n                break;\n            default:\n                System.out.println(\"Invalid operator!\");\n                return;\n        }\n\n        System.out.println(\"Result: \" + result);\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class TextBasedCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter first number: \");\n        double num1 = scanner.nextDouble();\n\n        System.out.print(\"Enter second number: \");\n        double num2 = scanner.nextDouble();\n\n        System.out.print(\"Enter operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        double result;\n\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*':\n                result = num1 * num2;\n                break;\n            case '/':\n                result = num1 / num2;\n                break;\n            default:\n                System.out.println(\"Invalid operator!\");\n                return;\n        }\n\n        System.out.println(\"Result: \" + result);\n    }\n}"
    },
    {
        "instruction": "How would you write a Python script to count the number of occurrences of a word in a given text file?",
        "input": "word = 'apple'\nfilename = 'example.txt'",
        "response": "def count_occurrences(word, filename):\n    with open(filename, 'r') as file:\n        content = file.read()\n        words = content.split()\n        occurences = words.count(word)\n    return occurences\n\n\nword_occurrences = count_occurrences(word, filename)\nprint(f'Number of occurrences of \"{word}\": {word_occurrences}')",
        "output": "def count_occurrences(word, filename):\n    with open(filename, 'r') as file:\n        content = file.read()\n        words = content.split()\n        occurences = words.count(word)\n    return occurences\n\n\nword_occurrences = count_occurrences(word, filename)\nprint(f'Number of occurrences of \"{word}\": {word_occurrences}')"
    },
    {
        "instruction": "Design a C++ function that reverses the order of words in a string without using any library functions.",
        "input": "std::string example_string = \"This is a test string\";",
        "response": "#include <iostream>\n#include <string>\n\nvoid reverseWords(std::string &str) {\n    size_t start = 0;\n    for (size_t end = str.find(' '); end != std::string::npos; end = str.find(' ', start)) {\n        std::reverse(str.begin() + start, str.begin() + end);\n        start = end + 1;\n    }\n    std::reverse(str.begin() + start, str.end());\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string example_string = \"This is a test string\";\n    reverseWords(example_string);\n    std::cout << \"Reversed words: \" << example_string << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nvoid reverseWords(std::string &str) {\n    size_t start = 0;\n    for (size_t end = str.find(' '); end != std::string::npos; end = str.find(' ', start)) {\n        std::reverse(str.begin() + start, str.begin() + end);\n        start = end + 1;\n    }\n    std::reverse(str.begin() + start, str.end());\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string example_string = \"This is a test string\";\n    reverseWords(example_string);\n    std::cout << \"Reversed words: \" << example_string << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script to check if a given string is a palindrome or not.",
        "input": "input_string='madam'",
        "response": "#!/bin/bash\n\ninput_string='madam'\n\nreversed_string=$(echo \"$input_string\" | rev)\n\nif [ \"$input_string\" == \"$reversed_string\" ]; then\n    echo \"$input_string is a palindrome\"\nelse\n    echo \"$input_string is not a palindrome\"\nfi",
        "output": "#!/bin/bash\n\ninput_string='madam'\n\nreversed_string=$(echo \"$input_string\" | rev)\n\nif [ \"$input_string\" == \"$reversed_string\" ]; then\n    echo \"$input_string is a palindrome\"\nelse\n    echo \"$input_string is not a palindrome\"\nfi"
    },
    {
        "instruction": "Create a Python function that returns the nth Fibonacci number using a recursive approach.",
        "input": "Find the 10th Fibonacci number.",
        "response": "def recursive_fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return recursive_fibonacci(n-1) + recursive_fibonacci(n-2)\n\nn = 10\nnth_fibonacci_number = recursive_fibonacci(n)\nprint('The 10th Fibonacci number is:', nth_fibonacci_number)",
        "output": "def recursive_fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return recursive_fibonacci(n-1) + recursive_fibonacci(n-2)\n\nn = 10\nnth_fibonacci_number = recursive_fibonacci(n)\nprint('The 10th Fibonacci number is:', nth_fibonacci_number)"
    },
    {
        "instruction": "What would be the output of this JavaScript code?",
        "input": "let items = ['a', 'b', 'c'];\nlet new_items = items.map((item) => item.toUpperCase());\nconsole.log(new_items);",
        "response": "The output of the given JavaScript code would be an array with the uppercase versions of the original array elements: ['A', 'B', 'C'].",
        "output": "The output of the given JavaScript code would be an array with the uppercase versions of the original array elements: ['A', 'B', 'C']."
    },
    {
        "instruction": "Write a C++ function to count the number of words in a given string.",
        "input": "C++ code to count words in the string 'Today is a sunny day.'",
        "response": "#include <iostream>\n#include <sstream>\n#include <string>\n\nint countWords(std::string str) {\n    std::istringstream iss(str);\n    int count = 0;\n    std::string word;\n    while (iss >> word) {\n        count++;\n    }\n    return count;\n}\n\nint main() {\n    std::string str = \"Today is a sunny day.\";\n    int wordCount = countWords(str);\n    std::cout << \"Number of words in the string: \" << wordCount << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <sstream>\n#include <string>\n\nint countWords(std::string str) {\n    std::istringstream iss(str);\n    int count = 0;\n    std::string word;\n    while (iss >> word) {\n        count++;\n    }\n    return count;\n}\n\nint main() {\n    std::string str = \"Today is a sunny day.\";\n    int wordCount = countWords(str);\n    std::cout << \"Number of words in the string: \" << wordCount << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How can I fix this HTML file to make it a valid document?",
        "input": "<!DOCTYPE html>\n<head>\n  <title>Invalid HTML</title>\n</head></body>\n<p>Hello, world!</p></body>",
        "response": "To fix the HTML file and make it a valid document, you need to add the opening <html> tag and correct the closing </body> tag. Here's the corrected HTML file:\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Invalid HTML</title>\n</head>\n<body>\n<p>Hello, world!</p>\n</body>\n</html>",
        "output": "To fix the HTML file and make it a valid document, you need to add the opening <html> tag and correct the closing </body> tag. Here's the corrected HTML file:\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Invalid HTML</title>\n</head>\n<body>\n<p>Hello, world!</p>\n</body>\n</html>"
    },
    {
        "instruction": "Write a Python function that takes two strings as input and returns the length of their longest common subsequence.",
        "input": "string1: 'ABCDGH'\nstring2: 'AEDFHR'",
        "response": "def longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]",
        "output": "def longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]"
    },
    {
        "instruction": "Inspect the following Java code and identify any logic errors or areas that can be improved for efficiency.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        int[] numList = {2, 5, 7, 1, 9};\n\n        System.out.println(getSecondLargest(numList));\n    }\n\n    public static int getSecondLargest(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        int secondMax = Integer.MIN_VALUE;\n\n        for (int num : nums) {\n            if (num > max) {\n                secondMax = max;\n                max = num;\n            } else if (num > secondMax && num != max) {\n                secondMax = num;\n            }\n        }\n\n        return secondMax;\n    }\n}",
        "response": "The code appears to have no logic errors and is generally efficient. A possible improvement could be to add input validation (e.g., checking for null and empty arrays).",
        "output": "The code appears to have no logic errors and is generally efficient. A possible improvement could be to add input validation (e.g., checking for null and empty arrays)."
    },
    {
        "instruction": "Please complete the following C++ code to implement a class with a constructor that initializes the radius of a circle and methods to compute the area and circumference.",
        "input": "class Circle {\npublic:\n    Circle(double r);\n\n    double area();\n\n    double circumference();\n\nprivate:\n    double radius;\n};",
        "response": "#include <cmath>\n\nconst double PI = 3.14159265358979323846;\n\nclass Circle {\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() {\n        return PI * radius * radius;\n    }\n\n    double circumference() {\n        return 2 * PI * radius;\n    }\n\nprivate:\n    double radius;\n};",
        "output": "#include <cmath>\n\nconst double PI = 3.14159265358979323846;\n\nclass Circle {\npublic:\n    Circle(double r) : radius(r) {}\n\n    double area() {\n        return PI * radius * radius;\n    }\n\n    double circumference() {\n        return 2 * PI * radius;\n    }\n\nprivate:\n    double radius;\n};"
    },
    {
        "instruction": "How would you fix the following JavaScript code to avoid unexpected behavior with the 'this' keyword inside the 'onClick' function?",
        "input": "var button = document.getElementById('myButton');\n\nbutton.addEventListener('click', function() {\n    this.classList.toggle('active');\n});",
        "response": "var button = document.getElementById('myButton');\n\nbutton.addEventListener('click', function() {\n    button.classList.toggle('active');\n});",
        "output": "var button = document.getElementById('myButton');\n\nbutton.addEventListener('click', function() {\n    button.classList.toggle('active');\n});"
    },
    {
        "instruction": "Write a JavaScript function to convert a string into title case, considering only the first letter of each word, and the remaining characters to be lowercase.",
        "input": "sample title: 'this is an example of title case'",
        "response": "function toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function(word) {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n}",
        "output": "function toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function(word) {\n    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();\n  });\n}"
    },
    {
        "instruction": "How can I create a Java function to calculate the number of days between two given dates?",
        "input": "Date 1: '2022-01-01'\nDate 2: '2022-01-15'",
        "response": "import java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\n\npublic long daysBetween(String date1, String date2) {\n  LocalDate d1 = LocalDate.parse(date1);\n  LocalDate d2 = LocalDate.parse(date2);\n\n  return ChronoUnit.DAYS.between(d1, d2);\n}",
        "output": "import java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\n\npublic long daysBetween(String date1, String date2) {\n  LocalDate d1 = LocalDate.parse(date1);\n  LocalDate d2 = LocalDate.parse(date2);\n\n  return ChronoUnit.DAYS.between(d1, d2);\n}"
    },
    {
        "instruction": "Provide a Python code snippet to implement a selection sort algorithm on a list of numeric input.",
        "input": "value: [5, 1, 4, 2, 8]",
        "response": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\nvalues = [5, 1, 4, 2, 8]\nselection_sort(values)",
        "output": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\nvalues = [5, 1, 4, 2, 8]\nselection_sort(values)"
    },
    {
        "instruction": "Create a C++ function to reverse the characters in a given string using recursion.",
        "input": "input_string: 'recursion'",
        "response": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string &str, int start, int end) {\n  if(start < end) {\n    char temp = str[start];\n    str[start] = str[end];\n    str[end] = temp;\n    reverse_string(str, start + 1, end - 1);\n  }\n}\n\nint main() {\n  std::string input_string = \"recursion\";\n  reverse_string(input_string, 0, input_string.length() - 1);\n  std::cout << \"Reversed string: \" << input_string << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nvoid reverse_string(std::string &str, int start, int end) {\n  if(start < end) {\n    char temp = str[start];\n    str[start] = str[end];\n    str[end] = temp;\n    reverse_string(str, start + 1, end - 1);\n  }\n}\n\nint main() {\n  std::string input_string = \"recursion\";\n  reverse_string(input_string, 0, input_string.length() - 1);\n  std::cout << \"Reversed string: \" << input_string << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Write a Python function that removes all vowels from a given string and returns the result.",
        "input": "The quick brown fox jumped over the lazy dog.",
        "response": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\nresult = remove_vowels('The quick brown fox jumped over the lazy dog.')\nprint(result)",
        "output": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\nresult = remove_vowels('The quick brown fox jumped over the lazy dog.')\nprint(result)"
    },
    {
        "instruction": "Explain how the following Java code snippet calculates the sum of all even numbers between 1 and 100.",
        "input": "int sum = 0;\nfor (int i = 2; i <= 100; i += 2) {\n    sum += i;\n}\nSystem.out.println(sum);",
        "response": "This Java code snippet initializes a variable 'sum' with the value 0. Then it uses a for loop to iterate through all even numbers between 1 and 100 (inclusive). The loop starts with the value 2 (the first even number), and increments the loop counter 'i' by 2 for each iteration. In each iteration, it adds the current value of 'i' (which is an even number) to the 'sum' variable. Finally, after the loop is finished, the value of 'sum' is printed, which is the sum of all even numbers between 1 and 100.",
        "output": "This Java code snippet initializes a variable 'sum' with the value 0. Then it uses a for loop to iterate through all even numbers between 1 and 100 (inclusive). The loop starts with the value 2 (the first even number), and increments the loop counter 'i' by 2 for each iteration. In each iteration, it adds the current value of 'i' (which is an even number) to the 'sum' variable. Finally, after the loop is finished, the value of 'sum' is printed, which is the sum of all even numbers between 1 and 100."
    },
    {
        "instruction": "Rewrite the following C# code block using a switch statement instead of if-else blocks.",
        "input": "string input = \"A\";\n\nif (input == \"A\")\n{\n    Console.WriteLine(\"Apple\");\n}\nelse if (input == \"B\")\n{\n    Console.WriteLine(\"Banana\");\n}\nelse if (input == \"C\")\n{\n    Console.WriteLine(\"Cherry\");\n}\nelse\n{\n    Console.WriteLine(\"Unknown\");\n}",
        "response": "string input = \"A\";\n\nswitch (input)\n{\n    case \"A\":\n        Console.WriteLine(\"Apple\");\n        break;\n    case \"B\":\n        Console.WriteLine(\"Banana\");\n        break;\n    case \"C\":\n        Console.WriteLine(\"Cherry\");\n        break;\n    default:\n        Console.WriteLine(\"Unknown\");\n        break;\n}",
        "output": "string input = \"A\";\n\nswitch (input)\n{\n    case \"A\":\n        Console.WriteLine(\"Apple\");\n        break;\n    case \"B\":\n        Console.WriteLine(\"Banana\");\n        break;\n    case \"C\":\n        Console.WriteLine(\"Cherry\");\n        break;\n    default:\n        Console.WriteLine(\"Unknown\");\n        break;\n}"
    },
    {
        "instruction": "Fix the following C++ code snippet to correctly populate the vector with the even numbers between 10 and 20.",
        "input": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> even_nums;\n    for (int i = 10; i <= 20; i += 1) {\n        if (i % 2 == 0) {\n            even_nums.push_back(i);\n        }\n    }\n    return 0;\n}",
        "response": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> even_nums;\n    for (int i = 10; i <= 20; i += 2) {\n        even_nums.push_back(i);\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> even_nums;\n    for (int i = 10; i <= 20; i += 2) {\n        even_nums.push_back(i);\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Write a C function to calculate the length of a null-terminated string without using built-in functions like strlen.",
        "input": "",
        "response": "int string_length(char *str) {\n  int count = 0;\n  while (*str != '\\0') {\n    count++;\n    str++;\n  }\n  return count;\n}",
        "output": "int string_length(char *str) {\n  int count = 0;\n  while (*str != '\\0') {\n    count++;\n    str++;\n  }\n  return count;\n}"
    },
    {
        "instruction": "How would you refactor an existing JavaScript function to make it more modular by breaking it down into smaller, reusable functions?",
        "input": "function processData(input) {\n  let evenNumbers = [];\n  for (let num of input) {\n    if (num % 2 === 0) {\n      evenNumbers.push(num);\n    }\n  }\n  let sum = evenNumbers.reduce((acc, cur) => acc + cur, 0);\n  return sum;\n}",
        "response": "function filterEvenNumbers(numbers) {\n  return numbers.filter(num => num % 2 === 0);\n}\n\nfunction sumNumbers(numbers) {\n  return numbers.reduce((acc, cur) => acc + cur, 0);\n}\n\nfunction processData(input) {\n  let evenNumbers = filterEvenNumbers(input);\n  let sum = sumNumbers(evenNumbers);\n  return sum;\n}",
        "output": "function filterEvenNumbers(numbers) {\n  return numbers.filter(num => num % 2 === 0);\n}\n\nfunction sumNumbers(numbers) {\n  return numbers.reduce((acc, cur) => acc + cur, 0);\n}\n\nfunction processData(input) {\n  let evenNumbers = filterEvenNumbers(input);\n  let sum = sumNumbers(evenNumbers);\n  return sum;\n}"
    },
    {
        "instruction": "Create a Python script that reads a CSV file and prints the total number of rows and the sum of an integer column called 'price' using the csv module.",
        "input": "example.csv\n\"id\",\"name\",\"price\"\n1,\"Product A\",25\n2,\"Product B\",45\n3,\"Product C\",10",
        "response": "import csv\n\nfilename = \"example.csv\"\n\ndef count_rows_and_sum_price(filename):\n    with open(filename, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        row_count = 0\n        total_price = 0\n        for row in reader:\n            row_count += 1\n            total_price += int(row['price'])\n    return row_count, total_price\n\nrow_count, total_price = count_rows_and_sum_price(filename)\nprint(f\"Total rows: {row_count}\")\nprint(f\"Sum of price: {total_price}\")",
        "output": "import csv\n\nfilename = \"example.csv\"\n\ndef count_rows_and_sum_price(filename):\n    with open(filename, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        row_count = 0\n        total_price = 0\n        for row in reader:\n            row_count += 1\n            total_price += int(row['price'])\n    return row_count, total_price\n\nrow_count, total_price = count_rows_and_sum_price(filename)\nprint(f\"Total rows: {row_count}\")\nprint(f\"Sum of price: {total_price}\")"
    },
    {
        "instruction": "Given an API endpoint for fetching user data (https://api.example.com/v1/users/{user_id}), write a function in JavaScript using the Fetch API that takes 'user_id' as a parameter and returns the user's first and last name concatenated.",
        "input": "",
        "response": "async function getUserFullName(user_id) {\n  const url = `https://api.example.com/v1/users/${user_id}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  const fullName = `${data.first_name} ${data.last_name}`;\n  return fullName;\n}",
        "output": "async function getUserFullName(user_id) {\n  const url = `https://api.example.com/v1/users/${user_id}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  const fullName = `${data.first_name} ${data.last_name}`;\n  return fullName;\n}"
    },
    {
        "instruction": "Create a Java function that calculates the Fibonacci sequence up to a specified number of elements.",
        "input": "",
        "response": "public static List<Integer> fibonacci(int elements) {\n    List<Integer> sequence = new ArrayList<>();\n    if (elements <= 0) return sequence;\n    sequence.add(1);\n    if (elements == 1) return sequence;\n    sequence.add(1);\n    for (int i = 2; i < elements; i++) {\n        sequence.add(sequence.get(i-1) + sequence.get(i-2));\n    }\n    return sequence;\n}",
        "output": "public static List<Integer> fibonacci(int elements) {\n    List<Integer> sequence = new ArrayList<>();\n    if (elements <= 0) return sequence;\n    sequence.add(1);\n    if (elements == 1) return sequence;\n    sequence.add(1);\n    for (int i = 2; i < elements; i++) {\n        sequence.add(sequence.get(i-1) + sequence.get(i-2));\n    }\n    return sequence;\n}"
    },
    {
        "instruction": "How can I replace all whitespaces and tabs in a JavaScript string with a single space?",
        "input": "",
        "response": "function replaceWhitespacesAndTabs(str) {\n  return str.replace(/\\s+/g, ' ');\n}",
        "output": "function replaceWhitespacesAndTabs(str) {\n  return str.replace(/\\s+/g, ' ');\n}"
    },
    {
        "instruction": "Examine the following PHP code and fix any syntax errors that you find.",
        "input": "<?php\n\n$start = $_GET['start']\n$end = $_GET['end']\n\n$sum = 0;\nfor ($i = $start; $i <= $end; $i++) {\n    sum += $i;\n}\n\necho $sum;\n\n?>",
        "response": "<?php\n\n$start = $_GET['start'];\n$end = $_GET['end'];\n\n$sum = 0;\nfor ($i = $start; $i <= $end; $i++) {\n    $sum += $i;\n}\n\necho $sum;\n\n?>",
        "output": "<?php\n\n$start = $_GET['start'];\n$end = $_GET['end'];\n\n$sum = 0;\nfor ($i = $start; $i <= $end; $i++) {\n    $sum += $i;\n}\n\necho $sum;\n\n?>"
    },
    {
        "instruction": "Provide a C++ function that receives a vector of integers and returns the frequency of each element in a map.",
        "input": "",
        "response": "#include <vector>\n#include <map>\n\nstd::map<int, int> frequency(const std::vector<int>& nums) {\n    std::map<int, int> freqs;\n    for (int num : nums) {\n        freqs[num]++;\n    }\n    return freqs;\n}",
        "output": "#include <vector>\n#include <map>\n\nstd::map<int, int> frequency(const std::vector<int>& nums) {\n    std::map<int, int> freqs;\n    for (int num : nums) {\n        freqs[num]++;\n    }\n    return freqs;\n}"
    },
    {
        "instruction": "Create a JavaScript function that returns the sum of all integers inside an array.",
        "input": "",
        "response": "function sumOfArray(arr) {\n  return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}",
        "output": "function sumOfArray(arr) {\n  return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}"
    },
    {
        "instruction": "Implement a C++ function that accepts two strings, and returns true if they're anagrams of each other and false otherwise.",
        "input": "",
        "response": "#include <algorithm>\n#include <string>\n\nbool areAnagrams(std::string s1, std::string s2) {\n  std::sort(s1.begin(), s1.end());\n  std::sort(s2.begin(), s2.end());\n  return s1 == s2;\n}",
        "output": "#include <algorithm>\n#include <string>\n\nbool areAnagrams(std::string s1, std::string s2) {\n  std::sort(s1.begin(), s1.end());\n  std::sort(s2.begin(), s2.end());\n  return s1 == s2;\n}"
    },
    {
        "instruction": "Write a Python program that reads a file and counts the occurrences of each word in the file. Print the top 3 most common words and their counts.",
        "input": "",
        "response": "import collections\n\nwith open('file.txt', 'r') as file:\n    words = file.read().split()\n    word_counts = collections.Counter(words)\n    top_3_words = word_counts.most_common(3)\n\nprint(top_3_words)",
        "output": "import collections\n\nwith open('file.txt', 'r') as file:\n    words = file.read().split()\n    word_counts = collections.Counter(words)\n    top_3_words = word_counts.most_common(3)\n\nprint(top_3_words)"
    },
    {
        "instruction": "How could one create a file in Linux shell with the filename 'example.txt' and write 'Hello world!' to it?",
        "input": "",
        "response": "echo 'Hello world!' > example.txt",
        "output": "echo 'Hello world!' > example.txt"
    },
    {
        "instruction": "Create a Java method that calculates the sum of all even numbers in an array.",
        "input": "int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};",
        "response": "public int sumEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "What will be the output of the following JavaScript code snippet?",
        "input": "function add(x, y) {\n    return x + y;\n}\nconsole.log(typeof add());",
        "response": "Output: 'NaN'",
        "output": "Output: 'NaN'"
    },
    {
        "instruction": "Fix the logic error in this C++ function that is intended to find the largest element in an array.",
        "input": "#include <iostream>\nusing namespace std;\n\nint findLargestElement(int arr[], int size) {\n    int max = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    cout << \"Largest Element: \" << findLargestElement(arr, size) << endl;\n    return 0;\n}",
        "response": "#include <iostream>\nusing namespace std;\n\nint findLargestElement(int arr[], int size) {\n    int max = arr[0]; // Initialize max with the first element\n    for (int i = 1; i < size; i++) { // Start loop from 1\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    cout << \"Largest Element: \" << findLargestElement(arr, size) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint findLargestElement(int arr[], int size) {\n    int max = arr[0]; // Initialize max with the first element\n    for (int i = 1; i < size; i++) { // Start loop from 1\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    cout << \"Largest Element: \" << findLargestElement(arr, size) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Translate the given Python code that finds the factorial of a number into an equivalent shell script.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 5\nprint(factorial(n))",
        "response": "#!/bin/bash\n\nfactorial() {\n    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        local temp=$1\n        local decrement=$((temp-1))\n        local result=$(factorial $decrement)\n        echo $((temp * result))\n    fi\n}\n\nn=5\nfactorial $n",
        "output": "#!/bin/bash\n\nfactorial() {\n    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        local temp=$1\n        local decrement=$((temp-1))\n        local result=$(factorial $decrement)\n        echo $((temp * result))\n    fi\n}\n\nn=5\nfactorial $n"
    },
    {
        "instruction": "Create a JavaScript function that takes an array and finds the sum of its elements.",
        "input": "",
        "response": "function sumArray(arr) {\n  return arr.reduce((acc, num) => acc + num, 0);\n}",
        "output": "function sumArray(arr) {\n  return arr.reduce((acc, num) => acc + num, 0);\n}"
    },
    {
        "instruction": "In Java, implement a simple method that takes an integer n and returns the nth Fibonacci number.",
        "input": "",
        "response": "public int getFibonacci(int n) {\n  if (n <= 0) {\n    return 0;\n  }\n  int[] fib = new int[n + 1];\n  fib[0] = 0;\n  fib[1] = 1;\n  for (int i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n}",
        "output": "public int getFibonacci(int n) {\n  if (n <= 0) {\n    return 0;\n  }\n  int[] fib = new int[n + 1];\n  fib[0] = 0;\n  fib[1] = 1;\n  for (int i = 2; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n}"
    },
    {
        "instruction": "How would you write a C program to print a Pascal's Triangle?",
        "input": "",
        "response": "#include <stdio.h>\n\nint main() {\n  int rows, coef = 1;\n  printf(\"Enter the number of rows: \");\n  scanf(\"%d\", &rows);\n\n  for (int i = 0; i < rows; i++) {\n    for (int space = 1; space <= rows - i; space++)\n      printf(\"  \");\n\n    for (int j = 0; j <= i; j++) {\n      if (j == 0 || i == 0)\n        coef = 1;\n      else\n        coef = coef * (i - j + 1) / j;\n\n      printf(\"%4d\", coef);\n    }\n\n    printf(\"\\n\");\n  }\n\n  return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n  int rows, coef = 1;\n  printf(\"Enter the number of rows: \");\n  scanf(\"%d\", &rows);\n\n  for (int i = 0; i < rows; i++) {\n    for (int space = 1; space <= rows - i; space++)\n      printf(\"  \");\n\n    for (int j = 0; j <= i; j++) {\n      if (j == 0 || i == 0)\n        coef = 1;\n      else\n        coef = coef * (i - j + 1) / j;\n\n      printf(\"%4d\", coef);\n    }\n\n    printf(\"\\n\");\n  }\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a shell script that takes a filename as an input and outputs the file's line count.",
        "input": "",
        "response": "#!/bin/bash\n\nif [ \"$#\" -ne 1 ]; then\n  echo \"Usage: $0 <filename>\"\n  exit 1\nfi\n\nfilename=$1\nline_count=$(wc -l <\"$filename\")\necho \"Line count: $line_count\"",
        "output": "#!/bin/bash\n\nif [ \"$#\" -ne 1 ]; then\n  echo \"Usage: $0 <filename>\"\n  exit 1\nfi\n\nfilename=$1\nline_count=$(wc -l <\"$filename\")\necho \"Line count: $line_count\""
    },
    {
        "instruction": "Explain the functionality of this JavaScript function and provide an example of how to use it.",
        "input": "function mergeObjects(obj1, obj2) {\n  return {...obj1, ...obj2};\n}",
        "response": "This JavaScript function, `mergeObjects`, takes two objects (obj1 and obj2) as input parameters and returns a new object containing the properties of both input objects. If there are any duplicate properties, the properties of `obj2` will overwrite those of `obj1`. This is achieved using the spread syntax (`...`) for objects.\n\nExample usage:\n```javascript\nconst obj1 = {a: 1, b: 2};\nconst obj2 = {b: 3, c: 4};\nconst result = mergeObjects(obj1, obj2);\nconsole.log(result); // Output: {a: 1, b: 3, c: 4}\n```",
        "output": "This JavaScript function, `mergeObjects`, takes two objects (obj1 and obj2) as input parameters and returns a new object containing the properties of both input objects. If there are any duplicate properties, the properties of `obj2` will overwrite those of `obj1`. This is achieved using the spread syntax (`...`) for objects.\n\nExample usage:\n```javascript\nconst obj1 = {a: 1, b: 2};\nconst obj2 = {b: 3, c: 4};\nconst result = mergeObjects(obj1, obj2);\nconsole.log(result); // Output: {a: 1, b: 3, c: 4}\n```"
    },
    {
        "instruction": "Rewrite the following C++ code snippet to remove any syntax errors.",
        "input": "#include <iostream>\n\nint main() {\n  int i number = 0;\n  std::cout ADD(1, 2)<< std::endl;\n\n  return 0;\n}",
        "response": "#include <iostream>\n\nint ADD(int a, int b) {\n  return a + b;\n}\n\nint main() {\n  int number = 0;\n  number = ADD(1, 2);\n  std::cout << number << std::endl;\n\n  return 0;\n}",
        "output": "#include <iostream>\n\nint ADD(int a, int b) {\n  return a + b;\n}\n\nint main() {\n  int number = 0;\n  number = ADD(1, 2);\n  std::cout << number << std::endl;\n\n  return 0;\n}"
    },
    {
        "instruction": "Given a Python script that calculates the factorial of an input number, determine its expected output.",
        "input": "def factorial(n):\n    return 1 if n == 0 else n * factorial(n - 1)\n\nprint(factorial(5))",
        "response": "The given Python script computes the factorial of a number using a recursive function called `factorial`. The expected output for the provided input (5) would be the factorial of 5, which is 5 * 4 * 3 * 2 * 1 = 120.",
        "output": "The given Python script computes the factorial of a number using a recursive function called `factorial`. The expected output for the provided input (5) would be the factorial of 5, which is 5 * 4 * 3 * 2 * 1 = 120."
    },
    {
        "instruction": "Create a Shell script that takes a file as an input and returns the number of lines containing the word 'error'.",
        "input": "example.log\n-----\nInfo: Starting process...\nError: Connection failed\nInfo: Retrying...\nError: Connection failed again\nInfo: Done processing\n-----",
        "response": "#!/bin/sh\n\ncount_errors() {\n  file=$1\n  grep -i 'error' \"$file\" | wc -l\n}\n\ninput_file='example.log'\nerror_count=$(count_errors \"$input_file\")\necho \"Number of lines containing 'error': $error_count\"",
        "output": "#!/bin/sh\n\ncount_errors() {\n  file=$1\n  grep -i 'error' \"$file\" | wc -l\n}\n\ninput_file='example.log'\nerror_count=$(count_errors \"$input_file\")\necho \"Number of lines containing 'error': $error_count\""
    },
    {
        "instruction": "Create a Java function that calculates the area of a circle given the radius as input.",
        "input": "8.0",
        "response": "public class CircleArea {\n    public static double area(double radius) {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public static void main(String[] args) {\n        double radius = 8.0;\n        System.out.println('Area: ' + area(radius));\n    }\n}",
        "output": "public class CircleArea {\n    public static double area(double radius) {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public static void main(String[] args) {\n        double radius = 8.0;\n        System.out.println('Area: ' + area(radius));\n    }\n}"
    },
    {
        "instruction": "What is the expected output of the following JavaScript code snippet?",
        "input": "function add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(3, 5));",
        "response": "The expected output of the code snippet is `8`. The `add` function is called with the numbers `3` and `5` as arguments and returns their sum, which is then logged to the console.",
        "output": "The expected output of the code snippet is `8`. The `add` function is called with the numbers `3` and `5` as arguments and returns their sum, which is then logged to the console."
    },
    {
        "instruction": "Write a C++ program that takes an integer input from the user and displays if the number is prime or not.",
        "input": "13",
        "response": "#include<iostream>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int number;\n    cout << 'Enter a number: ';\n    cin >> number;\n\n    if (isPrime(number))\n        cout << 'The number is prime.';\n    else\n        cout << 'The number is not prime.';\n\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int number;\n    cout << 'Enter a number: ';\n    cin >> number;\n\n    if (isPrime(number))\n        cout << 'The number is prime.';\n    else\n        cout << 'The number is not prime.';\n\n    return 0;\n}"
    },
    {
        "instruction": "Debug and fix the following Python code that intends to reverse a given string.",
        "input": "s = 'hello world'\npritn(s[::-1])",
        "response": "The corrected code should be:\n\ns = 'hello world'\nprint(s[::-1])\n\nThe issue was with the misspelled `print` function as `pritn`. Replacing it with the correct function name resolves the issue.",
        "output": "The corrected code should be:\n\ns = 'hello world'\nprint(s[::-1])\n\nThe issue was with the misspelled `print` function as `pritn`. Replacing it with the correct function name resolves the issue."
    },
    {
        "instruction": "Given the JavaScript code snippet, implement the function to find the nth Fibonacci number recursively.",
        "input": "function fibonacci(n) {\n  // Your code here\n}",
        "response": "function fibonacci(n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}",
        "output": "function fibonacci(n) {\n  if (n <= 1) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}"
    },
    {
        "instruction": "Rewrite the given C++ code using a range-based for loop.",
        "input": "#include <iostream>\n#include <vector>\n\nint main() {\n  std::vector<int> nums = {1, 2, 3, 4, 5};\n  for (int i = 0; i < nums.size(); i++) {\n    std::cout << nums[i] << \" \";\n  }\n\n  return 0;\n}",
        "response": "#include <iostream>\n#include <vector>\n\nint main() {\n  std::vector<int> nums = {1, 2, 3, 4, 5};\n  for (int num : nums) {\n    std::cout << num << \" \";\n  }\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint main() {\n  std::vector<int> nums = {1, 2, 3, 4, 5};\n  for (int num : nums) {\n    std::cout << num << \" \";\n  }\n\n  return 0;\n}"
    },
    {
        "instruction": "What is the expected output of this Java code snippet?",
        "input": "public class HelloWorld {\n\n  public static void main(String[] args) {\n    System.out.println(\"Hello, world!\");\n  }\n}",
        "response": "Hello, world!",
        "output": "Hello, world!"
    },
    {
        "instruction": "Create a Python function that takes a string, removes all vowels from it, and returns the resulting string.",
        "input": "",
        "response": "def remove_vowels(str):\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in str if char not in vowels])\n    return result",
        "output": "def remove_vowels(str):\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in str if char not in vowels])\n    return result"
    },
    {
        "instruction": "Create a Python function that calculates the number of words in a given text.",
        "input": "In a hole in the ground there lived a hobbit.",
        "response": "def count_words(text):\n    words = text.split()  # Split the text into words\n    return len(words)  # Calculate the number of words\n\ntext = 'In a hole in the ground there lived a hobbit.'\nnum_words = count_words(text)\nprint(f'The text has {num_words} words.')",
        "output": "def count_words(text):\n    words = text.split()  # Split the text into words\n    return len(words)  # Calculate the number of words\n\ntext = 'In a hole in the ground there lived a hobbit.'\nnum_words = count_words(text)\nprint(f'The text has {num_words} words.')"
    },
    {
        "instruction": "What is wrong with the following Java code and how would you fix it?",
        "input": "public class HelloWorld {\n    public static void Main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "response": "The problem with the code is that Java is case-sensitive, and the main method should be in lowercase. Here's the corrected version:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "output": "The problem with the code is that Java is case-sensitive, and the main method should be in lowercase. Here's the corrected version:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Convert the following JavaScript async function to use Promise instead of async/await:",
        "input": "async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error: ', error);\n    }\n}",
        "response": "function fetchData(url) {\n    return fetch(url)\n        .then(response => response.json())\n        .then(data => console.log(data))\n        .catch(error => console.error('Error: ', error));\n}",
        "output": "function fetchData(url) {\n    return fetch(url)\n        .then(response => response.json())\n        .then(data => console.log(data))\n        .catch(error => console.error('Error: ', error));\n}"
    },
    {
        "instruction": "Write a shell script that prints odd numbers from 1 to 20, one number per line.",
        "input": "",
        "response": "#!/bin/bash\n\nfor i in {1..20}; do\n    if [ $((i % 2)) -ne 0 ]; then\n        echo $i\n    fi\ndone",
        "output": "#!/bin/bash\n\nfor i in {1..20}; do\n    if [ $((i % 2)) -ne 0 ]; then\n        echo $i\n    fi\ndone"
    },
    {
        "instruction": "Implement a Python function to find the largest prime factor of a given number.",
        "input": "13195",
        "response": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nresult = largest_prime_factor(13195)\nprint(result)",
        "output": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nresult = largest_prime_factor(13195)\nprint(result)"
    },
    {
        "instruction": "Write a Java program that checks if a given string is a palindrome or not. Ignore non-letter characters and case sensitivity.",
        "input": "A man, a plan, a canal: Panama",
        "response": "public class PalindromeCheck {\n    public static boolean isPalindrome(String s) {\n        String filtered = s.replaceAll(\"\\W\", \"\").toLowerCase();\n        StringBuilder reversed = new StringBuilder(filtered).reverse();\n        return filtered.equals(reversed.toString());\n    }\n    public static void main(String[] args) {\n        String input = \"A man, a plan, a canal: Panama\";\n        System.out.println(isPalindrome(input));\n    }\n}",
        "output": "public class PalindromeCheck {\n    public static boolean isPalindrome(String s) {\n        String filtered = s.replaceAll(\"\\W\", \"\").toLowerCase();\n        StringBuilder reversed = new StringBuilder(filtered).reverse();\n        return filtered.equals(reversed.toString());\n    }\n    public static void main(String[] args) {\n        String input = \"A man, a plan, a canal: Panama\";\n        System.out.println(isPalindrome(input));\n    }\n}"
    },
    {
        "instruction": "Can you help to fix this C++ code so it correctly reads a CSV file with lines of integers and prints the sum of each line?",
        "input": "#include <iostream>\n#include <fstream>\n#include <sstream>\n\nusing namespace std;\n\nint main() {\n    ifstream file(\"input.csv\");\n    string line;\n\n    while (getline(file, line)) {\n        istringstream ss(line);\n    }\n}\n",
        "response": "#include <iostream>\n#include <fstream>\n#include <sstream>\n\nusing namespace std;\n\nint main() {\n    ifstream file(\"input.csv\");\n    string line;\n\n    while (getline(file, line)) {\n        istringstream ss(line);\n        int sum = 0, number;\n        while (ss >> number) {\n            sum += number;\n            if (ss.peek() == ',') ss.ignore();\n        }\n        cout << sum << endl;\n    }\n    return 0;\n}\n",
        "output": "#include <iostream>\n#include <fstream>\n#include <sstream>\n\nusing namespace std;\n\nint main() {\n    ifstream file(\"input.csv\");\n    string line;\n\n    while (getline(file, line)) {\n        istringstream ss(line);\n        int sum = 0, number;\n        while (ss >> number) {\n            sum += number;\n            if (ss.peek() == ',') ss.ignore();\n        }\n        cout << sum << endl;\n    }\n    return 0;\n}\n"
    },
    {
        "instruction": "Write a Bash script that counts the number of files in a directory with a specific extension.",
        "input": "txt",
        "response": "#!/bin/bash\n\nextension=$1\ncount=0\n\nfor file in *.$extension; do\n    [ -e \"$file\" ] || continue\n    count=$((count + 1))\ndone\n\necho \"$count files with .$extension extension\"\n",
        "output": "#!/bin/bash\n\nextension=$1\ncount=0\n\nfor file in *.$extension; do\n    [ -e \"$file\" ] || continue\n    count=$((count + 1))\ndone\n\necho \"$count files with .$extension extension\"\n"
    },
    {
        "instruction": "Write a Python function that accepts a Unix timestamp and converts it to a human-readable datetime string.",
        "input": "1633049473",
        "response": "from datetime import datetime\n\ndef timestamp_to_datetime_str(unix_timestamp):\n    return datetime.fromtimestamp(unix_timestamp).strftime('%Y-%m-%d %H:%M:%S')\n\n# Example usage\nprint(timestamp_to_datetime_str(1633049473))",
        "output": "from datetime import datetime\n\ndef timestamp_to_datetime_str(unix_timestamp):\n    return datetime.fromtimestamp(unix_timestamp).strftime('%Y-%m-%d %H:%M:%S')\n\n# Example usage\nprint(timestamp_to_datetime_str(1633049473))"
    },
    {
        "instruction": "Determine the error in this Java code snippet, and provide a rewritten version of the problematic code.",
        "input": "public class Numbers {\n    public static void main(String[] args) {\n         int sum = 0;\n         int[] numbers = {1, 2, 3, 4, 5};\n\n         for (int i = 1; i <= numbers.length; i++) {\n           sum += numbers[i];\n         }\n\n         System.out.println(\"Sum: \" + sum);\n    }\n}",
        "response": "The error is caused by accessing the array with an index out of its bounds. Since array indexing starts at 0, you should use 'i < numbers.length' instead of 'i <= numbers.length' in the loop condition, and then access the array using 'numbers[i-1]'. Revised code:\n\npublic class Numbers {\n    public static void main(String[] args) {\n         int sum = 0;\n         int[] numbers = {1, 2, 3, 4, 5};\n\n         for (int i = 1; i < numbers.length + 1; i++) {\n           sum += numbers[i - 1];\n         }\n\n         System.out.println(\"Sum: \" + sum);\n    }\n}",
        "output": "The error is caused by accessing the array with an index out of its bounds. Since array indexing starts at 0, you should use 'i < numbers.length' instead of 'i <= numbers.length' in the loop condition, and then access the array using 'numbers[i-1]'. Revised code:\n\npublic class Numbers {\n    public static void main(String[] args) {\n         int sum = 0;\n         int[] numbers = {1, 2, 3, 4, 5};\n\n         for (int i = 1; i < numbers.length + 1; i++) {\n           sum += numbers[i - 1];\n         }\n\n         System.out.println(\"Sum: \" + sum);\n    }\n}"
    },
    {
        "instruction": "Create a simple Bash script that takes a directory path as an argument and prints the number of files in that directory.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\n# Usage: ./count_files.sh /path/to/directory\ndir_path=$1\nnum_files=$(find \"$dir_path\" -maxdepth 1 -type f | wc -l)\necho \"There are $num_files files in the directory $dir_path\"",
        "output": "#!/bin/bash\n\n# Usage: ./count_files.sh /path/to/directory\ndir_path=$1\nnum_files=$(find \"$dir_path\" -maxdepth 1 -type f | wc -l)\necho \"There are $num_files files in the directory $dir_path\""
    },
    {
        "instruction": "How can I convert a string with comma-separated values to an array of integers in JavaScript?",
        "input": "5,7,8,15,42",
        "response": "To convert a comma-separated string to an array of integers in JavaScript, you can use the `split()` method to create an array of strings and then use `map()` to convert the strings to integers:\n\nconst input_str = '5,7,8,15,42';\nconst int_array = input_str.split(',').map(Number);\nconsole.log(int_array);",
        "output": "To convert a comma-separated string to an array of integers in JavaScript, you can use the `split()` method to create an array of strings and then use `map()` to convert the strings to integers:\n\nconst input_str = '5,7,8,15,42';\nconst int_array = input_str.split(',').map(Number);\nconsole.log(int_array);"
    },
    {
        "instruction": "Create a JavaScript function that returns the absolute difference between two numbers.",
        "input": "",
        "response": "function absoluteDifference(a, b) {\n    return Math.abs(a - b);\n}",
        "output": "function absoluteDifference(a, b) {\n    return Math.abs(a - b);\n}"
    },
    {
        "instruction": "Given the following C++ code snippet, identify and fix the syntax errors.",
        "input": "include <iostream>\n\nint_main() {\n    int num1 = 5;\n    int num2 = 3;\n\n    cout << num1 + num2 << endl\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    int num1 = 5;\n    int num2 = 3;\n\n    std::cout << num1 + num2 << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int num1 = 5;\n    int num2 = 3;\n\n    std::cout << num1 + num2 << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function to count how many times a word appears in a given string, ignoring case sensitivity.",
        "input": "",
        "response": "def count_word_in_string(s, word):\n    s_lower = s.lower()\n    word_lower = word.lower()\n    words = s_lower.split()\n    return words.count(word_lower)",
        "output": "def count_word_in_string(s, word):\n    s_lower = s.lower()\n    word_lower = word.lower()\n    words = s_lower.split()\n    return words.count(word_lower)"
    },
    {
        "instruction": "Convert the following Python code to use a list comprehension instead of a for loop.",
        "input": "squared_numbers = []\nfor num in range(10):\n    squared_numbers.append(num ** 2)",
        "response": "squared_numbers = [num ** 2 for num in range(10)]",
        "output": "squared_numbers = [num ** 2 for num in range(10)]"
    },
    {
        "instruction": "Create a Python function to calculate the Perimeter of a rectangle given its length and width.",
        "input": "Length: 10, Width: 5",
        "response": "def rectangle_perimeter(length, width):\n    perimeter = 2 * (length + width)\n    return perimeter\n\nperimeter_result = rectangle_perimeter(10, 5)\nprint(perimeter_result)",
        "output": "def rectangle_perimeter(length, width):\n    perimeter = 2 * (length + width)\n    return perimeter\n\nperimeter_result = rectangle_perimeter(10, 5)\nprint(perimeter_result)"
    },
    {
        "instruction": "How would you implement a Java function that reverses a given string?",
        "input": "Input string: JavaProgramming",
        "response": "public String reverseString(String input) {\n    StringBuilder reversedString = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversedString.append(input.charAt(i));\n    }\n    return reversedString.toString();\n}\n\nString input = \"JavaProgramming\";\nString reversed = reverseString(input);\nSystem.out.println(reversed);",
        "output": "public String reverseString(String input) {\n    StringBuilder reversedString = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversedString.append(input.charAt(i));\n    }\n    return reversedString.toString();\n}\n\nString input = \"JavaProgramming\";\nString reversed = reverseString(input);\nSystem.out.println(reversed);"
    },
    {
        "instruction": "Write a C# function that accepts a list of integers and returns the product of all even numbers in the list.",
        "input": "List of integers: [1, 2, 3, 4, 5, 6]",
        "response": "public int EvenProduct(List<int> inputList) {\n    int product = 1;\n    foreach(int i in inputList) {\n        if (i % 2 == 0) {\n            product *= i;\n        }\n    }\n    return product;\n}\n\nList<int> inputList = new List<int>() {1, 2, 3, 4, 5, 6};\nint evenProduct = EvenProduct(inputList);\nConsole.WriteLine(evenProduct);",
        "output": "public int EvenProduct(List<int> inputList) {\n    int product = 1;\n    foreach(int i in inputList) {\n        if (i % 2 == 0) {\n            product *= i;\n        }\n    }\n    return product;\n}\n\nList<int> inputList = new List<int>() {1, 2, 3, 4, 5, 6};\nint evenProduct = EvenProduct(inputList);\nConsole.WriteLine(evenProduct);"
    },
    {
        "instruction": "Determine if a given sequence of numbers is a valid arithmetic progression in JavaScript.",
        "input": "Sequence: [3, 6, 9, 12, 15]",
        "response": "function isArithmeticProgression(sequence) {\n    const difference = sequence[1] - sequence[0];\n\n    for (let i = 1; i < sequence.length; i++) {\n        if (sequence[i] - sequence[i - 1] !== difference) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst sequence = [3, 6, 9, 12, 15];\nconst validProgression = isArithmeticProgression(sequence);\nconsole.log(validProgression);",
        "output": "function isArithmeticProgression(sequence) {\n    const difference = sequence[1] - sequence[0];\n\n    for (let i = 1; i < sequence.length; i++) {\n        if (sequence[i] - sequence[i - 1] !== difference) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst sequence = [3, 6, 9, 12, 15];\nconst validProgression = isArithmeticProgression(sequence);\nconsole.log(validProgression);"
    },
    {
        "instruction": "Create a Java function that takes a string as input and returns the count of vowels in the string.",
        "input": "",
        "response": "public int countVowels(String input) {\n    int vowelCount = 0;\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}",
        "output": "public int countVowels(String input) {\n    int vowelCount = 0;\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}"
    },
    {
        "instruction": "Given a C++ code snippet, identify the syntax errors and correct them.",
        "input": "#include <iostream>\n\nint main() {\n    std::cout >> \"Hello, World!\" << std::endl\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Bash script to iterate through numbers 1 to 10 in reverse order and display them.",
        "input": "",
        "response": "#!/bin/bash\n\nfor ((i = 10; i >= 1; i--)); do\n  echo $i;\ndone",
        "output": "#!/bin/bash\n\nfor ((i = 10; i >= 1; i--)); do\n  echo $i;\ndone"
    },
    {
        "instruction": "Create a Python function that calculates the factorial of a non-negative integer recursively.",
        "input": "",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "instruction": "What would be the output of the following JavaScript code snippet? ``console.log((2**3)**2 + 3*3 - 1);``",
        "input": "",
        "response": "The output of this JavaScript code would be 193.",
        "output": "The output of this JavaScript code would be 193."
    },
    {
        "instruction": "Translate the following Python code to Java:``points = [{'x': 1, 'y': 2}, {'x': 3, 'y': 4}]; is_below_line = lambda point, m, b: point['y'] < m * point['x'] + b; result = [is_below_line(point, 2, 1) for point in points]``.",
        "input": "",
        "response": "import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        List<Map<String, Integer>> points = new ArrayList<>();\n\n        Map<String, Integer> point1 = new HashMap<>();\n        point1.put(\"x\", 1);\n        point1.put(\"y\", 2);\n        points.add(point1);\n\n        Map<String, Integer> point2 = new HashMap<>();\n        point2.put(\"x\", 3);\n        point2.put(\"y\", 4);\n        points.add(point2);\n\n        double m = 2;\n        double b = 1;\n\n        List<Boolean> result = new ArrayList<>();\n\n        for (Map<String, Integer> point : points) {\n            boolean isBelowLine = isBelowLine(point, m, b);\n            result.add(isBelowLine);\n        }\n\n        System.out.println(result);\n    }\n\n    public static boolean isBelowLine(Map<String, Integer> point, double m, double b) {\n        return point.get(\"y\") < m * point.get(\"x\") + b;\n    }\n}",
        "output": "import java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        List<Map<String, Integer>> points = new ArrayList<>();\n\n        Map<String, Integer> point1 = new HashMap<>();\n        point1.put(\"x\", 1);\n        point1.put(\"y\", 2);\n        points.add(point1);\n\n        Map<String, Integer> point2 = new HashMap<>();\n        point2.put(\"x\", 3);\n        point2.put(\"y\", 4);\n        points.add(point2);\n\n        double m = 2;\n        double b = 1;\n\n        List<Boolean> result = new ArrayList<>();\n\n        for (Map<String, Integer> point : points) {\n            boolean isBelowLine = isBelowLine(point, m, b);\n            result.add(isBelowLine);\n        }\n\n        System.out.println(result);\n    }\n\n    public static boolean isBelowLine(Map<String, Integer> point, double m, double b) {\n        return point.get(\"y\") < m * point.get(\"x\") + b;\n    }\n}"
    },
    {
        "instruction": "Create a shell script that lists all files in the current directory and counts the number of files ending with .txt.",
        "input": "",
        "response": "#!/bin/bash\n\n# List all files in the current directory\nls\n\n# Count the number of files with .txt extension\ntxt_count=$(ls | grep -c '\\.txt$')\necho \"Number of .txt files: $txt_count\"",
        "output": "#!/bin/bash\n\n# List all files in the current directory\nls\n\n# Count the number of files with .txt extension\ntxt_count=$(ls | grep -c '\\.txt$')\necho \"Number of .txt files: $txt_count\""
    },
    {
        "instruction": "Write a Java program to calculate the area of a rectangle given its length and width.",
        "input": "Length: 10\nWidth: 5",
        "response": "public class RectangleArea {\n public static void main(String[] args) {\n int length = 10;\n int width = 5;\n int area = length * width;\n System.out.println(\"Area of the rectangle is: \" + area);\n }\n}",
        "output": "public class RectangleArea {\n public static void main(String[] args) {\n int length = 10;\n int width = 5;\n int area = length * width;\n System.out.println(\"Area of the rectangle is: \" + area);\n }\n}"
    },
    {
        "instruction": "How would you implement a function in Python that takes a list of integers and returns the sum of even numbers in the list?",
        "input": "Input list: [1, 6, 3, 8, 90, 31]",
        "response": "def sum_even_numbers(numbers):\n sum_even = sum(filter(lambda x: x % 2 == 0, numbers))\n return sum_even\n\ninput_list = [1, 6, 3, 8, 90, 31]\nsum_result = sum_even_numbers(input_list)\nprint(sum_result)",
        "output": "def sum_even_numbers(numbers):\n sum_even = sum(filter(lambda x: x % 2 == 0, numbers))\n return sum_even\n\ninput_list = [1, 6, 3, 8, 90, 31]\nsum_result = sum_even_numbers(input_list)\nprint(sum_result)"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns an array of only prime numbers sorted in ascending order.",
        "input": "Input array: [10, 7, 6, 29, 3, 21]",
        "response": "function isPrime(num) {\n for (let i = 2; i <= Math.sqrt(num); i++) {\n if (num % i === 0) return false;\n }\n return num > 1;\n}\n\nfunction primeNumbers(arr) {\n return arr.filter(n => isPrime(n)).sort((a, b) => a - b);\n}\n\nconst inputArray = [10, 7, 6, 29, 3, 21];\nconst result = primeNumbers(inputArray);\nconsole.log(result);",
        "output": "function isPrime(num) {\n for (let i = 2; i <= Math.sqrt(num); i++) {\n if (num % i === 0) return false;\n }\n return num > 1;\n}\n\nfunction primeNumbers(arr) {\n return arr.filter(n => isPrime(n)).sort((a, b) => a - b);\n}\n\nconst inputArray = [10, 7, 6, 29, 3, 21];\nconst result = primeNumbers(inputArray);\nconsole.log(result);"
    },
    {
        "instruction": "Describe how you would convert a given string of digits to an integer in C++.",
        "input": "Input string: \"12345\"",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n std::string input_string = \"12345\";\n int num = std::stoi(input_string);\n std::cout << \"The integer value is: \" << num << std::endl;\n return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n std::string input_string = \"12345\";\n int num = std::stoi(input_string);\n std::cout << \"The integer value is: \" << num << std::endl;\n return 0;\n}"
    },
    {
        "instruction": "Create a Java function that takes a string input and returns a reversed version of the string.",
        "input": "exampleString: Hello, I'm a Java string.",
        "response": "public static String reverseString(String input) {\n    StringBuilder sb = new StringBuilder(input);\n    return sb.reverse().toString();\n}",
        "output": "public static String reverseString(String input) {\n    StringBuilder sb = new StringBuilder(input);\n    return sb.reverse().toString();\n}"
    },
    {
        "instruction": "Explain the use of this function in JavaScript, and provide its output for the input numbers 1, 2, 3, 4, and 5.",
        "input": "function timesTwo(x) {\n  return x * 2;\n}\n\nconst inputNumbers = [1, 2, 3, 4, 5];",
        "response": "The timesTwo function takes a number 'x' as input, multiplies it by 2, and returns the result. It can be used to double each element in the inputNumbers array using a loop or a map function:\n\nconst doubledNumbers = inputNumbers.map(timesTwo);\n\nThe output for the inputNumbers [1, 2, 3, 4, 5] would be the array [2, 4, 6, 8, 10].",
        "output": "The timesTwo function takes a number 'x' as input, multiplies it by 2, and returns the result. It can be used to double each element in the inputNumbers array using a loop or a map function:\n\nconst doubledNumbers = inputNumbers.map(timesTwo);\n\nThe output for the inputNumbers [1, 2, 3, 4, 5] would be the array [2, 4, 6, 8, 10]."
    },
    {
        "instruction": "Write C++ code to perform insertion sort for an array of integers.",
        "input": "{int arr[] = {6, 3, 9, 1, 0, 4}};",
        "response": "#include <iostream>\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int arr[] = {6, 3, 9, 1, 0, 4};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    insertionSort(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int arr[] = {6, 3, 9, 1, 0, 4};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    insertionSort(arr, n);\n\n    for (int i = 0; i < n; i++) {\n        std::cout << arr[i] << ' ';\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "What would be the output of this Python function for the input value '6'?",
        "input": "def count_zeros_to_n(n):\n  count = 0\n  i = 5\n  while i <= n:\n    count += n // i\n    i *= 5\n  return count\n\nvalue = 6",
        "response": "The 'count_zeros_to_n' function calculates the number of trailing zeros in the factorial of the given number 'n'. For the input value 6, the factorial is 720 which has one trailing zero. So the output of the function for the input value '6' would be 1.",
        "output": "The 'count_zeros_to_n' function calculates the number of trailing zeros in the factorial of the given number 'n'. For the input value 6, the factorial is 720 which has one trailing zero. So the output of the function for the input value '6' would be 1."
    },
    {
        "instruction": "Create a Java function to reverse a given string without using any inbuilt functions.",
        "input": "",
        "response": "public String reverseString(String input) {\n    char[] inputChars = input.toCharArray();\n    int start = 0;\n    int end = inputChars.length - 1;\n    while (start < end) {\n        char temp = inputChars[start];\n        inputChars[start] = inputChars[end];\n        inputChars[end] = temp;\n        start++;\n        end--;\n    }\n    return new String(inputChars);\n}",
        "output": "public String reverseString(String input) {\n    char[] inputChars = input.toCharArray();\n    int start = 0;\n    int end = inputChars.length - 1;\n    while (start < end) {\n        char temp = inputChars[start];\n        inputChars[start] = inputChars[end];\n        inputChars[end] = temp;\n        start++;\n        end--;\n    }\n    return new String(inputChars);\n}"
    },
    {
        "instruction": "Fix the syntax error in the following code snippet of C++ where it's trying to calculate the area of a rectangle:",
        "input": "int main() {\n    int length = 10;\n    int width = 20;\n    int area;\n    area = lenght * width\n    cout << \"Area of rectangle: \" << area << endl;\n    return 0;\n}",
        "response": "int main() {\n    int length = 10;\n    int width = 20;\n    int area;\n    area = length * width;\n    cout << \"Area of rectangle: \" << area << endl;\n    return 0;\n}",
        "output": "int main() {\n    int length = 10;\n    int width = 20;\n    int area;\n    area = length * width;\n    cout << \"Area of rectangle: \" << area << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Translate the following Python code snippet that checks if a number is even or odd into JavaScript:",
        "input": "number = 12\n\nif number % 2 == 0:\n    print(\"even\")\nelse:\n    print(\"odd\")",
        "response": "const number = 12;\n\nif (number % 2 === 0) {\n    console.log(\"even\");\n} else {\n    console.log(\"odd\");\n}",
        "output": "const number = 12;\n\nif (number % 2 === 0) {\n    console.log(\"even\");\n} else {\n    console.log(\"odd\");\n}"
    },
    {
        "instruction": "How can you refactor the following repetitive PowerShell script into a function that accepts arguments? -",
        "input": "Get-ChildItem -Path 'C:\\Folder1' -Recurse -Include *.txt\nRename-Item -Path 'C:\\Folder1\\file1.txt' -NewName 'new_file1.txt'\n\nGet-ChildItem -Path 'C:\\Folder2' -Recurse -Include *.txt\nRename-Item -Path 'C:\\Folder2\\file2.txt' -NewName 'new_file2.txt'",
        "response": "function Rename-ItemInFolder ($folderPath, $oldFilename, $newFilename) {\n    Get-ChildItem -Path $folderPath -Recurse -Include *.txt\n    Rename-Item -Path ($folderPath + '\\' + $oldFilename) -NewName $newFilename\n}\n\nRename-ItemInFolder -folderPath 'C:\\Folder1' -oldFilename 'file1.txt' -newFilename 'new_file1.txt'\nRename-ItemInFolder -folderPath 'C:\\Folder2' -oldFilename 'file2.txt' -newFilename 'new_file2.txt'",
        "output": "function Rename-ItemInFolder ($folderPath, $oldFilename, $newFilename) {\n    Get-ChildItem -Path $folderPath -Recurse -Include *.txt\n    Rename-Item -Path ($folderPath + '\\' + $oldFilename) -NewName $newFilename\n}\n\nRename-ItemInFolder -folderPath 'C:\\Folder1' -oldFilename 'file1.txt' -newFilename 'new_file1.txt'\nRename-ItemInFolder -folderPath 'C:\\Folder2' -oldFilename 'file2.txt' -newFilename 'new_file2.txt'"
    },
    {
        "instruction": "Design a Java method that accepts a string and returns the number of vowels and consonants in the string.",
        "input": "Hello world!",
        "response": "public class CountVowelsConsonants {\n\n    public static void main(String[] args) {\n        String text = \"Hello world!\";\n        int[] result = countVowelsConsonants(text);\n        System.out.printf(\"Vowels: %d, Consonants: %d%n\", result[0], result[1]);\n    }\n\n    public static int[] countVowelsConsonants(String input) {\n        int vowels = 0, consonants = 0;\n        String cleanInput = input.toLowerCase().replaceAll(\"[^a-z]\", \"\");\n        for (char ch : cleanInput.toCharArray()) {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                vowels++;\n            } else {\n                consonants++;\n            }\n        }\n        return new int[]{vowels, consonants};\n    }\n}",
        "output": "public class CountVowelsConsonants {\n\n    public static void main(String[] args) {\n        String text = \"Hello world!\";\n        int[] result = countVowelsConsonants(text);\n        System.out.printf(\"Vowels: %d, Consonants: %d%n\", result[0], result[1]);\n    }\n\n    public static int[] countVowelsConsonants(String input) {\n        int vowels = 0, consonants = 0;\n        String cleanInput = input.toLowerCase().replaceAll(\"[^a-z]\", \"\");\n        for (char ch : cleanInput.toCharArray()) {\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                vowels++;\n            } else {\n                consonants++;\n            }\n        }\n        return new int[]{vowels, consonants};\n    }\n}"
    },
    {
        "instruction": "How would you modify a Python function that takes a list of strings and returns a list of their lengths, in order to sort the strings by length before returning the list?",
        "input": "['test', 'hello', 'world', 'ai']",
        "response": "def sort_by_length(input):\n    return sorted(input, key=lambda x: len(x))\n\ndef string_lengths(strings):\n    sorted_strings = sort_by_length(strings)\n    return [len(string) for string in sorted_strings]\n\nexample = ['test', 'hello', 'world', 'ai']\nresult = string_lengths(example)\nprint(result)",
        "output": "def sort_by_length(input):\n    return sorted(input, key=lambda x: len(x))\n\ndef string_lengths(strings):\n    sorted_strings = sort_by_length(strings)\n    return [len(string) for string in sorted_strings]\n\nexample = ['test', 'hello', 'world', 'ai']\nresult = string_lengths(example)\nprint(result)"
    },
    {
        "instruction": "Generate a C# code snippet that shows how to create a simple delegate type and use it to invoke a method.",
        "input": "delegate: MyDelegate, method: PrintHello",
        "response": "using System;\n\npublic delegate void MyDelegate(string message);\n\nclass Program {\n    static void Main() {\n        MyDelegate del = new MyDelegate(PrintHello);\n        del(\"Hello, world!\");\n    }\n\n    public static void PrintHello(string msg) {\n        Console.WriteLine(msg);\n    }\n}",
        "output": "using System;\n\npublic delegate void MyDelegate(string message);\n\nclass Program {\n    static void Main() {\n        MyDelegate del = new MyDelegate(PrintHello);\n        del(\"Hello, world!\");\n    }\n\n    public static void PrintHello(string msg) {\n        Console.WriteLine(msg);\n    }\n}"
    },
    {
        "instruction": "Create a shell script that retrieves the current weather information for a given city using the OpenWeatherMap API.",
        "input": "API_KEY: your_api_key, CITY: New York",
        "response": "#!/bin/bash\n\nAPI_KEY=your_api_key\nCITY=\"New York\"\nURL=\"http://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${API_KEY}&units=metric\"\n\ncurl -s $URL",
        "output": "#!/bin/bash\n\nAPI_KEY=your_api_key\nCITY=\"New York\"\nURL=\"http://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${API_KEY}&units=metric\"\n\ncurl -s $URL"
    },
    {
        "instruction": "Create a JavaScript function that takes a string input and replaces all occurrences of the word 'green' with the word 'blue'.",
        "input": "The green grass looks very green after the rain.",
        "response": "function replaceGreenWithBlue(str) {\n    return str.replace(/green/g, 'blue');\n}\n\nreplaceGreenWithBlue('The green grass looks very green after the rain.');",
        "output": "function replaceGreenWithBlue(str) {\n    return str.replace(/green/g, 'blue');\n}\n\nreplaceGreenWithBlue('The green grass looks very green after the rain.');"
    },
    {
        "instruction": "What would be the output of the following Python code snippet?\n\nx = 5\ny = 10\nz = x > y\nprint(z)",
        "input": "",
        "response": "False",
        "output": "False"
    },
    {
        "instruction": "Implement a simple calculator using C++ that takes two integers and an operation (+, -, *, /) as input and outputs the result of the operation.",
        "input": "3, 4, '+'",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    char op;\n    cin >> a >> b >> op;\n\n    switch (op) {\n        case '+':\n            cout << a + b;\n            break;\n        case '-':\n            cout << a - b;\n            break;\n        case '*':\n            cout << a * b;\n            break;\n        case '/':\n            cout << a / b;\n            break;\n        default:\n            cout << \"Invalid operation.\";\n    }\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    char op;\n    cin >> a >> b >> op;\n\n    switch (op) {\n        case '+':\n            cout << a + b;\n            break;\n        case '-':\n            cout << a - b;\n            break;\n        case '*':\n            cout << a * b;\n            break;\n        case '/':\n            cout << a / b;\n            break;\n        default:\n            cout << \"Invalid operation.\";\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Identify and explain the main issue in this Java code snippet:\n\npublic class Addition {\n    public static void main(String[] args) {\n        int a = 5;\n        int b = 10;\n        int sum = a + b;\n        System.out.print(sum);\n    }\n}",
        "input": "",
        "response": "There is no main issue in the given Java code snippet. The code is functional and will add the values of 'a' and 'b' and print the result as expected.",
        "output": "There is no main issue in the given Java code snippet. The code is functional and will add the values of 'a' and 'b' and print the result as expected."
    },
    {
        "instruction": "Generate a Python function that takes a dictionary of item names and their prices as an input and returns the item with the highest price.",
        "input": "{'apple': 0.4, 'banana': 0.2, 'orange': 0.6, 'grapes': 1.5}",
        "response": "def find_most_expensive_item(prices):\n    return max(prices, key=prices.get)\n\n# Example usage:\n# items = {'apple': 0.4, 'banana': 0.2, 'orange': 0.6, 'grapes': 1.5}\n# print(find_most_expensive_item(items))",
        "output": "def find_most_expensive_item(prices):\n    return max(prices, key=prices.get)\n\n# Example usage:\n# items = {'apple': 0.4, 'banana': 0.2, 'orange': 0.6, 'grapes': 1.5}\n# print(find_most_expensive_item(items))"
    },
    {
        "instruction": "Rewrite the following JavaScript code snippet using a ternary operator instead of an if-else statement: if (x > y) { result = 'greater'; } else { result = 'lesser'; }",
        "input": "let x = 5;\nlet y = 3;",
        "response": "let x = 5;\nlet y = 3;\nlet result = (x > y) ? 'greater' : 'lesser';",
        "output": "let x = 5;\nlet y = 3;\nlet result = (x > y) ? 'greater' : 'lesser';"
    },
    {
        "instruction": "Explain how the following Java code snippet works to calculate the factorial of a given number and identify any areas of improvement: int factorial(int n) { if (n == 0) return 1; else return n * factorial(n - 1); }",
        "input": "",
        "response": "The given code snippet defines a recursive function to calculate the factorial of an input integer 'n'. The function checks if the input is 0, in which case it returns 1 as the base case, otherwise, it multiplies 'n' by the factorial of (n - 1). The factorial function is called with the new input (n - 1) until it reaches the base case. An area of improvement could be to implement the function iteratively to avoid potential stack overflow issues with large input values.",
        "output": "The given code snippet defines a recursive function to calculate the factorial of an input integer 'n'. The function checks if the input is 0, in which case it returns 1 as the base case, otherwise, it multiplies 'n' by the factorial of (n - 1). The factorial function is called with the new input (n - 1) until it reaches the base case. An area of improvement could be to implement the function iteratively to avoid potential stack overflow issues with large input values."
    },
    {
        "instruction": "Create a shell script that takes a file path as an argument and outputs the number of lines in the file, not counting any lines that are empty or only contain whitespace.",
        "input": "sample.txt",
        "response": "#!/bin/sh\n\ngrep -c -v '^\\s*$' \"$1\"",
        "output": "#!/bin/sh\n\ngrep -c -v '^\\s*$' \"$1\""
    },
    {
        "instruction": "Create a Python function that takes a list of integers as input and returns the average of those integers.",
        "input": "Example list of integers: [4, 8, 6, 5, 2]",
        "response": "def calculate_average(numbers):\n  total = sum(numbers)\n  count = len(numbers)\n  return total / count\n\nnumbers = [4, 8, 6, 5, 2]\nresult = calculate_average(numbers)\nprint(result)",
        "output": "def calculate_average(numbers):\n  total = sum(numbers)\n  count = len(numbers)\n  return total / count\n\nnumbers = [4, 8, 6, 5, 2]\nresult = calculate_average(numbers)\nprint(result)"
    },
    {
        "instruction": "Develop a C++ program that takes a user's input for their first name and last name, then prints a message saying 'Hello, {first name} {last name}!'",
        "input": "Example input:\nFirst Name: John\nLast Name: Doe",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n  std::string first_name, last_name;\n\n  std::cout << \"Enter your first name: \";\n  std::cin >> first_name;\n\n  std::cout << \"Enter your last name: \";\n  std::cin >> last_name;\n\n  std::cout << \"Hello, \" << first_name << \" \" << last_name << \"!\";\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n  std::string first_name, last_name;\n\n  std::cout << \"Enter your first name: \";\n  std::cin >> first_name;\n\n  std::cout << \"Enter your last name: \";\n  std::cin >> last_name;\n\n  std::cout << \"Hello, \" << first_name << \" \" << last_name << \"!\";\n\n  return 0;\n}"
    },
    {
        "instruction": "Examine the following JavaScript code and identify any syntax errors:",
        "input": "function findLargestNumber(number1, number2) {\n    if (number1 > number2) {\n        return number1;\n    } else {\n       return number2);\n    }\n}\n\nconsole.log(findLargestNumber(56, 42);",
        "response": "There are two syntax errors in the given JavaScript code:\n1. In the 'else' block, there is an extra parenthesis after 'return number2'. Correct it to 'return number2;'.\n2. In the 'console.log' statement, there is a missing closing parenthesis. Correct it to 'console.log(findLargestNumber(56, 42));'.",
        "output": "There are two syntax errors in the given JavaScript code:\n1. In the 'else' block, there is an extra parenthesis after 'return number2'. Correct it to 'return number2;'.\n2. In the 'console.log' statement, there is a missing closing parenthesis. Correct it to 'console.log(findLargestNumber(56, 42));'."
    },
    {
        "instruction": "Create a Python function that accepts two parameters: a string containing a sentence and a character. The function should return the count of the given character in the sentence, case-insensitive.",
        "input": "",
        "response": "def count_char(sentence, character):\n return sentence.lower().count(character.lower())",
        "output": "def count_char(sentence, character):\n return sentence.lower().count(character.lower())"
    },
    {
        "instruction": "Write a JavaScript function to calculate the greatest common divisor (GCD) of two given numbers.",
        "input": "",
        "response": "function gcd(a, b) {\n if (!b) {\n return a;\n }\n return gcd(b, a % b);\n}",
        "output": "function gcd(a, b) {\n if (!b) {\n return a;\n }\n return gcd(b, a % b);\n}"
    },
    {
        "instruction": "Given a Java code snippet, explain what the purpose of the 'synchronized' keyword is.",
        "input": "public synchronized void increment() {\n counter++;\n}",
        "response": "The 'synchronized' keyword in Java is used to provide synchronization for critical code sections. It ensures that only one thread can execute the specified method or code block at a time, preventing potential conflicts or race conditions when multiple threads access shared resources or data.",
        "output": "The 'synchronized' keyword in Java is used to provide synchronization for critical code sections. It ensures that only one thread can execute the specified method or code block at a time, preventing potential conflicts or race conditions when multiple threads access shared resources or data."
    },
    {
        "instruction": "Debug the following Python code for calculating the Fibonacci sequence up to the Nth number, given the user input for N.",
        "input": "def fibonacci(n):\n a, b = 0, 1\n result = []\n while len(result) < n:\n result.append(a)\n a, b = b, a + b\n return result\n\nuser_input = int(input('Enter the value of N: '))\nprint(fibonacci(user_input))",
        "response": "def fibonacci(n):\n a, b = 0, 1\n result = []\n while len(result) < n:\n  result.append(a)\n  a, b = b, a + b\n return result\n\nuser_input = int(input('Enter the value of N: '))\nprint(fibonacci(user_input))",
        "output": "def fibonacci(n):\n a, b = 0, 1\n result = []\n while len(result) < n:\n  result.append(a)\n  a, b = b, a + b\n return result\n\nuser_input = int(input('Enter the value of N: '))\nprint(fibonacci(user_input))"
    },
    {
        "instruction": "Write a JavaScript function that takes a string input of comma-separated integers and returns their sum.",
        "input": "Example input: '3,7,12,25,8'",
        "response": "function sumIntegers(input) {\n  const numbers = input.split(',').map(Number);\n  const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n  return sum;\n}",
        "output": "function sumIntegers(input) {\n  const numbers = input.split(',').map(Number);\n  const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n  return sum;\n}"
    },
    {
        "instruction": "Create a Java function that calculates the factorial of a given non-negative integer n.",
        "input": "",
        "response": "public static long factorial(int n) {\n  if (n < 0) {\n    throw new IllegalArgumentException(\"n must be non-negative\");\n  }\n  long result = 1;\n  for (int i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}",
        "output": "public static long factorial(int n) {\n  if (n < 0) {\n    throw new IllegalArgumentException(\"n must be non-negative\");\n  }\n  long result = 1;\n  for (int i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}"
    },
    {
        "instruction": "Suppress warning messages in a shell script and log the output of the given command to a file named 'mylog.log'.",
        "input": "Example command: wget https://example.com/data",
        "response": "wget https://example.com/data --quiet --no-check-certificate > mylog.log 2>&1",
        "output": "wget https://example.com/data --quiet --no-check-certificate > mylog.log 2>&1"
    },
    {
        "instruction": "How do you center a div element in a parent container in CSS?",
        "input": "",
        "response": ".parent-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.child-div {\n  /* Targeted div element */\n}",
        "output": ".parent-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.child-div {\n  /* Targeted div element */\n}"
    },
    {
        "instruction": "Create a function in JavaScript to determine if a number is a prime number or not. A prime number is a number which is divisible by only 1 and itself.",
        "input": "",
        "response": "function isPrime(number) {\n  if (number <= 1) return false;\n  for (let i = 2; i < number; i++) {\n    if (number % i === 0) return false;\n  }\n  return true;\n}",
        "output": "function isPrime(number) {\n  if (number <= 1) return false;\n  for (let i = 2; i < number; i++) {\n    if (number % i === 0) return false;\n  }\n  return true;\n}"
    },
    {
        "instruction": "What would be the output of the following Java code snippet? If there's an error, provide a brief explanation.",
        "input": "public class Test {\n    public static void main(String[] args) {\n        int a = 5, b = 2;\n        int result = a / b;\n        System.out.println(\"Result: \" + result);\n    }\n}",
        "response": "The output will be 'Result: 2' because integer division is used and the remainder, if any, of the division is discarded.",
        "output": "The output will be 'Result: 2' because integer division is used and the remainder, if any, of the division is discarded."
    },
    {
        "instruction": "Write a C++ function to calculate the nth Fibonacci number using a recursive algorithm. The Fibonacci sequence starts with the first two numbers, 0 and 1, and each subsequent number is the sum of the previous two.",
        "input": "",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n  int n = 10;\n  std::cout << \"The \" << n << \"th Fibonacci number is: \" << fibonacci(n) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n  int n = 10;\n  std::cout << \"The \" << n << \"th Fibonacci number is: \" << fibonacci(n) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "You are given the following SQL query. Rewrite the query so that it outputs the total price of each order, including a 10% sales tax, for orders placed in the year 2020.",
        "input": "SELECT order_id, SUM(price) as total_price\nFROM orders\nWHERE YEAR(order_date) = 2020\nGROUP BY order_id;",
        "response": "SELECT order_id, SUM(price * 1.1) as total_price_including_tax\nFROM orders\nWHERE YEAR(order_date) = 2020\nGROUP BY order_id;",
        "output": "SELECT order_id, SUM(price * 1.1) as total_price_including_tax\nFROM orders\nWHERE YEAR(order_date) = 2020\nGROUP BY order_id;"
    },
    {
        "instruction": "Can you debug the following Python code snippet to count the vowels in a given string?",
        "input": "def count_vowels(s):\n  vowels = 'aeiou'\n  count = 0\n  for letter in s:\n    if letter in vowels:\n    count = count + 1\n  return count",
        "response": "def count_vowels(s):\n  vowels = 'aeiou'\n  count = 0\n  for letter in s:\n    if letter in vowels:\n      count = count + 1\n  return count",
        "output": "def count_vowels(s):\n  vowels = 'aeiou'\n  count = 0\n  for letter in s:\n    if letter in vowels:\n      count = count + 1\n  return count"
    },
    {
        "instruction": "Explain, step-by-step, how to implement a bubble sort algorithm in Python and then provide an example of the code.",
        "input": "",
        "response": "1. Start with a list of values you want to sort.\n2. Iterate through the list from the beginning to the second to last item.\n3. Compare the current item with the item next to it. If the current item is greater than the next item, swap their positions.\n4. Repeat steps 2-3 until the entire list has been processed. This completes one pass through the list.\n5. Continue making passes through the list until no more swaps occur.\n\nHere's an example of bubble sort in Python:\n\ndef bubble_sort(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n - i - 1):\n      if arr[j] > arr[j + 1]:\n        arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\narray = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(array)\nprint('Sorted array is:', array)",
        "output": "1. Start with a list of values you want to sort.\n2. Iterate through the list from the beginning to the second to last item.\n3. Compare the current item with the item next to it. If the current item is greater than the next item, swap their positions.\n4. Repeat steps 2-3 until the entire list has been processed. This completes one pass through the list.\n5. Continue making passes through the list until no more swaps occur.\n\nHere's an example of bubble sort in Python:\n\ndef bubble_sort(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n - i - 1):\n      if arr[j] > arr[j + 1]:\n        arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\narray = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(array)\nprint('Sorted array is:', array)"
    },
    {
        "instruction": "Write a Java method that takes an integer array and returns the sum of its elements.",
        "input": "",
        "response": "public static int sumArray(int[] arr) {\n  int sum = 0;\n  for (int num : arr) {\n    sum += num;\n  }\n  return sum;\n}",
        "output": "public static int sumArray(int[] arr) {\n  int sum = 0;\n  for (int num : arr) {\n    sum += num;\n  }\n  return sum;\n}"
    },
    {
        "instruction": "Create a piece of JavaScript code that generates a random number between two given integers, min and max.",
        "input": "",
        "response": "function randomBetween(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}",
        "output": "function randomBetween(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}"
    },
    {
        "instruction": "Translate the following Python code into an equivalent C++ implementation.\n\n```\nimport math\n\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n```\n",
        "input": "",
        "response": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int number) {\n  if (number <= 1) {\n    return false;\n  }\n  for (int i = 2; i <= std::sqrt(number); ++i) {\n    if (number % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nbool is_prime(int number) {\n  if (number <= 1) {\n    return false;\n  }\n  for (int i = 2; i <= std::sqrt(number); ++i) {\n    if (number % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}"
    },
    {
        "instruction": "Explain the function of the following code snippet in Python:\n\n```\ntry:\n    result = 1 / 0\nexcept ZeroDivisionError:\n    print('Division by zero!')\nelse:\n    print('Result:', result)\nfinally:\n    print('Execution complete')\n```\n",
        "input": "",
        "response": "The given code snippet in Python provides a try-except-else-finally block that handles potential exceptions. It attempts to perform division by zero, which would raise a `ZeroDivisionError`. If this error occurs, the program prints 'Division by zero!' as an error message. If there is no exception, it prints the result of the division operation. Regardless of the outcome (exception or no exception), the program will always execute the 'finally' block and print 'Execution complete'.",
        "output": "The given code snippet in Python provides a try-except-else-finally block that handles potential exceptions. It attempts to perform division by zero, which would raise a `ZeroDivisionError`. If this error occurs, the program prints 'Division by zero!' as an error message. If there is no exception, it prints the result of the division operation. Regardless of the outcome (exception or no exception), the program will always execute the 'finally' block and print 'Execution complete'."
    },
    {
        "instruction": "What is the output of the following Java code?\n\n```\nclass Example {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        System.out.println(sum);\n    }\n}\n```\n",
        "input": "",
        "response": "The output of the given Java code will be 15. The code calculates the sum of the elements in the 'numbers' array (1 + 2 + 3 + 4 + 5) and then prints the result.",
        "output": "The output of the given Java code will be 15. The code calculates the sum of the elements in the 'numbers' array (1 + 2 + 3 + 4 + 5) and then prints the result."
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns the product of all the numbers.",
        "input": "[2, 4, 5, 6]",
        "response": "function productOfNumbers(numbers) {\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        product *= numbers[i];\n    }\n    return product;\n}",
        "output": "function productOfNumbers(numbers) {\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        product *= numbers[i];\n    }\n    return product;\n}"
    },
    {
        "instruction": "Create a C++ function to check if a given number is a prime number.",
        "input": "19",
        "response": "#include <iostream>\n\nbool isPrime(int number) {\n    if (number <= 1) {\n        return false;\n    }\n    for (int i = 2; i < number; i++) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int number = 19;\n    if (isPrime(number)) {\n        std::cout << number << \" is prime.\" << std::endl;\n    } else {\n        std::cout << number << \" is not prime.\" << std::endl;\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n\nbool isPrime(int number) {\n    if (number <= 1) {\n        return false;\n    }\n    for (int i = 2; i < number; i++) {\n        if (number % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int number = 19;\n    if (isPrime(number)) {\n        std::cout << number << \" is prime.\" << std::endl;\n    } else {\n        std::cout << number << \" is not prime.\" << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "instruction": "How would you calculate the length of the diagonal of a rectangle in Python given its width and height?",
        "input": "Width: 3, Height: 4",
        "response": "import math\n\nwidth = 3\nheight = 4\n\n# Calculate the diagonal length using the Pythagorean theorem\nlength = math.sqrt(width ** 2 + height ** 2)\n\nprint('Length of the diagonal:', length)",
        "output": "import math\n\nwidth = 3\nheight = 4\n\n# Calculate the diagonal length using the Pythagorean theorem\nlength = math.sqrt(width ** 2 + height ** 2)\n\nprint('Length of the diagonal:', length)"
    },
    {
        "instruction": "Design a shell script that accepts a file path as an argument and performs line count and word count on the given file.",
        "input": "file.txt",
        "response": "#!/bin/bash\n\nFILE_PATH=\"$1\"\n\n# Perform line count\nline_count=$(wc -l < \"$FILE_PATH\")\n\n# Perform word count\nword_count=$(wc -w < \"$FILE_PATH\")\n\n# Display the results\necho \"Line count: $line_count\"\necho \"Word count: $word_count\"",
        "output": "#!/bin/bash\n\nFILE_PATH=\"$1\"\n\n# Perform line count\nline_count=$(wc -l < \"$FILE_PATH\")\n\n# Perform word count\nword_count=$(wc -w < \"$FILE_PATH\")\n\n# Display the results\necho \"Line count: $line_count\"\necho \"Word count: $word_count\""
    },
    {
        "instruction": "Create a JavaScript code snippet to calculate the area of a rectangle with given width and height, and then display the result in the console.",
        "input": "width = 10, height = 5",
        "response": "function calculateRectangleArea(width, height) {\n  return width * height;\n}\n\nconst width = 10;\nconst height = 5;\nconst area = calculateRectangleArea(width, height);\nconsole.log('Area of the rectangle:', area);",
        "output": "function calculateRectangleArea(width, height) {\n  return width * height;\n}\n\nconst width = 10;\nconst height = 5;\nconst area = calculateRectangleArea(width, height);\nconsole.log('Area of the rectangle:', area);"
    },
    {
        "instruction": "What is the command to find the longest line in a text file using shell script?",
        "input": "filename.txt",
        "response": "awk ' { if (length > x) { x = length; y = $0 } }END{ print y }' filename.txt",
        "output": "awk ' { if (length > x) { x = length; y = $0 } }END{ print y }' filename.txt"
    },
    {
        "instruction": "Demonstrate how to use the reduce function in Python with an example of adding integer values in a list.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\n\nsum = reduce(lambda x, y: x + y, numbers)\nprint(sum)",
        "output": "from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\n\nsum = reduce(lambda x, y: x + y, numbers)\nprint(sum)"
    },
    {
        "instruction": "Re-write the following Java code snippet to make it correctly synchronize thread access to a shared resource:\n\npublic class SharedResource {\n  private int value;\n\n  public int getValue() {\n    return value;\n  }\n\n  public void setValue(int newValue) {\n    value = newValue;\n  }\n}",
        "input": "",
        "response": "public class SharedResource {\n  private int value;\n\n  public synchronized int getValue() {\n    return value;\n  }\n\n  public synchronized void setValue(int newValue) {\n    value = newValue;\n  }\n}",
        "output": "public class SharedResource {\n  private int value;\n\n  public synchronized int getValue() {\n    return value;\n  }\n\n  public synchronized void setValue(int newValue) {\n    value = newValue;\n  }\n}"
    },
    {
        "instruction": "Write a shell script that takes a directory as input and returns the total file size inside the directory.",
        "input": "/home/user/my_directory",
        "response": "#!/bin/bash\n\ndir=$1\ntotal_size=$(du -sh $dir | cut -f1)\n\necho \"Total file size in $dir: $total_size\"",
        "output": "#!/bin/bash\n\ndir=$1\ntotal_size=$(du -sh $dir | cut -f1)\n\necho \"Total file size in $dir: $total_size\""
    },
    {
        "instruction": "Rewrite the given JavaScript function using the arrow function syntax.",
        "input": "function square(x) {\n  return x * x;\n}",
        "response": "const square = x => x * x;",
        "output": "const square = x => x * x;"
    },
    {
        "instruction": "Explain the purpose and functionality of the following Python code:",
        "input": "def find_largest_even(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return max(even_numbers, default=None)",
        "response": "The given code defines a function 'find_largest_even' that accepts a list of integers 'numbers' as its input. It filters out the even numbers from the input list by using a list comprehension and checking if each number is divisible by 2 (num % 2 == 0). After filtering, the largest even number is found using the 'max' function with a default value of 'None'. If there are no even numbers in the input list, the function will return 'None'.",
        "output": "The given code defines a function 'find_largest_even' that accepts a list of integers 'numbers' as its input. It filters out the even numbers from the input list by using a list comprehension and checking if each number is divisible by 2 (num % 2 == 0). After filtering, the largest even number is found using the 'max' function with a default value of 'None'. If there are no even numbers in the input list, the function will return 'None'."
    },
    {
        "instruction": "In Java, demonstrate the usage of the 'Builder' design pattern to create objects of a 'Car' class with 'make', 'model', 'year', and 'color' attributes.",
        "input": "Car car1 = new Car.Builder().make(\"Toyota\").model(\"Camry\").year(2020).color(\"White\").build();",
        "response": "public class Car {\n    private String make;\n    private String model;\n    private int year;\n    private String color;\n\n    private Car(Builder builder) {\n        this.make = builder.make;\n        this.model = builder.model;\n        this.year = builder.year;\n        this.color = builder.color;\n    }\n\n    public static class Builder {\n        private String make;\n        private String model;\n        private int year;\n        private String color;\n\n        public Builder make(String make) {\n            this.make = make;\n            return this;\n        }\n\n        public Builder model(String model) {\n            this.model = model;\n            return this;\n        }\n\n        public Builder year(int year) {\n            this.year = year;\n            return this;\n        }\n\n        public Builder color(String color) {\n            this.color = color;\n            return this;\n        }\n\n        public Car build() {\n            return new Car(this);\n        }\n    }\n}",
        "output": "public class Car {\n    private String make;\n    private String model;\n    private int year;\n    private String color;\n\n    private Car(Builder builder) {\n        this.make = builder.make;\n        this.model = builder.model;\n        this.year = builder.year;\n        this.color = builder.color;\n    }\n\n    public static class Builder {\n        private String make;\n        private String model;\n        private int year;\n        private String color;\n\n        public Builder make(String make) {\n            this.make = make;\n            return this;\n        }\n\n        public Builder model(String model) {\n            this.model = model;\n            return this;\n        }\n\n        public Builder year(int year) {\n            this.year = year;\n            return this;\n        }\n\n        public Builder color(String color) {\n            this.color = color;\n            return this;\n        }\n\n        public Car build() {\n            return new Car(this);\n        }\n    }\n}"
    },
    {
        "instruction": "Create a Python function that reverses a given string.",
        "input": "Example string: 'Hello, OpenAI!'",
        "response": "def reverse_string(s):\n  return s[::-1]\n\nexample_string = 'Hello, OpenAI!'\nreversed_string = reverse_string(example_string)\nprint(reversed_string)",
        "output": "def reverse_string(s):\n  return s[::-1]\n\nexample_string = 'Hello, OpenAI!'\nreversed_string = reverse_string(example_string)\nprint(reversed_string)"
    },
    {
        "instruction": "How would you refactor the Java method to calculate the factorial using recursion?",
        "input": "public int factorial(int num) {\n  int result = 1;\n  for (int i = 2; i <= num; i++) {\n    result *= i;\n  }\n  return result;\n}",
        "response": "public int factorial(int num) {\n  if (num == 0 || num == 1) {\n    return 1;\n  }\n  return num * factorial(num - 1);\n}",
        "output": "public int factorial(int num) {\n  if (num == 0 || num == 1) {\n    return 1;\n  }\n  return num * factorial(num - 1);\n}"
    },
    {
        "instruction": "Given the following C# code, detect the syntax error and correct it.",
        "input": "using System;\nclass Program {\n  static void Main() {\n    Console.WriteLne(\"Hello, GPT-3!\");\n  }\n}",
        "response": "using System;\nclass Program {\n  static void Main() {\n    Console.WriteLine(\"Hello, GPT-3!\");\n  }\n}",
        "output": "using System;\nclass Program {\n  static void Main() {\n    Console.WriteLine(\"Hello, GPT-3!\");\n  }\n}"
    },
    {
        "instruction": "Demonstrate how to use Python's requests library to make a GET request to a specified API endpoint and parse the JSON response.",
        "input": "API Endpoint: https://api.example.com/data",
        "response": "import requests\nimport json\n\napi_endpoint = 'https://api.example.com/data'\nresponse = requests.get(api_endpoint)\n\nif response.status_code == 200:\n    data = json.loads(response.text)\n    print(data)\nelse:\n    print(f'Error: {response.status_code}')",
        "output": "import requests\nimport json\n\napi_endpoint = 'https://api.example.com/data'\nresponse = requests.get(api_endpoint)\n\nif response.status_code == 200:\n    data = json.loads(response.text)\n    print(data)\nelse:\n    print(f'Error: {response.status_code}')"
    },
    {
        "instruction": "Create a C++ function that prints the sum of all even numbers between 1 and N, including N if it's even.",
        "input": "int N = 10;",
        "response": "#include <iostream>\n\nint sumOfEven(int N) {\n    int sum = 0;\n    for (int i = 2; i <= N; i += 2) {\n        sum += i;\n    }\n    return sum;\n}\n\nint main() {\n    int N = 10;\n    std::cout << \"Sum of even numbers: \" << sumOfEven(N) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint sumOfEven(int N) {\n    int sum = 0;\n    for (int i = 2; i <= N; i += 2) {\n        sum += i;\n    }\n    return sum;\n}\n\nint main() {\n    int N = 10;\n    std::cout << \"Sum of even numbers: \" << sumOfEven(N) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "What would be the output of the following Python code snippet? \ndef add(a, b):\n    return a + b\n\nresult = add(add(1, 2), add(3, 4))",
        "input": "",
        "response": "The output of the code snippet would be 10, as the inner add function calls would return 3 and 7, and the outer add function call would then sum those two results to get 10.",
        "output": "The output of the code snippet would be 10, as the inner add function calls would return 3 and 7, and the outer add function call would then sum those two results to get 10."
    },
    {
        "instruction": "Design a JavaScript function that checks if a given word is a palindrome (ignoring case and spaces).",
        "input": "var word = 'A man a plan a canal Panama';",
        "response": "function isPalindrome(word) {\n    const cleanWord = word.replace(/\\s+/g, '').toLowerCase();\n    const reversedWord = cleanWord.split('').reverse().join('');\n    return cleanWord === reversedWord;\n}\n\nvar word = 'A man a plan a canal Panama';\nconsole.log(isPalindrome(word));",
        "output": "function isPalindrome(word) {\n    const cleanWord = word.replace(/\\s+/g, '').toLowerCase();\n    const reversedWord = cleanWord.split('').reverse().join('');\n    return cleanWord === reversedWord;\n}\n\nvar word = 'A man a plan a canal Panama';\nconsole.log(isPalindrome(word));"
    },
    {
        "instruction": "Determine why the following shell script is not working as expected and suggest a fix: \n#!/bin/bash\n\ncount=0\necho 'count starts at $count'\n\nfor i in {1..5}; do\ncount=$count+1\ndone\necho 'count ends at $count'",
        "input": "",
        "response": "The script does not correctly use variable substitution and fails to increment the count variable properly. The fixed script would be:\n\n#!/bin/bash\n\ncount=0\necho \"count starts at $count\"\n\nfor i in {1..5}; do\ncount=$((count+1))\ndone\necho \"count ends at $count\"",
        "output": "The script does not correctly use variable substitution and fails to increment the count variable properly. The fixed script would be:\n\n#!/bin/bash\n\ncount=0\necho \"count starts at $count\"\n\nfor i in {1..5}; do\ncount=$((count+1))\ndone\necho \"count ends at $count\""
    },
    {
        "instruction": "Create a function in JavaScript that takes an array of numbers and returns an array with the squares of the input numbers.",
        "input": "",
        "response": "function squareNumbers(numbers) {\n   return numbers.map(number => number * number);\n}",
        "output": "function squareNumbers(numbers) {\n   return numbers.map(number => number * number);\n}"
    },
    {
        "instruction": "In Java, write a method to calculate the factorial of a given non-negative integer n.",
        "input": "",
        "response": "public long factorial(int n) {\n   if (n == 0) {\n      return 1;\n   }\n   return n * factorial(n - 1);\n}",
        "output": "public long factorial(int n) {\n   if (n == 0) {\n      return 1;\n   }\n   return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "What would be the expected output of the following Python code? `print([x * 2 for x in range(5)])`",
        "input": "",
        "response": "[0, 2, 4, 6, 8]",
        "output": "[0, 2, 4, 6, 8]"
    },
    {
        "instruction": "How can we fix this C++ code to make it print all the elements in the vector `v`? `#include<iostream>; #include<vector>; int main() { std::vector<int> v={1,2,3}; for(int i = 0; i <= v.size(); i++) { std::cout << v[i] << std::endl; }; return 0; }`",
        "input": "",
        "response": "#include<iostream>\n#include<vector>\nint main() {\n   std::vector<int> v={1,2,3};\n   for(int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n   }\n   return 0;\n}",
        "output": "#include<iostream>\n#include<vector>\nint main() {\n   std::vector<int> v={1,2,3};\n   for(int i = 0; i < v.size(); i++) {\n      std::cout << v[i] << std::endl;\n   }\n   return 0;\n}"
    },
    {
        "instruction": "Create a simple JavaScript function that returns the sum of all odd numbers in a given array.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "function sumOddNumbers(arr) {\n  let sum = 0;\n  for (let item of arr) {\n    if (item % 2 !== 0) {\n      sum += item;\n    }\n  }\n  return sum;\n}",
        "output": "function sumOddNumbers(arr) {\n  let sum = 0;\n  for (let item of arr) {\n    if (item % 2 !== 0) {\n      sum += item;\n    }\n  }\n  return sum;\n}"
    },
    {
        "instruction": "Implement a Java method that takes two strings as input, combines them, and then returns the result in reverse order.",
        "input": "java, script",
        "response": "public String reverseCombinedStrings(String str1, String str2) {\n  String combined = str1 + str2;\n  StringBuilder reversed = new StringBuilder(combined);\n  return reversed.reverse().toString();\n}",
        "output": "public String reverseCombinedStrings(String str1, String str2) {\n  String combined = str1 + str2;\n  StringBuilder reversed = new StringBuilder(combined);\n  return reversed.reverse().toString();\n}"
    },
    {
        "instruction": "Explain a Python code snippet that calculates the factorial of a given number n using tail recursion.",
        "input": "",
        "response": "def factorial_helper(n, accumulator):\n  if n == 0:\n    return accumulator\n  return factorial_helper(n - 1, n * accumulator)\n\ndef factorial(n):\n  return factorial_helper(n, 1)\n\nThe code defines two functions: 'factorial_helper' and 'factorial'. The 'factorial_helper' function is used to achieve tail recursion. It takes two arguments: 'n' as the given number, and 'accumulator' to accumulate the results during recursion. The base case occurs when n is 0, and accumulator is returned. Otherwise, 'factorial_helper' calls itself with n - 1 and the updated accumulator (n * accumulator). The factorial function is a wrapper function that calls 'factorial_helper' with accumulator initialized to 1.",
        "output": "def factorial_helper(n, accumulator):\n  if n == 0:\n    return accumulator\n  return factorial_helper(n - 1, n * accumulator)\n\ndef factorial(n):\n  return factorial_helper(n, 1)\n\nThe code defines two functions: 'factorial_helper' and 'factorial'. The 'factorial_helper' function is used to achieve tail recursion. It takes two arguments: 'n' as the given number, and 'accumulator' to accumulate the results during recursion. The base case occurs when n is 0, and accumulator is returned. Otherwise, 'factorial_helper' calls itself with n - 1 and the updated accumulator (n * accumulator). The factorial function is a wrapper function that calls 'factorial_helper' with accumulator initialized to 1."
    },
    {
        "instruction": "Fix syntax errors in a given C program that calculates the sum of numbers from 1 to n.",
        "input": "#include <stdio.h>\n\nint main) {\nint n, sum = 0;\nprintf(\"Enter a number: \");\nscanf(\"%d, &n);\nfor (int i = 1; i <= n; i++\n{\nsum += i;\n}\nprintf(\"Sum of numbers from 1 to %d: %d, n, sum);\nreturn 0;\n}",
        "response": "#include <stdio.h>\n\nint main() {\n  int n, sum = 0;\n  printf(\"Enter a number: \");\n  scanf(\"%d\", &n);\n  for (int i = 1; i <= n; i++) {\n    sum += i;\n  }\n  printf(\"Sum of numbers from 1 to %d: %d\", n, sum);\n  return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n  int n, sum = 0;\n  printf(\"Enter a number: \");\n  scanf(\"%d\", &n);\n  for (int i = 1; i <= n; i++) {\n    sum += i;\n  }\n  printf(\"Sum of numbers from 1 to %d: %d\", n, sum);\n  return 0;\n}"
    },
    {
        "instruction": "Create a Python function to calculate the compound interest with the given arguments: initial capital, interest rate, and number of years.",
        "input": "",
        "response": "def compound_interest(principal, rate, years):\n    final_amount = principal * (1 + rate/100) ** years\n    return final_amount - principal",
        "output": "def compound_interest(principal, rate, years):\n    final_amount = principal * (1 + rate/100) ** years\n    return final_amount - principal"
    },
    {
        "instruction": "Detect any syntax errors in this JavaScript code snippet.",
        "input": "function findMin(arr) {\n  const min = Math.min.apply(null, arr);\n  return min;\n};\n\nconsole.log(findMin([4, 2, 9, 3]));",
        "response": "The code syntax is correct; there are no syntax errors.",
        "output": "The code syntax is correct; there are no syntax errors."
    },
    {
        "instruction": "Write a factorial subroutine in the C language.",
        "input": "",
        "response": "unsigned long long int factorial(unsigned int n) {\n    if (n == 0)\n       return 1;\n    else\n       return n * factorial(n - 1);\n}",
        "output": "unsigned long long int factorial(unsigned int n) {\n    if (n == 0)\n       return 1;\n    else\n       return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Explain how to extract specific values from a JSON object in a JavaScript program.",
        "input": "{\"person\": {\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}}",
        "response": "In JavaScript, JSON objects are similar to regular objects, so you can access the values by using the dot notation or brackets notation. For example, if you want to extract the 'name' from the given JSON object, you can do it like this:\n\nconst data = {\"person\": {\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}};\nconst name = data.person.name; // or data['person']['name'];\n\nThis would extract the value 'John Doe' and store it in the 'name' variable.",
        "output": "In JavaScript, JSON objects are similar to regular objects, so you can access the values by using the dot notation or brackets notation. For example, if you want to extract the 'name' from the given JSON object, you can do it like this:\n\nconst data = {\"person\": {\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}};\nconst name = data.person.name; // or data['person']['name'];\n\nThis would extract the value 'John Doe' and store it in the 'name' variable."
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns true if the string is a palindrome, ignoring capitalization and spaces.",
        "input": "Race car",
        "response": "def is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]\n\nprint(is_palindrome('Race car'))",
        "output": "def is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]\n\nprint(is_palindrome('Race car'))"
    },
    {
        "instruction": "How do I declare an integer array of size 10 in Java?",
        "input": "",
        "response": "int[] myArray = new int[10];",
        "output": "int[] myArray = new int[10];"
    },
    {
        "instruction": "Write a JavaScript function to calculate the sum of all numbers from 1 to N.",
        "input": "10",
        "response": "function sumUptoN(n) {\n    return (n * (n + 1)) / 2;\n}\n\nconsole.log(sumUptoN(10));",
        "output": "function sumUptoN(n) {\n    return (n * (n + 1)) / 2;\n}\n\nconsole.log(sumUptoN(10));"
    },
    {
        "instruction": "Develop a C++ program that reads a file named 'input.txt', and prints its content to the console.",
        "input": "",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inputFile(\"input.txt\");\n    std::string line;\n\n    if (inputFile.is_open()) {\n        while (std::getline(inputFile, line)) {\n            std::cout << line << std::endl;\n        }\n        inputFile.close();\n    }\n    else\n        std::cout << \"Unable to open file\";\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::ifstream inputFile(\"input.txt\");\n    std::string line;\n\n    if (inputFile.is_open()) {\n        while (std::getline(inputFile, line)) {\n            std::cout << line << std::endl;\n        }\n        inputFile.close();\n    }\n    else\n        std::cout << \"Unable to open file\";\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Java method that takes a list of strings as input and returns the concatenated string, separated by spaces.",
        "input": "List<String> words = Arrays.asList(\"Hello\", \"world\", \"I\", \"am\", \"a\", \"GPT-3\");",
        "response": "public String concatenateStrings(List<String> words) {\n    StringBuilder sb = new StringBuilder();\n    for (String word : words) {\n        sb.append(word).append(\" \");\n    }\n    return sb.toString().trim();\n}",
        "output": "public String concatenateStrings(List<String> words) {\n    StringBuilder sb = new StringBuilder();\n    for (String word : words) {\n        sb.append(word).append(\" \");\n    }\n    return sb.toString().trim();\n}"
    },
    {
        "instruction": "In JavaScript, implement a function that returns an array of numbers ranging from 'start' to 'end' (inclusive).",
        "input": "Create a number range array from 1 to 5.",
        "response": "function createNumberRange(start, end) {\n    const range = [];\n    for (let i = start; i <= end; i++) {\n        range.push(i);\n    }\n    return range;\n}\n\nconst rangeArray = createNumberRange(1, 5);",
        "output": "function createNumberRange(start, end) {\n    const range = [];\n    for (let i = start; i <= end; i++) {\n        range.push(i);\n    }\n    return range;\n}\n\nconst rangeArray = createNumberRange(1, 5);"
    },
    {
        "instruction": "What would be the output of the following C code?",
        "input": "#include <stdio.h>\n\nint main() {\n  int num1 = 25;\n  int num2 = 10;\n  int result = num1 % num2 * ~num2;\n  printf(\"%d\\n\", result);\n\n  return 0;\n}",
        "response": "The output would be -50. The expression is evaluated as follows: 25 % 10 equals 5; ~10 equals -11 in two's complement representation; 5 * -11 equals -55. So, the printf statement outputs -50.",
        "output": "The output would be -50. The expression is evaluated as follows: 25 % 10 equals 5; ~10 equals -11 in two's complement representation; 5 * -11 equals -55. So, the printf statement outputs -50."
    },
    {
        "instruction": "Describe the purpose and use of the 'reduce' function in Python and provide a code example.",
        "input": "",
        "response": "The 'reduce' function in Python is used to apply a particular function to the items of a sequence (typically a list or tuple) successively, reducing the sequence to a single value. It is part of the 'functools' module. Here's an example:\n\nfrom functools import reduce\n\ndef multiply(x, y):\n    return x * y\n\nnumbers = [1, 2, 3, 4, 5]\nproduct = reduce(multiply, numbers)\n#prints 120\nprint(product)",
        "output": "The 'reduce' function in Python is used to apply a particular function to the items of a sequence (typically a list or tuple) successively, reducing the sequence to a single value. It is part of the 'functools' module. Here's an example:\n\nfrom functools import reduce\n\ndef multiply(x, y):\n    return x * y\n\nnumbers = [1, 2, 3, 4, 5]\nproduct = reduce(multiply, numbers)\n#prints 120\nprint(product)"
    },
    {
        "instruction": "You need to implement a recursive Fibonacci sequence generator in Java. The function should take an integer n as an argument and return the nth Fibonacci number.",
        "input": "",
        "response": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}",
        "output": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}"
    },
    {
        "instruction": "Translate the following Python code to Javascript: \n\n```\ndef add(a, b):\n    return a + b\n\nresult = add(4, 5)\nprint(result)\n```",
        "input": "",
        "response": "function add(a, b) {\n    return a + b;\n}\n\nconst result = add(4, 5);\nconsole.log(result);",
        "output": "function add(a, b) {\n    return a + b;\n}\n\nconst result = add(4, 5);\nconsole.log(result);"
    },
    {
        "instruction": "Identify and fix the syntax error in the provided Node.js code. Explain the issue and provide the corrected version of the code.\n\n```javascript\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello World\n}\n\nserver.listen(3000, () => {\n    console.log(`Server running at http://localhost:3000/`);\n});```",
        "input": "",
        "response": "The issue is a missing closing parenthesis in the `res.end()` function call. Here is the corrected code:\n\n```javascript\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello World');\n});\n\nserver.listen(3000, () => {\n    console.log(`Server running at http://localhost:3000/`);\n});\n```",
        "output": "The issue is a missing closing parenthesis in the `res.end()` function call. Here is the corrected code:\n\n```javascript\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello World');\n});\n\nserver.listen(3000, () => {\n    console.log(`Server running at http://localhost:3000/`);\n});\n```"
    },
    {
        "instruction": "Given a list of numbers as input, write a Python function that calculates the mean, median, and mode of the numbers. Return the results as a tuple in the format (mean, median, mode).",
        "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2]",
        "response": "def calculate_mean_median_mode(numbers):\n    from statistics import mean, median, mode\n    \n    mean_value = mean(numbers)\n    median_value = median(numbers)\n    mode_value = mode(numbers)\n    \n    return (mean_value, median_value, mode_value)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2]\nprint(calculate_mean_median_mode(numbers))",
        "output": "def calculate_mean_median_mode(numbers):\n    from statistics import mean, median, mode\n    \n    mean_value = mean(numbers)\n    median_value = median(numbers)\n    mode_value = mode(numbers)\n    \n    return (mean_value, median_value, mode_value)\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2]\nprint(calculate_mean_median_mode(numbers))"
    },
    {
        "instruction": "Create a Python function that takes a list of strings and returns a list of strings that contain more than two vowels.",
        "input": "['hello', 'world', 'Python', 'apple']",
        "response": "def more_than_two_vowels(words):\n    result = []\n    vowels = 'AEIOUaeiou'\n    for word in words:\n        vowel_count = sum(letter in vowels for letter in word)\n        if vowel_count > 2:\n            result.append(word)\n    return result\n\nfiltered_words = more_than_two_vowels(['hello', 'world', 'Python', 'apple'])\nprint(filtered_words)",
        "output": "def more_than_two_vowels(words):\n    result = []\n    vowels = 'AEIOUaeiou'\n    for word in words:\n        vowel_count = sum(letter in vowels for letter in word)\n        if vowel_count > 2:\n            result.append(word)\n    return result\n\nfiltered_words = more_than_two_vowels(['hello', 'world', 'Python', 'apple'])\nprint(filtered_words)"
    },
    {
        "instruction": "Can you identify the syntax error in the given Java code and fix it?",
        "input": "public class HelloWorld {\n    public static void main(String[] args) \n        System.out.println(\"Hello, world!\");\n    }\n}",
        "response": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}",
        "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}"
    },
    {
        "instruction": "Write a C++ program that calculates and prints the sum of all even numbers from 1 to n, inclusive. Make sure to use a while loop.",
        "input": "n = 10",
        "response": "#include <iostream>\n\nint main() {\n    int n = 10;\n    int sum = 0;\n    int i = 2;\n\n    while (i <= n) {\n        sum += i;\n        i += 2;\n    }\n\n    std::cout << \"Sum of even numbers from 1 to \" << n << \": \" << sum << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int n = 10;\n    int sum = 0;\n    int i = 2;\n\n    while (i <= n) {\n        sum += i;\n        i += 2;\n    }\n\n    std::cout << \"Sum of even numbers from 1 to \" << n << \": \" << sum << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Rewrite the following JavaScript code to eschew if-else structures and handle the switch statement request by using an object lookup.",
        "input": "function commandHandler(command) {\n  switch (command) {\n    case 'start':\n      console.log('Starting...');\n      break;\n    case 'stop':\n      console.log('Stopping...');\n      break;\n    default:\n      console.log('Invalid command');\n  }\n}",
        "response": "function commandHandler(command) {\n  const actions = {\n    'start': () => console.log('Starting...'),\n    'stop': () => console.log('Stopping...'),\n  };\n  const action = actions[command] || (() => console.log('Invalid command'));\n  action();\n}",
        "output": "function commandHandler(command) {\n  const actions = {\n    'start': () => console.log('Starting...'),\n    'stop': () => console.log('Stopping...'),\n  };\n  const action = actions[command] || (() => console.log('Invalid command'));\n  action();\n}"
    },
    {
        "instruction": "Create a Java method that returns the sum of all even numbers from 1 to a given integer n.",
        "input": "n = 10",
        "response": "public int sumEvenNumbers(int n) {\n    int sum = 0;\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(int n) {\n    int sum = 0;\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "How can I write a JavaScript function that replaces all vowels in a given string with the letter 'x'?",
        "input": "text = 'Hello, world'",
        "response": "function replaceVowels(text) {\n    return text.replace(/[aeiouAEIOU]/g, 'x');\n}",
        "output": "function replaceVowels(text) {\n    return text.replace(/[aeiouAEIOU]/g, 'x');\n}"
    },
    {
        "instruction": "Given a list of tuples containing product names and their prices, write a Python function that returns a sorted list based on the price in descending order. Use the 'sort' method and the 'key' parameter to achieve this.",
        "input": "product_list = [('Apples', 3), ('Bananas', 2), ('Oranges', 4)]",
        "response": "def sort_products(product_list):\n    product_list.sort(key=lambda x: x[1], reverse=True)\n    return product_list",
        "output": "def sort_products(product_list):\n    product_list.sort(key=lambda x: x[1], reverse=True)\n    return product_list"
    },
    {
        "instruction": "Implement a C++ function that takes an array of integers and its size, and calculates the mathematical average of the numbers in the array. Return the result as a double.",
        "input": "int nums[] = {10, 20, 30, 40, 50};\nint size = 5;",
        "response": "#include <iostream>\n\ndouble calculateAverage(int nums[], int size) {\n    double sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += nums[i];\n    }\n    double average = sum / size;\n    return average;\n}",
        "output": "#include <iostream>\n\ndouble calculateAverage(int nums[], int size) {\n    double sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += nums[i];\n    }\n    double average = sum / size;\n    return average;\n}"
    },
    {
        "instruction": "Create a Python function that takes a text file as input and returns the number of words in the file.",
        "input": "Assume the text file is named 'sample_text.txt' and contains the following content: 'The quick brown fox jumps over the lazy dog'.",
        "response": "def count_words(file_name):\n    with open(file_name, 'r') as file:\n        text = file.read()\n        words = text.split()\n        return len(words)\n\nfile_name = 'sample_text.txt'\nword_count = count_words(file_name)\nprint(word_count)",
        "output": "def count_words(file_name):\n    with open(file_name, 'r') as file:\n        text = file.read()\n        words = text.split()\n        return len(words)\n\nfile_name = 'sample_text.txt'\nword_count = count_words(file_name)\nprint(word_count)"
    },
    {
        "instruction": "Write a Java program to reverse a given string.",
        "input": "Attempt to reverse the following string: 'softwaredeveloper'",
        "response": "public class StringReversal {\n    public static void main(String[] args) {\n        String input = \"softwaredeveloper\";\n        String reversed = new StringBuilder(input).reverse().toString();\n        System.out.println(reversed);\n    }\n}",
        "output": "public class StringReversal {\n    public static void main(String[] args) {\n        String input = \"softwaredeveloper\";\n        String reversed = new StringBuilder(input).reverse().toString();\n        System.out.println(reversed);\n    }\n}"
    },
    {
        "instruction": "Determine the presence of a syntax error in the following JavaScript code, and if so, provide the corrected version.",
        "input": "function calculateVolume(length, width, height) {\n    var volume = length * width * height;\n    console.log(calculateVolume);\n}\n\ncalculateVolume(4, 5, 6);",
        "response": "function calculateVolume(length, width, height) {\n    var volume = length * width * height;\n    console.log(volume);\n}\n\ncalculateVolume(4, 5, 6);",
        "output": "function calculateVolume(length, width, height) {\n    var volume = length * width * height;\n    console.log(volume);\n}\n\ncalculateVolume(4, 5, 6);"
    },
    {
        "instruction": "Using shell script, create a script to list all files in the current directory and display their size in human-readable format.",
        "input": "",
        "response": "#!/bin/sh\ncurrent_directory=$(pwd)\nls -lh $current_directory",
        "output": "#!/bin/sh\ncurrent_directory=$(pwd)\nls -lh $current_directory"
    },
    {
        "instruction": "Write a Python function that takes a list of strings and returns a dictionary with the count of occurrences of each character across all the strings.",
        "input": "['apple', 'orange', 'banana']",
        "response": "def count_characters(strings):\n    char_count = {}\n    for s in strings:\n        for c in s:\n            char_count[c] = char_count.get(c, 0) + 1\n    return char_count\n\nexample_list = ['apple', 'orange', 'banana']\nresult = count_characters(example_list)\nprint(result)",
        "output": "def count_characters(strings):\n    char_count = {}\n    for s in strings:\n        for c in s:\n            char_count[c] = char_count.get(c, 0) + 1\n    return char_count\n\nexample_list = ['apple', 'orange', 'banana']\nresult = count_characters(example_list)\nprint(result)"
    },
    {
        "instruction": "Implement a Java class that represents a Circle with a given radius, and provide methods to calculate its area and perimeter.",
        "input": "Radius: 5",
        "response": "public class Circle {\n\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double getArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public double getPerimeter() {\n        return 2 * Math.PI * radius;\n    }\n}\n\nCircle circle = new Circle(5);\nSystem.out.println(\"Area: \" + circle.getArea());\nSystem.out.println(\"Perimeter: \" + circle.getPerimeter());",
        "output": "public class Circle {\n\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double getArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public double getPerimeter() {\n        return 2 * Math.PI * radius;\n    }\n}\n\nCircle circle = new Circle(5);\nSystem.out.println(\"Area: \" + circle.getArea());\nSystem.out.println(\"Perimeter: \" + circle.getPerimeter());"
    },
    {
        "instruction": "Design a SQL query for the following database schema and requirements.",
        "input": "Database schema: employees (id INT, name VARCHAR, department_id INT), departments (id INT, name VARCHAR)\n\nRequirements: List all employees along with their department names, ordered by department name and then employee name.",
        "response": "SELECT employees.name AS Employee, departments.name AS Department\nFROM employees\nJOIN departments ON employees.department_id = departments.id\nORDER BY departments.name, employees.name;",
        "output": "SELECT employees.name AS Employee, departments.name AS Department\nFROM employees\nJOIN departments ON employees.department_id = departments.id\nORDER BY departments.name, employees.name;"
    },
    {
        "instruction": "Fix the syntax error in this piece of JavaScript code.",
        "input": "const addNumbers = (a, b) = {\n    return a + b;\n};\n\nconsole.log(addNumbers(3, 4))",
        "response": "const addNumbers = (a, b) => {\n    return a + b;\n};\n\nconsole.log(addNumbers(3, 4));",
        "output": "const addNumbers = (a, b) => {\n    return a + b;\n};\n\nconsole.log(addNumbers(3, 4));"
    },
    {
        "instruction": "Create a Python function that accepts a string of user-submitted text and sanitizes it by removing any HTML tags.",
        "input": "<strong>This is</strong> some <em>sample</em> text with <i>HTML</i> tags.",
        "response": "import re\n\ndef sanitize_text(text):\n    clean_text = re.sub('<[^>]*>', '', text)\n    return clean_text",
        "output": "import re\n\ndef sanitize_text(text):\n    clean_text = re.sub('<[^>]*>', '', text)\n    return clean_text"
    },
    {
        "instruction": "How can I write a Java method that reverses a given string?",
        "input": "reverseString(\"Hello, world!\")",
        "response": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder(input);\n    return reversed.reverse().toString();\n}",
        "output": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder(input);\n    return reversed.reverse().toString();\n}"
    },
    {
        "instruction": "Explain the purpose and usage of the C++ standard template library (STL) container called 'unordered_map', then demonstrate a simple example of its use to store and retrieve key-value pairs.",
        "input": "",
        "response": "The 'unordered_map' is an STL container in C++ that represents an associative array, enabling the storage and retrieval of key-value pairs. It supports constant time average lookup, insertion, and deletion operations in most cases.\n\nExample usage:\n\n```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, int> age_map;\n\n    age_map[\"Alice\"] = 30;\n    age_map[\"Bob\"] = 25;\n\n    std::cout << \"Alice's age: \" << age_map[\"Alice\"] << std::endl;\n    std::cout << \"Bob's age: \" << age_map[\"Bob\"] << std::endl;\n\n    return 0;\n}\n```",
        "output": "The 'unordered_map' is an STL container in C++ that represents an associative array, enabling the storage and retrieval of key-value pairs. It supports constant time average lookup, insertion, and deletion operations in most cases.\n\nExample usage:\n\n```cpp\n#include <iostream>\n#include <unordered_map>\n#include <string>\n\nint main() {\n    std::unordered_map<std::string, int> age_map;\n\n    age_map[\"Alice\"] = 30;\n    age_map[\"Bob\"] = 25;\n\n    std::cout << \"Alice's age: \" << age_map[\"Alice\"] << std::endl;\n    std::cout << \"Bob's age: \" << age_map[\"Bob\"] << std::endl;\n\n    return 0;\n}\n```"
    },
    {
        "instruction": "Write a shell script that checks if a directory exists, and if not, creates the directory with the given pathname.",
        "input": "~/my_new_directory",
        "response": "#!/bin/sh\n\ndir_path=\"~/my_new_directory\"\n\nif [ ! -d \"$dir_path\" ]; then\n  mkdir -p \"$dir_path\"\n  echo \"Directory created: $dir_path\"\nelse\n  echo \"Directory already exists: $dir_path\"\nfi",
        "output": "#!/bin/sh\n\ndir_path=\"~/my_new_directory\"\n\nif [ ! -d \"$dir_path\" ]; then\n  mkdir -p \"$dir_path\"\n  echo \"Directory created: $dir_path\"\nelse\n  echo \"Directory already exists: $dir_path\"\nfi"
    },
    {
        "instruction": "Create a Python function called 'convert_seconds' that takes an integer input for the total number of seconds, and returns a tuple containing hours, minutes, and the remaining seconds.",
        "input": "",
        "response": "def convert_seconds(total_seconds):\n    hours = total_seconds // 3600\n    minutes = (total_seconds % 3600) // 60\n    seconds = total_seconds % 60\n    return (hours, minutes, seconds)",
        "output": "def convert_seconds(total_seconds):\n    hours = total_seconds // 3600\n    minutes = (total_seconds % 3600) // 60\n    seconds = total_seconds % 60\n    return (hours, minutes, seconds)"
    },
    {
        "instruction": "Explain the purpose of 'import' and 'from' statements in Python and provide an example for each.",
        "input": "",
        "response": "'import' in Python is used to load a module into a script, giving you access to its functions, classes, and attributes. Example:\n\nimport math\n\n'from' is used in conjunction with 'import' to import specific elements from a module, reducing the need to reference the module name each time you use the element. Example:\n\nfrom math import sqrt",
        "output": "'import' in Python is used to load a module into a script, giving you access to its functions, classes, and attributes. Example:\n\nimport math\n\n'from' is used in conjunction with 'import' to import specific elements from a module, reducing the need to reference the module name each time you use the element. Example:\n\nfrom math import sqrt"
    },
    {
        "instruction": "In JavaScript, what is the difference between '==' and '==='? Provide an example of correct usage for each operator.",
        "input": "",
        "response": "In JavaScript, '==' checks if the values of two operands are equal, allowing type coercion, meaning that if the operands are of different types, one will be converted to match the other's type. Example:\n\n'5' == 5   //returns true\n\n'===' checks for strict equality, meaning that it checks if the values and the types of the operands are equal. Example:\n\n'5' === 5  //returns false",
        "output": "In JavaScript, '==' checks if the values of two operands are equal, allowing type coercion, meaning that if the operands are of different types, one will be converted to match the other's type. Example:\n\n'5' == 5   //returns true\n\n'===' checks for strict equality, meaning that it checks if the values and the types of the operands are equal. Example:\n\n'5' === 5  //returns false"
    },
    {
        "instruction": "Write a Shell script to count the number of files in a directory specified as a command-line argument, excluding subdirectories.",
        "input": "Example user input from command line: ./count_files.sh /path/to/directory",
        "response": "#!/bin/sh\ndir=$1\nfile_count=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\necho \"Number of files in the directory: $file_count\"",
        "output": "#!/bin/sh\ndir=$1\nfile_count=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\necho \"Number of files in the directory: $file_count\""
    },
    {
        "instruction": "Create a Python function that calculates the factorial of a given number.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 6\nprint('The factorial of', number, 'is', factorial(number))",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 6\nprint('The factorial of', number, 'is', factorial(number))"
    },
    {
        "instruction": "How do I write a Java function that generates a random number between two given integers, min and max?",
        "input": "1, 10",
        "response": "import java.util.Random;\n\nclass RandomNumberGenerator {\n    public static int generateRandomNumber(int min, int max) {\n        Random random = new Random();\n        return random.nextInt((max - min) + 1) + min;\n    }\n\n    public static void main(String[] args) {\n        int min = 1;\n        int max = 10;\n        int randomNumber = generateRandomNumber(min, max);\n        System.out.println('Random number between ' + min + ' and ' + max + ': ' + randomNumber);\n    }\n}",
        "output": "import java.util.Random;\n\nclass RandomNumberGenerator {\n    public static int generateRandomNumber(int min, int max) {\n        Random random = new Random();\n        return random.nextInt((max - min) + 1) + min;\n    }\n\n    public static void main(String[] args) {\n        int min = 1;\n        int max = 10;\n        int randomNumber = generateRandomNumber(min, max);\n        System.out.println('Random number between ' + min + ' and ' + max + ': ' + randomNumber);\n    }\n}"
    },
    {
        "instruction": "Provide a C++ implementation of a bubble sort algorithm for an array of integers.",
        "input": "int[] arr = {64, 34, 25, 12, 22, 11, 90};",
        "response": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++)\n        for (int j = 0; j < n-i-1; j++)\n            if (arr[j] > arr[j+1])\n                swap(arr[j], arr[j+1]);\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr)/sizeof(arr[0]);\n\n    bubbleSort(arr, n);\n\n    std::cout << 'Sorted array: ';\n    for(int i=0; i<n; i++)\n        std::cout << arr[i] << ' ';\n    std::cout << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++)\n        for (int j = 0; j < n-i-1; j++)\n            if (arr[j] > arr[j+1])\n                swap(arr[j], arr[j+1]);\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr)/sizeof(arr[0]);\n\n    bubbleSort(arr, n);\n\n    std::cout << 'Sorted array: ';\n    for(int i=0; i<n; i++)\n        std::cout << arr[i] << ' ';\n    std::cout << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Shell script to change file permissions for a file named 'example.txt' to be readable, writable, and executable by the file owner, readable and executable by group, and readable by others.",
        "input": "example.txt",
        "response": "#!/bin/sh\n\nfile='example.txt'\nchmod u+rwx,g+rx,o+r ${file}",
        "output": "#!/bin/sh\n\nfile='example.txt'\nchmod u+rwx,g+rx,o+r ${file}"
    },
    {
        "instruction": "Create a C++ program that prompts the user for the length and width of a rectangle and calculates its area and perimeter.",
        "input": "",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double length, width, area, perimeter;\n\n    cout << \"Enter the length of the rectangle: \";\n    cin >> length;\n\n    cout << \"Enter the width of the rectangle: \";\n    cin >> width;\n\n    area = length * width;\n    perimeter = 2 * (length + width);\n\n    cout << \"Area: \" << area << endl;\n    cout << \"Perimeter: \" << perimeter << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double length, width, area, perimeter;\n\n    cout << \"Enter the length of the rectangle: \";\n    cin >> length;\n\n    cout << \"Enter the width of the rectangle: \";\n    cin >> width;\n\n    area = length * width;\n    perimeter = 2 * (length + width);\n\n    cout << \"Area: \" << area << endl;\n    cout << \"Perimeter: \" << perimeter << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Java method that takes an array of integers as input and returns the array sorted in ascending order.",
        "input": "",
        "response": "public int[] sortArray(int[] array) {\n    int temp;\n    for (int i = 0; i < array.length - 1; i++) {\n        for (int j = i + 1; j < array.length; j++) {\n            if (array[i] > array[j]) {\n                temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n    }\n    return array;\n}",
        "output": "public int[] sortArray(int[] array) {\n    int temp;\n    for (int i = 0; i < array.length - 1; i++) {\n        for (int j = i + 1; j < array.length; j++) {\n            if (array[i] > array[j]) {\n                temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n    }\n    return array;\n}"
    },
    {
        "instruction": "Find the missing part in the Python function to calculate the factorial of a given number n using recursion.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * _____(n - 1)",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "Given a code snippet in JavaScript, explain what the following section of code does:",
        "input": "var array = [5, 3, 6];\nvar max = array.reduce((a, b) => a > b ? a : b);",
        "response": "The given JavaScript code creates an array 'array' with elements 5, 3, and 6. Then, it uses the 'reduce()' method to find the maximum value in the array. The 'reduce()' method takes a function as its argument, which is a callback function with parameters 'a' and 'b'. The callback function compares 'a' and 'b' and returns the greater value between the two. 'max' will store the maximum value found after applying the 'reduce()' method to the array.",
        "output": "The given JavaScript code creates an array 'array' with elements 5, 3, and 6. Then, it uses the 'reduce()' method to find the maximum value in the array. The 'reduce()' method takes a function as its argument, which is a callback function with parameters 'a' and 'b'. The callback function compares 'a' and 'b' and returns the greater value between the two. 'max' will store the maximum value found after applying the 'reduce()' method to the array."
    },
    {
        "instruction": "Create a C++ function that checks if an input string is a palindrome. Return true if it is a palindrome and false if it is not.",
        "input": "madam",
        "response": "#include <string>\n#include <algorithm>\n#include <iostream>\n\nbool isPalindrome(const std::string& input) {\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    return input == reversed;\n}\n\nint main() {\n    std::string input = \"madam\";\n    bool result = isPalindrome(input);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}",
        "output": "#include <string>\n#include <algorithm>\n#include <iostream>\n\nbool isPalindrome(const std::string& input) {\n    std::string reversed(input);\n    std::reverse(reversed.begin(), reversed.end());\n    return input == reversed;\n}\n\nint main() {\n    std::string input = \"madam\";\n    bool result = isPalindrome(input);\n    std::cout << std::boolalpha << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Using JavaScript, write a function to sort an array of integers in ascending order.",
        "input": "[4, 3, 9, 1, 8]",
        "response": "function sortIntegers(arr) {\n    return arr.sort((a, b) => a - b);\n}\n\nlet input = [4, 3, 9, 1, 8];\nlet sortedArray = sortIntegers(input);\nconsole.log(sortedArray);",
        "output": "function sortIntegers(arr) {\n    return arr.sort((a, b) => a - b);\n}\n\nlet input = [4, 3, 9, 1, 8];\nlet sortedArray = sortIntegers(input);\nconsole.log(sortedArray);"
    },
    {
        "instruction": "Identify and fix the syntax error(s) in the following Python code snippet.",
        "input": "def print_numbers(n):\n    for i in range(1, n)\n        print(i, end=' ')\n\nprint_numbers(10",
        "response": "def print_numbers(n):\n    for i in range(1, n + 1):\n        print(i, end=' ')\n\nprint_numbers(10)",
        "output": "def print_numbers(n):\n    for i in range(1, n + 1):\n        print(i, end=' ')\n\nprint_numbers(10)"
    },
    {
        "instruction": "Write a Java program that takes two strings as input and concatenates them.",
        "input": "Hello, world!",
        "response": "public class ConcatenateStrings {\n\n    public static void main(String[] args) {\n        String s1 = \"Hello\";\n        String s2 = \"world!\";\n        System.out.println(concatenate(s1, s2));\n    }\n\n    public static String concatenate(String a, String b) {\n        return a + \" \" + b;\n    }\n\n}",
        "output": "public class ConcatenateStrings {\n\n    public static void main(String[] args) {\n        String s1 = \"Hello\";\n        String s2 = \"world!\";\n        System.out.println(concatenate(s1, s2));\n    }\n\n    public static String concatenate(String a, String b) {\n        return a + \" \" + b;\n    }\n\n}"
    },
    {
        "instruction": "Given the following JavaScript code, identify the syntax error(s) and provide the corrected version of the code.",
        "input": "function fibonacci(n) {\n    if (n <= 1)\n        return n;\n    else\n        return fibonacci(n-1) + fibonacci(n-2);\n}\nconsole.log(fibonacci(10);",
        "response": "The given JavaScript code has a syntax error: the missing closing parenthesis in the `console.log` function call. Here's the corrected version of the code:\n\nfunction fibonacci(n) {\n    if (n <= 1)\n        return n;\n    else\n        return fibonacci(n-1) + fibonacci(n-2);\n}\nconsole.log(fibonacci(10));",
        "output": "The given JavaScript code has a syntax error: the missing closing parenthesis in the `console.log` function call. Here's the corrected version of the code:\n\nfunction fibonacci(n) {\n    if (n <= 1)\n        return n;\n    else\n        return fibonacci(n-1) + fibonacci(n-2);\n}\nconsole.log(fibonacci(10));"
    },
    {
        "instruction": "Rewrite the provided recursive Python function to find the factorial of a number as an iterative function.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "response": "Here is the iterative version of the provided recursive Python function to find the factorial of a number:\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
        "output": "Here is the iterative version of the provided recursive Python function to find the factorial of a number:\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"
    },
    {
        "instruction": "Translate the following Python code to Java code:",
        "input": "def greet(name):\n    print(f'Hello, {name}!')",
        "response": "Here is the Java equivalent of the provided Python code:\n\npublic class Main {\n    public static void greet(String name) {\n        System.out.printf(\"Hello, %s!\", name);\n    }\n\n    public static void main(String[] args) {\n        greet(\"John\");\n    }\n}",
        "output": "Here is the Java equivalent of the provided Python code:\n\npublic class Main {\n    public static void greet(String name) {\n        System.out.printf(\"Hello, %s!\", name);\n    }\n\n    public static void main(String[] args) {\n        greet(\"John\");\n    }\n}"
    },
    {
        "instruction": "Design a C function to calculate the average value of an array of floating-point numbers. The function will receive two parameters: a pointer to the array and the number of elements in the array.",
        "input": "",
        "response": "#include <stdio.h>\n\nfloat average(float *array, int size) {\n    float sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += array[i];\n    }\n    return sum / size;\n}\n\nint main() {\n    float numbers[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    int array_size = sizeof(numbers)/sizeof(numbers[0]);\n    float avg = average(numbers, array_size);\n    printf(\"Average: %.2f\\n\", avg);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nfloat average(float *array, int size) {\n    float sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += array[i];\n    }\n    return sum / size;\n}\n\nint main() {\n    float numbers[] = {1.0, 2.0, 3.0, 4.0, 5.0};\n    int array_size = sizeof(numbers)/sizeof(numbers[0]);\n    float avg = average(numbers, array_size);\n    printf(\"Average: %.2f\\n\", avg);\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function to calculate the sum of all numbers present in an array.",
        "input": "[3, 1, 7, 8]",
        "response": "function sumOfNumbers(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nconst numbers = [3, 1, 7, 8];\nconsole.log('Sum of all numbers: ' + sumOfNumbers(numbers));",
        "output": "function sumOfNumbers(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nconst numbers = [3, 1, 7, 8];\nconsole.log('Sum of all numbers: ' + sumOfNumbers(numbers));"
    },
    {
        "instruction": "How can I write a C++ program to check if a number is prime?",
        "input": "17",
        "response": "#include<iostream>\nusing namespace std;\n\nbool is_prime(int number) {\n    if (number <= 1) return false;\n    for (int i = 2; i <= sqrt(number); i++) {\n        if (number % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int n = 17;\n    if (is_prime(n)) cout << n << \" is a prime number.\" << endl;\n    else cout << n << \" is not a prime number.\" << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nbool is_prime(int number) {\n    if (number <= 1) return false;\n    for (int i = 2; i <= sqrt(number); i++) {\n        if (number % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int n = 17;\n    if (is_prime(n)) cout << n << \" is a prime number.\" << endl;\n    else cout << n << \" is not a prime number.\" << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Python function that takes a string and returns a dictionary with the count of each character in the string.",
        "input": "\"hello world\"",
        "response": "def count_chars(input_str):\n    char_count = {}\n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\ninput_string = 'hello world'\nresult = count_chars(input_string)\nprint(result)",
        "output": "def count_chars(input_str):\n    char_count = {}\n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\ninput_string = 'hello world'\nresult = count_chars(input_string)\nprint(result)"
    },
    {
        "instruction": "In C#, write a simple program to perform a basic arithmetic operation (+, -, *, /) on two numbers given as input.",
        "input": "5, 10, '+'",
        "response": "using System;\n\nnamespace BasicArithmetic\n{\n    class Program\n    {\n        static double PerformOperation(double num1, double num2, char operation)\n        {\n            switch (operation)\n            {\n                case '+': return num1 + num2;\n                case '-': return num1 - num2;\n                case '*': return num1 * num2;\n                case '/': return num1 / num2;\n                default: throw new ArgumentException(\"Invalid operation\");\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            double number1 = 5;\n            double number2 = 10;\n            char operation = '+';\n\n            double result = PerformOperation(number1, number2, operation);\n            Console.WriteLine(\"Result: \" + result);\n        }\n    }\n}",
        "output": "using System;\n\nnamespace BasicArithmetic\n{\n    class Program\n    {\n        static double PerformOperation(double num1, double num2, char operation)\n        {\n            switch (operation)\n            {\n                case '+': return num1 + num2;\n                case '-': return num1 - num2;\n                case '*': return num1 * num2;\n                case '/': return num1 / num2;\n                default: throw new ArgumentException(\"Invalid operation\");\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            double number1 = 5;\n            double number2 = 10;\n            char operation = '+';\n\n            double result = PerformOperation(number1, number2, operation);\n            Console.WriteLine(\"Result: \" + result);\n        }\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of strings and returns an object representing the count of each string in the array.",
        "input": "['apple', 'orange', 'apple', 'banana', 'orange', 'apple']",
        "response": "function countStrings(arr) {\n    let result = {};\n    for (let i = 0; i < arr.length; i++) {\n        if (result.hasOwnProperty(arr[i])) {\n            result[arr[i]]++;\n        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n}\n\nlet input = ['apple', 'orange', 'apple', 'banana', 'orange', 'apple'];\nconsole.log(countStrings(input));",
        "output": "function countStrings(arr) {\n    let result = {};\n    for (let i = 0; i < arr.length; i++) {\n        if (result.hasOwnProperty(arr[i])) {\n            result[arr[i]]++;\n        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n}\n\nlet input = ['apple', 'orange', 'apple', 'banana', 'orange', 'apple'];\nconsole.log(countStrings(input));"
    },
    {
        "instruction": "What would be the output of this Java code snippet after fixing any syntax errors?",
        "input": "public class Main {\n    public static void main(String[] args) {\n        String[] words = {\"hello\", \"world\"};\n        for (String word : words) {\n            System.ou.println(word);\n        }\n    }\n}",
        "response": "To fix the syntax error, replace 'System.ou.println' with 'System.out.println'.\n\nAfter fixing:\npublic class Main {\n    public static void main(String[] args) {\n        String[] words = {\"hello\", \"world\"};\n        for (String word : words) {\n            System.out.println(word);\n        }\n    }\n}\n\nThe output will be:\nhello\nworld",
        "output": "To fix the syntax error, replace 'System.ou.println' with 'System.out.println'.\n\nAfter fixing:\npublic class Main {\n    public static void main(String[] args) {\n        String[] words = {\"hello\", \"world\"};\n        for (String word : words) {\n            System.out.println(word);\n        }\n    }\n}\n\nThe output will be:\nhello\nworld"
    },
    {
        "instruction": "Translate the following Python code that reads a CSV file and updates the specified column to lowercase into its C# equivalent:",
        "input": "import csv\n\nwith open('input.csv', 'r') as infile, open('output.csv', 'w') as outfile:\n    reader = csv.reader(infile)\n    writer = csv.writer(outfile)\n\n    for row in reader:\n        row[2] = row[2].lower()\n        writer.writerow(row)",
        "response": "using System;\nusing System.IO;\nusing CsvHelper;\n\npublic class CsvLowercaser {\n    public static void Main(string[] args) {\n        using (var reader = new StreamReader(\"input.csv\"))\n        using (var writer = new StreamWriter(\"output.csv\"))\n        using (var csvReader = new CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture))\n        using (var csvWriter = new CsvWriter(writer, System.Globalization.CultureInfo.InvariantCulture)) {\n            var records = csvReader.GetRecords<dynamic>();\n            foreach (var record in records) {\n                record.Field3 = record.Field3.ToLower();\n                csvWriter.WriteRecord(record);\n            }\n        }\n    }\n}",
        "output": "using System;\nusing System.IO;\nusing CsvHelper;\n\npublic class CsvLowercaser {\n    public static void Main(string[] args) {\n        using (var reader = new StreamReader(\"input.csv\"))\n        using (var writer = new StreamWriter(\"output.csv\"))\n        using (var csvReader = new CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture))\n        using (var csvWriter = new CsvWriter(writer, System.Globalization.CultureInfo.InvariantCulture)) {\n            var records = csvReader.GetRecords<dynamic>();\n            foreach (var record in records) {\n                record.Field3 = record.Field3.ToLower();\n                csvWriter.WriteRecord(record);\n            }\n        }\n    }\n}"
    },
    {
        "instruction": "Implement a shell script that retrieves the Kubernetes pod details running under a particular namespace and save it in a file named '<namespace>_pods.txt'.",
        "input": "Namespace: mynamespace",
        "response": "#!/bin/bash\n\nNAMESPACE='mynamespace'\nOUTPUT_FILE=\"${NAMESPACE}_pods.txt\"\n\nkubectl get pods -n $NAMESPACE > $OUTPUT_FILE\n\necho \"Pod details saved to ${OUTPUT_FILE}\"",
        "output": "#!/bin/bash\n\nNAMESPACE='mynamespace'\nOUTPUT_FILE=\"${NAMESPACE}_pods.txt\"\n\nkubectl get pods -n $NAMESPACE > $OUTPUT_FILE\n\necho \"Pod details saved to ${OUTPUT_FILE}\""
    },
    {
        "instruction": "Create a Java method that takes a URL as input and returns the number of occurrences of a specified word.",
        "input": "https://www.example.com\nword: technology",
        "response": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.URL;\n\npublic class WordCounter {\n\n    public static int countWordOccurrences(String urlString, String word) throws Exception {\n        URL url = new URL(urlString);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String line;\n        int count = 0;\n\n        while ((line = reader.readLine()) != null) {\n            String[] words = line.split(\"\\\\W+\");\n            for (String currentWord : words) {\n                if (currentWord.equalsIgnoreCase(word)) {\n                    count++;\n                }\n            }\n        }\n\n        reader.close();\n        return count;\n    }\n}",
        "output": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.URL;\n\npublic class WordCounter {\n\n    public static int countWordOccurrences(String urlString, String word) throws Exception {\n        URL url = new URL(urlString);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String line;\n        int count = 0;\n\n        while ((line = reader.readLine()) != null) {\n            String[] words = line.split(\"\\\\W+\");\n            for (String currentWord : words) {\n                if (currentWord.equalsIgnoreCase(word)) {\n                    count++;\n                }\n            }\n        }\n\n        reader.close();\n        return count;\n    }\n}"
    },
    {
        "instruction": "How can we fix a divide-by-zero error in a Python script with the following code?",
        "input": "a = 10\nb = 0\nc = a / b",
        "response": "a = 10\nb = 0\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    print('Error: Division by zero')\n    c = None",
        "output": "a = 10\nb = 0\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    print('Error: Division by zero')\n    c = None"
    },
    {
        "instruction": "Write a C++ program that reads the maximum temperature values for each day of a week from user input and outputs the average temperature.",
        "input": "32.5 30.0 28.5 31.0 29.5 27.0 26.5",
        "response": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> temperatures;\n    double sum = 0;\n\n    for (int i = 0; i < 7; i++) {\n        double temp;\n        std::cin >> temp;\n        temperatures.push_back(temp);\n        sum += temp;\n    }\n\n    double avg = sum / 7;\n    std::cout << \"Average temperature: \" << avg << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<double> temperatures;\n    double sum = 0;\n\n    for (int i = 0; i < 7; i++) {\n        double temp;\n        std::cin >> temp;\n        temperatures.push_back(temp);\n        sum += temp;\n    }\n\n    double avg = sum / 7;\n    std::cout << \"Average temperature: \" << avg << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Explain a JavaScript function that takes an array of numbers as input and returns the sum of the even numbers squared.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function sumEvenSquares(numbers) {\n    let sum = 0;\n    for (const num of numbers) {\n        if (num % 2 === 0) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n\n// This function takes an array of numbers as input.\n// It initializes a sum variable to 0.\n// It iterates through the input array using a for...of loop.\n// If the current number is even (i.e., divisible by 2), it squares the number and adds it to the sum.\n// Finally, it returns the sum of the even numbers squared.",
        "output": "function sumEvenSquares(numbers) {\n    let sum = 0;\n    for (const num of numbers) {\n        if (num % 2 === 0) {\n            sum += num * num;\n        }\n    }\n    return sum;\n}\n\n// This function takes an array of numbers as input.\n// It initializes a sum variable to 0.\n// It iterates through the input array using a for...of loop.\n// If the current number is even (i.e., divisible by 2), it squares the number and adds it to the sum.\n// Finally, it returns the sum of the even numbers squared."
    },
    {
        "instruction": "Design a Python class that represents a shopping cart. The class should contain methods to add items with a specified price, remove items, and calculate the total cost of the items in the cart.",
        "input": "",
        "response": "class ShoppingCart:\n    def __init__(self):\n        self.items = {}\n\n    def add_item(self, item, price):\n        self.items[item] = price\n\n    def remove_item(self, item):\n        if item in self.items:\n            del self.items[item]\n\n    def calculate_total(self):\n        return sum(self.items.values())\n\nshopping_cart = ShoppingCart()\nshopping_cart.add_item('apple', 1.5)\nshopping_cart.add_item('banana', 0.75)\ntotal_cost = shopping_cart.calculate_total()\nprint(total_cost)",
        "output": "class ShoppingCart:\n    def __init__(self):\n        self.items = {}\n\n    def add_item(self, item, price):\n        self.items[item] = price\n\n    def remove_item(self, item):\n        if item in self.items:\n            del self.items[item]\n\n    def calculate_total(self):\n        return sum(self.items.values())\n\nshopping_cart = ShoppingCart()\nshopping_cart.add_item('apple', 1.5)\nshopping_cart.add_item('banana', 0.75)\ntotal_cost = shopping_cart.calculate_total()\nprint(total_cost)"
    },
    {
        "instruction": "Write a function in Java that takes a string and replaces every instance of the word 'word' with the word 'phrase'.",
        "input": "The quick brown word jumps over the lazy word.",
        "response": "public static String replaceWordWithPhrase(String input) {\n    return input.replaceAll(\"\\\\bword\\\\b\", \"phrase\");\n}\n\nString input = \"The quick brown word jumps over the lazy word.\";\nString output = replaceWordWithPhrase(input);\nSystem.out.println(output);",
        "output": "public static String replaceWordWithPhrase(String input) {\n    return input.replaceAll(\"\\\\bword\\\\b\", \"phrase\");\n}\n\nString input = \"The quick brown word jumps over the lazy word.\";\nString output = replaceWordWithPhrase(input);\nSystem.out.println(output);"
    },
    {
        "instruction": "How can you fix the following JavaScript code to sort an array of numbers in ascending order correctly?",
        "input": "const numbers = [5, 3, 10, 1];\nnumbers.sort();\nconsole.log(numbers);",
        "response": "const numbers = [5, 3, 10, 1];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers);",
        "output": "const numbers = [5, 3, 10, 1];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers);"
    },
    {
        "instruction": "Create a C++ program that prints the first 'n' prime numbers, where 'n' is provided by the user.",
        "input": "5",
        "response": "#include <iostream>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int n, count = 0, number = 2;\n    std::cout << \"Enter the number of primes to print: \";\n    std::cin >> n;\n\n    while (count < n) {\n        if (isPrime(number)) {\n            std::cout << number << \" \";\n            count++;\n        }\n        number++;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int n, count = 0, number = 2;\n    std::cout << \"Enter the number of primes to print: \";\n    std::cin >> n;\n\n    while (count < n) {\n        if (isPrime(number)) {\n            std::cout << number << \" \";\n            count++;\n        }\n        number++;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that accepts two timestamps in the format 'YYYY-MM-DD HH:MM:SS' and calculates the time difference between them in seconds.",
        "input": "Timestamp1: '2022-03-05 08:30:00', Timestamp2: '2022-03-05 09:45:00'",
        "response": "from datetime import datetime\n\ndef time_difference(timestamp1, timestamp2):\n    format_str = '%Y-%m-%d %H:%M:%S'\n    datetime1 = datetime.strptime(timestamp1, format_str)\n    datetime2 = datetime.strptime(timestamp2, format_str)\n    delta = datetime2 - datetime1\n    return abs(delta.total_seconds())\n\n# Example usage\ntimestamp1 = '2022-03-05 08:30:00'\ntimestamp2 = '2022-03-05 09:45:00'\nprint('Time difference in seconds:', time_difference(timestamp1, timestamp2))",
        "output": "from datetime import datetime\n\ndef time_difference(timestamp1, timestamp2):\n    format_str = '%Y-%m-%d %H:%M:%S'\n    datetime1 = datetime.strptime(timestamp1, format_str)\n    datetime2 = datetime.strptime(timestamp2, format_str)\n    delta = datetime2 - datetime1\n    return abs(delta.total_seconds())\n\n# Example usage\ntimestamp1 = '2022-03-05 08:30:00'\ntimestamp2 = '2022-03-05 09:45:00'\nprint('Time difference in seconds:', time_difference(timestamp1, timestamp2))"
    },
    {
        "instruction": "Write a shell script that takes a directory path as an argument and displays the total number of directories and files in that directory.",
        "input": "/home/user/directory",
        "response": "#!/bin/bash\n\ndir=\"$1\"\n\ncount_files() {\n    find \"$dir\" -type f | wc -l\n}\n\ncount_directories() {\n    find \"$dir\" -type d | wc -l\n}\n\nnumber_of_files=$(count_files)\nnumber_of_directories=$(count_directories)\n\necho \"Total files: $number_of_files\"\necho \"Total directories: $number_of_directories\"",
        "output": "#!/bin/bash\n\ndir=\"$1\"\n\ncount_files() {\n    find \"$dir\" -type f | wc -l\n}\n\ncount_directories() {\n    find \"$dir\" -type d | wc -l\n}\n\nnumber_of_files=$(count_files)\nnumber_of_directories=$(count_directories)\n\necho \"Total files: $number_of_files\"\necho \"Total directories: $number_of_directories\""
    },
    {
        "instruction": "Explain how the requestAnimationFrame function works in JavaScript and write some example code that demonstrates its usage.",
        "input": "",
        "response": "The requestAnimationFrame function in JavaScript is a method that helps you update animations on the screen efficiently. This function takes a callback as an argument, which is invoked just before the browser is ready to repaint the screen. The callback contains the logic to update the animation, and the function ensures that the animation is in sync with the display refresh rate (usually 60Hz) and automatically optimizes the performance of animations.\n\nExample code:\n```javascript\nfunction animate() {\n    // Update animation properties, such as position or size\n\n    // Request the next frame to be drawn\n    requestAnimationFrame(animate);\n}\n\n// Start the animation loop\nrequestAnimationFrame(animate);\n```",
        "output": "The requestAnimationFrame function in JavaScript is a method that helps you update animations on the screen efficiently. This function takes a callback as an argument, which is invoked just before the browser is ready to repaint the screen. The callback contains the logic to update the animation, and the function ensures that the animation is in sync with the display refresh rate (usually 60Hz) and automatically optimizes the performance of animations.\n\nExample code:\n```javascript\nfunction animate() {\n    // Update animation properties, such as position or size\n\n    // Request the next frame to be drawn\n    requestAnimationFrame(animate);\n}\n\n// Start the animation loop\nrequestAnimationFrame(animate);\n```"
    },
    {
        "instruction": "How do you implement a recursive algorithm to compute the nth number in the Fibonacci sequence using C++?",
        "input": "7",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 7;\n    std::cout << \"Fibonacci number at position \" << n << \": \" << fibonacci(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 7;\n    std::cout << \"Fibonacci number at position \" << n << \": \" << fibonacci(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function to count the occurrences of each word in the given string, excluding common stop words, and return the result as an object.",
        "input": "Input string: \"To be, or not to be, that is the question: Whether 'tis nobler in the mind to suffer The slings and arrows of outrageous fortune, Or to take arms against a sea of troubles And by opposing end them.\"",
        "response": "function countWords(input) {\n    const stopWords = ['a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on', 'that', 'the', 'to', 'was', 'were', 'will', 'with'];\n    const words = input.replace(/[.,:;()'\\/-]/g, '').toLowerCase().split(' ');\n    const wordCount = {};\n    words.forEach(word => {\n        if (!stopWords.includes(word)) {\n            wordCount[word] = (wordCount[word] || 0) + 1;\n        }\n    });\n    return wordCount;\n}",
        "output": "function countWords(input) {\n    const stopWords = ['a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on', 'that', 'the', 'to', 'was', 'were', 'will', 'with'];\n    const words = input.replace(/[.,:;()'\\/-]/g, '').toLowerCase().split(' ');\n    const wordCount = {};\n    words.forEach(word => {\n        if (!stopWords.includes(word)) {\n            wordCount[word] = (wordCount[word] || 0) + 1;\n        }\n    });\n    return wordCount;\n}"
    },
    {
        "instruction": "Write a Java method that calculates the factorial of a given number using recursion.",
        "input": "",
        "response": "public static long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "public static long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "In C++, write a function that returns the Fibonacci sequence of a given length as a vector.",
        "input": "",
        "response": "#include <vector>\n\nstd::vector<int> fibonacci(size_t length) {\n    std::vector<int> fibSeq(length);\n    if (length == 0) return fibSeq;\n    fibSeq[0] = 0;\n    if (length == 1) return fibSeq;\n    fibSeq[1] = 1;\n    for (size_t i = 2; i < length; i++) {\n        fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n    }\n    return fibSeq;\n}",
        "output": "#include <vector>\n\nstd::vector<int> fibonacci(size_t length) {\n    std::vector<int> fibSeq(length);\n    if (length == 0) return fibSeq;\n    fibSeq[0] = 0;\n    if (length == 1) return fibSeq;\n    fibSeq[1] = 1;\n    for (size_t i = 2; i < length; i++) {\n        fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n    }\n    return fibSeq;\n}"
    },
    {
        "instruction": "What would be the output for the given python code?",
        "input": "list1 = [4, 2, 7, 1, 0]\nlist2 = sorted(list1)\nprint(list1)\nprint(list2)",
        "response": "The output for the given python code will be:\n[4, 2, 7, 1, 0]\n[0, 1, 2, 4, 7]",
        "output": "The output for the given python code will be:\n[4, 2, 7, 1, 0]\n[0, 1, 2, 4, 7]"
    },
    {
        "instruction": "Create a Java function that calculates the simple moving average of an array of doubles with a given window size.",
        "input": "public double[] simpleMovingAverage(double[] data, int windowSize) {\n    // your code here\n}",
        "response": "public double[] simpleMovingAverage(double[] data, int windowSize) {\n    if (windowSize <= 0) return new double[]{};\n    double[] result = new double[data.length - windowSize + 1];\n    double sum = 0;\n\tfor (int i = 0; i < windowSize; i++) {\n        sum += data[i];\n    }\n\tresult[0] = sum / windowSize;\n\tfor (int i = windowSize; i < data.length; i++) {\n\t    sum += data[i] - data[i - windowSize];\n\t    result[i - windowSize + 1] = sum / windowSize;\n\t}\n    return result;\n}",
        "output": "public double[] simpleMovingAverage(double[] data, int windowSize) {\n    if (windowSize <= 0) return new double[]{};\n    double[] result = new double[data.length - windowSize + 1];\n    double sum = 0;\n\tfor (int i = 0; i < windowSize; i++) {\n        sum += data[i];\n    }\n\tresult[0] = sum / windowSize;\n\tfor (int i = windowSize; i < data.length; i++) {\n\t    sum += data[i] - data[i - windowSize];\n\t    result[i - windowSize + 1] = sum / windowSize;\n\t}\n    return result;\n}"
    },
    {
        "instruction": "How can we fix the following JavaScript code to ensure the function 'sum' is correctly calculating the sum of two numbers?",
        "input": "function sum(a, b) {\n\treturn a+b;\n}\n\nlet total = sum(5, '3');",
        "response": "function sum(a, b) {\n\treturn parseFloat(a) + parseFloat(b);\n}\n\nlet total = sum(5, '3');",
        "output": "function sum(a, b) {\n\treturn parseFloat(a) + parseFloat(b);\n}\n\nlet total = sum(5, '3');"
    },
    {
        "instruction": "Write a C++ program that converts a given Celsius temperature to Fahrenheit, and then prints the converted value.",
        "input": "#include<iostream>\n\n// your code here",
        "response": "#include<iostream>\n\nint main() {\n    float celsius, fahrenheit;\n    std::cout << \"Enter the temperature in Celsius: \";\n    std::cin >> celsius;\n    fahrenheit = (celsius * 9.0 / 5.0) + 32.0;\n    std::cout << \"Temperature in Fahrenheit: \" << fahrenheit << std::endl;\n    return 0;\n}",
        "output": "#include<iostream>\n\nint main() {\n    float celsius, fahrenheit;\n    std::cout << \"Enter the temperature in Celsius: \";\n    std::cin >> celsius;\n    fahrenheit = (celsius * 9.0 / 5.0) + 32.0;\n    std::cout << \"Temperature in Fahrenheit: \" << fahrenheit << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "What would be the output of the following Python code that checks if a given number is prime or not?",
        "input": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(5))\nprint(is_prime(4))",
        "response": "True\nFalse",
        "output": "True\nFalse"
    },
    {
        "instruction": "Create a simple REST API in Python using Flask that accepts a POST request with a JSON payload containing a list of numbers and returns the sum of the numbers.",
        "input": "{ \"numbers\": [4, 7, 12, 3, 8] }",
        "response": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/sum', methods=['POST'])\ndef sum_numbers():\n    data = request.get_json()\n    numbers = data.get('numbers', [])\n    total = sum(numbers)\n    return jsonify({'sum': total})\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "output": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/sum', methods=['POST'])\ndef sum_numbers():\n    data = request.get_json()\n    numbers = data.get('numbers', [])\n    total = sum(numbers)\n    return jsonify({'sum': total})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Write a C program to find the greatest common divisor (GCD) of two integers using the Euclidean algorithm.",
        "input": "12, 16",
        "response": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 12;\n    int num2 = 16;\n    printf(\"GCD of %d and %d is %d\", num1, num2, gcd(num1, num2));\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 12;\n    int num2 = 16;\n    printf(\"GCD of %d and %d is %d\", num1, num2, gcd(num1, num2));\n    return 0;\n}"
    },
    {
        "instruction": "How can I parse HTML elements in Python to extract text from all paragraph tags?",
        "input": "<html><body><p>Paragraph 1</p><p>Paragraph 2</p></body></html>",
        "response": "from bs4 import BeautifulSoup\n\nhtml = \"<html><body><p>Paragraph 1</p><p>Paragraph 2</p></body></html>\"\nsoup = BeautifulSoup(html, 'html.parser')\nparagraphs = soup.find_all('p')\n\nfor p in paragraphs:\n    print(p.get_text())",
        "output": "from bs4 import BeautifulSoup\n\nhtml = \"<html><body><p>Paragraph 1</p><p>Paragraph 2</p></body></html>\"\nsoup = BeautifulSoup(html, 'html.parser')\nparagraphs = soup.find_all('p')\n\nfor p in paragraphs:\n    print(p.get_text())"
    },
    {
        "instruction": "Please provide a JavaScript function that accepts an array of strings and returns an array of the strings sorted by length in descending order.",
        "input": "[\"apple\", \"banana\", \"cherry\", \"date\"]",
        "response": "function sortByLengthDesc(strings) {\n  return strings.sort((a, b) => b.length - a.length);\n}\n\nconst fruits = [\"apple\", \"banana\", \"cherry\", \"date\"];\nconsole.log(sortByLengthDesc(fruits));",
        "output": "function sortByLengthDesc(strings) {\n  return strings.sort((a, b) => b.length - a.length);\n}\n\nconst fruits = [\"apple\", \"banana\", \"cherry\", \"date\"];\nconsole.log(sortByLengthDesc(fruits));"
    },
    {
        "instruction": "Write a Python function to convert a list of integers into a comma-separated string.",
        "input": "List of integers: [12, 23, 34, 45, 56, 67, 78]",
        "response": "def convert_list_to_string(lst):\n    return ', '.join(map(str, lst))\n\ninput_list = [12, 23, 34, 45, 56, 67, 78]\nresult = convert_list_to_string(input_list)\nprint(result)",
        "output": "def convert_list_to_string(lst):\n    return ', '.join(map(str, lst))\n\ninput_list = [12, 23, 34, 45, 56, 67, 78]\nresult = convert_list_to_string(input_list)\nprint(result)"
    },
    {
        "instruction": "Explain the purpose of the following JavaScript code snippet.",
        "input": "function factorial(n) {\n    return (n !== 1) ? n * factorial(n - 1) : 1;\n}",
        "response": "This JavaScript code snippet defines a recursive function called 'factorial' that takes a single argument (n), and calculates the factorial of the given number (n). The function multiplies n by the factorial of (n-1) if n is not equal to 1, otherwise, it returns 1 (base case).",
        "output": "This JavaScript code snippet defines a recursive function called 'factorial' that takes a single argument (n), and calculates the factorial of the given number (n). The function multiplies n by the factorial of (n-1) if n is not equal to 1, otherwise, it returns 1 (base case)."
    },
    {
        "instruction": "Fix the syntax error in the given Java code.",
        "input": "public class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 10 i++) {\n            System.out.println(i);\n        }\n    }\n}",
        "response": "public class Main {\n    public static void main(String[] args) {\n        // Fixed the missing semicolon in the loop declaration\n        for (int i = 1; i <= 10; i++) {\n            System.out.println(i);\n        }\n    }\n}",
        "output": "public class Main {\n    public static void main(String[] args) {\n        // Fixed the missing semicolon in the loop declaration\n        for (int i = 1; i <= 10; i++) {\n            System.out.println(i);\n        }\n    }\n}"
    },
    {
        "instruction": "Create a C++ program to read a text file and count the occurrences of each character in the file.",
        "input": "Filename: input.txt",
        "response": "#include <iostream>\n#include <fstream>\n#include <map>\nusing namespace std;\n\nint main() {\n    string filename = \"input.txt\";\n    ifstream input_file(filename);\n    map<char, int> char_count;\n\n    if (input_file.is_open()) {\n        char c;\n        while (input_file.get(c)) {\n            char_count[c]++;\n        }\n        input_file.close();\n    } else {\n        cout << \"Unable to open file\" << endl;\n        return 1;\n    }\n\n    for (auto const &entry : char_count) {\n        cout << entry.first << \" => \" << entry.second << endl;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <map>\nusing namespace std;\n\nint main() {\n    string filename = \"input.txt\";\n    ifstream input_file(filename);\n    map<char, int> char_count;\n\n    if (input_file.is_open()) {\n        char c;\n        while (input_file.get(c)) {\n            char_count[c]++;\n        }\n        input_file.close();\n    } else {\n        cout << \"Unable to open file\" << endl;\n        return 1;\n    }\n\n    for (auto const &entry : char_count) {\n        cout << entry.first << \" => \" << entry.second << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java method that finds and returns the number of vowels within a given input string.",
        "input": "Example input string: 'The quick brown fox jumps over the lazy dog.'",
        "response": "public int countVowels(String input) {\n    int vowelCount = 0;\n    String vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}\n\n// Usage: int vowelCount = countVowels(\"The quick brown fox jumps over the lazy dog.\");",
        "output": "public int countVowels(String input) {\n    int vowelCount = 0;\n    String vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}\n\n// Usage: int vowelCount = countVowels(\"The quick brown fox jumps over the lazy dog.\");"
    },
    {
        "instruction": "Fix the syntax errors in the given JavaScript code snippet.",
        "input": "funcion add(x, y) {\nconsol.log(\"The sum is\", x + y);\n}",
        "response": "function add(x, y) {\n    console.log(\"The sum is\", x + y);\n}\n\n// Usage: add(5, 3);",
        "output": "function add(x, y) {\n    console.log(\"The sum is\", x + y);\n}\n\n// Usage: add(5, 3);"
    },
    {
        "instruction": "How would you implement a function in Python to reverse a given string without using built-in functions or slicing?",
        "input": "Example input string: 'OpenAI GPT-3'",
        "response": "def reverse_string(s):\n    result = ''\n    for char in s:\n        result = char + result\n    return result\n\n# Usage: reversed_string = reverse_string('OpenAI GPT-3')",
        "output": "def reverse_string(s):\n    result = ''\n    for char in s:\n        result = char + result\n    return result\n\n# Usage: reversed_string = reverse_string('OpenAI GPT-3')"
    },
    {
        "instruction": "Write a Bash script that calculates and prints the sum and product of two integers provided as command-line arguments.",
        "input": "Example command: ./sum_product.sh 5 7",
        "response": "#!/bin/bash\n\nnum1=$1\nnum2=$2\n\nsum=$((num1 + num2))\nproduct=$((num1 * num2))\n\necho \"Sum: $sum\"\necho \"Product: $product\"\n\n# Save this script as sum_product.sh and make it executable with `chmod +x sum_product.sh`.\n# Usage: ./sum_product.sh 5 7",
        "output": "#!/bin/bash\n\nnum1=$1\nnum2=$2\n\nsum=$((num1 + num2))\nproduct=$((num1 * num2))\n\necho \"Sum: $sum\"\necho \"Product: $product\"\n\n# Save this script as sum_product.sh and make it executable with `chmod +x sum_product.sh`.\n# Usage: ./sum_product.sh 5 7"
    },
    {
        "instruction": "Write a Java method to find the longest increasing subsequence in a given array of integers.",
        "input": "Example array: [10, 22, 9, 33, 21, 50, 41, 60]",
        "response": "public int longestIncreasingSubsequence(int[] arr) {\n  int n = arr.length;\n  int[] lis = new int[n];\n  for (int i = 0; i < n; i++) {\n    lis[i] = 1;\n  }\n\n  for (int i = 1; i < n; i++) {\n    for (int j = 0; j < i; j++) {\n      if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n        lis[i] = lis[j] + 1;\n      }\n    }\n  }\n\n  int max = 0;\n  for (int i = 0; i < n; i++) {\n    max = Math.max(max, lis[i]);\n  }\n  return max;\n}",
        "output": "public int longestIncreasingSubsequence(int[] arr) {\n  int n = arr.length;\n  int[] lis = new int[n];\n  for (int i = 0; i < n; i++) {\n    lis[i] = 1;\n  }\n\n  for (int i = 1; i < n; i++) {\n    for (int j = 0; j < i; j++) {\n      if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n        lis[i] = lis[j] + 1;\n      }\n    }\n  }\n\n  int max = 0;\n  for (int i = 0; i < n; i++) {\n    max = Math.max(max, lis[i]);\n  }\n  return max;\n}"
    },
    {
        "instruction": "Describe how you would use the setTimeout function in JavaScript to execute a function named exampleFunction after a delay of 5 seconds.",
        "input": "",
        "response": "To execute the exampleFunction after a delay of 5 seconds, you can use the setTimeout function in JavaScript as follows:\n\nsetTimeout(exampleFunction, 5000);\n\nThe first argument of the setTimeout function is the function that you want to execute, and the second argument is the delay in milliseconds. In this case, 5000 milliseconds equals 5 seconds.",
        "output": "To execute the exampleFunction after a delay of 5 seconds, you can use the setTimeout function in JavaScript as follows:\n\nsetTimeout(exampleFunction, 5000);\n\nThe first argument of the setTimeout function is the function that you want to execute, and the second argument is the delay in milliseconds. In this case, 5000 milliseconds equals 5 seconds."
    },
    {
        "instruction": "Implement a simple HTTP server in Node.js that listens on port 3000 and responds with 'Hello, world!' when accessed.",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, world!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, world!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
    },
    {
        "instruction": "Create a C# function that takes a string input and calculates its MD5 hash. Additionally, explain how to use the System.Security.Cryptography namespace to generate the MD5 hash.",
        "input": "",
        "response": "To calculate the MD5 hash of a string input in C#, you can use the System.Security.Cryptography namespace and the MD5 class. Here's a C# function that does this:\n\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic string CalculateMD5Hash(string input)\n{\n    using (MD5 md5 = MD5.Create())\n    {\n        byte[] inputBytes = Encoding.ASCII.GetBytes(input);\n        byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < hashBytes.Length; i++)\n        {\n            sb.Append(hashBytes[i].ToString(\"X2\"));\n        }\n        return sb.ToString();\n    }\n}\n\nThis function first converts the string input to a byte array using the ASCII encoding. Then, it calls the ComputeHash method of the MD5 instance to calculate the hash. Finally, it converts the hash byte array into a hexadecimal string and returns it.",
        "output": "To calculate the MD5 hash of a string input in C#, you can use the System.Security.Cryptography namespace and the MD5 class. Here's a C# function that does this:\n\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic string CalculateMD5Hash(string input)\n{\n    using (MD5 md5 = MD5.Create())\n    {\n        byte[] inputBytes = Encoding.ASCII.GetBytes(input);\n        byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < hashBytes.Length; i++)\n        {\n            sb.Append(hashBytes[i].ToString(\"X2\"));\n        }\n        return sb.ToString();\n    }\n}\n\nThis function first converts the string input to a byte array using the ASCII encoding. Then, it calls the ComputeHash method of the MD5 instance to calculate the hash. Finally, it converts the hash byte array into a hexadecimal string and returns it."
    },
    {
        "instruction": "Create a JavaScript function that takes a string input and returns the same string with its characters sorted alphabetically.",
        "input": "",
        "response": "function sortStringAlphabetically(str) {\n  return str.split('').sort().join('');\n}",
        "output": "function sortStringAlphabetically(str) {\n  return str.split('').sort().join('');\n}"
    },
    {
        "instruction": "Write a simple Java program to calculate the area of a circle given its radius.",
        "input": "",
        "response": "public class Main {\n  public static void main(String[] args) {\n    double radius = 5;\n    double area = Math.PI * Math.pow(radius, 2);\n    System.out.println(\"Area of the circle with radius \" + radius + \" is \" + area);\n  }\n}",
        "output": "public class Main {\n  public static void main(String[] args) {\n    double radius = 5;\n    double area = Math.PI * Math.pow(radius, 2);\n    System.out.println(\"Area of the circle with radius \" + radius + \" is \" + area);\n  }\n}"
    },
    {
        "instruction": "How would you implement a basic web server in Python, using the Flask library, that displays 'Hello World' when accessed?",
        "input": "",
        "response": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World'\n\nif __name__ == '__main__':\n    app.run()",
        "output": "from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World'\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Write a Shell script that takes a directory path as an argument and outputs the total number of files in that directory.",
        "input": "",
        "response": "#!/bin/bash\ndir_path=$1\nfile_count=$(find $dir_path -type f | wc -l)\necho \"Total number of files in $dir_path: $file_count\"",
        "output": "#!/bin/bash\ndir_path=$1\nfile_count=$(find $dir_path -type f | wc -l)\necho \"Total number of files in $dir_path: $file_count\""
    },
    {
        "instruction": "Write a Python function that takes a JSON string and saves it to a file.",
        "input": "{\"greetings\": \"Hello, world!\"}",
        "response": "import json\n\ndef save_json_to_file(json_string, file_name):\n    with open(file_name, 'w') as file:\n        json.dump(json_string, file)\n\njson_string = json.loads('{\"greetings\": \"Hello, world!\"}')\nsave_json_to_file(json_string, 'output.json')",
        "output": "import json\n\ndef save_json_to_file(json_string, file_name):\n    with open(file_name, 'w') as file:\n        json.dump(json_string, file)\n\njson_string = json.loads('{\"greetings\": \"Hello, world!\"}')\nsave_json_to_file(json_string, 'output.json')"
    },
    {
        "instruction": "How would you create a JavaScript function to calculate the sum of all numbers in an array?",
        "input": "[4, 5, 1, 7]",
        "response": "function sumOfArrayElements(array) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}\n\nconst numbers = [4, 5, 1, 7];\nconsole.log('Sum of array elements:', sumOfArrayElements(numbers));",
        "output": "function sumOfArrayElements(array) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}\n\nconst numbers = [4, 5, 1, 7];\nconsole.log('Sum of array elements:', sumOfArrayElements(numbers));"
    },
    {
        "instruction": "Given a list of numbers in C++, implement a function that returns the smallest number.",
        "input": "3, 8, -1, 2, 5",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint findSmallestNumber(std::vector<int> numbers) {\n    return *std::min_element(numbers.begin(), numbers.end());\n}\n\nint main() {\n    std::vector<int> numbers = {3, 8, -1, 2, 5};\n    std::cout << \"Smallest number: \" << findSmallestNumber(numbers) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint findSmallestNumber(std::vector<int> numbers) {\n    return *std::min_element(numbers.begin(), numbers.end());\n}\n\nint main() {\n    std::vector<int> numbers = {3, 8, -1, 2, 5};\n    std::cout << \"Smallest number: \" << findSmallestNumber(numbers) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a C# method that calculates the factorial of a given number.",
        "input": "5",
        "response": "using System;\n\nclass FactorialExample {\n    public static int CalculateFactorial(int number) {\n        if (number == 0)\n            return 1;\n        else\n            return number * CalculateFactorial(number - 1);\n    }\n\n    public static void Main() {\n        int number = 5;\n        Console.WriteLine(\"Factorial of \" + number + \" is: \" + CalculateFactorial(number));\n    }\n}",
        "output": "using System;\n\nclass FactorialExample {\n    public static int CalculateFactorial(int number) {\n        if (number == 0)\n            return 1;\n        else\n            return number * CalculateFactorial(number - 1);\n    }\n\n    public static void Main() {\n        int number = 5;\n        Console.WriteLine(\"Factorial of \" + number + \" is: \" + CalculateFactorial(number));\n    }\n}"
    },
    {
        "instruction": "What would be the expected output of the following Java code?",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        int x = 6;\n        int y = 10;\n        System.out.println(x * y);\n    }\n}",
        "response": "60",
        "output": "60"
    },
    {
        "instruction": "Rewrite the given code with more efficient logic that will render the same output.",
        "input": "def find_even_numbers(arr):\n    even_numbers = []\n    for num in arr:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nfind_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "response": "def find_even_numbers(arr):\n    return [num for num in arr if num % 2 == 0]\n\nfind_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "output": "def find_even_numbers(arr):\n    return [num for num in arr if num % 2 == 0]\n\nfind_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
        "instruction": "Find and fix the errors in the following Python code snippet for checking if a given year is a leap year or not.",
        "input": "def leap_year_check(year):\n  if (year % 4) == 0\n    if (year % 100) = 0\n      year % 400 == 0\n        return True\n          else:\n            return False\n         not year % 100 == 0:\n          return True",
        "response": "def leap_year_check(year):\n  if (year % 4) == 0:\n    if (year % 100) == 0:\n      if year % 400 == 0:\n        return True\n      else:\n        return False\n    elif not year % 100 == 0:\n        return True\n  return False",
        "output": "def leap_year_check(year):\n  if (year % 4) == 0:\n    if (year % 100) == 0:\n      if year % 400 == 0:\n        return True\n      else:\n        return False\n    elif not year % 100 == 0:\n        return True\n  return False"
    },
    {
        "instruction": "Write a function in Python to convert a given Fahrenheit temperature to Celsius.",
        "input": "32",
        "response": "def fahrenheit_to_celsius(f_temp):\n    c_temp = (f_temp - 32) * 5/9\n    return c_temp\n\nfahrenheit = 32\nconverted_temp = fahrenheit_to_celsius(fahrenheit)\nprint(f'{fahrenheit}F is equal to {converted_temp:.2f}C')",
        "output": "def fahrenheit_to_celsius(f_temp):\n    c_temp = (f_temp - 32) * 5/9\n    return c_temp\n\nfahrenheit = 32\nconverted_temp = fahrenheit_to_celsius(fahrenheit)\nprint(f'{fahrenheit}F is equal to {converted_temp:.2f}C')"
    },
    {
        "instruction": "Debug the following JavaScript code that should output the age of a person:\n\nfunction calculateAge(birthYear) {\n    const currentYear = 2050;\n    var age = currentYear = birthYear;\n    console.log(`Your age is ${age}.`);\n}\n\ncalculateAge(1990);",
        "input": "",
        "response": "function calculateAge(birthYear) {\n    const currentYear = 2050;\n    var age = currentYear - birthYear;\n    console.log(`Your age is ${age}.`);\n}\n\ncalculateAge(1990);",
        "output": "function calculateAge(birthYear) {\n    const currentYear = 2050;\n    var age = currentYear - birthYear;\n    console.log(`Your age is ${age}.`);\n}\n\ncalculateAge(1990);"
    },
    {
        "instruction": "Create a Java program that takes an integer input and outputs the square of the number.",
        "input": "3",
        "response": "import java.util.Scanner;\n\npublic class SquareNumber {\n\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter an integer:\");\n        int num = scanner.nextInt();\n\n        int square = num * num;\n        System.out.println(\"The square of \" + num + \" is \" + square + \".\");\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class SquareNumber {\n\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter an integer:\");\n        int num = scanner.nextInt();\n\n        int square = num * num;\n        System.out.println(\"The square of \" + num + \" is \" + square + \".\");\n    }\n}"
    },
    {
        "instruction": "Show me an example of a C++ program which uses a for loop to iterate from 0 to 10 and outputs the sum of all even numbers within that range.",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int sum = 0;\n    for (int i = 0; i <= 10; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    cout << \"Sum of even numbers between 0 and 10 is: \" << sum << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int sum = 0;\n    for (int i = 0; i <= 10; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    cout << \"Sum of even numbers between 0 and 10 is: \" << sum << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Translate the following C++ code snippet into equivalent Java code: 'void print_sum(int a, int b) { int sum = a + b; cout << \"The sum is: \" << sum << endl; }'",
        "input": "",
        "response": "public void print_sum(int a, int b) {\n    int sum = a + b;\n    System.out.println(\"The sum is: \" + sum);\n}",
        "output": "public void print_sum(int a, int b) {\n    int sum = a + b;\n    System.out.println(\"The sum is: \" + sum);\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of integers as input and calculates the sum and average of the array elements. The function should return an object with the sum and average as properties.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function calc_sum_and_average(arr) {\n    let sum = arr.reduce((a, b) => a + b, 0);\n    let avg = sum / arr.length;\n    return { 'sum': sum, 'average': avg };\n}",
        "output": "function calc_sum_and_average(arr) {\n    let sum = arr.reduce((a, b) => a + b, 0);\n    let avg = sum / arr.length;\n    return { 'sum': sum, 'average': avg };\n}"
    },
    {
        "instruction": "Provide a brief explanation and example code for using a 'map' function in Python to apply a function to each element in a list.",
        "input": "",
        "response": "The 'map' function in Python is used to apply a specified function to each item in an iterable, like a list. The syntax is 'map(function, iterable)'. The function doesn't modify the original iterable but returns a new iterable with the results.\n\nExample:\ndef square(x):\n    return x * x\n\nnumbers = [1,2,3,4]\nsquared_numbers = map(square, numbers)\n\nfor num in squared_numbers:\n    print(num)",
        "output": "The 'map' function in Python is used to apply a specified function to each item in an iterable, like a list. The syntax is 'map(function, iterable)'. The function doesn't modify the original iterable but returns a new iterable with the results.\n\nExample:\ndef square(x):\n    return x * x\n\nnumbers = [1,2,3,4]\nsquared_numbers = map(square, numbers)\n\nfor num in squared_numbers:\n    print(num)"
    },
    {
        "instruction": "Create a Java method that reverses the words in a given sentence.",
        "input": "Example sentence: 'The quick brown fox jumps over the lazy dog'",
        "response": "public String reverseWords(String sentence) {\n    String[] words = sentence.split(' ');\n    StringBuilder reversedSentence = new StringBuilder();\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversedSentence.append(words[i]);\n        if (i != 0) {\n            reversedSentence.append(' ');\n        }\n    }\n    return reversedSentence.toString();\n}",
        "output": "public String reverseWords(String sentence) {\n    String[] words = sentence.split(' ');\n    StringBuilder reversedSentence = new StringBuilder();\n    for (int i = words.length - 1; i >= 0; i--) {\n        reversedSentence.append(words[i]);\n        if (i != 0) {\n            reversedSentence.append(' ');\n        }\n    }\n    return reversedSentence.toString();\n}"
    },
    {
        "instruction": "Fix the following JavaScript code that should return the sum of an array of integers.",
        "input": "let numbers = [1, 2, 3, 4, 5];\n\nfunction arraySum(array) {\n    let sum = 0;\n    for (let i = 0; i <= array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}\n\nconsole.log(arraySum(numbers));",
        "response": "let numbers = [1, 2, 3, 4, 5];\n\nfunction arraySum(array) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}\n\nconsole.log(arraySum(numbers));",
        "output": "let numbers = [1, 2, 3, 4, 5];\n\nfunction arraySum(array) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}\n\nconsole.log(arraySum(numbers));"
    },
    {
        "instruction": "How would you use the filter() method in Python to filter out even numbers from a list of integers?",
        "input": "List of integers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "response": "input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef is_even(number):\n    return number % 2 == 0\n\nfiltered_list = list(filter(is_even, input_list))",
        "output": "input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef is_even(number):\n    return number % 2 == 0\n\nfiltered_list = list(filter(is_even, input_list))"
    },
    {
        "instruction": "Write a C++ function that calculates the sum of all odd numbers in a given range (inclusive).",
        "input": "Range: 1 to 10",
        "response": "#include <iostream>\n\nint sumOfOddsInRange(int start, int end) {\n    int sum = 0;\n    for (int i = start; i <= end; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nint main() {\n    int start = 1;\n    int end = 10;\n    std::cout << \"Sum of odd numbers in range \" << start << \" to \" << end << \": \" << sumOfOddsInRange(start, end) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint sumOfOddsInRange(int start, int end) {\n    int sum = 0;\n    for (int i = start; i <= end; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nint main() {\n    int start = 1;\n    int end = 10;\n    std::cout << \"Sum of odd numbers in range \" << start << \" to \" << end << \": \" << sumOfOddsInRange(start, end) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Java function that solves the quadratic equation, given the coefficients a, b, and c.",
        "input": "a = 1, b = -3, c = 2",
        "response": "import java.lang.Math;\n\nclass QuadraticSolver {\n    public static void main(String[] args) {\n        double a = 1, b = -3, c = 2;\n\n        double disc = b * b - 4 * a*c;\n        if (disc < 0) {\n            System.out.println('No Real Roots');\n        } else {\n            double root1 = (-b + Math.sqrt(disc)) / (2*a);\n            double root2 = (-b - Math.sqrt(disc)) / (2*a);\n            System.out.println('Roots: ' + root1 + ' ' + root2);\n        }\n    }\n}",
        "output": "import java.lang.Math;\n\nclass QuadraticSolver {\n    public static void main(String[] args) {\n        double a = 1, b = -3, c = 2;\n\n        double disc = b * b - 4 * a*c;\n        if (disc < 0) {\n            System.out.println('No Real Roots');\n        } else {\n            double root1 = (-b + Math.sqrt(disc)) / (2*a);\n            double root2 = (-b - Math.sqrt(disc)) / (2*a);\n            System.out.println('Roots: ' + root1 + ' ' + root2);\n        }\n    }\n}"
    },
    {
        "instruction": "Rewrite this JavaScript function into an equivalent Python version.",
        "input": "function convertFtoC(fahrenheit) {\n  return (fahrenheit - 32) * 5/9;\n}",
        "response": "def convertFtoC(fahrenheit):\n    return (fahrenheit - 32) * 5/9",
        "output": "def convertFtoC(fahrenheit):\n    return (fahrenheit - 32) * 5/9"
    },
    {
        "instruction": "Locate the syntax error in this C++ code snippet and suggest a fix.",
        "input": "#include <iostream>\n\nint main() {\n    int x = ;\n    std::cout << 'Enter a number: ';\n    std::cin >> x;\n    std::cout << 'You entered: ' << x << std::endl;\n}",
        "response": "There is a syntax error in the line 'int x = ;'. The variable x should be initialized or declared without the equals sign. Fixed code:\n\n#include <iostream>\n\nint main() {\n    int x;\n    std::cout << 'Enter a number: ';\n    std::cin >> x;\n    std::cout << 'You entered: ' << x << std::endl;\n}",
        "output": "There is a syntax error in the line 'int x = ;'. The variable x should be initialized or declared without the equals sign. Fixed code:\n\n#include <iostream>\n\nint main() {\n    int x;\n    std::cout << 'Enter a number: ';\n    std::cin >> x;\n    std::cout << 'You entered: ' << x << std::endl;\n}"
    },
    {
        "instruction": "Create a shell script to find all .txt files and count the total number of lines in them.",
        "input": "",
        "response": "#!/bin/sh\n\nfind . -name '*.txt' -exec wc -l {} + | awk '{ total += $1 } END { print total }'",
        "output": "#!/bin/sh\n\nfind . -name '*.txt' -exec wc -l {} + | awk '{ total += $1 } END { print total }'"
    },
    {
        "instruction": "Create a Java method that sums the values of all even elements in an array of integers and returns the result.",
        "input": "",
        "response": "public int sumEvenElements(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenElements(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "What changes should be made to the following JavaScript code snippet to correctly fetch data from the given API endpoint and log the response to the console?",
        "input": "const apiUrl = 'https://api.example.com/data';\nfethc(apiUrl)\n  .then(response => {\n    return.response.json();\n  })\n  .then(data => {\n    console.log(data);\n});",
        "response": "const apiUrl = 'https://api.example.com/data';\nfetch(apiUrl)\n  .then(response => {\n    return response.json();\n  })\n  .then(data => {\n    console.log(data);\n});",
        "output": "const apiUrl = 'https://api.example.com/data';\nfetch(apiUrl)\n  .then(response => {\n    return response.json();\n  })\n  .then(data => {\n    console.log(data);\n});"
    },
    {
        "instruction": "Write a C++ program that prompts the user to input a string and outputs the count of vowels in that string.",
        "input": "",
        "response": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main() {\n\n    string input_str;\n    int vowels_count = 0;\n\n    cout << \"Enter a string: \";\n    getline(cin, input_str);\n\n    for (char ch : input_str) {\n        ch = tolower(ch);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            vowels_count++;\n        }\n    }\n\n    cout << \"The number of vowels in the string is \" << vowels_count << endl;\n\n    return 0;\n}",
        "output": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main() {\n\n    string input_str;\n    int vowels_count = 0;\n\n    cout << \"Enter a string: \";\n    getline(cin, input_str);\n\n    for (char ch : input_str) {\n        ch = tolower(ch);\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            vowels_count++;\n        }\n    }\n\n    cout << \"The number of vowels in the string is \" << vowels_count << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Identify the syntax error in the following Python code that intends to calculate the factorial of a given number using a recursive function.",
        "input": "def factorial(n):\n    if n == 1:\n        return 1\n    else\n        return n * factorial(n-1)",
        "response": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "output": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "instruction": "Write a Python function to reverse the words in a given sentence.",
        "input": "sentence = 'Hello, my name is John'",
        "response": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words",
        "output": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words"
    },
    {
        "instruction": "Debug the following Java method for checking if a number is prime and return the corrected code.",
        "input": "public static bool isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i < num; i++) {\n        if (num %i == 0) {\n            return false;\n        }\n    return true;\n}",
        "response": "public static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i < num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "output": "public static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i < num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns the array with duplicates removed.",
        "input": "let numbers = [1, 2, 3, 2, 4, 5, 1]",
        "response": "function removeDuplicates(arr) {\n    return [...new Set(arr)];\n}",
        "output": "function removeDuplicates(arr) {\n    return [...new Set(arr)];\n}"
    },
    {
        "instruction": "Explain the purpose and usage of the following C++ code snippet.",
        "input": "int x = 5;\nint* ptr = &x;\n*ptr = 10;",
        "response": "The code declares an integer variable 'x' and initializes it with the value 5. Then, it declares an integer pointer 'ptr' and assigns it the memory address of 'x' using the '&' address-of operator. Finally, it modifies the value of 'x' indirectly through the pointer 'ptr' by dereferencing it using the '*' operator and assigning the new value of 10 to the location that 'ptr' is pointing to.",
        "output": "The code declares an integer variable 'x' and initializes it with the value 5. Then, it declares an integer pointer 'ptr' and assigns it the memory address of 'x' using the '&' address-of operator. Finally, it modifies the value of 'x' indirectly through the pointer 'ptr' by dereferencing it using the '*' operator and assigning the new value of 10 to the location that 'ptr' is pointing to."
    },
    {
        "instruction": "Create a JavaScript function that returns the longest string from an array of strings.",
        "input": "['apple', 'banana', 'pineapple', 'orange']",
        "response": "function longestString(arr) {\n    let longest = '';\n    arr.forEach(str => {\n        if(str.length > longest.length) {\n            longest = str;\n        }\n    });\n    return longest;\n}\n\nconst input = ['apple', 'banana', 'pineapple', 'orange'];\nconsole.log(longestString(input));",
        "output": "function longestString(arr) {\n    let longest = '';\n    arr.forEach(str => {\n        if(str.length > longest.length) {\n            longest = str;\n        }\n    });\n    return longest;\n}\n\nconst input = ['apple', 'banana', 'pineapple', 'orange'];\nconsole.log(longestString(input));"
    },
    {
        "instruction": "Describe the purpose of the following C++ code snippet and identify the output.",
        "input": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int a = 2, b = 4, result;\n    result = a + b;\n    cout << result << endl;\n    return 0;\n}",
        "response": "This C++ code snippet defines a simple program that adds two integer variables, a (with the value of 2) and b (with the value of 4), and stores the sum in a result variable. It then outputs the result to the console, which will be '6'.",
        "output": "This C++ code snippet defines a simple program that adds two integer variables, a (with the value of 2) and b (with the value of 4), and stores the sum in a result variable. It then outputs the result to the console, which will be '6'."
    },
    {
        "instruction": "Demonstrate the usage of `yield` statement in a Python generator that generates the first n Fibonacci numbers.",
        "input": "5",
        "response": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nn = 5\nfor fib in fibonacci(n):\n    print(fib)",
        "output": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nn = 5\nfor fib in fibonacci(n):\n    print(fib)"
    },
    {
        "instruction": "Write a shell script to count the number of lines in a given text file.",
        "input": "file_path=/path/to/your/textfile.txt",
        "response": "#!/bin/sh\n\nfile_path=/path/to/your/textfile.txt\nline_count=$(wc -l < \"$file_path\")\necho \"Number of lines: $line_count\"",
        "output": "#!/bin/sh\n\nfile_path=/path/to/your/textfile.txt\nline_count=$(wc -l < \"$file_path\")\necho \"Number of lines: $line_count\""
    },
    {
        "instruction": "Create a Python function that reads the content of a given CSV file and converts it into a list of dictionaries where the keys are the header row values and the values are the corresponding row values.",
        "input": "example.csv: \nname,age,city\nAlice,30,New York\nBob,25,Los Angeles\n",
        "response": "import csv\n\ndef read_csv_to_dict(file_path):\n    with open(file_path, mode='r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        data = [row for row in reader]\n    return data\n\nfile_path = 'example.csv'\ndata_list = read_csv_to_dict(file_path)\nprint(data_list)\n\n# This function opens the provided CSV file in read mode, creates a DictReader object with the file's content, and converts each row into a dictionary. Finally, it returns a list of dictionaries.",
        "output": "import csv\n\ndef read_csv_to_dict(file_path):\n    with open(file_path, mode='r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        data = [row for row in reader]\n    return data\n\nfile_path = 'example.csv'\ndata_list = read_csv_to_dict(file_path)\nprint(data_list)\n\n# This function opens the provided CSV file in read mode, creates a DictReader object with the file's content, and converts each row into a dictionary. Finally, it returns a list of dictionaries."
    },
    {
        "instruction": "Write a shell script to get the list of all files in a directory, ordered by file size.",
        "input": "directory_path: /home/user/documents/",
        "response": "#!/bin/bash\n\n# Set your directory path here\ndirectory_path=\"/home/user/documents/\"\n\n# List files in the directory ordered by file size\ndu -a $directory_path | sort -n | awk '{ system(\"ls -ld \" $2)}'\n\n# This script sets the given directory path, then uses 'du', 'sort', and 'awk' to list all files in the directory ordered by file size.",
        "output": "#!/bin/bash\n\n# Set your directory path here\ndirectory_path=\"/home/user/documents/\"\n\n# List files in the directory ordered by file size\ndu -a $directory_path | sort -n | awk '{ system(\"ls -ld \" $2)}'\n\n# This script sets the given directory path, then uses 'du', 'sort', and 'awk' to list all files in the directory ordered by file size."
    },
    {
        "instruction": "Given a JavaScript object, write a function to find the property with the highest numeric value.",
        "input": "example_object: { a: 3, b: 6, c: 1, d: 8, e: 5 }",
        "response": "function findHighestValueProperty(obj) {\n    let highestValue = -Infinity;\n    let highestProperty = null;\n\n    for (const [property, value] of Object.entries(obj)) {\n        if (value > highestValue) {\n            highestProperty = property;\n            highestValue = value;\n        }\n    }\n\n    return highestProperty;\n}\n\nconst example_object = { a: 3, b: 6, c: 1, d: 8, e: 5 };\nconsole.log(findHighestValueProperty(example_object));\n\n// This function iterates through each property-value pair in the object and keeps track of the highest value and corresponding property. It returns the property with the highest value.",
        "output": "function findHighestValueProperty(obj) {\n    let highestValue = -Infinity;\n    let highestProperty = null;\n\n    for (const [property, value] of Object.entries(obj)) {\n        if (value > highestValue) {\n            highestProperty = property;\n            highestValue = value;\n        }\n    }\n\n    return highestProperty;\n}\n\nconst example_object = { a: 3, b: 6, c: 1, d: 8, e: 5 };\nconsole.log(findHighestValueProperty(example_object));\n\n// This function iterates through each property-value pair in the object and keeps track of the highest value and corresponding property. It returns the property with the highest value."
    },
    {
        "instruction": "Translate the following Python code into equivalent C++ code:\n\nstring = 'Hello'\nreversed_string = string[::-1]\nprint(reversed_string)",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string str = \"Hello\";\n    std::string reversed_str = str;\n    std::reverse(reversed_str.begin(), reversed_str.end());\n    std::cout << reversed_str << std::endl;\n    return 0;\n}\n\n// This C++ code includes necessary headers, initializes a string, creates a copy of the string, and reverses it using the 'reverse' function from the <algorithm> header. Then it prints the reversed string.",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string str = \"Hello\";\n    std::string reversed_str = str;\n    std::reverse(reversed_str.begin(), reversed_str.end());\n    std::cout << reversed_str << std::endl;\n    return 0;\n}\n\n// This C++ code includes necessary headers, initializes a string, creates a copy of the string, and reverses it using the 'reverse' function from the <algorithm> header. Then it prints the reversed string."
    },
    {
        "instruction": "Create a JavaScript function that takes a string as an input and returns the number of vowels present in the given string.",
        "input": "",
        "response": "function countVowels(str) {\n  const vowels = 'AEIOUaeiou';\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
        "output": "function countVowels(str) {\n  const vowels = 'AEIOUaeiou';\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.includes(str[i])) {\n      count++;\n    }\n  }\n  return count;\n}"
    },
    {
        "instruction": "Given the inputted Python code, find and fix any syntax errors.",
        "input": "def square(x):\n   y = x **\n   return(y)",
        "response": "def square(x):\n   y = x ** 2\n   return(y)",
        "output": "def square(x):\n   y = x ** 2\n   return(y)"
    },
    {
        "instruction": "Write a C++ function that calculates and returns the factorial of a given non-negative integer.",
        "input": "",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int number;\n  std::cout << \"Enter a non-negative integer: \";\n  std::cin >> number;\n  std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int number;\n  std::cout << \"Enter a non-negative integer: \";\n  std::cin >> number;\n  std::cout << \"Factorial of \" << number << \" is: \" << factorial(number) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Using Ruby, implement a method that verifies if a given string is a palindrome after ignoring spaces, punctuation and capitalization.",
        "input": "",
        "response": "def palindrome?(str)\n  cleaned_str = str.downcase.gsub(/\\W/, '')\n  cleaned_str == cleaned_str.reverse\nend",
        "output": "def palindrome?(str)\n  cleaned_str = str.downcase.gsub(/\\W/, '')\n  cleaned_str == cleaned_str.reverse\nend"
    },
    {
        "instruction": "Create a Python function that accepts a string and returns a new string with every character duplicated.",
        "input": "For example, if the input string is 'hello', the output should be 'hheelllloo'.",
        "response": "def duplicate_characters(s):\n    result = ''\n    for char in s:\n        result += char * 2\n    return result\n\ninput_string = 'hello'\noutput_string = duplicate_characters(input_string)\nprint(output_string)",
        "output": "def duplicate_characters(s):\n    result = ''\n    for char in s:\n        result += char * 2\n    return result\n\ninput_string = 'hello'\noutput_string = duplicate_characters(input_string)\nprint(output_string)"
    },
    {
        "instruction": "Write a C++ program that calculates and displays the area of a circle given its radius as input.",
        "input": "The user will enter the radius as a floating point number.",
        "response": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.141592653589793;\n\ndouble calculate_area(double radius) {\n    return PI * pow(radius, 2);\n}\n\nint main() {\n    double radius;\n    std::cout << \"Enter the radius of the circle: \";\n    std::cin >> radius;\n    double area = calculate_area(radius);\n    std::cout << \"The area of the circle is: \" << area << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.141592653589793;\n\ndouble calculate_area(double radius) {\n    return PI * pow(radius, 2);\n}\n\nint main() {\n    double radius;\n    std::cout << \"Enter the radius of the circle: \";\n    std::cin >> radius;\n    double area = calculate_area(radius);\n    std::cout << \"The area of the circle is: \" << area << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a JavaScript function to count the number of words in a string?",
        "input": "The function should take a string as input and return an integer representing the total count of words in the input string.",
        "response": "function countWords(str) {\n    const words = str.split(' ').filter(word => word.trim() !== '');\n    return words.length;\n}\n\nlet inputString = 'This is an example string';\nlet numberOfWords = countWords(inputString);\nconsole.log(numberOfWords);",
        "output": "function countWords(str) {\n    const words = str.split(' ').filter(word => word.trim() !== '');\n    return words.length;\n}\n\nlet inputString = 'This is an example string';\nlet numberOfWords = countWords(inputString);\nconsole.log(numberOfWords);"
    },
    {
        "instruction": "Write a shell script that searches for all .txt files in the directories and subdirectories of the current folder and prints the full path of each file.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -type f -iname \"*.txt\" -print",
        "output": "#!/bin/bash\n\nfind . -type f -iname \"*.txt\" -print"
    },
    {
        "instruction": "Write a Python function that accepts a list of strings and returns the list sorted by string length.",
        "input": "['apple', 'banana', 'cherry', 'dragonfruit']",
        "response": "def sort_strings_by_length(lst):\n    return sorted(lst, key=len)\n\nexample_list = ['apple', 'banana', 'cherry', 'dragonfruit']\nresult = sort_strings_by_length(example_list)\nprint(result)",
        "output": "def sort_strings_by_length(lst):\n    return sorted(lst, key=len)\n\nexample_list = ['apple', 'banana', 'cherry', 'dragonfruit']\nresult = sort_strings_by_length(example_list)\nprint(result)"
    },
    {
        "instruction": "Convert the following C++ code to equivalent code in Java: 'cout << \"Hello, World!\" << endl;'",
        "input": "",
        "response": "System.out.println(\"Hello, World!\");",
        "output": "System.out.println(\"Hello, World!\");"
    },
    {
        "instruction": "A developer recently accidentally introduced an infinite loop into a C++ script. Could you help them fix the script by identifying and correcting the error? Here is the script: 'int main(){int i=0; while(i>=0){std::cout << i << std::endl;}}'",
        "input": "",
        "response": "int main() {\n    int i = 0;\n    while(i >= 0) {\n        std::cout << i << std::endl;\n        i++;  // Include this line to fix the infinite loop\n    }\n}",
        "output": "int main() {\n    int i = 0;\n    while(i >= 0) {\n        std::cout << i << std::endl;\n        i++;  // Include this line to fix the infinite loop\n    }\n}"
    },
    {
        "instruction": "Given an API that provides the following shell command to retrieve a product's details: 'curl -H \"Authorization: Bearer ${TOKEN}\" \"https://api.example.com/products/${PRODUCT_ID}\"'. Write a shell script that takes the API token and product ID as command-line arguments and prints the product details in JSON format.",
        "input": "TOKEN='eXamPl3T0K3n' PRODUCT_ID='12345'",
        "response": "#!/bin/bash\n\nTOKEN=${1}\nPRODUCT_ID=${2}\n\ncurl -s -H \"Authorization: Bearer ${TOKEN}\" \"https://api.example.com/products/${PRODUCT_ID}\" | jq '.'",
        "output": "#!/bin/bash\n\nTOKEN=${1}\nPRODUCT_ID=${2}\n\ncurl -s -H \"Authorization: Bearer ${TOKEN}\" \"https://api.example.com/products/${PRODUCT_ID}\" | jq '.'"
    },
    {
        "instruction": "Explain the process of creating a basic REST API using Express in Node.js.",
        "input": "Objective: Create a REST API to manage a list of user data (id, name, email).",
        "response": "1. Install and set up Node.js and npm.\n2. Initialize a new project using 'npm init'.\n3. Install Express framework using 'npm install express --save'.\n4. Create a new file called 'app.js'.\n5. Import 'express' in 'app.js' and create a new instance of it.\n6. Define the routes and their handlers for managing users (GET, POST, PUT, DELETE).\n7. Add a middleware for handling request bodies using 'express.json()'.\n8. Use 'app.listen()' to start the server on a specific port.\n9. Test the API using a tool like Postman or Curl.",
        "output": "1. Install and set up Node.js and npm.\n2. Initialize a new project using 'npm init'.\n3. Install Express framework using 'npm install express --save'.\n4. Create a new file called 'app.js'.\n5. Import 'express' in 'app.js' and create a new instance of it.\n6. Define the routes and their handlers for managing users (GET, POST, PUT, DELETE).\n7. Add a middleware for handling request bodies using 'express.json()'.\n8. Use 'app.listen()' to start the server on a specific port.\n9. Test the API using a tool like Postman or Curl."
    },
    {
        "instruction": "Find and fix a bug in the given Python function, which returns the sum of distinct elements of a list.",
        "input": "def sum_distinct_elements(lst):\n    result = 0\n    distinct_elements = set()    \n    for i in lst:\n        if i not in distinct_elements:\n            distinct_elements.add(i)\n            result += i\n    return distinct_elements",
        "response": "def sum_distinct_elements(lst):\n    result = 0\n    distinct_elements = set()\n    for i in lst:\n        if i not in distinct_elements:\n            distinct_elements.add(i)\n            result += i\n    return result",
        "output": "def sum_distinct_elements(lst):\n    result = 0\n    distinct_elements = set()\n    for i in lst:\n        if i not in distinct_elements:\n            distinct_elements.add(i)\n            result += i\n    return result"
    },
    {
        "instruction": "Create a simple Bash script that takes the filename as an argument and returns the file size in bytes.",
        "input": "Target: Bash script to output file size in bytes.",
        "response": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n    echo \"Please provide a filename as an argument.\"\n    exit 1\nfi\n\nFILE_SIZE=$(stat -c%s \"$1\")\necho \"File size: $FILE_SIZE bytes\"",
        "output": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n    echo \"Please provide a filename as an argument.\"\n    exit 1\nfi\n\nFILE_SIZE=$(stat -c%s \"$1\")\necho \"File size: $FILE_SIZE bytes\""
    },
    {
        "instruction": "Write a Python function that calculates the compound interest and returns the total interest earned.",
        "input": "principal_amount = 1000\nannual_interest_rate = 0.05\ncompound_frequency = 4\nyears = 5",
        "response": "def compound_interest(principal, rate, frequency, years):\n    total = principal * (1 + rate / frequency) ** (frequency * years)\n    return total - principal\n\ninterest_earned = compound_interest(1000, 0.05, 4, 5)",
        "output": "def compound_interest(principal, rate, frequency, years):\n    total = principal * (1 + rate / frequency) ** (frequency * years)\n    return total - principal\n\ninterest_earned = compound_interest(1000, 0.05, 4, 5)"
    },
    {
        "instruction": "How to create a simple asynchronous function in JavaScript that resolves to your name after 1 second?",
        "input": "",
        "response": "async function getNameSync() {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve('Your Name');\n        }, 1000);\n    });\n}\n\n(async () => {\n    console.log(await getNameSync());\n})();",
        "output": "async function getNameSync() {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve('Your Name');\n        }, 1000);\n    });\n}\n\n(async () => {\n    console.log(await getNameSync());\n})();"
    },
    {
        "instruction": "Provide a Java method to count and return the number of occurrences of an element in an array.",
        "input": "int[] numbers = {1, 5, 3, 5, 8, 5, 2, 3}\nint elementToCount = 5",
        "response": "public static int countOccurrences(int[] array, int element) {\n    int count = 0;\n    for (int number : array) {\n        if (number == element) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint occurrences = countOccurrences(numbers, elementToCount);",
        "output": "public static int countOccurrences(int[] array, int element) {\n    int count = 0;\n    for (int number : array) {\n        if (number == element) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint occurrences = countOccurrences(numbers, elementToCount);"
    },
    {
        "instruction": "Fix the syntax error in the following C++ code snippet.",
        "input": "#include<iostream>\n\nint main() {\n\n  int x = 2, int y = 3;\n  std::cout << \"The product is: \" << x * y << std::endl;\n\n  return 0;\n}",
        "response": "#include<iostream>\n\nint main() {\n\n  int x = 2, y = 3;\n  std::cout << \"The product is: \" << x * y << std::endl;\n\n  return 0;\n}",
        "output": "#include<iostream>\n\nint main() {\n\n  int x = 2, y = 3;\n  std::cout << \"The product is: \" << x * y << std::endl;\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a Python function that takes a string input and returns the longest word in the string.",
        "input": "",
        "response": "def find_longest_word(s):\n    words = s.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word",
        "output": "def find_longest_word(s):\n    words = s.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word"
    },
    {
        "instruction": "Create a Java function that accepts two integers and returns their greatest common divisor (GCD).",
        "input": "",
        "response": "public int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
        "output": "public int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}"
    },
    {
        "instruction": "What's the output of the following C++ code:",
        "input": "#include<iostream>\nusing namespace std;\nint main() {\n    int x = 6;\n    int y = 6;\n    while (x >= 1) {\n        if (x % y == 0) {\n            cout << x << endl;\n        }\n        x--;\n    }\n    return 0;\n}",
        "response": "6\n3\n2\n1",
        "output": "6\n3\n2\n1"
    },
    {
        "instruction": "Given the following JavaScript code with an error, correct the code to correctly sum the elements of the array.",
        "input": "let myArray = [1, 3, 5, 7, 9];\nlet sum = 0;\nfor (let i = 0; i <= myArray.length; i++) {\n  sum += myArray[i];\n}\nconsole.log(sum);",
        "response": "let myArray = [1, 3, 5, 7, 9];\nlet sum = 0;\nfor (let i = 0; i < myArray.length; i++) {\n  sum += myArray[i];\n}\nconsole.log(sum);",
        "output": "let myArray = [1, 3, 5, 7, 9];\nlet sum = 0;\nfor (let i = 0; i < myArray.length; i++) {\n  sum += myArray[i];\n}\nconsole.log(sum);"
    },
    {
        "instruction": "Develop a Python function that takes a list of strings and concatenates them using a given delimiter.",
        "input": "['apple', 'banana', 'cherry'], '|'",
        "response": "def join_strings(strings, delimiter):\n    return delimiter.join(strings)\n\nexample_list = ['apple', 'banana', 'cherry']\nresult = join_strings(example_list, '|')\nprint(result)",
        "output": "def join_strings(strings, delimiter):\n    return delimiter.join(strings)\n\nexample_list = ['apple', 'banana', 'cherry']\nresult = join_strings(example_list, '|')\nprint(result)"
    },
    {
        "instruction": "Describe how to use Python's requests library to make a GET request to a given URL and print the JSON response.",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    json_data = response.json()\n    print(json_data)\nelse:\n    print(f'Request failed with status code: {response.status_code}')",
        "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    json_data = response.json()\n    print(json_data)\nelse:\n    print(f'Request failed with status code: {response.status_code}')"
    },
    {
        "instruction": "Given a Java method that takes an integer and returns true if it's a prime number, point out any issues or improvements to the code.",
        "input": "public boolean isPrime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}",
        "response": "The given Java method is generally effective in determining if a number is prime. It correctly handles the case where the input is less than or equal to 1 and uses an optimized 'for' loop iterating up to the square root of the input number. However, defining a separate function for the square root calculation would increase efficiency and readability, like so:\n\npublic boolean isPrime(int num) {\n    if (num <= 1) return false;\n    int limit = (int) Math.sqrt(num);\n    for (int i = 2; i <= limit; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}",
        "output": "The given Java method is generally effective in determining if a number is prime. It correctly handles the case where the input is less than or equal to 1 and uses an optimized 'for' loop iterating up to the square root of the input number. However, defining a separate function for the square root calculation would increase efficiency and readability, like so:\n\npublic boolean isPrime(int num) {\n    if (num <= 1) return false;\n    int limit = (int) Math.sqrt(num);\n    for (int i = 2; i <= limit; i++) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}"
    },
    {
        "instruction": "Write a shell script that takes a file path as input, checks if the file exists, and outputs an appropriate message depending on the result.",
        "input": "/path/to/test_file.txt",
        "response": "#!/bin/bash\n\nfile_path=\"/path/to/test_file.txt\"\n\nif [ -e \"$file_path\" ]; then\n    echo 'The file exists.'\nelse\n    echo 'The file does not exist.'\nfi\n\n# To use the script:\n# Save it as 'file_check.sh', set execute permissions with 'chmod +x file_check.sh', then run './file_check.sh'",
        "output": "#!/bin/bash\n\nfile_path=\"/path/to/test_file.txt\"\n\nif [ -e \"$file_path\" ]; then\n    echo 'The file exists.'\nelse\n    echo 'The file does not exist.'\nfi\n\n# To use the script:\n# Save it as 'file_check.sh', set execute permissions with 'chmod +x file_check.sh', then run './file_check.sh'"
    },
    {
        "instruction": "Create a Python function that takes a list of strings as input, sorts them alphabetically, and returns the sorted list.",
        "input": "['banana', 'apple', 'orange', 'kiwi']",
        "response": "def sort_strings(strings):\n    strings.sort()\n    return strings\n\ninput_list = ['banana', 'apple', 'orange', 'kiwi']\nresult = sort_strings(input_list)\nprint(result)",
        "output": "def sort_strings(strings):\n    strings.sort()\n    return strings\n\ninput_list = ['banana', 'apple', 'orange', 'kiwi']\nresult = sort_strings(input_list)\nprint(result)"
    },
    {
        "instruction": "What would be the output of this C++ code snippet?",
        "input": "#include<iostream>\nusing namespace std;\n\nint main(){\n    int x = 5;\n    int y = 10;\n    int z = x++ + --y;\n    cout << x << ' ' << y << ' ' << z << endl;\n    return 0;\n}",
        "response": "The code snippet initializes three integer variables x, y, and z, and performs operations on them.\n\n1. x = 5\n2. y = 10\n3. z = x++ + --y\n- Here x++ will increment x after the operation. So x = 6\n- --y will decrement y before the operation. So y = 9\n- So now z = 5 + 9 = 14\n\nTherefore, the output will be: 6 9 14",
        "output": "The code snippet initializes three integer variables x, y, and z, and performs operations on them.\n\n1. x = 5\n2. y = 10\n3. z = x++ + --y\n- Here x++ will increment x after the operation. So x = 6\n- --y will decrement y before the operation. So y = 9\n- So now z = 5 + 9 = 14\n\nTherefore, the output will be: 6 9 14"
    },
    {
        "instruction": "Write a Java program to count the frequency of words in a given string.",
        "input": "The quick brown fox jumped over the lazy dog.",
        "response": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class WordFrequency {\n    public static void main(String[] args) {\n        String input = \"The quick brown fox jumped over the lazy dog.\";\n        Map<String, Integer> wordFrequency = countWords(input);\n        System.out.println(wordFrequency);\n    }\n\n    private static Map<String, Integer> countWords(String input) {\n        input = input.toLowerCase().replaceAll(\"[^a-zA-Z0-9 ]\", \"\");\n        String[] words = input.split(\" \");\n\n        Map<String, Integer> wordCount = new HashMap<>();\n        for (String word : words) {\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n        }\n        return wordCount;\n    }\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class WordFrequency {\n    public static void main(String[] args) {\n        String input = \"The quick brown fox jumped over the lazy dog.\";\n        Map<String, Integer> wordFrequency = countWords(input);\n        System.out.println(wordFrequency);\n    }\n\n    private static Map<String, Integer> countWords(String input) {\n        input = input.toLowerCase().replaceAll(\"[^a-zA-Z0-9 ]\", \"\");\n        String[] words = input.split(\" \");\n\n        Map<String, Integer> wordCount = new HashMap<>();\n        for (String word : words) {\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n        }\n        return wordCount;\n    }\n}"
    },
    {
        "instruction": "Rewrite the following JavaScript code snippet using arrow functions instead of regular functions.",
        "input": "function double(x) {\n    return x * 2;\n}\n\nfunction triple(x) {\n    return x * 3;\n}\n\nfunction square(x) {\n    return x * x;\n}",
        "response": "const double = (x) => x * 2;\nconst triple = (x) => x * 3;\nconst square = (x) => x * x;",
        "output": "const double = (x) => x * 2;\nconst triple = (x) => x * 3;\nconst square = (x) => x * x;"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers as input and returns the sum of squares of the numbers.",
        "input": "",
        "response": "function sumOfSquares(numbers) {\n  return numbers.reduce((sum, num) => sum + Math.pow(num, 2), 0);\n}",
        "output": "function sumOfSquares(numbers) {\n  return numbers.reduce((sum, num) => sum + Math.pow(num, 2), 0);\n}"
    },
    {
        "instruction": "Write a Java method that accepts a string and returns a Map<Character, Integer> containing the frequencies of each character in the string.",
        "input": "",
        "response": "public Map<Character, Integer> charFrequency(String input) {\n    Map<Character, Integer> result = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        result.put(c, result.getOrDefault(c, 0) + 1);\n    }\n    return result;\n}",
        "output": "public Map<Character, Integer> charFrequency(String input) {\n    Map<Character, Integer> result = new HashMap<>();\n    for (char c : input.toCharArray()) {\n        result.put(c, result.getOrDefault(c, 0) + 1);\n    }\n    return result;\n}"
    },
    {
        "instruction": "What would be a C++ function to tokenize a given string by a specified delimiter?",
        "input": "",
        "response": "#include <sstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> tokenize(const std::string& input, char delimiter) {\n  std::istringstream ss(input);\n  std::string token;\n  std::vector<std::string> tokens;\n\n  while (std::getline(ss, token, delimiter)) {\n    tokens.push_back(token);\n  }\n\n  return tokens;\n}",
        "output": "#include <sstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> tokenize(const std::string& input, char delimiter) {\n  std::istringstream ss(input);\n  std::string token;\n  std::vector<std::string> tokens;\n\n  while (std::getline(ss, token, delimiter)) {\n    tokens.push_back(token);\n  }\n\n  return tokens;\n}"
    },
    {
        "instruction": "Fix the syntax error in this Python function that should return the middle element from a list.",
        "input": "def middle_element(lst):\n    if len(lst) % 2 == 0:\n        return lst[len(lst)/2], lst[len(lst)/2 + 1]\n    else:\n        return lst[len(lst)/2]",
        "response": "def middle_element(lst):\n    if len(lst) % 2 == 0:\n        return lst[len(lst)//2], lst[len(lst)//2 + 1]\n    else:\n        return lst[len(lst)//2]",
        "output": "def middle_element(lst):\n    if len(lst) % 2 == 0:\n        return lst[len(lst)//2], lst[len(lst)//2 + 1]\n    else:\n        return lst[len(lst)//2]"
    },
    {
        "instruction": "Implement a Python function that takes a string as input and reverses the order of the words in the string.",
        "input": "Hello, how are you today?",
        "response": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\ninput_string = 'Hello, how are you today?'\nresult = reverse_words(input_string)\nprint(result)",
        "output": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\ninput_string = 'Hello, how are you today?'\nresult = reverse_words(input_string)\nprint(result)"
    },
    {
        "instruction": "Write a Java program that prompts the user for an integer and prints the Fibonacci sequence of that many numbers.",
        "input": "7",
        "response": "import java.util.Scanner;\n\npublic class FibonacciSequence {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number of Fibonacci numbers to generate: \");\n        int n = scanner.nextInt();\n\n        int first = 0;\n        int second = 1;\n        for (int i = 1; i <= n; i++) {\n            System.out.print(first + \" \");\n            int temp = first + second;\n            first = second;\n            second = temp;\n        }\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class FibonacciSequence {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number of Fibonacci numbers to generate: \");\n        int n = scanner.nextInt();\n\n        int first = 0;\n        int second = 1;\n        for (int i = 1; i <= n; i++) {\n            System.out.print(first + \" \");\n            int temp = first + second;\n            first = second;\n            second = temp;\n        }\n    }\n}"
    },
    {
        "instruction": "Explain and provide a C++ code snippet showing an error in the syntax of declaring a pointer variable.",
        "input": "",
        "response": "In the following C++ code snippet, there is a syntax error in declaring a pointer variable. The asterisk (*) should be placed before the variable name:\n\nint x = 10;\nint* ptr x = &x; // Incorrect syntax\n\nThe correct syntax should be:\n\nint x = 10;\nint *ptrX = &x;",
        "output": "In the following C++ code snippet, there is a syntax error in declaring a pointer variable. The asterisk (*) should be placed before the variable name:\n\nint x = 10;\nint* ptr x = &x; // Incorrect syntax\n\nThe correct syntax should be:\n\nint x = 10;\nint *ptrX = &x;"
    },
    {
        "instruction": "Design a simple REST API call using the HTTP POST method in JavaScript (Node.js) to submit user registration data in JSON format",
        "input": "{ \"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"mypassword123\" }",
        "response": "const axios = require('axios');\n\nconst userRegistrationData = {\n    username: 'john_doe',\n    email: 'john@example.com',\n    password: 'mypassword123'\n};\n\nconst registerUser = async () => {\n    try {\n        const response = await axios.post('https://example.com/api/register', userRegistrationData);\n        console.log('User registered successfully:', response.data);\n    } catch (error) {\n        console.error('Error registering user:', error.response.data);\n    }\n};\n\nregisterUser();",
        "output": "const axios = require('axios');\n\nconst userRegistrationData = {\n    username: 'john_doe',\n    email: 'john@example.com',\n    password: 'mypassword123'\n};\n\nconst registerUser = async () => {\n    try {\n        const response = await axios.post('https://example.com/api/register', userRegistrationData);\n        console.log('User registered successfully:', response.data);\n    } catch (error) {\n        console.error('Error registering user:', error.response.data);\n    }\n};\n\nregisterUser();"
    },
    {
        "instruction": "Create a simple Javascript function that takes an array of numbers as input and calculates their average.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function average(numbers) {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  return sum / numbers.length;\n}\n\nconsole.log(average([1, 2, 3, 4, 5]));",
        "output": "function average(numbers) {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  return sum / numbers.length;\n}\n\nconsole.log(average([1, 2, 3, 4, 5]));"
    },
    {
        "instruction": "Write a Java method that reverses a given string without using any library functions.",
        "input": "hello",
        "response": "public static String reverseString(String input) {\n  char[] inputCharArray = input.toCharArray();\n  for (int i = 0, j = inputCharArray.length - 1; i < j; i++, j--) {\n    char temp = inputCharArray[i];\n    inputCharArray[i] = inputCharArray[j];\n    inputCharArray[j] = temp;\n  }\n  return new String(inputCharArray);\n}\n\nSystem.out.println(reverseString(\"hello\"));",
        "output": "public static String reverseString(String input) {\n  char[] inputCharArray = input.toCharArray();\n  for (int i = 0, j = inputCharArray.length - 1; i < j; i++, j--) {\n    char temp = inputCharArray[i];\n    inputCharArray[i] = inputCharArray[j];\n    inputCharArray[j] = temp;\n  }\n  return new String(inputCharArray);\n}\n\nSystem.out.println(reverseString(\"hello\"));"
    },
    {
        "instruction": "Can you develop a shell script that retrieves the total memory usage in percentage for a Linux system?",
        "input": "",
        "response": "#!/bin/bash\n\ntotal_memory=$(free | awk '/Mem/ {print $2}')\nused_memory=$(free | awk '/Mem/ {print $3}')\nmemory_percentage=$(bc -l <<< \"scale=2; $used_memory / $total_memory * 100\")\necho \"Memory usage: $memory_percentage%\"",
        "output": "#!/bin/bash\n\ntotal_memory=$(free | awk '/Mem/ {print $2}')\nused_memory=$(free | awk '/Mem/ {print $3}')\nmemory_percentage=$(bc -l <<< \"scale=2; $used_memory / $total_memory * 100\")\necho \"Memory usage: $memory_percentage%\""
    },
    {
        "instruction": "Fix the following Python code which is supposed to take a list of names as input, but it is not working as intended.",
        "input": "def name(names=[]):\n    names.append('New name')\n    return names\n\nnames1 = name()\nnames2 = name()\n\nprint(names1)\nprint(names2)",
        "response": "def name(names=None):\n    if names is None:\n        names = []\n    names.append('New name')\n    return names\n\nnames1 = name()\nnames2 = name()\n\nprint(names1)\nprint(names2)",
        "output": "def name(names=None):\n    if names is None:\n        names = []\n    names.append('New name')\n    return names\n\nnames1 = name()\nnames2 = name()\n\nprint(names1)\nprint(names2)"
    },
    {
        "instruction": "Create a Python function to remove duplicate elements from a list, maintaining the order of the elements.",
        "input": "example_list = [1, 2, 3, 3, 4, 3, 5, 6, 5]",
        "response": "def remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list",
        "output": "def remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list"
    },
    {
        "instruction": "What would be the implementation of a JavaScript function to check if an input string is a palindrome?",
        "input": "example_string = 'racecar'",
        "response": "function isPalindrome(input_string) {\n    const reversed_string = input_string.split('').reverse().join('');\n    return input_string === reversed_string;\n}",
        "output": "function isPalindrome(input_string) {\n    const reversed_string = input_string.split('').reverse().join('');\n    return input_string === reversed_string;\n}"
    },
    {
        "instruction": "Correct the following Java code snippet that is supposed to calculate the sum of all integers in an array:",
        "input": "public static int sumArray(int[] nums) {\n    int sum = 0;\n    for (int i; i <= nums.length(); ++i) {\n        sum += nums[i];\n    }\n    return sum;\n}",
        "response": "public static int sumArray(int[] nums) {\n    int sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}",
        "output": "public static int sumArray(int[] nums) {\n    int sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Explain the purpose of this C code snippet and provide an implementation of the `find_minimum` function.",
        "input": "int find_minimum(int arr[], int n);\n\nint main() {\n    int arr[] = {12, 5, 23, 1, 98, 0, 45};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Minimum element is: %d\", find_minimum(arr, n));\n    return 0;\n}",
        "response": "This C code snippet is designed to find and print the minimum element in an integer array `arr`. The function `find_minimum` takes the array and its size as arguments and returns the minimum value found.\n\nint find_minimum(int arr[], int n) {\n    int min = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min;\n}",
        "output": "This C code snippet is designed to find and print the minimum element in an integer array `arr`. The function `find_minimum` takes the array and its size as arguments and returns the minimum value found.\n\nint find_minimum(int arr[], int n) {\n    int min = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return min;\n}"
    },
    {
        "instruction": "Implement a Java method that takes a string and reverses its characters.",
        "input": "hello world",
        "response": "public String reverseString(String input) {\n    StringBuilder sb = new StringBuilder(input);\n    return sb.reverse().toString();\n}\n\nString reversed = reverseString(\"hello world\");\nSystem.out.println(reversed);",
        "output": "public String reverseString(String input) {\n    StringBuilder sb = new StringBuilder(input);\n    return sb.reverse().toString();\n}\n\nString reversed = reverseString(\"hello world\");\nSystem.out.println(reversed);"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns their average.",
        "input": "[2, 4, 6, 8]",
        "response": "function calculateAverage(numbers) {\n    let sum = numbers.reduce((a, b) => a + b, 0);\n    return sum / numbers.length;\n}\n\nlet average = calculateAverage([2, 4, 6, 8]);\nconsole.log(average);",
        "output": "function calculateAverage(numbers) {\n    let sum = numbers.reduce((a, b) => a + b, 0);\n    return sum / numbers.length;\n}\n\nlet average = calculateAverage([2, 4, 6, 8]);\nconsole.log(average);"
    },
    {
        "instruction": "In C, write a program that calculates the factorial of a given positive integer using recursion.",
        "input": "5",
        "response": "#include <stdio.h>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    unsigned long long result = factorial(number);\n    printf(\"Factorial of %u = %llu\\n\", number, result);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    unsigned long long result = factorial(number);\n    printf(\"Factorial of %u = %llu\\n\", number, result);\n    return 0;\n}"
    },
    {
        "instruction": "What is the correct way to define a function in C# that finds the maximum value of three integers?",
        "input": "10, 15, 5",
        "response": "public static int FindMax(int a, int b, int c)\n{\n    int max = a;\n    if (b > max) max = b;\n    if (c > max) max = c;\n    return max;\n}\n\nint max = FindMax(10, 15, 5);\nConsole.WriteLine(max);",
        "output": "public static int FindMax(int a, int b, int c)\n{\n    int max = a;\n    if (b > max) max = b;\n    if (c > max) max = c;\n    return max;\n}\n\nint max = FindMax(10, 15, 5);\nConsole.WriteLine(max);"
    },
    {
        "instruction": "Create a Java function to reverse the words in a given string while maintaining the word order.",
        "input": "Hello, how are you doing today?",
        "response": "public String reverseWords(String input) {\n    String[] words = input.split(\" \");\n    StringBuilder result = new StringBuilder();\n\n    for (String word : words) {\n        StringBuilder reverseWord = new StringBuilder(word);\n        result.append(reverseWord.reverse().toString() + \" \");\n    }\n\n    return result.toString().trim();\n}",
        "output": "public String reverseWords(String input) {\n    String[] words = input.split(\" \");\n    StringBuilder result = new StringBuilder();\n\n    for (String word : words) {\n        StringBuilder reverseWord = new StringBuilder(word);\n        result.append(reverseWord.reverse().toString() + \" \");\n    }\n\n    return result.toString().trim();\n}"
    },
    {
        "instruction": "How would you write a Python function to implement bubble sort on a list of numbers?",
        "input": "[5, 3, 7, 1, 5, 8, 0]",
        "response": "def bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n\nnumbers = [5, 3, 7, 1, 5, 8, 0]\nbubble_sort(numbers)\nprint(numbers)",
        "output": "def bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n\nnumbers = [5, 3, 7, 1, 5, 8, 0]\nbubble_sort(numbers)\nprint(numbers)"
    },
    {
        "instruction": "Develop a C program to concatenate two strings without using the strcat library function.",
        "input": "String 1: Hello\nString 2: World",
        "response": "#include <stdio.h>\n\nvoid concatenate(char s1[], char s2[]);\n\nint main() {\n    char str1[100] = \"Hello\";\n    char str2[100] = \"World\";\n    concatenate(str1, str2);\n    printf(\"Concatenated string: %s\", str1);\n    return 0;\n}\n\nvoid concatenate(char s1[], char s2[]) {\n    int i = 0, j = 0;\n    while (s1[i] != '\\0') i++;\n    while (s2[j] != '\\0') {\n        s1[i++] = s2[j++];\n    }\n    s1[i] = '\\0';\n}",
        "output": "#include <stdio.h>\n\nvoid concatenate(char s1[], char s2[]);\n\nint main() {\n    char str1[100] = \"Hello\";\n    char str2[100] = \"World\";\n    concatenate(str1, str2);\n    printf(\"Concatenated string: %s\", str1);\n    return 0;\n}\n\nvoid concatenate(char s1[], char s2[]) {\n    int i = 0, j = 0;\n    while (s1[i] != '\\0') i++;\n    while (s2[j] != '\\0') {\n        s1[i++] = s2[j++];\n    }\n    s1[i] = '\\0';\n}"
    },
    {
        "instruction": "Find a method to organize and access data in JavaScript using key-value pairs.",
        "input": "John Doe, 30, Programmer\nJane Smith, 28, Designer\nMichael Brown, 40, Manager",
        "response": "let employees = [\n    { name: 'John Doe', age: 30, role: 'Programmer' },\n    { name: 'Jane Smith', age: 28, role: 'Designer' },\n    { name: 'Michael Brown', age: 40, role: 'Manager' }\n];\n\nconsole.log(employees[0].name); // Accessing the 'name' key-value pair for the first employee",
        "output": "let employees = [\n    { name: 'John Doe', age: 30, role: 'Programmer' },\n    { name: 'Jane Smith', age: 28, role: 'Designer' },\n    { name: 'Michael Brown', age: 40, role: 'Manager' }\n];\n\nconsole.log(employees[0].name); // Accessing the 'name' key-value pair for the first employee"
    },
    {
        "instruction": "Write a Python function to calculate the length of the hypotenuse of a right-angled triangle given the lengths of the other two sides.",
        "input": "calculate_hypotenuse(3, 4)",
        "response": "def calculate_hypotenuse(side1, side2):\n    hypotenuse = (side1**2 + side2**2)**0.5\n    return hypotenuse\n\nprint(calculate_hypotenuse(3, 4))",
        "output": "def calculate_hypotenuse(side1, side2):\n    hypotenuse = (side1**2 + side2**2)**0.5\n    return hypotenuse\n\nprint(calculate_hypotenuse(3, 4))"
    },
    {
        "instruction": "Explain the concept of recursion and implement a recursive function to compute the factorial of a given number in C.",
        "input": "5",
        "response": "Recursion is a programming concept where a function calls itself to solve a smaller instance of the same problem. A recursive function generally has a base case, which defines the stopping condition, and a recursive step, where the function calls itself with a smaller input. Using recursion, we can define the factorial function as follows:\n\n#include <stdio.h>\n\nunsigned long long int factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    printf('Factorial of %u = %llu', number, factorial(number));\n    return 0;\n}",
        "output": "Recursion is a programming concept where a function calls itself to solve a smaller instance of the same problem. A recursive function generally has a base case, which defines the stopping condition, and a recursive step, where the function calls itself with a smaller input. Using recursion, we can define the factorial function as follows:\n\n#include <stdio.h>\n\nunsigned long long int factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int number = 5;\n    printf('Factorial of %u = %llu', number, factorial(number));\n    return 0;\n}"
    },
    {
        "instruction": "What is the expected output of this Java code? If there is a logic error, correct it.",
        "input": "public class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            System.out.print(i * i + ', ');\n        }\n    }\n}",
        "response": "The expected output of this Java code is '1, 4, 9, 16, 25, '. The code has a small formatting issue, where ',' is included after the last number (25). To correct it, you can add a condition to check for the last iteration:\n\npublic class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            System.out.print(i * i);\n            if (i != 5) {\n                System.out.print(', ');\n            }\n        }\n    }\n}",
        "output": "The expected output of this Java code is '1, 4, 9, 16, 25, '. The code has a small formatting issue, where ',' is included after the last number (25). To correct it, you can add a condition to check for the last iteration:\n\npublic class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            System.out.print(i * i);\n            if (i != 5) {\n                System.out.print(', ');\n            }\n        }\n    }\n}"
    },
    {
        "instruction": "Create a simple shell script that fetches the HTTP response status code of a given URL.",
        "input": "https://example.com",
        "response": "#!/bin/bash\n\nurl=$1\nstatus_code=$(curl -s -o /dev/null -w '%{http_code}' \"$url\")\necho \"HTTP response status code for $url: $status_code\"\n\n# Usage: ./status_code.sh https://example.com",
        "output": "#!/bin/bash\n\nurl=$1\nstatus_code=$(curl -s -o /dev/null -w '%{http_code}' \"$url\")\necho \"HTTP response status code for $url: $status_code\"\n\n# Usage: ./status_code.sh https://example.com"
    },
    {
        "instruction": "Create a Java program that reads a string from the user and reverses it.",
        "input": "Hello, world!",
        "response": "import java.util.Scanner;\n\npublic class ReverseString {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n        String reversed = new StringBuilder(input).reverse().toString();\n        System.out.println(\"Reversed string: \" + reversed);\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class ReverseString {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n        String reversed = new StringBuilder(input).reverse().toString();\n        System.out.println(\"Reversed string: \" + reversed);\n    }\n}"
    },
    {
        "instruction": "How would you fix the following TypeScript code to correctly compute the factorial of a given integer number?",
        "input": "function factorial(n: number): number {\n    if (n === 0) {\n        return 0;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));",
        "response": "function factorial(n: number): number {\n    if (n === 0) {\n        return 1; // Change this line to return 1 instead of 0\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));",
        "output": "function factorial(n: number): number {\n    if (n === 0) {\n        return 1; // Change this line to return 1 instead of 0\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));"
    },
    {
        "instruction": "In C++, write a program that prints the first n elements of the Fibonacci sequence, with n provided by the user.",
        "input": "10",
        "response": "#include <iostream>\n\nint main() {\n    int n, first = 0, second = 1, next;\n    std::cout << \"Enter the number of elements: \";\n    std::cin >> n;\n\n    for (int i = 0; i < n; ++i) {\n        if (i <= 1) {\n            next = i;\n        } else {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        std::cout << next << ' ';\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int n, first = 0, second = 1, next;\n    std::cout << \"Enter the number of elements: \";\n    std::cin >> n;\n\n    for (int i = 0; i < n; ++i) {\n        if (i <= 1) {\n            next = i;\n        } else {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        std::cout << next << ' ';\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Can you write a shell script that counts the number of files in the current directory with a specific file extension?",
        "input": ".txt",
        "response": "#!/bin/sh\n\nfile_extension=\".txt\"\nfile_count=$(find . -type f -name \"*$file_extension\" -maxdepth 1 | wc -l)\necho \"Number of $file_extension files: $file_count\"",
        "output": "#!/bin/sh\n\nfile_extension=\".txt\"\nfile_count=$(find . -type f -name \"*$file_extension\" -maxdepth 1 | wc -l)\necho \"Number of $file_extension files: $file_count\""
    },
    {
        "instruction": "Create a Python function that computes the Fibonacci sequence of a given number 'n' using recursion.",
        "input": "",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n\n# Example: print(fibonacci(5))",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n\n# Example: print(fibonacci(5))"
    },
    {
        "instruction": "What is an efficient way to implement a bubble sort algorithm in Java? Write the code for the sorting method.",
        "input": "",
        "response": "public void bubbleSort(int[] arr) {\n    int n = arr.length;\n    boolean swapped;\n    for (int i = 0; i < n - 1; i++) {\n        swapped = false;\n        for (int j = 0; j < n - 1 - i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                swapped = true;\n            }\n        }\n        // If no two elements were swapped in the inner loop, the array is already sorted\n        if (!swapped) break;\n    }\n}\n\n // Example usage: bubbleSort(new int[]{5, 2, 1, 3, 4});",
        "output": "public void bubbleSort(int[] arr) {\n    int n = arr.length;\n    boolean swapped;\n    for (int i = 0; i < n - 1; i++) {\n        swapped = false;\n        for (int j = 0; j < n - 1 - i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                swapped = true;\n            }\n        }\n        // If no two elements were swapped in the inner loop, the array is already sorted\n        if (!swapped) break;\n    }\n}\n\n // Example usage: bubbleSort(new int[]{5, 2, 1, 3, 4});"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of integers as input, loops through the integers, and finds the highest and lowest numbers. Return the result as an object with 'highest' and 'lowest' properties.",
        "input": "",
        "response": "function findHighestAndLowest(arr) {\n    let highest = arr[0];\n    let lowest = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > highest) {\n            highest = arr[i];\n        } else if (arr[i] < lowest) {\n            lowest = arr[i];\n        }\n    }\n\n    return { highest: highest, lowest: lowest };\n}\n\n// Example: findHighestAndLowest([6, 2, 10, 3, 5, 1]);",
        "output": "function findHighestAndLowest(arr) {\n    let highest = arr[0];\n    let lowest = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > highest) {\n            highest = arr[i];\n        } else if (arr[i] < lowest) {\n            lowest = arr[i];\n        }\n    }\n\n    return { highest: highest, lowest: lowest };\n}\n\n// Example: findHighestAndLowest([6, 2, 10, 3, 5, 1]);"
    },
    {
        "instruction": "Write a C function to reverse a given string in-place without using any additional memory except for the loop counter variable(s).",
        "input": "",
        "response": "#include <stdio.h>\n#include <string.h>\n\nvoid reverse_string(char *str) {\n    int i, j;\n    char temp;\n    for (i = 0, j = strlen(str) - 1; i < j; i++, j--) {\n        temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n    }\n}\n\n/*\nint main() {\n    char st[] = \"hello, world!\";\n    printf(\"Original string: %s\\n\", st);\n    reverse_string(st);\n    printf(\"Reversed string: %s\", st);\n    return 0;\n}\n*/",
        "output": "#include <stdio.h>\n#include <string.h>\n\nvoid reverse_string(char *str) {\n    int i, j;\n    char temp;\n    for (i = 0, j = strlen(str) - 1; i < j; i++, j--) {\n        temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n    }\n}\n\n/*\nint main() {\n    char st[] = \"hello, world!\";\n    printf(\"Original string: %s\\n\", st);\n    reverse_string(st);\n    printf(\"Reversed string: %s\", st);\n    return 0;\n}\n*/"
    },
    {
        "instruction": "Show me a JavaScript function called 'isPrime' that takes a single positive integer argument and returns a boolean indicating whether that number is a prime or not.",
        "input": "",
        "response": "function isPrime(n) {\n    if (n <= 1) {\n        return false;\n    }\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n\n    return true;\n}",
        "output": "function isPrime(n) {\n    if (n <= 1) {\n        return false;\n    }\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n\n    return true;\n}"
    },
    {
        "instruction": "Rewrite this Python code to be more Pythonic: 'def sum_numbers(numbers): total = 0; for num in numbers: total += num; return total'",
        "input": "",
        "response": "def sum_numbers(numbers):\n    return sum(numbers)",
        "output": "def sum_numbers(numbers):\n    return sum(numbers)"
    },
    {
        "instruction": "Debug this piece of Java code to print the factorial of a given number: 'int factorial(int n) { if (n == 1) return n; return n * factorial(n - 1); }'",
        "input": "",
        "response": "int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n\n    return n * factorial(n - 1);\n}",
        "output": "int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Create a C++ function that takes a vector of strings and returns the longest string. If there are multiple strings with the same longest length, return the first one encountered.",
        "input": "",
        "response": "#include <string>\n#include <vector>\n\nstd::string find_longest_string(const std::vector<std::string>& strings) {\n    std::string longest = \"\";\n    for (const auto& str : strings) {\n        if (str.length() > longest.length()) {\n            longest = str;\n        }\n    }\n    return longest;\n}",
        "output": "#include <string>\n#include <vector>\n\nstd::string find_longest_string(const std::vector<std::string>& strings) {\n    std::string longest = \"\";\n    for (const auto& str : strings) {\n        if (str.length() > longest.length()) {\n            longest = str;\n        }\n    }\n    return longest;\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of integers and returns the sum of all even numbers in the array.",
        "input": "[1, 4, 3, 6, 9, 7, 8, 10]",
        "response": "function sumEvenNumbers(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n// Usage: sumEvenNumbers([1, 4, 3, 6, 9, 7, 8, 10])",
        "output": "function sumEvenNumbers(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n// Usage: sumEvenNumbers([1, 4, 3, 6, 9, 7, 8, 10])"
    },
    {
        "instruction": "Using Java, how would you implement a method that checks whether a given string contains only digits?",
        "input": "12345",
        "response": "public class StringValidator {\n\n    public static boolean containsOnlyDigits(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Usage: boolean result = StringValidator.containsOnlyDigits(\"12345\");\n}",
        "output": "public class StringValidator {\n\n    public static boolean containsOnlyDigits(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Usage: boolean result = StringValidator.containsOnlyDigits(\"12345\");\n}"
    },
    {
        "instruction": "Create a Python function that takes a list of strings and returns a list of tuples containing the string and its length.",
        "input": "['apple', 'banana', 'cherry']",
        "response": "def string_length_tuples(words):\n    return [(word, len(word)) for word in words]\n\n# Usage: string_length_tuples(['apple', 'banana', 'cherry'])",
        "output": "def string_length_tuples(words):\n    return [(word, len(word)) for word in words]\n\n# Usage: string_length_tuples(['apple', 'banana', 'cherry'])"
    },
    {
        "instruction": "Given a shell script, calculate the total number of lines that are not empty or comments.",
        "input": "#!/bin/bash\n\n# This is a sample shell script\necho \"Hello, World!\"\n\necho \"This is a non-empty line\"\n\n# Another comment",
        "response": "non_comment_lines() {\n    script_file=\"$1\"\n    grep -v '^[[:blank:]]*\\(#\\|\\$\\)' \"$script_file\" | grep -v '^$' | wc -l\n}\n\n# Usage: non_comment_lines \"path/to/script.sh\"",
        "output": "non_comment_lines() {\n    script_file=\"$1\"\n    grep -v '^[[:blank:]]*\\(#\\|\\$\\)' \"$script_file\" | grep -v '^$' | wc -l\n}\n\n# Usage: non_comment_lines \"path/to/script.sh\""
    },
    {
        "instruction": "How would you implement a program in Java that prints the Fibonacci sequence up to n?",
        "input": "10",
        "response": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        int prev1 = 0, prev2 = 1;\n        System.out.print(prev1 + \" \" + prev2);\n\n        for (int i = 2; i < n; i++) {\n            int next = prev1 + prev2;\n            System.out.print(\" \" + next);\n            prev1 = prev2;\n            prev2 = next;\n        }\n    }\n}",
        "output": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        int prev1 = 0, prev2 = 1;\n        System.out.print(prev1 + \" \" + prev2);\n\n        for (int i = 2; i < n; i++) {\n            int next = prev1 + prev2;\n            System.out.print(\" \" + next);\n            prev1 = prev2;\n            prev2 = next;\n        }\n    }\n}"
    },
    {
        "instruction": "Write a C program to find the greatest common divisor (GCD) of two numbers.",
        "input": "56, 98",
        "response": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nint main() {\n    int num1 = 56, num2 = 98;\n    printf(\"GCD of %d and %d is %d\", num1, num2, gcd(num1, num2));\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nint main() {\n    int num1 = 56, num2 = 98;\n    printf(\"GCD of %d and %d is %d\", num1, num2, gcd(num1, num2));\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function that checks whether a number is a perfect square.",
        "input": "25",
        "response": "def is_perfect_square(n):\n    sqrt = int(n ** 0.5)\n    return sqrt * sqrt == n\n\nnumber = 25\nif is_perfect_square(number):\n    print(f'{number} is a perfect square.')\nelse:\n    print(f'{number} is not a perfect square.')",
        "output": "def is_perfect_square(n):\n    sqrt = int(n ** 0.5)\n    return sqrt * sqrt == n\n\nnumber = 25\nif is_perfect_square(number):\n    print(f'{number} is a perfect square.')\nelse:\n    print(f'{number} is not a perfect square.')"
    },
    {
        "instruction": "Create a Java method to calculate the sum of all elements in a double array.",
        "input": "",
        "response": "public double sumArray(double[] array) {\n    double sum = 0;\n    for (double element : array) {\n        sum += element;\n    }\n    return sum;\n}",
        "output": "public double sumArray(double[] array) {\n    double sum = 0;\n    for (double element : array) {\n        sum += element;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "How can I merge two dictionaries in Python by summing up the values for the same keys?",
        "input": "dict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'b': 4, 'c': 5, 'd': 6}",
        "response": "def merge_dicts_sum_values(dict1, dict2):\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result",
        "output": "def merge_dicts_sum_values(dict1, dict2):\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result"
    },
    {
        "instruction": "Write a C++ function that takes an integer vector and returns the product of all its elements.",
        "input": "",
        "response": "#include <vector>\n\nint calculate_product(std::vector<int> nums) {\n    int product = 1;\n    for (int num : nums) {\n        product *= num;\n    }\n    return product;\n}",
        "output": "#include <vector>\n\nint calculate_product(std::vector<int> nums) {\n    int product = 1;\n    for (int num : nums) {\n        product *= num;\n    }\n    return product;\n}"
    },
    {
        "instruction": "Provide a JavaScript function to sort an array of objects by a specific property in ascending order.",
        "input": "const data = [\n    { name: 'Alice', age: 30 },\n    { name: 'Bob', age: 25 },\n    { name: 'Carla', age: 35 }\n];",
        "response": "function sortByProperty(arr, prop) {\n    return arr.sort((a, b) => a[prop] - b[prop]);\n}",
        "output": "function sortByProperty(arr, prop) {\n    return arr.sort((a, b) => a[prop] - b[prop]);\n}"
    },
    {
        "instruction": "Create a C# function that takes a list of integers and returns the sum of even numbers in it.",
        "input": "List<int> numbers = new List<int> {2, 3, 4, 6, 9, 11};",
        "response": "public int SumEvenNumbers(List<int> numbers)\n{\n    int sum = 0;\n    foreach(int number in numbers)\n    {\n        if (number % 2 == 0)\n        {\n            sum += number;\n        }\n    }\n    return sum;\n}\n\nList<int> numbers = new List<int> {2, 3, 4, 6, 9, 11};\nint result = SumEvenNumbers(numbers);\nConsole.WriteLine(result);",
        "output": "public int SumEvenNumbers(List<int> numbers)\n{\n    int sum = 0;\n    foreach(int number in numbers)\n    {\n        if (number % 2 == 0)\n        {\n            sum += number;\n        }\n    }\n    return sum;\n}\n\nList<int> numbers = new List<int> {2, 3, 4, 6, 9, 11};\nint result = SumEvenNumbers(numbers);\nConsole.WriteLine(result);"
    },
    {
        "instruction": "What is the expected output of running the following Python script?",
        "input": "def multiply_numbers(a, b):\n    return a * b\n\nfirst_num = 7\nsecond_num = 8\nresult = multiply_numbers(first_num, second_num)\nprint(result)",
        "response": "56",
        "output": "56"
    },
    {
        "instruction": "Translate the following Python code that reads a CSV file into equivalent Java code:",
        "input": "import csv\n\nfilename = 'example.csv'\nwith open(filename, 'r') as file:\n    csv_reader = csv.reader(file)\n    for row in csv_reader:\n        print(', '.join(row))",
        "response": "import java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\npublic class CSVReader {\n    public static void main(String[] args) {\n        String filename = \"example.csv\";\n\n        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] values = line.split(\",\");\n                System.out.println(String.join(\", \", values));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "output": "import java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\npublic class CSVReader {\n    public static void main(String[] args) {\n        String filename = \"example.csv\";\n\n        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] values = line.split(\",\");\n                System.out.println(String.join(\", \", values));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
        "instruction": "Develop a simple shell script that takes a directory path as an argument and lists all the files and folders within that directory:",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndirectory=\"$1\"\n\nif [ -d \"$directory\" ]; then\n    echo \"Files and directories in $directory:\"\n    ls \"$directory\"\nelse\n    echo \"The specified directory does not exist.\"\nfi",
        "output": "#!/bin/bash\n\ndirectory=\"$1\"\n\nif [ -d \"$directory\" ]; then\n    echo \"Files and directories in $directory:\"\n    ls \"$directory\"\nelse\n    echo \"The specified directory does not exist.\"\nfi"
    },
    {
        "instruction": "Create a Python function that calculates the nth number of the Fibonacci sequence using recursion.",
        "input": "n = 6",
        "response": "def fibonacci(n):\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 6\nresult = fibonacci(n)\nprint(f'The {n}th number in the Fibonacci sequence is {result}')",
        "output": "def fibonacci(n):\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 6\nresult = fibonacci(n)\nprint(f'The {n}th number in the Fibonacci sequence is {result}')"
    },
    {
        "instruction": "Write a JavaScript function that, given a string, returns its reversed version.",
        "input": "input_string = 'hello world'",
        "response": "function reverseString(input_string) {\n    return input_string.split('').reverse().join('');\n}\n\nvar input_string = 'hello world';\nvar reversed_string = reverseString(input_string);\nconsole.log('Reversed string:', reversed_string);",
        "output": "function reverseString(input_string) {\n    return input_string.split('').reverse().join('');\n}\n\nvar input_string = 'hello world';\nvar reversed_string = reverseString(input_string);\nconsole.log('Reversed string:', reversed_string);"
    },
    {
        "instruction": "How would you implement a Java class called 'Circle' that has a constructor with two arguments, double radius and String color, and a method 'area()' that calculates the area of the circle?",
        "input": "radius = 5.0;\ncolor = 'red'",
        "response": "public class Circle {\n    private double radius;\n    private String color;\n\n    public Circle(double radius, String color) {\n        this.radius = radius;\n        this.color = color;\n    }\n\n    public double area() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n}\n\n// Usage\nCircle circle = new Circle(5.0, 'red');\ndouble area = circle.area();\nSystem.out.println('The area of the circle is ' + area);",
        "output": "public class Circle {\n    private double radius;\n    private String color;\n\n    public Circle(double radius, String color) {\n        this.radius = radius;\n        this.color = color;\n    }\n\n    public double area() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n}\n\n// Usage\nCircle circle = new Circle(5.0, 'red');\ndouble area = circle.area();\nSystem.out.println('The area of the circle is ' + area);"
    },
    {
        "instruction": "Translate the following Python code to C++: 'for i in range(1, 11): print(i * i)'",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 10; ++i) {\n        std::cout << i * i << std::endl;\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 10; ++i) {\n        std::cout << i * i << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that accepts two lists, combines them, sorts the elements in ascending order, and then returns the result.",
        "input": "",
        "response": "def merge_sort_lists(list1, list2):\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list",
        "output": "def merge_sort_lists(list1, list2):\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list"
    },
    {
        "instruction": "How would you write a Java method that takes an array of integers and returns the sum of all elements in the array?",
        "input": "",
        "response": "public int sumArrayElements(int[] array) {\n    int sum = 0;\n    for (int i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}",
        "output": "public int sumArrayElements(int[] array) {\n    int sum = 0;\n    for (int i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Construct a JavaScript function that takes a string as input, removes all vowels from it, and returns the modified string.",
        "input": "",
        "response": "function removeVowels(inputString) {\n    return inputString.replace(/[aeiou]/ig, '');\n}",
        "output": "function removeVowels(inputString) {\n    return inputString.replace(/[aeiou]/ig, '');\n}"
    },
    {
        "instruction": "Write a C++ function that calculates the sum of the first n Fibonacci numbers, where n is a given input.",
        "input": "",
        "response": "#include <iostream>\n\nunsigned long long calculateFibonacciSum(int n) {\n    if (n <= 0) return 0;\n    unsigned long long previous = 0, current = 1, sum = 1;\n    for (int i = 2; i < n; i++) {\n        unsigned long long next = previous + current;\n        sum += next;\n        previous = current;\n        current = next;\n    }\n    return sum;\n}",
        "output": "#include <iostream>\n\nunsigned long long calculateFibonacciSum(int n) {\n    if (n <= 0) return 0;\n    unsigned long long previous = 0, current = 1, sum = 1;\n    for (int i = 2; i < n; i++) {\n        unsigned long long next = previous + current;\n        sum += next;\n        previous = current;\n        current = next;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Create a Java function that checks if a number is prime and returns a boolean.",
        "input": "17",
        "response": "public static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint number = 17;\nboolean result = isPrime(number);\nSystem.out.println(result);",
        "output": "public static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint number = 17;\nboolean result = isPrime(number);\nSystem.out.println(result);"
    },
    {
        "instruction": "How can I convert a list of strings to uppercase in Python?",
        "input": "['hello', 'world']",
        "response": "def convert_to_uppercase(strings):\n    return [s.upper() for s in strings]\n\ninput_list = ['hello', 'world']\nuppercased_list = convert_to_uppercase(input_list)\nprint(uppercased_list)",
        "output": "def convert_to_uppercase(strings):\n    return [s.upper() for s in strings]\n\ninput_list = ['hello', 'world']\nuppercased_list = convert_to_uppercase(input_list)\nprint(uppercased_list)"
    },
    {
        "instruction": "Fix the syntax error in the following JavaScript code:",
        "input": "const myArray = [1, 2, 3, 4, 5; \nmyArray.forEach(element => console.log(element * 2));",
        "response": "const myArray = [1, 2, 3, 4, 5]; \nmyArray.forEach(element => console.log(element * 2));",
        "output": "const myArray = [1, 2, 3, 4, 5]; \nmyArray.forEach(element => console.log(element * 2));"
    },
    {
        "instruction": "Translate the following C++ code to Python:",
        "input": "#include<iostream>\n\nvoid printStars(int n) {\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            std::cout << \"*\";\n        }\n        std::cout << std::endl;\n    }\n}\n\n",
        "response": "def print_stars(n):\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            print('*', end='')\n        print()\n\nn = 5\nprint_stars(n)",
        "output": "def print_stars(n):\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            print('*', end='')\n        print()\n\nn = 5\nprint_stars(n)"
    },
    {
        "instruction": "Create a function in Python that calculates the harmonic mean of a list of numbers.",
        "input": "",
        "response": "def harmonic_mean(numbers):\n    if not numbers:\n        return 0\n    sum_of_reciprocals = sum(1 / x for x in numbers)\n    return len(numbers) / sum_of_reciprocals",
        "output": "def harmonic_mean(numbers):\n    if not numbers:\n        return 0\n    sum_of_reciprocals = sum(1 / x for x in numbers)\n    return len(numbers) / sum_of_reciprocals"
    },
    {
        "instruction": "Translate the following JavaScript code to an equivalent in Java: \n\nfunction countWords(inputString) {\n  return inputString.split(' ').length;\n}",
        "input": "",
        "response": "public class WordCounter {\n\n  public static int countWords(String inputString) {\n    return inputString.split(\" \").length;\n  }\n}",
        "output": "public class WordCounter {\n\n  public static int countWords(String inputString) {\n    return inputString.split(\" \").length;\n  }\n}"
    },
    {
        "instruction": "What changes would you make to this C++ code to make it more efficient and readable? \n\n#include <iostream>\n\nint main() {\n    int x = 0;\n    for (int i = 0; i < 10; i++) {\n        x = x * i;\n    }\n    std::cout << x << std::endl;\n    return 0;\n}",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    int product = 1;\n    for (int i = 1; i <= 10; i++) {\n        product *= i;\n    }\n    std::cout << product << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int product = 1;\n    for (int i = 1; i <= 10; i++) {\n        product *= i;\n    }\n    std::cout << product << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Using Ruby, write a method that takes an array of positive integers and returns the integer with the highest frequency.",
        "input": "",
        "response": "def highest_frequency(numbers)\n  frequencies = numbers.each_with_object(Hash.new(0)) { |number, count| count[number] += 1 }\n  frequencies.key(frequencies.values.max)\nend",
        "output": "def highest_frequency(numbers)\n  frequencies = numbers.each_with_object(Hash.new(0)) { |number, count| count[number] += 1 }\n  frequencies.key(frequencies.values.max)\nend"
    },
    {
        "instruction": "Create a shell script to get the current date and time and save it into a file called 'current_datetime.txt'.",
        "input": "",
        "response": "#!/bin/sh\n\n# Get the current date and time\nCURRENT_DATETIME=$(date)\n\n# Save the current date and time into a file\necho $CURRENT_DATETIME > current_datetime.txt",
        "output": "#!/bin/sh\n\n# Get the current date and time\nCURRENT_DATETIME=$(date)\n\n# Save the current date and time into a file\necho $CURRENT_DATETIME > current_datetime.txt"
    },
    {
        "instruction": "What is the JavaScript code to make an API call to the following endpoint, retrieve the JSON and parse the name of the first result?",
        "input": "Endpoint: https://api.example.com/users",
        "response": "async function fetchFirstUserName() {\n  try {\n    const response = await fetch('https://api.example.com/users');\n    const data = await response.json();\n    const firstUserName = data[0].name;\n    console.log(firstUserName);\n  } catch (error) {\n    console.error('Error fetching first user name:', error);\n  }\n}\n\nfetchFirstUserName();",
        "output": "async function fetchFirstUserName() {\n  try {\n    const response = await fetch('https://api.example.com/users');\n    const data = await response.json();\n    const firstUserName = data[0].name;\n    console.log(firstUserName);\n  } catch (error) {\n    console.error('Error fetching first user name:', error);\n  }\n}\n\nfetchFirstUserName();"
    },
    {
        "instruction": "Explain and provide Python code to find the longest consecutive subsequence of non-repeated characters in a given string.",
        "input": "",
        "response": "def longest_subsequence(s: str) -> str:\n    n = len(s)\n    i = 0\n    j = 0\n    char_set = set()\n    longest = ''\n\n    # Iterate through the string\n    while j < n:\n        if s[j] not in char_set:\n            char_set.add(s[j])\n            j += 1\n            if j - i > len(longest):\n                longest = s[i:j]\n        else:\n            char_set.remove(s[i])\n            i += 1\n\n    return longest\n\n# Usage: longest_subsequence('abcabcbb') returns 'abc'",
        "output": "def longest_subsequence(s: str) -> str:\n    n = len(s)\n    i = 0\n    j = 0\n    char_set = set()\n    longest = ''\n\n    # Iterate through the string\n    while j < n:\n        if s[j] not in char_set:\n            char_set.add(s[j])\n            j += 1\n            if j - i > len(longest):\n                longest = s[i:j]\n        else:\n            char_set.remove(s[i])\n            i += 1\n\n    return longest\n\n# Usage: longest_subsequence('abcabcbb') returns 'abc'"
    },
    {
        "instruction": "Write a Java function that takes a list of integers and returns the sum of all the odd numbers in the list.",
        "input": "",
        "response": "import java.util.List;\n\npublic int sumOfOdds(List<Integer> numbers) {\n    int sum = 0;\n\n    for (int number : numbers) {\n        if (number % 2 != 0) {\n            sum += number;\n        }\n    }\n\n    return sum;\n}",
        "output": "import java.util.List;\n\npublic int sumOfOdds(List<Integer> numbers) {\n    int sum = 0;\n\n    for (int number : numbers) {\n        if (number % 2 != 0) {\n            sum += number;\n        }\n    }\n\n    return sum;\n}"
    },
    {
        "instruction": "Could you provide an example of how to create a class in Java that represents a Person, with properties for their name and age, and a custom toString method?",
        "input": "",
        "response": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person {\" +\n                \"name='\" + name + \"', \" +\n                \"age=\" + age +\n                \"}\";\n    }\n}",
        "output": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person {\" +\n                \"name='\" + name + \"', \" +\n                \"age=\" + age +\n                \"}\";\n    }\n}"
    },
    {
        "instruction": "Please demonstrate the usage of C++'s 'std::accumulate' function to find the sum of an integer vector.",
        "input": "std::vector<int> numbers = {1, 2, 3, 4, 5};",
        "response": "#include <iostream>\n#include <vector>\n#include <numeric>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);\n\n    std::cout << \"The sum is: \" << sum << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n#include <numeric>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);\n\n    std::cout << \"The sum is: \" << sum << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Explain how to parse a JSON string using JavaScript and access a specific value in the resulting object.",
        "input": "{\"name\": \"Alice\", \"age\": 30}",
        "response": "// You can use `JSON.parse` to parse JSON string in JavaScript\nconst jsonString = '{\"name\": \"Alice\", \"age\": 30}';\n\n// Parsed JSON object\nconst jsonObject = JSON.parse(jsonString);\n\n// Accessing specific value\nconst name = jsonObject.name;\n\nconsole.log('Name:', name);",
        "output": "// You can use `JSON.parse` to parse JSON string in JavaScript\nconst jsonString = '{\"name\": \"Alice\", \"age\": 30}';\n\n// Parsed JSON object\nconst jsonObject = JSON.parse(jsonString);\n\n// Accessing specific value\nconst name = jsonObject.name;\n\nconsole.log('Name:', name);"
    },
    {
        "instruction": "Implement a recursive function to reverse a string using Python.",
        "input": "abcd",
        "response": "def reverse_string(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\n\ninput_string = 'abcd'\nreversed_string = reverse_string(input_string)\nprint(reversed_string)",
        "output": "def reverse_string(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\n\ninput_string = 'abcd'\nreversed_string = reverse_string(input_string)\nprint(reversed_string)"
    },
    {
        "instruction": "Create a Java function to reverse a given string without using the built-in reverse function.",
        "input": "Hello, world!",
        "response": "public class StringReverse {\n\n    public static void main(String[] args) {\n        String input = \"Hello, world!\";\n        System.out.println(reverseString(input));\n    }\n\n    public static String reverseString(String str) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            reversed.append(str.charAt(i));\n        }\n        return reversed.toString();\n    }\n}",
        "output": "public class StringReverse {\n\n    public static void main(String[] args) {\n        String input = \"Hello, world!\";\n        System.out.println(reverseString(input));\n    }\n\n    public static String reverseString(String str) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            reversed.append(str.charAt(i));\n        }\n        return reversed.toString();\n    }\n}"
    },
    {
        "instruction": "How can I filter out odd numbers from a list of integers in Python?",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def filter_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = filter_even_numbers(input_list)\nprint(result)",
        "output": "def filter_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = filter_even_numbers(input_list)\nprint(result)"
    },
    {
        "instruction": "Write a C++ program that reads a list of integers and prints the second smallest integer in the list.",
        "input": "8, 5, 12, 3, 7, 1",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {8, 5, 12, 3, 7, 1};\n    std::sort(numbers.begin(), numbers.end());\n    std::cout << \"Second smallest integer: \" << numbers[1] << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {8, 5, 12, 3, 7, 1};\n    std::sort(numbers.begin(), numbers.end());\n    std::cout << \"Second smallest integer: \" << numbers[1] << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Develop a JavaScript function to calculate the factorial of a given positive integer.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nlet input = 5;\nlet result = factorial(input);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nlet input = 5;\nlet result = factorial(input);\nconsole.log(result);"
    },
    {
        "instruction": "Create a shell script to count the number of files with a .txt extension in the current directory.",
        "input": "",
        "response": "#!/bin/bash\n\nfile_count=$(ls *.txt 2>/dev/null | wc -l)\necho \"Number of .txt files: $file_count\"",
        "output": "#!/bin/bash\n\nfile_count=$(ls *.txt 2>/dev/null | wc -l)\necho \"Number of .txt files: $file_count\""
    },
    {
        "instruction": "In Java, write a method to calculate the volume of a cylinder given its radius and height.",
        "input": "",
        "response": "public double cylinderVolume(double radius, double height) {\n  final double PI = 3.141592653589793;\n  double volume = PI * Math.pow(radius, 2) * height;\n  return volume;\n}",
        "output": "public double cylinderVolume(double radius, double height) {\n  final double PI = 3.141592653589793;\n  double volume = PI * Math.pow(radius, 2) * height;\n  return volume;\n}"
    },
    {
        "instruction": "How can one use JavaScript to find the largest element in an array of integers?",
        "input": "",
        "response": "function findMax(arr) {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}",
        "output": "function findMax(arr) {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}"
    },
    {
        "instruction": "Given a Python function to calculate the distance between two points, what modifications are needed to this code to compute distance only if the coordinates are positive?",
        "input": "def calculate_distance(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5",
        "response": "def calculate_distance(x1, y1, x2, y2):\n    if x1 >= 0 and y1 >= 0 and x2 >= 0 and y2 >= 0:\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    else:\n        return None\n",
        "output": "def calculate_distance(x1, y1, x2, y2):\n    if x1 >= 0 and y1 >= 0 and x2 >= 0 and y2 >= 0:\n        return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    else:\n        return None\n"
    },
    {
        "instruction": "Create a C++ program that calculates and displays the area of a triangle given its base and height.",
        "input": "Base: 10, Height: 5",
        "response": "#include <iostream>\n\nint main() {\n    double base, height, area;\n    base = 10;\n    height = 5;\n    area = 0.5 * base * height;\n    std::cout << \"Area of the triangle: \" << area << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    double base, height, area;\n    base = 10;\n    height = 5;\n    area = 0.5 * base * height;\n    std::cout << \"Area of the triangle: \" << area << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script to rename all files with a '.txt' extension in the current directory to have a '.bak' extension instead.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *.txt; do\n    mv \"$file\" \"${file%.txt}.bak\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt; do\n    mv \"$file\" \"${file%.txt}.bak\"\ndone"
    },
    {
        "instruction": "Translate the following JavaScript code into equivalent Python code: const arr = [1, 2, 3, 4, 5]; const sum = arr.reduce((accumulator, value) => accumulator + value, 0); console.log(sum);",
        "input": "",
        "response": "arr = [1, 2, 3, 4, 5]\nsum = sum(arr)\nprint(sum)",
        "output": "arr = [1, 2, 3, 4, 5]\nsum = sum(arr)\nprint(sum)"
    },
    {
        "instruction": "Create a Python script that receives a list of words, counts the occurrences of each word and displays the top 3 most frequent words.",
        "input": "['apple', 'banana', 'apple', 'orange', 'banana', 'apple']",
        "response": "from collections import Counter\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter(words)\ntop_words = counts.most_common(3)\nprint(top_words)",
        "output": "from collections import Counter\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\ncounts = Counter(words)\ntop_words = counts.most_common(3)\nprint(top_words)"
    },
    {
        "instruction": "What changes should be made to this Java code to correctly output the message 'Goodbye, World!' instead of 'Hello, World!'?",
        "input": "public class HelloWorld {\n public static void main(String[] args) {\n System.out.println(\"Hello, World!\");\n }\n}",
        "response": "public class GoodbyeWorld {\n public static void main(String[] args) {\n System.out.println(\"Goodbye, World!\");\n }\n}",
        "output": "public class GoodbyeWorld {\n public static void main(String[] args) {\n System.out.println(\"Goodbye, World!\");\n }\n}"
    },
    {
        "instruction": "Translate the following PHP code snippet to Ruby: '<?php echo \"Hello, World!\"; ?>'",
        "input": "",
        "response": "puts 'Hello, World!'",
        "output": "puts 'Hello, World!'"
    },
    {
        "instruction": "Write a Bash script that calculates the sum of all command line arguments passed to the script, assuming they are all integers.",
        "input": "1 2 3 4 5",
        "response": "#!/bin/bash\n\nsum=0\n\nfor num in \"$@\"\ndo\n sum=$(($sum + $num))\ndone\n\necho \"Sum: $sum\"",
        "output": "#!/bin/bash\n\nsum=0\n\nfor num in \"$@\"\ndo\n sum=$(($sum + $num))\ndone\n\necho \"Sum: $sum\""
    },
    {
        "instruction": "Write a Python function that calculates the area of a circle given its radius as an input.",
        "input": "",
        "response": "import math\n\ndef area_of_circle(radius):\n    return math.pi * radius ** 2",
        "output": "import math\n\ndef area_of_circle(radius):\n    return math.pi * radius ** 2"
    },
    {
        "instruction": "What is wrong with the following Java code snippet, and how would you fix it?\nclass Main {\npublic static void main(String[] args) {\nint a = 0;\nint b = 5;\nint result = a / 0;\nSystem.out.println(\"Result: \" + result);\n}\n}",
        "input": "",
        "response": "The code is attempting to divide by zero, which will cause a runtime error in Java. To fix this, you should check for division by zero before performing the operation.\n\nHere is the corrected code snippet:\n\nclass Main {\n    public static void main(String[] args) {\n        int a = 0;\n        int b = 5;\n        if (b != 0) {\n            int result = a / b;\n            System.out.println(\"Result: \" + result);\n        } else {\n            System.out.println(\"Error: Cannot divide by zero\");\n        }\n    }\n}",
        "output": "The code is attempting to divide by zero, which will cause a runtime error in Java. To fix this, you should check for division by zero before performing the operation.\n\nHere is the corrected code snippet:\n\nclass Main {\n    public static void main(String[] args) {\n        int a = 0;\n        int b = 5;\n        if (b != 0) {\n            int result = a / b;\n            System.out.println(\"Result: \" + result);\n        } else {\n            System.out.println(\"Error: Cannot divide by zero\");\n        }\n    }\n}"
    },
    {
        "instruction": "Create a bash script that accepts a file name as a command-line argument and counts the number of lines in the file.",
        "input": "",
        "response": "#!/bin/bash\n\n# Usage: ./count_lines.sh file_name\n\nfile_name=$1\nline_count=$(wc -l < \"$file_name\")\necho \"Number of lines in $file_name: $line_count\"",
        "output": "#!/bin/bash\n\n# Usage: ./count_lines.sh file_name\n\nfile_name=$1\nline_count=$(wc -l < \"$file_name\")\necho \"Number of lines in $file_name: $line_count\""
    },
    {
        "instruction": "Translate the following JavaScript code snippet to equivalent Python code:\n\nfunction sum(a, b) {\n    return a + b;\n}\n\nfunction multiply(a, b) {\n    return a * b;\n}",
        "input": "",
        "response": "def sum(a, b):\n    return a + b\n\n\ndef multiply(a, b):\n    return a * b",
        "output": "def sum(a, b):\n    return a + b\n\n\ndef multiply(a, b):\n    return a * b"
    },
    {
        "instruction": "Translate the following Python code to JavaScript: It takes an array of integers as input, finds the product of its elements and prints the result.",
        "input": "arr = [1, 2, 3, 4, 5]\n\nproduct = 1\nfor num in arr:\n    product *= num\n\nprint(product)",
        "response": "const arr = [1, 2, 3, 4, 5];\n\nlet product = 1;\nfor (const num of arr) {\n    product *= num;\n}\n\nconsole.log(product);",
        "output": "const arr = [1, 2, 3, 4, 5];\n\nlet product = 1;\nfor (const num of arr) {\n    product *= num;\n}\n\nconsole.log(product);"
    },
    {
        "instruction": "Explain each line of this Python code, which prints out the numbers 1 to 10 in reverse order.",
        "input": "for i in range(10, 0, -1):\n    print(i)",
        "response": "1. for i in range(10, 0, -1): // Initialize a for loop that sets 'i' to start from 10, decrement by 1 each iteration, and stop when 'i' is greater than 0.\n2.    print(i) // Inside the loop, print the value of 'i' on each iteration.",
        "output": "1. for i in range(10, 0, -1): // Initialize a for loop that sets 'i' to start from 10, decrement by 1 each iteration, and stop when 'i' is greater than 0.\n2.    print(i) // Inside the loop, print the value of 'i' on each iteration."
    },
    {
        "instruction": "In Java, write a program that takes an array of positive integers, and returns the largest odd number. If no odd number is present, return -1.",
        "input": "",
        "response": "public int findLargestOdd(int[] arr) {\n    int largestOdd = -1;\n    for (int num : arr) {\n        if (num % 2 == 1 && num > largestOdd) {\n            largestOdd = num;\n        }\n    }\n    return largestOdd;\n}",
        "output": "public int findLargestOdd(int[] arr) {\n    int largestOdd = -1;\n    for (int num : arr) {\n        if (num % 2 == 1 && num > largestOdd) {\n            largestOdd = num;\n        }\n    }\n    return largestOdd;\n}"
    },
    {
        "instruction": "Create a C program that checks, given an integer input, if the integer is a power of 2.",
        "input": "",
        "response": "#include <stdio.h>\n\nint isPowerOfTwo(int num) {\n    return num && (!(num & (num - 1)));\n}\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n\n    if (isPowerOfTwo(num)) {\n        printf(\"%d is a power of 2.\", num);\n    } else {\n        printf(\"%d is not a power of 2.\", num);\n    }\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint isPowerOfTwo(int num) {\n    return num && (!(num & (num - 1)));\n}\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n\n    if (isPowerOfTwo(num)) {\n        printf(\"%d is a power of 2.\", num);\n    } else {\n        printf(\"%d is not a power of 2.\", num);\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function to calculate the Fibonacci sequence up to the nth number.",
        "input": "",
        "response": "def fibonacci(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[:n]",
        "output": "def fibonacci(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[:n]"
    },
    {
        "instruction": "What is the expected output of the following JavaScript code? Calculate the sum of array elements and provide the answer.",
        "input": "const arr = [1, 2, 3, 4, 5];\nconst sum = arr.reduce((a, b) => a + b, 0);",
        "response": "The expected output is the sum of the array elements, which equals 15.",
        "output": "The expected output is the sum of the array elements, which equals 15."
    },
    {
        "instruction": "Translate the following Python code to Java that computes the product of all elements in a list:",
        "input": "def product(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    return result",
        "response": "public int product(List<Integer> numbers) {\n    int result = 1;\n    for (int number : numbers) {\n        result *= number;\n    }\n    return result;\n}",
        "output": "public int product(List<Integer> numbers) {\n    int result = 1;\n    for (int number : numbers) {\n        result *= number;\n    }\n    return result;\n}"
    },
    {
        "instruction": "Fix the following C++ code snippet to correctly calculate the factorial of a given number using a recursive function.",
        "input": "#include <iostream>\n\nint factorial(int n) {\n    if (n >= 1) {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;\n}",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n >= 1) {\n        return n * factorial(n - 1);\n    }\n    else {\n        return 1;\n    }\n}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n >= 1) {\n        return n * factorial(n - 1);\n    }\n    else {\n        return 1;\n    }\n}\n\nint main() {\n    int num = 5;\n    std::cout << \"Factorial of \" << num << \" is: \" << factorial(num) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers and returns the sum of all even numbers.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "function sumEvenNumbers(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconst inputArray = [1, 2, 3, 4, 5, 6];\nconst result = sumEvenNumbers(inputArray);\nconsole.log('Sum of even numbers:', result);",
        "output": "function sumEvenNumbers(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconst inputArray = [1, 2, 3, 4, 5, 6];\nconst result = sumEvenNumbers(inputArray);\nconsole.log('Sum of even numbers:', result);"
    },
    {
        "instruction": "Translate the given code snippet from C# to Java. The code snippet checks if a number is even and returns a boolean value.",
        "input": "public static bool IsEven(int number)\n{\n    return number % 2 == 0;\n}",
        "response": "public static boolean isEven(int number) {\n    return number % 2 == 0;\n}",
        "output": "public static boolean isEven(int number) {\n    return number % 2 == 0;\n}"
    },
    {
        "instruction": "What would be the output of the given shell script that calculates the length of the input string?",
        "input": "#!/bin/bash\n\ninput_string=\"Hello, World!\"\nlength=${#input_string}\necho \"Length of the input string: $length\"",
        "response": "Length of the input string: 13",
        "output": "Length of the input string: 13"
    },
    {
        "instruction": "Create a Java method that calculates the sum of all elements in an ArrayList of integers.",
        "input": "",
        "response": "public int sumArrayList(ArrayList<Integer> numbers) {\n    int sum = 0;\n    for (Integer number : numbers) {\n        sum += number;\n    }\n    return sum;\n}",
        "output": "public int sumArrayList(ArrayList<Integer> numbers) {\n    int sum = 0;\n    for (Integer number : numbers) {\n        sum += number;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "How would you implement a recursive function in JavaScript that computes the nth Fibonacci number?",
        "input": "",
        "response": "function fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}",
        "output": "function fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}"
    },
    {
        "instruction": "Please write a Python function that takes a string as input and returns a dictionary with the count of each character in the string.",
        "input": "",
        "response": "def char_count(string):\n    result = {}\n    for char in string:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result",
        "output": "def char_count(string):\n    result = {}\n    for char in string:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result"
    },
    {
        "instruction": "Write a C++ function that takes a string and finds the length of the longest substring without repeating characters.",
        "input": "",
        "response": "#include <string>\n#include <unordered_set>\n\nint longest_substring_without_repeating(const std::string& s) {\n    std::unordered_set<char> char_set;\n    int max_length = 0, start = 0;\n\n    for (int i = 0; i < s.length(); ++i) {\n        while (char_set.find(s[i]) != char_set.end()) {\n            char_set.erase(s[start]);\n            ++start;\n        }\n        char_set.insert(s[i]);\n        max_length = std::max(max_length, i - start + 1);\n    }\n\n    return max_length;\n}",
        "output": "#include <string>\n#include <unordered_set>\n\nint longest_substring_without_repeating(const std::string& s) {\n    std::unordered_set<char> char_set;\n    int max_length = 0, start = 0;\n\n    for (int i = 0; i < s.length(); ++i) {\n        while (char_set.find(s[i]) != char_set.end()) {\n            char_set.erase(s[start]);\n            ++start;\n        }\n        char_set.insert(s[i]);\n        max_length = std::max(max_length, i - start + 1);\n    }\n\n    return max_length;\n}"
    },
    {
        "instruction": "Create a Java method that takes an ArrayList of integers and returns the sum of all even numbers in the list.",
        "input": "",
        "response": "public int sumEvenNumbers(ArrayList<Integer> numbers) {\n    int sum = 0;\n    for (Integer number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(ArrayList<Integer> numbers) {\n    int sum = 0;\n    for (Integer number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "What would be a correct implementation of a Bubble Sort algorithm in C++?",
        "input": "",
        "response": "#include <iostream>\n#include <vector>\n\nvoid bubbleSort(std::vector<int>& arr) {\n    int n = arr.size();\n    bool swapped;\n    for (int i = 0; i < n - 1; i++) {\n        swapped = false;\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n                swapped = true;\n            }\n        }\n        if (!swapped) break;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {64, 34, 25, 12, 22, 11, 90};\n    bubbleSort(arr);\n    for (int x : arr) {\n        std::cout << x << \" \";\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nvoid bubbleSort(std::vector<int>& arr) {\n    int n = arr.size();\n    bool swapped;\n    for (int i = 0; i < n - 1; i++) {\n        swapped = false;\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n                swapped = true;\n            }\n        }\n        if (!swapped) break;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {64, 34, 25, 12, 22, 11, 90};\n    bubbleSort(arr);\n    for (int x : arr) {\n        std::cout << x << \" \";\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Design a Python function that takes a string as input and returns True if it's a palindrome, otherwise returns False.",
        "input": "",
        "response": "def is_palindrome(s):\n    s = s.lower()\n    s = ''.join(filter(lambda x: x.isalnum(), s))\n    return s == s[::-1]",
        "output": "def is_palindrome(s):\n    s = s.lower()\n    s = ''.join(filter(lambda x: x.isalnum(), s))\n    return s == s[::-1]"
    },
    {
        "instruction": "Explain and debug the following JavaScript code for converting a given string to a URL-friendly format by replacing spaces with hyphens:",
        "input": "function createURL(title) {\n  var urlTitle = title.trim().replace(' ', '-');\n  return urlTitle;\n}\n\ncreateURL('Convert this to a url-friendly-format');",
        "response": "The given code only replaces the first occurrence of a space with a hyphen. To create a URL-friendly format, we need to replace all spaces with hyphens. To fix this issue, we can use a regular expression with the 'g' (global) flag in the replace() method.\n\nHere's the corrected code:\n\nfunction createURL(title) {\n  var urlTitle = title.trim().replace(/ /g, '-');\n  return urlTitle;\n}\n\ncreateURL('Convert this to a url-friendly-format');",
        "output": "The given code only replaces the first occurrence of a space with a hyphen. To create a URL-friendly format, we need to replace all spaces with hyphens. To fix this issue, we can use a regular expression with the 'g' (global) flag in the replace() method.\n\nHere's the corrected code:\n\nfunction createURL(title) {\n  var urlTitle = title.trim().replace(/ /g, '-');\n  return urlTitle;\n}\n\ncreateURL('Convert this to a url-friendly-format');"
    },
    {
        "instruction": "How would you implement a function in Python that takes a list of numbers and returns the even ones?",
        "input": "filter_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])",
        "response": "def filter_even_numbers(numbers):\n    return [x for x in numbers if x % 2 == 0]\n\n# Usage: filter_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]);",
        "output": "def filter_even_numbers(numbers):\n    return [x for x in numbers if x % 2 == 0]\n\n# Usage: filter_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]);"
    },
    {
        "instruction": "Write a Java function that calculates the factorial of a given number n using recursion.",
        "input": "factorial(5)",
        "response": "public class Factorial {\n\n    public static long factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}",
        "output": "public class Factorial {\n\n    public static long factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}"
    },
    {
        "instruction": "Can you provide a C++ code snippet that calculates the sum of all elements in an array?",
        "input": "int arr[] = {1, 2, 3, 4, 5};",
        "response": "#include <iostream>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    int n = sizeof(arr)/sizeof(arr[0]);\n\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    int n = sizeof(arr)/sizeof(arr[0]);\n\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python script that queries the OpenWeatherMap API and returns the temperature for a given city.",
        "input": "City: New York\nAPI key: yourapikeyhere",
        "response": "import requests\n\nAPI_KEY = 'yourapikeyhere'\nCITY_NAME = 'New York'\nBASE_URL = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'\n\nurl = BASE_URL.format(CITY_NAME, API_KEY)\nresponse = requests.get(url)\ndata = response.json()\n\nif response.status_code == 200:\n temp_kelvin = data['main']['temp']\n temp_celsius = temp_kelvin - 273.15\n print('Temperature in {}: {:.2f}\u00c2\u00b0C'.format(CITY_NAME, temp_celsius))\nelse:\n print('Error:', data.get('message', 'Unable to fetch temperature'))",
        "output": "import requests\n\nAPI_KEY = 'yourapikeyhere'\nCITY_NAME = 'New York'\nBASE_URL = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'\n\nurl = BASE_URL.format(CITY_NAME, API_KEY)\nresponse = requests.get(url)\ndata = response.json()\n\nif response.status_code == 200:\n temp_kelvin = data['main']['temp']\n temp_celsius = temp_kelvin - 273.15\n print('Temperature in {}: {:.2f}\u00c2\u00b0C'.format(CITY_NAME, temp_celsius))\nelse:\n print('Error:', data.get('message', 'Unable to fetch temperature'))"
    },
    {
        "instruction": "How can I declare and initialize an array of strings in Java with the following words: 'apple', 'banana', 'cherry'?",
        "input": "",
        "response": "In Java, you can declare and initialize an array of strings like this:\n\nString[] fruits = new String[] {\"apple\", \"banana\", \"cherry\"};",
        "output": "In Java, you can declare and initialize an array of strings like this:\n\nString[] fruits = new String[] {\"apple\", \"banana\", \"cherry\"};"
    },
    {
        "instruction": "Explain how to set up and run a Python Flask application on a local machine and provide a simple code example.",
        "input": "",
        "response": "1. Install Flask using pip:\n\n  `pip install flask`\n\n2. Create a Python file (app.py) and write the following code in it:\n\n  ```python\n  from flask import Flask\n  app = Flask(__name__)\n\n  @app.route('/')\n  def hello():\n      return 'Hello, World!'\n\n  if __name__ == '__main__':\n      app.run()\n  ```\n\n3. Run the Flask application using the command:\n\n  `python app.py`\n\n  By default, the Flask app will run locally on port 5000. You can access it using your web browser at http://127.0.0.1:5000/",
        "output": "1. Install Flask using pip:\n\n  `pip install flask`\n\n2. Create a Python file (app.py) and write the following code in it:\n\n  ```python\n  from flask import Flask\n  app = Flask(__name__)\n\n  @app.route('/')\n  def hello():\n      return 'Hello, World!'\n\n  if __name__ == '__main__':\n      app.run()\n  ```\n\n3. Run the Flask application using the command:\n\n  `python app.py`\n\n  By default, the Flask app will run locally on port 5000. You can access it using your web browser at http://127.0.0.1:5000/"
    },
    {
        "instruction": "Translate the given C++ code into equivalent Java code.\n\n#include <iostream>\n\nint main() {\n  std::cout << \"Hello, World!\" << std::endl;\n  return 0;\n}",
        "input": "",
        "response": "Here's the equivalent Java code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "output": "Here's the equivalent Java code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript function that calculates the area of a rectangle given its length and width.",
        "input": "Length: 8, Width: 6",
        "response": "function calculateArea(length, width) {\n    return length * width;\n}\n\nlet length = 8;\nlet width = 6;\nlet area = calculateArea(length, width);\nconsole.log(area);",
        "output": "function calculateArea(length, width) {\n    return length * width;\n}\n\nlet length = 8;\nlet width = 6;\nlet area = calculateArea(length, width);\nconsole.log(area);"
    },
    {
        "instruction": "How would you rewrite this Python code to prevent a ZeroDivisionError?",
        "input": "def division(a, b):\n    return a / b",
        "response": "def division(a, b):\n    if b == 0:\n        print('Error: Division by zero')\n        return None\n    else:\n        return a / b",
        "output": "def division(a, b):\n    if b == 0:\n        print('Error: Division by zero')\n        return None\n    else:\n        return a / b"
    },
    {
        "instruction": "Write a Java program to find the minimum element in an array of integers.",
        "input": "int[] numbers = {4, 2, 9, 7, 5, 1, 8};",
        "response": "public class MinElement {\n    public static void main(String[] args) {\n        int[] numbers = {4, 2, 9, 7, 5, 1, 8};\n        int min = findMin(numbers);\n        System.out.println(\"Minimum element: \" + min);\n    }\n\n    public static int findMin(int[] array) {\n        int min = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n        }\n        return min;\n    }\n}",
        "output": "public class MinElement {\n    public static void main(String[] args) {\n        int[] numbers = {4, 2, 9, 7, 5, 1, 8};\n        int min = findMin(numbers);\n        System.out.println(\"Minimum element: \" + min);\n    }\n\n    public static int findMin(int[] array) {\n        int min = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n        }\n        return min;\n    }\n}"
    },
    {
        "instruction": "Design a simple shell script to calculate a user's age by asking for their birth year.",
        "input": "Birth year: 1995",
        "response": "#!/bin/bash\n\necho \"Please enter your birth year:\";\nread birth_year;\n\ncurrent_year=$(date +\"%Y\")\nage=$((current_year - birth_year))\n\necho \"Your age is $age.\";",
        "output": "#!/bin/bash\n\necho \"Please enter your birth year:\";\nread birth_year;\n\ncurrent_year=$(date +\"%Y\")\nage=$((current_year - birth_year))\n\necho \"Your age is $age.\";"
    },
    {
        "instruction": "Create a Python function that receives a string and counts the number of vowels in it.",
        "input": "example_string = 'hello world'",
        "response": "def count_vowels(input_string):\n    vowels = 'aeiou'\n    count = 0\n    for char in input_string:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\nexample_string = 'hello world'\nresult = count_vowels(example_string)\nprint(result)",
        "output": "def count_vowels(input_string):\n    vowels = 'aeiou'\n    count = 0\n    for char in input_string:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\nexample_string = 'hello world'\nresult = count_vowels(example_string)\nprint(result)"
    },
    {
        "instruction": "Rewrite the following C code to achieve the same functionality using C++:\n\n#include <stdio.h>\n\nint main() {\n    int a = 5;\n    int b = 3;\n    int sum = a + b;\n    printf(\"Sum: %d\", sum);\n    return 0;\n}",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    int a = 5;\n    int b = 3;\n    int sum = a + b;\n    std::cout << \"Sum: \" << sum;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int a = 5;\n    int b = 3;\n    int sum = a + b;\n    std::cout << \"Sum: \" << sum;\n    return 0;\n}"
    },
    {
        "instruction": "How would you get the length of a list in Python?",
        "input": "example_list = ['apple', 'banana', 'cherry']",
        "response": "example_list = ['apple', 'banana', 'cherry']\nlength = len(example_list)\nprint(length)",
        "output": "example_list = ['apple', 'banana', 'cherry']\nlength = len(example_list)\nprint(length)"
    },
    {
        "instruction": "Write a Java method that takes an ArrayList of integers as input and returns the sum of all its elements.",
        "input": "import java.util.ArrayList;\n\nArrayList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(1);\nnumbers.add(2);\nnumbers.add(3);",
        "response": "import java.util.ArrayList;\n\npublic static int sumArrayList(ArrayList<Integer> list) {\n    int sum = 0;\n    for (Integer number : list) {\n        sum += number;\n    }\n    return sum;\n}\n\nArrayList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(1);\nnumbers.add(2);\nnumbers.add(3);\nint result = sumArrayList(numbers);\nSystem.out.println(result);",
        "output": "import java.util.ArrayList;\n\npublic static int sumArrayList(ArrayList<Integer> list) {\n    int sum = 0;\n    for (Integer number : list) {\n        sum += number;\n    }\n    return sum;\n}\n\nArrayList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(1);\nnumbers.add(2);\nnumbers.add(3);\nint result = sumArrayList(numbers);\nSystem.out.println(result);"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers and returns the sum of all the even integers.",
        "input": "[2, 5, 6, 8, 12]",
        "response": "function sumEvenIntegers(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumEvenIntegers([2, 5, 6, 8, 12])); // Expected output: 28",
        "output": "function sumEvenIntegers(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumEvenIntegers([2, 5, 6, 8, 12])); // Expected output: 28"
    },
    {
        "instruction": "In Python, write a recursive function that calculates the nth number in the Fibonacci sequence. Assume that the Fibonacci sequence starts with 0, 1,...",
        "input": "5",
        "response": "def fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(5)) # Expected output: 5",
        "output": "def fibonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(5)) # Expected output: 5"
    },
    {
        "instruction": "What would be the output of the following Java code snippet? Write the output as a string.",
        "input": "int a = 5;\nint b = 3;\nint c = a/b;\nSystem.out.println(c);",
        "response": "1",
        "output": "1"
    },
    {
        "instruction": "Fix the syntax error in the given C# code snippet to calculate the square of a number.",
        "input": "ublic satic int Square(int number)\n{\n  return number * number;\n}",
        "response": "public static int Square(int number)\n{\n  return number * number;\n}",
        "output": "public static int Square(int number)\n{\n  return number * number;\n}"
    },
    {
        "instruction": "Create a JavaScript function to calculate the area of a circle given its radius.",
        "input": "5",
        "response": "function calculateArea(radius) {\n    const PI = 3.14159;\n    return PI * Math.pow(radius, 2);\n}\n\nconst radius = 5;\nconst area = calculateArea(radius);\nconsole.log(area);",
        "output": "function calculateArea(radius) {\n    const PI = 3.14159;\n    return PI * Math.pow(radius, 2);\n}\n\nconst radius = 5;\nconst area = calculateArea(radius);\nconsole.log(area);"
    },
    {
        "instruction": "How would you implement a Java method to reverse a given string?",
        "input": "artificial intelligence",
        "response": "public class ReverseString {\n    public static String reverse(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"artificial intelligence\";\n        String reversed = reverse(input);\n        System.out.println(reversed);\n    }\n}",
        "output": "public class ReverseString {\n    public static String reverse(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"artificial intelligence\";\n        String reversed = reverse(input);\n        System.out.println(reversed);\n    }\n}"
    },
    {
        "instruction": "Write a C++ function to find the length of the longest common prefix of two given strings.",
        "input": "string1: learning, string2: learner",
        "response": "#include<iostream>\n#include<string>\n\nint longestCommonPrefixLength(std::string str1, std::string str2) {\n    int minLength = std::min(str1.length(), str2.length());\n    int commonLength = 0;\n    for (int i = 0; i < minLength; i++) {\n        if (str1[i] == str2[i]) {\n            commonLength++;\n        } else {\n            break;\n        }\n    }\n    return commonLength;\n}\n\nint main() {\n    std::string str1 = \"learning\";\n    std::string str2 = \"learner\";\n    int length = longestCommonPrefixLength(str1, str2);\n    std::cout << length << std::endl;\n    return 0;\n}",
        "output": "#include<iostream>\n#include<string>\n\nint longestCommonPrefixLength(std::string str1, std::string str2) {\n    int minLength = std::min(str1.length(), str2.length());\n    int commonLength = 0;\n    for (int i = 0; i < minLength; i++) {\n        if (str1[i] == str2[i]) {\n            commonLength++;\n        } else {\n            break;\n        }\n    }\n    return commonLength;\n}\n\nint main() {\n    std::string str1 = \"learning\";\n    std::string str2 = \"learner\";\n    int length = longestCommonPrefixLength(str1, str2);\n    std::cout << length << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a shell script that gets the current date and time and prints it in the following format: YYYY-MM-DD HH:MM:SS.",
        "input": "",
        "response": "#!/bin/sh\n\ndate '+%Y-%m-%d %H:%M:%S'",
        "output": "#!/bin/sh\n\ndate '+%Y-%m-%d %H:%M:%S'"
    },
    {
        "instruction": "Write a Python function to calculate the area of a triangle given its base and height.",
        "input": "base = 10, height = 5",
        "response": "def triangle_area(base, height):\n    return 0.5 * base * height\n\n\nbase = 10\nheight = 5\narea = triangle_area(base, height)\nprint(f'The area of the triangle is: {area}')",
        "output": "def triangle_area(base, height):\n    return 0.5 * base * height\n\n\nbase = 10\nheight = 5\narea = triangle_area(base, height)\nprint(f'The area of the triangle is: {area}')"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns the average.",
        "input": "[1, 5, 6, 8, 10]",
        "response": "function average(numbers) {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    return sum / numbers.length;\n}\n\nconst numArray = [1, 5, 6, 8, 10];\nconst avg = average(numArray);\nconsole.log(`The average of the numbers is: ${avg}`);",
        "output": "function average(numbers) {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    return sum / numbers.length;\n}\n\nconst numArray = [1, 5, 6, 8, 10];\nconst avg = average(numArray);\nconsole.log(`The average of the numbers is: ${avg}`);"
    },
    {
        "instruction": "Detect if there is any syntax error in the given Java code and return \"true\" if there is an error or \"false\" if there is no error.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "response": "false",
        "output": "false"
    },
    {
        "instruction": "Translate the following Python code into its equivalent C++ code: 'def square(x): return x * x'",
        "input": "",
        "response": "#include <iostream>\n\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int num = 5;\n    int squared = square(num);\n    std::cout << \"The square of \" << num << \" is: \" << squared << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int num = 5;\n    int squared = square(num);\n    std::cout << \"The square of \" << num << \" is: \" << squared << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Java method that takes an integer array as input and returns the sum of all even numbers in the array.",
        "input": "",
        "response": "public int sumEvenNumbers(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "What would be the equivalent code for this JavaScript function in C++?",
        "input": "function sumArray(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "response": "#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "output": "#include <vector>\n\nint sumArray(const std::vector<int> &arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Create a Python script that takes a user's name and age as input, then outputs a message telling them the year they will turn 100 years old.",
        "input": "",
        "response": "def main():\n    name = input('Enter your name: ')\n    age = int(input('Enter your age: '))\n    current_year = 2022\n    year = current_year + (100 - age)\n    print(f'{name}, you will turn 100 years old in {year}.')\n\nif __name__ == '__main__':\n    main()",
        "output": "def main():\n    name = input('Enter your name: ')\n    age = int(input('Enter your age: '))\n    current_year = 2022\n    year = current_year + (100 - age)\n    print(f'{name}, you will turn 100 years old in {year}.')\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "instruction": "Given the following C# code with a syntax error, correct it and explain the change made.",
        "input": "using System;\nclass Example {\n    static void Main() {\n        Console.Writeline(\"Hello, World!\");\n    }\n}",
        "response": "using System;\nclass Example {\n    static void Main() {\n        // Fixed the 'Writeline' method call to use the correct case: 'WriteLine'\n        Console.WriteLine(\"Hello, World!\");\n    }\n}",
        "output": "using System;\nclass Example {\n    static void Main() {\n        // Fixed the 'Writeline' method call to use the correct case: 'WriteLine'\n        Console.WriteLine(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function to create a deep copy of a given object.",
        "input": "",
        "response": "function deepCopy(obj) {\n if (typeof obj !== 'object' || obj === null) {\n return obj;\n }\n\n const copy = Array.isArray(obj) ? [] : {};\n\n for (const key in obj) {\n copy[key] = deepCopy(obj[key]);\n }\n\n return copy;\n}",
        "output": "function deepCopy(obj) {\n if (typeof obj !== 'object' || obj === null) {\n return obj;\n }\n\n const copy = Array.isArray(obj) ? [] : {};\n\n for (const key in obj) {\n copy[key] = deepCopy(obj[key]);\n }\n\n return copy;\n}"
    },
    {
        "instruction": "How would you rewrite this Python code snippet using list comprehension?",
        "input": "result = []\nfor i in range(10):\n if i % 2 == 0:\n result.append(i ** 2)\n",
        "response": "result = [i ** 2 for i in range(10) if i % 2 == 0]",
        "output": "result = [i ** 2 for i in range(10) if i % 2 == 0]"
    },
    {
        "instruction": "Create a Java method that accepts an integer array as input and returns the sum of its elements.",
        "input": "",
        "response": "public int sumArray(int[] arr) {\n int sum = 0;\n\n for (int i = 0; i < arr.length; i++) {\n sum += arr[i];\n }\n\n return sum;\n}",
        "output": "public int sumArray(int[] arr) {\n int sum = 0;\n\n for (int i = 0; i < arr.length; i++) {\n sum += arr[i];\n }\n\n return sum;\n}"
    },
    {
        "instruction": "Translate the following C++ code into equivalent Python code.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n int n;\n\n cout << \"Enter a number:\";\n cin >> n;\n\n if (n % 2 == 0) {\n cout << \"Even\";\n } else {\n cout << \"Odd\";\n }\n\n return 0;\n}",
        "response": "n = int(input(\"Enter a number:\"))\n\nif n % 2 == 0:\n print(\"Even\")\nelse:\n print(\"Odd\")",
        "output": "n = int(input(\"Enter a number:\"))\n\nif n % 2 == 0:\n print(\"Even\")\nelse:\n print(\"Odd\")"
    },
    {
        "instruction": "Create a shell script that lists all files in a directory and prints their size in bytes.",
        "input": "",
        "response": "#!/bin/bash\n\n# Iterate through all files in the directory\nfor file in *; do\n  # Get the size of the file in bytes\n  size=$(stat -c '%s' \"$file\")\n  # Print the file name and its size\n  echo \"$file - $size bytes\"\ndone",
        "output": "#!/bin/bash\n\n# Iterate through all files in the directory\nfor file in *; do\n  # Get the size of the file in bytes\n  size=$(stat -c '%s' \"$file\")\n  # Print the file name and its size\n  echo \"$file - $size bytes\"\ndone"
    },
    {
        "instruction": "How can I write a Java method that takes an integer array and returns the sum of its elements?",
        "input": "",
        "response": "public int sumArrayElements(int[] array) {\n  int sum = 0;\n\n  // Iterate through the array and add each element to the sum\n  for (int element : array) {\n    sum += element;\n  }\n\n  return sum;\n}",
        "output": "public int sumArrayElements(int[] array) {\n  int sum = 0;\n\n  // Iterate through the array and add each element to the sum\n  for (int element : array) {\n    sum += element;\n  }\n\n  return sum;\n}"
    },
    {
        "instruction": "Write a Python function that accepts a list of strings and returns the longest string with its length as a tuple.",
        "input": "",
        "response": "def find_longest_string(strings):\n  longest = ''\n\n  # Iterate through the list of strings\n  for string in strings:\n    # If the current string is longer than the longest, update the longest\n    if len(string) > len(longest):\n      longest = string\n\n  # Return the longest string with its length as a tuple\n  return longest, len(longest)",
        "output": "def find_longest_string(strings):\n  longest = ''\n\n  # Iterate through the list of strings\n  for string in strings:\n    # If the current string is longer than the longest, update the longest\n    if len(string) > len(longest):\n      longest = string\n\n  # Return the longest string with its length as a tuple\n  return longest, len(longest)"
    },
    {
        "instruction": "Implement a C++ function that calculates the factorial of a non-negative integer using a recursive approach.",
        "input": "",
        "response": "#include <iostream>\n\nunsigned long long factorial(int n) {\n  // Base case: if n is 0 or 1, return 1\n  if (n <= 1) {\n    return 1;\n  }\n  // Recursive case: multiply n by the factorial of (n - 1)\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int num = 5;\n  std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(int n) {\n  // Base case: if n is 0 or 1, return 1\n  if (n <= 1) {\n    return 1;\n  }\n  // Recursive case: multiply n by the factorial of (n - 1)\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int num = 5;\n  std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Create a C++ function that takes a string as input and returns the string in reverse.",
        "input": "A function that can be used in a C++ program, where the input is a string and the output is the same string but with characters in reverse order.",
        "response": "std::string reverse_string(const std::string& input) {\n    std::string reversed;\n    for (auto it = input.rbegin(); it != input.rend(); ++it) {\n        reversed.push_back(*it);\n    }\n    return reversed;\n}",
        "output": "std::string reverse_string(const std::string& input) {\n    std::string reversed;\n    for (auto it = input.rbegin(); it != input.rend(); ++it) {\n        reversed.push_back(*it);\n    }\n    return reversed;\n}"
    },
    {
        "instruction": "What would be the JavaScript code to fetch data from a REST API and then log the JSON data in the console?",
        "input": "A JavaScript code snippet that fetches data from \"https://api.example.com/data\" and logs the JSON data received to the console.",
        "response": "fetch('https://api.example.com/data')\n    .then(response => response.json())\n    .then(jsonData => console.log(jsonData))\n    .catch(error => console.error('Error fetching data:', error));",
        "output": "fetch('https://api.example.com/data')\n    .then(response => response.json())\n    .then(jsonData => console.log(jsonData))\n    .catch(error => console.error('Error fetching data:', error));"
    },
    {
        "instruction": "Fix the following Java code to make the calculateArea function return the correct area of a rectangle:",
        "input": "public class Rectangle {\n    int length;\n    int width;\n\n    public int calculateArea() {\n        int area = length * high;\n        return area;\n    }\n}",
        "response": "public class Rectangle {\n    int length;\n    int width;\n\n    public int calculateArea() {\n        int area = length * width; // Changed 'high' to 'width'\n        return area;\n    }\n}",
        "output": "public class Rectangle {\n    int length;\n    int width;\n\n    public int calculateArea() {\n        int area = length * width; // Changed 'high' to 'width'\n        return area;\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code to a function in the programming language Shell Script:",
        "input": "def greet(name):\n    return 'Hello, ' + name",
        "response": "greet() {\n    name=$1\n    echo \"Hello, $name\"\n}",
        "output": "greet() {\n    name=$1\n    echo \"Hello, $name\"\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers and returns a new array containing only the even numbers.",
        "input": "",
        "response": "function filterEvenNumbers(numbers) {\n  return numbers.filter(function(num) {\n    return num % 2 === 0;\n  });\n}",
        "output": "function filterEvenNumbers(numbers) {\n  return numbers.filter(function(num) {\n    return num % 2 === 0;\n  });\n}"
    },
    {
        "instruction": "How would you implement a simple counter using the useState React Hook in JavaScript?",
        "input": "",
        "response": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increase</button>\n      <button onClick={() => setCount(count - 1)}>Decrease</button>\n    </div>\n  );\n}",
        "output": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increase</button>\n      <button onClick={() => setCount(count - 1)}>Decrease</button>\n    </div>\n  );\n}"
    },
    {
        "instruction": "Write a C++ function that sorts a vector of integers in ascending order using the Bubble Sort algorithm.",
        "input": "",
        "response": "#include <vector>\n\nvoid bubbleSort(std::vector<int>& numbers) {\n  bool swapped;\n  for (size_t i = 0; i < numbers.size() - 1; ++i) {\n    swapped = false;\n    for (size_t j = 0; j < numbers.size() - i - 1; ++j) {\n      if (numbers[j] > numbers[j + 1]) {\n        std::swap(numbers[j], numbers[j + 1]);\n        swapped = true;\n      }\n    }\n    if (!swapped) break;\n  }\n}",
        "output": "#include <vector>\n\nvoid bubbleSort(std::vector<int>& numbers) {\n  bool swapped;\n  for (size_t i = 0; i < numbers.size() - 1; ++i) {\n    swapped = false;\n    for (size_t j = 0; j < numbers.size() - i - 1; ++j) {\n      if (numbers[j] > numbers[j + 1]) {\n        std::swap(numbers[j], numbers[j + 1]);\n        swapped = true;\n      }\n    }\n    if (!swapped) break;\n  }\n}"
    },
    {
        "instruction": "What would be the Python code to find the factorial of a non-negative integer using recursion?",
        "input": "",
        "response": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)",
        "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"
    },
    {
        "instruction": "Write a Python function to calculate the factorial of an input number using recursion.",
        "input": "6",
        "response": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 6\nresult = factorial(n)\nprint(result)\n# Output: 720",
        "output": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nn = 6\nresult = factorial(n)\nprint(result)\n# Output: 720"
    },
    {
        "instruction": "What's wrong with this Java code snippet and how can it be fixed?",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\")\n    }\n}",
        "response": "There is a missing semicolon at the end of the System.out.println statement. To fix the code, add a semicolon.\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}",
        "output": "There is a missing semicolon at the end of the System.out.println statement. To fix the code, add a semicolon.\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}"
    },
    {
        "instruction": "Create a C++ program to find the largest element of an integer array.",
        "input": "int arr[] = {5, 9, 11, 15, 6, 2, 10};",
        "response": "#include <iostream>\n#include <limits.h>\n\nusing namespace std;\n\nint main() {\n    int arr[] = {5, 9, 11, 15, 6, 2, 10};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    int max_element = INT_MIN;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > max_element) {\n            max_element = arr[i];\n        }\n    }\n\n    cout << \"Largest element in the array: \" << max_element << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <limits.h>\n\nusing namespace std;\n\nint main() {\n    int arr[] = {5, 9, 11, 15, 6, 2, 10};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    int max_element = INT_MIN;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > max_element) {\n            max_element = arr[i];\n        }\n    }\n\n    cout << \"Largest element in the array: \" << max_element << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Translate this JavaScript code for checking even numbers into equivalent Python code.",
        "input": "function isEven(num) {\n    return num % 2 === 0;\n}\n\nconsole.log(isEven(10));",
        "response": "def is_even(num):\n    return num % 2 == 0\n\nprint(is_even(10))\n# Output: True",
        "output": "def is_even(num):\n    return num % 2 == 0\n\nprint(is_even(10))\n# Output: True"
    },
    {
        "instruction": "Write a Java function that takes a string and returns the number of vowels in it.",
        "input": "",
        "response": "public int countVowels(String input) {\n    int vowelCount = 0;\n    String vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.contains(String.valueOf(input.charAt(i)))) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}",
        "output": "public int countVowels(String input) {\n    int vowelCount = 0;\n    String vowels = \"AEIOUaeiou\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.contains(String.valueOf(input.charAt(i)))) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}"
    },
    {
        "instruction": "Create a Python function that generates a Fibonacci sequence of given length n.",
        "input": "",
        "response": "def generate_fibonacci(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence[:n]",
        "output": "def generate_fibonacci(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence[:n]"
    },
    {
        "instruction": "Fix the following C# code that fails to run due to a syntax error and provide a description of the error:",
        "input": "class Program\n{\n    static void Main(string[] args)\n    {\n        consle.WriteLine(\"Hello World!\");\n    }\n}",
        "response": "There is a typo in the `Console.WriteLine` method call. It is written as 'consle' instead of 'Console'. Here's the corrected code:\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello World!\");\n    }\n}",
        "output": "There is a typo in the `Console.WriteLine` method call. It is written as 'consle' instead of 'Console'. Here's the corrected code:\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello World!\");\n    }\n}"
    },
    {
        "instruction": "How would you convert the following JavaScript code to TypeScript with proper types?",
        "input": "function sum(a, b) {\n    return a + b;\n}\nsum(3, 4);",
        "response": "function sum(a: number, b: number): number {\n    return a + b;\n}\nsum(3, 4);",
        "output": "function sum(a: number, b: number): number {\n    return a + b;\n}\nsum(3, 4);"
    },
    {
        "instruction": "Write a Python function that finds the longest word in a sentence.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "def find_longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = 'The quick brown fox jumps over the lazy dog.'\nlongest_word = find_longest_word(sentence)\nprint(longest_word)",
        "output": "def find_longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = 'The quick brown fox jumps over the lazy dog.'\nlongest_word = find_longest_word(sentence)\nprint(longest_word)"
    },
    {
        "instruction": "Implement a Java method that calculates the average of an integer array.",
        "input": "[5, 10, 15]",
        "response": "public class Main {\n    public static double average(int[] arr) {\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        return (double) sum / arr.length;\n    }\n    public static void main(String[] args) {\n        int[] numbers = {5, 10, 15};\n        double avg = average(numbers);\n        System.out.println(avg);\n    }\n}",
        "output": "public class Main {\n    public static double average(int[] arr) {\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        return (double) sum / arr.length;\n    }\n    public static void main(String[] args) {\n        int[] numbers = {5, 10, 15};\n        double avg = average(numbers);\n        System.out.println(avg);\n    }\n}"
    },
    {
        "instruction": "Find the output of this C++ code: \n#include <iostream>\nint main() {\n  int x = 5;\n  int y = x++ + ++x;\n  std::cout << y;\n  return 0;\n}",
        "input": "",
        "response": "11",
        "output": "11"
    },
    {
        "instruction": "Translate the following Python code into JavaScript:\ndef square(n):\n    return n * n\n\nresult = square(4)\nprint(result)",
        "input": "",
        "response": "function square(n) {\n    return n * n;\n}\n\nlet result = square(4);\nconsole.log(result);",
        "output": "function square(n) {\n    return n * n;\n}\n\nlet result = square(4);\nconsole.log(result);"
    },
    {
        "instruction": "Write a function in Java that calculates the Fibonacci sequence recursively until a certain term and stores the terms in an ArrayList.",
        "input": "Implement the Fibonacci sequence using Java and recursion. Store the terms in an ArrayList until a certain term, defined by the user.",
        "response": "import java.util.ArrayList;\n\npublic class Fibonacci {\n\n    public static ArrayList<Integer> fibonacci(int n) {\n        ArrayList<Integer> fibs = new ArrayList<>()\n        return fibonacciRecursion(n, fibs);\n    }\n\n    private static ArrayList<Integer> fibonacciRecursion(int n, ArrayList<Integer> fibs) {\n        if (n == 0) {\n            return fibs;\n        } else {\n            int size = fibs.size();\n            int nextFib = (size <= 1) ? size : fibs.get(size - 1) + fibs.get(size - 2);\n            fibs.add(nextFib);\n            return fibonacciRecursion(n - 1, fibs);\n        }\n    }\n}",
        "output": "import java.util.ArrayList;\n\npublic class Fibonacci {\n\n    public static ArrayList<Integer> fibonacci(int n) {\n        ArrayList<Integer> fibs = new ArrayList<>()\n        return fibonacciRecursion(n, fibs);\n    }\n\n    private static ArrayList<Integer> fibonacciRecursion(int n, ArrayList<Integer> fibs) {\n        if (n == 0) {\n            return fibs;\n        } else {\n            int size = fibs.size();\n            int nextFib = (size <= 1) ? size : fibs.get(size - 1) + fibs.get(size - 2);\n            fibs.add(nextFib);\n            return fibonacciRecursion(n - 1, fibs);\n        }\n    }\n}"
    },
    {
        "instruction": "Translate this Python code snippet to an equivalent code snippet in JavaScript.",
        "input": "def add(first, second):\n    return first + second\n\nresult = add(3, 4)\nprint('The sum is:', result)",
        "response": "function add(first, second) {\n    return first + second;\n}\n\nconst result = add(3, 4);\nconsole.log('The sum is:', result);",
        "output": "function add(first, second) {\n    return first + second;\n}\n\nconst result = add(3, 4);\nconsole.log('The sum is:', result);"
    },
    {
        "instruction": "Identify and correct errors in the following C++ code snippet.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main()|\n    int value;\n    cin << value;\n    cout >> \"The value is:\" << value;\n\n    return 0;\n}",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int value;\n    cin >> value;\n    cout << \"The value is:\" << value;\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int value;\n    cin >> value;\n    cout << \"The value is:\" << value;\n\n    return 0;\n}"
    },
    {
        "instruction": "Provide shell script command lines for iterating over a list of numbers, then summing them, and printing the sum.",
        "input": "Using shell script, iterate over a list of numbers (1 2 3 4 5), sum them up, and print the total.",
        "response": "#!/bin/sh\n\nnumbers='1 2 3 4 5'\nsum=0\n\nfor num in $numbers; do\n    sum=$((sum + num))\ndone\n\necho \"The sum is: $sum\"",
        "output": "#!/bin/sh\n\nnumbers='1 2 3 4 5'\nsum=0\n\nfor num in $numbers; do\n    sum=$((sum + num))\ndone\n\necho \"The sum is: $sum\""
    },
    {
        "instruction": "Implement a function in C++ that takes a string as input and returns the word count.",
        "input": "Hello, how are you?",
        "response": "#include <iostream>\n#include <string>\n#include <sstream>\n\nint countWords(const std::string &input) {\n    std::istringstream ss(input);\n    std::string word;\n    int count = 0;\n\n    while (ss >> word) {\n        count++;\n    }\n\n    return count;\n}\n\nint main() {\n    std::string input = \"Hello, how are you?\";\n    std::cout << \"Word count: \" << countWords(input) << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <sstream>\n\nint countWords(const std::string &input) {\n    std::istringstream ss(input);\n    std::string word;\n    int count = 0;\n\n    while (ss >> word) {\n        count++;\n    }\n\n    return count;\n}\n\nint main() {\n    std::string input = \"Hello, how are you?\";\n    std::cout << \"Word count: \" << countWords(input) << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "What would be the output of this Python code?",
        "input": "def foo(x): return x * 2\n\ndef bar(x):\n    x = x * 3\n    return foo(x)\n\nprint(bar(2))",
        "response": "The output of the given Python code will be 12. The explanation is as follows:\n1. The function `bar` is called with the argument 2.\n2. Inside `bar`, `x` is assigned the value `2 * 3`, which is 6.\n3. The function `foo` is called with the argument 6.\n4. Inside `foo`, the value `6 * 2` is returned, which is 12.\n5. The final output is 12.",
        "output": "The output of the given Python code will be 12. The explanation is as follows:\n1. The function `bar` is called with the argument 2.\n2. Inside `bar`, `x` is assigned the value `2 * 3`, which is 6.\n3. The function `foo` is called with the argument 6.\n4. Inside `foo`, the value `6 * 2` is returned, which is 12.\n5. The final output is 12."
    },
    {
        "instruction": "Design a Java function that generates a string containing the first n Fibonacci numbers separated by commas.",
        "input": "5",
        "response": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FibonacciGenerator {\n\n    public static String generateFibonacci(int n) {\n        List<Integer> fibonacciSeries = new ArrayList<>();\n        int a = 0, b = 1;\n\n        for (int i = 0; i < n; i++) {\n            fibonacciSeries.add(a);\n            int next = a + b;\n            a = b;\n            b = next;\n        }\n\n        return String.join(\", \", fibonacciSeries.stream().map(Object::toString).toArray(String[]::new));\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(generateFibonacci(n));\n    }\n}",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FibonacciGenerator {\n\n    public static String generateFibonacci(int n) {\n        List<Integer> fibonacciSeries = new ArrayList<>();\n        int a = 0, b = 1;\n\n        for (int i = 0; i < n; i++) {\n            fibonacciSeries.add(a);\n            int next = a + b;\n            a = b;\n            b = next;\n        }\n\n        return String.join(\", \", fibonacciSeries.stream().map(Object::toString).toArray(String[]::new));\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(generateFibonacci(n));\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code to JavaScript:\n\n```\nprices = [20.2, 5.5, 1.99, 10.0, 23.9, 15.6]\nprices.sort(reverse=True)\nfor price in prices:\n    print(f'$ {price:.2f}')\n```",
        "input": "",
        "response": "const prices = [20.2, 5.5, 1.99, 10.0, 23.9, 15.6];\nprices.sort((a, b) => b - a);\n\nfor (const price of prices) {\n    console.log(`$ ${price.toFixed(2)}`);\n}",
        "output": "const prices = [20.2, 5.5, 1.99, 10.0, 23.9, 15.6];\nprices.sort((a, b) => b - a);\n\nfor (const price of prices) {\n    console.log(`$ ${price.toFixed(2)}`);\n}"
    },
    {
        "instruction": "Translate the following C++ code to Python.",
        "input": "#include <iostream>\n\nint main() {\n    int age = 25;\n    if (age > 18) {\n        std::cout << \"You are an adult.\";\n    } else {\n        std::cout << \"You are not an adult.\";\n    }\n    return 0;\n}",
        "response": "age = 25\nif age > 18:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are not an adult.\")",
        "output": "age = 25\nif age > 18:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are not an adult.\")"
    },
    {
        "instruction": "Create a JavaScript function that determines if a given string is a palindrome.",
        "input": "",
        "response": "function isPalindrome(str) {\n    const reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n}",
        "output": "function isPalindrome(str) {\n    const reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n}"
    },
    {
        "instruction": "Write Java code for a method named 'findBiggestNumber' that takes an array of integers as a parameter and returns the largest number in that array.",
        "input": "",
        "response": "public static int findBiggestNumber(int[] arr) {\n    int max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}",
        "output": "public static int findBiggestNumber(int[] arr) {\n    int max = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}"
    },
    {
        "instruction": "Debug and fix the following Shell script that is supposed to create a file called 'greetings.txt', write 'Hello' as its content, and display the content of the file.",
        "input": "touch greeting.txt/\necho 'Helo' > greeting.txt/\ncat greeting.txt/",
        "response": "touch greetings.txt\necho 'Hello' > greetings.txt\ncat greetings.txt",
        "output": "touch greetings.txt\necho 'Hello' > greetings.txt\ncat greetings.txt"
    },
    {
        "instruction": "Write a simple Java program that prints the first ten natural numbers, each on a new line.",
        "input": "",
        "response": "public class FirstTenNaturalNumbers {\n\n    public static void main(String[] args) {\n\n        for (int i = 1; i <= 10; i++) {\n            System.out.println(i);\n        }\n\n    }\n\n}",
        "output": "public class FirstTenNaturalNumbers {\n\n    public static void main(String[] args) {\n\n        for (int i = 1; i <= 10; i++) {\n            System.out.println(i);\n        }\n\n    }\n\n}"
    },
    {
        "instruction": "How can I calculate the sum of an array of numbers in JavaScript?",
        "input": "const numbers = [1, 2, 3, 4, 5];",
        "response": "const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\nconsole.log(sum); // Output: 15",
        "output": "const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\nconsole.log(sum); // Output: 15"
    },
    {
        "instruction": "Create a Python script that reads a CSV file and displays the sum of values in a specific column.",
        "input": "example.csv:\nName,Salary\nAlice,50000\nBob,60000\nEve,55000",
        "response": "import csv\n\nfilename = 'example.csv'\ncolumn_name = 'Salary'\n\ndef read_and_sum(filename, column_name):\n    total = 0\n    with open(filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total += float(row[column_name])\n    return total\n\nsum_of_salaries = read_and_sum(filename, column_name)\nprint(sum_of_salaries)  # Output: 165000",
        "output": "import csv\n\nfilename = 'example.csv'\ncolumn_name = 'Salary'\n\ndef read_and_sum(filename, column_name):\n    total = 0\n    with open(filename, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total += float(row[column_name])\n    return total\n\nsum_of_salaries = read_and_sum(filename, column_name)\nprint(sum_of_salaries)  # Output: 165000"
    },
    {
        "instruction": "Implement a C++ function that finds the smallest element in a given vector.",
        "input": "std::vector<int> v = {3, 2, 10, -5, 7};",
        "response": "#include <algorithm>\n\nint find_smallest(const std::vector<int>& v) {\n    return *std::min_element(v.begin(), v.end());\n}\n\n// Usage:\n// int smallest = find_smallest(v);",
        "output": "#include <algorithm>\n\nint find_smallest(const std::vector<int>& v) {\n    return *std::min_element(v.begin(), v.end());\n}\n\n// Usage:\n// int smallest = find_smallest(v);"
    },
    {
        "instruction": "Convert the given Python code snippet into JavaScript code, which returns the sum of all odd numbers in a given range of integers.",
        "input": "def sum_odds_in_range(start, end):\n    odd_sum = 0\n    for i in range(start, end + 1):\n        if i % 2 != 0:\n            odd_sum += i\n    return odd_sum",
        "response": "function sumOddsInRange(start, end) {\n    let oddSum = 0;\n    for (let i = start; i <= end; i++) {\n        if (i % 2 !== 0) {\n            oddSum += i;\n        }\n    }\n    return oddSum;\n}",
        "output": "function sumOddsInRange(start, end) {\n    let oddSum = 0;\n    for (let i = start; i <= end; i++) {\n        if (i % 2 !== 0) {\n            oddSum += i;\n        }\n    }\n    return oddSum;\n}"
    },
    {
        "instruction": "Write a C++ function that takes a string as input and returns the string without any whitespace characters.",
        "input": "",
        "response": "#include <algorithm>\n#include <string>\n\nstd::string removeWhitespace(std::string input) {\n    input.erase(std::remove(input.begin(), input.end(), ' '), input.end());\n    return input;\n}",
        "output": "#include <algorithm>\n#include <string>\n\nstd::string removeWhitespace(std::string input) {\n    input.erase(std::remove(input.begin(), input.end(), ' '), input.end());\n    return input;\n}"
    },
    {
        "instruction": "Can you create a Java function that calculates and returns the number of occurrences of a character within a given string?",
        "input": "",
        "response": "public int countOccurrences(String str, char ch) {\n    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) == ch) {\n            count++;\n        }\n    }\n    return count;\n}",
        "output": "public int countOccurrences(String str, char ch) {\n    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) == ch) {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "In JavaScript, implement a function that takes an array of numbers and returns the array sorted in ascending order using the bubble sort algorithm.",
        "input": "",
        "response": "function bubbleSort(arr) {\n    let len = arr.length;\n    let swapped;\n    do {\n        swapped = false;\n        for (let i = 1; i < len; i++) {\n            if (arr[i - 1] > arr[i]) {\n                [arr[i - 1], arr[i]] = [arr[i], arr[i - 1]];\n                swapped = true;\n            }\n        }\n        len--;\n    } while (swapped);\n    return arr;\n}",
        "output": "function bubbleSort(arr) {\n    let len = arr.length;\n    let swapped;\n    do {\n        swapped = false;\n        for (let i = 1; i < len; i++) {\n            if (arr[i - 1] > arr[i]) {\n                [arr[i - 1], arr[i]] = [arr[i], arr[i - 1]];\n                swapped = true;\n            }\n        }\n        len--;\n    } while (swapped);\n    return arr;\n}"
    },
    {
        "instruction": "Create a Java function that takes an array of integers as input and returns the sum of the even numbers in the array.",
        "input": "",
        "response": "public int sumEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "How would you write a Python function that accepts a string and returns a dictionary with the count of each character in the given string?",
        "input": "",
        "response": "def char_count(string):\n    result = {}\n    for char in string:\n        result[char] = result.get(char, 0) + 1\n    return result",
        "output": "def char_count(string):\n    result = {}\n    for char in string:\n        result[char] = result.get(char, 0) + 1\n    return result"
    },
    {
        "instruction": "Write a shell script to find and print the largest file in a given directory.",
        "input": "",
        "response": "#!/bin/bash\n\ndir=\"${1}\"\n\nif [ -d \"${dir}\" ]; then\n    find \"${dir}\" -type f -exec ls -l {} \\; | sort -n -r -k5 | head -n1\nelse\n    echo \"Invalid directory path\"\n    exit 1\nfi",
        "output": "#!/bin/bash\n\ndir=\"${1}\"\n\nif [ -d \"${dir}\" ]; then\n    find \"${dir}\" -type f -exec ls -l {} \\; | sort -n -r -k5 | head -n1\nelse\n    echo \"Invalid directory path\"\n    exit 1\nfi"
    },
    {
        "instruction": "Explain the usage of the map method in JavaScript and provide an example that converts an array of temperatures in Celsius to Fahrenheit.",
        "input": "",
        "response": "In JavaScript, the map method is a built-in method on arrays. It creates a new array by applying a given function to each element of the original array. Here is an example that converts an array of temperatures in Celsius to Fahrenheit:\n\n```javascript\nfunction celsiusToFahrenheit(celsius) {\n  return (celsius * 9/5) + 32;\n}\n\nconst temperaturesCelsius = [0, 20, 25, 30];\nconst temperaturesFahrenheit = temperaturesCelsius.map(celsiusToFahrenheit);\nconsole.log(temperaturesFahrenheit); // Output: [32, 68, 77, 86]\n```",
        "output": "In JavaScript, the map method is a built-in method on arrays. It creates a new array by applying a given function to each element of the original array. Here is an example that converts an array of temperatures in Celsius to Fahrenheit:\n\n```javascript\nfunction celsiusToFahrenheit(celsius) {\n  return (celsius * 9/5) + 32;\n}\n\nconst temperaturesCelsius = [0, 20, 25, 30];\nconst temperaturesFahrenheit = temperaturesCelsius.map(celsiusToFahrenheit);\nconsole.log(temperaturesFahrenheit); // Output: [32, 68, 77, 86]\n```"
    },
    {
        "instruction": "Write a Python function which accepts a list of integers and returns the sum of even numbers in the list.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_even_numbers(input_list)\nprint(result)",
        "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_even_numbers(input_list)\nprint(result)"
    },
    {
        "instruction": "How to get the average of a list of numbers in JavaScript?",
        "input": "[4, 5, 6, 7, 8]",
        "response": "function getAverage(arr) {\n    const sum = arr.reduce((accumulator, currentValue) => accumulator + currentValue);\n    const average = sum / arr.length;\n    return average;\n}\n\nconst inputArray = [4, 5, 6, 7, 8];\nconst result = getAverage(inputArray);\nconsole.log(result);",
        "output": "function getAverage(arr) {\n    const sum = arr.reduce((accumulator, currentValue) => accumulator + currentValue);\n    const average = sum / arr.length;\n    return average;\n}\n\nconst inputArray = [4, 5, 6, 7, 8];\nconst result = getAverage(inputArray);\nconsole.log(result);"
    },
    {
        "instruction": "Develop a Java method that accepts a string input and reverses it without using any in-built reverse function.",
        "input": "Hello, World!",
        "response": "public class Main {\n    public static String reverseString(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"Hello, World!\";\n        String result = reverseString(input);\n        System.out.println(result);\n    }\n}",
        "output": "public class Main {\n    public static String reverseString(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"Hello, World!\";\n        String result = reverseString(input);\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "Create a recursive function in C++ that calculates the nth Fibonacci number.",
        "input": "6",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 6;\n    int result = fibonacci(n);\n    std::cout << \"The \" << n << \"th Fibonacci number is: \" << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 6;\n    int result = fibonacci(n);\n    std::cout << \"The \" << n << \"th Fibonacci number is: \" << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a function in JavaScript to convert a list of names into a dictionary where the key is the length of the name and the value is a list of names with that length.",
        "input": "['Alice', 'Bob', 'Charlie', 'David']",
        "response": "function namesToDict(names) {\n    let dict = {};\n    for (let name of names) {\n        let len = name.length;\n        if (!dict[len]) {\n            dict[len] = [];\n        }\n        dict[len].push(name);\n    }\n    return dict;\n}",
        "output": "function namesToDict(names) {\n    let dict = {};\n    for (let name of names) {\n        let len = name.length;\n        if (!dict[len]) {\n            dict[len] = [];\n        }\n        dict[len].push(name);\n    }\n    return dict;\n}"
    },
    {
        "instruction": "Write a function in Python that takes a string as input and removes all numbers from it. Return the resulting string without numbers.",
        "input": "s0m3th1ng_w3ird_42",
        "response": "def remove_numbers(s):\n    result = ''.join([c for c in s if not c.isdigit()])\n    return result",
        "output": "def remove_numbers(s):\n    result = ''.join([c for c in s if not c.isdigit()])\n    return result"
    },
    {
        "instruction": "What would the C# code look like for a utility method that takes a list of integers and returns their arithmetic mean?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "using System.Collections.Generic;\n\ndouble CalculateMean(List<int> numbers)\n{\n    int sum = 0;\n    foreach (int n in numbers)\n    {\n        sum += n;\n    }\n    double mean = sum / (double)numbers.Count;\n    return mean;\n}",
        "output": "using System.Collections.Generic;\n\ndouble CalculateMean(List<int> numbers)\n{\n    int sum = 0;\n    foreach (int n in numbers)\n    {\n        sum += n;\n    }\n    double mean = sum / (double)numbers.Count;\n    return mean;\n}"
    },
    {
        "instruction": "Translate the provided Python code into equivalent Java code.",
        "input": "def greet(name):\n    return 'Hello, ' + name + '!'",
        "response": "public String greet(String name) {\n    return 'Hello, ' + name + '!';\n}",
        "output": "public String greet(String name) {\n    return 'Hello, ' + name + '!';\n}"
    },
    {
        "instruction": "Implement a Java function that returns a boolean indicating whether a given string is a palindrome or not.",
        "input": "",
        "response": "public boolean isPalindrome(String s) {\n    int left = 0;\n    int right = s.length() - 1;\n\n    while (left < right) {\n        if (s.charAt(left) != s.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}",
        "output": "public boolean isPalindrome(String s) {\n    int left = 0;\n    int right = s.length() - 1;\n\n    while (left < right) {\n        if (s.charAt(left) != s.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}"
    },
    {
        "instruction": "What would be the correct implementation of a Python function that takes a list of numbers and returns the product of all elements?",
        "input": "",
        "response": "def product(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result",
        "output": "def product(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result"
    },
    {
        "instruction": "In JavaScript, write a function using async/await that fetches data from an API endpoint, assuming that 'fetch()' is already available for use.",
        "input": "",
        "response": "async function fetchData(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}",
        "output": "async function fetchData(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}"
    },
    {
        "instruction": "Create a shell script that finds all files in the current directory with file size greater than 1 MB and outputs their paths to a file called 'large_files.txt'.",
        "input": "",
        "response": "#!/bin/sh\n\nfind . -type f -size +1M > large_files.txt",
        "output": "#!/bin/sh\n\nfind . -type f -size +1M > large_files.txt"
    },
    {
        "instruction": "Create a Java function that reverses a given string.",
        "input": "reverse(\"Hello, world!\")",
        "response": "public String reverse(String input) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}",
        "output": "public String reverse(String input) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}"
    },
    {
        "instruction": "What would be an efficient Python implementation to compute the multiplication of two matrices A and B?",
        "input": "Matrix A = [[1, 2], [3, 4]], Matrix B = [[5, 6], [7, 8]]",
        "response": "import numpy as np\n\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\n\nproduct = np.dot(A, B)",
        "output": "import numpy as np\n\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\n\nproduct = np.dot(A, B)"
    },
    {
        "instruction": "Fix the syntax error in the given JavaScript code.",
        "input": "function calculateBMI(height, weight) {\n    var bmi = weight / (height * height);\n    returb bmi;\n}",
        "response": "function calculateBMI(height, weight) {\n    var bmi = weight / (height * height);\n    return bmi;\n}",
        "output": "function calculateBMI(height, weight) {\n    var bmi = weight / (height * height);\n    return bmi;\n}"
    },
    {
        "instruction": "Translate the following Python code snippet to C++:",
        "input": "def sum_of_squares(x, y):\n    return x**2 + y**2",
        "response": "#include <cmath>\n\nint sum_of_squares(int x, int y) {\n    return std::pow(x, 2) + std::pow(y, 2);\n}",
        "output": "#include <cmath>\n\nint sum_of_squares(int x, int y) {\n    return std::pow(x, 2) + std::pow(y, 2);\n}"
    },
    {
        "instruction": "Translate the given Python code for calculating the sum of the first n natural numbers into an equivalent Java code.",
        "input": "def sum_of_natural_numbers(n):\n    return n * (n + 1) // 2",
        "response": "public int sumOfNaturalNumbers(int n) {\n    return n * (n + 1) / 2;\n}",
        "output": "public int sumOfNaturalNumbers(int n) {\n    return n * (n + 1) / 2;\n}"
    },
    {
        "instruction": "Design a Python function that takes a file path as argument and retrieves the number of lines containing the word 'Python'.",
        "input": "/path/to/file.txt",
        "response": "def count_lines_containing_python(filepath):\n    with open(filepath, 'r') as file:\n        lines = file.readlines()\n\n    count = 0\n    for line in lines:\n        if 'Python' in line:\n            count += 1\n\n    return count\n\nresult = count_lines_containing_python('/path/to/file.txt')\nprint(result)",
        "output": "def count_lines_containing_python(filepath):\n    with open(filepath, 'r') as file:\n        lines = file.readlines()\n\n    count = 0\n    for line in lines:\n        if 'Python' in line:\n            count += 1\n\n    return count\n\nresult = count_lines_containing_python('/path/to/file.txt')\nprint(result)"
    },
    {
        "instruction": "Create a JavaScript function that receives a string and counts the number of vowels present in it.",
        "input": "\"JavaScript\"",
        "response": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (const letter of str.toLowerCase()) {\n        if (vowels.includes(letter)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst input = 'JavaScript';\nconst result = countVowels(input);\nconsole.log(\"Vowel count in '\" + input + \"':\", result);",
        "output": "function countVowels(str) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (const letter of str.toLowerCase()) {\n        if (vowels.includes(letter)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst input = 'JavaScript';\nconst result = countVowels(input);\nconsole.log(\"Vowel count in '\" + input + \"':\", result);"
    },
    {
        "instruction": "Create a Python function to encrypt a string using a simple Caesar cipher, given a string and a key.",
        "input": "\"Hello, World!\", 3",
        "response": "def caesar_cipher_encrypt(text, key):\n    encrypted = ''\n\n    for char in text:\n        if char.isalpha():\n            shift = key % 26\n            if char.islower():\n                encrypted += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            encrypted += char\n\n    return encrypted\n\ninput_text = \"Hello, World!\"\nkey = 3\nencrypted_text = caesar_cipher_encrypt(input_text, key)\nprint(encrypted_text)",
        "output": "def caesar_cipher_encrypt(text, key):\n    encrypted = ''\n\n    for char in text:\n        if char.isalpha():\n            shift = key % 26\n            if char.islower():\n                encrypted += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            encrypted += char\n\n    return encrypted\n\ninput_text = \"Hello, World!\"\nkey = 3\nencrypted_text = caesar_cipher_encrypt(input_text, key)\nprint(encrypted_text)"
    },
    {
        "instruction": "Write a Java program that prints the result of the Fibonacci series, up to the given input number.",
        "input": "10",
        "response": "public class FibonacciSeries {\n\n    public static void printFibonacci(int n) {\n        int a = 0, b = 1, c;\n        for (int i = 1; i <= n; i++) {\n            System.out.print(a + \" \");\n            c = a + b;\n            a = b;\n            b = c;\n        }\n    }\n\n    public static void main(String[] args) {\n        int input = 10;\n        printFibonacci(input);\n    }\n}",
        "output": "public class FibonacciSeries {\n\n    public static void printFibonacci(int n) {\n        int a = 0, b = 1, c;\n        for (int i = 1; i <= n; i++) {\n            System.out.print(a + \" \");\n            c = a + b;\n            a = b;\n            b = c;\n        }\n    }\n\n    public static void main(String[] args) {\n        int input = 10;\n        printFibonacci(input);\n    }\n}"
    },
    {
        "instruction": "How can I refactor this JavaScript code to dynamically update the price based on the quantity?",
        "input": "var price = 100;\nvar quantity = 5;\nvar total;\ntotal = price * quantity;\nconsole.log('The total cost is', total, 'dollars.');",
        "response": "function calculateTotal(price, quantity) {\n    return price * quantity;\n}\n\nvar price = 100;\nvar quantity = 5;\nvar total = calculateTotal(price, quantity);\nconsole.log('The total cost is', total, 'dollars.');",
        "output": "function calculateTotal(price, quantity) {\n    return price * quantity;\n}\n\nvar price = 100;\nvar quantity = 5;\nvar total = calculateTotal(price, quantity);\nconsole.log('The total cost is', total, 'dollars.');"
    },
    {
        "instruction": "Find the syntax error in the following C++ code snippet and provide the corrected version.",
        "input": "#include <iostream>\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    if (x < y)\n        std::cout << \"x is less than y\";\n    else\n        std::cout << \"x is greater than or equal to y\";\n    }\n\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    if (x < y) {\n        std::cout << \"x is less than y\";\n    } else {\n        std::cout << \"x is greater than or equal to y\";\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    if (x < y) {\n        std::cout << \"x is less than y\";\n    } else {\n        std::cout << \"x is greater than or equal to y\";\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Translate the following Python code into JavaScript.",
        "input": "def add_two_numbers(a, b):\n    return a + b",
        "response": "function addTwoNumbers(a, b) {\n    return a + b;\n}",
        "output": "function addTwoNumbers(a, b) {\n    return a + b;\n}"
    },
    {
        "instruction": "In C++, implement a function that calculates the nth Fibonacci number using recursion.",
        "input": "",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}"
    },
    {
        "instruction": "How would you write a bash script that lists all files in a directory, sorts the list by file size, and outputs the result?",
        "input": "",
        "response": "#!/bin/bash\n\nls -lS",
        "output": "#!/bin/bash\n\nls -lS"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns the average of the numbers.",
        "input": "",
        "response": "function average(numbers) {\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0);\n  return sum / numbers.length;\n}",
        "output": "function average(numbers) {\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0);\n  return sum / numbers.length;\n}"
    },
    {
        "instruction": "In Python, create a dictionary with keys as letters from the given string and values as the frequency of each letter.",
        "input": "test_string = 'hello world'",
        "response": "def count_letters(string):\n  letter_freq = {}\n  for letter in string:\n    if letter not in letter_freq:\n      letter_freq[letter] = 1\n    else:\n      letter_freq[letter] += 1\n  return letter_freq\n\ntest_string = 'hello world'\nresult = count_letters(test_string)\nprint(result)",
        "output": "def count_letters(string):\n  letter_freq = {}\n  for letter in string:\n    if letter not in letter_freq:\n      letter_freq[letter] = 1\n    else:\n      letter_freq[letter] += 1\n  return letter_freq\n\ntest_string = 'hello world'\nresult = count_letters(test_string)\nprint(result)"
    },
    {
        "instruction": "What would a C++ program look like that receives two integers as input and computes their greatest common divisor (GCD)?",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n  while (b != 0) {\n    int remainder = a % b;\n    a = b;\n    b = remainder;\n  }\n  return a;\n}\n\nint main() {\n  int num1, num2;\n  cout << \"Enter two integers:\";\n  cin >> num1 >> num2;\n  cout << \"GCD: \" << gcd(num1, num2) << endl;\n  return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n  while (b != 0) {\n    int remainder = a % b;\n    a = b;\n    b = remainder;\n  }\n  return a;\n}\n\nint main() {\n  int num1, num2;\n  cout << \"Enter two integers:\";\n  cin >> num1 >> num2;\n  cout << \"GCD: \" << gcd(num1, num2) << endl;\n  return 0;\n}"
    },
    {
        "instruction": "Write a Shell script to find the number of files in a directory and print the result.",
        "input": "",
        "response": "#!/bin/bash\n\ndir=\"$1\"\n\nif [ -d \"$dir\" ]; then\n  file_count=$(find \"$dir\" -type f | wc -l)\n  echo \"Number of files in $dir: $file_count\"\nelse\n  echo \"Invalid directory.\"\nfi",
        "output": "#!/bin/bash\n\ndir=\"$1\"\n\nif [ -d \"$dir\" ]; then\n  file_count=$(find \"$dir\" -type f | wc -l)\n  echo \"Number of files in $dir: $file_count\"\nelse\n  echo \"Invalid directory.\"\nfi"
    },
    {
        "instruction": "Design a Java function that converts a given string to Title Case, which means that the first letter of each word should be capitalized, and remaining letters should be in lower case.",
        "input": "",
        "response": "public String toTitleCase(String input) {\n    String[] words = input.split(\" \");\n    StringBuilder titleCase = new StringBuilder();\n\n    for (String word : words) {\n        if (word.length() > 0) {\n            titleCase.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1).toLowerCase()).append(\" \");\n        }\n    }\n\n    return titleCase.toString().trim();\n}",
        "output": "public String toTitleCase(String input) {\n    String[] words = input.split(\" \");\n    StringBuilder titleCase = new StringBuilder();\n\n    for (String word : words) {\n        if (word.length() > 0) {\n            titleCase.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1).toLowerCase()).append(\" \");\n        }\n    }\n\n    return titleCase.toString().trim();\n}"
    },
    {
        "instruction": "Create a C++ code snippet that reads integers from a file named 'numbers.txt' and calculates the sum of all the integers.",
        "input": "",
        "response": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream inputFile(\"numbers.txt\");\n    int sum = 0;\n    int number;\n\n    while (inputFile >> number) {\n        sum += number;\n    }\n\n    inputFile.close();\n    std::cout << \"Sum of integers: \" << sum << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream inputFile(\"numbers.txt\");\n    int sum = 0;\n    int number;\n\n    while (inputFile >> number) {\n        sum += number;\n    }\n\n    inputFile.close();\n    std::cout << \"Sum of integers: \" << sum << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Using JavaScript, show how to make a GET request to the following API endpoint: 'https://api.example.com/data' and log the response to the console.",
        "input": "",
        "response": "fetch('https://api.example.com/data')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error fetching data:', error));",
        "output": "fetch('https://api.example.com/data')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error fetching data:', error));"
    },
    {
        "instruction": "In Python, provide a function that takes a list of strings as an input and returns a list containing the length of each string.",
        "input": "",
        "response": "def string_lengths(strings):\n    return [len(s) for s in strings]",
        "output": "def string_lengths(strings):\n    return [len(s) for s in strings]"
    },
    {
        "instruction": "Create a C function that accepts an integer array and its length as input parameters, and returns the sum of all the elements in the array.",
        "input": "int arr[] = {1, 2, 3, 4, 5};\nint length = sizeof(arr) / sizeof(arr[0]);",
        "response": "#include <stdio.h>\n\nint array_sum(int arr[], int length) {\n    int sum = 0;\n    for (int i = 0; i < length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int length = sizeof(arr) / sizeof(arr[0]);\n    int sum = array_sum(arr, length);\n    printf(\"Sum of array elements: %d\\n\", sum);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint array_sum(int arr[], int length) {\n    int sum = 0;\n    for (int i = 0; i < length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int length = sizeof(arr) / sizeof(arr[0]);\n    int sum = array_sum(arr, length);\n    printf(\"Sum of array elements: %d\\n\", sum);\n    return 0;\n}"
    },
    {
        "instruction": "What would be the equivalent code for the given Java code snippet in Python?",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "response": "print(\"Hello, World!\")",
        "output": "print(\"Hello, World!\")"
    },
    {
        "instruction": "Write a shell script that takes a filename as an argument and counts the number of lines in that file.",
        "input": "example.txt",
        "response": "#!/bin/bash\n\nfilename=\"$1\"\nif [ -f \"$filename\" ]; then\n    line_count=$(wc -l < \"$filename\")\n    echo \"Number of lines in $filename: $line_count\"\nelse\n    echo \"File does not exist: $filename\"\nfi",
        "output": "#!/bin/bash\n\nfilename=\"$1\"\nif [ -f \"$filename\" ]; then\n    line_count=$(wc -l < \"$filename\")\n    echo \"Number of lines in $filename: $line_count\"\nelse\n    echo \"File does not exist: $filename\"\nfi"
    },
    {
        "instruction": "Fix the syntax error in the given JavaScript code and make it correct.",
        "input": "const isPositive = num => \n{\n    if (num > 0) {\n        return true;\n    } else {\n        return false;\n    }\n};\nconsole.log(isPositive(5);",
        "response": "const isPositive = num => {\n    if (num > 0) {\n        return true;\n    } else {\n        return false;\n    }\n};\nconsole.log(isPositive(5));",
        "output": "const isPositive = num => {\n    if (num > 0) {\n        return true;\n    } else {\n        return false;\n    }\n};\nconsole.log(isPositive(5));"
    },
    {
        "instruction": "Create a Java function that takes an array of integers, sorts it in ascending order, and returns the sorted array.",
        "input": "int[] array = {4, 1, 7, 3, 9, 1};",
        "response": "import java.util.Arrays;\n\npublic static int[] sortArray(int[] array) {\n    Arrays.sort(array);\n    return array;\n}\n\nint[] array = {4, 1, 7, 3, 9, 1};\nint[] sortedArray = sortArray(array);\nSystem.out.println(Arrays.toString(sortedArray));",
        "output": "import java.util.Arrays;\n\npublic static int[] sortArray(int[] array) {\n    Arrays.sort(array);\n    return array;\n}\n\nint[] array = {4, 1, 7, 3, 9, 1};\nint[] sortedArray = sortArray(array);\nSystem.out.println(Arrays.toString(sortedArray));"
    },
    {
        "instruction": "How would you implement a Python script that reads data from a CSV file and prints each row?",
        "input": "example.csv:\nName,Age,Job\nAlice,30,Developer\nBob,22,Designer\n",
        "response": "import csv\n\nwith open('example.csv', mode='r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n    for row in csv_reader:\n        print(', '.join(row))",
        "output": "import csv\n\nwith open('example.csv', mode='r') as csvfile:\n    csv_reader = csv.reader(csvfile)\n    for row in csv_reader:\n        print(', '.join(row))"
    },
    {
        "instruction": "Can you provide a C# code snippet that converts a given string to title case (capitalize the first letter of each word)?",
        "input": "the quick brown fox jumps over the lazy dog",
        "response": "using System;\nusing System.Globalization;\n\nstring input = \"the quick brown fox jumps over the lazy dog\";\nTextInfo textInfo = new CultureInfo(\"en-US\", false).TextInfo;\nstring titleCase = textInfo.ToTitleCase(input);\nConsole.WriteLine(titleCase);",
        "output": "using System;\nusing System.Globalization;\n\nstring input = \"the quick brown fox jumps over the lazy dog\";\nTextInfo textInfo = new CultureInfo(\"en-US\", false).TextInfo;\nstring titleCase = textInfo.ToTitleCase(input);\nConsole.WriteLine(titleCase);"
    },
    {
        "instruction": "Translate the following C++ code that reads a file line by line into Python.",
        "input": "#include <iostream>\n#include <fstream>\n#include <string>\n\nint main () {\n  std::string line;\n  std::ifstream myfile (\"example.txt\");\n  if (myfile.is_open()) {\n    while ( getline (myfile,line) ) {\n      std::cout << line << '\\n';\n    }\n    myfile.close();\n  }\n\n  else std::cout << \"Unable to open file\";\n\n  return 0;\n}",
        "response": "with open('example.txt', mode='r') as file:\n    for line in file:\n        print(line.strip())",
        "output": "with open('example.txt', mode='r') as file:\n    for line in file:\n        print(line.strip())"
    },
    {
        "instruction": "Create a Python function to calculate the fibonacci sequence up to a given limit.",
        "input": "Limit: 10",
        "response": "def fibonacci(limit):\n    sequence = [0, 1]\n    while sequence[-1] + sequence[-2] < limit:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nresult = fibonacci(10)\nprint(result)",
        "output": "def fibonacci(limit):\n    sequence = [0, 1]\n    while sequence[-1] + sequence[-2] < limit:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\nresult = fibonacci(10)\nprint(result)"
    },
    {
        "instruction": "In JavaScript, given an array of numbers, write a function to calculate the average and format the result to 2 decimal places.",
        "input": "Numbers: [4, 6, 2, 9, 11]",
        "response": "function calculateAverage(numbers) {\n  const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n  const average = sum / numbers.length;\n  return average.toFixed(2);\n}\n\nconst result = calculateAverage([4, 6, 2, 9, 11]);\nconsole.log(result);",
        "output": "function calculateAverage(numbers) {\n  const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n  const average = sum / numbers.length;\n  return average.toFixed(2);\n}\n\nconst result = calculateAverage([4, 6, 2, 9, 11]);\nconsole.log(result);"
    },
    {
        "instruction": "Debug the following Java code snippet and provide the fixed version.",
        "input": "public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println('Hello World!');\n  }\n}",
        "response": "public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); // Changed single quotes to double quotes for proper string syntax.\n  }\n}",
        "output": "public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\"); // Changed single quotes to double quotes for proper string syntax.\n  }\n}"
    },
    {
        "instruction": "Translate the following C++ code to C#, which outputs the first n even numbers.",
        "input": "#include<iostream>\nusing namespace std;\n\nint main() {\n  int n;\n  cout << \"Enter n: \";\n  cin >> n;\n  for(int i = 1; i <= n; i++) {\n    cout << 2 * i << ' ';\n  }\n  return 0;\n}",
        "response": "using System;\n\nnamespace EvenNumbers\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int n;\n            Console.Write(\"Enter n: \");\n            n = int.Parse(Console.ReadLine());\n            for (int i = 1; i <= n; i++)\n            {\n                Console.Write(2 * i + \" \"); // Replaced single quotes with double quotes for proper string concatenation.\n            }\n        }\n    }\n}",
        "output": "using System;\n\nnamespace EvenNumbers\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int n;\n            Console.Write(\"Enter n: \");\n            n = int.Parse(Console.ReadLine());\n            for (int i = 1; i <= n; i++)\n            {\n                Console.Write(2 * i + \" \"); // Replaced single quotes with double quotes for proper string concatenation.\n            }\n        }\n    }\n}"
    },
    {
        "instruction": "Implement a function that takes a list of words and outputs the words sorted in alphabetical order, in Python.",
        "input": "['apple', 'orange', 'banana', 'grape']",
        "response": "def sort_words(words):\n    sorted_words = sorted(words)\n    return sorted_words\n\nwords_list = ['apple', 'orange', 'banana', 'grape']\nsorted_list = sort_words(words_list)\nprint(sorted_list)",
        "output": "def sort_words(words):\n    sorted_words = sorted(words)\n    return sorted_words\n\nwords_list = ['apple', 'orange', 'banana', 'grape']\nsorted_list = sort_words(words_list)\nprint(sorted_list)"
    },
    {
        "instruction": "In Java, write a program that determines if a given number is a palindrome.",
        "input": "121",
        "response": "public class Palindrome {\n\n    public static boolean isPalindrome(int num) {\n        int original = num;\n        int reversed = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        int num = 121;\n        boolean isPalindrome = isPalindrome(num);\n        System.out.println(isPalindrome);\n    }\n}",
        "output": "public class Palindrome {\n\n    public static boolean isPalindrome(int num) {\n        int original = num;\n        int reversed = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n        return original == reversed;\n    }\n\n    public static void main(String[] args) {\n        int num = 121;\n        boolean isPalindrome = isPalindrome(num);\n        System.out.println(isPalindrome);\n    }\n}"
    },
    {
        "instruction": "Using JavaScript, write a function that takes a string and reverses its vowels.",
        "input": "alphabet",
        "response": "function reverseVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let vowelsArray = [];\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            vowelsArray.push(char);\n        }\n    }\n    let result = '';\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            result += vowelsArray.pop();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconst inputStr = 'alphabet';\nconst reversedVowelsStr = reverseVowels(inputStr);\nconsole.log(reversedVowelsStr);",
        "output": "function reverseVowels(str) {\n    const vowels = 'aeiouAEIOU';\n    let vowelsArray = [];\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            vowelsArray.push(char);\n        }\n    }\n    let result = '';\n    for (const char of str) {\n        if (vowels.includes(char)) {\n            result += vowelsArray.pop();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconst inputStr = 'alphabet';\nconst reversedVowelsStr = reverseVowels(inputStr);\nconsole.log(reversedVowelsStr);"
    },
    {
        "instruction": "Translate the following C++ code to its equivalent in C#: int a = 3; int b = 4; int c = a * b; std::cout << c << std::endl;",
        "input": "int a = 3; int b = 4; int c = a * b; std::cout << c << std::endl;",
        "response": "using System;\n\nnamespace CSharpTranslation {\n    class Program {\n        static void Main(string[] args) {\n            int a = 3;\n            int b = 4;\n            int c = a * b;\n            Console.WriteLine(c);\n        }\n    }\n}",
        "output": "using System;\n\nnamespace CSharpTranslation {\n    class Program {\n        static void Main(string[] args) {\n            int a = 3;\n            int b = 4;\n            int c = a * b;\n            Console.WriteLine(c);\n        }\n    }\n}"
    },
    {
        "instruction": "Convert the following Python code snippet into JavaScript.",
        "input": "def add_numbers(x, y):\n  return x + y\nresult = add_numbers(5, 7)\nprint(result)",
        "response": "function add_numbers(x, y) {\n  return x + y;\n}\n\nlet result = add_numbers(5, 7);\nconsole.log(result);",
        "output": "function add_numbers(x, y) {\n  return x + y;\n}\n\nlet result = add_numbers(5, 7);\nconsole.log(result);"
    },
    {
        "instruction": "What would be the result of executing the given C++ code?",
        "input": "#include <iostream>\n\nint main() {\n    int a = 8;\n    int b = 5;\n    int c = a % b;\n    std::cout << c << std::endl;\n    return 0;\n}",
        "response": "The given C++ code calculates the remainder when a is divided by b (a % b). In this example, 8 is divided by 5, resulting in a remainder of 3. So the code would output '3' to the console.",
        "output": "The given C++ code calculates the remainder when a is divided by b (a % b). In this example, 8 is divided by 5, resulting in a remainder of 3. So the code would output '3' to the console."
    },
    {
        "instruction": "Create a shell script that lists all files in the current directory and prints the total number of files.",
        "input": "",
        "response": "#!/bin/sh\n\n# List all files in the current directory\nfile_list=$(ls)\n\n# Print the file list\nprintf \"Files:\\n%s\\n\" \"$file_list\"\n\n# Count the total number of files\nfile_count=$(ls | wc -l)\n\n# Print the total number of files\nprintf \"Total number of files: %d\\n\" $file_count",
        "output": "#!/bin/sh\n\n# List all files in the current directory\nfile_list=$(ls)\n\n# Print the file list\nprintf \"Files:\\n%s\\n\" \"$file_list\"\n\n# Count the total number of files\nfile_count=$(ls | wc -l)\n\n# Print the total number of files\nprintf \"Total number of files: %d\\n\" $file_count"
    },
    {
        "instruction": "Write a Java program that calculates the sum of all odd integers between 1 and a given number (inclusive).",
        "input": "",
        "response": "public class OddSum {\n    public static void main(String[] args) {\n        int givenNumber = 15;\n        int sum = 0;\n\n        for (int i = 1; i <= givenNumber; i += 2) {\n            sum += i;\n        }\n\n        System.out.println(\"Sum of odd integers between 1 and \" + givenNumber + \": \" + sum);\n    }\n}",
        "output": "public class OddSum {\n    public static void main(String[] args) {\n        int givenNumber = 15;\n        int sum = 0;\n\n        for (int i = 1; i <= givenNumber; i += 2) {\n            sum += i;\n        }\n\n        System.out.println(\"Sum of odd integers between 1 and \" + givenNumber + \": \" + sum);\n    }\n}"
    },
    {
        "instruction": "Implement a Python function that calculates the length of the hypotenuse of a right triangle, given the lengths of the other two sides.",
        "input": "def hypotenuse_length(a: float, b: float) -> float:",
        "response": "from math import sqrt\n\ndef hypotenuse_length(a: float, b: float) -> float:\n    '''Calculate the length of the hypotenuse of a right triangle\n    Args:\n    a (float): Length of a side\n    b (float): Length of the other side\n\n    Returns:\n    float: Length of the hypotenuse\n    '''\n    return sqrt(a**2 + b**2)",
        "output": "from math import sqrt\n\ndef hypotenuse_length(a: float, b: float) -> float:\n    '''Calculate the length of the hypotenuse of a right triangle\n    Args:\n    a (float): Length of a side\n    b (float): Length of the other side\n\n    Returns:\n    float: Length of the hypotenuse\n    '''\n    return sqrt(a**2 + b**2)"
    },
    {
        "instruction": "Translate the following JavaScript code which calculates the factorial of a given number to Python.",
        "input": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}",
        "response": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "Given a Java code snippet, identify the error and provide a fix.",
        "input": "public class Main {\n  public static void main(String[] args) {\n    for (int i = 0; i <= 10 i++) {\n      System.out.println(i);\n    }\n  }\n}",
        "response": "The error is a missing semicolon in the for loop declaration. Here's the corrected version:\n\npublic class Main {\n  public static void main(String[] args) {\n    for (int i = 0; i <= 10; i++) {\n      System.out.println(i);\n    }\n  }\n}",
        "output": "The error is a missing semicolon in the for loop declaration. Here's the corrected version:\n\npublic class Main {\n  public static void main(String[] args) {\n    for (int i = 0; i <= 10; i++) {\n      System.out.println(i);\n    }\n  }\n}"
    },
    {
        "instruction": "Write a shell script to delete all files in a directory matching the pattern '*.log'.",
        "input": "",
        "response": "#!/bin/sh\n\n# Remove all files matching the pattern '*.log'\nrm -f *.log",
        "output": "#!/bin/sh\n\n# Remove all files matching the pattern '*.log'\nrm -f *.log"
    },
    {
        "instruction": "Develop a Python function to determine if a given number is a palindrome.",
        "input": "121",
        "response": "def is_palindrome(n):\n    num_str = str(n)\n    return num_str == num_str[::-1]\n\nnumber = 121\nresult = is_palindrome(number)\nprint(result)",
        "output": "def is_palindrome(n):\n    num_str = str(n)\n    return num_str == num_str[::-1]\n\nnumber = 121\nresult = is_palindrome(number)\nprint(result)"
    },
    {
        "instruction": "Create a Java method to compute the greatest common divisor (GCD) of two integers.",
        "input": "56, 98",
        "response": "public class GCD {\n\n    public static int findGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return findGCD(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        int num1 = 56;\n        int num2 = 98;\n        int result = findGCD(num1, num2);\n        System.out.println(result);\n    }\n}",
        "output": "public class GCD {\n\n    public static int findGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return findGCD(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        int num1 = 56;\n        int num2 = 98;\n        int result = findGCD(num1, num2);\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "How can I determine the length of a string without using the built-in length() function in JavaScript?",
        "input": "Find the length of the string: 'Exemplary'",
        "response": "function getStringLength(str) {\n    let count = 0;\n    for(const char of str) {\n        count++;\n    }\n    return count;\n}\n\nconst inputString = 'Exemplary';\nconst length = getStringLength(inputString);\nconsole.log(length);",
        "output": "function getStringLength(str) {\n    let count = 0;\n    for(const char of str) {\n        count++;\n    }\n    return count;\n}\n\nconst inputString = 'Exemplary';\nconst length = getStringLength(inputString);\nconsole.log(length);"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers and returns the sum of all even numbers in the vector.",
        "input": "std::vector<int> nums = {1, 4, 9, 16, 25, 36, 49, 64}",
        "response": "#include <iostream>\n#include <vector>\n\nint sum_even_numbers(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> nums = {1, 4, 9, 16, 25, 36, 49, 64};\n    int result = sum_even_numbers(nums);\n    std::cout << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint sum_even_numbers(const std::vector<int>& nums) {\n    int sum = 0;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> nums = {1, 4, 9, 16, 25, 36, 49, 64};\n    int result = sum_even_numbers(nums);\n    std::cout << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that takes a list of integers and returns a list of their squares.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def square_elements(numbers):\n    return [number ** 2 for number in numbers]\n\n\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = square_elements(numbers)\nprint(squared_numbers)",
        "output": "def square_elements(numbers):\n    return [number ** 2 for number in numbers]\n\n\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = square_elements(numbers)\nprint(squared_numbers)"
    },
    {
        "instruction": "How to write in JavaScript an arrow function that takes a number n and returns the sum of integers from 1 to n.",
        "input": "6",
        "response": "const sumUptoN = (n) => {\n    return (n * (n + 1)) / 2;\n};\n\nconst n = 6;\nconsole.log(`The sum of integers from 1 to ${n} is:`, sumUptoN(n));",
        "output": "const sumUptoN = (n) => {\n    return (n * (n + 1)) / 2;\n};\n\nconst n = 6;\nconsole.log(`The sum of integers from 1 to ${n} is:`, sumUptoN(n));"
    },
    {
        "instruction": "Provide a C++ program that takes a string as input, counts the occurrences of each character, and prints the results.",
        "input": "Hello, GPT!",
        "response": "#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::string input = \"Hello, GPT!\";\n    std::map<char, int> character_count;\n\n    for (char c : input) {\n        character_count[c]++;\n    }\n\n    std::cout << \"Character count:\" << std::endl;\n    for (const auto& pair : character_count) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <map>\n#include <string>\n\nint main() {\n    std::string input = \"Hello, GPT!\";\n    std::map<char, int> character_count;\n\n    for (char c : input) {\n        character_count[c]++;\n    }\n\n    std::cout << \"Character count:\" << std::endl;\n    for (const auto& pair : character_count) {\n        std::cout << pair.first << \": \" << pair.second << std::endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python script that implements the following logic: Given a list of tuples, where each tuple consists of a string and a number, remove tuples where the number is even and reverse the remaining tuples' strings.",
        "input": "[('abc', 3), ('def', 2), ('ghi', 1), ('jkl', 4)]",
        "response": "data = [('abc', 3), ('def', 2), ('ghi', 1), ('jkl', 4)]\n\nfiltered_data = [(string[::-1], number) for string, number in data if number % 2 != 0]\n\nprint(filtered_data)",
        "output": "data = [('abc', 3), ('def', 2), ('ghi', 1), ('jkl', 4)]\n\nfiltered_data = [(string[::-1], number) for string, number in data if number % 2 != 0]\n\nprint(filtered_data)"
    },
    {
        "instruction": "Create a Python function that takes a string input and returns the number of vowels in it.",
        "input": "This is an example text",
        "response": "def count_vowels(text):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n\ninput_text = 'This is an example text'\nprint('Number of vowels:', count_vowels(input_text))",
        "output": "def count_vowels(text):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n\ninput_text = 'This is an example text'\nprint('Number of vowels:', count_vowels(input_text))"
    },
    {
        "instruction": "What is the correct JavaScript code to generate a random number between two given integers, min and max?",
        "input": "min = 5, max = 20",
        "response": "function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst min = 5;\nconst max = 20;\nconsole.log('Random number between 5 and 20:', getRandomInt(min, max));",
        "output": "function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst min = 5;\nconst max = 20;\nconsole.log('Random number between 5 and 20:', getRandomInt(min, max));"
    },
    {
        "instruction": "Write a C++ program that takes a positive integer as input and calculates the factorial of that number.",
        "input": "6",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0)\n        return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int num;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> num;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0)\n        return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    unsigned int num;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> num;\n    std::cout << \"Factorial of \" << num << \" is \" << factorial(num) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Translate the following Python code to a Java function: 'def square(x): return x * x'",
        "input": "def square(x): return x * x",
        "response": "public static int square(int x) {\n    return x * x;\n}",
        "output": "public static int square(int x) {\n    return x * x;\n}"
    },
    {
        "instruction": "What is the expected output of this C++ code?",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 1;\n    int b = 2;\n    int c = a + b;\n    cout << \"Sum: \" << c << endl;\n    return 0;\n}",
        "response": "The expected output of this C++ code is:\n\nSum: 3",
        "output": "The expected output of this C++ code is:\n\nSum: 3"
    },
    {
        "instruction": "Implement an API request to fetch JSON data from the given URL using Python and the requests library.",
        "input": "URL: 'https://jsonplaceholder.typicode.com/todos/1'",
        "response": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\ndata = response.json()\n\nprint(data)",
        "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\ndata = response.json()\n\nprint(data)"
    },
    {
        "instruction": "Find and fix the syntax error in the following Java code snippet.",
        "input": "public class Main {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n\n    public void printNumber() {\n        int number = 5;\n        System.out.println(number;\n    }\n}",
        "response": "public class Main {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n\n    public void printNumber() {\n        int number = 5;\n        System.out.println(number); // Fixed syntax error by adding the missing closing parenthesis\n    }\n}",
        "output": "public class Main {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n\n    public void printNumber() {\n        int number = 5;\n        System.out.println(number); // Fixed syntax error by adding the missing closing parenthesis\n    }\n}"
    },
    {
        "instruction": "Implement a Python function to compute the sum of squares of the first n natural numbers.",
        "input": "n = 10",
        "response": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nn = 10\nresult = sum_of_squares(n)\nprint('The sum of squares of the first', n, 'natural numbers is:', result)",
        "output": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nn = 10\nresult = sum_of_squares(n)\nprint('The sum of squares of the first', n, 'natural numbers is:', result)"
    },
    {
        "instruction": "Translate the following JavaScript function to a similar function in Java that calculates the discriminant of a quadratic equation 'ax^2 + bx + c = 0' and returns its value.",
        "input": "function discriminant(a, b, c) {\n    return b * b - 4 * a * c;\n}",
        "response": "public class QuadraticDiscriminant {\n    public static void main(String[] args) {\n        int a = 1, b = 4, c = 2;\n        double discriminantValue = discriminant(a, b, c);\n        System.out.println('The discriminant value is: ' + discriminantValue);\n    }\n\n    public static double discriminant(int a, int b, int c) {\n        return Math.pow(b, 2) - 4 * a * c;\n    }\n}",
        "output": "public class QuadraticDiscriminant {\n    public static void main(String[] args) {\n        int a = 1, b = 4, c = 2;\n        double discriminantValue = discriminant(a, b, c);\n        System.out.println('The discriminant value is: ' + discriminantValue);\n    }\n\n    public static double discriminant(int a, int b, int c) {\n        return Math.pow(b, 2) - 4 * a * c;\n    }\n}"
    },
    {
        "instruction": "What is the expected output of the given Python code snippet?",
        "input": "def recursive_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + recursive_sum(n - 1)\n\nn = 5\nresult = recursive_sum(n)\nprint(result)",
        "response": "The code computes the sum of the first n natural numbers using a recursive function. Given n = 5, the expected output is:\n\n15",
        "output": "The code computes the sum of the first n natural numbers using a recursive function. Given n = 5, the expected output is:\n\n15"
    },
    {
        "instruction": "Write a Bash script that expects a file name as its argument and prints the number of lines in that file.",
        "input": "Input file: 'test_file.txt'",
        "response": "#!/bin/bash\n\nif [ $# -eq 0 ]; then\n    echo 'Error: Expecting a file name as argument'\n    exit 1\nfi\n\nfile_name=$1\nline_count=$(wc -l <\"$file_name\")\necho \"Number of lines in '$file_name': $line_count\"",
        "output": "#!/bin/bash\n\nif [ $# -eq 0 ]; then\n    echo 'Error: Expecting a file name as argument'\n    exit 1\nfi\n\nfile_name=$1\nline_count=$(wc -l <\"$file_name\")\necho \"Number of lines in '$file_name': $line_count\""
    },
    {
        "instruction": "Create a Java function that takes a directory path as input and returns the total size of all the files in that directory.",
        "input": "",
        "response": "import java.io.File;\n\npublic long getTotalSize(String directoryPath) {\n    File directory = new File(directoryPath);\n    long totalSize = 0;\n\n    if (directory.exists() && directory.isDirectory()) {\n        File[] files = directory.listFiles();\n        for(File file : files) {\n            if(file.isFile()) {\n                totalSize += file.length();\n            }\n        }\n    }\n\n    return totalSize;\n}",
        "output": "import java.io.File;\n\npublic long getTotalSize(String directoryPath) {\n    File directory = new File(directoryPath);\n    long totalSize = 0;\n\n    if (directory.exists() && directory.isDirectory()) {\n        File[] files = directory.listFiles();\n        for(File file : files) {\n            if(file.isFile()) {\n                totalSize += file.length();\n            }\n        }\n    }\n\n    return totalSize;\n}"
    },
    {
        "instruction": "How can I change keys and values of a JavaScript object?",
        "input": "var student = {\n  name: 'John Doe',\n  age: 25,\n  course: 'Computer Science'\n};",
        "response": "function swapKeysAndValues(obj) {\n    var newObj = {};\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            newObj[obj[key]] = key;\n        }\n    }\n    return newObj;\n}\n\nvar student = {\n    name: 'John Doe',\n    age: 25,\n    course: 'Computer Science'\n};\n\nvar swappedStudent = swapKeysAndValues(student);",
        "output": "function swapKeysAndValues(obj) {\n    var newObj = {};\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            newObj[obj[key]] = key;\n        }\n    }\n    return newObj;\n}\n\nvar student = {\n    name: 'John Doe',\n    age: 25,\n    course: 'Computer Science'\n};\n\nvar swappedStudent = swapKeysAndValues(student);"
    },
    {
        "instruction": "Improve this Python code to avoid ZeroDivisionError.",
        "input": "def calculate_percentage(a, b):\n    return (a / b) * 100",
        "response": "def calculate_percentage(a, b):\n    if b == 0:\n        print('Error: Division by zero')\n        return 0\n    return (a / b) * 100",
        "output": "def calculate_percentage(a, b):\n    if b == 0:\n        print('Error: Division by zero')\n        return 0\n    return (a / b) * 100"
    },
    {
        "instruction": "Convert this C++ code snippet to C# that calculates the exponential power of a given base and exponent.",
        "input": "#include <iostream>\n#include <cmath>\n\nint main() {\n    double base, exponent, result;\n    std::cout << \"Enter the base: \";\n    std::cin >> base;\n    std::cout << \"Enter the exponent: \";\n    std::cin >> exponent;\n\n    result = std::pow(base, exponent);\n\n    std::cout << base << \" raised to the power of \" << exponent << \" is: \" << result << std::endl;\n\n    return 0;\n}",
        "response": "using System;\n\nnamespace ExponentialPower {\n    class Program {\n        static void Main(string[] args) {\n            double baseValue, exponent, result;\n            Console.Write(\"Enter the base: \");\n            baseValue = Convert.ToDouble(Console.ReadLine());\n            Console.Write(\"Enter the exponent: \");\n            exponent = Convert.ToDouble(Console.ReadLine());\n\n            result = Math.Pow(baseValue, exponent);\n\n            Console.WriteLine(baseValue + \" raised to the power of \" + exponent + \" is: \" + result);\n        }\n    }\n}",
        "output": "using System;\n\nnamespace ExponentialPower {\n    class Program {\n        static void Main(string[] args) {\n            double baseValue, exponent, result;\n            Console.Write(\"Enter the base: \");\n            baseValue = Convert.ToDouble(Console.ReadLine());\n            Console.Write(\"Enter the exponent: \");\n            exponent = Convert.ToDouble(Console.ReadLine());\n\n            result = Math.Pow(baseValue, exponent);\n\n            Console.WriteLine(baseValue + \" raised to the power of \" + exponent + \" is: \" + result);\n        }\n    }\n}"
    },
    {
        "instruction": "Implement a JavaScript function that takes a number as input and returns its square.",
        "input": "Input number: 5",
        "response": "function squareNumber(number) {\n    return number * number;\n}\n\nconst inputNumber = 5;\nconsole.log(squareNumber(inputNumber));",
        "output": "function squareNumber(number) {\n    return number * number;\n}\n\nconst inputNumber = 5;\nconsole.log(squareNumber(inputNumber));"
    },
    {
        "instruction": "Construct a Java method that accepts an array of integers and returns the sum of even numbers within the array.",
        "input": "Array: int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};",
        "response": "public class Main {\n    public static int sumEvenNumbers(int[] numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                sum += number;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        System.out.println(sumEvenNumbers(numbers));\n    }\n}",
        "output": "public class Main {\n    public static int sumEvenNumbers(int[] numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                sum += number;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        System.out.println(sumEvenNumbers(numbers));\n    }\n}"
    },
    {
        "instruction": "Rewrite the following Python code snippet using list comprehension, which generates the first 10 odd numbers squared.",
        "input": "odd_numbers_squared = []\nfor i in range(1, 20, 2):\n    odd_numbers_squared.append(i * i)",
        "response": "odd_numbers_squared = [i * i for i in range(1, 20, 2)]",
        "output": "odd_numbers_squared = [i * i for i in range(1, 20, 2)]"
    },
    {
        "instruction": "How would you convert the following Python code into Julia code?",
        "input": "def say_hello(name):\n    return f'Hello, {name}!'\n\nprint(say_hello('World'))",
        "response": "function say_hello(name)\n    return \"Hello, $name!\"\nend\n\nprintln(say_hello(\"World\"))",
        "output": "function say_hello(name)\n    return \"Hello, $name!\"\nend\n\nprintln(say_hello(\"World\"))"
    },
    {
        "instruction": "Implement a shell script to find the total number of lines that contain the word 'ERROR' in all log files present in the current directory.",
        "input": "",
        "response": "#!/bin/bash\n\n# Find the total number of lines containing 'ERROR' in all log files in the current directory\ngrep -r -c 'ERROR' *.log | awk -F: '{ count += $2 } END { print count }'",
        "output": "#!/bin/bash\n\n# Find the total number of lines containing 'ERROR' in all log files in the current directory\ngrep -r -c 'ERROR' *.log | awk -F: '{ count += $2 } END { print count }'"
    },
    {
        "instruction": "What would be the equivalent of this Python code in Java?",
        "input": "def print_sum_of_squares(a, b):\n    sum_of_squares = a**2 + b**2\n    print(sum_of_squares)\n\nprint_sum_of_squares(3, 4)",
        "response": "public class SumOfSquares {\n\n    public static void main(String[] args) {\n        printSumOfSquares(3, 4);\n    }\n\n    public static void printSumOfSquares(int a, int b) {\n        int sumOfSquares = (a * a) + (b * b);\n        System.out.println(sumOfSquares);\n    }\n}",
        "output": "public class SumOfSquares {\n\n    public static void main(String[] args) {\n        printSumOfSquares(3, 4);\n    }\n\n    public static void printSumOfSquares(int a, int b) {\n        int sumOfSquares = (a * a) + (b * b);\n        System.out.println(sumOfSquares);\n    }\n}"
    },
    {
        "instruction": "Debug this JavaScript function that is intended to return a string containing every other character in the input string.",
        "input": "function everyOtherCharacter(input) {\n    var result = '';\n    for (var i = 0; len = input.length; i += 2) {\n        result += input[i];\n    }\n    return result;\n}\nconsole.log(everyOtherCharacter('abcdef'));",
        "response": "function everyOtherCharacter(input) {\n    var result = '';\n    // Fixed the loop condition: it should be i < input.length\n    for (var i = 0, len = input.length; i < len; i += 2) {\n        result += input[i];\n    }\n    return result;\n}\n\nconsole.log(everyOtherCharacter('abcdef'));",
        "output": "function everyOtherCharacter(input) {\n    var result = '';\n    // Fixed the loop condition: it should be i < input.length\n    for (var i = 0, len = input.length; i < len; i += 2) {\n        result += input[i];\n    }\n    return result;\n}\n\nconsole.log(everyOtherCharacter('abcdef'));"
    },
    {
        "instruction": "Create a C++ function to find the largest element in a given vector of integers.",
        "input": "",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\n// Function to find the largest element in a vector\nint findLargest(const std::vector<int>& numbers) {\n    return *std::max_element(numbers.begin(), numbers.end());\n}\n\n// Driver code\nint main() {\n    std::vector<int> nums = {3, 8, 6, 1, 34, 755, 23, 45, 2, 6};\n    std::cout << \"Largest element: \" << findLargest(nums) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\n// Function to find the largest element in a vector\nint findLargest(const std::vector<int>& numbers) {\n    return *std::max_element(numbers.begin(), numbers.end());\n}\n\n// Driver code\nint main() {\n    std::vector<int> nums = {3, 8, 6, 1, 34, 755, 23, 45, 2, 6};\n    std::cout << \"Largest element: \" << findLargest(nums) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java method that determines if an input integer is prime or not. A prime number is greater than 1 and has no divisors other than 1 and itself.",
        "input": "",
        "response": "public static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "output": "public static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Using Python, write a function that takes a list of numbers as input and returns the second smallest element from the list.",
        "input": "",
        "response": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    return sorted(set(numbers))[1]",
        "output": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    return sorted(set(numbers))[1]"
    },
    {
        "instruction": "Explain the following C++ code line by line, and describe the purpose of each line: \n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n    return 0;\n}\n```",
        "input": "",
        "response": "1. `#include <iostream>`: includes the iostream library, which provides basic input and output functionality.\n2. `using namespace std;`: allows the use of functions and objects from the standard namespace without needing to prefix them with `std::`.\n3. `int main() {`: declares the main function, which is the starting point of the C++ program.\n4. `cout << \"Hello, World!\" << endl;`: uses the 'cout' object to output the string \"Hello, World!\" and then adds a newline character with 'endl'.\n5. `return 0;`: returns 0 from the main function, indicating the program executed successfully.\n6. `}`: marks the end of the main function.",
        "output": "1. `#include <iostream>`: includes the iostream library, which provides basic input and output functionality.\n2. `using namespace std;`: allows the use of functions and objects from the standard namespace without needing to prefix them with `std::`.\n3. `int main() {`: declares the main function, which is the starting point of the C++ program.\n4. `cout << \"Hello, World!\" << endl;`: uses the 'cout' object to output the string \"Hello, World!\" and then adds a newline character with 'endl'.\n5. `return 0;`: returns 0 from the main function, indicating the program executed successfully.\n6. `}`: marks the end of the main function."
    },
    {
        "instruction": "Rewrite the following Python code to be more efficient: \n```python\ndef least_common_multiple(a, b):\n    if a > b:\n        smaller = b\n    else:\n        smaller = a\n    for i in range(1, smaller+1):\n        if ((a % i == 0) and (b % i == 0)):\n            gcd = i\n    return (a * b) // gcd\n```",
        "input": "",
        "response": "import math\n\ndef least_common_multiple(a, b):\n    return (a * b) // math.gcd(a, b)",
        "output": "import math\n\ndef least_common_multiple(a, b):\n    return (a * b) // math.gcd(a, b)"
    },
    {
        "instruction": "Implement a function in Python to generate the Fibonacci sequence up to the nth element.",
        "input": "",
        "response": "def fibonacci(n):\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[:n]",
        "output": "def fibonacci(n):\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[:n]"
    },
    {
        "instruction": "Translate the following Python code snippet into C++: `print('Hello, World!')`",
        "input": "print('Hello, World!')",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << 'Hello, World!' << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << 'Hello, World!' << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script that takes two arguments and calculates their greatest common divisor (GCD) using Euclidean algorithm.",
        "input": "",
        "response": "#!/bin/sh\n\na=$1\nb=$2\n\nwhile [ $b -ne 0 ]; do\n    remainder=$((a % b))\n    a=$b\n    b=$remainder\ndone\n\necho 'GCD:' $a",
        "output": "#!/bin/sh\n\na=$1\nb=$2\n\nwhile [ $b -ne 0 ]; do\n    remainder=$((a % b))\n    a=$b\n    b=$remainder\ndone\n\necho 'GCD:' $a"
    },
    {
        "instruction": "Debug the following JavaScript code to make sure the function properly reverses a given string.\n\n```\nfunction reverseString(str) {\n  return str.split('').reverse('').join('');\n}\n```",
        "input": "function reverseString(str) {\n  return str.split('').reverse('').join('');\n}",
        "response": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Create a Python function to sort a list of dictionaries based on a specific key.",
        "input": "list_of_dictionaries = [{'name': 'Alice', 'age': 28}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 30}]\nkey = 'age'",
        "response": "def sort_list_of_dicts(lst, key):\n    return sorted(lst, key=lambda x: x[key])\n\nsorted_list = sort_list_of_dicts(list_of_dictionaries, key)\nprint(sorted_list)",
        "output": "def sort_list_of_dicts(lst, key):\n    return sorted(lst, key=lambda x: x[key])\n\nsorted_list = sort_list_of_dicts(list_of_dictionaries, key)\nprint(sorted_list)"
    },
    {
        "instruction": "Explain the purpose of 'else' clause in Python's for loop and write an example code snippet to illustrate its use.",
        "input": "",
        "response": "In Python, the 'else' clause in a for loop is executed when the loop has finished iterating the items in the list, and no 'break' statement was encountered during the iteration. It is an optional clause used to specify some code that should be executed when the loop ends normally without encountering a 'break'.\n\nExample:\n\nfor num in range(2, 10):\n    for divisor in range(2, num):\n        if num % divisor == 0:\n            print(f'{num} is not a prime number')\n            break\n    else:\n        print(f'{num} is a prime number')",
        "output": "In Python, the 'else' clause in a for loop is executed when the loop has finished iterating the items in the list, and no 'break' statement was encountered during the iteration. It is an optional clause used to specify some code that should be executed when the loop ends normally without encountering a 'break'.\n\nExample:\n\nfor num in range(2, 10):\n    for divisor in range(2, num):\n        if num % divisor == 0:\n            print(f'{num} is not a prime number')\n            break\n    else:\n        print(f'{num} is a prime number')"
    },
    {
        "instruction": "Write a Java method that takes an array of integers and returns the sum of even numbers.",
        "input": "int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};",
        "response": "public int sumOfEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}\n\n// Usage:\nint[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nint result = sumOfEvenNumbers(numbers);\nSystem.out.println(result);",
        "output": "public int sumOfEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}\n\n// Usage:\nint[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nint result = sumOfEvenNumbers(numbers);\nSystem.out.println(result);"
    },
    {
        "instruction": "Translate the following JavaScript code that filters an array based on a condition to C#.",
        "input": "const numbers = [1, 2, 3, 4, 5];\nconst evenNumbers = numbers.filter(x => x % 2 === 0);\nconsole.log(evenNumbers);",
        "response": "using System;\nusing System.Linq;\n\npublic class Program {\n    public static void Main() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int[] evenNumbers = numbers.Where(x => x % 2 == 0).ToArray();\n        Console.WriteLine(string.Join(\",\", evenNumbers));\n    }\n}",
        "output": "using System;\nusing System.Linq;\n\npublic class Program {\n    public static void Main() {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int[] evenNumbers = numbers.Where(x => x % 2 == 0).ToArray();\n        Console.WriteLine(string.Join(\",\", evenNumbers));\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function to capitalize the first letter of each word in a given string.",
        "input": "JavaScript is a versatile programming language.",
        "response": "function capitalizeWords(str) {\n    return str.split(' ').map(function(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    }).join(' ');\n}\n\nvar input = 'JavaScript is a versatile programming language.';\nvar result = capitalizeWords(input);\nconsole.log(result);",
        "output": "function capitalizeWords(str) {\n    return str.split(' ').map(function(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    }).join(' ');\n}\n\nvar input = 'JavaScript is a versatile programming language.';\nvar result = capitalizeWords(input);\nconsole.log(result);"
    },
    {
        "instruction": "How would you sort a list of dictionaries by the value of a specific key in Python?",
        "input": "[{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 35}]",
        "response": "def sort_dicts_by_key(lst, key):\n    return sorted(lst, key=lambda x: x[key])\n\ninput_list = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 35}]\nkey_to_sort = 'age'\noutput_list = sort_dicts_by_key(input_list, key_to_sort)\nprint(output_list)",
        "output": "def sort_dicts_by_key(lst, key):\n    return sorted(lst, key=lambda x: x[key])\n\ninput_list = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 35}]\nkey_to_sort = 'age'\noutput_list = sort_dicts_by_key(input_list, key_to_sort)\nprint(output_list)"
    },
    {
        "instruction": "Explain the following Java code step by step, which calculates the factorial of a given number.",
        "input": "public int factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
        "response": "1. Define a Java method called 'factorial' that takes an integer 'n' as an input parameter.\n2. Start a conditional statement to check if 'n' equals 0.\n3. If 'n' equals 0, return 1 as the base case for the factorial calculation.\n4. Otherwise (else statement), return the product of 'n' and the factorial of 'n - 1' (recursively calling the factorial method on 'n - 1').\n5. The method will continue calling itself with decreasing 'n' values until it reaches the base case of 0, at which point the multiplication is complete and the final result is returned.",
        "output": "1. Define a Java method called 'factorial' that takes an integer 'n' as an input parameter.\n2. Start a conditional statement to check if 'n' equals 0.\n3. If 'n' equals 0, return 1 as the base case for the factorial calculation.\n4. Otherwise (else statement), return the product of 'n' and the factorial of 'n - 1' (recursively calling the factorial method on 'n - 1').\n5. The method will continue calling itself with decreasing 'n' values until it reaches the base case of 0, at which point the multiplication is complete and the final result is returned."
    },
    {
        "instruction": "Create a C++ program that reads a file line by line and prints each line with its line number.",
        "input": "test.txt",
        "response": "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    string line;\n    ifstream file('test.txt');\n\n    if (file.is_open()) {\n        int lineNumber = 1;\n        while (getline(file, line)) {\n            cout << lineNumber << \": \" << line << '\\n';\n            lineNumber++;\n        }\n        file.close();\n    } else {\n        cout << \"Unable to open the file\";\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    string line;\n    ifstream file('test.txt');\n\n    if (file.is_open()) {\n        int lineNumber = 1;\n        while (getline(file, line)) {\n            cout << lineNumber << \": \" << line << '\\n';\n            lineNumber++;\n        }\n        file.close();\n    } else {\n        cout << \"Unable to open the file\";\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Java method that reverses a given string.",
        "input": "Hello, world!",
        "response": "public class StringReversal {\n    public static void main(String[] args) {\n        String input = \"Hello, world!\";\n        String reversed = reverseString(input);\n        System.out.println(reversed);\n    }\n\n    public static String reverseString(String input) {\n        StringBuilder sb = new StringBuilder(input);\n        return sb.reverse().toString();\n    }\n}",
        "output": "public class StringReversal {\n    public static void main(String[] args) {\n        String input = \"Hello, world!\";\n        String reversed = reverseString(input);\n        System.out.println(reversed);\n    }\n\n    public static String reverseString(String input) {\n        StringBuilder sb = new StringBuilder(input);\n        return sb.reverse().toString();\n    }\n}"
    },
    {
        "instruction": "How would you solve the FizzBuzz problem in JavaScript?",
        "input": "1-100",
        "response": "function fizzBuzz() {\n    for (let i = 1; i <= 100; i++) {\n        let result = '';\n        if (i % 3 === 0) {\n            result += 'Fizz';\n        }\n        if (i % 5 === 0) {\n            result += 'Buzz';\n        }\n        console.log(result || i);\n    }\n}\n\nfizzBuzz();",
        "output": "function fizzBuzz() {\n    for (let i = 1; i <= 100; i++) {\n        let result = '';\n        if (i % 3 === 0) {\n            result += 'Fizz';\n        }\n        if (i % 5 === 0) {\n            result += 'Buzz';\n        }\n        console.log(result || i);\n    }\n}\n\nfizzBuzz();"
    },
    {
        "instruction": "Write a Python function that takes a list of numbers and returns a new list containing only the unique elements.",
        "input": "[1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8]",
        "response": "def unique_elements(input_list):\n    return list(set(input_list))\n\ninput_list = [1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8]\nresult = unique_elements(input_list)\nprint(result)",
        "output": "def unique_elements(input_list):\n    return list(set(input_list))\n\ninput_list = [1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8]\nresult = unique_elements(input_list)\nprint(result)"
    },
    {
        "instruction": "Show an example of reading and writing a text file in C#.",
        "input": "input.txt\noutput.txt",
        "response": "using System;\nusing System.IO;\n\npublic class ReadWriteFile {\n    public static void Main() {\n        string inputFilePath = \"input.txt\";\n        string outputFilePath = \"output.txt\";\n\n        string[] fileLines = File.ReadAllLines(inputFilePath);\n\n        for (int i = 0; i < fileLines.Length; i++) {\n            fileLines[i] = \"Line \" + (i + 1) + \": \" + fileLines[i];\n        }\n\n        File.WriteAllLines(outputFilePath, fileLines);\n    }\n}",
        "output": "using System;\nusing System.IO;\n\npublic class ReadWriteFile {\n    public static void Main() {\n        string inputFilePath = \"input.txt\";\n        string outputFilePath = \"output.txt\";\n\n        string[] fileLines = File.ReadAllLines(inputFilePath);\n\n        for (int i = 0; i < fileLines.Length; i++) {\n            fileLines[i] = \"Line \" + (i + 1) + \": \" + fileLines[i];\n        }\n\n        File.WriteAllLines(outputFilePath, fileLines);\n    }\n}"
    },
    {
        "instruction": "Create a C++ function to find if a given integer n is prime.",
        "input": "",
        "response": "bool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "output": "bool is_prime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "How can I implement a stack data structure in Python?",
        "input": "",
        "response": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)",
        "output": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)"
    },
    {
        "instruction": "Write a Java function that reads an XML file and prints its tag names.",
        "input": "",
        "response": "import org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\n\nimport java.io.File;\n\nclass XMLTagPrinter extends DefaultHandler {\n\n    public static void main(String[] args) {\n        try {\n            File inputFile = new File('input.xml');\n            SAXParserFactory factory = SAXParserFactory.newInstance();\n            SAXParser saxParser = factory.newSAXParser();\n            XMLTagPrinter tagPrinter = new XMLTagPrinter();\n            saxParser.parse(inputFile, tagPrinter);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void startElement(String uri, String localName, String qName, Attributes attributes)\n            throws SAXException {\n        System.out.println('Start Element :' + qName);\n    }\n\n    public void endElement(String uri, String localName, String qName) throws SAXException {\n        System.out.println('End Element :' + qName);\n    }\n}",
        "output": "import org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\n\nimport java.io.File;\n\nclass XMLTagPrinter extends DefaultHandler {\n\n    public static void main(String[] args) {\n        try {\n            File inputFile = new File('input.xml');\n            SAXParserFactory factory = SAXParserFactory.newInstance();\n            SAXParser saxParser = factory.newSAXParser();\n            XMLTagPrinter tagPrinter = new XMLTagPrinter();\n            saxParser.parse(inputFile, tagPrinter);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void startElement(String uri, String localName, String qName, Attributes attributes)\n            throws SAXException {\n        System.out.println('Start Element :' + qName);\n    }\n\n    public void endElement(String uri, String localName, String qName) throws SAXException {\n        System.out.println('End Element :' + qName);\n    }\n}"
    },
    {
        "instruction": "Create a shell script that compresses all files in a folder with the tar.gz extension.",
        "input": "",
        "response": "#!/bin/bash\n\nif [ -z $1 ]; then\n    echo 'Usage: ./compress_files.sh <folder>'\n    exit 1\nfi\n\nfolder=$1\n\nif [ ! -d $folder ]; then\n    echo 'Error: Directory not found'\n    exit 1\nfi\n\nfor file in $folder/*; do\n    if [ -f $file ]; then\n        tar -czf $file.tar.gz $file\n    fi\ndone",
        "output": "#!/bin/bash\n\nif [ -z $1 ]; then\n    echo 'Usage: ./compress_files.sh <folder>'\n    exit 1\nfi\n\nfolder=$1\n\nif [ ! -d $folder ]; then\n    echo 'Error: Directory not found'\n    exit 1\nfi\n\nfor file in $folder/*; do\n    if [ -f $file ]; then\n        tar -czf $file.tar.gz $file\n    fi\ndone"
    },
    {
        "instruction": "Write a Python function to convert a given numeral string in Roman format to an integer.",
        "input": "MCMXCIV",
        "response": "def roman_to_int(s):\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for c in s:\n        current_value = roman_values[c]\n        if current_value > prev_value:\n            total += current_value - 2 * prev_value\n        else:\n            total += current_value\n        prev_value = current_value\n    return total\n\nresult = roman_to_int('MCMXCIV')\nprint(result)",
        "output": "def roman_to_int(s):\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for c in s:\n        current_value = roman_values[c]\n        if current_value > prev_value:\n            total += current_value - 2 * prev_value\n        else:\n            total += current_value\n        prev_value = current_value\n    return total\n\nresult = roman_to_int('MCMXCIV')\nprint(result)"
    },
    {
        "instruction": "Detect and fix any syntax errors in the following Java code snippet.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n         String greeting = \"Hello, world!\";\n         System.out.println(greeting);\n    }\n}",
        "response": "The Java code snippet is error-free and correctly prints the greeting message 'Hello, world!' when the main method is executed.",
        "output": "The Java code snippet is error-free and correctly prints the greeting message 'Hello, world!' when the main method is executed."
    },
    {
        "instruction": "Translate the following JavaScript code to equivalent Python code:",
        "input": "function calculate_area(radius) {\n    return Math.PI * Math.pow(radius, 2);\n}\n\nlet area = calculate_area(5);\nconsole.log(area);",
        "response": "import math\n\ndef calculate_area(radius):\n    return math.pi * math.pow(radius, 2)\n\narea = calculate_area(5)\nprint(area)",
        "output": "import math\n\ndef calculate_area(radius):\n    return math.pi * math.pow(radius, 2)\n\narea = calculate_area(5)\nprint(area)"
    },
    {
        "instruction": "Write a C++ function to calculate the nth Fibonacci number using recursion.",
        "input": "7",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 7;\n    int result = fibonacci(n);\n    std::cout << \"The \" << n << \"th Fibonacci number is: \" << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 7;\n    int result = fibonacci(n);\n    std::cout << \"The \" << n << \"th Fibonacci number is: \" << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a C++ function that takes an input string and returns the length of the longest consecutive substring of the same character.",
        "input": "",
        "response": "int longest_consecutive_substring(const std::string& input) {\n  int max_len = 0, cur_len = 1;\n  for (size_t i = 1; i < input.size(); i++) {\n    if (input[i] == input[i - 1]) {\n      cur_len++;\n    } else {\n      max_len = std::max(max_len, cur_len);\n      cur_len = 1;\n    }\n  }\n  return std::max(max_len, cur_len);\n}",
        "output": "int longest_consecutive_substring(const std::string& input) {\n  int max_len = 0, cur_len = 1;\n  for (size_t i = 1; i < input.size(); i++) {\n    if (input[i] == input[i - 1]) {\n      cur_len++;\n    } else {\n      max_len = std::max(max_len, cur_len);\n      cur_len = 1;\n    }\n  }\n  return std::max(max_len, cur_len);\n}"
    },
    {
        "instruction": "In Java, implement a static method named 'isPerfectSquare' that checks if the given integer n is a perfect square or not.",
        "input": "",
        "response": "public class PerfectSquareChecker {\n    public static boolean isPerfectSquare(int n) {\n        int root = (int) Math.sqrt(n);\n        return root * root == n;\n    }\n}",
        "output": "public class PerfectSquareChecker {\n    public static boolean isPerfectSquare(int n) {\n        int root = (int) Math.sqrt(n);\n        return root * root == n;\n    }\n}"
    },
    {
        "instruction": "What is a code snippet in JavaScript that can be used to remove all elements from an array?",
        "input": "",
        "response": "function clearArray(arr) {\n  arr.length = 0;\n}\n\n// Use it like this:\nlet myArray = [1, 2, 3, 4, 5];\nclearArray(myArray);\n// myArray is now an empty array []",
        "output": "function clearArray(arr) {\n  arr.length = 0;\n}\n\n// Use it like this:\nlet myArray = [1, 2, 3, 4, 5];\nclearArray(myArray);\n// myArray is now an empty array []"
    },
    {
        "instruction": "How can you find the position of the first occurrence of a substring in a given string using Python?",
        "input": "",
        "response": "def find_substring_position(string, substring):\n  return string.find(substring)\n\n# Usage:\nposition = find_substring_position('Hello, World!', 'World')\n# position will be 7",
        "output": "def find_substring_position(string, substring):\n  return string.find(substring)\n\n# Usage:\nposition = find_substring_position('Hello, World!', 'World')\n# position will be 7"
    },
    {
        "instruction": "Write a Python function that takes a list of integers and returns the position of the maximum value.",
        "input": "[1, 4, 2, 5, 7, 0]",
        "response": "def find_max_position(list_of_integers):\n    max_value = max(list_of_integers)\n    max_position = list_of_integers.index(max_value)\n    return max_position\n\nfind_max_position([1, 4, 2, 5, 7, 0])",
        "output": "def find_max_position(list_of_integers):\n    max_value = max(list_of_integers)\n    max_position = list_of_integers.index(max_value)\n    return max_position\n\nfind_max_position([1, 4, 2, 5, 7, 0])"
    },
    {
        "instruction": "How would you calculate the factorial of a number n recursively in Java?",
        "input": "5",
        "response": "public class Factorial {\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        long result = factorial(n);\n        System.out.println(\"Factorial of \" + n + \" is \" + result);\n    }\n}",
        "output": "public class Factorial {\n\n    public static long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        long result = factorial(n);\n        System.out.println(\"Factorial of \" + n + \" is \" + result);\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes two strings as input and returns a boolean value indicating if the strings are anagrams of each other (ignoring spaces and capitalization).",
        "input": "\"Schoolmaster\", \"The classroom\"",
        "response": "function areAnagrams(str1, str2) {\n    let sortedStr1 = str1.toLowerCase().replace(/\\s+/g, '').split('').sort().join('');\n    let sortedStr2 = str2.toLowerCase().replace(/\\s+/g, '').split('').sort().join('');\n    return sortedStr1 === sortedStr2;\n}\n\nareAnagrams(\"Schoolmaster\", \"The classroom\");",
        "output": "function areAnagrams(str1, str2) {\n    let sortedStr1 = str1.toLowerCase().replace(/\\s+/g, '').split('').sort().join('');\n    let sortedStr2 = str2.toLowerCase().replace(/\\s+/g, '').split('').sort().join('');\n    return sortedStr1 === sortedStr2;\n}\n\nareAnagrams(\"Schoolmaster\", \"The classroom\");"
    },
    {
        "instruction": "Create a C# method that accepts two arrays of integers and returns a new array containing the intersection of the input arrays (i.e., the elements that appear in both arrays).",
        "input": "int[] array1 = {1, 3, 5, 7, 9};\nint[] array2 = {2, 4, 5, 8, 7};",
        "response": "using System;\nusing System.Collections.Generic;\n\npublic class ArrayIntersection {\n    public static int[] FindIntersection(int[] array1, int[] array2) {\n        HashSet<int> set1 = new HashSet<int>(array1);\n        HashSet<int> intersection = new HashSet<int>();\n\n        foreach (int element in array2) {\n            if (set1.Contains(element)) {\n                intersection.Add(element);\n            }\n        }\n\n        return intersection.ToArray();\n    }\n\n    public static void Main() {\n        int[] array1 = {1, 3, 5, 7, 9};\n        int[] array2 = {2, 4, 5, 8, 7};\n        int[] intersectedArray = FindIntersection(array1, array2);\n        Console.WriteLine(String.Join(\", \", intersectedArray));\n    }\n}",
        "output": "using System;\nusing System.Collections.Generic;\n\npublic class ArrayIntersection {\n    public static int[] FindIntersection(int[] array1, int[] array2) {\n        HashSet<int> set1 = new HashSet<int>(array1);\n        HashSet<int> intersection = new HashSet<int>();\n\n        foreach (int element in array2) {\n            if (set1.Contains(element)) {\n                intersection.Add(element);\n            }\n        }\n\n        return intersection.ToArray();\n    }\n\n    public static void Main() {\n        int[] array1 = {1, 3, 5, 7, 9};\n        int[] array2 = {2, 4, 5, 8, 7};\n        int[] intersectedArray = FindIntersection(array1, array2);\n        Console.WriteLine(String.Join(\", \", intersectedArray));\n    }\n}"
    },
    {
        "instruction": "How can we implement the following JavaScript code to calculate the factorial of a given non-negative integer?",
        "input": "function factorial(n) {\n  // Your code here\n}",
        "response": "function factorial(n) {\n  // Base case: n <= 1 returns 1\n  if (n <= 1) return 1;\n\n  // Recursive case: n > 1, n * factorial(n - 1)\n  return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n  // Base case: n <= 1 returns 1\n  if (n <= 1) return 1;\n\n  // Recursive case: n > 1, n * factorial(n - 1)\n  return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Create a Python function to find the first repeated word in a given input string.",
        "input": "input_str = 'It is important to take vital skin care measures early in life.'",
        "response": "def first_repeated_word(input_str):\n    words = input_str.split()\n    seen = set()\n\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n\n    return None\n\ninput_str = 'It is important to take vital skin care measures early in life.'\nprint(first_repeated_word(input_str))",
        "output": "def first_repeated_word(input_str):\n    words = input_str.split()\n    seen = set()\n\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n\n    return None\n\ninput_str = 'It is important to take vital skin care measures early in life.'\nprint(first_repeated_word(input_str))"
    },
    {
        "instruction": "What would be the output of the following Ruby code snippet?",
        "input": "def foo\n  x = 10\n  y = 5\n  return x * y\nend\n\nputs foo() * foo()",
        "response": "In this Ruby code snippet, the function 'foo()' multiplies x (10) and y (5) and returns the result (50). The 'puts' statement then prints the result of calling 'foo()' and multiplying it by itself (50 * 50), yielding an output of 2500.",
        "output": "In this Ruby code snippet, the function 'foo()' multiplies x (10) and y (5) and returns the result (50). The 'puts' statement then prints the result of calling 'foo()' and multiplying it by itself (50 * 50), yielding an output of 2500."
    },
    {
        "instruction": "Convert the following Java for loop into a while loop.",
        "input": "for (int i = 0; i < 10; i++) {\n  System.out.println(i);\n}",
        "response": "int i = 0;\n\nwhile (i < 10) {\n  System.out.println(i);\n  i++;\n}",
        "output": "int i = 0;\n\nwhile (i < 10) {\n  System.out.println(i);\n  i++;\n}"
    },
    {
        "instruction": "Create a Python function that retrieves the hostname from a given URL.",
        "input": "https://www.example.com/some/path?q=value",
        "response": "import urlparse\n\ndef get_hostname(url):\n    parsed_url = urlparse.urlparse(url)\n    return parsed_url.hostname\n\nurl = 'https://www.example.com/some/path?q=value'\nhostname = get_hostname(url)\nprint(hostname)",
        "output": "import urlparse\n\ndef get_hostname(url):\n    parsed_url = urlparse.urlparse(url)\n    return parsed_url.hostname\n\nurl = 'https://www.example.com/some/path?q=value'\nhostname = get_hostname(url)\nprint(hostname)"
    },
    {
        "instruction": "How can I implement a Fahrenheit to Celsius conversion function in JavaScript?",
        "input": "fahrenheit: 100",
        "response": "function fahrenheitToCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nconst fahrenheit = 100;\nconst celsius = fahrenheitToCelsius(fahrenheit);\nconsole.log(celsius);",
        "output": "function fahrenheitToCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nconst fahrenheit = 100;\nconst celsius = fahrenheitToCelsius(fahrenheit);\nconsole.log(celsius);"
    },
    {
        "instruction": "Write a Java program that checks if an input string contains only digits.",
        "input": "input_string: '12345'",
        "response": "public class CheckDigits {\n\n    public static void main(String[] args) {\n        String input_string = '12345';\n        boolean isDigits = containsOnlyDigits(input_string);\n        System.out.println(isDigits);\n    }\n\n    public static boolean containsOnlyDigits(String input) {\n        for (int i = 0; i < input.length(); i++) {\n            if (!Character.isDigit(input.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "output": "public class CheckDigits {\n\n    public static void main(String[] args) {\n        String input_string = '12345';\n        boolean isDigits = containsOnlyDigits(input_string);\n        System.out.println(isDigits);\n    }\n\n    public static boolean containsOnlyDigits(String input) {\n        for (int i = 0; i < input.length(); i++) {\n            if (!Character.isDigit(input.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
    },
    {
        "instruction": "Develop a C program for calculating the area of a rectangle, given its length and width.",
        "input": "length: 10, width: 5",
        "response": "#include <stdio.h>\n\nint calculate_area(int length, int width);\n\nint main() {\n    int length = 10;\n    int width = 5;\n    int area = calculate_area(length, width);\n    printf('Area: %d\\n', area);\n    return 0;\n}\n\nint calculate_area(int length, int width) {\n    return length * width;\n}",
        "output": "#include <stdio.h>\n\nint calculate_area(int length, int width);\n\nint main() {\n    int length = 10;\n    int width = 5;\n    int area = calculate_area(length, width);\n    printf('Area: %d\\n', area);\n    return 0;\n}\n\nint calculate_area(int length, int width) {\n    return length * width;\n}"
    },
    {
        "instruction": "Implement a function in JavaScript that takes a string as input and returns the count of vowels in it.",
        "input": "",
        "response": "function countVowels(str) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let char of str.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n  return count;\n}",
        "output": "function countVowels(str) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let char of str.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n  return count;\n}"
    },
    {
        "instruction": "Given a list of integers in Python, write a single line of code to calculate the squared sum of all the odd numbers in the list.",
        "input": "",
        "response": "squared_sum = sum(x**2 for x in numbers if x % 2 != 0)",
        "output": "squared_sum = sum(x**2 for x in numbers if x % 2 != 0)"
    },
    {
        "instruction": "Find the error in this C++ code snippet and provide a corrected version.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int x = 5;\n  if(x = 10) {\n    cout << \"x is 10\" << endl;\n  } else {\n    cout << \"x is not 10\" << endl;\n  }\n  return 0;\n}",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int x = 5;\n  if(x == 10) { // Use '==' for comparison instead of '='\n    cout << \"x is 10\" << endl;\n  } else {\n    cout << \"x is not 10\" << endl;\n  }\n  return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int x = 5;\n  if(x == 10) { // Use '==' for comparison instead of '='\n    cout << \"x is 10\" << endl;\n  } else {\n    cout << \"x is not 10\" << endl;\n  }\n  return 0;\n}"
    },
    {
        "instruction": "Create a Java method that takes a string and returns a new string with only the first and last character of the input string.",
        "input": "",
        "response": "public String firstAndLast(String input) {\n  if (input.length() <= 1) {\n    return input;\n  }\n  return input.charAt(0) + String.valueOf(input.charAt(input.length() - 1));\n}",
        "output": "public String firstAndLast(String input) {\n  if (input.length() <= 1) {\n    return input;\n  }\n  return input.charAt(0) + String.valueOf(input.charAt(input.length() - 1));\n}"
    },
    {
        "instruction": "Convert the following Python code to Java, which takes an integer list, sorts it, and prints the sorted list.",
        "input": "def sort_list(input_list):\n    sorted_list = sorted(input_list)\n    print(sorted_list)\n\nsort_list([4, 2, 9, 7, 5, 1, 3, 8, 6])",
        "response": "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] inputList = {4, 2, 9, 7, 5, 1, 3, 8, 6};\n        sortList(inputList);\n    }\n\n    public static void sortList(int[] inputList) {\n        int[] sortedList = inputList.clone();\n        Arrays.sort(sortedList);\n        System.out.println(Arrays.toString(sortedList));\n    }\n}",
        "output": "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] inputList = {4, 2, 9, 7, 5, 1, 3, 8, 6};\n        sortList(inputList);\n    }\n\n    public static void sortList(int[] inputList) {\n        int[] sortedList = inputList.clone();\n        Arrays.sort(sortedList);\n        System.out.println(Arrays.toString(sortedList));\n    }\n}"
    },
    {
        "instruction": "Construct a shell script to calculate the total file size in the current directory and display the result in human-readable format.",
        "input": "",
        "response": "#!/bin/bash\n\ndu -sh ./* | awk '{total += $1} END {print \"Total size: \" total \"K\"}'",
        "output": "#!/bin/bash\n\ndu -sh ./* | awk '{total += $1} END {print \"Total size: \" total \"K\"}'"
    },
    {
        "instruction": "Show an example of invoking an API using Python's requests library. Retrieve information from the following API endpoint: https://api.example.com/employees",
        "input": "",
        "response": "import requests\n\nurl = 'https://api.example.com/employees'\nresponse = requests.get(url)\n\ndata = response.json()\nprint(data)",
        "output": "import requests\n\nurl = 'https://api.example.com/employees'\nresponse = requests.get(url)\n\ndata = response.json()\nprint(data)"
    },
    {
        "instruction": "In C++, given a vector of integers 'nums', write a function called 'multiply_by_element' to find the product of all the elements within the vector, and output the product.",
        "input": "",
        "response": "#include <iostream>\n#include <vector>\n\nlong long multiply_by_element(const std::vector<int>& nums) {\n    long long product = 1;\n    for (const int& num : nums) {\n        product *= num;\n    }\n    return product;\n}\n\nint main() {\n    std::vector<int> nums = {4, 2, 9, 7, 5, 1, 3, 8, 6};\n    std::cout << \"Product: \" << multiply_by_element(nums) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nlong long multiply_by_element(const std::vector<int>& nums) {\n    long long product = 1;\n    for (const int& num : nums) {\n        product *= num;\n    }\n    return product;\n}\n\nint main() {\n    std::vector<int> nums = {4, 2, 9, 7, 5, 1, 3, 8, 6};\n    std::cout << \"Product: \" << multiply_by_element(nums) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java method to reverse an input string without using any built-in functions.",
        "input": "",
        "response": "public static String reverseString(String input) {\n    char[] inputChars = input.toCharArray();\n    int left = 0;\n    int right = input.length() - 1;\n    while (left < right) {\n        char temp = inputChars[left];\n        inputChars[left] = inputChars[right];\n        inputChars[right] = temp;\n        left++;\n        right--;\n    }\n    return new String(inputChars);\n}",
        "output": "public static String reverseString(String input) {\n    char[] inputChars = input.toCharArray();\n    int left = 0;\n    int right = input.length() - 1;\n    while (left < right) {\n        char temp = inputChars[left];\n        inputChars[left] = inputChars[right];\n        inputChars[right] = temp;\n        left++;\n        right--;\n    }\n    return new String(inputChars);\n}"
    },
    {
        "instruction": "Write a JavaScript function that computes the factorial of a given non-negative integer n.",
        "input": "",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "In C#, how can you create a method that checks if a given year is a leap year?",
        "input": "",
        "response": "public static bool IsLeapYear(int year) {\n    if (year % 4 != 0) {\n        return false;\n    } else if (year % 100 != 0) {\n        return true;\n    } else if (year % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}",
        "output": "public static bool IsLeapYear(int year) {\n    if (year % 4 != 0) {\n        return false;\n    } else if (year % 100 != 0) {\n        return true;\n    } else if (year % 400 != 0) {\n        return false;\n    } else {\n        return true;\n    }\n}"
    },
    {
        "instruction": "Given an input list of numbers, write a Python function that returns the sum of all even numbers in the list.",
        "input": "",
        "response": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum",
        "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum"
    },
    {
        "instruction": "Construct a Python script to read a CSV file and calculate the average of the numbers in a specified column.",
        "input": "filename.csv, column_name",
        "response": "import csv\n\ndef calculate_average(filename, column_name):\n    total = 0\n    count = 0\n    with open(filename, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            total += float(row[column_name])\n            count += 1\n    return total / count if count > 0 else None\n\naverage = calculate_average('filename.csv', 'column_name')\nprint(average)",
        "output": "import csv\n\ndef calculate_average(filename, column_name):\n    total = 0\n    count = 0\n    with open(filename, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            total += float(row[column_name])\n            count += 1\n    return total / count if count > 0 else None\n\naverage = calculate_average('filename.csv', 'column_name')\nprint(average)"
    },
    {
        "instruction": "Create a Java function that removes duplicate characters from an input string.",
        "input": "Helllo, Woorld!",
        "response": "import java.util.LinkedHashSet;\nimport java.util.Set;\n\npublic class RemoveDuplicates {\n    public static String removeDuplicateCharacters(String input) {\n        Set<Character> chars = new LinkedHashSet<>();\n        for (char c : input.toCharArray()) {\n            chars.add(c);\n        }\n\n        StringBuilder output = new StringBuilder();\n        for (Character c : chars) {\n            output.append(c);\n        }\n        return output.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"Helllo, Woorld!\";\n        String result = removeDuplicateCharacters(input);\n        System.out.println(result);\n    }\n}",
        "output": "import java.util.LinkedHashSet;\nimport java.util.Set;\n\npublic class RemoveDuplicates {\n    public static String removeDuplicateCharacters(String input) {\n        Set<Character> chars = new LinkedHashSet<>();\n        for (char c : input.toCharArray()) {\n            chars.add(c);\n        }\n\n        StringBuilder output = new StringBuilder();\n        for (Character c : chars) {\n            output.append(c);\n        }\n        return output.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"Helllo, Woorld!\";\n        String result = removeDuplicateCharacters(input);\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "Provide a JavaScript function that calculates the factorial of a given non-negative integer.",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconst input = 5;\nconst result = factorial(input);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconst input = 5;\nconst result = factorial(input);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program that reads user input for two numbers and outputs their sum.",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    int num1, num2, sum;\n    std::cout << \"Enter the first number: \";\n    std::cin >> num1;\n    std::cout << \"Enter the second number: \";\n    std::cin >> num2;\n\n    sum = num1 + num2;\n\n    std::cout << \"The sum of the two numbers is: \" << sum << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int num1, num2, sum;\n    std::cout << \"Enter the first number: \";\n    std::cin >> num1;\n    std::cout << \"Enter the second number: \";\n    std::cin >> num2;\n\n    sum = num1 + num2;\n\n    std::cout << \"The sum of the two numbers is: \" << sum << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that calculates and prints the n-th Fibonacci number using a recursive algorithm.",
        "input": "",
        "response": "def fibonacci(n):\n    if n <= 0:\n        return 'Invalid input'\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 6\nprint(f'Fibonacci number at position {n} is: {fibonacci(n)}')",
        "output": "def fibonacci(n):\n    if n <= 0:\n        return 'Invalid input'\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 6\nprint(f'Fibonacci number at position {n} is: {fibonacci(n)}')"
    },
    {
        "instruction": "Translate the following JavaScript code to Python: const arr = [1, 3, 4, 2]; arr.sort((a, b) => b - a); console.log(arr);",
        "input": "",
        "response": "arr = [1, 3, 4, 2]\narr.sort(reverse=True)\nprint(arr)",
        "output": "arr = [1, 3, 4, 2]\narr.sort(reverse=True)\nprint(arr)"
    },
    {
        "instruction": "Explain the purpose and usage of the following C++ code snippet: int square(int x) { return x * x; }",
        "input": "",
        "response": "The given C++ code snippet defines a function called 'square' that takes an integer input (x) and returns the square of the input by multiplying it by itself (x * x). This function can be used in a program to calculate the squares of integers without having to write the multiplication logic explicitly every time.",
        "output": "The given C++ code snippet defines a function called 'square' that takes an integer input (x) and returns the square of the input by multiplying it by itself (x * x). This function can be used in a program to calculate the squares of integers without having to write the multiplication logic explicitly every time."
    },
    {
        "instruction": "How would you modify the following Java code to return the sum of the elements in the array instead of printing it? int[] arr = {1, 2, 3, 4, 5}; int sum = 0; for (int i = 0; i < arr.length; i++) { sum += arr[i]; } System.out.println(sum);",
        "input": "",
        "response": "public int arraySum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "output": "public int arraySum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Write a Java function to find the factorial of a given integer.",
        "input": "",
        "response": "public long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
        "output": "public long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}"
    },
    {
        "instruction": "Can you detect the syntax error in the following Python snippet?",
        "input": "def my_function():\n    a = 5\n    b = 7\n    c = a + b\n     print(c)",
        "response": "There is an extra space before the 'print(c)' statement. It should be aligned with the previous lines.",
        "output": "There is an extra space before the 'print(c)' statement. It should be aligned with the previous lines."
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns the sum of all elements.",
        "input": "",
        "response": "function sumArray(numbers) {\n    let total = 0;\n    for (let number of numbers) {\n        total += number;\n    }\n    return total;\n}",
        "output": "function sumArray(numbers) {\n    let total = 0;\n    for (let number of numbers) {\n        total += number;\n    }\n    return total;\n}"
    },
    {
        "instruction": "Translate the following C++ code snippet to C#: \n\n#include <iostream>\n\nint main() {\n  int a = 5;\n  int b = 10;\n  int sum = a + b;\n  std::cout << \"The sum is: \" << sum;\n  return 0;\n}",
        "input": "",
        "response": "using System;\n\nnamespace ConsoleApp {\n  class Program {\n    static void Main() {\n      int a = 5;\n      int b = 10;\n      int sum = a + b;\n      Console.WriteLine(\"The sum is: \" + sum);\n    }\n  }\n}",
        "output": "using System;\n\nnamespace ConsoleApp {\n  class Program {\n    static void Main() {\n      int a = 5;\n      int b = 10;\n      int sum = a + b;\n      Console.WriteLine(\"The sum is: \" + sum);\n    }\n  }\n}"
    },
    {
        "instruction": "Write a JavaScript function to convert Celsius to Fahrenheit.",
        "input": "30",
        "response": "function celsiusToFahrenheit(celsius) {\n  const fahrenheit = (celsius * 9/5) + 32;\n  return fahrenheit;\n}\n\nconsole.log(celsiusToFahrenheit(30)); // Output: 86",
        "output": "function celsiusToFahrenheit(celsius) {\n  const fahrenheit = (celsius * 9/5) + 32;\n  return fahrenheit;\n}\n\nconsole.log(celsiusToFahrenheit(30)); // Output: 86"
    },
    {
        "instruction": "Create a Java method that takes an integer array and returns the sum of its elements.",
        "input": "int[] input = {1, 2, 3, 4, 5};",
        "response": "public int sumArray(int[] input) {\n  int sum = 0;\n  for (int i = 0; i < input.length; i++) {\n    sum += input[i];\n  }\n  return sum;\n}\n\nint[] input = {1, 2, 3, 4, 5};\nSystem.out.println(sumArray(input)); // Output: 15",
        "output": "public int sumArray(int[] input) {\n  int sum = 0;\n  for (int i = 0; i < input.length; i++) {\n    sum += input[i];\n  }\n  return sum;\n}\n\nint[] input = {1, 2, 3, 4, 5};\nSystem.out.println(sumArray(input)); // Output: 15"
    },
    {
        "instruction": "Translate the following C++ code to C#.",
        "input": "#include <iostream>\n\nint main() {\n  int a = 5;\n  int b = 10;\n  int sum = a + b;\n\n  std::cout << \"Sum: \" << sum << std::endl;\n  return 0;\n}",
        "response": "using System;\n\nclass Program {\n  static void Main() {\n    int a = 5;\n    int b = 10;\n    int sum = a + b;\n\n    Console.WriteLine(\"Sum: \" + sum);\n  }\n}",
        "output": "using System;\n\nclass Program {\n  static void Main() {\n    int a = 5;\n    int b = 10;\n    int sum = a + b;\n\n    Console.WriteLine(\"Sum: \" + sum);\n  }\n}"
    },
    {
        "instruction": "Create a function in JavaScript that takes an array of strings and returns an array with string lengths.",
        "input": "",
        "response": "function getStringLengths(array) {\n  let result = [];\n  array.forEach(element => {\n    result.push(element.length);\n  });\n  return result;\n}",
        "output": "function getStringLengths(array) {\n  let result = [];\n  array.forEach(element => {\n    result.push(element.length);\n  });\n  return result;\n}"
    },
    {
        "instruction": "Write a Python function to calculate the Euclidean distance between two points given their coordinates (x1, y1) and (x2, y2).",
        "input": "",
        "response": "import math\n\ndef euclidean_distance(x1, y1, x2, y2):\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance",
        "output": "import math\n\ndef euclidean_distance(x1, y1, x2, y2):\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance"
    },
    {
        "instruction": "How would you implement a C++ function that finds and returns the largest element in an integer array?",
        "input": "",
        "response": "#include <iostream>\n#include <algorithm>\n\nint find_largest(int arr[], int length) {\n  return *std::max_element(arr, arr + length);\n}",
        "output": "#include <iostream>\n#include <algorithm>\n\nint find_largest(int arr[], int length) {\n  return *std::max_element(arr, arr + length);\n}"
    },
    {
        "instruction": "Given an array in Java, write a method that returns the index of the first occurrence of a specified element.",
        "input": "",
        "response": "public int findIndex(Object[] array, Object target) {\n  for (int i = 0; i < array.length; i++) {\n    if (array[i].equals(target)) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "output": "public int findIndex(Object[] array, Object target) {\n  for (int i = 0; i < array.length; i++) {\n    if (array[i].equals(target)) {\n      return i;\n    }\n  }\n  return -1;\n}"
    },
    {
        "instruction": "How do you reverse a string 'exampleString' in JavaScript?",
        "input": "",
        "response": "To reverse a string in JavaScript, you can use the following code:\n\n```javascript\nfunction reverseString(exampleString) {\n  return exampleString.split('').reverse().join('');\n}\n\nconst reversedString = reverseString('exampleString');\nconsole.log(reversedString);\n```",
        "output": "To reverse a string in JavaScript, you can use the following code:\n\n```javascript\nfunction reverseString(exampleString) {\n  return exampleString.split('').reverse().join('');\n}\n\nconst reversedString = reverseString('exampleString');\nconsole.log(reversedString);\n```"
    },
    {
        "instruction": "Create a Python function that finds the median of a list of numbers.",
        "input": "",
        "response": "```python\ndef find_median(numbers):\n    sorted_numbers = sorted(numbers)\n    length = len(sorted_numbers)\n    if length % 2 == 0:\n        middle1 = sorted_numbers[(length // 2) - 1]\n        middle2 = sorted_numbers[length // 2]\n        median = (middle1 + middle2) / 2\n    else:\n        median = sorted_numbers[length // 2]\n    return median\n\nnumbers = [1, 2, 3, 4, 5]\nprint(find_median(numbers))\n```",
        "output": "```python\ndef find_median(numbers):\n    sorted_numbers = sorted(numbers)\n    length = len(sorted_numbers)\n    if length % 2 == 0:\n        middle1 = sorted_numbers[(length // 2) - 1]\n        middle2 = sorted_numbers[length // 2]\n        median = (middle1 + middle2) / 2\n    else:\n        median = sorted_numbers[length // 2]\n    return median\n\nnumbers = [1, 2, 3, 4, 5]\nprint(find_median(numbers))\n```"
    },
    {
        "instruction": "Design an SQL query that selects all records from the 'employees' table where the last name starts with the letter 'A'.",
        "input": "",
        "response": "To select all records from the 'employees' table with a last name starting with the letter 'A', you can use the following SQL query:\n\n```sql\nSELECT *\nFROM employees\nWHERE last_name LIKE 'A%';\n```",
        "output": "To select all records from the 'employees' table with a last name starting with the letter 'A', you can use the following SQL query:\n\n```sql\nSELECT *\nFROM employees\nWHERE last_name LIKE 'A%';\n```"
    },
    {
        "instruction": "Translate the following C++ code snippet to equivalent Python code:",
        "input": "```cpp\n#include <iostream>\nclass CalculateArea {\npublic:\n  static double circle(double radius) {\n    return 3.14 * radius * radius;\n  }\n};\n\nint main() {\n  std::cout << CalculateArea::circle(5.0) << std::endl;\n  return 0;\n}\n```",
        "response": "Here is the equivalent Python code for the provided C++ code snippet:\n\n```python\nclass CalculateArea:\n\n    @staticmethod\n    def circle(radius):\n        return 3.14 * radius * radius\n\n\nif __name__ == '__main__':\n    print(CalculateArea.circle(5.0))\n```",
        "output": "Here is the equivalent Python code for the provided C++ code snippet:\n\n```python\nclass CalculateArea:\n\n    @staticmethod\n    def circle(radius):\n        return 3.14 * radius * radius\n\n\nif __name__ == '__main__':\n    print(CalculateArea.circle(5.0))\n```"
    },
    {
        "instruction": "Create a Java function that checks if a given string is a palindrome or not, returning true if it is and false otherwise.",
        "input": "",
        "response": "public boolean isPalindrome(String input) {\n    String reversed = new StringBuilder(input).reverse().toString();\n    return input.equals(reversed);\n}",
        "output": "public boolean isPalindrome(String input) {\n    String reversed = new StringBuilder(input).reverse().toString();\n    return input.equals(reversed);\n}"
    },
    {
        "instruction": "How do you write a C++ function to calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm?",
        "input": "",
        "response": "int gcd(int a, int b) {\n    while (b != 0) {\n        int remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}",
        "output": "int gcd(int a, int b) {\n    while (b != 0) {\n        int remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}"
    },
    {
        "instruction": "Write a Python code snippet that takes a list of numbers as input and calculates the sum of all even numbers in the list.",
        "input": "",
        "response": "def sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)",
        "output": "def sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)"
    },
    {
        "instruction": "Given a JavaScript function that accepts an array of integers, demonstrate how to find the largest element in the array.",
        "input": "",
        "response": "function largestElement(arr) {\n    return Math.max.apply(null, arr);\n}",
        "output": "function largestElement(arr) {\n    return Math.max.apply(null, arr);\n}"
    },
    {
        "instruction": "Implement a Python function that calculates the nth Fibonacci number using recursion.",
        "input": "Here is the definition of the Fibonacci sequence:\n\n1. F(0) = 0\n2. F(1) = 1\n3. F(n) = F(n-1) + F(n-2) for n > 1",
        "response": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)",
        "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"
    },
    {
        "instruction": "Debug this JavaScript code and find out why it doesn't display an alert with the result of 2 + 2.",
        "input": "function add(a, b) {\n    return a - b;\n}\n\nconsole.log(add(2, 2));",
        "response": "function add(a, b) {\n    return a + b;  // Fix the subtraction operator to addition operator\n}\n\nconsole.log(add(2, 2));",
        "output": "function add(a, b) {\n    return a + b;  // Fix the subtraction operator to addition operator\n}\n\nconsole.log(add(2, 2));"
    },
    {
        "instruction": "In Java, write a generic method to swap the position of two elements in an array.",
        "input": "",
        "response": "public static <T> void swap(T[] array, int i, int j) {\n    if (array == null || i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        throw new IllegalArgumentException(\"Invalid array or index.\");\n    }\n\n    T temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}",
        "output": "public static <T> void swap(T[] array, int i, int j) {\n    if (array == null || i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        throw new IllegalArgumentException(\"Invalid array or index.\");\n    }\n\n    T temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}"
    },
    {
        "instruction": "Write a C# program that checks if a given word is a palindrome or not.",
        "input": "A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).",
        "response": "using System;\n\nnamespace PalindromeChecker\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter a word:\");\n            string input = Console.ReadLine();\n            Console.WriteLine(IsPalindrome(input) ? \"The word is a palindrome.\" : \"The word is not a palindrome.\");\n        }\n\n        static bool IsPalindrome(string str)\n        {\n            char[] arr = str.ToCharArray();\n            Array.Reverse(arr);\n            string reversed = new string(arr);\n            return str.Equals(reversed, StringComparison.OrdinalIgnoreCase);\n        }\n    }\n}",
        "output": "using System;\n\nnamespace PalindromeChecker\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter a word:\");\n            string input = Console.ReadLine();\n            Console.WriteLine(IsPalindrome(input) ? \"The word is a palindrome.\" : \"The word is not a palindrome.\");\n        }\n\n        static bool IsPalindrome(string str)\n        {\n            char[] arr = str.ToCharArray();\n            Array.Reverse(arr);\n            string reversed = new string(arr);\n            return str.Equals(reversed, StringComparison.OrdinalIgnoreCase);\n        }\n    }\n}"
    },
    {
        "instruction": "Write a Python function that takes a string input and returns a dictionary indicating the count of each character in the input.",
        "input": "aabbbcccc",
        "response": "def count_chars(input_str):\n    counts = {}\n    for char in input_str:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n\ninput_str = 'aabbbcccc'\nresult = count_chars(input_str)\nprint(result)",
        "output": "def count_chars(input_str):\n    counts = {}\n    for char in input_str:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n\ninput_str = 'aabbbcccc'\nresult = count_chars(input_str)\nprint(result)"
    },
    {
        "instruction": "How would you generate a random integer between 1 and 100 in Java?",
        "input": "",
        "response": "import java.util.Random;\n\npublic class RandomInteger {\n    public static void main(String[] args) {\n        Random rand = new Random();\n        int randomInt = rand.nextInt(100) + 1;\n        System.out.println(\"Random integer between 1 and 100: \" + randomInt);\n    }\n}",
        "output": "import java.util.Random;\n\npublic class RandomInteger {\n    public static void main(String[] args) {\n        Random rand = new Random();\n        int randomInt = rand.nextInt(100) + 1;\n        System.out.println(\"Random integer between 1 and 100: \" + randomInt);\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code to TypeScript: 'def add(a: int, b: int) -> int:\n    return a + b'",
        "input": "",
        "response": "function add(a: number, b: number): number {\n  return a + b;\n}",
        "output": "function add(a: number, b: number): number {\n  return a + b;\n}"
    },
    {
        "instruction": "Given the provided piece of C code, identify any syntax errors and correct them:\n\n#include <stdio.h>\n\nint main(void) {\n    fputs(\"Hello, World!\");\n    return 0;\n}",
        "input": "",
        "response": "#include <stdio.h>\n\nint main(void) {\n    fputs(\"Hello, World!\", stdout);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main(void) {\n    fputs(\"Hello, World!\", stdout);\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that takes a string and a shift value as input, then shifts each character in the string by the shift value using the Caesar Cipher.",
        "input": "Input: 'Hello, World!', shift_value = 3",
        "response": "def caesar_cipher(text, shift_value):\n    result = ''\n\n    for char in text:\n        if char.isalpha():\n            shift = shift_value % 26\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n\n    return result\n\nencrypted_text = caesar_cipher('Hello, World!', 3)\nprint(encrypted_text)",
        "output": "def caesar_cipher(text, shift_value):\n    result = ''\n\n    for char in text:\n        if char.isalpha():\n            shift = shift_value % 26\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n\n    return result\n\nencrypted_text = caesar_cipher('Hello, World!', 3)\nprint(encrypted_text)"
    },
    {
        "instruction": "How would you implement a simple stack data structure in JavaScript class syntax, having push and pop methods?",
        "input": "",
        "response": "class Stack {\n    constructor() {\n        this.items = [];\n    }\n\n    push(element) {\n        this.items.push(element);\n    }\n\n    pop() {\n        if (this.items.length === 0) {\n            return 'Underflow';\n        }\n        return this.items.pop();\n    }\n}\n\nconst stack = new Stack();\nstack.push(1);\nstack.push(2);\nstack.pop();",
        "output": "class Stack {\n    constructor() {\n        this.items = [];\n    }\n\n    push(element) {\n        this.items.push(element);\n    }\n\n    pop() {\n        if (this.items.length === 0) {\n            return 'Underflow';\n        }\n        return this.items.pop();\n    }\n}\n\nconst stack = new Stack();\nstack.push(1);\nstack.push(2);\nstack.pop();"
    },
    {
        "instruction": "Translate the following Python code into its equivalent in C#. The input is a list of integers.",
        "input": "def square_all(numbers):\n    return [x * x for x in numbers]",
        "response": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static class MathHelper\n{\n    public static List<int> SquareAll(List<int> numbers)\n    {\n        return numbers.Select(x => x * x).ToList();\n    }\n}",
        "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic static class MathHelper\n{\n    public static List<int> SquareAll(List<int> numbers)\n    {\n        return numbers.Select(x => x * x).ToList();\n    }\n}"
    },
    {
        "instruction": "In Ruby, create a class called 'Person' with a constructor that accepts name, age, and email fields. Create an instance of the class.",
        "input": "name: 'Alice', age: 30, email: 'alice@example.com'",
        "response": "class Person\n  def initialize(name, age, email)\n    @name = name\n    @age = age\n    @email = email\n  end\nend\n\nperson = Person.new('Alice', 30, 'alice@example.com')",
        "output": "class Person\n  def initialize(name, age, email)\n    @name = name\n    @age = age\n    @email = email\n  end\nend\n\nperson = Person.new('Alice', 30, 'alice@example.com')"
    },
    {
        "instruction": "Fix the following JavaScript code to find the maximum number in an array of numbers.",
        "input": "function findMax(arr) {\n    let max = -Infinity;\n\n    for (let i = 0; i <= arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\n    return max;\n}",
        "response": "function findMax(arr) {\n    let max = -Infinity;\n\n    // Fix the loop condition to avoid accessing undefined element\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\n    return max;\n}",
        "output": "function findMax(arr) {\n    let max = -Infinity;\n\n    // Fix the loop condition to avoid accessing undefined element\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\n    return max;\n}"
    },
    {
        "instruction": "Translate the following Python code to C++ code.",
        "input": "def sum_numbers(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total",
        "response": "#include <vector>\n\nint sum_numbers(const std::vector<int>& nums) {\n    int total = 0;\n    for (int num : nums) {\n        total += num;\n    }\n    return total;\n}",
        "output": "#include <vector>\n\nint sum_numbers(const std::vector<int>& nums) {\n    int total = 0;\n    for (int num : nums) {\n        total += num;\n    }\n    return total;\n}"
    },
    {
        "instruction": "How would you implement a function in Java that takes an integer n and returns a list of its factors?",
        "input": "Find factors of n",
        "response": "import java.util.ArrayList;\nimport java.util.List;\n\npublic static List<Integer> findFactors(int n) {\n    List<Integer> factors = new ArrayList<>();\n\n    for (int i = 1; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            factors.add(i);\n\n            if (i != n / i) {\n                factors.add(n / i);\n            }\n        }\n    }\n\n    return factors;\n}",
        "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic static List<Integer> findFactors(int n) {\n    List<Integer> factors = new ArrayList<>();\n\n    for (int i = 1; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            factors.add(i);\n\n            if (i != n / i) {\n                factors.add(n / i);\n            }\n        }\n    }\n\n    return factors;\n}"
    },
    {
        "instruction": "Create a shell script to display the current date and time in the format YYYY-MM-DD hh:mm:ss",
        "input": "Display current date and time",
        "response": "#!/bin/sh\n\ndate +'%Y-%m-%d %H:%M:%S'",
        "output": "#!/bin/sh\n\ndate +'%Y-%m-%d %H:%M:%S'"
    },
    {
        "instruction": "Create a Python function that takes a list of integers and returns a new list with each element squared.",
        "input": "",
        "response": "def square_elements(numbers):\n    squared_numbers = [num * num for num in numbers]\n    return squared_numbers",
        "output": "def square_elements(numbers):\n    squared_numbers = [num * num for num in numbers]\n    return squared_numbers"
    },
    {
        "instruction": "What would be an example of Java code to reverse a given string?",
        "input": "",
        "response": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}",
        "output": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and filters out even numbers.",
        "input": "",
        "response": "function filterEvenNumbers(numbers) {\n    const evenNumbers = numbers.filter(number => number % 2 === 0);\n    return evenNumbers;\n}",
        "output": "function filterEvenNumbers(numbers) {\n    const evenNumbers = numbers.filter(number => number % 2 === 0);\n    return evenNumbers;\n}"
    },
    {
        "instruction": "Using C, write a function that calculates the area of a circle given its radius.",
        "input": "",
        "response": "#include <math.h>\n\nfloat area_of_circle(float radius) {\n    float area = M_PI * radius * radius;\n    return area;\n}",
        "output": "#include <math.h>\n\nfloat area_of_circle(float radius) {\n    float area = M_PI * radius * radius;\n    return area;\n}"
    },
    {
        "instruction": "Implement a Java method to calculate the Fibonacci sequence up to a given number.",
        "input": "10",
        "response": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        for (int i = 1; i <= n; i++) {\n            System.out.print(fibonacci(i) + ' ');\n        }\n    }\n\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}",
        "output": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        for (int i = 1; i <= n; i++) {\n            System.out.print(fibonacci(i) + ' ');\n        }\n    }\n\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}"
    },
    {
        "instruction": "Please correct the syntax errors in the following Python code: def greet(): print('Hello, World!') greet()",
        "input": "def greet():\n print('Hello, World!')\ngreet()",
        "response": "def greet():\n    print('Hello, World!')\n\n\ngreet()",
        "output": "def greet():\n    print('Hello, World!')\n\n\ngreet()"
    },
    {
        "instruction": "Convert the following C# code to C++: using System; namespace HelloWorld { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World!\"); } } }",
        "input": "using System;\nnamespace HelloWorld {\n    class Program {\n        static void Main(string[] args) {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello World!\" << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello World!\" << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java function that calculates and returns the factorial of an integer n using a recursive approach.",
        "input": "",
        "response": "public long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\n// Usage:\n// int n = 5;\n// long result = factorial(n);\n// System.out.println(\"Factorial of \" + n + \" is \" + result);",
        "output": "public long factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\n// Usage:\n// int n = 5;\n// long result = factorial(n);\n// System.out.println(\"Factorial of \" + n + \" is \" + result);"
    },
    {
        "instruction": "How would you write a Python script to download an image from a given URL and save it to a specified file path?",
        "input": "url = 'https://example.com/image.jpg'\nfile_path = 'path/to/save/image.jpg'",
        "response": "import requests\n\nurl = 'https://example.com/image.jpg'\nfile_path = 'path/to/save/image.jpg'\n\nresponse = requests.get(url)\nif response.status_code == 200:\n    with open(file_path, 'wb') as file:\n        file.write(response.content)\nelse:\n    print('Failed to download the image.')",
        "output": "import requests\n\nurl = 'https://example.com/image.jpg'\nfile_path = 'path/to/save/image.jpg'\n\nresponse = requests.get(url)\nif response.status_code == 200:\n    with open(file_path, 'wb') as file:\n        file.write(response.content)\nelse:\n    print('Failed to download the image.')"
    },
    {
        "instruction": "Write a C++ program to swap the values of two integers without using a temporary variable.",
        "input": "int a = 5;\nint b = 10;",
        "response": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    a = a ^ b;\n    b = a ^ b;\n    a = a ^ b;\n}\n\nint main() {\n    int a = 5;\n    int b = 10;\n    std::cout << \"Before swap: a = \" << a << \", b = \" << b << std::endl;\n    swap(a, b);\n    std::cout << \"After swap: a = \" << a << \", b = \" << b << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nvoid swap(int &a, int &b) {\n    a = a ^ b;\n    b = a ^ b;\n    a = a ^ b;\n}\n\nint main() {\n    int a = 5;\n    int b = 10;\n    std::cout << \"Before swap: a = \" << a << \", b = \" << b << std::endl;\n    swap(a, b);\n    std::cout << \"After swap: a = \" << a << \", b = \" << b << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript function to check if a given string is a palindrome or not, ignoring special characters and spaces.",
        "input": "var string = 'A man, a plan, a canal: Panama';",
        "response": "function isPalindrome(s) {\n    var strippedString = s.toLowerCase().replace(/[^a-zA-Z0-9]+/g, '');\n    var reversedString = strippedString.split('').reverse().join('');\n    return strippedString === reversedString;\n}\n\n// Usage:\n// var string = 'A man, a plan, a canal: Panama';\n// var result = isPalindrome(string);\n// console.log(string + ' is a palindrome: ' + result);",
        "output": "function isPalindrome(s) {\n    var strippedString = s.toLowerCase().replace(/[^a-zA-Z0-9]+/g, '');\n    var reversedString = strippedString.split('').reverse().join('');\n    return strippedString === reversedString;\n}\n\n// Usage:\n// var string = 'A man, a plan, a canal: Panama';\n// var result = isPalindrome(string);\n// console.log(string + ' is a palindrome: ' + result);"
    },
    {
        "instruction": "Create a Python function that determines if a given number is a palindrome.",
        "input": "121",
        "response": "def is_palindrome(num):\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n    return num_str == reversed_num_str\n\nnumber = 121\nif is_palindrome(number):\n    print(f'{number} is a palindrome.')\nelse:\n    print(f'{number} is not a palindrome.')",
        "output": "def is_palindrome(num):\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n    return num_str == reversed_num_str\n\nnumber = 121\nif is_palindrome(number):\n    print(f'{number} is a palindrome.')\nelse:\n    print(f'{number} is not a palindrome.')"
    },
    {
        "instruction": "Translate the following JavaScript code snippet into equivalent Python code: const square = num => num * num;",
        "input": "const square = num => num * num;",
        "response": "def square(num):\n    return num * num",
        "output": "def square(num):\n    return num * num"
    },
    {
        "instruction": "What would be the expected output of this C++ code snippet? int a = 10; int b = 20; int c = a++ + b; cout << c;",
        "input": "int a = 10; int b = 20; int c = a++ + b; cout << c;",
        "response": "The expected output is 30. The value of 'a' is used in the expression 'a++ + b' before it gets incremented. So, the expression becomes '10 + 20', which results in 30.",
        "output": "The expected output is 30. The value of 'a' is used in the expression 'a++ + b' before it gets incremented. So, the expression becomes '10 + 20', which results in 30."
    },
    {
        "instruction": "Fix the segmentation fault in the following C code: char *str = \"Hello, World!\"; str[0] = 'M';",
        "input": "char *str = \"Hello, World!\"; str[0] = 'M';",
        "response": "It is caused by attempting to modify a string literal, which is stored in read-only memory. To fix the segmentation fault, you need to declare an array instead of a pointer. Here's the corrected code:\n\nchar str[] = \"Hello, World!\"; str[0] = 'M';",
        "output": "It is caused by attempting to modify a string literal, which is stored in read-only memory. To fix the segmentation fault, you need to declare an array instead of a pointer. Here's the corrected code:\n\nchar str[] = \"Hello, World!\"; str[0] = 'M';"
    },
    {
        "instruction": "Create a shell script that gets the size of a directory and prints the result in a human-readable format.",
        "input": "/home/user/documents",
        "response": "#!/bin/sh\n\ndirectory=\"/home/user/documents\"\n\ndu -sh $directory | awk '{ print \"The size of the directory is:\" $1 }'",
        "output": "#!/bin/sh\n\ndirectory=\"/home/user/documents\"\n\ndu -sh $directory | awk '{ print \"The size of the directory is:\" $1 }'"
    },
    {
        "instruction": "How can I convert a list of strings into a single string using Python?",
        "input": "['hello', 'world', 'this', 'is', 'a', 'test']",
        "response": "def list_to_string(lst):\n    final_str = ' '.join(lst)\n    return final_str\n\nlst = ['hello', 'world', 'this', 'is', 'a', 'test']\nresult = list_to_string(lst)\nprint(result) # Output: hello world this is a test",
        "output": "def list_to_string(lst):\n    final_str = ' '.join(lst)\n    return final_str\n\nlst = ['hello', 'world', 'this', 'is', 'a', 'test']\nresult = list_to_string(lst)\nprint(result) # Output: hello world this is a test"
    },
    {
        "instruction": "Design a Java method that checks if a given word is a palindrome, returning true if it is, and false if it is not.",
        "input": "",
        "response": "public class PalindromeChecker {\n\n    public static boolean isPalindrome(String word) {\n        int startIndex = 0;\n        int endIndex = word.length() - 1;\n\n        while (startIndex < endIndex) {\n            if (word.charAt(startIndex) != word.charAt(endIndex)) {\n                return false;\n            }\n            startIndex++;\n            endIndex--;\n        }\n        return true;\n    }\n\n}",
        "output": "public class PalindromeChecker {\n\n    public static boolean isPalindrome(String word) {\n        int startIndex = 0;\n        int endIndex = word.length() - 1;\n\n        while (startIndex < endIndex) {\n            if (word.charAt(startIndex) != word.charAt(endIndex)) {\n                return false;\n            }\n            startIndex++;\n            endIndex--;\n        }\n        return true;\n    }\n\n}"
    },
    {
        "instruction": "Fix the syntax errors in this C++ code and return the corrected version.",
        "input": "include <iostream>>\n\nint main()\n{\n    int x == 5;\n    std::cou << \"The value of x is:\" << x << std::endl>\n    return o;\n}",
        "response": "#include <iostream>\n\nint main()\n{\n    int x = 5;\n    std::cout << \"The value of x is:\" << x << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main()\n{\n    int x = 5;\n    std::cout << \"The value of x is:\" << x << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java function that calculates the Fibonacci sequence of a given integer, the function should be named 'fibonacci' and accept an integer parameter 'n'.",
        "input": "",
        "response": "public static int fibonacci(int n) {\n if (n <= 1) {\n  return n;\n }\n return fibonacci(n - 1) + fibonacci(n - 2);\n}",
        "output": "public static int fibonacci(int n) {\n if (n <= 1) {\n  return n;\n }\n return fibonacci(n - 1) + fibonacci(n - 2);\n}"
    },
    {
        "instruction": "How would you fix the following JavaScript code to correctly display the sum of two numbers entered by the user? (Current code: prompt('Enter a number:', '') + prompt('Enter another number:', '');)",
        "input": "",
        "response": "let num1 = parseInt(prompt('Enter a number:', ''));\nlet num2 = parseInt(prompt('Enter another number:', ''));\nalert(num1 + num2);",
        "output": "let num1 = parseInt(prompt('Enter a number:', ''));\nlet num2 = parseInt(prompt('Enter another number:', ''));\nalert(num1 + num2);"
    },
    {
        "instruction": "Write a Python script that reads the contents of a text file named 'example.txt', then prints the total number of lines and the number of non-empty lines in the file.",
        "input": "",
        "response": "with open('example.txt', 'r') as file:\n total_lines = 0\n non_empty_lines = 0\n for line in file:\n  total_lines += 1\n  if line.strip():\n   non_empty_lines += 1\nprint('Total lines:', total_lines)\nprint('Non-empty lines:', non_empty_lines)",
        "output": "with open('example.txt', 'r') as file:\n total_lines = 0\n non_empty_lines = 0\n for line in file:\n  total_lines += 1\n  if line.strip():\n   non_empty_lines += 1\nprint('Total lines:', total_lines)\nprint('Non-empty lines:', non_empty_lines)"
    },
    {
        "instruction": "Write a shell script that counts the number of occurrences of the word 'example' within a text file called 'input.txt'.",
        "input": "",
        "response": "#!/bin/bash\n\nword='example'\nfile='input.txt'\n\ngrep -o -i $word $file | wc -l",
        "output": "#!/bin/bash\n\nword='example'\nfile='input.txt'\n\ngrep -o -i $word $file | wc -l"
    },
    {
        "instruction": "Create a JavaScript function that calculates the sum of all even numbers in a given array.",
        "input": "Array: [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "function sumEvenNumbers(arr) {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n}",
        "output": "function sumEvenNumbers(arr) {\n  let sum = 0;\n  arr.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n}"
    },
    {
        "instruction": "Write a C++ function to calculate the nth Fibonacci number using a recursive approach.",
        "input": "nth Fibonacci number: 6",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 6;\n    std::cout << \"The \" << n << \"th Fibonacci number is: \" << fibonacci(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 6;\n    std::cout << \"The \" << n << \"th Fibonacci number is: \" << fibonacci(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Can you implement a Python script that calculates the factorial of a given number using a while loop?",
        "input": "Number: 5",
        "response": "def factorial_while_loop(number):\n    factorial = 1\n    while number > 1:\n        factorial *= number\n        number -= 1\n    return factorial\n\nnumber = 5\nresult = factorial_while_loop(number)\nprint('The factorial of', number, 'is', result)",
        "output": "def factorial_while_loop(number):\n    factorial = 1\n    while number > 1:\n        factorial *= number\n        number -= 1\n    return factorial\n\nnumber = 5\nresult = factorial_while_loop(number)\nprint('The factorial of', number, 'is', result)"
    },
    {
        "instruction": "Translate the given Python code snippet into equivalent JavaScript code.",
        "input": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 9)\nprint(result)",
        "response": "function addNumbers(a, b) {\n    return a + b;\n}\n\nlet result = addNumbers(5, 9);\nconsole.log(result);",
        "output": "function addNumbers(a, b) {\n    return a + b;\n}\n\nlet result = addNumbers(5, 9);\nconsole.log(result);"
    },
    {
        "instruction": "Write a Java method that takes an array of integers and returns the largest element in the array.",
        "input": "",
        "response": "public int findLargest(int[] arr) {\n    int largest = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n    }\n    return largest;\n}",
        "output": "public int findLargest(int[] arr) {\n    int largest = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n    }\n    return largest;\n}"
    },
    {
        "instruction": "Can you provide a C++ function that accepts two strings and returns true if they are anagrams of each other, and false otherwise?",
        "input": "",
        "response": "#include <algorithm>\n#include <string>\n\nbool areAnagrams(std::string s1, std::string s2) {\n    if (s1.length() != s2.length()) {\n        return false;\n    }\n    std::sort(s1.begin(), s1.end());\n    std::sort(s2.begin(), s2.end());\n    for (int i = 0; i < s1.length(); i++) {\n        if (s1[i] != s2[i]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "output": "#include <algorithm>\n#include <string>\n\nbool areAnagrams(std::string s1, std::string s2) {\n    if (s1.length() != s2.length()) {\n        return false;\n    }\n    std::sort(s1.begin(), s1.end());\n    std::sort(s2.begin(), s2.end());\n    for (int i = 0; i < s1.length(); i++) {\n        if (s1[i] != s2[i]) {\n            return false;\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Create a Python script that reads a CSV file and prints the total number of rows in the file.",
        "input": "",
        "response": "import csv\n\ndef count_rows(file_path):\n    with open(file_path, 'r') as csvfile:\n        csv_reader = csv.reader(csvfile)\n        row_count = sum(1 for row in csv_reader)\n    return row_count\n\nfile_path = 'example.csv'\nprint('Total rows:', count_rows(file_path))",
        "output": "import csv\n\ndef count_rows(file_path):\n    with open(file_path, 'r') as csvfile:\n        csv_reader = csv.reader(csvfile)\n        row_count = sum(1 for row in csv_reader)\n    return row_count\n\nfile_path = 'example.csv'\nprint('Total rows:', count_rows(file_path))"
    },
    {
        "instruction": "Create a JavaScript function that takes a sentence as input and returns the length of the longest word in the sentence.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "function findLongestWord(sentence) {\n  let words = sentence.split(' ');\n  let longest = 0;\n\n  for (let word of words) {\n    if (word.length > longest) {\n      longest = word.length;\n    }\n  }\n\n  return longest;\n}",
        "output": "function findLongestWord(sentence) {\n  let words = sentence.split(' ');\n  let longest = 0;\n\n  for (let word of words) {\n    if (word.length > longest) {\n      longest = word.length;\n    }\n  }\n\n  return longest;\n}"
    },
    {
        "instruction": "How would you write a Java method that removes all vowels from a given input string?",
        "input": "elephant",
        "response": "public String removeVowels(String input) {\n  return input.replaceAll(\"[AEIOUaeiou]\", \"\");\n}",
        "output": "public String removeVowels(String input) {\n  return input.replaceAll(\"[AEIOUaeiou]\", \"\");\n}"
    },
    {
        "instruction": "Write a C++ function to find the factorial of a non-negative integer using recursion.",
        "input": "5",
        "response": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned int n) {\n  if (n == 0 || n == 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nint main() {\n  unsigned int n = 5;\n  cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n  return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nunsigned long long factorial(unsigned int n) {\n  if (n == 0 || n == 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nint main() {\n  unsigned int n = 5;\n  cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n  return 0;\n}"
    },
    {
        "instruction": "Implement a Python function that calculates the area of a triangle given its base and height.",
        "input": "base: 10, height: 5",
        "response": "def triangle_area(base, height):\n  return 0.5 * base * height",
        "output": "def triangle_area(base, height):\n  return 0.5 * base * height"
    },
    {
        "instruction": "Write a Python function that takes a list of integers and filters out even numbers, returning a new list with the odd numbers.",
        "input": "[1, 2, 3, 4, 5, 6, 7]",
        "response": "def filter_odd_numbers(numbers):\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\ninput_list = [1, 2, 3, 4, 5, 6, 7]\nresult = filter_odd_numbers(input_list)\nprint(result)",
        "output": "def filter_odd_numbers(numbers):\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\ninput_list = [1, 2, 3, 4, 5, 6, 7]\nresult = filter_odd_numbers(input_list)\nprint(result)"
    },
    {
        "instruction": "What would be the output of the following Java code snippet?\n\npublic class OutputExample {\n    public static void main(String[] args) {\n        int x = 10;\n        int y = x++;\n        System.out.println('x: ' + x + ', y: ' + y);\n    }\n}",
        "input": "",
        "response": "The output of the given code snippet would be:\n\nx: 11, y: 10\n\nThis is because the value of 'x' is used to set 'y' before it is incremented due to the post-increment operator '++'.",
        "output": "The output of the given code snippet would be:\n\nx: 11, y: 10\n\nThis is because the value of 'x' is used to set 'y' before it is incremented due to the post-increment operator '++'."
    },
    {
        "instruction": "Convert the following Python code to JavaScript code:\n\ndef add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 7)\nprint(result)",
        "input": "",
        "response": "function add_numbers(a, b) {\n    return a + b;\n}\n\nconst result = add_numbers(5, 7);\nconsole.log(result);",
        "output": "function add_numbers(a, b) {\n    return a + b;\n}\n\nconst result = add_numbers(5, 7);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a C++ code that reads a single character from the input, and if it's a lowercase letter, it prints the uppercase version, else if it's an uppercase letter, it prints the lowercase version.",
        "input": "a",
        "response": "#include <iostream>\n#include <cctype>\n\nint main() {\n    char input;\n    std::cin >> input;\n\n    if (islower(input)) {\n        std::cout << char(toupper(input)) << std::endl;\n    } else if (isupper(input)) {\n        std::cout << char(tolower(input)) << std::endl;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cctype>\n\nint main() {\n    char input;\n    std::cin >> input;\n\n    if (islower(input)) {\n        std::cout << char(toupper(input)) << std::endl;\n    } else if (isupper(input)) {\n        std::cout << char(tolower(input)) << std::endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that extracts all email addresses from a given string and returns them as a list.",
        "input": "text = 'Please email john.doe@example.com or jane.doe@example.org for further information.'",
        "response": "import re\n\ndef extract_emails(text):\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    return re.findall(email_pattern, text)\n\n# Example usage:\n# text = 'Please email john.doe@example.com or jane.doe@example.org for further information.'\n# print(extract_emails(text))",
        "output": "import re\n\ndef extract_emails(text):\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    return re.findall(email_pattern, text)\n\n# Example usage:\n# text = 'Please email john.doe@example.com or jane.doe@example.org for further information.'\n# print(extract_emails(text))"
    },
    {
        "instruction": "What would be the equivalent of the following Python code snippet in JavaScript?",
        "input": "number_list = [1, 2, 3, 4, 5]\nfiltered_numbers = list(filter(lambda x: x % 2 == 0, number_list))",
        "response": "const numberList = [1, 2, 3, 4, 5];\nconst filteredNumbers = numberList.filter(x => x % 2 === 0);",
        "output": "const numberList = [1, 2, 3, 4, 5];\nconst filteredNumbers = numberList.filter(x => x % 2 === 0);"
    },
    {
        "instruction": "Write a Java code snippet to read data from a file named 'data.txt' and print its content to the console.",
        "input": "",
        "response": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            File dataFile = new File(\"data.txt\");\n            Scanner fileReader = new Scanner(dataFile);\n            while (fileReader.hasNextLine()) {\n                String line = fileReader.nextLine();\n                System.out.println(line);\n            }\n            fileReader.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n        }\n    }\n}",
        "output": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            File dataFile = new File(\"data.txt\");\n            Scanner fileReader = new Scanner(dataFile);\n            while (fileReader.hasNextLine()) {\n                String line = fileReader.nextLine();\n                System.out.println(line);\n            }\n            fileReader.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n        }\n    }\n}"
    },
    {
        "instruction": "Write a C++ program that reads a string from the user and outputs the reverse of the string.",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, input);\n    std::reverse(input.begin(), input.end());\n    std::cout << \"Reversed string: \" << input << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a string: \";\n    std::getline(std::cin, input);\n    std::reverse(input.begin(), input.end());\n    std::cout << \"Reversed string: \" << input << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a C++ function to calculate the gcd of two positive integers using Euclidean algorithm.",
        "input": "12, 8",
        "response": "#include<iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 12, num2 = 8;\n    cout << \"GCD: \" << gcd(num1, num2);\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}\n\nint main() {\n    int num1 = 12, num2 = 8;\n    cout << \"GCD: \" << gcd(num1, num2);\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java method to find and return the longest word from a given sentence.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "public class Main {\n\n    public static String findLongestWord(String sentence) {\n        String[] words = sentence.split(\" \");\n        String longestWord = \"\";\n\n        for (String word : words) {\n            if (word.length() > longestWord.length()) {\n                longestWord = word;\n            }\n        }\n\n        return longestWord;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"The quick brown fox jumps over the lazy dog\";\n        System.out.println(\"Longest word: \" + findLongestWord(sentence));\n    }\n}",
        "output": "public class Main {\n\n    public static String findLongestWord(String sentence) {\n        String[] words = sentence.split(\" \");\n        String longestWord = \"\";\n\n        for (String word : words) {\n            if (word.length() > longestWord.length()) {\n                longestWord = word;\n            }\n        }\n\n        return longestWord;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"The quick brown fox jumps over the lazy dog\";\n        System.out.println(\"Longest word: \" + findLongestWord(sentence));\n    }\n}"
    },
    {
        "instruction": "How would you implement a Python function that receives a list of dates (in string format) and returns the most recent date?",
        "input": "[\"2021-06-01\", \"2021-01-30\", \"2021-12-14\"]",
        "response": "from datetime import datetime\n\ndef find_latest_date(dates):\n    latest_date = None\n    for date_str in dates:\n        date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n        if latest_date is None or date_obj > latest_date:\n            latest_date = date_obj\n    return latest_date.strftime('%Y-%m-%d')\n\nexample_dates = [\"2021-06-01\", \"2021-01-30\", \"2021-12-14\"]\nprint(\"Latest date:\", find_latest_date(example_dates))",
        "output": "from datetime import datetime\n\ndef find_latest_date(dates):\n    latest_date = None\n    for date_str in dates:\n        date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n        if latest_date is None or date_obj > latest_date:\n            latest_date = date_obj\n    return latest_date.strftime('%Y-%m-%d')\n\nexample_dates = [\"2021-06-01\", \"2021-01-30\", \"2021-12-14\"]\nprint(\"Latest date:\", find_latest_date(example_dates))"
    },
    {
        "instruction": "Design a JavaScript function to verify if a provided email address matches the format of a valid email address.",
        "input": "example@email.com",
        "response": "function isValidEmail(email) {\n    const regex = /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$/;\n    return regex.test(email);\n}\n\nconst emailAddress = \"example@email.com\";\nconsole.log(\"Email is valid:\", isValidEmail(emailAddress));",
        "output": "function isValidEmail(email) {\n    const regex = /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$/;\n    return regex.test(email);\n}\n\nconst emailAddress = \"example@email.com\";\nconsole.log(\"Email is valid:\", isValidEmail(emailAddress));"
    },
    {
        "instruction": "Create a Python function to calculate the area of a triangle using the Heron's formula, given the lengths of its three sides a, b, and c.",
        "input": "",
        "response": "def heron_formula(a, b, c):\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area",
        "output": "def heron_formula(a, b, c):\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area"
    },
    {
        "instruction": "What would be a code snippet in JavaScript to make API calls to a given URL using fetch method, and log the response data and any potential errors?",
        "input": "",
        "response": "async function getData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\ngetData('https://api.example.com/data');",
        "output": "async function getData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\ngetData('https://api.example.com/data');"
    },
    {
        "instruction": "Rewrite the following Java code to make use of try-with-resources for managing the closing of file `output.txt`:\n\nFileOutputStream fos = null;\ntry {\n  fos = new FileOutputStream(new File(\"output.txt\"));\n  fos.write(65);\n  fos.close();\n} catch (Exception e) {\n  e.printStackTrace();\n}",
        "input": "",
        "response": "try (FileOutputStream fos = new FileOutputStream(new File(\"output.txt\"))) {\n  fos.write(65);\n} catch (Exception e) {\n  e.printStackTrace();\n}",
        "output": "try (FileOutputStream fos = new FileOutputStream(new File(\"output.txt\"))) {\n  fos.write(65);\n} catch (Exception e) {\n  e.printStackTrace();\n}"
    },
    {
        "instruction": "Create a C# function that takes in a list of strings and combines them into a single string where each string is separated by a comma, excluding any duplicates.",
        "input": "",
        "response": "public static string CombineAndDeduplicate(List<string> items)\n{\n  var uniqueItems = new HashSet<string>(items);\n  return string.Join(',', uniqueItems);\n}",
        "output": "public static string CombineAndDeduplicate(List<string> items)\n{\n  var uniqueItems = new HashSet<string>(items);\n  return string.Join(',', uniqueItems);\n}"
    },
    {
        "instruction": "Write a Python function to compute the factorial of a given non-negative integer using recursion.",
        "input": "",
        "response": "def factorial(n):\n if n <= 1:\n return 1\n else:\n return n * factorial(n - 1)",
        "output": "def factorial(n):\n if n <= 1:\n return 1\n else:\n return n * factorial(n - 1)"
    },
    {
        "instruction": "Create a Java method that returns the sum of all integers between two given numbers, inclusive.",
        "input": "",
        "response": "public int sumBetweenNumbers(int a, int b) {\n int sum = 0;\n for (int i = a; i <= b; i++) {\n sum += i;\n }\n return sum;\n}",
        "output": "public int sumBetweenNumbers(int a, int b) {\n int sum = 0;\n for (int i = a; i <= b; i++) {\n sum += i;\n }\n return sum;\n}"
    },
    {
        "instruction": "How would you implement a C++ function that calculates the area of a circle given its radius?",
        "input": "",
        "response": "#include <cmath>\n\nconst double PI = 3.1415926535;\n\ndouble circleArea(double radius) {\n return PI * std::pow(radius, 2);\n}",
        "output": "#include <cmath>\n\nconst double PI = 3.1415926535;\n\ndouble circleArea(double radius) {\n return PI * std::pow(radius, 2);\n}"
    },
    {
        "instruction": "Write a JavaScript function that accepts an array of strings and returns their concatenation.",
        "input": "",
        "response": "function concatenateStrings(strings) {\n return strings.join('');\n}",
        "output": "function concatenateStrings(strings) {\n return strings.join('');\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns the second largest number in the array.",
        "input": "",
        "response": "function secondLargestNumber(numbers) {\n    numbers.sort(function(a, b) { return a - b; });\n    return numbers[numbers.length - 2];\n}",
        "output": "function secondLargestNumber(numbers) {\n    numbers.sort(function(a, b) { return a - b; });\n    return numbers[numbers.length - 2];\n}"
    },
    {
        "instruction": "What would be the equivalent code in Java for calculating the factorial of a given number using a recursive function?",
        "input": "",
        "response": "public int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
        "output": "public int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}"
    },
    {
        "instruction": "Create a C++ function that receives a string and returns the number of vowels (both upper and lowercase) in it.",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n\nint countVowels(std::string input) {\n    int count = 0;\n    for (char c : input) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint countVowels(std::string input) {\n    int count = 0;\n    for (char c : input) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "Using Python, write a function to find the longest common prefix string amongst an array of strings.",
        "input": "",
        "response": "def longest_common_prefix(strings):\n    if not strings:\n        return ''\n    prefix = strings[0]\n    for string in strings[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n    return prefix",
        "output": "def longest_common_prefix(strings):\n    if not strings:\n        return ''\n    prefix = strings[0]\n    for string in strings[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n    return prefix"
    },
    {
        "instruction": "Create a Java method that takes an array of integers as input and returns the sum of all even numbers in the array.",
        "input": "int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};",
        "response": "public int sumEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Can you provide a Python script that reads a CSV file named 'data.csv' and prints the total number of rows and columns?",
        "input": "data.csv:\nName,Age,Location\nAlice,30,New York\nBob,25,Los Angeles\nCharlie,22,Chicago",
        "response": "import csv\n\nwith open('data.csv', 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    row_count = sum(1 for row in csvreader)\n    csvfile.seek(0)\n    col_count = len(next(csvreader))\n\nprint(f'Total rows: {row_count}')\nprint(f'Total columns: {col_count}')",
        "output": "import csv\n\nwith open('data.csv', 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    row_count = sum(1 for row in csvreader)\n    csvfile.seek(0)\n    col_count = len(next(csvreader))\n\nprint(f'Total rows: {row_count}')\nprint(f'Total columns: {col_count}')"
    },
    {
        "instruction": "Write a JavaScript function that accepts a string as input and returns the string reversed.",
        "input": "const inputString = 'Reverse this string';",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconst reversed = reverseString(inputString);\nconsole.log(reversed);",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconst reversed = reverseString(inputString);\nconsole.log(reversed);"
    },
    {
        "instruction": "Construct a C++ function to calculate the factorial of a non-negative integer using recursion.",
        "input": "int number = 5;",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    return (n == 0) ? 1 : n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    return (n == 0) ? 1 : n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5;\n    std::cout << \"Factorial of \" << number << \" is \" << factorial(number) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java function that calculates the sum of all elements within an array of integers.",
        "input": "",
        "response": "public int sumOfArray(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}",
        "output": "public int sumOfArray(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "What would be the output of the following Python code snippet? Print the result.\n\nx = [3, 4, 5]\ny = x\ny[0] = 9\nprint(x)",
        "input": "",
        "response": "The output of the given code snippet would be:\n\n[9, 4, 5]",
        "output": "The output of the given code snippet would be:\n\n[9, 4, 5]"
    },
    {
        "instruction": "Write a JavaScript function that receives a string as input and returns a new string with all vowels removed.",
        "input": "",
        "response": "function removeVowels(str) {\n    return str.replace(/[aeiou]/ig, '');\n}",
        "output": "function removeVowels(str) {\n    return str.replace(/[aeiou]/ig, '');\n}"
    },
    {
        "instruction": "Translate the following C++ code snippet into Python: \n\n#include <iostream>\n\nint main() {\n  int a = 10;\n  int b = 20;\n  int temp;\n\n  temp = a;\n  a = b;\n  b = temp;\n\n  std::cout << a << ' ' << b << std::endl;\n  return 0;\n}",
        "input": "",
        "response": "def swap_and_print(a, b):\n    temp = a\n    a = b\n    b = temp\n    print(a, b)\n\na = 10\nb = 20\nswap_and_print(a, b)",
        "output": "def swap_and_print(a, b):\n    temp = a\n    a = b\n    b = temp\n    print(a, b)\n\na = 10\nb = 20\nswap_and_print(a, b)"
    },
    {
        "instruction": "Create a Python script that takes user input for a number between 1 and 10, validates the input, and displays a message if the number is within the valid range.",
        "input": "Input: 7",
        "response": "num = int(input('Enter a number between 1 and 10: '))\n\nif 1 <= num <= 10:\n    print('The number is within the valid range.')\nelse:\n    print('Invalid input. Please enter a number between 1 and 10.')",
        "output": "num = int(input('Enter a number between 1 and 10: '))\n\nif 1 <= num <= 10:\n    print('The number is within the valid range.')\nelse:\n    print('Invalid input. Please enter a number between 1 and 10.')"
    },
    {
        "instruction": "Write a C++ program to determine if the given number is a palindrome. A palindrome number is a number that remains the same when its digits are reversed.",
        "input": "Number: 121",
        "response": "#include <iostream>\n\nbool isPalindrome(int num) {\n    int reversed = 0, remainder, original = num;\n    while (num > 0) {\n        remainder = num % 10;\n        reversed = reversed * 10 + remainder;\n        num /= 10;\n    }\n    return original == reversed;\n}\n\nint main() {\n    int num = 121;\n    if (isPalindrome(num))\n        std::cout << num << ' is a palindrome number.';\n    else\n        std::cout << num << ' is not a palindrome number.';\n    return 0;\n}",
        "output": "#include <iostream>\n\nbool isPalindrome(int num) {\n    int reversed = 0, remainder, original = num;\n    while (num > 0) {\n        remainder = num % 10;\n        reversed = reversed * 10 + remainder;\n        num /= 10;\n    }\n    return original == reversed;\n}\n\nint main() {\n    int num = 121;\n    if (isPalindrome(num))\n        std::cout << num << ' is a palindrome number.';\n    else\n        std::cout << num << ' is not a palindrome number.';\n    return 0;\n}"
    },
    {
        "instruction": "Write a Java function that counts the number of vowels in a given string and returns the count.",
        "input": "Input string: 'Artificial Intelligence'",
        "response": "public class Main {\n\n    public static int countVowels(String str) {\n        int count = 0;\n        String vowels = 'AEIOUaeiou';\n        for (int i = 0; i < str.length(); i++) {\n            if (vowels.indexOf(str.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String input = 'Artificial Intelligence';\n        int vowelCount = countVowels(input);\n        System.out.println('Number of vowels in the string: ' + vowelCount);\n    }\n}",
        "output": "public class Main {\n\n    public static int countVowels(String str) {\n        int count = 0;\n        String vowels = 'AEIOUaeiou';\n        for (int i = 0; i < str.length(); i++) {\n            if (vowels.indexOf(str.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String input = 'Artificial Intelligence';\n        int vowelCount = countVowels(input);\n        System.out.println('Number of vowels in the string: ' + vowelCount);\n    }\n}"
    },
    {
        "instruction": "Using JavaScript, generate a function that calculates the length of the hypotenuse of a right-angled triangle given the lengths of the other two sides.",
        "input": "Side A: 3, Side B: 4",
        "response": "function calculateHypotenuse(a, b) {\n    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n}\n\nconst sideA = 3;\nconst sideB = 4;\nconst hypotenuse = calculateHypotenuse(sideA, sideB);\nconsole.log('The length of the hypotenuse is:', hypotenuse);",
        "output": "function calculateHypotenuse(a, b) {\n    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n}\n\nconst sideA = 3;\nconst sideB = 4;\nconst hypotenuse = calculateHypotenuse(sideA, sideB);\nconsole.log('The length of the hypotenuse is:', hypotenuse);"
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns the frequency of each character in the string as a dictionary.",
        "input": "",
        "response": "def character_frequency(input_str):\n  char_freq = {}\n  for char in input_str:\n    if char not in char_freq:\n      char_freq[char] = 1\n    else:\n      char_freq[char] += 1\n  return char_freq",
        "output": "def character_frequency(input_str):\n  char_freq = {}\n  for char in input_str:\n    if char not in char_freq:\n      char_freq[char] = 1\n    else:\n      char_freq[char] += 1\n  return char_freq"
    },
    {
        "instruction": "What modifications to the given C++ code snippet will correct its syntax for creating a class representing a bank account?",
        "input": "class BankAccount {\npublic:\n  BankAccount(double initial_balance) (balance{initial_balance}) {}\n  void deposit(double amount) { balance += amount; }\n  void withdraw(double amount) { balance -= amount; }\n  double get_balance() const { return balance; }\n\nprivate:\n  double balance;\n};",
        "response": "class BankAccount {\npublic:\n  BankAccount(double initial_balance) : balance(initial_balance) {}\n  void deposit(double amount) { balance += amount; }\n  void withdraw(double amount) { balance -= amount; }\n  double get_balance() const { return balance; }\n\nprivate:\n  double balance;\n};\n\n/* The constructor's initializer list syntax was corrected from `()` to a `:` separator. */",
        "output": "class BankAccount {\npublic:\n  BankAccount(double initial_balance) : balance(initial_balance) {}\n  void deposit(double amount) { balance += amount; }\n  void withdraw(double amount) { balance -= amount; }\n  double get_balance() const { return balance; }\n\nprivate:\n  double balance;\n};\n\n/* The constructor's initializer list syntax was corrected from `()` to a `:` separator. */"
    },
    {
        "instruction": "Translate the following Python code that calculates the factorial of a number to its equivalent code in JavaScript.",
        "input": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)",
        "response": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n-1);\n  }\n}",
        "output": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n-1);\n  }\n}"
    },
    {
        "instruction": "Given an array of temperatures in Fahrenheit, write a Ruby function to convert each temperature to Celsius and return the array with the converted values.",
        "input": "",
        "response": "def convert_to_celsius(temps_in_fahrenheit)\n  temps_in_celsius = temps_in_fahrenheit.map do |temp|\n    (temp - 32) * 5 / 9.0\n  end\n  return temps_in_celsius\nend",
        "output": "def convert_to_celsius(temps_in_fahrenheit)\n  temps_in_celsius = temps_in_fahrenheit.map do |temp|\n    (temp - 32) * 5 / 9.0\n  end\n  return temps_in_celsius\nend"
    },
    {
        "instruction": "Create a Java method which calculates the length of a hypotenuse in a right triangle given the lengths of the other two sides.",
        "input": "3, 4",
        "response": "public static double calculateHypotenuse(double sideA, double sideB) {\n    return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));\n}\n\npublic static void main(String[] args) {\n    double hypotenuse = calculateHypotenuse(3, 4);\n    System.out.println(hypotenuse);\n}",
        "output": "public static double calculateHypotenuse(double sideA, double sideB) {\n    return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));\n}\n\npublic static void main(String[] args) {\n    double hypotenuse = calculateHypotenuse(3, 4);\n    System.out.println(hypotenuse);\n}"
    },
    {
        "instruction": "How would you implement a function in C++ that takes a string as input and returns the string reversed?",
        "input": "Hello, world!",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverseString(const std::string& input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;\n}\n\nint main() {\n    std::string input = \"Hello, world!\";\n    std::string output = reverseString(input);\n    std::cout << output << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string reverseString(const std::string& input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;\n}\n\nint main() {\n    std::string input = \"Hello, world!\";\n    std::string output = reverseString(input);\n    std::cout << output << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript function that accepts an array of strings and returns an array containing the length of each string.",
        "input": "[\"apple\", \"banana\", \"cherry\"]",
        "response": "function getStringLengths(arr) {\n    const lengths = arr.map(str => str.length);\n    return lengths;\n}\n\nconst input = [\"apple\", \"banana\", \"cherry\"];\nconst output = getStringLengths(input);\nconsole.log(output);",
        "output": "function getStringLengths(arr) {\n    const lengths = arr.map(str => str.length);\n    return lengths;\n}\n\nconst input = [\"apple\", \"banana\", \"cherry\"];\nconst output = getStringLengths(input);\nconsole.log(output);"
    },
    {
        "instruction": "Can you provide a Python function to calculate the nth Fibonacci number using recursion?",
        "input": "6",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 6\nresult = fibonacci(n)\nprint(result)",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 6\nresult = fibonacci(n)\nprint(result)"
    },
    {
        "instruction": "Implement a Java method to calculate the factorial of a given number using recursion.",
        "input": "5",
        "response": "public int factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint number = 5;\nSystem.out.println(\"Factorial of \" + number + \" is: \" + factorial(number));",
        "output": "public int factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint number = 5;\nSystem.out.println(\"Factorial of \" + number + \" is: \" + factorial(number));"
    },
    {
        "instruction": "Translate the following C# code snippet to a JavaScript equivalent. It calculates the product of an array of numbers.",
        "input": "int[] numbers = {3, 4, 5};\nint product = 1;\nfor(int i = 0; i < numbers.Length; i++) { product *= numbers[i]; }\nConsole.WriteLine(\"Product: \" + product);",
        "response": "let numbers = [3, 4, 5];\nlet product = 1;\nfor (let i = 0; i < numbers.length; i++) { product *= numbers[i]; }\nconsole.log('Product: ' + product);",
        "output": "let numbers = [3, 4, 5];\nlet product = 1;\nfor (let i = 0; i < numbers.length; i++) { product *= numbers[i]; }\nconsole.log('Product: ' + product);"
    },
    {
        "instruction": "Write a simple Bash script that takes two arguments (integers) and returns their sum.",
        "input": "6 7",
        "response": "#!/bin/bash\n\narg1=$1\narg2=$2\n\nsum=$((arg1 + arg2))\necho $sum\n\n# Execution: ./script.sh 6 7",
        "output": "#!/bin/bash\n\narg1=$1\narg2=$2\n\nsum=$((arg1 + arg2))\necho $sum\n\n# Execution: ./script.sh 6 7"
    },
    {
        "instruction": "Create a C++ function that calculates the length of a string without using the built-in strlen() function.",
        "input": "",
        "response": "size_t custom_strlen(const char *str) {\n    size_t length = 0;\n\n    while (str[length] != '\\0') {\n        ++length;\n    }\n\n    return length;\n}",
        "output": "size_t custom_strlen(const char *str) {\n    size_t length = 0;\n\n    while (str[length] != '\\0') {\n        ++length;\n    }\n\n    return length;\n}"
    },
    {
        "instruction": "How would you convert an integer to a string in JavaScript?",
        "input": "",
        "response": "To convert an integer to a string in JavaScript, you can use the toString() method.\n\nExample:\n\nlet num = 42;\nlet numStr = num.toString();\n\nconsole.log(numStr);",
        "output": "To convert an integer to a string in JavaScript, you can use the toString() method.\n\nExample:\n\nlet num = 42;\nlet numStr = num.toString();\n\nconsole.log(numStr);"
    },
    {
        "instruction": "Debug this Python code snippet which is supposed to read a file line by line.",
        "input": "with open('file.txt') as f:\n    for line in f.readlines():\n        print(line)",
        "response": "The current code reads all lines into memory before iterating through them. To read the file line by line, use the following code:\n\nwith open('file.txt') as f:\n    for line in f:\n        print(line.rstrip())\n\nThis will read each line one by one, and the .rstrip() removes trailing newline characters.",
        "output": "The current code reads all lines into memory before iterating through them. To read the file line by line, use the following code:\n\nwith open('file.txt') as f:\n    for line in f:\n        print(line.rstrip())\n\nThis will read each line one by one, and the .rstrip() removes trailing newline characters."
    },
    {
        "instruction": "Given a Java code snippet, implement a method that takes an integer array and returns the maximum positive difference between adjacent elements.",
        "input": "",
        "response": "public int maxPositiveDifference(int[] arr) {\n    if (arr == null || arr.length < 2) {\n        return 0;\n    }\n\n    int maxDiff = 0;\n    for (int i = 1; i < arr.length; i++) {\n        int diff = arr[i] - arr[i - 1];\n        if (diff > maxDiff) {\n            maxDiff = diff;\n        }\n    }\n\n    return maxDiff;\n}",
        "output": "public int maxPositiveDifference(int[] arr) {\n    if (arr == null || arr.length < 2) {\n        return 0;\n    }\n\n    int maxDiff = 0;\n    for (int i = 1; i < arr.length; i++) {\n        int diff = arr[i] - arr[i - 1];\n        if (diff > maxDiff) {\n            maxDiff = diff;\n        }\n    }\n\n    return maxDiff;\n}"
    },
    {
        "instruction": "Implement a Python function to find the first non-repeated character in a given string.",
        "input": "programming",
        "response": "def first_non_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n\nresult = first_non_repeated_char('programming')\nprint(result)",
        "output": "def first_non_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n\nresult = first_non_repeated_char('programming')\nprint(result)"
    },
    {
        "instruction": "How would you write a Java method to reverse each word in a sentence?",
        "input": "Hello world!",
        "response": "public class ReverseWords {\n    public static void main(String[] args) {\n        String sentence = \"Hello world!\";\n        System.out.println(reverseWords(sentence));\n    }\n\n    public static String reverseWords(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String word : words) {\n            stringBuilder.append(new StringBuilder(word).reverse().toString());\n            stringBuilder.append(\" \");\n        }\n        return stringBuilder.toString().trim();\n    }\n}",
        "output": "public class ReverseWords {\n    public static void main(String[] args) {\n        String sentence = \"Hello world!\";\n        System.out.println(reverseWords(sentence));\n    }\n\n    public static String reverseWords(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String word : words) {\n            stringBuilder.append(new StringBuilder(word).reverse().toString());\n            stringBuilder.append(\" \");\n        }\n        return stringBuilder.toString().trim();\n    }\n}"
    },
    {
        "instruction": "Create a shell script that reads a file's content and prints the number of lines containing the word 'error'.",
        "input": "log.txt",
        "response": "#!/bin/bash\n\nfile=$1\nerror_count=0\n\nwhile read line; do\n    if [[ $line == *'error'* ]]; then\n        error_count=$((error_count + 1))\n    fi\ndone < $file\n\necho $error_count",
        "output": "#!/bin/bash\n\nfile=$1\nerror_count=0\n\nwhile read line; do\n    if [[ $line == *'error'* ]]; then\n        error_count=$((error_count + 1))\n    fi\ndone < $file\n\necho $error_count"
    },
    {
        "instruction": "Translate the following Python code into equivalent JavaScript code: \"def square(x): return x * x\"",
        "input": "",
        "response": "function square(x) {\n    return x * x;\n}",
        "output": "function square(x) {\n    return x * x;\n}"
    },
    {
        "instruction": "Write a Python function to determine if a given string is a palindrome.",
        "input": "madam",
        "response": "def is_palindrome(s):\n    return s == s[::-1]\n\ninput_str = 'madam'\nresult = is_palindrome(input_str)\nprint(result)",
        "output": "def is_palindrome(s):\n    return s == s[::-1]\n\ninput_str = 'madam'\nresult = is_palindrome(input_str)\nprint(result)"
    },
    {
        "instruction": "How would you retrieve the first 5 elements from an array in JavaScript?",
        "input": "[10, 20, 30, 40, 50, 60, 70]",
        "response": "const arr = [10, 20, 30, 40, 50, 60, 70];\nconst firstFiveElements = arr.slice(0, 5);\nconsole.log(firstFiveElements);",
        "output": "const arr = [10, 20, 30, 40, 50, 60, 70];\nconst firstFiveElements = arr.slice(0, 5);\nconsole.log(firstFiveElements);"
    },
    {
        "instruction": "Create a Java class to represent a 2D point, with fields to store the x and y coordinates and methods to calculate the distance between two points.",
        "input": "Point1: (3, 4), Point2: (6, 8)",
        "response": "public class Point2D {\n\n    private double x, y;\n\n    public Point2D(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public double distance(Point2D other) {\n        double dx = this.x - other.x;\n        double dy = this.y - other.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    // Test the class\n    public static void main(String[] args) {\n        Point2D point1 = new Point2D(3, 4);\n        Point2D point2 = new Point2D(6, 8);\n\n        double distance = point1.distance(point2);\n        System.out.println(distance);\n    }\n}",
        "output": "public class Point2D {\n\n    private double x, y;\n\n    public Point2D(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public double distance(Point2D other) {\n        double dx = this.x - other.x;\n        double dy = this.y - other.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    // Test the class\n    public static void main(String[] args) {\n        Point2D point1 = new Point2D(3, 4);\n        Point2D point2 = new Point2D(6, 8);\n\n        double distance = point1.distance(point2);\n        System.out.println(distance);\n    }\n}"
    },
    {
        "instruction": "Create a shell script that counts the number of lines containing a specific string in a file.",
        "input": "String: 'apple', File: 'fruits.txt'",
        "response": "#!/bin/bash\n\nsearch_string='apple'\nfile_name='fruits.txt'\n\nline_count=$(grep -c \"$search_string\" \"$file_name\")\necho \"Number of lines containing '$search_string': $line_count\"",
        "output": "#!/bin/bash\n\nsearch_string='apple'\nfile_name='fruits.txt'\n\nline_count=$(grep -c \"$search_string\" \"$file_name\")\necho \"Number of lines containing '$search_string': $line_count\""
    },
    {
        "instruction": "Create a JavaScript function that calculates the sum of squares of a given list of numbers.",
        "input": "[2, 3, 4]",
        "response": "function sumOfSquares(arr) {\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n\nlet numbers = [2, 3, 4];\nconsole.log(sumOfSquares(numbers));",
        "output": "function sumOfSquares(arr) {\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return sum;\n}\n\nlet numbers = [2, 3, 4];\nconsole.log(sumOfSquares(numbers));"
    },
    {
        "instruction": "Can you write a Python function to find the factorial of a given number using recursion?",
        "input": "5",
        "response": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nnumber = 5\nprint(factorial(number))",
        "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nnumber = 5\nprint(factorial(number))"
    },
    {
        "instruction": "Write a C++ program that reads a line from a text file and reverses the words in the line, then prints the result.",
        "input": "filename: example.txt\nContent: 'This is a test sentence.'",
        "response": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n  std::string filename = \"example.txt\";\n  std::ifstream inFile(filename);\n\n  if (inFile.is_open()) {\n    std::string line;\n    getline(inFile, line);\n    inFile.close();\n\n    std::stringstream ss(line);\n    std::string word;\n    std::vector<std::string> words;\n\n    while (ss >> word) {\n      words.push_back(word);\n    }\n\n    std::reverse(words.begin(), words.end());\n\n    for (const auto &word : words) {\n      std::cout << word << ' ';\n    }\n    std::cout << std::endl;\n  } else {\n    std::cout << \"Unable to open file\" << std::endl;\n  }\n  return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n  std::string filename = \"example.txt\";\n  std::ifstream inFile(filename);\n\n  if (inFile.is_open()) {\n    std::string line;\n    getline(inFile, line);\n    inFile.close();\n\n    std::stringstream ss(line);\n    std::string word;\n    std::vector<std::string> words;\n\n    while (ss >> word) {\n      words.push_back(word);\n    }\n\n    std::reverse(words.begin(), words.end());\n\n    for (const auto &word : words) {\n      std::cout << word << ' ';\n    }\n    std::cout << std::endl;\n  } else {\n    std::cout << \"Unable to open file\" << std::endl;\n  }\n  return 0;\n}"
    },
    {
        "instruction": "Implement a shell script that takes a directory path and lists all files and directories that end with a given file extension.",
        "input": "directory_path: /example/path\nfile_extension: .txt",
        "response": "#!/bin/bash\n\ndirectory_path=\"/example/path\"\nfile_extension=\".txt\"\n\nfind \"$directory_path\" -type f -iname \"*$file_extension\"\n",
        "output": "#!/bin/bash\n\ndirectory_path=\"/example/path\"\nfile_extension=\".txt\"\n\nfind \"$directory_path\" -type f -iname \"*$file_extension\"\n"
    },
    {
        "instruction": "Explain the code provided by pointing out the purpose of each line in the given JavaScript code snippet.",
        "input": "function add(a, b) {\n    const sum = a + b;\n    return sum;\n}\nconsole.log(add(3, 5));",
        "response": "1. Create a function called 'add' that takes two arguments (a, b).\n2. Inside the function, declare a constant variable 'sum' and assign it the value of 'a' plus 'b'.\n3. Return the value of 'sum'.\n4. Call the 'add' function with the arguments '3' and '5', and log the result to the console.",
        "output": "1. Create a function called 'add' that takes two arguments (a, b).\n2. Inside the function, declare a constant variable 'sum' and assign it the value of 'a' plus 'b'.\n3. Return the value of 'sum'.\n4. Call the 'add' function with the arguments '3' and '5', and log the result to the console."
    },
    {
        "instruction": "Translate the provided Python code snippet to the C programming language.",
        "input": "def multiply(x, y):\n    return x * y\n\nresult = multiply(6, 4)\nprint(result)",
        "response": "#include <stdio.h>\n\nint multiply(int x, int y) {\n    return x * y;\n}\n\nint main() {\n    int result = multiply(6, 4);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint multiply(int x, int y) {\n    return x * y;\n}\n\nint main() {\n    int result = multiply(6, 4);\n    printf(\"%d\\n\", result);\n    return 0;\n}"
    },
    {
        "instruction": "Provide an example of how to use a specified REST API endpoint to fetch data in JavaScript.",
        "input": "API Endpoint: https://api.example.com/v1/users/{id}\nHTTP Method: GET",
        "response": "const fetchUser = async (id) => {\n    try {\n        const response = await fetch(`https://api.example.com/v1/users/${id}`, {\n            method: 'GET',\n        });\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching user data:', error);\n    }\n}\n\nfetchUser('12345');",
        "output": "const fetchUser = async (id) => {\n    try {\n        const response = await fetch(`https://api.example.com/v1/users/${id}`, {\n            method: 'GET',\n        });\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching user data:', error);\n    }\n}\n\nfetchUser('12345');"
    },
    {
        "instruction": "Debug the given C++ code to find out why it is not producing the expected output.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 5;\n    int y = x + @1;\n    cout << \"x + 1 = \" << y << endl;\n    return 0;\n}\n\nExpected Output: x + 1 = 6",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 5;\n    // Replace '@' with '+' to fix the syntax error\n    int y = x + 1;\n    cout << \"x + 1 = \" << y << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 5;\n    // Replace '@' with '+' to fix the syntax error\n    int y = x + 1;\n    cout << \"x + 1 = \" << y << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Translate the following Python code into Java, which computes the factorial of an integer entered by the user.",
        "input": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)\n\nuser_input = int(input('Enter a number: '))\nprint(factorial(user_input))",
        "response": "import java.util.Scanner;\n\npublic class Factorial {\n\n    public static int factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print('Enter a number: ');\n        int user_input = scanner.nextInt();\n        System.out.println(factorial(user_input));\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class Factorial {\n\n    public static int factorial(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print('Enter a number: ');\n        int user_input = scanner.nextInt();\n        System.out.println(factorial(user_input));\n    }\n}"
    },
    {
        "instruction": "Fix the compilation error in this C++ program by declaring the function prototype.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num = 5;\n    cout << \"The factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;\n}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "response": "#include <iostream>\nusing namespace std;\n\n// Declare the function prototype\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    cout << \"The factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;\n}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "#include <iostream>\nusing namespace std;\n\n// Declare the function prototype\nint factorial(int n);\n\nint main() {\n    int num = 5;\n    cout << \"The factorial of \" << num << \" is: \" << factorial(num) << endl;\n    return 0;\n}\n\nint factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Write a shell script to count the number of lines, words, and characters in a given file.",
        "input": "file_name=\"sample.txt\"",
        "response": "#!/bin/bash\n\nfile_name=\"sample.txt\"\n\n# Count lines\nlines=$(wc -l < \"$file_name\")\n\n# Count words\nwords=$(wc -w < \"$file_name\")\n\n# Count characters\ncharacters=$(wc -c < \"$file_name\")\n\n# Print results\necho \"Lines: $lines\"\necho \"Words: $words\"\necho \"Characters: $characters\"",
        "output": "#!/bin/bash\n\nfile_name=\"sample.txt\"\n\n# Count lines\nlines=$(wc -l < \"$file_name\")\n\n# Count words\nwords=$(wc -w < \"$file_name\")\n\n# Count characters\ncharacters=$(wc -c < \"$file_name\")\n\n# Print results\necho \"Lines: $lines\"\necho \"Words: $words\"\necho \"Characters: $characters\""
    },
    {
        "instruction": "Write a Python program to extract a domain name from a URL.",
        "input": "URL: https://www.example.com/resources/article12?key=value",
        "response": "import re\n\nurl = 'https://www.example.com/resources/article12?key=value'\n\nmatch = re.search('https?://([A-Za-z_0-9.-]+).*', url)\nif match:\n    domain = match.group(1)\n    print(domain)\nelse:\n    print('Invalid URL.')",
        "output": "import re\n\nurl = 'https://www.example.com/resources/article12?key=value'\n\nmatch = re.search('https?://([A-Za-z_0-9.-]+).*', url)\nif match:\n    domain = match.group(1)\n    print(domain)\nelse:\n    print('Invalid URL.')"
    },
    {
        "instruction": "What's the output of the following Java code snippet?",
        "input": "int[] arr = {1, 2, 3, 4, 5};\nint sum = 0;\n\nfor (int i = 0; i < arr.length; i++) {\n    if (i % 2 == 0) {\n        sum += arr[i];\n    }\n}\n\nSystem.out.println(sum);",
        "response": "The output of the code will be 9. It calculates the sum of elements in the array located at even indices (0, 2, 4).",
        "output": "The output of the code will be 9. It calculates the sum of elements in the array located at even indices (0, 2, 4)."
    },
    {
        "instruction": "Find and fix the error in the C++ code that is meant to display a multiplication table for a given integer n.",
        "input": "#include<iostream>\nusing namespace std;\n\nint main() {\n    int n, i;\n    cout << \"Enter an integer: \";\n    cin >> n;\n\n    for(i = 1; i <= 10; ++i) {\n        cot << n << \" * \" << i << \" = \" << n * i << endl;\n    }\n\n    return 0;\n}",
        "response": "There's a typo in the code. Replace 'cot' with 'cout'. Here's the corrected code:\n\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int n, i;\n    cout << \"Enter an integer: \";\n    cin >> n;\n\n    for(i = 1; i <= 10; ++i) {\n        cout << n << \" * \" << i << \" = \" << n * i << endl;\n    }\n\n    return 0;\n}",
        "output": "There's a typo in the code. Replace 'cot' with 'cout'. Here's the corrected code:\n\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int n, i;\n    cout << \"Enter an integer: \";\n    cin >> n;\n\n    for(i = 1; i <= 10; ++i) {\n        cout << n << \" * \" << i << \" = \" << n * i << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a shell script that takes a directory path as argument and outputs the total number of files and folders inside that directory.",
        "input": "Directory path: /home/user/documents",
        "response": "#!/bin/bash\n\ndirPath='path_to_directory'\n\nif [ ! -d \"$dirPath\" ]; then\n  echo \"Directory does not exist\"\n  exit 1\nfi\n\ntotalFiles=$(find \"$dirPath\" -type f | wc -l)\ntotalDirs=$(find \"$dirPath\" -type d | wc -l)\n\necho \"Total files in directory: $totalFiles\"\necho \"Total folders in directory: $totalDirs\"",
        "output": "#!/bin/bash\n\ndirPath='path_to_directory'\n\nif [ ! -d \"$dirPath\" ]; then\n  echo \"Directory does not exist\"\n  exit 1\nfi\n\ntotalFiles=$(find \"$dirPath\" -type f | wc -l)\ntotalDirs=$(find \"$dirPath\" -type d | wc -l)\n\necho \"Total files in directory: $totalFiles\"\necho \"Total folders in directory: $totalDirs\""
    },
    {
        "instruction": "Create a JavaScript function that calculates the sum of all the numbers in an array.",
        "input": "var numbers = [1, 2, 3, 4, 5];",
        "response": "function sumArray(arr) {\n var sum = 0;\n for (var i = 0; i < arr.length; i++) {\n sum += arr[i];\n }\n return sum;\n}\n\nconsole.log(sumArray(numbers));",
        "output": "function sumArray(arr) {\n var sum = 0;\n for (var i = 0; i < arr.length; i++) {\n sum += arr[i];\n }\n return sum;\n}\n\nconsole.log(sumArray(numbers));"
    },
    {
        "instruction": "What is a Python code snippet that generates a list of the first 10 Fibonacci numbers?",
        "input": "",
        "response": "def generate_fibonacci(n):\n fibonacci_sequence = [0, 1]\n for _ in range(2, n):\n fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\n return fibonacci_sequence\n\nfirst_10_fibonacci = generate_fibonacci(10)\nprint(first_10_fibonacci)",
        "output": "def generate_fibonacci(n):\n fibonacci_sequence = [0, 1]\n for _ in range(2, n):\n fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\n return fibonacci_sequence\n\nfirst_10_fibonacci = generate_fibonacci(10)\nprint(first_10_fibonacci)"
    },
    {
        "instruction": "Implement a Java method that converts a given temperature in Fahrenheit to Celsius.",
        "input": "double fahrenheit = 100.0;",
        "response": "public class TemperatureConversion {\n public static void main(String[] args) {\n double fahrenheit = 100.0;\n double celsius = fahrenheitToCelsius(fahrenheit);\n System.out.println(celsius);\n }\n\n public static double fahrenheitToCelsius(double fahrenheit) {\n return (fahrenheit - 32) * 5.0 / 9.0;\n }\n}",
        "output": "public class TemperatureConversion {\n public static void main(String[] args) {\n double fahrenheit = 100.0;\n double celsius = fahrenheitToCelsius(fahrenheit);\n System.out.println(celsius);\n }\n\n public static double fahrenheitToCelsius(double fahrenheit) {\n return (fahrenheit - 32) * 5.0 / 9.0;\n }\n}"
    },
    {
        "instruction": "Write a shell script that checks if a file exists and prints a message accordingly.",
        "input": "filename='test.txt'",
        "response": "#!/bin/sh\n\nfilename='test.txt'\n\nif [ -e \"$filename\" ]; then\n echo \"File $filename exists.\"\nelse\n echo \"File $filename does not exist.\"\nfi",
        "output": "#!/bin/sh\n\nfilename='test.txt'\n\nif [ -e \"$filename\" ]; then\n echo \"File $filename exists.\"\nelse\n echo \"File $filename does not exist.\"\nfi"
    },
    {
        "instruction": "Write a C++ function that calculates the sum of all even numbers up to a given integer.",
        "input": "",
        "response": "int sum_of_evens(int n) {\n  int sum = 0;\n  for (int i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum;\n}",
        "output": "int sum_of_evens(int n) {\n  int sum = 0;\n  for (int i = 2; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum;\n}"
    },
    {
        "instruction": "How would you create a Java method that searches for the first occurrence of a given character in a given string and returns its index?",
        "input": "",
        "response": "public int findChar(String str, char ch) {\n  for (int i = 0; i < str.length(); i++) {\n    if (str.charAt(i) == ch) {\n      return i;\n    }\n  }\n  return -1;\n}",
        "output": "public int findChar(String str, char ch) {\n  for (int i = 0; i < str.length(); i++) {\n    if (str.charAt(i) == ch) {\n      return i;\n    }\n  }\n  return -1;\n}"
    },
    {
        "instruction": "Create a Python function that takes a list of strings as input and returns a list of the unique strings in the input list, maintaining their original order.",
        "input": "",
        "response": "def unique_strings(strings):\n  unique_list = []\n  for s in strings:\n    if s not in unique_list:\n      unique_list.append(s)\n  return unique_list",
        "output": "def unique_strings(strings):\n  unique_list = []\n  for s in strings:\n    if s not in unique_list:\n      unique_list.append(s)\n  return unique_list"
    },
    {
        "instruction": "Generate a JavaScript code snippet that demonstrates the use of a map function to square each element of an array of numbers.",
        "input": "",
        "response": "let numbers = [1, 2, 3, 4, 5];\nlet squaredNumbers = numbers.map(number => number * number);\nconsole.log(squaredNumbers);",
        "output": "let numbers = [1, 2, 3, 4, 5];\nlet squaredNumbers = numbers.map(number => number * number);\nconsole.log(squaredNumbers);"
    },
    {
        "instruction": "Write a JavaScript function that calculates the sum of all elements in an array of numbers.",
        "input": "",
        "response": "function sumArray(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}",
        "output": "function sumArray(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}"
    },
    {
        "instruction": "Translate the following Python code into its equivalent C++ code: def add(a, b): return a + b",
        "input": "",
        "response": "#include <iostream>\n\nint add(int a, int b) {\n  return a + b;\n}\n\nint main() {\n  std::cout << add(3, 4) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint add(int a, int b) {\n  return a + b;\n}\n\nint main() {\n  std::cout << add(3, 4) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Can you provide a Java method that takes two integer arrays, `array1` and `array2`, as input and returns a new integer array containing the concatenated values?",
        "input": "",
        "response": "public int[] concatenateArrays(int[] array1, int[] array2) {\n  int[] result = new int[array1.length + array2.length];\n  System.arraycopy(array1, 0, result, 0, array1.length);\n  System.arraycopy(array2, 0, result, array1.length, array2.length);\n  return result;\n}",
        "output": "public int[] concatenateArrays(int[] array1, int[] array2) {\n  int[] result = new int[array1.length + array2.length];\n  System.arraycopy(array1, 0, result, 0, array1.length);\n  System.arraycopy(array2, 0, result, array1.length, array2.length);\n  return result;\n}"
    },
    {
        "instruction": "Create a shell script that takes a file path as an argument and prints the total number of lines, words, and characters in the file.",
        "input": "",
        "response": "#!/bin/bash\n\nfile_path=$1\n\nif [ -e $file_path ]; then\n  lines=$(cat $file_path | wc -l)\n  words=$(cat $file_path | wc -w)\n  characters=$(cat $file_path | wc -c)\n\n  echo \"Lines: $lines\"\n  echo \"Words: $words\"\n  echo \"Characters: $characters\"\nelse\n  echo \"File not found.\"\nfi",
        "output": "#!/bin/bash\n\nfile_path=$1\n\nif [ -e $file_path ]; then\n  lines=$(cat $file_path | wc -l)\n  words=$(cat $file_path | wc -w)\n  characters=$(cat $file_path | wc -c)\n\n  echo \"Lines: $lines\"\n  echo \"Words: $words\"\n  echo \"Characters: $characters\"\nelse\n  echo \"File not found.\"\nfi"
    },
    {
        "instruction": "Write a Java method that takes an ArrayList of integers and returns the sum of all even numbers in the list.",
        "input": "List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));",
        "response": "public int sumEvenNumbers(ArrayList<Integer> numbers) {\n    int sum = 0;\n    for (Integer number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(ArrayList<Integer> numbers) {\n    int sum = 0;\n    for (Integer number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Given this Python code, identify any syntax errors and correct them.",
        "input": "def add_numbers(a, b):\n    c = a +++ b\n    return c\n\nresult = add_numbers(5, '10')",
        "response": "def add_numbers(a, b):\n    c = a + b\n    return c\n\nresult = add_numbers(5, 10)",
        "output": "def add_numbers(a, b):\n    c = a + b\n    return c\n\nresult = add_numbers(5, 10)"
    },
    {
        "instruction": "What would be the output of the following JavaScript code?",
        "input": "function findMin(array) {\n  let min = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n}\n\nconsole.log(findMin([3, 1, 5, 7, 2]));",
        "response": "The output of the code would be '1' as it's the minimum value in the given array.",
        "output": "The output of the code would be '1' as it's the minimum value in the given array."
    },
    {
        "instruction": "Translate the following Python code into C# code that produces the same output.",
        "input": "def reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string('Hello'))",
        "response": "using System;\n\nnamespace ConsoleApp {\n    class Program {\n        static void Main(string[] args) {\n            Console.WriteLine(ReverseString(\"Hello\"));\n        }\n\n        static string ReverseString(string s) {\n            char[] charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n    }\n}",
        "output": "using System;\n\nnamespace ConsoleApp {\n    class Program {\n        static void Main(string[] args) {\n            Console.WriteLine(ReverseString(\"Hello\"));\n        }\n\n        static string ReverseString(string s) {\n            char[] charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n    }\n}"
    },
    {
        "instruction": "Detect whether the given JavaScript code has any syntax errors.",
        "input": "function addNumbers(a, b) {\n    return a + b;\n}\n\nconsole.log(addNumbers(10, 20);",
        "response": "There is a syntax error in the JavaScript code. It's missing a closing parenthesis on the console.log statement. The corrected code should be:\n\nfunction addNumbers(a, b) {\n    return a + b;\n}\n\nconsole.log(addNumbers(10, 20));",
        "output": "There is a syntax error in the JavaScript code. It's missing a closing parenthesis on the console.log statement. The corrected code should be:\n\nfunction addNumbers(a, b) {\n    return a + b;\n}\n\nconsole.log(addNumbers(10, 20));"
    },
    {
        "instruction": "Translate the following Python code into an equivalent C++ code.",
        "input": "def multiply(x, y):\n    return x * y\n\nresult = multiply(6, 4)\nprint(result)",
        "response": "#include <iostream>\n\nint multiply(int x, int y) {\n    return x * y;\n}\n\nint main() {\n    int result = multiply(6, 4);\n    std::cout << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint multiply(int x, int y) {\n    return x * y;\n}\n\nint main() {\n    int result = multiply(6, 4);\n    std::cout << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function to find the highest and lowest values in a list of numbers.",
        "input": "[42, 12, 95, 63, 27]",
        "response": "def find_highest_lowest(numbers):\n    highest = max(numbers)\n    lowest = min(numbers)\n    return highest, lowest\n\n\nnumbers = [42, 12, 95, 63, 27]\nhighest, lowest = find_highest_lowest(numbers)\nprint(f'Highest: {highest}, Lowest: {lowest}')",
        "output": "def find_highest_lowest(numbers):\n    highest = max(numbers)\n    lowest = min(numbers)\n    return highest, lowest\n\n\nnumbers = [42, 12, 95, 63, 27]\nhighest, lowest = find_highest_lowest(numbers)\nprint(f'Highest: {highest}, Lowest: {lowest}')"
    },
    {
        "instruction": "Create a Python function to calculate the distance between two points given their coordinates (x1, y1) and (x2, y2).",
        "input": "x1 = 1, y1 = 2, x2 = 4, y2 = 6",
        "response": "def distance(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\nresult = distance(1, 2, 4, 6)\nprint(result)",
        "output": "def distance(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\nresult = distance(1, 2, 4, 6)\nprint(result)"
    },
    {
        "instruction": "In JavaScript, create a function that receives a string and returns a new one with the first letter of each word capitalized.",
        "input": "example: 'hello world'",
        "response": "function capitalizeWords(str) {\n    return str.replace(/\\b\\w/g, (match) => match.toUpperCase());\n}\n\nlet example = 'hello world';\nlet capitalized = capitalizeWords(example);\nconsole.log(capitalized);",
        "output": "function capitalizeWords(str) {\n    return str.replace(/\\b\\w/g, (match) => match.toUpperCase());\n}\n\nlet example = 'hello world';\nlet capitalized = capitalizeWords(example);\nconsole.log(capitalized);"
    },
    {
        "instruction": "Explain the purpose of the Java code snippet `Thread.sleep(2000);`.",
        "input": "",
        "response": "In Java, `Thread.sleep(2000);` is used to pause the execution of the current thread for a specified amount of time. In this case, the pause is for 2000 milliseconds (2 seconds). It's commonly used when you want to create a delay or throttle the execution of a program for a particular duration.",
        "output": "In Java, `Thread.sleep(2000);` is used to pause the execution of the current thread for a specified amount of time. In this case, the pause is for 2000 milliseconds (2 seconds). It's commonly used when you want to create a delay or throttle the execution of a program for a particular duration."
    },
    {
        "instruction": "Write a C# method that takes a number as input and returns true if the number is a palindrome and false otherwise.",
        "input": "number = 121",
        "response": "public static bool IsNumberPalindrome(int number)\n{\n    int originalNumber = number;\n    int reverse = 0;\n\n    while (number > 0)\n    {\n        int remainder = number % 10;\n        reverse = (reverse * 10) + remainder;\n        number = number / 10;\n    }\n\n    return originalNumber == reverse;\n}\n\nint number = 121;\nbool isPalindrome = IsNumberPalindrome(number);\nConsole.WriteLine(isPalindrome);",
        "output": "public static bool IsNumberPalindrome(int number)\n{\n    int originalNumber = number;\n    int reverse = 0;\n\n    while (number > 0)\n    {\n        int remainder = number % 10;\n        reverse = (reverse * 10) + remainder;\n        number = number / 10;\n    }\n\n    return originalNumber == reverse;\n}\n\nint number = 121;\nbool isPalindrome = IsNumberPalindrome(number);\nConsole.WriteLine(isPalindrome);"
    },
    {
        "instruction": "Write a C++ function that takes an integer array and its size as arguments, and returns the sum of all even elements in the array.",
        "input": "",
        "response": "#include <iostream>\n\nint sum_even_elements(const int* arr, int size) {\n  int sum = 0;\n  for (int i = 0; i < size; i++) {\n    if (arr[i] % 2 == 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
        "output": "#include <iostream>\n\nint sum_even_elements(const int* arr, int size) {\n  int sum = 0;\n  for (int i = 0; i < size; i++) {\n    if (arr[i] % 2 == 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"
    },
    {
        "instruction": "Can you help me debug the following Python code? It should reverse a given string.",
        "input": "def reverse_string(string):\n    reversed_str = ''\n    for char in string:\n        reversed_str = char + reversed_str\n    return reversed_string\n\nprint(reverse_string('Hello'))",
        "response": "def reverse_string(string):\n    reversed_str = ''\n    for char in string:\n        reversed_str = char + reversed_str\n    return reversed_str\n\nprint(reverse_string('Hello'))",
        "output": "def reverse_string(string):\n    reversed_str = ''\n    for char in string:\n        reversed_str = char + reversed_str\n    return reversed_str\n\nprint(reverse_string('Hello'))"
    },
    {
        "instruction": "Create a Java method to calculate the area of a triangle using its base and height as input parameters.",
        "input": "",
        "response": "public class TriangleArea {\n    public static double calculateArea(double base, double height) {\n        return 0.5 * base * height;\n    }\n\n    public static void main(String[] args) {\n        double base = 10;\n        double height = 5;\n        double area = calculateArea(base, height);\n        System.out.println(\"Area of the triangle: \" + area);\n    }\n}",
        "output": "public class TriangleArea {\n    public static double calculateArea(double base, double height) {\n        return 0.5 * base * height;\n    }\n\n    public static void main(String[] args) {\n        double base = 10;\n        double height = 5;\n        double area = calculateArea(base, height);\n        System.out.println(\"Area of the triangle: \" + area);\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code to JavaScript. The code should compute and return the factorial of a given number.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}"
    },
    {
        "instruction": "Create a function in JavaScript that takes a string input and returns the number of vowels in the string.",
        "input": "",
        "response": "function countVowels(str) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let char of str.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n  return count;\n}",
        "output": "function countVowels(str) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let char of str.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n  return count;\n}"
    },
    {
        "instruction": "What would be the output of the following Python code snippet?\n\nnums = [1, 2, 3, 4, 5]\nnums = nums[::-1]\nprint(nums)",
        "input": "",
        "response": "[5, 4, 3, 2, 1]",
        "output": "[5, 4, 3, 2, 1]"
    },
    {
        "instruction": "Implement a Java method that takes an integer array, and returns the sum of all its elements.",
        "input": "",
        "response": "public int sumArrayElements(int[] arr) {\n  int sum = 0;\n  for (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}",
        "output": "public int sumArrayElements(int[] arr) {\n  int sum = 0;\n  for (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}"
    },
    {
        "instruction": "Translate the following Python code to C#\n\nimport random\n\nrandom_number = random.randint(1, 100)\nprint(random_number)",
        "input": "",
        "response": "using System;\n\nnamespace RandomNumberExample {\n  class Program {\n    static void Main(string[] args) {\n      Random random = new Random();\n      int randomNumber = random.Next(1, 101);\n      Console.WriteLine(randomNumber);\n    }\n  }\n}",
        "output": "using System;\n\nnamespace RandomNumberExample {\n  class Program {\n    static void Main(string[] args) {\n      Random random = new Random();\n      int randomNumber = random.Next(1, 101);\n      Console.WriteLine(randomNumber);\n    }\n  }\n}"
    },
    {
        "instruction": "Create a C++ function that calculates the length of a given string without using any built-in functions.",
        "input": "",
        "response": "int stringLength(const char* str) {\n int length = 0;\n while(str[length] != '\\0') {\n length++;\n }\n return length;\n}",
        "output": "int stringLength(const char* str) {\n int length = 0;\n while(str[length] != '\\0') {\n length++;\n }\n return length;\n}"
    },
    {
        "instruction": "How can you write a JavaScript function to validate an email address with a regular expression?",
        "input": "",
        "response": "function isEmailValid(email) {\n const regex = /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$/;\n return regex.test(email);\n}",
        "output": "function isEmailValid(email) {\n const regex = /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$/;\n return regex.test(email);\n}"
    },
    {
        "instruction": "Write a Python script that reads a given text file line by line and prints the lines that contain a specified substring.",
        "input": "file_path: 'sample.txt', substring: 'example'",
        "response": "def print_lines_with_substring(file_path, substring):\n with open(file_path, 'r') as file:\n for line in file:\n if substring in line:\n print(line)\n\nprint_lines_with_substring('sample.txt', 'example')",
        "output": "def print_lines_with_substring(file_path, substring):\n with open(file_path, 'r') as file:\n for line in file:\n if substring in line:\n print(line)\n\nprint_lines_with_substring('sample.txt', 'example')"
    },
    {
        "instruction": "Write a Java method that takes an array of integers as input and returns the sum of all even numbers in the array.",
        "input": "",
        "response": "public int sumEvenNumbers(int[] numbers) {\n int sum = 0;\n for (int number : numbers) {\n if (number % 2 == 0) {\n sum += number;\n }\n }\n return sum;\n}",
        "output": "public int sumEvenNumbers(int[] numbers) {\n int sum = 0;\n for (int number : numbers) {\n if (number % 2 == 0) {\n sum += number;\n }\n }\n return sum;\n}"
    },
    {
        "instruction": "What would be the output of this JavaScript code?\n\nconst arr1 = [1, 2, 3];\nconst arr2 = arr1;\narr2[0] = 5;\nconsole.log(arr1);",
        "input": "",
        "response": "[5, 2, 3]",
        "output": "[5, 2, 3]"
    },
    {
        "instruction": "Create a C++ program that calculates the average of an array of integers.",
        "input": "integers: [4, 5, 7, 10, 12]",
        "response": "#include <iostream>\n#include <vector>\n\nfloat calculate_average(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (const int &num : numbers) {\n        sum += num;\n    }\n    return static_cast<float>(sum) / numbers.size();\n}\n\nint main() {\n    std::vector<int> integers = {4, 5, 7, 10, 12};\n    float average = calculate_average(integers);\n    std::cout << \"The average of the numbers is: \" << average << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nfloat calculate_average(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (const int &num : numbers) {\n        sum += num;\n    }\n    return static_cast<float>(sum) / numbers.size();\n}\n\nint main() {\n    std::vector<int> integers = {4, 5, 7, 10, 12};\n    float average = calculate_average(integers);\n    std::cout << \"The average of the numbers is: \" << average << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Given a list of strings, create a Python snippet to determine the longest word.",
        "input": "['apple', 'banana', 'strawberry', 'kiwi']",
        "response": "def find_longest_word(words):\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nwords_list = ['apple', 'banana', 'strawberry', 'kiwi']\nlongest = find_longest_word(words_list)\nprint('The longest word in the list is:', longest)",
        "output": "def find_longest_word(words):\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nwords_list = ['apple', 'banana', 'strawberry', 'kiwi']\nlongest = find_longest_word(words_list)\nprint('The longest word in the list is:', longest)"
    },
    {
        "instruction": "Create a Java function that takes two integers and returns the larger of the two.",
        "input": "",
        "response": "public static int max(int a, int b) {\n    return (a > b) ? a : b;\n}",
        "output": "public static int max(int a, int b) {\n    return (a > b) ? a : b;\n}"
    },
    {
        "instruction": "How would you write a JavaScript function that accepts a list of numbers and returns their sum?",
        "input": "",
        "response": "function sum(numbers) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n}",
        "output": "function sum(numbers) {\n    return numbers.reduce((acc, curr) => acc + curr, 0);\n}"
    },
    {
        "instruction": "Given a C++ code snippet, find the syntax errors and correct them.",
        "input": "#include <iostream>\n\nint main() {\n    int x = 10\n    int y = 20;\n\n    if(x > y {\n        cout << \"x is greater\" << end;\n    } else {\n        cout << \"y is greater\" endl;\n    }\n\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    if(x > y) {\n        std::cout << \"x is greater\" << std::endl;\n    } else {\n        std::cout << \"y is greater\" << std::endl;\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    if(x > y) {\n        std::cout << \"x is greater\" << std::endl;\n    } else {\n        std::cout << \"y is greater\" << std::endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script that takes a directory as an argument and lists its files sorted by modification date.",
        "input": "",
        "response": "#!/bin/bash\n\ndir=$1\n\nif [ -d \"$dir\" ]; then\n    ls -lt \"$dir\"\nelse\n    echo \"Invalid directory\"\nfi",
        "output": "#!/bin/bash\n\ndir=$1\n\nif [ -d \"$dir\" ]; then\n    ls -lt \"$dir\"\nelse\n    echo \"Invalid directory\"\nfi"
    },
    {
        "instruction": "Write a Python function that calculates the sum of digits of a given number.",
        "input": "",
        "response": "def sum_of_digits(number):\n    total = 0\n    while number > 0:\n        digit = number % 10\n        total += digit\n        number //= 10\n    return total",
        "output": "def sum_of_digits(number):\n    total = 0\n    while number > 0:\n        digit = number % 10\n        total += digit\n        number //= 10\n    return total"
    },
    {
        "instruction": "What would be the output of this JavaScript code snippet?\n```\nlet nums = [1, 2, 3, 4, 5];\nlet sum = nums.reduce((total, current) => total + current, 0);\nconsole.log(sum);\n```",
        "input": "",
        "response": "The output would be 15, which is the sum of the numbers [1, 2, 3, 4, 5].",
        "output": "The output would be 15, which is the sum of the numbers [1, 2, 3, 4, 5]."
    },
    {
        "instruction": "Explain the following C++ code snippet and identify any issues with the code.\n```\n#include <iostream>\nusing namespace std;\nint main() {\n    int x = 10;\n    int y = 0;\n    if (y != 0) {\n        int z = x / y;\n        cout << z << endl;\n    }\n    return 0;\n}\n```",
        "input": "",
        "response": "This C++ code snippet declares two integer variables x and y, initializes them to 10 and 0 respectively. It then checks if y is not equal to 0, and if true, it calculates the result 'z' of dividing x by y and prints the value of z. The code is designed to avoid a division by zero error. There are no issues with this code.",
        "output": "This C++ code snippet declares two integer variables x and y, initializes them to 10 and 0 respectively. It then checks if y is not equal to 0, and if true, it calculates the result 'z' of dividing x by y and prints the value of z. The code is designed to avoid a division by zero error. There are no issues with this code."
    },
    {
        "instruction": "Translate the following Python code to Java code:\n```\ndef hello_world():\n    print(\"Hello, World!\")\n\nhello_world()\n```",
        "input": "",
        "response": "public class HelloWorld {\n    public static void main(String[] args) {\n        helloWorld();\n    }\n\n    public static void helloWorld() {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        helloWorld();\n    }\n\n    public static void helloWorld() {\n        System.out.println(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Write a Python function that sorts a list of dictionaries based on a specified key.",
        "input": "[{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 35}]",
        "response": "def sort_dicts_by_key(lst, key):\n    return sorted(lst, key=lambda x: x[key])\n\ninput_lst = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 35}]\n\nsorted_list = sort_dicts_by_key(input_lst, 'age')\nprint(sorted_list)",
        "output": "def sort_dicts_by_key(lst, key):\n    return sorted(lst, key=lambda x: x[key])\n\ninput_lst = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 35}]\n\nsorted_list = sort_dicts_by_key(input_lst, 'age')\nprint(sorted_list)"
    },
    {
        "instruction": "Create a JavaScript function that returns the nth Fibonacci number using recursion.",
        "input": "6",
        "response": "function fibonacci(n) {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst n = 6;\n\nconsole.log(`The ${n}th Fibonacci number is:`, fibonacci(n));",
        "output": "function fibonacci(n) {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst n = 6;\n\nconsole.log(`The ${n}th Fibonacci number is:`, fibonacci(n));"
    },
    {
        "instruction": "What would be the simplest way to convert a string of comma-separated words into a list of words in Python?",
        "input": "\"apple,banana,orange\"",
        "response": "input_str = \"apple,banana,orange\"\n\nwords_list = input_str.split(\",\")\n\nprint(words_list)",
        "output": "input_str = \"apple,banana,orange\"\n\nwords_list = input_str.split(\",\")\n\nprint(words_list)"
    },
    {
        "instruction": "Generate a C++ function that reads integers from user input and inserts them into a vector until a negative number is encountered, then prints the vector's elements in reverse order.",
        "input": "12 5 10 -1",
        "response": "#include <iostream>\n#include <vector>\n\nvoid read_integers_and_print_reverse() {\n    std::vector<int> integers;\n    int input;\n\n    while (std::cin >> input && input >= 0) {\n        integers.push_back(input);\n    }\n\n    for (auto it = integers.rbegin(); it != integers.rend(); it++) {\n        std::cout << *it << ' ';\n    }\n    std::cout << '\\n';\n}\n\nint main() {\n    read_integers_and_print_reverse();\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nvoid read_integers_and_print_reverse() {\n    std::vector<int> integers;\n    int input;\n\n    while (std::cin >> input && input >= 0) {\n        integers.push_back(input);\n    }\n\n    for (auto it = integers.rbegin(); it != integers.rend(); it++) {\n        std::cout << *it << ' ';\n    }\n    std::cout << '\\n';\n}\n\nint main() {\n    read_integers_and_print_reverse();\n    return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes a string as input and returns it with the first character of each word capitalized.",
        "input": "the quick brown fox jumps over the lazy dog",
        "response": "function capitalizeWords(str) {\n  return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}",
        "output": "function capitalizeWords(str) {\n  return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}"
    },
    {
        "instruction": "Create a Python function that calculates the Nth Fibonacci number using recursion.",
        "input": "5",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"
    },
    {
        "instruction": "Convert this Python list comprehension to an equivalent Java code block: [x**2 for x in range(1, 11) if x % 2 == 0]",
        "input": "",
        "response": "import java.util.ArrayList;\n\nArrayList<Integer> squares = new ArrayList<Integer>();\n\nfor (int x = 1; x <= 10; x++) {\n    if (x % 2 == 0) {\n        squares.add((int) Math.pow(x, 2));\n    }\n}",
        "output": "import java.util.ArrayList;\n\nArrayList<Integer> squares = new ArrayList<Integer>();\n\nfor (int x = 1; x <= 10; x++) {\n    if (x % 2 == 0) {\n        squares.add((int) Math.pow(x, 2));\n    }\n}"
    },
    {
        "instruction": "Given a C++ code snippet that prints the first 10 even numbers, can you identify any syntax errors and fix them?",
        "input": "#include <iostream>\n\nint main() {\n    for (int i = 0; i < 20; i++) {\n        if (i % 2 == 0)\n            std::cou << i << std::endl;\n    }\n\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    for (int i = 0; i < 20; i++) {\n        if (i % 2 == 0)\n            std::cout << i << std::endl; // Fixed: replaced 'cou' with 'cout'\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    for (int i = 0; i < 20; i++) {\n        if (i % 2 == 0)\n            std::cout << i << std::endl; // Fixed: replaced 'cou' with 'cout'\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java method that takes a string as input and returns the string reversed.",
        "input": "",
        "response": "public String reverseString(String input) {\n StringBuilder reversed = new StringBuilder(input);\n return reversed.reverse().toString();\n}",
        "output": "public String reverseString(String input) {\n StringBuilder reversed = new StringBuilder(input);\n return reversed.reverse().toString();\n}"
    },
    {
        "instruction": "What would the Python equivalent of this JavaScript function that adds two numbers be?",
        "input": "function add(a, b) {\n return a + b;\n}",
        "response": "def add(a, b):\n return a + b",
        "output": "def add(a, b):\n return a + b"
    },
    {
        "instruction": "Fix the syntax error in the following C# code that is supposed to calculate the factorial of a number.",
        "input": "public int Factorial(int number) {\n int result = 1;\n for (int i = 1; i <= n; i++) {\n   result *= i;\n }\n return result;\n}",
        "response": "public int Factorial(int n) {\n int result = 1;\n for (int i = 1; i <= n; i++) {\n   result *= i;\n }\n return result;\n}",
        "output": "public int Factorial(int n) {\n int result = 1;\n for (int i = 1; i <= n; i++) {\n   result *= i;\n }\n return result;\n}"
    },
    {
        "instruction": "Provide an example of how to use the requests library in Python for making a simple GET request to a provided URL.",
        "input": "https://jsonplaceholder.typicode.com/posts",
        "response": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  print(response.json())\nelse:\n  print('Error:', response.status_code)",
        "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  print(response.json())\nelse:\n  print('Error:', response.status_code)"
    },
    {
        "instruction": "Create a Python function that takes a list of integers and returns the sum of squares of even numbers within the list.",
        "input": "",
        "response": "def sum_of_even_squares(numbers):\n    even_squares = [x ** 2 for x in numbers if x % 2 == 0]\n    return sum(even_squares)",
        "output": "def sum_of_even_squares(numbers):\n    even_squares = [x ** 2 for x in numbers if x % 2 == 0]\n    return sum(even_squares)"
    },
    {
        "instruction": "How would you write a Java method to count the number of occurrences of a given character in a given string?",
        "input": "",
        "response": "public int countOccurrences(String str, char ch) {\n    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) == ch) {\n            count++;\n        }\n    }\n    return count;\n}",
        "output": "public int countOccurrences(String str, char ch) {\n    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) == ch) {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "Create a Bash script that accepts a directory path as an argument and prints the number of files within that directory.",
        "input": "",
        "response": "#!/bin/bash\n\ndir_path=$1\nfile_count=$(find $dir_path -type f | wc -l)\necho \"Number of files in $dir_path: $file_count\"",
        "output": "#!/bin/bash\n\ndir_path=$1\nfile_count=$(find $dir_path -type f | wc -l)\necho \"Number of files in $dir_path: $file_count\""
    },
    {
        "instruction": "Write a C++ function that accepts a vector of strings and sorts them in alphabetical order.",
        "input": "",
        "response": "#include <vector>\n#include <algorithm>\n#include <string>\n\nvoid sort_strings(std::vector<std::string>& strings) {\n    std::sort(strings.begin(), strings.end());\n}",
        "output": "#include <vector>\n#include <algorithm>\n#include <string>\n\nvoid sort_strings(std::vector<std::string>& strings) {\n    std::sort(strings.begin(), strings.end());\n}"
    },
    {
        "instruction": "Create a Java function that accepts an integer array and sorts it using the bubble sort algorithm.",
        "input": "int[] nums = {3, 2, 1, 5, 4};",
        "response": "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}",
        "output": "public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}"
    },
    {
        "instruction": "How can I write a Python function to calculate the nth Fibonacci number using recursion?",
        "input": "n = 5",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Example usage:\n# f = fibonacci(5)\n# print(f)",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Example usage:\n# f = fibonacci(5)\n# print(f)"
    },
    {
        "instruction": "Demonstrate how to use async and await in a JavaScript function to fetch data from an API URL.",
        "input": "https://api.example.com/data",
        "response": "async function fetchData() {\n    try {\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\n// Call the function\nfetchData();",
        "output": "async function fetchData() {\n    try {\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\n// Call the function\nfetchData();"
    },
    {
        "instruction": "Provide a C++ function that takes two integers as input and returns their greatest common divisor (GCD) using the Euclidean algorithm.",
        "input": "int a = 56; int b = 98;",
        "response": "#include <iostream>\n\nint gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}\n\n// Example usage:\n// int result = gcd(56, 98);\n// std::cout << 'GCD: ' << result;",
        "output": "#include <iostream>\n\nint gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}\n\n// Example usage:\n// int result = gcd(56, 98);\n// std::cout << 'GCD: ' << result;"
    },
    {
        "instruction": "Create a Python function that receives a list of integers and returns the sum of the even numbers.",
        "input": "[2, 5, 8, 9, 12, 24, 35]",
        "response": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum\n\nresult = sum_even_numbers([2, 5, 8, 9, 12, 24, 35])\nprint(result)",
        "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum\n\nresult = sum_even_numbers([2, 5, 8, 9, 12, 24, 35])\nprint(result)"
    },
    {
        "instruction": "Write a Java function to find the factorial of a given positive number.",
        "input": "5",
        "response": "public class Factorial {\n\n    public static int factorial(int number) {\n        if (number == 0) {\n            return 1;\n        } else {\n            return number * factorial(number - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int result = factorial(5);\n        System.out.println(result);\n    }\n}",
        "output": "public class Factorial {\n\n    public static int factorial(int number) {\n        if (number == 0) {\n            return 1;\n        } else {\n            return number * factorial(number - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int result = factorial(5);\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "What would be the output of the following JavaScript code snippet?",
        "input": "const person = {\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 30\n};\n\nfor (const key in person) {\n    console.log(`${key}: ${person[key]}`);\n}",
        "response": "firstName: John\nlastName: Doe\nage: 30",
        "output": "firstName: John\nlastName: Doe\nage: 30"
    },
    {
        "instruction": "Implement a simple shell script that accepts two command-line arguments, adds them together, and displays the result.",
        "input": "4 7",
        "response": "#!/bin/bash\n\narg1=$1\narg2=$2\n\nsum=$((arg1 + arg2))\n\necho \"The sum is: $sum\"",
        "output": "#!/bin/bash\n\narg1=$1\narg2=$2\n\nsum=$((arg1 + arg2))\n\necho \"The sum is: $sum\""
    },
    {
        "instruction": "Write a Python function that takes a URL as an argument and returns the HTTP status code of the website.",
        "input": "",
        "response": "import requests\n\ndef get_status_code(url):\n    try:\n        response = requests.get(url)\n        return response.status_code\n    except Exception as e:\n        print(f'Error occurred: {e}')\n        return None\n\n# Example usage:\n# url = 'https://www.example.com'\n# print(get_status_code(url))",
        "output": "import requests\n\ndef get_status_code(url):\n    try:\n        response = requests.get(url)\n        return response.status_code\n    except Exception as e:\n        print(f'Error occurred: {e}')\n        return None\n\n# Example usage:\n# url = 'https://www.example.com'\n# print(get_status_code(url))"
    },
    {
        "instruction": "How can I write a shell script that calculates the disk usage percentage of a specified directory?",
        "input": "directory='/home/user/documents'",
        "response": "#!/bin/sh\n\ndirectory='/home/user/documents'\n\ntotal_space=$(df -P $directory | awk 'END{print $2}')\nused_space=$(df -P $directory | awk 'END{print $3}')\npercentage_used=$((100 * $used_space / $total_space))\n\necho \"Disk usage percentage for the specified directory is: $percentage_used%\"",
        "output": "#!/bin/sh\n\ndirectory='/home/user/documents'\n\ntotal_space=$(df -P $directory | awk 'END{print $2}')\nused_space=$(df -P $directory | awk 'END{print $3}')\npercentage_used=$((100 * $used_space / $total_space))\n\necho \"Disk usage percentage for the specified directory is: $percentage_used%\""
    },
    {
        "instruction": "Create a Java program that finds and prints the factorial of a given number.",
        "input": "int number = 5;",
        "response": "public class Factorial {\n    public static void main(String[] args) {\n        int number = 5;\n        long factorial = 1;\n        for (int i = 1; i <= number; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"The factorial of \" + number + \" is \" + factorial);\n    }\n}",
        "output": "public class Factorial {\n    public static void main(String[] args) {\n        int number = 5;\n        long factorial = 1;\n        for (int i = 1; i <= number; i++) {\n            factorial *= i;\n        }\n        System.out.println(\"The factorial of \" + number + \" is \" + factorial);\n    }\n}"
    },
    {
        "instruction": "Translate this C++ code that calculates the sum of two numbers into its equivalent in JavaScript",
        "input": "#include <iostream>\n\nint main() {\n    int a = 10;\n    int b = 20;\n    int sum = a + b;\n    std::cout << \"Sum: \" << sum << std::endl;\n    return 0;\n}",
        "response": "var a = 10;\nvar b = 20;\nvar sum = a + b;\nconsole.log('Sum: ' + sum);",
        "output": "var a = 10;\nvar b = 20;\nvar sum = a + b;\nconsole.log('Sum: ' + sum);"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of integers as input and returns the product of all the elements in the array.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function arrayProduct(arr) {\n  return arr.reduce((acc, num) => acc * num, 1);\n}",
        "output": "function arrayProduct(arr) {\n  return arr.reduce((acc, num) => acc * num, 1);\n}"
    },
    {
        "instruction": "Create a Java method that accepts a string as an argument and returns a string with all vowels removed.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "public String removeVowels(String input) {\n  return input.replaceAll(\"[AEIOUaeiou]\", \"\");\n}",
        "output": "public String removeVowels(String input) {\n  return input.replaceAll(\"[AEIOUaeiou]\", \"\");\n}"
    },
    {
        "instruction": "Can you provide a C++ code snippet that reads input from a user and calculates the sum of the squares of the integers from 1 to the input number?",
        "input": "5",
        "response": "#include <iostream>\n\nint main() {\n  int n, sum = 0;\n  std::cin >> n;\n  for (int i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  std::cout << \"Sum of squares: \" << sum << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n  int n, sum = 0;\n  std::cin >> n;\n  for (int i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  std::cout << \"Sum of squares: \" << sum << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Explain how to implement a basic HTTP status code checker in Python using the requests library.",
        "input": "https://example.com",
        "response": "import requests\n\nurl = 'https://example.com'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  print('Status code is OK (200)')\nelse:\n  print('Status code:', response.status_code)",
        "output": "import requests\n\nurl = 'https://example.com'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  print('Status code is OK (200)')\nelse:\n  print('Status code:', response.status_code)"
    },
    {
        "instruction": "Write a Python function that accepts a list of strings and returns a dictionary with the words as keys and their lengths as values.",
        "input": "['apple', 'banana', 'cherry']",
        "response": "def word_lengths(words):\n    lengths = {}\n    for word in words:\n        lengths[word] = len(word)\n    return lengths\n\ninput_list = ['apple', 'banana', 'cherry']\nresult = word_lengths(input_list)\nprint(result)",
        "output": "def word_lengths(words):\n    lengths = {}\n    for word in words:\n        lengths[word] = len(word)\n    return lengths\n\ninput_list = ['apple', 'banana', 'cherry']\nresult = word_lengths(input_list)\nprint(result)"
    },
    {
        "instruction": "How would you create a Java method that reads a text file and counts the number of lines?",
        "input": "path/to/file.txt",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class LineCounter {\n\n    public static int countLines(String filePath) throws IOException {\n        int lineCount = 0;\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            while (br.readLine() != null) {\n                lineCount++;\n            }\n        }\n        return lineCount;\n    }\n\n    public static void main(String[] args) throws IOException {\n        String filePath = 'path/to/file.txt';\n        int numLines = countLines(filePath);\n        System.out.println('Number of lines: ' + numLines);\n    }\n}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class LineCounter {\n\n    public static int countLines(String filePath) throws IOException {\n        int lineCount = 0;\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            while (br.readLine() != null) {\n                lineCount++;\n            }\n        }\n        return lineCount;\n    }\n\n    public static void main(String[] args) throws IOException {\n        String filePath = 'path/to/file.txt';\n        int numLines = countLines(filePath);\n        System.out.println('Number of lines: ' + numLines);\n    }\n}"
    },
    {
        "instruction": "Write a shell script that takes a directory path as an argument and lists all files in reverse alphabetical order.",
        "input": "/path/to/directory",
        "response": "#!/bin/bash\n\ndir_path=$1\n\nif [ -d \"$dir_path\" ]; then\n    ls -r \"$dir_path\"\nelse\n    echo 'Invalid directory path'\nfi",
        "output": "#!/bin/bash\n\ndir_path=$1\n\nif [ -d \"$dir_path\" ]; then\n    ls -r \"$dir_path\"\nelse\n    echo 'Invalid directory path'\nfi"
    },
    {
        "instruction": "Create a JavaScript function that receives an object with keys representing user names and values representing their ages. Return an array of user names whose age is greater than or equal to 18.",
        "input": "{ 'Alex': 20, 'Brian': 17, 'Cindy': 19 }",
        "response": "function adults(users) {\n    const adultUsers = [];\n    for (const [name, age] of Object.entries(users)) {\n        if (age >= 18) {\n            adultUsers.push(name);\n        }\n    }\n    return adultUsers;\n}\n\nconst inputObj = { 'Alex': 20, 'Brian': 17, 'Cindy': 19 };\nconst result = adults(inputObj);\nconsole.log(result);",
        "output": "function adults(users) {\n    const adultUsers = [];\n    for (const [name, age] of Object.entries(users)) {\n        if (age >= 18) {\n            adultUsers.push(name);\n        }\n    }\n    return adultUsers;\n}\n\nconst inputObj = { 'Alex': 20, 'Brian': 17, 'Cindy': 19 };\nconst result = adults(inputObj);\nconsole.log(result);"
    },
    {
        "instruction": "Translate the given JavaScript code into Python code.",
        "input": "function makeFullName(firstName, lastName) {\n    return firstName + ' ' + lastName;\n}\n\nconsole.log(makeFullName('John', 'Doe'));",
        "response": "def make_full_name(first_name, last_name):\n    return first_name + ' ' + last_name\n\nprint(make_full_name('John', 'Doe'))",
        "output": "def make_full_name(first_name, last_name):\n    return first_name + ' ' + last_name\n\nprint(make_full_name('John', 'Doe'))"
    },
    {
        "instruction": "How would you implement a simple REST API in Java to get the current time?",
        "input": "",
        "response": "import java.time.LocalDateTime;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/time\")\npublic class TimeResource {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String getCurrentTime() {\n        return LocalDateTime.now().toString();\n    }\n}",
        "output": "import java.time.LocalDateTime;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/time\")\npublic class TimeResource {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String getCurrentTime() {\n        return LocalDateTime.now().toString();\n    }\n}"
    },
    {
        "instruction": "Write a shell script to search for a given pattern in all the files in a directory and its subdirectories.",
        "input": "Pattern: 'Error'\nDirectory: '/var/logs'",
        "response": "#!/bin/bash\n\nPATTERN='Error'\nDIRECTORY='/var/logs'\n\ngrep -r \"$PATTERN\" \"$DIRECTORY\"",
        "output": "#!/bin/bash\n\nPATTERN='Error'\nDIRECTORY='/var/logs'\n\ngrep -r \"$PATTERN\" \"$DIRECTORY\""
    },
    {
        "instruction": "Create a C++ function that finds the largest element in the given vector and returns the largest element along with its index.",
        "input": "Include the following header files: #include <iostream>, #include <vector>, and #include <algorithm>.",
        "response": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::pair<int, int> find_largest(const std::vector<int>& nums) {\n    int max_element = *std::max_element(nums.begin(), nums.end());\n    int index = std::distance(nums.begin(), std::find(nums.begin(), nums.end(), max_element));\n    return {max_element, index};\n}",
        "output": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::pair<int, int> find_largest(const std::vector<int>& nums) {\n    int max_element = *std::max_element(nums.begin(), nums.end());\n    int index = std::distance(nums.begin(), std::find(nums.begin(), nums.end(), max_element));\n    return {max_element, index};\n}"
    },
    {
        "instruction": "Write a Python function to convert a given temperature from Celsius to Fahrenheit.",
        "input": "temperature_in_celsius = 25",
        "response": "def celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\ntemperature_in_celsius = 25\nresult = celsius_to_fahrenheit(temperature_in_celsius)\nprint(result)",
        "output": "def celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\ntemperature_in_celsius = 25\nresult = celsius_to_fahrenheit(temperature_in_celsius)\nprint(result)"
    },
    {
        "instruction": "Implement a Java method to reverse a given string.",
        "input": "String original = \"Hello, World!\";",
        "response": "public class StringReverse {\n  public static void main(String[] args) {\n    String original = \"Hello, World!\";\n    String reversed = reverseString(original);\n    System.out.println(reversed);\n  }\n  public static String reverseString(String s) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = s.length() - 1; i >= 0; i--) {\n      reversed.append(s.charAt(i));\n    }\n    return reversed.toString();\n  }\n}",
        "output": "public class StringReverse {\n  public static void main(String[] args) {\n    String original = \"Hello, World!\";\n    String reversed = reverseString(original);\n    System.out.println(reversed);\n  }\n  public static String reverseString(String s) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = s.length() - 1; i >= 0; i--) {\n      reversed.append(s.charAt(i));\n    }\n    return reversed.toString();\n  }\n}"
    },
    {
        "instruction": "Debug the given JavaScript code snippet to find and fix any errors that prevent it from returning the square of a number.",
        "input": "function findSquar(number) {\n  return number * number;\n}\n\nconsole.log(findSqua(5));",
        "response": "function findSquare(number) {\n  return number * number;\n}\n\nconsole.log(findSquare(5)); // Corrected the spelling of the function name.",
        "output": "function findSquare(number) {\n  return number * number;\n}\n\nconsole.log(findSquare(5)); // Corrected the spelling of the function name."
    },
    {
        "instruction": "Translate the following C code to output a factorial in Python.",
        "input": "#include <stdio.h>\n\nint main() {\n    int n, i;\n    unsigned long long factorial = 1;\n\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &n);\n\n    for (i = 1; i <= n; ++i) {\n        factorial *= i;\n    }\n    printf(\"Factorial of %d = %llu\", n, factorial);\n\n    return 0;\n}",
        "response": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\nn = int(input(\"Enter an integer: \"))\nresult = factorial(n)\nprint(f\"Factorial of {n} = {result}\")",
        "output": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\nn = int(input(\"Enter an integer: \"))\nresult = factorial(n)\nprint(f\"Factorial of {n} = {result}\")"
    },
    {
        "instruction": "Create a JavaScript function that calculates the area of a rectangle given its width and height.",
        "input": "",
        "response": "function rectangleArea(width, height) {\n    return width * height;\n}",
        "output": "function rectangleArea(width, height) {\n    return width * height;\n}"
    },
    {
        "instruction": "What would be the Python code to read and print the content of a text file named 'file.txt'?",
        "input": "",
        "response": "with open('file.txt', 'r') as file:\n    content = file.read()\n    print(content)",
        "output": "with open('file.txt', 'r') as file:\n    content = file.read()\n    print(content)"
    },
    {
        "instruction": "Implement a Java method to convert a given string to title case, where every word's first letter is capitalized and the rest are lowercase.",
        "input": "",
        "response": "public String toTitleCase(String input) {\n    String[] words = input.split(' ');\n    StringBuilder titleCase = new StringBuilder();\n\n    for (String word : words) {\n        titleCase.append(Character.toUpperCase(word.charAt(0)));\n        titleCase.append(word.substring(1).toLowerCase());\n        titleCase.append(' ');\n    }\n\n    return titleCase.toString().trim();\n}",
        "output": "public String toTitleCase(String input) {\n    String[] words = input.split(' ');\n    StringBuilder titleCase = new StringBuilder();\n\n    for (String word : words) {\n        titleCase.append(Character.toUpperCase(word.charAt(0)));\n        titleCase.append(word.substring(1).toLowerCase());\n        titleCase.append(' ');\n    }\n\n    return titleCase.toString().trim();\n}"
    },
    {
        "instruction": "Write a Shell script to find and display the total disk usage of the /home directory.",
        "input": "",
        "response": "#!/bin/sh\n\ndu -sh /home",
        "output": "#!/bin/sh\n\ndu -sh /home"
    },
    {
        "instruction": "Create a Python function that takes a list of numbers and returns a dictionary containing the count of even and odd numbers.",
        "input": "[2, 3, 4, 7, 8, 10]",
        "response": "def count_even_odd(numbers):\n    count = {'even': 0, 'odd': 0}\n    for number in numbers:\n        if number % 2 == 0:\n            count['even'] += 1\n        else:\n            count['odd'] += 1\n    return count\n\n\nnumbers_list = [2, 3, 4, 7, 8, 10]\nprint(count_even_odd(numbers_list))",
        "output": "def count_even_odd(numbers):\n    count = {'even': 0, 'odd': 0}\n    for number in numbers:\n        if number % 2 == 0:\n            count['even'] += 1\n        else:\n            count['odd'] += 1\n    return count\n\n\nnumbers_list = [2, 3, 4, 7, 8, 10]\nprint(count_even_odd(numbers_list))"
    },
    {
        "instruction": "Write a JavaScript code to calculate the sum of the diagonals of a square matrix.",
        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "response": "function diagonalSum(matrix) {\n  let sum1 = 0;\n  let sum2 = 0;\n  let n = matrix.length;\n\n  for (let i = 0; i < n; i++) {\n    sum1 += matrix[i][i];\n    sum2 += matrix[i][n - i - 1];\n  }\n\n  return sum1 + sum2;\n}\n\nconst matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(diagonalSum(matrix));",
        "output": "function diagonalSum(matrix) {\n  let sum1 = 0;\n  let sum2 = 0;\n  let n = matrix.length;\n\n  for (let i = 0; i < n; i++) {\n    sum1 += matrix[i][i];\n    sum2 += matrix[i][n - i - 1];\n  }\n\n  return sum1 + sum2;\n}\n\nconst matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(diagonalSum(matrix));"
    },
    {
        "instruction": "What would be the output after calling the following C++ code?",
        "input": "#include <iostream>\n\nint main() {\n  int a = 10;\n  int b = 20;\n  int c = a + b;\n  std::cout << c << std::endl;\n  return 0;\n}",
        "response": "The output of the given C++ code would be:\n\n30\n\nThe code defines and initializes two integer variables a (10) and b (20), then calculates the sum of these numbers and assigns it to the variable c (30), and finally, prints the value of c (30) to the console.",
        "output": "The output of the given C++ code would be:\n\n30\n\nThe code defines and initializes two integer variables a (10) and b (20), then calculates the sum of these numbers and assigns it to the variable c (30), and finally, prints the value of c (30) to the console."
    },
    {
        "instruction": "Convert the following Python code to its equivalent in Ruby.",
        "input": "def greeting(name):\n    return 'Hello, ' + name\n\nprint(greeting('John'))",
        "response": "def greeting(name)\n  return 'Hello, ' + name\nend\n\nputs greeting('John')",
        "output": "def greeting(name)\n  return 'Hello, ' + name\nend\n\nputs greeting('John')"
    },
    {
        "instruction": "Create a Java function to find the maximum value in an array of integers.",
        "input": "int[] nums = {3, 7, 1, 12, 5, 2};",
        "response": "public int findMax(int[] nums) {\n    int max = nums[0];\n    for (int num : nums) {\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n\nint[] nums = {3, 7, 1, 12, 5, 2};\nint maxValue = findMax(nums);\nSystem.out.println(maxValue);",
        "output": "public int findMax(int[] nums) {\n    int max = nums[0];\n    for (int num : nums) {\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n\nint[] nums = {3, 7, 1, 12, 5, 2};\nint maxValue = findMax(nums);\nSystem.out.println(maxValue);"
    },
    {
        "instruction": "Translate the following Python code into equivalent C++ code.",
        "input": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 7)\nprint(result)",
        "response": "#include <iostream>\n\nint add_numbers(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add_numbers(5, 7);\n    std::cout << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint add_numbers(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add_numbers(5, 7);\n    std::cout << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Implement a function in JavaScript that receives a string and checks if it is a palindrome. A palindrome is a string that reads the same backwards as forwards.",
        "input": "const testString = 'level';",
        "response": "function isPalindrome(str) {\n    const reversedString = str.split('').reverse().join('');\n    return str === reversedString;\n}\n\nconst testString = 'level';\nconst palindromeStatus = isPalindrome(testString);\nconsole.log(palindromeStatus);",
        "output": "function isPalindrome(str) {\n    const reversedString = str.split('').reverse().join('');\n    return str === reversedString;\n}\n\nconst testString = 'level';\nconst palindromeStatus = isPalindrome(testString);\nconsole.log(palindromeStatus);"
    },
    {
        "instruction": "Fix the syntax errors in the following Python code and provide the corrected code.",
        "input": "def fibonacci(n):\nif n <= 0:\nret -1\nelif n == 1 or == 2:\nret 1\nelse:\nret fibonnacci(n-1) + fibonacci(n-2)\n\nresult = fibonacci(6)\nprint(result)",
        "response": "def fibonacci(n):\n    if n <= 0:\n        return -1\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nresult = fibonacci(6)\nprint(result)",
        "output": "def fibonacci(n):\n    if n <= 0:\n        return -1\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nresult = fibonacci(6)\nprint(result)"
    },
    {
        "instruction": "Write a Python function that takes a list of integers as input and returns the sum of all the odd numbers in the list.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def sum_odd_numbers(numbers):\n    odd_sum = 0\n    for num in numbers:\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum",
        "output": "def sum_odd_numbers(numbers):\n    odd_sum = 0\n    for num in numbers:\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum"
    },
    {
        "instruction": "Create a Java method that takes an array of strings as input and returns the longest word in the array.",
        "input": "[\"hello\", \"world\", \"java\", \"programming\"]",
        "response": "public String findLongestWord(String[] words) {\n    String longestWord = \"\";\n    for (String word : words) {\n        if (word.length() > longestWord.length()) {\n            longestWord = word;\n        }\n    }\n    return longestWord;\n}",
        "output": "public String findLongestWord(String[] words) {\n    String longestWord = \"\";\n    for (String word : words) {\n        if (word.length() > longestWord.length()) {\n            longestWord = word;\n        }\n    }\n    return longestWord;\n}"
    },
    {
        "instruction": "Design a JavaScript function that takes an array of numbers and returns a new array with all elements squared.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "function squareArray(numbers) {\n    return numbers.map(function(num) {\n        return num * num;\n    });\n}",
        "output": "function squareArray(numbers) {\n    return numbers.map(function(num) {\n        return num * num;\n    });\n}"
    },
    {
        "instruction": "Modify the given C code to include error checking for opening and closing the input file. If the file cannot be opened, print an error message and exit gracefully.",
        "input": "#include <stdio.h>\n\nint main() {\n    FILE *input_file;\n    input_file = fopen(\"input.txt\", \"r\");\n    // Reading and processing the file...\n    fclose(input_file);\n    return 0;\n}",
        "response": "#include <stdio.h>\n\nint main() {\n    FILE *input_file;\n    input_file = fopen(\"input.txt\", \"r\");\n\n    if (input_file == NULL) {\n        perror(\"Error opening input file\");\n        return 1;\n    }\n\n    // Reading and processing the file...\n\n    if (fclose(input_file) != 0) {\n        perror(\"Error closing input file\");\n        return 1;\n    }\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    FILE *input_file;\n    input_file = fopen(\"input.txt\", \"r\");\n\n    if (input_file == NULL) {\n        perror(\"Error opening input file\");\n        return 1;\n    }\n\n    // Reading and processing the file...\n\n    if (fclose(input_file) != 0) {\n        perror(\"Error closing input file\");\n        return 1;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Implement a Python function that takes two lists as arguments and returns a list containing their common elements.",
        "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]",
        "response": "def common_elements(list1, list2):\n    result = [element for element in list1 if element in list2]\n    return result\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nprint(common_elements(list1, list2))",
        "output": "def common_elements(list1, list2):\n    result = [element for element in list1 if element in list2]\n    return result\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nprint(common_elements(list1, list2))"
    },
    {
        "instruction": "Can you find the syntax error in this JavaScript code?",
        "input": "function isEven(num) {\n  if (num % 2 = 0) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "response": "The syntax error is in the if statement. The comparison operator should be '==' or '===', not '='. Here is the corrected code:\n\nfunction isEven(num) {\n  if (num % 2 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}",
        "output": "The syntax error is in the if statement. The comparison operator should be '==' or '===', not '='. Here is the corrected code:\n\nfunction isEven(num) {\n  if (num % 2 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}"
    },
    {
        "instruction": "Translate the following Python code snippet into an equivalent Java code snippet that reverses a string.",
        "input": "def reverse_string(s):\n    return s[::-1]\n\nstring = 'hello'\nreversed_string = reverse_string(string)\nprint(reversed_string)",
        "response": "public class Main {\n    public static String reverseString(String s) {\n        StringBuffer stringBuffer = new StringBuffer(s);\n        stringBuffer.reverse();\n        return stringBuffer.toString();\n    }\n\n    public static void main(String[] args) {\n        String string = \"hello\";\n        String reversedString = reverseString(string);\n        System.out.println(reversedString);\n    }\n}",
        "output": "public class Main {\n    public static String reverseString(String s) {\n        StringBuffer stringBuffer = new StringBuffer(s);\n        stringBuffer.reverse();\n        return stringBuffer.toString();\n    }\n\n    public static void main(String[] args) {\n        String string = \"hello\";\n        String reversedString = reverseString(string);\n        System.out.println(reversedString);\n    }\n}"
    },
    {
        "instruction": "Write a shell script that iterates over all files with .txt extension in the current directory and counts the number of lines in each file.",
        "input": "",
        "response": "#!/bin/bash\n\nfor txt_file in *.txt; do\n    line_count=$(wc -l < \"$txt_file\")\n    echo \"$txt_file has $line_count lines\"\ndone",
        "output": "#!/bin/bash\n\nfor txt_file in *.txt; do\n    line_count=$(wc -l < \"$txt_file\")\n    echo \"$txt_file has $line_count lines\"\ndone"
    },
    {
        "instruction": "Create a simple Python function that takes a string as input and returns the number of vowels in the string.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "def count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ninput_str = 'The quick brown fox jumps over the lazy dog.'\nprint(count_vowels(input_str))",
        "output": "def count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ninput_str = 'The quick brown fox jumps over the lazy dog.'\nprint(count_vowels(input_str))"
    },
    {
        "instruction": "Translate the following JavaScript code to C++: function add(x, y) { return x + y; }",
        "input": "function add(x, y) { return x + y; }",
        "response": "#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\nint main() {\n    int x = 4, y = 5;\n    std::cout << add(x, y) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\nint main() {\n    int x = 4, y = 5;\n    std::cout << add(x, y) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a function to calculate the factorial of a number in Java?",
        "input": "Calculate the factorial of 5",
        "response": "public class Factorial {\n\n    public static long factorial(long n) {\n        if (n <= 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        long n = 5;\n        System.out.println(factorial(n));\n    }\n}",
        "output": "public class Factorial {\n\n    public static long factorial(long n) {\n        if (n <= 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        long n = 5;\n        System.out.println(factorial(n));\n    }\n}"
    },
    {
        "instruction": "Write a Python script that makes use of the requests library to query the Open Trivia API and retrieve a question.",
        "input": "",
        "response": "import requests\n\nurl = 'https://opentdb.com/api.php?amount=1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    question = data['results'][0]['question']\n    print(question)\nelse:\n    print('Error: Unable to retrieve question from the API.')",
        "output": "import requests\n\nurl = 'https://opentdb.com/api.php?amount=1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    question = data['results'][0]['question']\n    print(question)\nelse:\n    print('Error: Unable to retrieve question from the API.')"
    },
    {
        "instruction": "Create a Python function that finds the longest word in a provided list of words.",
        "input": "['programming', 'computer', 'artificial', 'intelligence']",
        "response": "def find_longest_word(words):\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nword_list = ['programming', 'computer', 'artificial', 'intelligence']\nprint(find_longest_word(word_list))",
        "output": "def find_longest_word(words):\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nword_list = ['programming', 'computer', 'artificial', 'intelligence']\nprint(find_longest_word(word_list))"
    },
    {
        "instruction": "Rewrite the given JavaScript function into PHP to output the square of an input number.",
        "input": "function get_square(number) {\n    return number * number;\n}",
        "response": "function get_square($number) {\n    return $number * $number;\n}\n\n$square = get_square(4);\necho $square;",
        "output": "function get_square($number) {\n    return $number * $number;\n}\n\n$square = get_square(4);\necho $square;"
    },
    {
        "instruction": "Write a Java method that, given an array of integers, returns the count of negative, zero, and positive numbers in the array.",
        "input": "int[] numbers = { -5, 0, 3, -2, 1 };",
        "response": "public static int[] countNumbers(int[] numbers) {\n    int[] count = new int[3];\n    for (int number : numbers) {\n        if (number < 0) {\n            count[0]++;\n        } else if (number == 0) {\n            count[1]++;\n        } else {\n            count[2]++;\n        }\n    }\n    return count;\n}\n\nint[] numbers = { -5, 0, 3, -2, 1 };\nint[] count = countNumbers(numbers);\nSystem.out.println(Arrays.toString(count));",
        "output": "public static int[] countNumbers(int[] numbers) {\n    int[] count = new int[3];\n    for (int number : numbers) {\n        if (number < 0) {\n            count[0]++;\n        } else if (number == 0) {\n            count[1]++;\n        } else {\n            count[2]++;\n        }\n    }\n    return count;\n}\n\nint[] numbers = { -5, 0, 3, -2, 1 };\nint[] count = countNumbers(numbers);\nSystem.out.println(Arrays.toString(count));"
    },
    {
        "instruction": "How can I write a shell script that counts the number of lines in a given file and displays the result?",
        "input": "filename.txt",
        "response": "#!/bin/sh\n\nfilename='filename.txt'\nline_count=$(wc -l < $filename)\necho \"The number of lines in $filename is $line_count\"",
        "output": "#!/bin/sh\n\nfilename='filename.txt'\nline_count=$(wc -l < $filename)\necho \"The number of lines in $filename is $line_count\""
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers and returns the sum of the odd numbers in that array.",
        "input": "[2, 5, 7, 10, 11, 20]",
        "response": "function sumOddNumbers(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 !== 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n// Usage: sumOddNumbers([2, 5, 7, 10, 11, 20]);",
        "output": "function sumOddNumbers(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 !== 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n// Usage: sumOddNumbers([2, 5, 7, 10, 11, 20]);"
    },
    {
        "instruction": "Consider the following code snippet in C++. Identify and fix the syntax error.",
        "input": "#include <iostream>\n\nint main() {\n    std::string name = 'Alice';\n    std::cout << 'Hello, ' << name << '!' << std::endl;\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    std::string name = \"Alice\"; // Use double quotes for string literals\n    std::cout << \"Hello, \" << name << \"!\" << std::endl; // Use double quotes for string literals\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::string name = \"Alice\"; // Use double quotes for string literals\n    std::cout << \"Hello, \" << name << \"!\" << std::endl; // Use double quotes for string literals\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a function in Python to find the nth Fibonacci number using recursion?",
        "input": "n = 6",
        "response": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Usage: fibonacci(6)",
        "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Usage: fibonacci(6)"
    },
    {
        "instruction": "Translate the following Python code to Java:",
        "input": "def greet(name):\n    return 'Hello, ' + name\n\nresult = greet('John')\nprint(result)",
        "response": "public class Main {\n    public static String greet(String name) {\n        return \"Hello, \" + name;\n    }\n\n    public static void main(String[] args) {\n        String result = greet(\"John\");\n        System.out.println(result);\n    }\n}",
        "output": "public class Main {\n    public static String greet(String name) {\n        return \"Hello, \" + name;\n    }\n\n    public static void main(String[] args) {\n        String result = greet(\"John\");\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "Write a Python function to compute the compound interest, given the principal, interest rate, and duration.",
        "input": "Principal: 5000\nInterest Rate: 0.05\nDuration: 5",
        "response": "def compound_interest(principal, interest_rate, duration):\n    amount = principal * (1 + interest_rate) ** duration\n    interest = amount - principal\n    return interest\n\ncompound_interest(5000, 0.05, 5)",
        "output": "def compound_interest(principal, interest_rate, duration):\n    amount = principal * (1 + interest_rate) ** duration\n    interest = amount - principal\n    return interest\n\ncompound_interest(5000, 0.05, 5)"
    },
    {
        "instruction": "Detect syntax errors in the given Java code and provide the corrected version.",
        "input": "public class HelloWorld {\n public static void main(String[] args {\n System.out.println('Hello, World!')\n }\n}",
        "response": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "How would you convert the given C++ code to C code?",
        "input": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}",
        "response": "#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}"
    },
    {
        "instruction": "Translate the provided JavaScript code into a PHP equivalent.",
        "input": "function add(a, b) {\n    return a + b;\n}\n\nconsole.log(add(3, 4));",
        "response": "<?php\n\nfunction add($a, $b) {\n    return $a + $b;\n}\n\necho add(3, 4);\n\n?>",
        "output": "<?php\n\nfunction add($a, $b) {\n    return $a + $b;\n}\n\necho add(3, 4);\n\n?>"
    },
    {
        "instruction": "Create a JavaScript function that will take a string input and return the string with its characters reversed.",
        "input": "",
        "response": "function reverseString(str) {\n return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "What is the appropriate Java code to implement a basic stack data structure using linked list?",
        "input": "",
        "response": "public class Stack<T> {\n    private LinkedList<T> list = new LinkedList<T>();\n\n    // Adds element to the top of the stack\n    public void push(T value) {\n        list.addFirst(value);\n    }\n\n    // Removes and returns the top element from the stack\n    public T pop() {\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Stack is empty\");\n        }\n        return list.removeFirst();\n    }\n\n    // Returns the top element of the stack without removing it\n    public T peek() {\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Stack is empty\");\n        }\n        return list.getFirst();\n    }\n\n    // Returns true if the stack is empty\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    // Returns the number of elements in the stack\n    public int size() {\n        return list.size();\n    }\n}",
        "output": "public class Stack<T> {\n    private LinkedList<T> list = new LinkedList<T>();\n\n    // Adds element to the top of the stack\n    public void push(T value) {\n        list.addFirst(value);\n    }\n\n    // Removes and returns the top element from the stack\n    public T pop() {\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Stack is empty\");\n        }\n        return list.removeFirst();\n    }\n\n    // Returns the top element of the stack without removing it\n    public T peek() {\n        if (isEmpty()) {\n            throw new NoSuchElementException(\"Stack is empty\");\n        }\n        return list.getFirst();\n    }\n\n    // Returns true if the stack is empty\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    // Returns the number of elements in the stack\n    public int size() {\n        return list.size();\n    }\n}"
    },
    {
        "instruction": "Create a Python function that takes in two lists of integers and returns a new list containing the intersection of the two given lists.",
        "input": "",
        "response": "def list_intersection(list1, list2):\n    return list(set(list1) & set(list2))",
        "output": "def list_intersection(list1, list2):\n    return list(set(list1) & set(list2))"
    },
    {
        "instruction": "Translate the following C++ function to a C# function which calculates the factorial of a given integer, n.",
        "input": "int factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "response": "public int Factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * Factorial(n - 1);\n}",
        "output": "public int Factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * Factorial(n - 1);\n}"
    },
    {
        "instruction": "Translate the following Python code to Java that calculates the factorial of a given number.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))",
        "response": "public class Factorial {\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}",
        "output": "public class Factorial {\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}"
    },
    {
        "instruction": "Given the following JavaScript code, identify and fix the syntax error.",
        "input": "function add(x, y) {\n    let sum == x + y;\n    return sum;\n}\n\nconsole.log(add(3, 4));",
        "response": "function add(x, y) {\n    let sum = x + y; // Fixed: Changed '==' to '='\n    return sum;\n}\n\nconsole.log(add(3, 4));",
        "output": "function add(x, y) {\n    let sum = x + y; // Fixed: Changed '==' to '='\n    return sum;\n}\n\nconsole.log(add(3, 4));"
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns the string reversed.",
        "input": "",
        "response": "def reverse_string(input_string):\n    return input_string[::-1]\n\n# Example usage\nprint(reverse_string('hello'))",
        "output": "def reverse_string(input_string):\n    return input_string[::-1]\n\n# Example usage\nprint(reverse_string('hello'))"
    },
    {
        "instruction": "How can I create a C++ program that calculates the length of the hypotenuse of a right triangle with sides a and b?",
        "input": "",
        "response": "#include <iostream>\n#include <cmath>\n\nfloat hypotenuse(float a, float b) {\n    return std::sqrt(a * a + b * b);\n}\n\nint main() {\n    float side_a = 3;\n    float side_b = 4;\n    float hyp = hypotenuse(side_a, side_b);\n    std::cout << \"Hypotenuse: \" << hyp << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nfloat hypotenuse(float a, float b) {\n    return std::sqrt(a * a + b * b);\n}\n\nint main() {\n    float side_a = 3;\n    float side_b = 4;\n    float hyp = hypotenuse(side_a, side_b);\n    std::cout << \"Hypotenuse: \" << hyp << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you write a Python script to download and save an image from a given URL to your local machine?",
        "input": "url='https://example.com/image.jpg', file_path='local_image.jpg'",
        "response": "import requests\n\nurl = 'https://example.com/image.jpg'\nfile_path = 'local_image.jpg'\n\nresponse = requests.get(url)\n\nwith open(file_path, 'wb') as file:\n    file.write(response.content)",
        "output": "import requests\n\nurl = 'https://example.com/image.jpg'\nfile_path = 'local_image.jpg'\n\nresponse = requests.get(url)\n\nwith open(file_path, 'wb') as file:\n    file.write(response.content)"
    },
    {
        "instruction": "Develop a Java method that returns a sorted list of integers from a given unsorted list of integers.",
        "input": "",
        "response": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic ArrayList<Integer> sortIntegers(ArrayList<Integer> unsortedList) {\n    ArrayList<Integer> sortedList = new ArrayList<>(unsortedList);\n    Collections.sort(sortedList);\n    return sortedList;\n}",
        "output": "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic ArrayList<Integer> sortIntegers(ArrayList<Integer> unsortedList) {\n    ArrayList<Integer> sortedList = new ArrayList<>(unsortedList);\n    Collections.sort(sortedList);\n    return sortedList;\n}"
    },
    {
        "instruction": "Write a C++ function to remove all occurrences of a specific character from a given string.",
        "input": "",
        "response": "#include <string>\n#include <algorithm>\n\nstd::string removeChar(const std::string& inputStr, char charToRemove) {\n    std::string result = inputStr;\n    result.erase(std::remove(result.begin(), result.end(), charToRemove), result.end());\n    return result;\n}",
        "output": "#include <string>\n#include <algorithm>\n\nstd::string removeChar(const std::string& inputStr, char charToRemove) {\n    std::string result = inputStr;\n    result.erase(std::remove(result.begin(), result.end(), charToRemove), result.end());\n    return result;\n}"
    },
    {
        "instruction": "Translate the following Python code snippet into equivalent Java code: (A program to reverse a given string)",
        "input": "def reverse_string(s):\n    return s[::-1]\n\nresult = reverse_string('hello world')\nprint(result)",
        "response": "public class ReverseString {\n\n    public static String reverseString(String s) {\n        return new StringBuilder(s).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String result = reverseString(\"hello world\");\n        System.out.println(result);\n    }\n}",
        "output": "public class ReverseString {\n\n    public static String reverseString(String s) {\n        return new StringBuilder(s).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String result = reverseString(\"hello world\");\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "How would you write a C++ program to swap the values of two integer variables without using a temporary variable?",
        "input": "int a = 5;\nint b = 10;",
        "response": "#include <iostream>\n\nint main() {\n    int a = 5;\n    int b = 10;\n\n    a = a + b;\n    b = a - b;\n    a = a - b;\n\n    std::cout << \"a: \" << a << \" b: \" << b << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int a = 5;\n    int b = 10;\n\n    a = a + b;\n    b = a - b;\n    a = a - b;\n\n    std::cout << \"a: \" << a << \" b: \" << b << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that accepts an array of numbers and returns the sum of all even numbers in the array.",
        "input": "sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
        "response": "function sum_even_numbers(numbers) {\n    return numbers.reduce((sum, num) => {\n        return (num % 2 === 0) ? sum + num : sum;\n    }, 0);\n}\n\nlet result = sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nconsole.log(result);",
        "output": "function sum_even_numbers(numbers) {\n    return numbers.reduce((sum, num) => {\n        return (num % 2 === 0) ? sum + num : sum;\n    }, 0);\n}\n\nlet result = sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nconsole.log(result);"
    },
    {
        "instruction": "Create a Java function that calculates the Fibonacci sequence for a given integer n.",
        "input": "",
        "response": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n",
        "output": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n"
    },
    {
        "instruction": "How would you rewrite the given Python code using list comprehension?",
        "input": "original_list = [1, 2, 3, 4, 5]\ndoubled_list = []\nfor i in original_list:\n    doubled_list.append(i * 2)",
        "response": "original_list = [1, 2, 3, 4, 5]\ndoubled_list = [i * 2 for i in original_list]",
        "output": "original_list = [1, 2, 3, 4, 5]\ndoubled_list = [i * 2 for i in original_list]"
    },
    {
        "instruction": "Write a function in JavaScript to check if a string is a palindrome or not.",
        "input": "",
        "response": "function isPalindrome(str) {\n    var reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n}",
        "output": "function isPalindrome(str) {\n    var reversedStr = str.split('').reverse().join('');\n    return str === reversedStr;\n}"
    },
    {
        "instruction": "Given a C++ code snippet, identify the reason for the segmentation fault and suggest a fix.",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int *ptr = nullptr;\n    *ptr = 42;\n    cout << *ptr;\n    return 0;\n}",
        "response": "Reason: Dereferencing a nullptr.\n\nFix:\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int value = 42;\n    int *ptr = &value;\n    cout << *ptr;\n    return 0;\n}",
        "output": "Reason: Dereferencing a nullptr.\n\nFix:\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int value = 42;\n    int *ptr = &value;\n    cout << *ptr;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that finds the nth Prime number.",
        "input": "",
        "response": "function isPrime(num) {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction nthPrime(n) {\n  let count = 0;\n  let number = 1;\n\n  while (count < n) {\n    number++;\n    if (isPrime(number)) count++;\n  }\n\n  return number;\n}",
        "output": "function isPrime(num) {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction nthPrime(n) {\n  let count = 0;\n  let number = 1;\n\n  while (count < n) {\n    number++;\n    if (isPrime(number)) count++;\n  }\n\n  return number;\n}"
    },
    {
        "instruction": "Translate the following Python code into Java code:",
        "input": "def countdown(n):\n    if n <= 0:\n        print('Blast off!')\n    else:\n        print(n)\n        countdown(n-1)\n\nn = 10\ncountdown(n)",
        "response": "public class Countdown {\n\n  public static void main(String[] args) {\n    int n = 10;\n    countdown(n);\n  }\n\n  public static void countdown(int n) {\n    if (n <= 0) {\n      System.out.println('Blast off!');\n    } else {\n      System.out.println(n);\n      countdown(n - 1);\n    }\n  }\n}",
        "output": "public class Countdown {\n\n  public static void main(String[] args) {\n    int n = 10;\n    countdown(n);\n  }\n\n  public static void countdown(int n) {\n    if (n <= 0) {\n      System.out.println('Blast off!');\n    } else {\n      System.out.println(n);\n      countdown(n - 1);\n    }\n  }\n}"
    },
    {
        "instruction": "Write a Bash script to delete all files in the current directory except for files with a '.txt' extension.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *; do\n  if [[ $file != *.txt ]]; then\n    rm $file\n  fi\ndone",
        "output": "#!/bin/bash\n\nfor file in *; do\n  if [[ $file != *.txt ]]; then\n    rm $file\n  fi\ndone"
    },
    {
        "instruction": "How would you write a SQL query to calculate the total salary of all employees working in a department called 'Marketing'?",
        "input": "",
        "response": "SELECT SUM(salary) FROM employees WHERE department = 'Marketing';",
        "output": "SELECT SUM(salary) FROM employees WHERE department = 'Marketing';"
    },
    {
        "instruction": "Write a Python function that accepts a string and checks if all characters are uppercase using the isupper() method.",
        "input": "",
        "response": "def check_all_uppercase(s):\n    # Check if all characters are uppercase using the isupper() method\n    for char in s:\n        if not char.isupper():\n            return False\n    return True",
        "output": "def check_all_uppercase(s):\n    # Check if all characters are uppercase using the isupper() method\n    for char in s:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "instruction": "What would be the output of the following Java code snippet? Provide explanations for the provided code.",
        "input": "class Test {\n    public static void main(String[] args) {\n        int x = 10;\n        int y = x * 2;\n        x = x + 5;\n        System.out.println(x);\n        System.out.println(y);\n    }\n}",
        "response": "The output of the Java code snippet would be:\n15\n20\n\nExplanation:\n1. int x = 10; (x is assigned the value 10)\n2. int y = x * 2; (y is assigned the value of x multiplied by 2, i.e., 20)\n3. x = x + 5; (x is assigned the value of x added to 5, i.e., 15)\n4. System.out.println(x); (prints the current value of x, which is 15)\n5. System.out.println(y); (prints the current value of y, which is 20)",
        "output": "The output of the Java code snippet would be:\n15\n20\n\nExplanation:\n1. int x = 10; (x is assigned the value 10)\n2. int y = x * 2; (y is assigned the value of x multiplied by 2, i.e., 20)\n3. x = x + 5; (x is assigned the value of x added to 5, i.e., 15)\n4. System.out.println(x); (prints the current value of x, which is 15)\n5. System.out.println(y); (prints the current value of y, which is 20)"
    },
    {
        "instruction": "Create a C++ program that calculates the area of a rectangle using a simple function. The function should accept the length and width as arguments and return the area.",
        "input": "",
        "response": "#include <iostream>\n\nusing namespace std;\n\n// Function to calculate the area of a rectangle\ndouble rectangle_area(double length, double width) {\n    return length * width;\n}\n\nint main() {\n    double length = 0.0, width = 0.0;\n\n    cout << \"Enter the length of the rectangle: \";\n    cin >> length;\n    cout << \"Enter the width of the rectangle: \";\n    cin >> width;\n\n    double area = rectangle_area(length, width);\n    cout << \"The area of the rectangle is: \" << area << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\n// Function to calculate the area of a rectangle\ndouble rectangle_area(double length, double width) {\n    return length * width;\n}\n\nint main() {\n    double length = 0.0, width = 0.0;\n\n    cout << \"Enter the length of the rectangle: \";\n    cin >> length;\n    cout << \"Enter the width of the rectangle: \";\n    cin >> width;\n\n    double area = rectangle_area(length, width);\n    cout << \"The area of the rectangle is: \" << area << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Give an example of how to use the Axios library in a Node.js application for fetching data from an API, given the endpoint 'https://jsonplaceholder.typicode.com/posts'.",
        "input": "",
        "response": "const axios = require('axios');\n\nasync function fetchData() {\n    try {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n        console.log(response.data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nfetchData();",
        "output": "const axios = require('axios');\n\nasync function fetchData() {\n    try {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n        console.log(response.data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nfetchData();"
    },
    {
        "instruction": "Write a Java code snippet to find the smallest number out of three numbers using the ternary operator.",
        "input": "5, 8, 3",
        "response": "public class SmallestNumber {\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 8;\n        int num3 = 3;\n        int smallest = num1 < num2 ? (num1 < num3 ? num1 : num3) : (num2 < num3 ? num2 : num3);\n        System.out.println(\"The smallest number is: \" + smallest);\n    }\n}",
        "output": "public class SmallestNumber {\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 8;\n        int num3 = 3;\n        int smallest = num1 < num2 ? (num1 < num3 ? num1 : num3) : (num2 < num3 ? num2 : num3);\n        System.out.println(\"The smallest number is: \" + smallest);\n    }\n}"
    },
    {
        "instruction": "In the given Python code, identify and fix any syntax errors.",
        "input": "def calc_area(radius):\n    if radius < 0: return None\nreturn 3.14159 * (radius ** 2",
        "response": "def calc_area(radius):\n    if radius < 0:\n        return None\n    return 3.14159 * (radius ** 2)",
        "output": "def calc_area(radius):\n    if radius < 0:\n        return None\n    return 3.14159 * (radius ** 2)"
    },
    {
        "instruction": "Translate the following Python code that calculates the factorial of a number using a while loop into JavaScript.",
        "input": "def factorial(num):\n    result = 1\n    while num > 1:\n        result *= num\n        num -= 1\n    return result",
        "response": "function factorial(num) {\n    let result = 1;\n    while (num > 1) {\n        result *= num;\n        num -= 1;\n    }\n    return result;\n}",
        "output": "function factorial(num) {\n    let result = 1;\n    while (num > 1) {\n        result *= num;\n        num -= 1;\n    }\n    return result;\n}"
    },
    {
        "instruction": "Implement an API call in Python using the requests library to retrieve a list of users from a sample endpoint and print the names of the users.",
        "input": "https://jsonplaceholder.typicode.com/users",
        "response": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/users'\nresponse = requests.get(url)\n\nusers = response.json()\n\nfor user in users:\n    print(user['name'])",
        "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/users'\nresponse = requests.get(url)\n\nusers = response.json()\n\nfor user in users:\n    print(user['name'])"
    },
    {
        "instruction": "Create a Python function to find the longest word in a given sentence.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "def find_longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = 'The quick brown fox jumps over the lazy dog.'\nprint(find_longest_word(sentence)) # Output: 'jumps'",
        "output": "def find_longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = 'The quick brown fox jumps over the lazy dog.'\nprint(find_longest_word(sentence)) # Output: 'jumps'"
    },
    {
        "instruction": "How would you implement a Java function that takes an array of integers as input and calculates the sum of even numbers?",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "response": "public int sumOfEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int i : numbers) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nint[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nSystem.out.println(sumOfEvenNumbers(numbers)); // Output: 30",
        "output": "public int sumOfEvenNumbers(int[] numbers) {\n    int sum = 0;\n    for (int i : numbers) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nint[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nSystem.out.println(sumOfEvenNumbers(numbers)); // Output: 30"
    },
    {
        "instruction": "Write a C++ code snippet that detects if a given string contains only digits.",
        "input": "12345",
        "response": "#include <iostream>\n#include <cctype>\n#include <string>\n\nbool isDigitsOnly(const std::string& str) {\n    for (char ch : str) {\n        if (!std::isdigit(ch)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string input = \"12345\";\n    std::cout << std::boolalpha << isDigitsOnly(input) << std::endl; // Output: true\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cctype>\n#include <string>\n\nbool isDigitsOnly(const std::string& str) {\n    for (char ch : str) {\n        if (!std::isdigit(ch)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::string input = \"12345\";\n    std::cout << std::boolalpha << isDigitsOnly(input) << std::endl; // Output: true\n    return 0;\n}"
    },
    {
        "instruction": "Design a JavaScript function to encode a given string with ROT13 cipher, shifting each letter by 13 places in the alphabet.",
        "input": "Hello, World!",
        "response": "function rot13(str) {\n  return str.replace(/[A-Za-z]/g, function(c) {\n    return String.fromCharCode(\n      (c <= 'Z' ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26\n    );\n  });\n}\n\nvar text = 'Hello, World!';\nconsole.log(rot13(text)); // Output: 'Uryyb, Jbeyq!'",
        "output": "function rot13(str) {\n  return str.replace(/[A-Za-z]/g, function(c) {\n    return String.fromCharCode(\n      (c <= 'Z' ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26\n    );\n  });\n}\n\nvar text = 'Hello, World!';\nconsole.log(rot13(text)); // Output: 'Uryyb, Jbeyq!'"
    },
    {
        "instruction": "Translate the following Python code snippet to JavaScript: def greet(name): return 'Hello, ' + name + '!'",
        "input": "",
        "response": "function greet(name) {\n    return 'Hello, ' + name + '!';\n}",
        "output": "function greet(name) {\n    return 'Hello, ' + name + '!';\n}"
    },
    {
        "instruction": "Create a Java program that outputs the first 10 Fibonacci numbers.",
        "input": "",
        "response": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        int num1 = 0;\n        int num2 = 1;\n\n        for (int i = 1; i <= n; ++i) {\n            System.out.print(num1 + \" \");\n\n            int sum = num1 + num2;\n            num1 = num2;\n            num2 = sum;\n        }\n    }\n}",
        "output": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        int num1 = 0;\n        int num2 = 1;\n\n        for (int i = 1; i <= n; ++i) {\n            System.out.print(num1 + \" \");\n\n            int sum = num1 + num2;\n            num1 = num2;\n            num2 = sum;\n        }\n    }\n}"
    },
    {
        "instruction": "How would you fix the following Python code to calculate the factorial of a given number? def factorial(n): if n == 1: return 1 else: return n * factorial(n)",
        "input": "",
        "response": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "Write a shell script that reads a list of file paths from a text file and outputs the file size of each file in bytes.",
        "input": "file_paths.txt",
        "response": "#!/bin/bash\n\n# Read the input file\ninput_file=\"file_paths.txt\"\n\n# Loop through each line (file path) and output its size\nwhile IFS= read -r file_path\ndo\n    file_size=$(stat -c%s \"${file_path}\")\n    echo \"${file_path}: ${file_size} bytes\"\ndone < \"${input_file}\"",
        "output": "#!/bin/bash\n\n# Read the input file\ninput_file=\"file_paths.txt\"\n\n# Loop through each line (file path) and output its size\nwhile IFS= read -r file_path\ndo\n    file_size=$(stat -c%s \"${file_path}\")\n    echo \"${file_path}: ${file_size} bytes\"\ndone < \"${input_file}\""
    },
    {
        "instruction": "Create a Python function to calculate the Euclidean distance between two points in 3D.",
        "input": "point1 = (1, 2, 3)\npoint2 = (4, 5, 6)",
        "response": "def euclidean_distance_3D(point1, point2):\n    x1, y1, z1 = point1\n    x2, y2, z2 = point2\n\n    return ((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) ** 0.5\n\ndistance = euclidean_distance_3D((1, 2, 3), (4, 5, 6))",
        "output": "def euclidean_distance_3D(point1, point2):\n    x1, y1, z1 = point1\n    x2, y2, z2 = point2\n\n    return ((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) ** 0.5\n\ndistance = euclidean_distance_3D((1, 2, 3), (4, 5, 6))"
    },
    {
        "instruction": "What is the output of this JavaScript code?",
        "input": "let a = '5';\nlet b = 5;\nlet sum = a + b;\nconsole.log(sum);",
        "response": "The output of the JavaScript code is '55' because when a string and a number are added, JavaScript converts the number to a string and concatenates them.",
        "output": "The output of the JavaScript code is '55' because when a string and a number are added, JavaScript converts the number to a string and concatenates them."
    },
    {
        "instruction": "Locate the syntax error in the provided Java code.",
        "input": "public class Main {\n\n  public static void main(String[] args) {\n\n    int x = 100;\n    int y = 50;\n\n    if (x == 100 && y == 50) {\n      System.out.println(\"Values are correct.\");\n    else\n      System.out.println(\"Values are incorrect.\");\n    }\n\n  }\n}",
        "response": "There is a syntax error in the Java code. The 'else' statement should be preceded by a closing curly brace '}' while the 'if' statement should be followed by an opening curly brace '{'. The corrected code should be:\n\npublic class Main {\n\n  public static void main(String[] args) {\n\n    int x = 100;\n    int y = 50;\n\n    if (x == 100 && y == 50) {\n      System.out.println(\"Values are correct.\");\n    } else {\n      System.out.println(\"Values are incorrect.\");\n    }\n\n  }\n}",
        "output": "There is a syntax error in the Java code. The 'else' statement should be preceded by a closing curly brace '}' while the 'if' statement should be followed by an opening curly brace '{'. The corrected code should be:\n\npublic class Main {\n\n  public static void main(String[] args) {\n\n    int x = 100;\n    int y = 50;\n\n    if (x == 100 && y == 50) {\n      System.out.println(\"Values are correct.\");\n    } else {\n      System.out.println(\"Values are incorrect.\");\n    }\n\n  }\n}"
    },
    {
        "instruction": "Translate the following Python code into C++.",
        "input": "n = 10\nresult = 1\n\nfor i in range(1, n + 1):\n    result *= i\n\nprint(result)",
        "response": "#include <iostream>\n\nint main() {\n  int n = 10;\n  int result = 1;\n\n  for (int i = 1; i <= n; ++i) {\n    result *= i;\n  }\n\n  std::cout << result << std::endl;\n\n  return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n  int n = 10;\n  int result = 1;\n\n  for (int i = 1; i <= n; ++i) {\n    result *= i;\n  }\n\n  std::cout << result << std::endl;\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a Python function that receives a list of numbers and returns the sum of all even numbers in the list.",
        "input": "",
        "response": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum",
        "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum"
    },
    {
        "instruction": "How can I calculate the Fibonacci sequence in Java up to a given number of terms?",
        "input": "",
        "response": "public static void main(String[] args) {\n    int n = 10; // Number of terms\n    int t1 = 0, t2 = 1;\n    System.out.print(\"First \" + n + \" terms: \");\n\n    for (int i = 1; i <= n; ++i) {\n        System.out.print(t1 + \" \");\n        int nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n    }\n}",
        "output": "public static void main(String[] args) {\n    int n = 10; // Number of terms\n    int t1 = 0, t2 = 1;\n    System.out.print(\"First \" + n + \" terms: \");\n\n    for (int i = 1; i <= n; ++i) {\n        System.out.print(t1 + \" \");\n        int nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n    }\n}"
    },
    {
        "instruction": "Create a C++ program that receives a string and displays the number of vowels in it.",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint count_vowels(string text) {\n    int count = 0;\n    for (char c : text) {\n        c = tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') count++;\n    }\n    return count;\n}\n\nint main() {\n    string input;\n    cout << \"Enter a string: \";\n    getline(cin, input);\n    cout << \"Number of vowels: \" << count_vowels(input) << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint count_vowels(string text) {\n    int count = 0;\n    for (char c : text) {\n        c = tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') count++;\n    }\n    return count;\n}\n\nint main() {\n    string input;\n    cout << \"Enter a string: \";\n    getline(cin, input);\n    cout << \"Number of vowels: \" << count_vowels(input) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Design a shell script that searches for all instances of a specified word in a text file.",
        "input": "word='example'\nfilename='sample.txt'",
        "response": "#!/bin/bash\n\nword='example'\nfilename='sample.txt'\ngrep -o -i $word $filename | wc -l",
        "output": "#!/bin/bash\n\nword='example'\nfilename='sample.txt'\ngrep -o -i $word $filename | wc -l"
    },
    {
        "instruction": "Write a simple JavaScript function to convert temperatures from Celsius to Fahrenheit.",
        "input": "",
        "response": "function celsiusToFahrenheit(celsius) {\n    return (celsius * 9/5) + 32;\n}",
        "output": "function celsiusToFahrenheit(celsius) {\n    return (celsius * 9/5) + 32;\n}"
    },
    {
        "instruction": "How would you implement a function in Python to remove duplicates from a given list of numbers?",
        "input": "[1, 2, 3, 4, 4, 5, 5, 6, 7, 7]",
        "response": "def remove_duplicates(numbers):\n    return list(set(numbers))\n\nnumbers = [1, 2, 3, 4, 4, 5, 5, 6, 7, 7]\nunique_numbers = remove_duplicates(numbers)",
        "output": "def remove_duplicates(numbers):\n    return list(set(numbers))\n\nnumbers = [1, 2, 3, 4, 4, 5, 5, 6, 7, 7]\nunique_numbers = remove_duplicates(numbers)"
    },
    {
        "instruction": "Write a Java function to reverse a given string without using any built-in functions.",
        "input": "Reverse the string 'hello world!'",
        "response": "public String reverseString(String str) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = str.length() - 1; i >= 0; i--) {\n        sb.append(str.charAt(i));\n    }\n    return sb.toString();\n}\n\nString input = \"hello world!\";\nString reversed = reverseString(input);",
        "output": "public String reverseString(String str) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = str.length() - 1; i >= 0; i--) {\n        sb.append(str.charAt(i));\n    }\n    return sb.toString();\n}\n\nString input = \"hello world!\";\nString reversed = reverseString(input);"
    },
    {
        "instruction": "Create a JavaScript function that retrieves the factorial of a non-negative integer.",
        "input": "",
        "response": "function factorial(n) {\n    if (n === 0) return 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}",
        "output": "function factorial(n) {\n    if (n === 0) return 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}"
    },
    {
        "instruction": "What would be the output of the following C++ snippet?",
        "input": "#include <iostream>\n\nint main() {\n    int a = 5;\n    int b = 10;\n    int c = a + b;\n    std::cout << \"The sum of \" << a << \" and \" << b << \" is \" << c;\n\n    return 0;\n}",
        "response": "The output would be:\n\nThe sum of 5 and 10 is 15",
        "output": "The output would be:\n\nThe sum of 5 and 10 is 15"
    },
    {
        "instruction": "Explain how to add elements to a dictionary in Python and provide an example.",
        "input": "",
        "response": "To add elements to a dictionary in Python, you can use the following syntax: dict[key] = value\n\nFor example:\n\ndict = {}\ndict['name'] = 'John'\ndict['age'] = 25\nprint(dict)\n\nOutput:\n{'name': 'John', 'age': 25}",
        "output": "To add elements to a dictionary in Python, you can use the following syntax: dict[key] = value\n\nFor example:\n\ndict = {}\ndict['name'] = 'John'\ndict['age'] = 25\nprint(dict)\n\nOutput:\n{'name': 'John', 'age': 25}"
    },
    {
        "instruction": "Create a Python function to perform a binary search on a given sorted list and return the index of the target element if found, or -1 if not found.",
        "input": "sample_list = [2, 4, 5, 6, 7, 10, 11, 15, 17, 20], target = 11",
        "response": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        mid_val = arr[mid]\n\n        if mid_val == target:\n            return mid\n        elif mid_val < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# Usage: binary_search(sample_list, target)",
        "output": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        mid_val = arr[mid]\n\n        if mid_val == target:\n            return mid\n        elif mid_val < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# Usage: binary_search(sample_list, target)"
    },
    {
        "instruction": "What would be the expected output of the following Java code snippet?\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for(int number : numbers) {\n            if(number % 2 != 0) {\n                sum += number;\n            }\n        }\n        System.out.println(sum);\n    }\n}",
        "input": "",
        "response": "9",
        "output": "9"
    },
    {
        "instruction": "Write a shell script to rename all txt files in the current directory to have a '.bak' extension.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *.txt\n do\n mv \"$file\" \"${file%.txt}.bak\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *.txt\n do\n mv \"$file\" \"${file%.txt}.bak\"\ndone"
    },
    {
        "instruction": "Convert the following Python code into equivalent JavaScript code:\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nprint(fibonacci(8))",
        "input": "",
        "response": "function fibonacci(n) {\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n\nconsole.log(fibonacci(8));",
        "output": "function fibonacci(n) {\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n\nconsole.log(fibonacci(8));"
    },
    {
        "instruction": "Create a Python function that takes a list of integers and returns a new list containing the square of each integer.",
        "input": "[2, 3, 4, 5]",
        "response": "def square_list(numbers):\n    return [n ** 2 for n in numbers]\n\ninput_list = [2, 3, 4, 5]\nsquared_list = square_list(input_list)\nprint(squared_list)",
        "output": "def square_list(numbers):\n    return [n ** 2 for n in numbers]\n\ninput_list = [2, 3, 4, 5]\nsquared_list = square_list(input_list)\nprint(squared_list)"
    },
    {
        "instruction": "What code changes would you suggest to make this simple JavaScript countdown function stop at zero?",
        "input": "function countdown(n) {\n  if (n < 0) {\n    return;\n  }\n  console.log(n);\n  setTimeout(function() {\n    countdown(n - 1);\n  }, 1000);\n}\ncountdown(10);",
        "response": "function countdown(n) {\n  if (n < 0) {\n    return;\n  }\n  console.log(n);\n  if (n > 0) {\n    setTimeout(function() {\n      countdown(n - 1);\n    }, 1000);\n  }\n}\ncountdown(10);",
        "output": "function countdown(n) {\n  if (n < 0) {\n    return;\n  }\n  console.log(n);\n  if (n > 0) {\n    setTimeout(function() {\n      countdown(n - 1);\n    }, 1000);\n  }\n}\ncountdown(10);"
    },
    {
        "instruction": "Write a Java function that accepts an array of integers and calculates the sum of all even numbers in the array.",
        "input": "int[] nums = {1, 2, 3, 4, 5, 6};",
        "response": "public static int sumEvenNumbers(int[] nums) {\n    int sum = 0;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\nint[] nums = {1, 2, 3, 4, 5, 6};\nint sum = sumEvenNumbers(nums);\nSystem.out.println(sum);",
        "output": "public static int sumEvenNumbers(int[] nums) {\n    int sum = 0;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\nint[] nums = {1, 2, 3, 4, 5, 6};\nint sum = sumEvenNumbers(nums);\nSystem.out.println(sum);"
    },
    {
        "instruction": "Rewrite the following Python code as a one-liner using a list comprehension.",
        "input": "squares = []\nfor x in range(10):\n    squares.append(x * x)",
        "response": "squares = [x * x for x in range(10)]",
        "output": "squares = [x * x for x in range(10)]"
    },
    {
        "instruction": "Write a JavaScript function that takes a string as an input and checks if it is a palindrome. A palindrome is a word, phrase, number, or another sequence of characters that reads the same forward and backward, ignoring whitespace and punctuation.",
        "input": "For example, the string 'A man, a plan, a canal. Panama.' should return true.",
        "response": "function isPalindrome(str) {\n    // Remove non-alphanumeric characters and convert to lowercase\n    str = str.replace(/[^A-Za-z0-9]/g, '').toLowerCase();\n    // Check if the string is equal to its reverse\n    return str === str.split('').reverse().join('');\n}",
        "output": "function isPalindrome(str) {\n    // Remove non-alphanumeric characters and convert to lowercase\n    str = str.replace(/[^A-Za-z0-9]/g, '').toLowerCase();\n    // Check if the string is equal to its reverse\n    return str === str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Create a Python class that represents a simple Bank Account with methods for depositing and withdrawing money, and checking the balance.",
        "input": "",
        "response": "class BankAccount:\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print('Insufficient balance')\n        return self.balance\n\n    def check_balance(self):\n        return self.balance",
        "output": "class BankAccount:\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n        else:\n            print('Insufficient balance')\n        return self.balance\n\n    def check_balance(self):\n        return self.balance"
    },
    {
        "instruction": "Given the following code snippet, can you identify a syntax error?",
        "input": "my_var = 10\n    your_var = 20\nprint(my_var + your_var)",
        "response": "There is an indentation error on the second line. It should be consistent with the rest of the code, like this:\n\nmy_var = 10\nyour_var = 20\nprint(my_var + your_var)",
        "output": "There is an indentation error on the second line. It should be consistent with the rest of the code, like this:\n\nmy_var = 10\nyour_var = 20\nprint(my_var + your_var)"
    },
    {
        "instruction": "Rewrite the following Python code using a list comprehension to accomplish the same goal.",
        "input": "numbers = [1, 2, 3, 4, 5]\ndoubled_numbers = []\nfor n in numbers:\n    doubled_numbers.append(n * 2)\nprint(doubled_numbers)",
        "response": "numbers = [1, 2, 3, 4, 5]\n# Using a list comprehension to double numbers\ndoubled_numbers = [n * 2 for n in numbers]\nprint(doubled_numbers)",
        "output": "numbers = [1, 2, 3, 4, 5]\n# Using a list comprehension to double numbers\ndoubled_numbers = [n * 2 for n in numbers]\nprint(doubled_numbers)"
    },
    {
        "instruction": "Create a Java function to calculate the area of a triangle given the length of its three sides.",
        "input": "",
        "response": "public double calculateTriangleArea(double sideA, double sideB, double sideC) {\n double s = (sideA + sideB + sideC) / 2;\n double area = Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC));\n return area;\n}",
        "output": "public double calculateTriangleArea(double sideA, double sideB, double sideC) {\n double s = (sideA + sideB + sideC) / 2;\n double area = Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC));\n return area;\n}"
    },
    {
        "instruction": "Write a Python function to find the longest word in a given sentence.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "def find_longest_word(sentence):\n words = sentence.split()\n longest_word = max(words, key=len)\n return longest_word\n\nsentence = 'The quick brown fox jumps over the lazy dog'\nprint(find_longest_word(sentence))",
        "output": "def find_longest_word(sentence):\n words = sentence.split()\n longest_word = max(words, key=len)\n return longest_word\n\nsentence = 'The quick brown fox jumps over the lazy dog'\nprint(find_longest_word(sentence))"
    },
    {
        "instruction": "Given a list of numbers in JavaScript, write code that calculates the sum of all numbers in the list.",
        "input": "[4, 7, 2, 9, 5]",
        "response": "const numbers = [4, 7, 2, 9, 5];\nconst sum = numbers.reduce((acc, curr) => acc + curr, 0);\nconsole.log(sum);",
        "output": "const numbers = [4, 7, 2, 9, 5];\nconst sum = numbers.reduce((acc, curr) => acc + curr, 0);\nconsole.log(sum);"
    },
    {
        "instruction": "Fix the syntax errors in the following C++ code that calculates the factorial of a number.",
        "input": "#include <iostream>\n\nint main() {\nint num, factorial = 1;\nstd::cout << \"Enter a positive integer: \";\nstd::cin >> num;\n\nfor (int i = 1; i <= num; ++i) {\nfactorial *= i;\n}\n\nstd::cout << \"Factorial of \" << num << \" = \" << factorial;\nreturn 0;\n}",
        "response": "There are no syntax errors in the given code. The code calculates the factorial of a number correctly.",
        "output": "There are no syntax errors in the given code. The code calculates the factorial of a number correctly."
    },
    {
        "instruction": "Translate the following JavaScript code to Python.",
        "input": "function isEven(num) {\n  return num % 2 === 0;\n}\n\nconsole.log(isEven(4));",
        "response": "def is_even(num):\n    return num % 2 == 0\n\nprint(is_even(4))",
        "output": "def is_even(num):\n    return num % 2 == 0\n\nprint(is_even(4))"
    },
    {
        "instruction": "Identify if the given code snippet has a syntax error and state which line the error is in, if any.",
        "input": "#include <iostream>\n\nint main() {\n  std::cout << \"Hello, World!\" << std::endl;\n  return 0;\n}",
        "response": "The given code snippet has no syntax errors.",
        "output": "The given code snippet has no syntax errors."
    },
    {
        "instruction": "Create a Java function to find the maximum of three integers.",
        "input": "",
        "response": "public int maxOfThree(int a, int b, int c) {\n    int max = a;\n    if (b > max) {\n        max = b;\n    }\n    if (c > max) {\n        max = c;\n    }\n    return max;\n}",
        "output": "public int maxOfThree(int a, int b, int c) {\n    int max = a;\n    if (b > max) {\n        max = b;\n    }\n    if (c > max) {\n        max = c;\n    }\n    return max;\n}"
    },
    {
        "instruction": "How would you write a Shell script that outputs the number of files in a directory?",
        "input": "",
        "response": "#!/bin/bash\n\ndir=$1\n\necho \"Number of files in $dir: $(find $dir -type f | wc -l)\"",
        "output": "#!/bin/bash\n\ndir=$1\n\necho \"Number of files in $dir: $(find $dir -type f | wc -l)\""
    },
    {
        "instruction": "Create a Python function that takes a list of integers as input and calculates the average of the numbers rounded to two decimal places.",
        "input": "[4, 6, 8, 2, 7]",
        "response": "def calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return round(average, 2)\n\ninput_list = [4, 6, 8, 2, 7]\nresult = calculate_average(input_list)\nprint(result)",
        "output": "def calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return round(average, 2)\n\ninput_list = [4, 6, 8, 2, 7]\nresult = calculate_average(input_list)\nprint(result)"
    },
    {
        "instruction": "Given a Java method signature, explain the meaning of the components and their access modifier, return type, method name, and arguments list.\n",
        "input": "private static int sum(int a, int b) { ... }",
        "response": "Access Modifier: private - This method can only be accessed within the class it is defined in.\n Modifier: static - This method belongs to the class and not an instance of the class.\n Return Type: int - This method will return an integer value.\n Method Name: sum - The method is named 'sum'.\n Arguments List: (int a, int b) - The method takes two integer input arguments, named 'a' and 'b'.",
        "output": "Access Modifier: private - This method can only be accessed within the class it is defined in.\n Modifier: static - This method belongs to the class and not an instance of the class.\n Return Type: int - This method will return an integer value.\n Method Name: sum - The method is named 'sum'.\n Arguments List: (int a, int b) - The method takes two integer input arguments, named 'a' and 'b'."
    },
    {
        "instruction": "What would be the equivalent code snippet in C# for the following Python function that concatenates two strings and returns the result?",
        "input": "def concatenate_strings(str1: str, str2: str) -> str:\n    return str1 + str2",
        "response": "public string ConcatenateStrings(string str1, string str2)\n{\n    return str1 + str2;\n}",
        "output": "public string ConcatenateStrings(string str1, string str2)\n{\n    return str1 + str2;\n}"
    },
    {
        "instruction": "Debug this shell script that is supposed to create a directory and navigate into it but fails to do so.",
        "input": "mkdir new_folder\ncd new_folder`\n",
        "response": "The shell script has a backtick (`) character after the 'cd new_folder' command, which is causing an error. Remove the character to fix the script.\n\nCorrected script:\n\nmkdir new_folder\ncd new_folder\n",
        "output": "The shell script has a backtick (`) character after the 'cd new_folder' command, which is causing an error. Remove the character to fix the script.\n\nCorrected script:\n\nmkdir new_folder\ncd new_folder\n"
    },
    {
        "instruction": "Write a JavaScript function that takes a phrase as input and returns the phrase reversed.",
        "input": "Hello, world!",
        "response": "function reversePhrase(phrase) {\n  return phrase.split('').reverse().join('');\n}\n\nconst reversed = reversePhrase('Hello, world!');\nconsole.log(reversed);",
        "output": "function reversePhrase(phrase) {\n  return phrase.split('').reverse().join('');\n}\n\nconst reversed = reversePhrase('Hello, world!');\nconsole.log(reversed);"
    },
    {
        "instruction": "Create a Python script that reads a CSV file called 'data.csv' and prints the number of rows and columns.",
        "input": "",
        "response": "import csv\n\nwith open('data.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    row_count = sum(1 for _ in reader)\n    csvfile.seek(0)\n    col_count = len(next(reader))\n\nprint(f'Rows: {row_count}, Columns: {col_count}')",
        "output": "import csv\n\nwith open('data.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    row_count = sum(1 for _ in reader)\n    csvfile.seek(0)\n    col_count = len(next(reader))\n\nprint(f'Rows: {row_count}, Columns: {col_count}')"
    },
    {
        "instruction": "How would you implement a simple HTTP server that serves static files from a folder called 'public' using Node.js and the 'express' library?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.static('public'));\n\napp.listen(port, () => {\n  console.log(`Server listening at http://localhost:${port}`);\n});",
        "output": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.static('public'));\n\napp.listen(port, () => {\n  console.log(`Server listening at http://localhost:${port}`);\n});"
    },
    {
        "instruction": "Fix the following Java code that should compare two strings (str1 and str2) and return true if they are equal, ignoring the case:",
        "input": "String str1 = \"Hello\";\nString str2 = \"hello\";",
        "response": "String str1 = \"Hello\";\nString str2 = \"hello\";\n\nboolean areEqual = str1.equalsIgnoreCase(str2);\nSystem.out.println(areEqual);",
        "output": "String str1 = \"Hello\";\nString str2 = \"hello\";\n\nboolean areEqual = str1.equalsIgnoreCase(str2);\nSystem.out.println(areEqual);"
    },
    {
        "instruction": "Create a JavaScript function that takes a string input and returns the string reversed.",
        "input": "",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Construct a Java function to find the greatest common divisor (GCD) of two given integers.",
        "input": "",
        "response": "public int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}",
        "output": "public int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}"
    },
    {
        "instruction": "What would be a simple C++ program to calculate the fibonacci sequence up to a certain value?",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    int n, t1 = 0, t2 = 1, nextTerm = 0;\n\n    std::cout << \"Enter an integer: \";\n    std::cin >> n;\n\n    for (int i = 1; i <= n; ++i) {\n        if(i == 1) {\n            std::cout << t1 << \", \";\n            continue;\n        }\n        if(i == 2) {\n            std::cout << t2 << \", \";\n            continue;\n        }\n        nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n        std::cout << nextTerm << \", \";\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int n, t1 = 0, t2 = 1, nextTerm = 0;\n\n    std::cout << \"Enter an integer: \";\n    std::cin >> n;\n\n    for (int i = 1; i <= n; ++i) {\n        if(i == 1) {\n            std::cout << t1 << \", \";\n            continue;\n        }\n        if(i == 2) {\n            std::cout << t2 << \", \";\n            continue;\n        }\n        nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n        std::cout << nextTerm << \", \";\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function that accepts a dictionary with username and password pairs and removes entries with passwords shorter than 8 characters.",
        "input": "",
        "response": "def remove_short_passwords(user_pass_dict):\n    return {username: password for username, password in user_pass_dict.items() if len(password) >= 8}",
        "output": "def remove_short_passwords(user_pass_dict):\n    return {username: password for username, password in user_pass_dict.items() if len(password) >= 8}"
    },
    {
        "instruction": "Write a Python function that takes a URL as an input, fetches the web page's content and counts the number of images on it.",
        "input": "",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n\ndef count_images(url):\n    # Fetch the web page content\n    response = requests.get(url)\n    \n    # Use BeautifulSoup to parse the web page\n    soup = BeautifulSoup(response.text, 'html.parser')\n    \n    # Count the number of <img> tags\n    image_count = len(soup.find_all('img'))\n    return image_count",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef count_images(url):\n    # Fetch the web page content\n    response = requests.get(url)\n    \n    # Use BeautifulSoup to parse the web page\n    soup = BeautifulSoup(response.text, 'html.parser')\n    \n    # Count the number of <img> tags\n    image_count = len(soup.find_all('img'))\n    return image_count"
    },
    {
        "instruction": "Translate the following Python code to JavaScript: vowels = {'a', 'e', 'i', 'o', 'u'}; def count_vowels(s): return sum(1 for c in s.lower() if c in vowels)",
        "input": "",
        "response": "const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n\nfunction count_vowels(s) {\n  return [...s.toLowerCase()].filter(c => vowels.has(c)).length;\n}",
        "output": "const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n\nfunction count_vowels(s) {\n  return [...s.toLowerCase()].filter(c => vowels.has(c)).length;\n}"
    },
    {
        "instruction": "How would you implement a simple directory listing in a Shell script, printing only the names and sizes of files and directories?",
        "input": "",
        "response": "#!/bin/bash\n\ndu -sh *",
        "output": "#!/bin/bash\n\ndu -sh *"
    },
    {
        "instruction": "Write a Java method that replaces all the spaces with a given character except for the first and last word in the input string. The function signature is: `public static String replaceSpaces(String str, char replacement)`. If the input string has less than three words, return the original string.",
        "input": "",
        "response": "public static String replaceSpaces(String str, char replacement) {\n  String[] words = str.split(' ');\n\n  if (words.length < 3) {\n    return str;\n  }\n\n  StringBuilder sb = new StringBuilder(words[0]);\n\n  for (int i = 1; i < words.length - 1; i++) {\n    sb.append(replacement).append(words[i]);\n  }\n\n  sb.append(' ').append(words[words.length - 1]);\n\n  return sb.toString();\n}",
        "output": "public static String replaceSpaces(String str, char replacement) {\n  String[] words = str.split(' ');\n\n  if (words.length < 3) {\n    return str;\n  }\n\n  StringBuilder sb = new StringBuilder(words[0]);\n\n  for (int i = 1; i < words.length - 1; i++) {\n    sb.append(replacement).append(words[i]);\n  }\n\n  sb.append(' ').append(words[words.length - 1]);\n\n  return sb.toString();\n}"
    },
    {
        "instruction": "Write a Python function that computes the greatest common divisor (GCD) of two integers.",
        "input": "",
        "response": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "output": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "instruction": "Create a Java program that calculates the Fibonacci sequence up to the specified number n.",
        "input": "",
        "response": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        for (int i = 0; i < n; i++) {\n            System.out.print(fibonacci(i) + \" \");\n        }\n    }\n\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}",
        "output": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        for (int i = 0; i < n; i++) {\n            System.out.print(fibonacci(i) + \" \");\n        }\n    }\n\n    public static int fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code to C++ code: \n\n```\ndef hello_world():\n    print(\"Hello, World!\")\n\nhello_world()\n```",
        "input": "",
        "response": "#include <iostream>\n\nvoid hello_world() {\n    std::cout << \"Hello, World!\" << std::endl;\n}\n\nint main() {\n    hello_world();\n    return 0;\n}",
        "output": "#include <iostream>\n\nvoid hello_world() {\n    std::cout << \"Hello, World!\" << std::endl;\n}\n\nint main() {\n    hello_world();\n    return 0;\n}"
    },
    {
        "instruction": "What would be the output of the following JavaScript code? Explain your answer. \n\n```javascript\nvar a = 5;\nvar b = a++;\nvar c = ++a;\nconsole.log(a, b, c);\n```",
        "input": "",
        "response": "The output would be: 7 5 7\n\nFirst, the value of 'a' is assigned to 'b' and then 'a' is incremented by 1. So, 'b' becomes 5 and 'a' becomes 6. Next, 'a' is incremented by 1 and then assigned to 'c'. So, 'a' becomes 7 and 'c' becomes 7. Finally, the console log prints the values of 'a', 'b', and 'c', resulting in '7 5 7'.",
        "output": "The output would be: 7 5 7\n\nFirst, the value of 'a' is assigned to 'b' and then 'a' is incremented by 1. So, 'b' becomes 5 and 'a' becomes 6. Next, 'a' is incremented by 1 and then assigned to 'c'. So, 'a' becomes 7 and 'c' becomes 7. Finally, the console log prints the values of 'a', 'b', and 'c', resulting in '7 5 7'."
    },
    {
        "instruction": "Create a Python function that finds the first N prime numbers, where N is a user-defined input.",
        "input": "5",
        "response": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef first_n_prime_numbers(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = 5\nprint(first_n_prime_numbers(n))",
        "output": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef first_n_prime_numbers(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = 5\nprint(first_n_prime_numbers(n))"
    },
    {
        "instruction": "How would you rewrite the following JavaScript code using arrow functions?",
        "input": "function double(x) {\n  return x * 2;\n}\n\nfunction square(x) {\n  return x ** 2;\n}",
        "response": "const double = x => x * 2;\n\nconst square = x => x ** 2;",
        "output": "const double = x => x * 2;\n\nconst square = x => x ** 2;"
    },
    {
        "instruction": "Given a shell script, explain the purpose of its contents and identify any problems.",
        "input": "#!/bin/bash\n\nDATADIR=data\nSAMPLEFILE=sample.txt\nOUTFILE=output.txt\n\necho \"Processing input data...\"\ni=0\nfor FILE in $DATADIR/*\ndo\n  i=$((i+1))\n  echo \"Processing $FILE...\"\n  cat $FILE >> $OUTFILE\ndone\necho \"Total files processed: $i\"",
        "response": "The shell script processes files available in the `data` directory and concatenates them into a single output file `output.txt`. Comments explaining steps are:\n\n1. Set environment variables covering data directory, sample file, and output file.\n2. Print a message about processing input data.\n3. Initialize a counter `i` to 0.\n4. Iterate over each file in the data directory.\n5. Increment the counter `i` in each iteration.\n6. Print a message about processing the current file.\n7. Concatenate the content of the current file to the output file.\n8. Print the total number of files processed.\n\nThe script is correct but has an unused variable `SAMPLEFILE`, which can be removed. Also, initial `echo` status can be changed from \"Processing input data...\" to \"Processing input files...\" for improved clarity.",
        "output": "The shell script processes files available in the `data` directory and concatenates them into a single output file `output.txt`. Comments explaining steps are:\n\n1. Set environment variables covering data directory, sample file, and output file.\n2. Print a message about processing input data.\n3. Initialize a counter `i` to 0.\n4. Iterate over each file in the data directory.\n5. Increment the counter `i` in each iteration.\n6. Print a message about processing the current file.\n7. Concatenate the content of the current file to the output file.\n8. Print the total number of files processed.\n\nThe script is correct but has an unused variable `SAMPLEFILE`, which can be removed. Also, initial `echo` status can be changed from \"Processing input data...\" to \"Processing input files...\" for improved clarity."
    },
    {
        "instruction": "Translate the following C# code to Java that calculates the sum of an integer array.",
        "input": "public static int Sum(int[] numbers) {\n  int sum = 0;\n  for (int number : numbers) {\n    sum += number;\n  }\n  return sum;\n}",
        "response": "public static int sum(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return sum;\n}",
        "output": "public static int sum(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Create a Java function that calculates the factorial of a given integer.",
        "input": "5",
        "response": "public static long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint number = 5;\nlong result = factorial(number);\nSystem.out.println(\"Factorial of \" + number + \" is \" + result);",
        "output": "public static long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint number = 5;\nlong result = factorial(number);\nSystem.out.println(\"Factorial of \" + number + \" is \" + result);"
    },
    {
        "instruction": "What is the expected output of this JavaScript code snippet? const numbers = [1, 3, 5, 7, 9]; const doubled = numbers.map(x => x * 2);",
        "input": "",
        "response": "The expected output of this JavaScript code snippet will be an array containing double of all the elements in the 'numbers' array: [2, 6, 10, 14, 18]",
        "output": "The expected output of this JavaScript code snippet will be an array containing double of all the elements in the 'numbers' array: [2, 6, 10, 14, 18]"
    },
    {
        "instruction": "Translate the following Python code into C++: def is_even(n): return n % 2 == 0",
        "input": "",
        "response": "#include <iostream>\n\nbool is_even(int n) {\n    return n % 2 == 0;\n}\n\nint main() {\n    int number = 6;\n    bool result = is_even(number);\n    std::cout << \"Is \" << number << \" even? \" << (result ? \"Yes\" : \"No\") << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nbool is_even(int n) {\n    return n % 2 == 0;\n}\n\nint main() {\n    int number = 6;\n    bool result = is_even(number);\n    std::cout << \"Is \" << number << \" even? \" << (result ? \"Yes\" : \"No\") << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Fix the possible syntax error in the following Python code: def find_longest_word(words_list):\n    word_len = []\n    for n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return word_len[-1][1]",
        "input": "",
        "response": "There is no syntax error in the provided Python code. The code defines a function that finds the longestword in a list of words.",
        "output": "There is no syntax error in the provided Python code. The code defines a function that finds the longestword in a list of words."
    },
    {
        "instruction": "Create a C++ function that calculates the area of a circle with a given radius.",
        "input": "3.5",
        "response": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.141592653589793238;\n\ndouble area_of_circle(double radius) {\n    return PI * pow(radius, 2);\n}\n\nint main() {\n    double radius = 3.5;\n    std::cout << \"Area of circle with radius \" << radius << \" is: \" << area_of_circle(radius) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n\nconst double PI = 3.141592653589793238;\n\ndouble area_of_circle(double radius) {\n    return PI * pow(radius, 2);\n}\n\nint main() {\n    double radius = 3.5;\n    std::cout << \"Area of circle with radius \" << radius << \" is: \" << area_of_circle(radius) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "In JavaScript, how can you find the length of the longest word in a given sentence?",
        "input": "The quick brown fox jumped over the lazy dog.",
        "response": "function findLongestWordLength(sentence) {\n    const words = sentence.split(' ');\n    let maxLength = 0;\n    for (const word of words) {\n        if (word.length > maxLength) {\n            maxLength = word.length;\n        }\n    }\n    return maxLength;\n}\n\nconst sentence = 'The quick brown fox jumped over the lazy dog.';\nconsole.log(findLongestWordLength(sentence));",
        "output": "function findLongestWordLength(sentence) {\n    const words = sentence.split(' ');\n    let maxLength = 0;\n    for (const word of words) {\n        if (word.length > maxLength) {\n            maxLength = word.length;\n        }\n    }\n    return maxLength;\n}\n\nconst sentence = 'The quick brown fox jumped over the lazy dog.';\nconsole.log(findLongestWordLength(sentence));"
    },
    {
        "instruction": "Write a Python function that reverses a given string and prints the result.",
        "input": "OpenAI GPT-3",
        "response": "def reverse_string(s):\n    return s[::-1]\n\ninput_string = 'OpenAI GPT-3'\nreversed_string = reverse_string(input_string)\nprint(reversed_string)",
        "output": "def reverse_string(s):\n    return s[::-1]\n\ninput_string = 'OpenAI GPT-3'\nreversed_string = reverse_string(input_string)\nprint(reversed_string)"
    },
    {
        "instruction": "In Java, implement a method that checks if a given number is prime.",
        "input": "13",
        "response": "public class Main {\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int num = 13;\n        System.out.println(\"The number \" + num + \" is prime: \" + isPrime(num));\n    }\n}",
        "output": "public class Main {\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int num = 13;\n        System.out.println(\"The number \" + num + \" is prime: \" + isPrime(num));\n    }\n}"
    },
    {
        "instruction": "Translate the following Java code to Python code:",
        "input": "public class Main {\n    public static void main(String[] args) {\n        int a = 5;\n        int b = 10;\n        int sum = a + b;\n        System.out.println(\"The sum is: \" + sum);\n    }\n}",
        "response": "def main():\n    a = 5\n    b = 10\n    sum = a + b\n    print(\"The sum is: \" + str(sum))\n\nmain()",
        "output": "def main():\n    a = 5\n    b = 10\n    sum = a + b\n    print(\"The sum is: \" + str(sum))\n\nmain()"
    },
    {
        "instruction": "What would be the output if you run the given JavaScript code?",
        "input": "function calculateArea(width, height) {\n    return width * height;\n}\n\nconsole.log(calculateArea(3, 5));",
        "response": "15",
        "output": "15"
    },
    {
        "instruction": "Create a C++ class called Animal with private member variables for name and weight, construct should be defined as well.",
        "input": "",
        "response": "#include <string>\n\nclass Animal {\nprivate:\n    std::string name;\n    double weight;\n\npublic:\n    Animal(std::string n, double w) : name(n), weight(w) {}\n};",
        "output": "#include <string>\n\nclass Animal {\nprivate:\n    std::string name;\n    double weight;\n\npublic:\n    Animal(std::string n, double w) : name(n), weight(w) {}\n};"
    },
    {
        "instruction": "Identify and fix the error in this given shell script, which intends to compute and print the average of three numbers",
        "input": "#!/bin/bash\n\nnum1=6\nnum2=12\nnum3=24\n\naverage=$((($num1 + num2 + $num3) / 3))\necho \"Average: $average\"",
        "response": "#!/bin/bash\n\nnum1=6\nnum2=12\nnum3=24\n\naverage=$((($num1 + $num2 + $num3) / 3))\necho \"Average: $average\"",
        "output": "#!/bin/bash\n\nnum1=6\nnum2=12\nnum3=24\n\naverage=$((($num1 + $num2 + $num3) / 3))\necho \"Average: $average\""
    },
    {
        "instruction": "Create a JavaScript function that takes a string as input and returns the string in reverse order.",
        "input": "Hello, GPT-3!",
        "response": "function reverseString(input) {\n    return input.split('').reverse().join('');\n}\n\nconst output = reverseString('Hello, GPT-3!');\nconsole.log(output);",
        "output": "function reverseString(input) {\n    return input.split('').reverse().join('');\n}\n\nconst output = reverseString('Hello, GPT-3!');\nconsole.log(output);"
    },
    {
        "instruction": "What would be an appropriate Java code for checking if a given number is a palindrome?",
        "input": "12321",
        "response": "public class PalindromeChecker {\n\n    public static void main(String[] args) {\n        int num = 12321;\n        System.out.println(isPalindrome(num));\n    }\n\n    public static boolean isPalindrome(int num) {\n        int reversedNum = 0;\n        int originalNum = num;\n\n        while (num != 0) {\n            int digit = num % 10;\n            reversedNum = reversedNum * 10 + digit;\n            num /= 10;\n        }\n\n        return originalNum == reversedNum;\n    }\n}",
        "output": "public class PalindromeChecker {\n\n    public static void main(String[] args) {\n        int num = 12321;\n        System.out.println(isPalindrome(num));\n    }\n\n    public static boolean isPalindrome(int num) {\n        int reversedNum = 0;\n        int originalNum = num;\n\n        while (num != 0) {\n            int digit = num % 10;\n            reversedNum = reversedNum * 10 + digit;\n            num /= 10;\n        }\n\n        return originalNum == reversedNum;\n    }\n}"
    },
    {
        "instruction": "Write a C++ code to find and print the largest element in an array.",
        "input": "int arr[] = {3, 7, 5, 33, 21, 4, 1};",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[] = {3, 7, 5, 33, 21, 4, 1};\n    int length = sizeof(arr) / sizeof(arr[0]);\n\n    int maxElement = arr[0];\n    for (int i = 1; i < length; i++) {\n        if (arr[i] > maxElement) {\n            maxElement = arr[i];\n        }\n    }\n\n    cout << \"Largest element in the array is: \" << maxElement << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[] = {3, 7, 5, 33, 21, 4, 1};\n    int length = sizeof(arr) / sizeof(arr[0]);\n\n    int maxElement = arr[0];\n    for (int i = 1; i < length; i++) {\n        if (arr[i] > maxElement) {\n            maxElement = arr[i];\n        }\n    }\n\n    cout << \"Largest element in the array is: \" << maxElement << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Please provide a Python code that takes a dictionary as input, and returns the key with the highest corresponding value.",
        "input": "{'apple': 12, 'banana': 6, 'orange': 9, 'grapes': 14}",
        "response": "def find_max_key(input_dict):\n    return max(input_dict, key=input_dict.get)\n\ninput_dict = {'apple': 12, 'banana': 6, 'orange': 9, 'grapes': 14}\nmax_key = find_max_key(input_dict)\nprint('Key with the highest value:', max_key)",
        "output": "def find_max_key(input_dict):\n    return max(input_dict, key=input_dict.get)\n\ninput_dict = {'apple': 12, 'banana': 6, 'orange': 9, 'grapes': 14}\nmax_key = find_max_key(input_dict)\nprint('Key with the highest value:', max_key)"
    },
    {
        "instruction": "Create a Java function that accepts an array of integers and returns their sum.",
        "input": "",
        "response": "public int sumArray(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return sum;\n}",
        "output": "public int sumArray(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Find and fix the error in this JavaScript function that aims to concatenate two arrays.",
        "input": "function concatenateArrays(arr1, arr2) {\n  let concatenated = [];\n  concatenated.pusharr1;\n  concatenated.pusharr2;\n  return concatenated;\n}",
        "response": "function concatenateArrays(arr1, arr2) {\n  let concatenated = [];\n  concatenated.push(...arr1);\n  concatenated.push(...arr2);\n  return concatenated;\n}",
        "output": "function concatenateArrays(arr1, arr2) {\n  let concatenated = [];\n  concatenated.push(...arr1);\n  concatenated.push(...arr2);\n  return concatenated;\n}"
    },
    {
        "instruction": "What will the below C++ code output?",
        "input": "#include<iostream>\n\nint main() {\n  int a = 6;\n  int b = 4;\n  std::cout << a / b << std::endl;\n  return 0;\n}",
        "response": "The output of the given C++ code will be '1'. The reason is that both 'a' and 'b' are integers, so the division of 'a' by 'b' will also be an integer, and the fractional part will be truncated.",
        "output": "The output of the given C++ code will be '1'. The reason is that both 'a' and 'b' are integers, so the division of 'a' by 'b' will also be an integer, and the fractional part will be truncated."
    },
    {
        "instruction": "Write a Python script to download and save JSON data from a given URL using the 'requests' library.",
        "input": "URL: https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\nimport json\n\nurl = \"https://jsonplaceholder.typicode.com/todos/1\"\nresponse = requests.get(url)\ndata = response.json()\n\nwith open('output.json', 'w') as f:\n    json.dump(data, f)",
        "output": "import requests\nimport json\n\nurl = \"https://jsonplaceholder.typicode.com/todos/1\"\nresponse = requests.get(url)\ndata = response.json()\n\nwith open('output.json', 'w') as f:\n    json.dump(data, f)"
    },
    {
        "instruction": "What would be the equivalent of the following Python code in C++? \nfor i in range(1, 11):\n    print(i)",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 10; ++i) {\n        std::cout << i << std::endl;\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 10; ++i) {\n        std::cout << i << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script that lists all directories inside a given folder, showing only their names.",
        "input": "",
        "response": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 <folder>\"\n  exit 1\nfi\n\ndirectory=\"$1\"\n\ncd \"$directory\" || exit\n\nfor dir in */;\ndo\n  echo \"${dir%/}\"\ndone",
        "output": "#!/bin/bash\n\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 <folder>\"\n  exit 1\nfi\n\ndirectory=\"$1\"\n\ncd \"$directory\" || exit\n\nfor dir in */;\ndo\n  echo \"${dir%/}\"\ndone"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of strings and returns the total number of characters in all of the strings combined.",
        "input": "",
        "response": "function characterCount(arrayOfStrings) {\n    let total = 0;\n    arrayOfStrings.forEach(str => {\n        total += str.length;\n    });\n    return total;\n}",
        "output": "function characterCount(arrayOfStrings) {\n    let total = 0;\n    arrayOfStrings.forEach(str => {\n        total += str.length;\n    });\n    return total;\n}"
    },
    {
        "instruction": "Create a Java program that prints out the first 10 Fibonacci numbers.",
        "input": "",
        "response": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        int a = 0;\n        int b = 1;\n        int temp;\n\n        for (int i = 0; i < n; i++) {\n            System.out.print(a + \" \");\n            temp = a + b;\n            a = b;\n            b = temp;\n        }\n    }\n}",
        "output": "public class Fibonacci {\n\n    public static void main(String[] args) {\n        int n = 10;\n        int a = 0;\n        int b = 1;\n        int temp;\n\n        for (int i = 0; i < n; i++) {\n            System.out.print(a + \" \");\n            temp = a + b;\n            a = b;\n            b = temp;\n        }\n    }\n}"
    },
    {
        "instruction": "How would you write a simple web server in Python using the Flask framework?",
        "input": "",
        "response": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run()",
        "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Write a function in C++ that takes an array of integers and its size, then returns the sum of all elements.",
        "input": "",
        "response": "#include<iostream>\nusing namespace std;\n\nint array_sum(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    cout << \"Sum of elements: \" << array_sum(arr, size) << endl;\n    return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint array_sum(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    cout << \"Sum of elements: \" << array_sum(arr, size) << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Translate the following JavaScript function that calculates the factorial of a number into a Python function.",
        "input": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns the count of vowels in the string.",
        "input": "For the input string: 'This is a random string.'",
        "response": "def count_vowels(input_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in input_str:\n        if char in vowels:\n            count += 1\n    return count\n\ninput_str = 'This is a random string.'\nprint(count_vowels(input_str))",
        "output": "def count_vowels(input_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in input_str:\n        if char in vowels:\n            count += 1\n    return count\n\ninput_str = 'This is a random string.'\nprint(count_vowels(input_str))"
    },
    {
        "instruction": "How can you implement a Java program that calculates the first 10 Fibonacci numbers?",
        "input": "",
        "response": "public class Fibonacci {\n    public static void main(String[] args) {\n        int n1 = 0, n2 = 1, sum;\n        System.out.print(n1 + \" \" + n2 + \" \");\n\n        for (int i = 2; i < 10; i++) {\n            sum = n1 + n2;\n            System.out.print(sum + \" \");\n            n1 = n2;\n            n2 = sum;\n        }\n    }\n}",
        "output": "public class Fibonacci {\n    public static void main(String[] args) {\n        int n1 = 0, n2 = 1, sum;\n        System.out.print(n1 + \" \" + n2 + \" \");\n\n        for (int i = 2; i < 10; i++) {\n            sum = n1 + n2;\n            System.out.print(sum + \" \");\n            n1 = n2;\n            n2 = sum;\n        }\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code into an equivalent C++ code: a = 5; b = 3; c = min(a, b); print(c);",
        "input": "",
        "response": "#include <iostream>\n#include <algorithm>\n\nint main() {\n    int a = 5;\n    int b = 3;\n    int c = std::min(a, b);\n    std::cout << c << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <algorithm>\n\nint main() {\n    int a = 5;\n    int b = 3;\n    int c = std::min(a, b);\n    std::cout << c << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns the sum of all the odd elements in the array.",
        "input": "Given the input array: [2, 7, 4, 3, 8, 1]",
        "response": "function sum_of_odds(arr) {\n    let sum = 0;\n    for (let num of arr) {\n        if (num % 2 !== 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\nconst input_array = [2, 7, 4, 3, 8, 1];\nconsole.log(sum_of_odds(input_array));",
        "output": "function sum_of_odds(arr) {\n    let sum = 0;\n    for (let num of arr) {\n        if (num % 2 !== 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\nconst input_array = [2, 7, 4, 3, 8, 1];\nconsole.log(sum_of_odds(input_array));"
    },
    {
        "instruction": "Create a JavaScript function that calculates the sum of all numbers in a provided array.",
        "input": "",
        "response": "function sumOfArray(numbers) {\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n}",
        "output": "function sumOfArray(numbers) {\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n}"
    },
    {
        "instruction": "How would you write a Java method that converts a given string to title case? Title case means that the first character of each word is capitalized and all the other characters are in lowercase.",
        "input": "",
        "response": "public String toTitleCase(String input) {\n  String[] words = input.split(\" \");\n  StringBuilder titleCase = new StringBuilder();\n\n  for (String word : words) {\n    if (word.length() > 0) {\n      titleCase.append(Character.toUpperCase(word.charAt(0)));\n      titleCase.append(word.substring(1).toLowerCase());\n    }\n    titleCase.append(\" \");\n  }\n\n  return titleCase.toString().trim();\n}",
        "output": "public String toTitleCase(String input) {\n  String[] words = input.split(\" \");\n  StringBuilder titleCase = new StringBuilder();\n\n  for (String word : words) {\n    if (word.length() > 0) {\n      titleCase.append(Character.toUpperCase(word.charAt(0)));\n      titleCase.append(word.substring(1).toLowerCase());\n    }\n    titleCase.append(\" \");\n  }\n\n  return titleCase.toString().trim();\n}"
    },
    {
        "instruction": "In Python, implement a function that takes a string and outputs a new string with each character repeated once, e.g. 'hello' becomes 'hheelllloo'.",
        "input": "",
        "response": "def repeat_chars(s):\n  return ''.join([c*2 for c in s])",
        "output": "def repeat_chars(s):\n  return ''.join([c*2 for c in s])"
    },
    {
        "instruction": "Write a C++ program that calculates and prints the factorial of a given positive integer n.",
        "input": "",
        "response": "#include <iostream>\n\nlong long factorial(int n) {\n  if (n == 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n;\n  std::cout << \"Enter a positive integer: \";\n  std::cin >> n;\n  std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nlong long factorial(int n) {\n  if (n == 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n;\n  std::cout << \"Enter a positive integer: \";\n  std::cin >> n;\n  std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Write a shell script that accepts a text string as a parameter and returns the number of characters in the string.",
        "input": "#!/bin/bash\n\ntext=\"This is a sample string.\"\n",
        "response": "#!/bin/bash\n\nfunction count_characters() {\n  input_text=\"$1\"\n  count=${#input_text}\n  echo $count\n}\n\ntext=\"This is a sample string.\"\nnum_characters=$(count_characters \"$text\")\necho \"The number of characters in the string is: $num_characters\"",
        "output": "#!/bin/bash\n\nfunction count_characters() {\n  input_text=\"$1\"\n  count=${#input_text}\n  echo $count\n}\n\ntext=\"This is a sample string.\"\nnum_characters=$(count_characters \"$text\")\necho \"The number of characters in the string is: $num_characters\""
    },
    {
        "instruction": "What is wrong with the following code snippet: 'def square(x): x * x'",
        "input": "def square(x):\n    x * x",
        "response": "The problem with the given code snippet is that it does not have a return statement. The correct function should be:\n\ndef square(x):\n    return x * x\n\nThis ensures that the function returns the square of the input parameter 'x'.",
        "output": "The problem with the given code snippet is that it does not have a return statement. The correct function should be:\n\ndef square(x):\n    return x * x\n\nThis ensures that the function returns the square of the input parameter 'x'."
    },
    {
        "instruction": "Translate the given JavaScript code into equivalent Python code.",
        "input": "function concatenateStrings(s1, s2) {\n  return s1 + ' ' + s2;\n}\n\nconsole.log(concatenateStrings('Hello', 'world'));",
        "response": "def concatenate_strings(s1, s2):\n    return s1 + ' ' + s2\n\nprint(concatenate_strings('Hello', 'world'))",
        "output": "def concatenate_strings(s1, s2):\n    return s1 + ' ' + s2\n\nprint(concatenate_strings('Hello', 'world'))"
    },
    {
        "instruction": "Create a Java program to check if a given word is a palindrome.",
        "input": "public class PalindromeChecker {\n\n    public static void main(String[] args) {\n        String word = \"racecar\";\n    }\n}",
        "response": "public class PalindromeChecker {\n\n    public static void main(String[] args) {\n        String word = \"racecar\";\n        System.out.println(isPalindrome(word));\n    }\n\n    public static boolean isPalindrome(String word) {\n        int start = 0;\n        int end = word.length() - 1;\n        while (start < end) {\n            if (word.charAt(start) != word.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}",
        "output": "public class PalindromeChecker {\n\n    public static void main(String[] args) {\n        String word = \"racecar\";\n        System.out.println(isPalindrome(word));\n    }\n\n    public static boolean isPalindrome(String word) {\n        int start = 0;\n        int end = word.length() - 1;\n        while (start < end) {\n            if (word.charAt(start) != word.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"
    },
    {
        "instruction": "Write a Java program that calculates the median of an array of integers.",
        "input": "int[] nums = {3, 7, 1, 4, 12, 6};",
        "response": "import java.util.Arrays;\n\npublic class MedianCalculator {\n    public static void main(String[] args) {\n        int[] nums = {3, 7, 1, 4, 12, 6};\n        System.out.println(findMedian(nums));\n    }\n\n    public static double findMedian(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        return (n % 2 == 0) ? (nums[n / 2 - 1] + nums[n / 2]) / 2.0 : nums[n / 2];\n    }\n}",
        "output": "import java.util.Arrays;\n\npublic class MedianCalculator {\n    public static void main(String[] args) {\n        int[] nums = {3, 7, 1, 4, 12, 6};\n        System.out.println(findMedian(nums));\n    }\n\n    public static double findMedian(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        return (n % 2 == 0) ? (nums[n / 2 - 1] + nums[n / 2]) / 2.0 : nums[n / 2];\n    }\n}"
    },
    {
        "instruction": "Create a Python script to download an image from a given URL and save it with a specific filename.",
        "input": "image_url = 'https://example.com/image.jpg';\nfilename = 'downloaded_image.jpg';",
        "response": "import requests\n\nimage_url = 'https://example.com/image.jpg'\nfilename = 'downloaded_image.jpg'\n\nresponse = requests.get(image_url, stream=True)\n\nif response.status_code == 200:\n    with open(filename, 'wb') as file:\n        for chunk in response.iter_content(1024):\n            file.write(chunk)\nelse:\n    print('Failed to download the image.')",
        "output": "import requests\n\nimage_url = 'https://example.com/image.jpg'\nfilename = 'downloaded_image.jpg'\n\nresponse = requests.get(image_url, stream=True)\n\nif response.status_code == 200:\n    with open(filename, 'wb') as file:\n        for chunk in response.iter_content(1024):\n            file.write(chunk)\nelse:\n    print('Failed to download the image.')"
    },
    {
        "instruction": "What would be the output? Explain the sample shell script",
        "input": "```\nA=2\nB=3\necho $(($A + $B))\n```",
        "response": "The output would be:`5`\n\nExplanation:\nThe shell script assigns two variables A and B with the values 2 and 3, respectively. Then, it uses the echo command to print the arithmetic result of the addition of the two variables ($(($A + $B)) is replaced with the result of the calculation $A + $B).",
        "output": "The output would be:`5`\n\nExplanation:\nThe shell script assigns two variables A and B with the values 2 and 3, respectively. Then, it uses the echo command to print the arithmetic result of the addition of the two variables ($(($A + $B)) is replaced with the result of the calculation $A + $B)."
    },
    {
        "instruction": "Translate the following JavaScript code into equivalent Python code.",
        "input": "function add(a, b) {\n    return a + b;\n}\n\nconsole.log(add(1, 2));",
        "response": "def add(a, b):\n    return a + b\n\nprint(add(1, 2))",
        "output": "def add(a, b):\n    return a + b\n\nprint(add(1, 2))"
    },
    {
        "instruction": "Create a JavaScript function that takes a string as input, and returns the string with all vowels (a, e, i, o, u) removed.",
        "input": "",
        "response": "function removeVowels(str) {\n  return str.replace(/[aeiou]/gi, '');\n}",
        "output": "function removeVowels(str) {\n  return str.replace(/[aeiou]/gi, '');\n}"
    },
    {
        "instruction": "What would be the expected output of this Python code? `print(', '.join(map(str, range(1, 11, 2))))`",
        "input": "",
        "response": "The expected output of the given Python code is: '1, 3, 5, 7, 9'",
        "output": "The expected output of the given Python code is: '1, 3, 5, 7, 9'"
    },
    {
        "instruction": "Write a Java method that accepts a list of integers as input and returns the sum of all even numbers in the list.",
        "input": "",
        "response": "public int sumOfEvenNumbers(List<Integer> numbers) {\n    int sum = 0;\n    for (Integer number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumOfEvenNumbers(List<Integer> numbers) {\n    int sum = 0;\n    for (Integer number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Given a C++ code snippet, identify if it properly declares a vector of strings. If it does not, provide the corrected code.",
        "input": "std::vector<std::string> myVector;",
        "response": "The given C++ code properly declares a vector of strings. No corrections needed.",
        "output": "The given C++ code properly declares a vector of strings. No corrections needed."
    },
    {
        "instruction": "Create a Java program to calculate the area of a circle using a given radius.",
        "input": "4",
        "response": "public class CircleArea {\n\n    public static double calculateArea(double radius) {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public static void main(String[] args) {\n        double radius = 4;\n        double area = calculateArea(radius);\n        System.out.println(\"The area of the circle with radius \" + radius + \" is: \" + area);\n    }\n}",
        "output": "public class CircleArea {\n\n    public static double calculateArea(double radius) {\n        return Math.PI * Math.pow(radius, 2);\n    }\n\n    public static void main(String[] args) {\n        double radius = 4;\n        double area = calculateArea(radius);\n        System.out.println(\"The area of the circle with radius \" + radius + \" is: \" + area);\n    }\n}"
    },
    {
        "instruction": "How would you translate the following Python code into JavaScript? def add(a, b): return a + b",
        "input": "",
        "response": "function add(a, b) {\n    return a + b;\n}",
        "output": "function add(a, b) {\n    return a + b;\n}"
    },
    {
        "instruction": "Write a C++ function that takes a string and returns its length without using any string library functions.",
        "input": "Hello, World!",
        "response": "#include <iostream>\n\nint stringLength(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}\n\nint main() {\n    const char *inputStr = \"Hello, World!\";\n    int length = stringLength(inputStr);\n    std::cout << \"The length of the input string is: \" << length << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint stringLength(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}\n\nint main() {\n    const char *inputStr = \"Hello, World!\";\n    int length = stringLength(inputStr);\n    std::cout << \"The length of the input string is: \" << length << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python script that reads a CSV file and prints the contents to the console using the csv library.",
        "input": "sample.csv",
        "response": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, mode='r') as file:\n    csv_reader = csv.reader(file)\n    for row in csv_reader:\n        print(', '.join(row))",
        "output": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, mode='r') as file:\n    csv_reader = csv.reader(file)\n    for row in csv_reader:\n        print(', '.join(row))"
    },
    {
        "instruction": "Create a Java function that takes an array of integers and returns the sum of all elements.",
        "input": "",
        "response": "public int sumArray(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "output": "public int sumArray(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "How can I implement a C++ function that calculates the length of a string without using the standard library?",
        "input": "",
        "response": "size_t strlen(const char* str) {\n    size_t length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}",
        "output": "size_t strlen(const char* str) {\n    size_t length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}"
    },
    {
        "instruction": "Fix the following Python code that's supposed to return the factorial of a given number 'n' using recursion, but has a syntax error:",
        "input": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n x factorial(n-1)",
        "response": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "output": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "instruction": "Translate the following JavaScript code into an equivalent C# code. The code should accept an array of integers and return the average of the elements:",
        "input": "function average(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}",
        "response": "public static double Average(int[] numbers) {\n    int sum = 0;\n    for (int i = 0; i < numbers.Length; i++) {\n        sum += numbers[i];\n    }\n    return (double)sum / numbers.Length;\n}",
        "output": "public static double Average(int[] numbers) {\n    int sum = 0;\n    for (int i = 0; i < numbers.Length; i++) {\n        sum += numbers[i];\n    }\n    return (double)sum / numbers.Length;\n}"
    },
    {
        "instruction": "Implement a Python function that calculates and returns the number of vowels in a given string.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\ninput_string = 'The quick brown fox jumps over the lazy dog.'\nprint(count_vowels(input_string))",
        "output": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\ninput_string = 'The quick brown fox jumps over the lazy dog.'\nprint(count_vowels(input_string))"
    },
    {
        "instruction": "Given a piece of Java code, find and fix the syntax error.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.Println('Hello, world!');\n    }\n}",
        "response": "public class HelloWorld {\n    public static void main(String[] args) {\n        // Fixed the syntax error by changing 'System.out.Println' to 'System.out.println'\n        System.out.println('Hello, world!');\n    }\n}",
        "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        // Fixed the syntax error by changing 'System.out.Println' to 'System.out.println'\n        System.out.println('Hello, world!');\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code snippet into equivalent JavaScript code: 'list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5, 6]))'",
        "input": "",
        "response": "const numbers = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = numbers.filter((x) => x % 2 === 0);\nconsole.log(evenNumbers);",
        "output": "const numbers = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = numbers.filter((x) => x % 2 === 0);\nconsole.log(evenNumbers);"
    },
    {
        "instruction": "Create a C++ program that reads a user's name and age and outputs a greeting with the user's name and the age they'll be next year.",
        "input": "Alice\n30",
        "response": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Hello, \" << name << \"! Next year you will be \" << (age + 1) << \" years old.\\n\";\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string name;\n    int age;\n\n    std::cout << \"Enter your name: \";\n    std::getline(std::cin, name);\n\n    std::cout << \"Enter your age: \";\n    std::cin >> age;\n\n    std::cout << \"Hello, \" << name << \"! Next year you will be \" << (age + 1) << \" years old.\\n\";\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a program that accepts a list of words and returns the longest word with its length in Python.",
        "input": "['apple', 'banana', 'blueberry', 'kiwi', 'grapes']",
        "response": "def find_longest_word(words):\n    longest_word = ''\n    max_length = 0\n\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n\n    return longest_word, max_length\n\nwords = ['apple', 'banana', 'blueberry', 'kiwi', 'grapes']\nprint(find_longest_word(words))",
        "output": "def find_longest_word(words):\n    longest_word = ''\n    max_length = 0\n\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n\n    return longest_word, max_length\n\nwords = ['apple', 'banana', 'blueberry', 'kiwi', 'grapes']\nprint(find_longest_word(words))"
    },
    {
        "instruction": "Translate the following JavaScript function that calculates the factorial of a number into a function written in C++.",
        "input": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}",
        "response": "#include <iostream>\n\nint factorial(int n) {\n  if (n == 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n = 5;\n  std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n  if (n == 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nint main() {\n  int n = 5;\n  std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Refactor the given Python code snippet to use a list comprehension instead of the 'for loop'.",
        "input": "squares = []\nfor x in range(10):\n    squares.append(x**2)",
        "response": "squares = [x**2 for x in range(10)]",
        "output": "squares = [x**2 for x in range(10)]"
    },
    {
        "instruction": "What is the expected output of the given Java code?",
        "input": "public class Main {\n  public static void main(String[] args) {\n    int a = 5;\n    int b = 3;\n    int c = a * b;\n    System.out.println(c);\n  }\n}",
        "response": "The expected output of the given Java code is:\n\n15",
        "output": "The expected output of the given Java code is:\n\n15"
    },
    {
        "instruction": "Create a Python function that accepts a list and returns the unique elements in the list without duplicates. The output should be sorted in ascending order.",
        "input": "",
        "response": "def unique_elements(input_list):\n    unique_list = list(set(input_list))\n    unique_list.sort()\n    return unique_list",
        "output": "def unique_elements(input_list):\n    unique_list = list(set(input_list))\n    unique_list.sort()\n    return unique_list"
    },
    {
        "instruction": "Translate the following Python code snippet into an equivalent piece of JavaScript code:",
        "input": "def multiply(a, b):\n    return a * b\n\nresult = multiply(5, 6)\nprint(result)",
        "response": "function multiply(a, b) {\n    return a * b;\n}\n\nlet result = multiply(5, 6);\nconsole.log(result);",
        "output": "function multiply(a, b) {\n    return a * b;\n}\n\nlet result = multiply(5, 6);\nconsole.log(result);"
    },
    {
        "instruction": "What would be the expected output of this Java code?",
        "input": "public class Main {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        System.out.println(Sum(a - 5, b + 5));\n    }\n\n    public static int Sum(int a, int b) {\n        return a + b;\n    }\n}",
        "response": "30",
        "output": "30"
    },
    {
        "instruction": "Debug the following C++ code to find the factorial of a given number n:",
        "input": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, factorial = 1;\n    cin >> n;\n\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\ncout << \"Factorial: \" << factorial\n\n    return 0;\n}",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, factorial = 1;\n    cin >> n;\n\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\n    cout << \"Factorial: \" << factorial << endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, factorial = 1;\n    cin >> n;\n\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\n    cout << \"Factorial: \" << factorial << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function that accepts a string and returns a dictionary containing the frequency of each character in the string.",
        "input": "",
        "response": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq",
        "output": "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq"
    },
    {
        "instruction": "Write a Java method that converts a string containing a binary number to its decimal equivalent.",
        "input": "",
        "response": "public int binaryToDecimal(String binary) {\n    int decimal = 0;\n    int length = binary.length() - 1;\n    for (int i = 0; i <= length; i++) {\n        if (binary.charAt(i) == '1') {\n            decimal += Math.pow(2, length - i);\n        }\n    }\n    return decimal;\n}",
        "output": "public int binaryToDecimal(String binary) {\n    int decimal = 0;\n    int length = binary.length() - 1;\n    for (int i = 0; i <= length; i++) {\n        if (binary.charAt(i) == '1') {\n            decimal += Math.pow(2, length - i);\n        }\n    }\n    return decimal;\n}"
    },
    {
        "instruction": "Translate the following Python code into equivalent JavaScript code.",
        "input": "def slice_string(input_string, start, end):\n    return input_string[start:end]",
        "response": "function sliceString(inputString, start, end) {\n    return inputString.slice(start, end);\n}",
        "output": "function sliceString(inputString, start, end) {\n    return inputString.slice(start, end);\n}"
    },
    {
        "instruction": "Create a Python function that merges two dictionaries without altering the original dictionaries.",
        "input": "dict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}",
        "response": "def merge_dicts(dict1, dict2):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict\n\n# Example usage:\n# merged_dict = merge_dicts(dict1, dict2)\n# print(merged_dict)",
        "output": "def merge_dicts(dict1, dict2):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict\n\n# Example usage:\n# merged_dict = merge_dicts(dict1, dict2)\n# print(merged_dict)"
    },
    {
        "instruction": "Convert the following JavaScript function to its equivalent in C++:",
        "input": "function factorial(n) {\n if (n === 0) {\n return 1;\n } else {\n return n * factorial(n - 1);\n }\n}",
        "response": "#include <iostream>\n\nint factorial(int n) {\n if (n == 0) {\n return 1;\n } else {\n return n * factorial(n - 1);\n }\n}\n\nint main() {\n int n = 5;\n std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n return 0;\n}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n if (n == 0) {\n return 1;\n } else {\n return n * factorial(n - 1);\n }\n}\n\nint main() {\n int n = 5;\n std::cout << \"Factorial of \" << n << \" is: \" << factorial(n) << std::endl;\n return 0;\n}"
    },
    {
        "instruction": "Inspect the following Python code and explain what elements it retrieves from the list.",
        "input": "input_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\nresult = input_list[1:9:2]",
        "response": "The code retrieves a new list consisting of elements from positions 1 (inclusive) to 9 (exclusive) of 'input_list', with a step of 2. That is, it gets elements at positions 1, 3, 5, and 7. In this example, the resultant list is ['b', 'd', 'f', 'h'].",
        "output": "The code retrieves a new list consisting of elements from positions 1 (inclusive) to 9 (exclusive) of 'input_list', with a step of 2. That is, it gets elements at positions 1, 3, 5, and 7. In this example, the resultant list is ['b', 'd', 'f', 'h']."
    },
    {
        "instruction": "Create a function in JavaScript that calculates the factorial of a given positive integer using recursion.",
        "input": "",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Using Python, write a program to determine if a given string is a palindrome or not, ignoring spaces, punctuation, and capitalization.",
        "input": "",
        "response": "def is_palindrome(s):\n    stripped_s = ''.join(c.lower() for c in s if c.isalnum())\n    return stripped_s == stripped_s[::-1]",
        "output": "def is_palindrome(s):\n    stripped_s = ''.join(c.lower() for c in s if c.isalnum())\n    return stripped_s == stripped_s[::-1]"
    },
    {
        "instruction": "What would be the result of executing the following Java code? Explain the output.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        int x = 10;\n        int y = x++ + ++x;\n        System.out.println(y);\n    }\n}",
        "response": "22\n\nThe output is 22 because when y is calculated, x++ is a post-increment operation, meaning x is first used as 10 then incremented to 11. After that, ++x is a pre-increment operation, so x is incremented to 12 before being used. The final expression is 10 + 12, which equals 22.",
        "output": "22\n\nThe output is 22 because when y is calculated, x++ is a post-increment operation, meaning x is first used as 10 then incremented to 11. After that, ++x is a pre-increment operation, so x is incremented to 12 before being used. The final expression is 10 + 12, which equals 22."
    },
    {
        "instruction": "Write a function in C++ to find the largest element in a given array using pointers.",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nint findLargest(int* arr, int size) {\n    int max = *arr;\n    for(int i = 1; i < size; ++i) {\n        if(*(arr + i) > max) {\n            max = *(arr + i);\n        }\n    }\n    return max;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint findLargest(int* arr, int size) {\n    int max = *arr;\n    for(int i = 1; i < size; ++i) {\n        if(*(arr + i) > max) {\n            max = *(arr + i);\n        }\n    }\n    return max;\n}"
    },
    {
        "instruction": "Create a JavaScript function to calculate the average of an array of numbers.",
        "input": "[10, 20, 30, 40, 50]",
        "response": "function average(numbers) {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const avg = sum / numbers.length;\n  return avg;\n}\n\nconst numbers = [10, 20, 30, 40, 50];\nconst result = average(numbers);\nconsole.log(result);",
        "output": "function average(numbers) {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const avg = sum / numbers.length;\n  return avg;\n}\n\nconst numbers = [10, 20, 30, 40, 50];\nconst result = average(numbers);\nconsole.log(result);"
    },
    {
        "instruction": "How would you write a C# method to reverse a string without using the built-in Reverse() function?",
        "input": "\"Hello, World!\"",
        "response": "using System;\n\nclass Program {\n  static string ReverseString(string input) {\n    char[] chars = input.ToCharArray();\n    int start = 0, end = chars.Length - 1;\n    while (start < end) {\n      char temp = chars[start];\n      chars[start] = chars[end];\n      chars[end] = temp;\n      start++;\n      end--;\n    }\n    return new string(chars);\n  }\n\n  static void Main() {\n    string input = \"Hello, World!\";\n    string result = ReverseString(input);\n    Console.WriteLine(result);\n  }\n}",
        "output": "using System;\n\nclass Program {\n  static string ReverseString(string input) {\n    char[] chars = input.ToCharArray();\n    int start = 0, end = chars.Length - 1;\n    while (start < end) {\n      char temp = chars[start];\n      chars[start] = chars[end];\n      chars[end] = temp;\n      start++;\n      end--;\n    }\n    return new string(chars);\n  }\n\n  static void Main() {\n    string input = \"Hello, World!\";\n    string result = ReverseString(input);\n    Console.WriteLine(result);\n  }\n}"
    },
    {
        "instruction": "Write a Java program to count the occurrences of a character in a given string.",
        "input": "\"programming\", 'g'",
        "response": "public class CharacterCounter {\n\n  public static int countOccurrences(String input, char target) {\n    int count = 0;\n    for (int i = 0; i < input.length(); i++) {\n      if (input.charAt(i) == target) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    String input = \"programming\";\n    char target = 'g';\n    int occurrences = countOccurrences(input, target);\n    System.out.println(occurrences);\n  }\n}",
        "output": "public class CharacterCounter {\n\n  public static int countOccurrences(String input, char target) {\n    int count = 0;\n    for (int i = 0; i < input.length(); i++) {\n      if (input.charAt(i) == target) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    String input = \"programming\";\n    char target = 'g';\n    int occurrences = countOccurrences(input, target);\n    System.out.println(occurrences);\n  }\n}"
    },
    {
        "instruction": "Implement a Python function that takes a list of numbers and sorts them using the bubble sort algorithm.",
        "input": "[4, 3, 9, 1, 5]",
        "response": "def bubble_sort(numbers):\n  n = len(numbers)\n  for i in range(n):\n    for j in range(0, n - i - 1):\n      if numbers[j] > numbers[j + 1]:\n        numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n\n\nnumbers = [4, 3, 9, 1, 5]\nbubble_sort(numbers)\nprint(numbers)",
        "output": "def bubble_sort(numbers):\n  n = len(numbers)\n  for i in range(n):\n    for j in range(0, n - i - 1):\n      if numbers[j] > numbers[j + 1]:\n        numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n\n\nnumbers = [4, 3, 9, 1, 5]\nbubble_sort(numbers)\nprint(numbers)"
    },
    {
        "instruction": "Create a function that removes vowels from a given string and returns the modified string, written in Python.",
        "input": "",
        "response": "def remove_vowels(input_string):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in input_string if char not in vowels])",
        "output": "def remove_vowels(input_string):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in input_string if char not in vowels])"
    },
    {
        "instruction": "Translate the following Python code to C++: def add_numbers(a, b): return a + b",
        "input": "",
        "response": "#include<iostream>\n\nint add_numbers(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int a = 5;\n    int b = 3;\n    std::cout << add_numbers(a, b) << std::endl;\n    return 0;\n}",
        "output": "#include<iostream>\n\nint add_numbers(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int a = 5;\n    int b = 3;\n    std::cout << add_numbers(a, b) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "What changes should be made to the given Python code to handle exceptions correctly? input_list = [1, 2, 'three', 4, 5] sum_values = sum(input_list)",
        "input": "",
        "response": "input_list = [1, 2, 'three', 4, 5]\n\n# Wrap the summation in a function\ndef sum_values(input_list):\n    total = 0\n    for value in input_list:\n        # Check if the value is a number (int or float)\n        if isinstance(value, (int, float)):\n            total += value\n        # Print a message for any non-numeric values encountered\n        else:\n            print(f'Non-numeric value encountered: {value}')\n\n    return total\n\n# Call the function\nsum_values = sum_values(input_list)",
        "output": "input_list = [1, 2, 'three', 4, 5]\n\n# Wrap the summation in a function\ndef sum_values(input_list):\n    total = 0\n    for value in input_list:\n        # Check if the value is a number (int or float)\n        if isinstance(value, (int, float)):\n            total += value\n        # Print a message for any non-numeric values encountered\n        else:\n            print(f'Non-numeric value encountered: {value}')\n\n    return total\n\n# Call the function\nsum_values = sum_values(input_list)"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns their average.",
        "input": "",
        "response": "function average(numbers) {\n    var total = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        total += numbers[i];\n    }\n    return total / numbers.length;\n}",
        "output": "function average(numbers) {\n    var total = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        total += numbers[i];\n    }\n    return total / numbers.length;\n}"
    },
    {
        "instruction": "Create a C++ function that takes two integers as input and returns their greatest common divisor (GCD) using the Euclidean algorithm.",
        "input": "",
        "response": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n    std::cout << \"GCD of \" << num1 << \" and \" << num2 << \" is \" << gcd(num1, num2) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}\n\nint main() {\n    int num1, num2;\n    std::cout << \"Enter two integers: \";\n    std::cin >> num1 >> num2;\n    std::cout << \"GCD of \" << num1 << \" and \" << num2 << \" is \" << gcd(num1, num2) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "What would be a Python script to read the content of a CSV file and calculate the average value of a specific column?",
        "input": "sample.csv: \nName,Age,Salary\nAlice,32,60000\nBob,45,80000\nEve,28,50000\n",
        "response": "import csv\n\ndef calculate_average(filename, column):\n  total = 0\n  count = 0\n  with open(filename, 'r') as csvfile:\n    reader = csv.DictReader(csvfile)\n    for row in reader:\n      total += float(row[column])\n      count += 1\n  return total / count if count > 0 else 0\n\nfilename = 'sample.csv'\ncolumn = 'Salary'\nprint(f'Average {column}: {calculate_average(filename, column)}')",
        "output": "import csv\n\ndef calculate_average(filename, column):\n  total = 0\n  count = 0\n  with open(filename, 'r') as csvfile:\n    reader = csv.DictReader(csvfile)\n    for row in reader:\n      total += float(row[column])\n      count += 1\n  return total / count if count > 0 else 0\n\nfilename = 'sample.csv'\ncolumn = 'Salary'\nprint(f'Average {column}: {calculate_average(filename, column)}')"
    },
    {
        "instruction": "Implement a Java method that takes two strings as input, concatenates them and returns the resulting string in reverse order.",
        "input": "",
        "response": "public class Main {\n\n  public static String concatenateAndReverse(String str1, String str2) {\n    String concatenated = str1 + str2;\n    StringBuilder reversed = new StringBuilder(concatenated);\n    return reversed.reverse().toString();\n  }\n\n  public static void main(String[] args) {\n    String str1 = \"Hello\";\n    String str2 = \"World\";\n    System.out.println(concatenateAndReverse(str1, str2));\n  }\n}",
        "output": "public class Main {\n\n  public static String concatenateAndReverse(String str1, String str2) {\n    String concatenated = str1 + str2;\n    StringBuilder reversed = new StringBuilder(concatenated);\n    return reversed.reverse().toString();\n  }\n\n  public static void main(String[] args) {\n    String str1 = \"Hello\";\n    String str2 = \"World\";\n    System.out.println(concatenateAndReverse(str1, str2));\n  }\n}"
    },
    {
        "instruction": "Construct a JavaScript function that takes an array of numbers and returns an array of the squares of those numbers.",
        "input": "",
        "response": "function squareArray(numbers) {\n  return numbers.map(function(num) {\n    return num * num;\n  });\n}\n\nvar numbers = [1, 2, 3, 4, 5];\nvar squaredNumbers = squareArray(numbers);\nconsole.log(squaredNumbers);",
        "output": "function squareArray(numbers) {\n  return numbers.map(function(num) {\n    return num * num;\n  });\n}\n\nvar numbers = [1, 2, 3, 4, 5];\nvar squaredNumbers = squareArray(numbers);\nconsole.log(squaredNumbers);"
    },
    {
        "instruction": "Design a Python function that accepts a list of strings and returns a dictionary with the strings as keys and the length of each string as values.",
        "input": "['apple', 'banana', 'cherry']",
        "response": "def string_length_dict(words):\n    result = {}\n    for word in words:\n        result[word] = len(word)\n    return result\n\ninput_list = ['apple', 'banana', 'cherry']\noutput_dict = string_length_dict(input_list)\nprint(output_dict)",
        "output": "def string_length_dict(words):\n    result = {}\n    for word in words:\n        result[word] = len(word)\n    return result\n\ninput_list = ['apple', 'banana', 'cherry']\noutput_dict = string_length_dict(input_list)\nprint(output_dict)"
    },
    {
        "instruction": "What is the equivalent C# code for this Java function that calculates factorial of a number recursively?",
        "input": "public int factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "response": "public int Factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * Factorial(n - 1);\n}",
        "output": "public int Factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * Factorial(n - 1);\n}"
    },
    {
        "instruction": "Create a Shell script that takes a file path as input and displays the number of lines, words, and characters in the file.",
        "input": "/path/to/your/file.txt",
        "response": "#!/bin/bash\n\nfile_path=\"$1\"\n\nlines=$(wc -l < \"$file_path\")\nwords=$(wc -w < \"$file_path\")\ncharacters=$(wc -c < \"$file_path\")\n\necho \"Lines: $lines\"\necho \"Words: $words\"\necho \"Characters: $characters\"",
        "output": "#!/bin/bash\n\nfile_path=\"$1\"\n\nlines=$(wc -l < \"$file_path\")\nwords=$(wc -w < \"$file_path\")\ncharacters=$(wc -c < \"$file_path\")\n\necho \"Lines: $lines\"\necho \"Words: $words\"\necho \"Characters: $characters\""
    },
    {
        "instruction": "Using JavaScript, implement a function called 'findLargest' that takes an array of numbers and returns the largest number.",
        "input": "[23, 77, 41, 86, 35]",
        "response": "function findLargest(nums) {\n    let largest = nums[0];\n    for (const num of nums) {\n        if (num > largest) {\n            largest = num;\n        }\n    }\n    return largest;\n}\n\nconst inputArray = [23, 77, 41, 86, 35];\nconst largestNumber = findLargest(inputArray);\nconsole.log(largestNumber);",
        "output": "function findLargest(nums) {\n    let largest = nums[0];\n    for (const num of nums) {\n        if (num > largest) {\n            largest = num;\n        }\n    }\n    return largest;\n}\n\nconst inputArray = [23, 77, 41, 86, 35];\nconst largestNumber = findLargest(inputArray);\nconsole.log(largestNumber);"
    },
    {
        "instruction": "Create a Python function that calculates the nth Fibonacci number using recursion.",
        "input": "n = 5",
        "response": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 5\nresult = fibonacci(n)\nprint(f'The {n}th Fibonacci number is: {result}')",
        "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 5\nresult = fibonacci(n)\nprint(f'The {n}th Fibonacci number is: {result}')"
    },
    {
        "instruction": "Demonstrate how to perform HTTP GET request using JavaScript fetch API to retrieve data from the following JSON placeholder API URL: 'https://jsonplaceholder.typicode.com/todos/1'",
        "input": "",
        "response": "const fetchData = async () => {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n\nfetchData();",
        "output": "const fetchData = async () => {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n\nfetchData();"
    },
    {
        "instruction": "Translate the following JavaScript closure example into a Python equivalent with the use of a generator function. JavaScript code: `function counter() { let count = 0; return () => { count += 1; return count; }; } const myCounter = counter(); console.log(myCounter()); console.log(myCounter());`",
        "input": "myCounter() -> 1\nmyCounter() -> 2",
        "response": "def counter():\n    count = 0\n    while True:\n        count += 1\n        yield count\n\n\nmyCounter = counter()\nprint(next(myCounter))\nprint(next(myCounter))",
        "output": "def counter():\n    count = 0\n    while True:\n        count += 1\n        yield count\n\n\nmyCounter = counter()\nprint(next(myCounter))\nprint(next(myCounter))"
    },
    {
        "instruction": "Write an SQL query to fetch employees' names (column 'name') and hire dates (column 'hire_date') from a table called 'employees' where the hire_date is between '2020-01-01' and '2020-12-31'.",
        "input": "table: employees\n\n| id | name       | hire_date  |\n|----|------------|------------|\n| 1  | John Doe   | 2020-03-15 |\n| 2  | Jane Smith | 2019-11-02 |\n| 3  | Alice      | 2020-08-25 |",
        "response": "SELECT name, hire_date\nFROM employees\nWHERE hire_date >= '2020-01-01' AND hire_date <= '2020-12-31';",
        "output": "SELECT name, hire_date\nFROM employees\nWHERE hire_date >= '2020-01-01' AND hire_date <= '2020-12-31';"
    },
    {
        "instruction": "Translate the following Java code to equivalent Python code.",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}",
        "response": "def main():\n    print(\"Hello, world!\")\n\nif __name__ == '__main__':\n    main()",
        "output": "def main():\n    print(\"Hello, world!\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "instruction": "What is the output of this C++ code snippet?",
        "input": "#include <iostream>\n\nint main() {\n    int a = 7;\n    int b = 3;\n    int c = a / b;\n    int d = b * c;\n    std::cout << d << std::endl;\n    return 0;\n}",
        "response": "The output of this C++ code snippet will be 6.",
        "output": "The output of this C++ code snippet will be 6."
    },
    {
        "instruction": "Implement a function in JavaScript to find the largest integer in an integer array.",
        "input": "",
        "response": "function find_largest_integer(int_array) {\n    return Math.max.apply(null, int_array);\n}",
        "output": "function find_largest_integer(int_array) {\n    return Math.max.apply(null, int_array);\n}"
    },
    {
        "instruction": "Can you fix syntax errors in this Ruby code?",
        "input": "def square(num)\n  num * num\nends\n\nnumber = gets.chomp.to_i\nputs \"The square of #{number} is #{square(number)}\"",
        "response": "def square(num)\n  num * num\nend\n\nnumber = gets.chomp.to_i\nputs \"The square of #{number} is #{square(number)}\"",
        "output": "def square(num)\n  num * num\nend\n\nnumber = gets.chomp.to_i\nputs \"The square of #{number} is #{square(number)}\""
    },
    {
        "instruction": "Create a simple JavaScript function to calculate the area of a rectangle, given its length and width as arguments.",
        "input": "length: 5, width: 3",
        "response": "function calculateRectangleArea(length, width) {\n    return length * width;\n}\n\nlet area = calculateRectangleArea(5, 3);\nconsole.log(area);",
        "output": "function calculateRectangleArea(length, width) {\n    return length * width;\n}\n\nlet area = calculateRectangleArea(5, 3);\nconsole.log(area);"
    },
    {
        "instruction": "What would be the expected output of the following C# code snippet?",
        "input": "using System;\n\nnamespace Example {\n    class Program {\n        static void Main(string[] args) {\n            int x = 10;\n            int y = 3;\n            Console.WriteLine(x / y);\n        }\n    }\n}",
        "response": "3",
        "output": "3"
    },
    {
        "instruction": "Write a Python function to read a file and sort the lines of the file alphabetically, then write the sorted lines back to the file.",
        "input": "filename: 'example.txt'",
        "response": "def sort_file_lines(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n    \n    sorted_lines = sorted(lines)\n    \n    with open(filename, 'w') as file:\n        file.writelines(sorted_lines)\n\nsort_file_lines('example.txt')",
        "output": "def sort_file_lines(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n    \n    sorted_lines = sorted(lines)\n    \n    with open(filename, 'w') as file:\n        file.writelines(sorted_lines)\n\nsort_file_lines('example.txt')"
    },
    {
        "instruction": "Create a Java method that calculates the sum of all integers in an ArrayList.",
        "input": "import java.util.ArrayList;\n\npublic class SumCalculator {\n\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(5);\n    }\n}",
        "response": "import java.util.ArrayList;\n\npublic class SumCalculator {\n\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(5);\n\n        System.out.println(\"Sum of integers in ArrayList: \" + calculateSum(numbers));\n    }\n\n    public static int calculateSum(ArrayList<Integer> numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n}",
        "output": "import java.util.ArrayList;\n\npublic class SumCalculator {\n\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(5);\n\n        System.out.println(\"Sum of integers in ArrayList: \" + calculateSum(numbers));\n    }\n\n    public static int calculateSum(ArrayList<Integer> numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n}"
    },
    {
        "instruction": "How would you fix the following Python code's syntax error?",
        "input": "def greet(name):\n    print(f\"Hello, {name!}\")\n\ngreet(\"John\")",
        "response": "def greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet(\"John\")",
        "output": "def greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet(\"John\")"
    },
    {
        "instruction": "Write a shell script that lists all files in the current directory and their respective sizes in ascending order.",
        "input": "",
        "response": "#!/bin/bash\n\nls -lS --reverse --human-readable | awk 'NR!=1 {print $5, $9}'",
        "output": "#!/bin/bash\n\nls -lS --reverse --human-readable | awk 'NR!=1 {print $5, $9}'"
    },
    {
        "instruction": "Translate the given JavaScript code snippet into equivalent Python code.",
        "input": "function findMax(arr) {\n  return Math.max(...arr);\n}\n\nconsole.log(findMax([1, 7, 3, 9, 5]));",
        "response": "def find_max(arr):\n    return max(arr)\n\nprint(find_max([1, 7, 3, 9, 5]))",
        "output": "def find_max(arr):\n    return max(arr)\n\nprint(find_max([1, 7, 3, 9, 5]))"
    },
    {
        "instruction": "Translate the following Python code to Java: a function to find the sum of all the digits of a given integer.",
        "input": "def sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total",
        "response": "public int sumOfDigits(int n) {\n    int total = 0;\n    while (n > 0) {\n        total += n % 10;\n        n /= 10;\n    }\n    return total;\n}",
        "output": "public int sumOfDigits(int n) {\n    int total = 0;\n    while (n > 0) {\n        total += n % 10;\n        n /= 10;\n    }\n    return total;\n}"
    },
    {
        "instruction": "Write a Python script that gets the content of a specified html tag from a given url using BeautifulSoup.",
        "input": "https://example.com, 'title'",
        "response": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\ntag = 'title'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresult = soup.find(tag)\nprint(result)",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\ntag = 'title'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresult = soup.find(tag)\nprint(result)"
    },
    {
        "instruction": "Implement a C++ function that receives a vector of integers and calculates the median of those numbers.",
        "input": "std::vector<int> numbers = {8, 4, 12, 6, 2};",
        "response": "#include <algorithm>\n#include <vector>\n\ndouble medianOfVector(const std::vector<int> &numbers) {\n    std::vector<int> numbersCopy(numbers);\n    std::sort(numbersCopy.begin(), numbersCopy.end());\n    size_t size = numbersCopy.size();\n    double median = 0.0;\n    if (size % 2 == 0) {\n        median = (numbersCopy[size / 2 - 1] + numbersCopy[size / 2]) / 2.0;\n    } else {\n        median = numbersCopy[size / 2];\n    }\n    return median;\n}\n\nstd::vector<int> numbers = {8, 4, 12, 6, 2};\ndouble median = medianOfVector(numbers);",
        "output": "#include <algorithm>\n#include <vector>\n\ndouble medianOfVector(const std::vector<int> &numbers) {\n    std::vector<int> numbersCopy(numbers);\n    std::sort(numbersCopy.begin(), numbersCopy.end());\n    size_t size = numbersCopy.size();\n    double median = 0.0;\n    if (size % 2 == 0) {\n        median = (numbersCopy[size / 2 - 1] + numbersCopy[size / 2]) / 2.0;\n    } else {\n        median = numbersCopy[size / 2];\n    }\n    return median;\n}\n\nstd::vector<int> numbers = {8, 4, 12, 6, 2};\ndouble median = medianOfVector(numbers);"
    },
    {
        "instruction": "Create a JavaScript function to find the sum of all elements of an array using reduce.",
        "input": "[4, 6, 2, 9, 1]",
        "response": "function sumArrayElements(arr) {\n    const sum = arr.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue;\n    }, 0);\n    return sum;\n}\n\nconst exampleArray = [4, 6, 2, 9, 1];\nconst sum = sumArrayElements(exampleArray);\nconsole.log('Sum:', sum);",
        "output": "function sumArrayElements(arr) {\n    const sum = arr.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue;\n    }, 0);\n    return sum;\n}\n\nconst exampleArray = [4, 6, 2, 9, 1];\nconst sum = sumArrayElements(exampleArray);\nconsole.log('Sum:', sum);"
    },
    {
        "instruction": "Demonstrate how to use the Python requests library to fetch data from an API with a GET request.",
        "input": "API URL: 'https://api.example.com/data'",
        "response": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print('Error fetching data, status code:', response.status_code)",
        "output": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print('Error fetching data, status code:', response.status_code)"
    },
    {
        "instruction": "In Java, create a method that takes a String input and returns the characters of the input in reversed order.",
        "input": "Input: 'reverse me'",
        "response": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder(input.length());\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}\n\n// Usage example\nString reversed = reverseString('reverse me');\nSystem.out.println(reversed);",
        "output": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder(input.length());\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}\n\n// Usage example\nString reversed = reverseString('reverse me');\nSystem.out.println(reversed);"
    },
    {
        "instruction": "Design a simple CSS rule to apply a red background color and 14px font size to a paragraph element with the class 'highlighted'.",
        "input": "<p class='highlighted'>This is an example paragraph.</p>",
        "response": ".highlighted {\n    background-color: red;\n    font-size: 14px;\n}\n\n/* Apply the rule to the HTML element:\n<p class='highlighted'>This is an example paragraph.</p> */",
        "output": ".highlighted {\n    background-color: red;\n    font-size: 14px;\n}\n\n/* Apply the rule to the HTML element:\n<p class='highlighted'>This is an example paragraph.</p> */"
    },
    {
        "instruction": "Write a shell script to list all files in a directory and its subdirectories, organized by file extension.",
        "input": "Directory: '/home/user/documents'",
        "response": "#!/bin/bash\n\nfind '/home/user/documents' -type f | while read -r file; do\n    ext=${file##*.}\n    echo \"[$ext] $file\"\ndone | sort\n\n# Usage: Save the script as 'list_files.sh' and run 'bash list_files.sh' in the terminal",
        "output": "#!/bin/bash\n\nfind '/home/user/documents' -type f | while read -r file; do\n    ext=${file##*.}\n    echo \"[$ext] $file\"\ndone | sort\n\n# Usage: Save the script as 'list_files.sh' and run 'bash list_files.sh' in the terminal"
    },
    {
        "instruction": "What would the output of this Java code snippet be?",
        "input": "public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        for (int i = 0; i < numbers.length; i++) {\n            if (i % 2 == 0) {\n                System.out.print(numbers[i] + \" \");\n            }\n        }\n    }\n}",
        "response": "1 3 5",
        "output": "1 3 5"
    },
    {
        "instruction": "Write a JavaScript function that accepts a string and returns the string in reverse order.",
        "input": "Hello, world!",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconsole.log(reverseString('Hello, world!'));",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconsole.log(reverseString('Hello, world!'));"
    },
    {
        "instruction": "Create a Python function to calculate the sum of squares for a provided list of numbers.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def sum_of_squares(numbers):\n    return sum(x**2 for x in numbers)",
        "output": "def sum_of_squares(numbers):\n    return sum(x**2 for x in numbers)"
    },
    {
        "instruction": "What would be the result of this JavaScript code?",
        "input": "function add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(5, 3));",
        "response": "The result of this JavaScript code will be the numbers 5 and 3 added together, which equals 8. The function 'add' takes two arguments (a, b) and returns their sum. The 'console.log' statement calls this function with the values 5 and 3 and prints the result to the console.",
        "output": "The result of this JavaScript code will be the numbers 5 and 3 added together, which equals 8. The function 'add' takes two arguments (a, b) and returns their sum. The 'console.log' statement calls this function with the values 5 and 3 and prints the result to the console."
    },
    {
        "instruction": "Refactor the following Java code snippet to be more efficient by removing the redundancy in the if-else block.",
        "input": "int x = 10;\n\nif (x > 5) {\n  System.out.println(\"x is greater than 5\");\n} else {\n  System.out.println(\"x is not greater than 5\");\n}\n\nif (x < 10) {\n  System.out.println(\"x is less than 10\");\n} else {\n  System.out.println(\"x is not less than 10\");\n}",
        "response": "int x = 10;\n\nString result1 = x > 5 ? \"x is greater than 5\" : \"x is not greater than 5\";\nSystem.out.println(result1);\n\nString result2 = x < 10 ? \"x is less than 10\" : \"x is not less than 10\";\nSystem.out.println(result2);",
        "output": "int x = 10;\n\nString result1 = x > 5 ? \"x is greater than 5\" : \"x is not greater than 5\";\nSystem.out.println(result1);\n\nString result2 = x < 10 ? \"x is less than 10\" : \"x is not less than 10\";\nSystem.out.println(result2);"
    },
    {
        "instruction": "Write a C++ function that finds the maximum value in a given vector of integers.",
        "input": "{5, 2, 8, 1, 6}",
        "response": "#include <vector>\n#include <algorithm>\n\nint find_max(const std::vector<int>& nums) {\n  return *std::max_element(nums.begin(), nums.end());\n}",
        "output": "#include <vector>\n#include <algorithm>\n\nint find_max(const std::vector<int>& nums) {\n  return *std::max_element(nums.begin(), nums.end());\n}"
    },
    {
        "instruction": "Create a JavaScript function to find the largest number in an array.",
        "input": "[3, 5, 8, 2, 9, 1]",
        "response": "function findLargestNumber(arr) {\n    let largestNumber = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > largestNumber) {\n            largestNumber = arr[i];\n        }\n    }\n\n    return largestNumber;\n}\n\nconst numbers = [3, 5, 8, 2, 9, 1];\nconsole.log(findLargestNumber(numbers));",
        "output": "function findLargestNumber(arr) {\n    let largestNumber = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > largestNumber) {\n            largestNumber = arr[i];\n        }\n    }\n\n    return largestNumber;\n}\n\nconst numbers = [3, 5, 8, 2, 9, 1];\nconsole.log(findLargestNumber(numbers));"
    },
    {
        "instruction": "Can you write a C++ function that counts the frequency of a character in a given string?",
        "input": "'hello world', 'l'",
        "response": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint countCharacterFrequency(const string& str, char character) {\n    int frequency = 0;\n\n    for (char c : str) {\n        if (c == character) {\n            frequency++;\n        }\n    }\n\n    return frequency;\n}\n\nint main() {\n    string input = \"hello world\";\n    char character = 'l';\n    int frequency = countCharacterFrequency(input, character);\n\n    cout << \"Frequency of '\" << character << \"' in the string: \" << frequency << endl;\n\n    return 0;\n}",
        "output": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint countCharacterFrequency(const string& str, char character) {\n    int frequency = 0;\n\n    for (char c : str) {\n        if (c == character) {\n            frequency++;\n        }\n    }\n\n    return frequency;\n}\n\nint main() {\n    string input = \"hello world\";\n    char character = 'l';\n    int frequency = countCharacterFrequency(input, character);\n\n    cout << \"Frequency of '\" << character << \"' in the string: \" << frequency << endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python program to read a text file and calculate the number of lines in it.",
        "input": "example.txt (containing \"Line 1\\nLine 2\\nLine 3\\nLine 4\")",
        "response": "def count_lines(file_name):\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n        return len(lines)\n\nfile_name = 'example.txt'\nline_count = count_lines(file_name)\nprint(f'Number of lines in {file_name}: {line_count}')",
        "output": "def count_lines(file_name):\n    with open(file_name, 'r') as file:\n        lines = file.readlines()\n        return len(lines)\n\nfile_name = 'example.txt'\nline_count = count_lines(file_name)\nprint(f'Number of lines in {file_name}: {line_count}')"
    },
    {
        "instruction": "Implement a shell script that lists all the files in the current directory sorted by their size in descending order.",
        "input": "",
        "response": "#!/bin/bash\n\nls -lS --block-size=KB",
        "output": "#!/bin/bash\n\nls -lS --block-size=KB"
    },
    {
        "instruction": "Implement a simple binary search algorithm in Python, which takes a sorted list of integers and a target integer as inputs, and returns the index of the target integer if found, otherwise returns -1.",
        "input": "",
        "response": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "output": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "instruction": "How would you fix this Java code that should calculate the area of a circle using a provided radius r? \n\ndouble radius = 10;\ndouble area = 2*Math.PI*r;",
        "input": "",
        "response": "double radius = 10;\ndouble area = Math.PI * Math.pow(radius, 2);",
        "output": "double radius = 10;\ndouble area = Math.PI * Math.pow(radius, 2);"
    },
    {
        "instruction": "Write a C++ function that takes a string as input and returns a new string with all vowels removed.",
        "input": "",
        "response": "#include <string>\n#include <algorithm>\n\nbool is_vowel(char c) {\n    char lower_c = std::tolower(c);\n    return lower_c == 'a' || lower_c == 'e' || lower_c == 'i' || lower_c == 'o' || lower_c == 'u';\n}\n\nstd::string remove_vowels(const std::string& input) {\n    std::string output;\n    std::copy_if(input.begin(), input.end(), std::back_inserter(output), [](char c) { return !is_vowel(c); });\n    return output;\n}",
        "output": "#include <string>\n#include <algorithm>\n\nbool is_vowel(char c) {\n    char lower_c = std::tolower(c);\n    return lower_c == 'a' || lower_c == 'e' || lower_c == 'i' || lower_c == 'o' || lower_c == 'u';\n}\n\nstd::string remove_vowels(const std::string& input) {\n    std::string output;\n    std::copy_if(input.begin(), input.end(), std::back_inserter(output), [](char c) { return !is_vowel(c); });\n    return output;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers and returns an array of pairs of adjacent elements, as arrays, from the original array.",
        "input": "",
        "response": "function adjacentPairs(arr) {\n    const output = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n        output.push([arr[i], arr[i + 1]]);\n    }\n    return output;\n}",
        "output": "function adjacentPairs(arr) {\n    const output = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n        output.push([arr[i], arr[i + 1]]);\n    }\n    return output;\n}"
    },
    {
        "instruction": "Create a Python function that calculates the area of a rectangle given its length and width.",
        "input": "length = 5, width = 10",
        "response": "def calculate_area(length, width):\n    area = length * width\n    return area\n\nlength = 5\nwidth = 10\nresult = calculate_area(length, width)\n\nprint(f'Area of rectangle: {result}')",
        "output": "def calculate_area(length, width):\n    area = length * width\n    return area\n\nlength = 5\nwidth = 10\nresult = calculate_area(length, width)\n\nprint(f'Area of rectangle: {result}')"
    },
    {
        "instruction": "Write a C++ program to find the sum of an integer array.",
        "input": "int arr[] = {1, 5, 8, 3, 12, -7, 10};",
        "response": "#include <iostream>\n\nint array_sum(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++)\n        sum += arr[i];\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 5, 8, 3, 12, -7, 10};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    int sum = array_sum(arr, size);\n    std::cout << \"Sum of the array elements: \" << sum << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint array_sum(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++)\n        sum += arr[i];\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 5, 8, 3, 12, -7, 10};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    int sum = array_sum(arr, size);\n    std::cout << \"Sum of the array elements: \" << sum << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How can I query a JSON API in JavaScript and use the response in my code?",
        "input": "API url: https://jsonplaceholder.typicode.com/todos/1",
        "response": "async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\nfetchData(url);",
        "output": "async function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n\nconst url = 'https://jsonplaceholder.typicode.com/todos/1';\nfetchData(url);"
    },
    {
        "instruction": "Write a Python script that reads a CSV file and prints each row as a dictionary using the first row as keys.",
        "input": "CSV file content:\nname,age,city\nAlice,30,New York\nBob,25,San Francisco\nEve,22,Los Angeles",
        "response": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, newline='') as csvfile:\n    reader = csv.DictReader(csvfile)\n    for row in reader:\n        print(dict(row))",
        "output": "import csv\n\nfilename = 'sample.csv'\n\nwith open(filename, newline='') as csvfile:\n    reader = csv.DictReader(csvfile)\n    for row in reader:\n        print(dict(row))"
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns the string with all vowels removed.",
        "input": "example_string: 'programming is fun'",
        "response": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in s if c not in vowels)",
        "output": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in s if c not in vowels)"
    },
    {
        "instruction": "What is a C++ code snippet to open a file and read its content into a string?",
        "input": "example_filename: 'example.txt'",
        "response": "#include <fstream>\n#include <string>\n#include <sstream>\n\nstd::ifstream file('example.txt');\nstd::stringstream buffer;\nbuffer << file.rdbuf();\nstd::string fileContent = buffer.str();\nfile.close();",
        "output": "#include <fstream>\n#include <string>\n#include <sstream>\n\nstd::ifstream file('example.txt');\nstd::stringstream buffer;\nbuffer << file.rdbuf();\nstd::string fileContent = buffer.str();\nfile.close();"
    },
    {
        "instruction": "Demonstrate in JavaScript how to get the value of an HTML element by its ID and store it in a variable.",
        "input": "example_html_element: <input type='text' id='sampleInput' value='Hello World'>",
        "response": "var elementValue = document.getElementById('sampleInput').value;",
        "output": "var elementValue = document.getElementById('sampleInput').value;"
    },
    {
        "instruction": "Design a simple Java program that generates and prints a multiplication table for a given integer up to a specified range.",
        "input": "example_integer: 5, specified_range: 10",
        "response": "public class MultiplicationTable {\n\n    public static void main(String[] args) {\n        int baseNumber = 5;\n        int range = 10;\n\n        for (int i = 1; i <= range; i++) {\n            System.out.println(baseNumber + \" * \" + i + \" = \" + (baseNumber * i));\n        }\n    }\n}",
        "output": "public class MultiplicationTable {\n\n    public static void main(String[] args) {\n        int baseNumber = 5;\n        int range = 10;\n\n        for (int i = 1; i <= range; i++) {\n            System.out.println(baseNumber + \" * \" + i + \" = \" + (baseNumber * i));\n        }\n    }\n}"
    },
    {
        "instruction": "Create a JavaScript function that can sort a list of dates in descending order.",
        "input": "['2022-02-25', '2021-12-20', '2022-01-30']",
        "response": "function sortDatesDescending(dates) {\n    dates.sort(function(a, b) {\n        return new Date(b) - new Date(a);\n    });\n    return dates;\n}\n\nlet dateList = ['2022-02-25', '2021-12-20', '2022-01-30'];\nconsole.log(sortDatesDescending(dateList));",
        "output": "function sortDatesDescending(dates) {\n    dates.sort(function(a, b) {\n        return new Date(b) - new Date(a);\n    });\n    return dates;\n}\n\nlet dateList = ['2022-02-25', '2021-12-20', '2022-01-30'];\nconsole.log(sortDatesDescending(dateList));"
    },
    {
        "instruction": "How would you implement a C++ program to find the largest palindrome made from the product of two 3-digit numbers?",
        "input": "",
        "response": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nbool isPalindrome(int num) {\n    std::string str = std::to_string(num);\n    std::string reversedStr = str;\n    std::reverse(reversedStr.begin(), reversedStr.end());\n    return str == reversedStr;\n}\n\nint main() {\n    int largestPalindrome = 0;\n\n    for (int i = 100; i <= 999; ++i) {\n        for (int j = 100; j <= 999; ++j) {\n            int product = i * j;\n            if (isPalindrome(product) && product > largestPalindrome) {\n                largestPalindrome = product;\n            }\n        }\n    }\n\n    std::cout << \"The largest palindrome is: \" << largestPalindrome << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <algorithm>\n#include <string>\n\nbool isPalindrome(int num) {\n    std::string str = std::to_string(num);\n    std::string reversedStr = str;\n    std::reverse(reversedStr.begin(), reversedStr.end());\n    return str == reversedStr;\n}\n\nint main() {\n    int largestPalindrome = 0;\n\n    for (int i = 100; i <= 999; ++i) {\n        for (int j = 100; j <= 999; ++j) {\n            int product = i * j;\n            if (isPalindrome(product) && product > largestPalindrome) {\n                largestPalindrome = product;\n            }\n        }\n    }\n\n    std::cout << \"The largest palindrome is: \" << largestPalindrome << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python script to download an image from a URL and save it to disk.",
        "input": "https://example.com/image.jpg",
        "response": "import requests\n\nurl = 'https://example.com/image.jpg'\nresponse = requests.get(url, stream=True)\nresponse.raise_for_status()\n\nwith open('image.jpg', 'wb') as f:\n    for chunk in response.iter_content(chunk_size=8192):\n        f.write(chunk)\n\nprint('Image downloaded successfully.')",
        "output": "import requests\n\nurl = 'https://example.com/image.jpg'\nresponse = requests.get(url, stream=True)\nresponse.raise_for_status()\n\nwith open('image.jpg', 'wb') as f:\n    for chunk in response.iter_content(chunk_size=8192):\n        f.write(chunk)\n\nprint('Image downloaded successfully.')"
    },
    {
        "instruction": "Create a shell script that deletes files older than a specified number of days from a directory.",
        "input": "directory_path=\"/path/to/directory\" days_to_keep=30",
        "response": "#!/bin/bash\n\ndirectory_path=\"/path/to/directory\"\ndays_to_keep=30\n\nfind \"$directory_path\" -type f -mtime +$days_to_keep -exec rm -f {} \\;\n\necho \"Deleted files older than $days_to_keep days from directory $directory_path\"",
        "output": "#!/bin/bash\n\ndirectory_path=\"/path/to/directory\"\ndays_to_keep=30\n\nfind \"$directory_path\" -type f -mtime +$days_to_keep -exec rm -f {} \\;\n\necho \"Deleted files older than $days_to_keep days from directory $directory_path\""
    },
    {
        "instruction": "Write a JavaScript function that takes a string and returns a new string with the characters in reverse order.",
        "input": "",
        "response": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "How can I implement a Fibonacci sequence generator for the first n numbers using a recursive function in C++?",
        "input": "",
        "response": "#include <iostream>\n\nint fibonacci(int n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n  int n = 10;\n  for (int i = 0; i < n; ++i) {\n    std::cout << fibonacci(i) << ' ';\n  }\n  return 0;\n}",
        "output": "#include <iostream>\n\nint fibonacci(int n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n  int n = 10;\n  for (int i = 0; i < n; ++i) {\n    std::cout << fibonacci(i) << ' ';\n  }\n  return 0;\n}"
    },
    {
        "instruction": "Write a Python function to calculate the sum of all elements in a list of integers, but only include values greater than a specified threshold.",
        "input": "",
        "response": "def sum_over_threshold(numbers, threshold):\n  return sum([num for num in numbers if num > threshold])",
        "output": "def sum_over_threshold(numbers, threshold):\n  return sum([num for num in numbers if num > threshold])"
    },
    {
        "instruction": "Create a shell script to display the names of all files in the current directory together with their file sizes.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *;\ndo\n  if [ -f \"${file}\" ]; then\n    echo \"${file} - $(du -sh ${file} | cut -f1)\"\n  fi\ndone",
        "output": "#!/bin/bash\n\nfor file in *;\ndo\n  if [ -f \"${file}\" ]; then\n    echo \"${file} - $(du -sh ${file} | cut -f1)\"\n  fi\ndone"
    },
    {
        "instruction": "Create a Python function that finds the numbers in a given list that are greater than the input value.",
        "input": "Value: 5, List: [1, 10, 2, 11, 15, 4, 6]",
        "response": "def greater_than_value(value, number_list):\n    result = [num for num in number_list if num > value]\n    return result\n\nvalue = 5\nnumber_list = [1, 10, 2, 11, 15, 4, 6]\nprint(greater_than_value(value, number_list)) # Output: [10, 11, 15, 6]",
        "output": "def greater_than_value(value, number_list):\n    result = [num for num in number_list if num > value]\n    return result\n\nvalue = 5\nnumber_list = [1, 10, 2, 11, 15, 4, 6]\nprint(greater_than_value(value, number_list)) # Output: [10, 11, 15, 6]"
    },
    {
        "instruction": "How would you rewrite this C++ code to use a 'for' loop instead of a 'while' loop? Provide the rewritten code.",
        "input": "#include <iostream>\n\nint main() {\n    int i = 0;\n    while (i < 5) {\n        std::cout << i << \" \";\n        i++;\n    }\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    for (int i = 0; i < 5; ++i) {\n        std::cout << i << \" \";\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    for (int i = 0; i < 5; ++i) {\n        std::cout << i << \" \";\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Write a shell script to count the lines containing 'error' in the given log.txt file.",
        "input": "log.txt contents:\nSuccess: Task completed.\nError: File not found.\nError: Permission denied.\nSuccess: User added.",
        "response": "#!/bin/bash\n\ncount=$(grep -i 'error' log.txt | wc -l)\necho \"Number of lines containing 'error': $count\"",
        "output": "#!/bin/bash\n\ncount=$(grep -i 'error' log.txt | wc -l)\necho \"Number of lines containing 'error': $count\""
    },
    {
        "instruction": "Identify and explain the syntax error in this JavaScript code.",
        "input": "function add(a, b) {\n    let sum = a + b;\n    return sum;\n}\n\nlet result = add 5, 3);\nconsole.log('Result:', result);",
        "response": "There is a syntax error in the 'add' function call. Missing parentheses around the function arguments. The corrected code should be:\n\nfunction add(a, b) {\n    let sum = a + b;\n    return sum;\n}\n\nlet result = add(5, 3);\nconsole.log('Result:', result);",
        "output": "There is a syntax error in the 'add' function call. Missing parentheses around the function arguments. The corrected code should be:\n\nfunction add(a, b) {\n    let sum = a + b;\n    return sum;\n}\n\nlet result = add(5, 3);\nconsole.log('Result:', result);"
    },
    {
        "instruction": "Create a Java method to reverse a given string without using any built-in reverse functions.",
        "input": "",
        "response": "public String reverseString(String input) {\n    char[] originalArray = input.toCharArray();\n    char[] reversedArray = new char[originalArray.length];\n\n    for (int i = 0; i < originalArray.length; i++) {\n        reversedArray[i] = originalArray[originalArray.length - 1 - i];\n    }\n\n    return new String(reversedArray);\n}",
        "output": "public String reverseString(String input) {\n    char[] originalArray = input.toCharArray();\n    char[] reversedArray = new char[originalArray.length];\n\n    for (int i = 0; i < originalArray.length; i++) {\n        reversedArray[i] = originalArray[originalArray.length - 1 - i];\n    }\n\n    return new String(reversedArray);\n}"
    },
    {
        "instruction": "What would be a Python function to calculate the Fibonacci sequence up to the given number n?",
        "input": "",
        "response": "def fibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    while a < n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence",
        "output": "def fibonacci(n):\n    sequence = []\n    a, b = 0, 1\n    while a < n:\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of integers and returns the sum of all even elements.",
        "input": "",
        "response": "function sumEvenElements(arr) {\n    return arr.reduce((sum, num) => {\n        if (num % 2 === 0) {\n            return sum + num;\n        } else {\n            return sum;\n        }\n    }, 0);\n}",
        "output": "function sumEvenElements(arr) {\n    return arr.reduce((sum, num) => {\n        if (num % 2 === 0) {\n            return sum + num;\n        } else {\n            return sum;\n        }\n    }, 0);\n}"
    },
    {
        "instruction": "Translate the following C++ function into Python, which calculates the factorial of a given number recursively.",
        "input": "int factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "Create a JavaScript function to insert an item at a specified index in an array.",
        "input": "",
        "response": "function insertAt(array, index, element) {\n  array.splice(index, 0, element);\n  return array;\n}",
        "output": "function insertAt(array, index, element) {\n  array.splice(index, 0, element);\n  return array;\n}"
    },
    {
        "instruction": "How would you write a C++ program to find the largest number in an array of integers?",
        "input": "",
        "response": "#include <iostream>\n#include <vector>\n\nint largestNumber(std::vector<int> &numbers) {\n  int maxNumber = numbers[0];\n\n  for (int num : numbers) {\n    if (num > maxNumber) {\n      maxNumber = num;\n    }\n  }\n  return maxNumber;\n}\n\nint main() {\n  std::vector<int> numbers = {4, 9, 2, 8, 5};\n  std::cout << \"Largest number: \" << largestNumber(numbers) << std::endl;\n  return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint largestNumber(std::vector<int> &numbers) {\n  int maxNumber = numbers[0];\n\n  for (int num : numbers) {\n    if (num > maxNumber) {\n      maxNumber = num;\n    }\n  }\n  return maxNumber;\n}\n\nint main() {\n  std::vector<int> numbers = {4, 9, 2, 8, 5};\n  std::cout << \"Largest number: \" << largestNumber(numbers) << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Rewrite the following Python code snippet that calculates the sum of the squares of the first n natural numbers in Java:\n\n```\ndef sum_of_squares(n):\n    return sum([i ** 2 for i in range(1, n + 1)])\n```\n",
        "input": "",
        "response": "public int sumOfSquares(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}",
        "output": "public int sumOfSquares(int n) {\n    int sum = 0;\n    for(int i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Imagine you have a dataset of users that include their email addresses and you want to filter out users having a specific domain. Write a Python code example using the Pandas library to filter rows from a DataFrame where the email column contains a specified domain.",
        "input": "",
        "response": "import pandas as pd\n\ndef filter_users_by_domain(df, domain):\n    filtered_df = df[df['email'].str.contains(f'@{domain}')]\n    return filtered_df\n\n# Example usage:\n# data = {'email': ['john@example.com', 'jane@domain.com', 'doe@domain.com']}\n# df = pd.DataFrame(data)\n# filtered_df = filter_users_by_domain(df, 'domain.com')\n# print(filtered_df)",
        "output": "import pandas as pd\n\ndef filter_users_by_domain(df, domain):\n    filtered_df = df[df['email'].str.contains(f'@{domain}')]\n    return filtered_df\n\n# Example usage:\n# data = {'email': ['john@example.com', 'jane@domain.com', 'doe@domain.com']}\n# df = pd.DataFrame(data)\n# filtered_df = filter_users_by_domain(df, 'domain.com')\n# print(filtered_df)"
    },
    {
        "instruction": "Translate the following Python code snippet to JavaScript:",
        "input": "def multiply(a, b):\n    return a * b\n\nresult = multiply(5, 6)\nprint(result)",
        "response": "function multiply(a, b) {\n    return a * b;\n}\n\nlet result = multiply(5, 6);\nconsole.log(result);",
        "output": "function multiply(a, b) {\n    return a * b;\n}\n\nlet result = multiply(5, 6);\nconsole.log(result);"
    },
    {
        "instruction": "Write a program in C++ that takes the user's age as input and outputs whether they are eligible to vote.",
        "input": "",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int age;\n    cout << \"Enter your age: \";\n    cin >> age;\n\n    if (age >= 18) {\n        cout << \"You are eligible to vote.\";\n    } else {\n        cout << \"You are not eligible to vote.\";\n    }\n\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int age;\n    cout << \"Enter your age: \";\n    cin >> age;\n\n    if (age >= 18) {\n        cout << \"You are eligible to vote.\";\n    } else {\n        cout << \"You are not eligible to vote.\";\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "What is the expected output of the following Java code?",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 3;\n        double result = (double)a / b;\n        System.out.println(result);\n    }\n}",
        "response": "3.3333333333333335",
        "output": "3.3333333333333335"
    },
    {
        "instruction": "Identify the syntax error in the given Python code and provide the corrected code.",
        "input": "def greet(name):\n    print(f\"Hello, {name)\")\n\ngreet(\"John\")",
        "response": "def greet(name):\n    print(f\"Hello, {name}\")\n\ngreet(\"John\")",
        "output": "def greet(name):\n    print(f\"Hello, {name}\")\n\ngreet(\"John\")"
    },
    {
        "instruction": "Create a Python function that takes an integer input and returns the sum of all even numbers up to and including that integer.",
        "input": "10",
        "response": "def sum_even_numbers(n):\n    total = 0\n    for i in range(0, n+1, 2):\n        total += i\n    return total\n\nnumber = 10\nprint('Sum of all even numbers up to', number, 'is:', sum_even_numbers(number))",
        "output": "def sum_even_numbers(n):\n    total = 0\n    for i in range(0, n+1, 2):\n        total += i\n    return total\n\nnumber = 10\nprint('Sum of all even numbers up to', number, 'is:', sum_even_numbers(number))"
    },
    {
        "instruction": "Design a C program that calculates and prints the size of the different data types.",
        "input": "",
        "response": "#include <stdio.h>\n\nint main() {\n    printf(\"Size of char: %lu byte(s)\\n\", sizeof(char));\n    printf(\"Size of int: %lu byte(s)\\n\", sizeof(int));\n    printf(\"Size of float: %lu byte(s)\\n\", sizeof(float));\n    printf(\"Size of double: %lu byte(s)\\n\", sizeof(double));\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    printf(\"Size of char: %lu byte(s)\\n\", sizeof(char));\n    printf(\"Size of int: %lu byte(s)\\n\", sizeof(int));\n    printf(\"Size of float: %lu byte(s)\\n\", sizeof(float));\n    printf(\"Size of double: %lu byte(s)\\n\", sizeof(double));\n\n    return 0;\n}"
    },
    {
        "instruction": "Explain the use of reduce function in JavaScript with an example that calculates the product of elements in an array.",
        "input": "[1, 2, 3, 4]",
        "response": "The reduce function in JavaScript is used to apply a specific function to all the elements of an array and reduce it to a single value. The function is provided with a callback function that takes in two arguments, an accumulator and the current element of the array. The accumulator is used to store the accumulated result after each iteration, and the current element is the item of the array being processed.\n\nHere's an example that calculates the product of all elements in an array:\n\nlet array = [1, 2, 3, 4];\nlet product = array.reduce((accumulator, currentValue) => accumulator * currentValue);\nconsole.log('Product of the array elements:', product);",
        "output": "The reduce function in JavaScript is used to apply a specific function to all the elements of an array and reduce it to a single value. The function is provided with a callback function that takes in two arguments, an accumulator and the current element of the array. The accumulator is used to store the accumulated result after each iteration, and the current element is the item of the array being processed.\n\nHere's an example that calculates the product of all elements in an array:\n\nlet array = [1, 2, 3, 4];\nlet product = array.reduce((accumulator, currentValue) => accumulator * currentValue);\nconsole.log('Product of the array elements:', product);"
    },
    {
        "instruction": "Write a shell script to calculate the sum of all positive integers less than a given number which are divisible by either 3 or 5.",
        "input": "20",
        "response": "#!/bin/bash\n\nnumber=20\nsum=0\n\nfor i in $(seq 1 $((number - 1))); do\n    if [ $((i % 3)) -eq 0 ] || [ $((i % 5)) -eq 0 ]; then\n        sum=$((sum + i))\n    fi\ndone\n\nprintf 'Sum of integers less than 20 that are divisible by 3 or 5: %d\\n' $sum",
        "output": "#!/bin/bash\n\nnumber=20\nsum=0\n\nfor i in $(seq 1 $((number - 1))); do\n    if [ $((i % 3)) -eq 0 ] || [ $((i % 5)) -eq 0 ]; then\n        sum=$((sum + i))\n    fi\ndone\n\nprintf 'Sum of integers less than 20 that are divisible by 3 or 5: %d\\n' $sum"
    },
    {
        "instruction": "Create a Python function to compute the Levenshtein distance between two input strings.",
        "input": "",
        "response": "def levenshtein_distance(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein_distance(s2, s1)\n\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n\n        previous_row = current_row\n\n    return previous_row[-1]",
        "output": "def levenshtein_distance(s1, s2):\n    if len(s1) < len(s2):\n        return levenshtein_distance(s2, s1)\n\n    if len(s2) == 0:\n        return len(s1)\n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n\n        previous_row = current_row\n\n    return previous_row[-1]"
    },
    {
        "instruction": "Translate the following Java code into Python: public static int sumOfEvenNumbers(int[] numbers) { int sum = 0; for (int num : numbers) { if (num % 2 == 0) { sum += num; } } return sum; }",
        "input": "",
        "response": "def sum_of_even_numbers(numbers):\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum",
        "output": "def sum_of_even_numbers(numbers):\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum"
    },
    {
        "instruction": "Write a C++ function that takes a string input and returns true if it's a palindrome, and false otherwise.",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n\nbool is_palindrome(const std::string& input) {\n    int left = 0;\n    int right = input.length() - 1;\n\n    while (left < right) {\n        if (input[left++] != input[right--]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    std::string input = \"racecar\";\n    std::cout << (is_palindrome(input) ? \"True\" : \"False\") << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nbool is_palindrome(const std::string& input) {\n    int left = 0;\n    int right = input.length() - 1;\n\n    while (left < right) {\n        if (input[left++] != input[right--]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    std::string input = \"racecar\";\n    std::cout << (is_palindrome(input) ? \"True\" : \"False\") << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "What would be the expected output of the following JavaScript code? const arr = [10, 20, 30, 40, 50]; const newArr = arr.map(num => num * 2); console.log(newArr);",
        "input": "",
        "response": "[20, 40, 60, 80, 100]",
        "output": "[20, 40, 60, 80, 100]"
    },
    {
        "instruction": "Write a Python function that accepts a list of numbers and returns the arithmetic mean.",
        "input": "",
        "response": "def calculate_mean(numbers):\n    # Validate the input list is not empty\n    if not numbers:\n        raise ValueError('Input list is empty')\n    # Calculate the sum of the numbers and divide by the length of the list\n    mean = sum(numbers) / len(numbers)\n    return mean",
        "output": "def calculate_mean(numbers):\n    # Validate the input list is not empty\n    if not numbers:\n        raise ValueError('Input list is empty')\n    # Calculate the sum of the numbers and divide by the length of the list\n    mean = sum(numbers) / len(numbers)\n    return mean"
    },
    {
        "instruction": "Convert the following Python code into an equivalent Java code snippet:",
        "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        print(f'My name is {self.name} and I am {self.age} years old')",
        "response": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public void introduce() {\n        System.out.printf(\"My name is %s and I am %d years old\", name, age);\n    }\n}",
        "output": "public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public void introduce() {\n        System.out.printf(\"My name is %s and I am %d years old\", name, age);\n    }\n}"
    },
    {
        "instruction": "Explain how the given code works and find any bugs or syntax errors in this Javascript code.",
        "input": "function palindromeChecker(str) {\n    const reversedStr = str.split('').reverse().join(''):\n    return str === reversedStr;\n}\nconsole.log(palindromeChecker('racecar'));",
        "response": "This JavaScript code defines a function called 'palindromeChecker' that checks if a given string str is a palindrome (a string that reads the same forwards and backwards).\n\n1. First, it splits the string 'str' into an array of individual characters using the 'split()' method.\n2. Then, it reverses the array using the 'reverse()' method.\n3. After that, it joins the reversed array back into a string using the 'join()' method.\n4. Lastly, the function returns 'true' if the original string is equal to its reversed version, otherwise 'false'.\n\nThere is a syntax error in the code (use of a colon instead of a semicolon):\nconst reversedStr = str.split('').reverse().join(''); // fixed version",
        "output": "This JavaScript code defines a function called 'palindromeChecker' that checks if a given string str is a palindrome (a string that reads the same forwards and backwards).\n\n1. First, it splits the string 'str' into an array of individual characters using the 'split()' method.\n2. Then, it reverses the array using the 'reverse()' method.\n3. After that, it joins the reversed array back into a string using the 'join()' method.\n4. Lastly, the function returns 'true' if the original string is equal to its reversed version, otherwise 'false'.\n\nThere is a syntax error in the code (use of a colon instead of a semicolon):\nconst reversedStr = str.split('').reverse().join(''); // fixed version"
    },
    {
        "instruction": "How would you determine if two sets are disjoint, given set A and set B, using Python code?",
        "input": "",
        "response": "def are_sets_disjoint(A, B):\n    # Find the intersection of both sets\n    intersection = A.intersection(B)\n    # If the intersection is empty, they are disjoint\n    return len(intersection) == 0",
        "output": "def are_sets_disjoint(A, B):\n    # Find the intersection of both sets\n    intersection = A.intersection(B)\n    # If the intersection is empty, they are disjoint\n    return len(intersection) == 0"
    },
    {
        "instruction": "Design a JavaScript function that calculates the length of the hypotenuse in a right triangle given the length of the other two sides.",
        "input": "sideA = 3; sideB = 4;",
        "response": "function calcHypotenuse(sideA, sideB) {\n    return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));\n}\n\n// Usage: const hypotenuse = calcHypotenuse(3, 4);",
        "output": "function calcHypotenuse(sideA, sideB) {\n    return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));\n}\n\n// Usage: const hypotenuse = calcHypotenuse(3, 4);"
    },
    {
        "instruction": "What is the expected result when the following C code snippet is executed?",
        "input": "#include <stdio.h>\n\nint main() {\n    int i = 2;\n    int j = i *= 3 + 4;\n    printf(\"%d\\n\", j);\n    return 0;\n}",
        "response": "The code snippet calculates the value of `j` using the expression `i *= 3 + 4`. According to the order of operations, addition comes before assignment, hence:\n\n1. i = 2 (initialization)\n2. 3 + 4 = 7\n3. i *= 7 (i = i * 7)\n4. i = 2 * 7\n5. i = 14\n6. j = i = 14\n\nThe expected output is:\n14",
        "output": "The code snippet calculates the value of `j` using the expression `i *= 3 + 4`. According to the order of operations, addition comes before assignment, hence:\n\n1. i = 2 (initialization)\n2. 3 + 4 = 7\n3. i *= 7 (i = i * 7)\n4. i = 2 * 7\n5. i = 14\n6. j = i = 14\n\nThe expected output is:\n14"
    },
    {
        "instruction": "Fix the syntax errors in the following Python code.",
        "input": "def fib(n);\n    return n if n < = 1 else fib(n - 1) + fib(n - 2)\n\nprint(fib(6))",
        "response": "The corrected syntax of the given Python code is as follows:\n\ndef fib(n):\n    return n if n <= 1 else fib(n - 1) + fib(n - 2)\n\nprint(fib(6))\n\nThe errors fixed are:\n1. Replaced semicolon with a colon in the function definition.\n2. Removed the extra space in the conditional statement (<=).",
        "output": "The corrected syntax of the given Python code is as follows:\n\ndef fib(n):\n    return n if n <= 1 else fib(n - 1) + fib(n - 2)\n\nprint(fib(6))\n\nThe errors fixed are:\n1. Replaced semicolon with a colon in the function definition.\n2. Removed the extra space in the conditional statement (<=)."
    },
    {
        "instruction": "Translate the following Java code snippet into C++.",
        "input": "public class Main {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 10; ++i) {\n            System.out.println(i);\n        }\n    }\n}",
        "response": "#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 10; ++i) {\n        std::cout << i << std::endl;\n    }\n    return 0;\n}\n\nThe translation involves:\n1. Replacing the Java class and method syntax with C++ main.\n2. Replacing System.out.println with std::cout.\n3. Removing the 'public' and 'String[] args' keywords.",
        "output": "#include <iostream>\n\nint main() {\n    for (int i = 1; i <= 10; ++i) {\n        std::cout << i << std::endl;\n    }\n    return 0;\n}\n\nThe translation involves:\n1. Replacing the Java class and method syntax with C++ main.\n2. Replacing System.out.println with std::cout.\n3. Removing the 'public' and 'String[] args' keywords."
    },
    {
        "instruction": "Create a C++ function that calculates the area of a circle given its radius.",
        "input": "4",
        "response": "#include <iostream>\n#include <cmath>\n#define PI 3.14159\n\ndouble calculate_area(double radius) {\n    return PI * pow(radius, 2);\n}\n\nint main() {\n    double radius = 4;\n    double area = calculate_area(radius);\n    std::cout << \"Area of the circle with radius \" << radius << \" is: \" << area << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <cmath>\n#define PI 3.14159\n\ndouble calculate_area(double radius) {\n    return PI * pow(radius, 2);\n}\n\nint main() {\n    double radius = 4;\n    double area = calculate_area(radius);\n    std::cout << \"Area of the circle with radius \" << radius << \" is: \" << area << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "What would be a JavaScript function to add an element to the beginning of an array?",
        "input": "['b', 'c', 'd'], 'a'",
        "response": "function addElementToFront(arr, element) {\n    arr.unshift(element);\n    return arr;\n}\n\nlet array = ['b', 'c', 'd'];\nlet newItem = 'a';\nlet newArray = addElementToFront(array, newItem);\nconsole.log(newArray);",
        "output": "function addElementToFront(arr, element) {\n    arr.unshift(element);\n    return arr;\n}\n\nlet array = ['b', 'c', 'd'];\nlet newItem = 'a';\nlet newArray = addElementToFront(array, newItem);\nconsole.log(newArray);"
    },
    {
        "instruction": "Show a Python code snippet that calculates the Fibonacci sequence up to the 10th element using recursion.",
        "input": "10",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 10\nsequence = [fibonacci(i) for i in range(n)]\nprint(sequence)",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nn = 10\nsequence = [fibonacci(i) for i in range(n)]\nprint(sequence)"
    },
    {
        "instruction": "Fix the following Python function that attempts to remove duplicates from a list but is not working correctly.",
        "input": "def remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n   if not item in unique_list:\n               unique_list.append(item\n    return unique_list",
        "response": "def remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n        if not item in unique_list:\n            unique_list.append(item)\n    return unique_list",
        "output": "def remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n        if not item in unique_list:\n            unique_list.append(item)\n    return unique_list"
    },
    {
        "instruction": "What would be the expected output if the following C++ code is executed?",
        "input": "#include <iostream>\n\nint main() {\n    int arr[] = {1, 5, 3, 7, 9};\n    int sum = 0;\n\n    for(int i = 0; i < 5; i++) {\n        sum += arr[i];\n    }\n\n    std::cout << sum;\n    return 0;\n}",
        "response": "The expected output of the provided C++ code would be the sum of the elements in the 'arr' array which is 1 + 5 + 3 + 7 + 9 = 25. So the output will be:\n25",
        "output": "The expected output of the provided C++ code would be the sum of the elements in the 'arr' array which is 1 + 5 + 3 + 7 + 9 = 25. So the output will be:\n25"
    },
    {
        "instruction": "Implement a Java method that receives a string and returns the number of vowels (a, e, i, o, u) in the string.",
        "input": "",
        "response": "public int countVowels(String inputStr) {\n    int vowelsCount = 0;\n    for (int i = 0; i < inputStr.length(); i++) {\n        char ch = Character.toLowerCase(inputStr.charAt(i));\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            vowelsCount++;\n        }\n    }\n    return vowelsCount;\n}",
        "output": "public int countVowels(String inputStr) {\n    int vowelsCount = 0;\n    for (int i = 0; i < inputStr.length(); i++) {\n        char ch = Character.toLowerCase(inputStr.charAt(i));\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n            vowelsCount++;\n        }\n    }\n    return vowelsCount;\n}"
    },
    {
        "instruction": "Translate the following Python function that returns the square of a number into JavaScript.",
        "input": "def square_number(n):\n    return n * n",
        "response": "function square_number(n) {\n    return n * n;\n}",
        "output": "function square_number(n) {\n    return n * n;\n}"
    },
    {
        "instruction": "Create a Python function that takes a list of integers and returns a list with only the even numbers.",
        "input": "[3, 7, 20, 8, 13, 40, 21]",
        "response": "def even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nexample_list = [3, 7, 20, 8, 13, 40, 21]\nresult = even_numbers(example_list)\nprint(result)",
        "output": "def even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nexample_list = [3, 7, 20, 8, 13, 40, 21]\nresult = even_numbers(example_list)\nprint(result)"
    },
    {
        "instruction": "Translate the following PHP code to Python code:",
        "input": "<?php\nfunction sum_array($arr) {\n  $sum = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    $sum += $arr[$i];\n  }\n  return $sum;\n}\n?>",
        "response": "def sum_array(arr):\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total",
        "output": "def sum_array(arr):\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "instruction": "Implement a Java method that takes a string and returns a reversed version of the string.",
        "input": "Hello, World!",
        "response": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}\n\nString example = \"Hello, World!\";\nString result = reverseString(example);\nSystem.out.println(result);",
        "output": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversed.append(input.charAt(i));\n    }\n    return reversed.toString();\n}\n\nString example = \"Hello, World!\";\nString result = reverseString(example);\nSystem.out.println(result);"
    },
    {
        "instruction": "Explain and fix the syntax error in this C++ code:",
        "input": "#include <iostream>\n\nint main() {\nstd::cout << \"Hello, World! \" << std::endl;\n\nreturn 0;\n}",
        "response": "Explanation: The << operator is missing between \"Hello, World! \" and std::endl.\n\nFixed code:\n#include <iostream>\n\nint main() {\n  std::cout << \"Hello, World!\" << std::endl;\n  return 0;\n}",
        "output": "Explanation: The << operator is missing between \"Hello, World! \" and std::endl.\n\nFixed code:\n#include <iostream>\n\nint main() {\n  std::cout << \"Hello, World!\" << std::endl;\n  return 0;\n}"
    },
    {
        "instruction": "Write a Python function to calculate the average of a list of numbers.",
        "input": "List of numbers: [12, 5, 7, 19, 3]",
        "response": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nnumbers = [12, 5, 7, 19, 3]\nresult = average(numbers)\nprint(result)",
        "output": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nnumbers = [12, 5, 7, 19, 3]\nresult = average(numbers)\nprint(result)"
    },
    {
        "instruction": "Implement a Java method to reverse a given string and return the reversed string.",
        "input": "Input string: 'coding is fun'",
        "response": "public String reverseString(String input) {\n    StringBuilder reversedString = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversedString.append(input.charAt(i));\n    }\n    return reversedString.toString();\n}\n\nString input = 'coding is fun';\nString result = reverseString(input);\nSystem.out.println(result);",
        "output": "public String reverseString(String input) {\n    StringBuilder reversedString = new StringBuilder();\n    for (int i = input.length() - 1; i >= 0; i--) {\n        reversedString.append(input.charAt(i));\n    }\n    return reversedString.toString();\n}\n\nString input = 'coding is fun';\nString result = reverseString(input);\nSystem.out.println(result);"
    },
    {
        "instruction": "Translate the following JavaScript code snippet to equivalent Python code.",
        "input": "let arr = [10, 15, 20, 25, 30];\nlet sum = arr.reduce((total, num) => {\n  return total + num;\n});",
        "response": "arr = [10, 15, 20, 25, 30]\nsum = sum(arr)",
        "output": "arr = [10, 15, 20, 25, 30]\nsum = sum(arr)"
    },
    {
        "instruction": "Fix the syntax errors in the following C++ code.",
        "input": "#include <iostream>\n\nusing namespace std;\n\nint main() \n    cout << \"Hello, World!\" << endl;\n    return 0;\n}",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n    return 0;\n}"
    },
    {
        "instruction": "Develop a Python function that reverses a given string without using any built-in functions or slicing.",
        "input": "reverse_string('GPT-3')",
        "response": "def reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Usage\nresult = reverse_string('GPT-3')",
        "output": "def reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Usage\nresult = reverse_string('GPT-3')"
    },
    {
        "instruction": "Translate the following Java code into equivalent C# code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "input": "",
        "response": "using System;\n\npublic class HelloWorld\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}",
        "output": "using System;\n\npublic class HelloWorld\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Fix the JavaScript code below that should calculate the square of a number:\n\nfunction squareNumber(x) {\n    return x x;\n}",
        "input": "",
        "response": "function squareNumber(x) {\n    return x * x;\n}",
        "output": "function squareNumber(x) {\n    return x * x;\n}"
    },
    {
        "instruction": "What would be the output of the following Python code snippet?\n\nx = 5\ny = 10\n\nx, y = y, x\nprint(x, y)",
        "input": "",
        "response": "10 5",
        "output": "10 5"
    },
    {
        "instruction": "Write a Python function to calculate the Euclidean distance between two points in a 3-dimensional space.",
        "input": "Point A: (1, 2, 3)\nPoint B: (4, 5, 6)",
        "response": "import math\n\ndef euclidean_distance(pointA, pointB):\n    return math.sqrt(sum([(a - b) ** 2 for a, b in zip(pointA, pointB)]))\n\npoint_A = (1, 2, 3)\npoint_B = (4, 5, 6)\ndistance = euclidean_distance(point_A, point_B)\nprint('Euclidean distance:', distance)",
        "output": "import math\n\ndef euclidean_distance(pointA, pointB):\n    return math.sqrt(sum([(a - b) ** 2 for a, b in zip(pointA, pointB)]))\n\npoint_A = (1, 2, 3)\npoint_B = (4, 5, 6)\ndistance = euclidean_distance(point_A, point_B)\nprint('Euclidean distance:', distance)"
    },
    {
        "instruction": "How can I implement a C# method to check if a string is a palindrome or not?",
        "input": "racecar",
        "response": "using System;\n\nclass PalindromeChecker\n{\n    public static bool IsPalindrome(string input)\n    {\n        int start = 0;\n        int end = input.Length - 1;\n        while (start < end)\n        {\n            if (input[start] != input[end])\n            {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n\n    static void Main()\n    {\n        string testStr = \"racecar\";\n        Console.WriteLine(\"Is '{0}' a palindrome? {1}\", testStr, IsPalindrome(testStr));\n    }\n}",
        "output": "using System;\n\nclass PalindromeChecker\n{\n    public static bool IsPalindrome(string input)\n    {\n        int start = 0;\n        int end = input.Length - 1;\n        while (start < end)\n        {\n            if (input[start] != input[end])\n            {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n\n    static void Main()\n    {\n        string testStr = \"racecar\";\n        Console.WriteLine(\"Is '{0}' a palindrome? {1}\", testStr, IsPalindrome(testStr));\n    }\n}"
    },
    {
        "instruction": "Create a shell script that displays the current date and time in the format 'YYYY-MM-DD HH:MM:SS'.",
        "input": "",
        "response": "#!/bin/bash\n\ndate '+%Y-%m-%d %H:%M:%S'",
        "output": "#!/bin/bash\n\ndate '+%Y-%m-%d %H:%M:%S'"
    },
    {
        "instruction": "Translate the given Python code to JavaScript, which finds the factorial of a given number.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nconst result = factorial(5);\nconsole.log(result);",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nconst result = factorial(5);\nconsole.log(result);"
    },
    {
        "instruction": "Create a JavaScript function to sort an array of numbers in ascending order using the Bubble Sort algorithm.",
        "input": "[90, 12, 15, 5, 42]",
        "response": "function bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\nlet numbers = [90, 12, 15, 5, 42];\nconsole.log(bubbleSort(numbers));",
        "output": "function bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\nlet numbers = [90, 12, 15, 5, 42];\nconsole.log(bubbleSort(numbers));"
    },
    {
        "instruction": "How to find the common elements between two given lists in Python and output the result as a list?",
        "input": "[1, 2, 3, 4, 5], [3, 4, 5, 6, 7]",
        "response": "def find_common_elements(list1, list2):\n    common_elements = [x for x in list1 if x in list2]\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\nresult = find_common_elements(list1, list2)\nprint(result)",
        "output": "def find_common_elements(list1, list2):\n    common_elements = [x for x in list1 if x in list2]\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\nresult = find_common_elements(list1, list2)\nprint(result)"
    },
    {
        "instruction": "Write a C++ program that reads the names of ten students and prints how many students' names start with the letter 'A'.",
        "input": "Alice, Bob, Andrew, Susan, Amanda, Joseph, Michael, Steve, Angela, Tom",
        "response": "#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> names = {\"Alice\", \"Bob\", \"Andrew\", \"Susan\", \"Amanda\", \"Joseph\", \"Michael\", \"Steve\", \"Angela\", \"Tom\"};\n    int count = 0;\n\n    for (const auto& name : names) {\n        if (name[0] == 'A') {\n            ++count;\n        }\n    }\n\n    std::cout << \"Number of students with names starting with 'A': \" << count << std::endl;\n}\n",
        "output": "#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n    std::vector<std::string> names = {\"Alice\", \"Bob\", \"Andrew\", \"Susan\", \"Amanda\", \"Joseph\", \"Michael\", \"Steve\", \"Angela\", \"Tom\"};\n    int count = 0;\n\n    for (const auto& name : names) {\n        if (name[0] == 'A') {\n            ++count;\n        }\n    }\n\n    std::cout << \"Number of students with names starting with 'A': \" << count << std::endl;\n}\n"
    },
    {
        "instruction": "Implement a Shell script that accepts an input directory and output directory and moves all files within the input directory to the output directory.",
        "input": "input_directory: /home/user/source, output_directory: /home/user/destination",
        "response": "#!/bin/bash\n\ninput_directory='/home/user/source'\noutput_directory='/home/user/destination'\n\nif [ ! -d \"$output_directory\" ]; then\n    mkdir -p \"$output_directory\"\nfi\n\nfor file in \"$input_directory\"/*; do\n    mv \"$file\" \"$output_directory\"\ndone\n\necho \"All files moved from $input_directory to $output_directory.\"",
        "output": "#!/bin/bash\n\ninput_directory='/home/user/source'\noutput_directory='/home/user/destination'\n\nif [ ! -d \"$output_directory\" ]; then\n    mkdir -p \"$output_directory\"\nfi\n\nfor file in \"$input_directory\"/*; do\n    mv \"$file\" \"$output_directory\"\ndone\n\necho \"All files moved from $input_directory to $output_directory.\""
    },
    {
        "instruction": "Implement a Java method that takes a string as input and returns the count of vowels (a, e, i, o, u) in the string.",
        "input": "",
        "response": "public int countVowels(String input) {\n    int count = 0;\n    String vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            count++;\n        }\n    }\n    return count;\n}",
        "output": "public int countVowels(String input) {\n    int count = 0;\n    String vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            count++;\n        }\n    }\n    return count;\n}"
    },
    {
        "instruction": "In Python, write a recursive function to compute the Fibonacci sequence up to the nth term, where n is the function's argument.",
        "input": "",
        "response": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)",
        "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"
    },
    {
        "instruction": "How can I create a simple REST API using JavaScript and Express that accepts a JSON object with a \"message\" key and stores it in-memory, allowing messages to be retrieved later?",
        "input": "",
        "response": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nlet messages = [];\n\napp.post('/message', (req, res) => {\n  const { message } = req.body;\n  if (message) {\n    messages.push(message);\n    res.status(200).send('Message stored.');\n  } else {\n    res.status(400).send('Invalid message.');\n  }\n});\n\napp.get('/messages', (req, res) => {\n  res.status(200).json(messages);\n});\n\napp.listen(3000, () => {\n  console.log('API listening on port 3000');\n});",
        "output": "const express = require('express');\nconst app = express();\napp.use(express.json());\n\nlet messages = [];\n\napp.post('/message', (req, res) => {\n  const { message } = req.body;\n  if (message) {\n    messages.push(message);\n    res.status(200).send('Message stored.');\n  } else {\n    res.status(400).send('Invalid message.');\n  }\n});\n\napp.get('/messages', (req, res) => {\n  res.status(200).json(messages);\n});\n\napp.listen(3000, () => {\n  console.log('API listening on port 3000');\n});"
    },
    {
        "instruction": "Address the memory leak issue in the following C++ code snippet which creates a new integer on the heap and prints its value: \n\n#include <iostream>\n\nint main() {\n  int *number = new int;\n  *number = 42;\n  std::cout << *number << std::endl;\n  return 0;\n}",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n  int *number = new int;\n  *number = 42;\n  std::cout << *number << std::endl;\n\n  // Fix the memory leak by deallocating the memory\n  delete number;\n\n  return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n  int *number = new int;\n  *number = 42;\n  std::cout << *number << std::endl;\n\n  // Fix the memory leak by deallocating the memory\n  delete number;\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a Java method that takes two strings as input, compares their length, and returns the longer string.",
        "input": "string1: \"Hello, world!\"\nstring2: \"Bonjour, le monde!\"",
        "response": "public static String longerString(String s1, String s2) {\n    if (s1.length() > s2.length()) {\n        return s1;\n    } else {\n        return s2;\n    }\n}",
        "output": "public static String longerString(String s1, String s2) {\n    if (s1.length() > s2.length()) {\n        return s1;\n    } else {\n        return s2;\n    }\n}"
    },
    {
        "instruction": "Create a Python script that reads a CSV file and outputs the sum of a specified column.",
        "input": "Example CSV Content:\nName,Age,Salary\nAlice,30,55000\nBob,25,60000\nCharlie,22,45000\n\nSelected column: Salary",
        "response": "import csv\n\n\ndef sum_column(file_path, column):\n    total = 0\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total += int(row[column])\n    return total",
        "output": "import csv\n\n\ndef sum_column(file_path, column):\n    total = 0\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            total += int(row[column])\n    return total"
    },
    {
        "instruction": "Translate the following JavaScript function that calculates the factorial of a given number n into C++ code.",
        "input": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "response": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
        "output": "#include <iostream>\n\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Given a faulty C# code snippet that is supposed to reverse a given string, debug and correct the code.",
        "input": "string inputString = \"Hello, world!\";\nstring reversedString = \"\";\nfor (int i = inputString.Length - 1; i >= 0; i++) {\n    reversedString += inputString[i];\n}",
        "response": "string ReverseString(string inputString) {\n    char[] charArray = inputString.ToCharArray();\n    Array.Reverse(charArray);\n    return new String(charArray);\n}\n\nstring inputString = \"Hello, world!\";\nstring reversedString = ReverseString(inputString);",
        "output": "string ReverseString(string inputString) {\n    char[] charArray = inputString.ToCharArray();\n    Array.Reverse(charArray);\n    return new String(charArray);\n}\n\nstring inputString = \"Hello, world!\";\nstring reversedString = ReverseString(inputString);"
    },
    {
        "instruction": "Translate the following Python code snippet that calculates the factorial of a number to JavaScript: `def factorial(n): if n == 1: return 1; return n * factorial(n-1)`",
        "input": "",
        "response": "function factorial(n) {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}",
        "output": "function factorial(n) {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}"
    },
    {
        "instruction": "Create a function in C++ that reads a file named 'data.txt' line by line and stores the lines in a vector<string>.",
        "input": "",
        "response": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> read_file() {\n  std::vector<std::string> lines;\n  std::ifstream file(\"data.txt\");\n  std::string line;\n  while (std::getline(file, line)) {\n    lines.push_back(line);\n  }\n  file.close();\n  return lines;\n}",
        "output": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> read_file() {\n  std::vector<std::string> lines;\n  std::ifstream file(\"data.txt\");\n  std::string line;\n  while (std::getline(file, line)) {\n    lines.push_back(line);\n  }\n  file.close();\n  return lines;\n}"
    },
    {
        "instruction": "How would you create a simple RESTful API in Python using the Flask framework, that allows users to retrieve and store JSON data in memory (not in a database)?",
        "input": "",
        "response": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nmemory_storage = {}\n\n@app.route('/api/data', methods=['GET', 'POST'])\ndef handle_data():\n  if request.method == 'POST':\n    request_data = request.get_json()\n    for key, value in request_data.items():\n      memory_storage[key] = value\n    return jsonify(request_data), 201\n\n  elif request.method == 'GET':\n    return jsonify(memory_storage)\n\nif __name__ == '__main__':\n  app.run(debug=True)",
        "output": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nmemory_storage = {}\n\n@app.route('/api/data', methods=['GET', 'POST'])\ndef handle_data():\n  if request.method == 'POST':\n    request_data = request.get_json()\n    for key, value in request_data.items():\n      memory_storage[key] = value\n    return jsonify(request_data), 201\n\n  elif request.method == 'GET':\n    return jsonify(memory_storage)\n\nif __name__ == '__main__':\n  app.run(debug=True)"
    },
    {
        "instruction": "Write a Java function that takes an array of strings as input and returns a hash set containing the unique elements.",
        "input": "",
        "response": "import java.util.HashSet;\nimport java.util.Arrays;\n\npublic class UniqueElements {\n  public static HashSet<String> uniqueStrings(String[] strings) {\n    HashSet<String> uniqueSet = new HashSet<String>(Arrays.asList(strings));\n    return uniqueSet;\n  }\n\n  public static void main(String[] args) {\n  }\n}",
        "output": "import java.util.HashSet;\nimport java.util.Arrays;\n\npublic class UniqueElements {\n  public static HashSet<String> uniqueStrings(String[] strings) {\n    HashSet<String> uniqueSet = new HashSet<String>(Arrays.asList(strings));\n    return uniqueSet;\n  }\n\n  public static void main(String[] args) {\n  }\n}"
    },
    {
        "instruction": "Write a Java function that takes an array of integers as input and returns the sum of squares of each element.",
        "input": "",
        "response": "public int sumOfSquares(int[] nums) {\n    int sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i] * nums[i];\n    }\n    return sum;\n}",
        "output": "public int sumOfSquares(int[] nums) {\n    int sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i] * nums[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "What C# code can be used to determine if a string contains only unique characters without using additional data structures?",
        "input": "",
        "response": "public bool HasUniqueChars(string s) {\n    for (int i = 0; i < s.Length - 1; i++) {\n        for (int j = i + 1; j < s.Length; j++) {\n            if (s[i] == s[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "output": "public bool HasUniqueChars(string s) {\n    for (int i = 0; i < s.Length - 1; i++) {\n        for (int j = i + 1; j < s.Length; j++) {\n            if (s[i] == s[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}"
    },
    {
        "instruction": "Create a Python script to download and save the content of a given URL into a file.",
        "input": "URL: 'https://www.example.com', File name: 'example.txt'",
        "response": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nwith open('example.txt', 'w') as file:\n    file.write(response.text)",
        "output": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nwith open('example.txt', 'w') as file:\n    file.write(response.text)"
    },
    {
        "instruction": "Write a Shell script that demonstrates usage of command substitution to list all the files in the current directory with their sizes.",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *;\ndo\n    size=$(du -sh $file)\n    echo \"$size\"\ndone",
        "output": "#!/bin/bash\n\nfor file in *;\ndo\n    size=$(du -sh $file)\n    echo \"$size\"\ndone"
    },
    {
        "instruction": "Create a Python function that takes a string as input and returns a new string with all vowels removed.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "def remove_vowels(sentence):\n    vowels = 'aeiouAEIOU'\n    new_sentence = ''.join([char for char in sentence if char not in vowels])\n    return new_sentence\n\ninput_sentence = 'The quick brown fox jumps over the lazy dog.'\nresult = remove_vowels(input_sentence)\nprint(result)",
        "output": "def remove_vowels(sentence):\n    vowels = 'aeiouAEIOU'\n    new_sentence = ''.join([char for char in sentence if char not in vowels])\n    return new_sentence\n\ninput_sentence = 'The quick brown fox jumps over the lazy dog.'\nresult = remove_vowels(input_sentence)\nprint(result)"
    },
    {
        "instruction": "Translate the following JavaScript code that calculates the factorial of a number to an equivalent Python code.",
        "input": "function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "instruction": "Write a Java program that takes a list of numbers and calculates the average of those numbers.",
        "input": "3, 5, 8, 10, 13",
        "response": "import java.util.Arrays;\nimport java.util.List;\n\npublic class AverageCalculator {\n    public static double calculateAverage(List<Integer> numbers) {\n        double sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 5, 8, 10, 13);\n        double average = calculateAverage(numbers);\n        System.out.println(average);\n    }\n}",
        "output": "import java.util.Arrays;\nimport java.util.List;\n\npublic class AverageCalculator {\n    public static double calculateAverage(List<Integer> numbers) {\n        double sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 5, 8, 10, 13);\n        double average = calculateAverage(numbers);\n        System.out.println(average);\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns the average of those numbers.",
        "input": "[2, 4, 6, 8, 10]",
        "response": "function average(numbers) {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    return sum / numbers.length;\n}\n\nconsole.log(average([2, 4, 6, 8, 10]));",
        "output": "function average(numbers) {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    return sum / numbers.length;\n}\n\nconsole.log(average([2, 4, 6, 8, 10]));"
    },
    {
        "instruction": "Create a Java class to represent a Circle with a radius attribute and a method to calculate its area.",
        "input": "Circle circle = new Circle(4.0);\nSystem.out.println(circle.calculateArea());",
        "response": "public class Circle {\n\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double calculateArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n}\n\n// Usage:\nCircle circle = new Circle(4.0);\nSystem.out.println(circle.calculateArea());",
        "output": "public class Circle {\n\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double calculateArea() {\n        return Math.PI * Math.pow(radius, 2);\n    }\n}\n\n// Usage:\nCircle circle = new Circle(4.0);\nSystem.out.println(circle.calculateArea());"
    },
    {
        "instruction": "Write a SQL query to select all employees with a salary greater than 50000 from the 'employees' table.",
        "input": "employees (id, name, salary):\n1, 'John Smith', 60000\n2, 'Jane Doe', 45000\n3, 'Mike Johnson', 55000",
        "response": "SELECT * FROM employees\nWHERE salary > 50000;",
        "output": "SELECT * FROM employees\nWHERE salary > 50000;"
    },
    {
        "instruction": "Implement a Python function that takes a string input and checks whether it is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.",
        "input": "madam",
        "response": "def is_palindrome(s):\n    return s == s[::-1]\n\ninput_str = 'madam'\nresult = is_palindrome(input_str)\nprint(result)",
        "output": "def is_palindrome(s):\n    return s == s[::-1]\n\ninput_str = 'madam'\nresult = is_palindrome(input_str)\nprint(result)"
    },
    {
        "instruction": "Given the following faulty C code, identify the error and provide the corrected version. The code is supposed to print numbers from 1 to 10.\n\n#include <stdio.h>\n\nint main() {\n    int i;\n    for(i = 0; i < 10; i++);\n    {\n        printf('%d\\n', i);\n    }\n    return 0;\n}",
        "input": "",
        "response": "#include <stdio.h>\n\nint main() {\n    int i;\n    for(i = 1; i <= 10; i++) // Corrected the loop condition and removed semicolon\n    {\n        printf(\"%d\\n\", i); // Corrected the quotation marks\n    }\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    int i;\n    for(i = 1; i <= 10; i++) // Corrected the loop condition and removed semicolon\n    {\n        printf(\"%d\\n\", i); // Corrected the quotation marks\n    }\n    return 0;\n}"
    },
    {
        "instruction": "Create a simple Java program that reads a user's age from the console and outputs whether they are an adult or not.",
        "input": "Enter your age: 20",
        "response": "import java.util.Scanner;\n\npublic class AgeChecker {\n\n    public static void main(String[] args) {\n        System.out.print(\"Enter your age: \");\n        Scanner scanner = new Scanner(System.in);\n        int age = scanner.nextInt();\n\n        if (age >= 18) {\n            System.out.println(\"You are an adult.\");\n        } else {\n            System.out.println(\"You are not an adult.\");\n        }\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class AgeChecker {\n\n    public static void main(String[] args) {\n        System.out.print(\"Enter your age: \");\n        Scanner scanner = new Scanner(System.in);\n        int age = scanner.nextInt();\n\n        if (age >= 18) {\n            System.out.println(\"You are an adult.\");\n        } else {\n            System.out.println(\"You are not an adult.\");\n        }\n    }\n}"
    },
    {
        "instruction": "Translate the following Python code to JavaScript. The code calculates the factorial of a given number using recursion.\n\n```python\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\n",
        "input": "",
        "response": "function factorial(n) {\n    if (n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
        "output": "function factorial(n) {\n    if (n === 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}"
    },
    {
        "instruction": "What is the correct way to define a class and a constructor in Java that initializes a name variable?",
        "input": "Class Name: Person\nVariable: String name",
        "response": "public class Person {\n    private String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n\n    // other methods and fields\n}",
        "output": "public class Person {\n    private String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n\n    // other methods and fields\n}"
    },
    {
        "instruction": "Write a Python code snippet that uses the requests library to send a GET request to a provided URL and prints the response's status code.",
        "input": "URL: https://api.example.com/data",
        "response": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\nprint(response.status_code)",
        "output": "import requests\n\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\nprint(response.status_code)"
    },
    {
        "instruction": "Explain and provide an example of a recursive function in C++ that calculates the nth Fibonacci number.",
        "input": "Fibonacci number: 6",
        "response": "// A recursive function in C++ to calculate the nth Fibonacci number.\n#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 6;\n    int result = fibonacci(n);\n    std::cout << \"Fibonacci number \" << n << \" is: \" << result << std::endl;\n    return 0;\n}",
        "output": "// A recursive function in C++ to calculate the nth Fibonacci number.\n#include <iostream>\n\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 6;\n    int result = fibonacci(n);\n    std::cout << \"Fibonacci number \" << n << \" is: \" << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Write a Python function that takes a string and reverses the order of the words in the sentence.",
        "input": "This is a simple sentence.",
        "response": "def reverse_words(s):\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\ninput_str = \"This is a simple sentence.\"\noutput_str = reverse_words(input_str)\nprint(output_str)",
        "output": "def reverse_words(s):\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\ninput_str = \"This is a simple sentence.\"\noutput_str = reverse_words(input_str)\nprint(output_str)"
    },
    {
        "instruction": "Design and implement a Java class Dog with properties name, age and breed. Include a constructor, accessor methods and a method called bark, which prints the dog's name followed by 'barks' to the console.",
        "input": "",
        "response": "public class Dog {\n    private String name;\n    private int age;\n    private String breed;\n\n    public Dog(String name, int age, String breed) {\n        this.name = name;\n        this.age = age;\n        this.breed = breed;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getBreed() {\n        return breed;\n    }\n\n    public void bark() {\n        System.out.println(name + \" barks\");\n    }\n}",
        "output": "public class Dog {\n    private String name;\n    private int age;\n    private String breed;\n\n    public Dog(String name, int age, String breed) {\n        this.name = name;\n        this.age = age;\n        this.breed = breed;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getBreed() {\n        return breed;\n    }\n\n    public void bark() {\n        System.out.println(name + \" barks\");\n    }\n}"
    },
    {
        "instruction": "How would you convert a list of integers in Python to a comma-separated string?",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def list_to_comma_separated_string(input_list):\n    return ', '.join(map(str, input_list))\n\ninteger_list = [1, 2, 3, 4, 5]\ncsv_string = list_to_comma_separated_string(integer_list)\nprint(csv_string)",
        "output": "def list_to_comma_separated_string(input_list):\n    return ', '.join(map(str, input_list))\n\ninteger_list = [1, 2, 3, 4, 5]\ncsv_string = list_to_comma_separated_string(integer_list)\nprint(csv_string)"
    },
    {
        "instruction": "Create a shell script that reads a list of file names and prints the size of each file in ascending order.",
        "input": "file1.txt file2.txt file3.txt",
        "response": "#!/bin/sh\n\n# Assumption: File names are passed as arguments\nfiles=\"$@\"\n\n# Collect file sizes and names in a temporary file\nsize_file=$(mktemp)\nfor file in $files; do\n    size=$(stat -c %s \"$file\")\n    echo \"$size $file\" >> \"$size_file\"\ndone\n\n# Sort the temporary file, print results and remove the temporary file\nsort -n \"$size_file\" | while read -r line; do\n    echo \"$line\"\ndone\n\nrm \"$size_file\"",
        "output": "#!/bin/sh\n\n# Assumption: File names are passed as arguments\nfiles=\"$@\"\n\n# Collect file sizes and names in a temporary file\nsize_file=$(mktemp)\nfor file in $files; do\n    size=$(stat -c %s \"$file\")\n    echo \"$size $file\" >> \"$size_file\"\ndone\n\n# Sort the temporary file, print results and remove the temporary file\nsort -n \"$size_file\" | while read -r line; do\n    echo \"$line\"\ndone\n\nrm \"$size_file\""
    },
    {
        "instruction": "Write a Java function that takes an integer array and returns the sum of all its elements.",
        "input": "",
        "response": "public static int sumArray(int[] array) {\n    int sum = 0;\n    for (int i : array) {\n        sum += i;\n    }\n    return sum;\n}",
        "output": "public static int sumArray(int[] array) {\n    int sum = 0;\n    for (int i : array) {\n        sum += i;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "What would be the equivalent JavaScript code for the following Python function that calculates the factorial of a given number?",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)",
        "response": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
        "output": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}"
    },
    {
        "instruction": "Create a C++ function that takes a string and returns a new string with all vowels removed.",
        "input": "",
        "response": "#include <string>\n#include <set>\n\nstd::string removeVowels(std::string input) {\n    std::set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::string result;\n    for (char c : input) {\n        if (vowels.find(c) == vowels.end()) {\n            result += c;\n        }\n    }\n    return result;\n}",
        "output": "#include <string>\n#include <set>\n\nstd::string removeVowels(std::string input) {\n    std::set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    std::string result;\n    for (char c : input) {\n        if (vowels.find(c) == vowels.end()) {\n            result += c;\n        }\n    }\n    return result;\n}"
    },
    {
        "instruction": "Translate the following Ruby code snippet into Python.",
        "input": "def capitalize_strings(strings)\n  strings.map(&:capitalize)\nend",
        "response": "def capitalize_strings(strings):\n    return [string.capitalize() for string in strings]",
        "output": "def capitalize_strings(strings):\n    return [string.capitalize() for string in strings]"
    },
    {
        "instruction": "Create a Python function that takes a list of numbers and calculates the product of all elements.",
        "input": "[2, 3, 4, 5]",
        "response": "def product_of_elements(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\nnumbers = [2, 3, 4, 5]\nprint(product_of_elements(numbers))",
        "output": "def product_of_elements(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\nnumbers = [2, 3, 4, 5]\nprint(product_of_elements(numbers))"
    },
    {
        "instruction": "Show a C++ program that computes the length of a string without using the strlen() function.",
        "input": "Tech Hub",
        "response": "#include <iostream>\n\nint string_length(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}\n\nint main() {\n    const char *str = \"Tech Hub\";\n    std::cout << \"Length of the string: \" << string_length(str) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint string_length(const char *str) {\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}\n\nint main() {\n    const char *str = \"Tech Hub\";\n    std::cout << \"Length of the string: \" << string_length(str) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How to read a CSV file using JavaScript and Node.js and display the content?",
        "input": "example.csv:\nName,Age,Gender\nAlice,30,Female\nBob,45,Male\n",
        "response": "const fs = require('fs');\nconst readline = require('readline');\n\nconst processCsv = async (filename) => {\n    const fileStream = fs.createReadStream(filename);\n    const rl = readline.createInterface({\n        input: fileStream,\n        crlfDelay: Infinity\n    });\n\n    for await (const line of rl) {\n        console.log(line);\n    }\n};\n\nprocessCsv('example.csv');",
        "output": "const fs = require('fs');\nconst readline = require('readline');\n\nconst processCsv = async (filename) => {\n    const fileStream = fs.createReadStream(filename);\n    const rl = readline.createInterface({\n        input: fileStream,\n        crlfDelay: Infinity\n    });\n\n    for await (const line of rl) {\n        console.log(line);\n    }\n};\n\nprocessCsv('example.csv');"
    },
    {
        "instruction": "Write a shell script to count the number of total files and directories in the current directory.",
        "input": "",
        "response": "#!/bin/bash\n\ntotal_files=0\ntotal_directories=0\n\nfor item in ./*; do\n    if [ -f \"$item\" ]; then\n        total_files=$((total_files+1))\n    elif [ -d \"$item\" ]; then\n        total_directories=$((total_directories+1))\n    fi\ndone\n\necho \"Total Files: $total_files\"\necho \"Total Directories: $total_directories\"",
        "output": "#!/bin/bash\n\ntotal_files=0\ntotal_directories=0\n\nfor item in ./*; do\n    if [ -f \"$item\" ]; then\n        total_files=$((total_files+1))\n    elif [ -d \"$item\" ]; then\n        total_directories=$((total_directories+1))\n    fi\ndone\n\necho \"Total Files: $total_files\"\necho \"Total Directories: $total_directories\""
    },
    {
        "instruction": "Implement a Java function that takes a string input and returns a reversed version of the string.",
        "input": "",
        "response": "public String reverseString(String input) {\n    StringBuilder sb = new StringBuilder(input);\n    return sb.reverse().toString();\n}",
        "output": "public String reverseString(String input) {\n    StringBuilder sb = new StringBuilder(input);\n    return sb.reverse().toString();\n}"
    },
    {
        "instruction": "What would be the expected output of the following Python code?",
        "input": "def some_function(value):\n    if value > 50:\n        return 'large'\n    elif value > 10:\n        return 'medium'\n    else:\n        return 'small'\n\nprint(some_function(45))",
        "response": "medium",
        "output": "medium"
    },
    {
        "instruction": "How would you rewrite this C code snippet to check for NULL pointers before dereferencing them?",
        "input": "struct Node *head = createNewNode();\nhead->next = createNewNode();\nhead->next->data = 42;",
        "response": "struct Node *head = createNewNode();\nif (head != NULL) {\n    head->next = createNewNode();\n    if (head->next != NULL) {\n        head->next->data = 42;\n    }\n}",
        "output": "struct Node *head = createNewNode();\nif (head != NULL) {\n    head->next = createNewNode();\n    if (head->next != NULL) {\n        head->next->data = 42;\n    }\n}"
    },
    {
        "instruction": "Translate the following JavaScript function that calculates the sum of an array of numbers into Python.",
        "input": "function sumArray(arr) {\n    return arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n}",
        "response": "def sum_array(arr):\n    return sum(arr)",
        "output": "def sum_array(arr):\n    return sum(arr)"
    },
    {
        "instruction": "Create a C++ function that receives a vector of integers and returns the median value.",
        "input": "std::vector<int> numbers = {1, 3, 4, 4, 6, 7, 9};",
        "response": "#include <vector>\n#include <algorithm>\n\ndouble median(std::vector<int> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    size_t size = numbers.size();\n    double median_value = 0.0;\n\n    if (size % 2 == 0) {\n        median_value = (numbers[size / 2 - 1] + numbers[size / 2]) / 2.0;\n    } else {\n        median_value = numbers[size / 2];\n    }\n\n    return median_value;\n}",
        "output": "#include <vector>\n#include <algorithm>\n\ndouble median(std::vector<int> numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    size_t size = numbers.size();\n    double median_value = 0.0;\n\n    if (size % 2 == 0) {\n        median_value = (numbers[size / 2 - 1] + numbers[size / 2]) / 2.0;\n    } else {\n        median_value = numbers[size / 2];\n    }\n\n    return median_value;\n}"
    },
    {
        "instruction": "How would you design a JavaScript function that takes a string as input and counts the number of words in that string?",
        "input": "const str = 'This is a sample text with seven words.';",
        "response": "function countWords(str) {\n    return str.trim().split(/\\s+/).length;\n}\n\n// Usage:\n// const numWords = countWords(str);",
        "output": "function countWords(str) {\n    return str.trim().split(/\\s+/).length;\n}\n\n// Usage:\n// const numWords = countWords(str);"
    },
    {
        "instruction": "Write a Python function that takes two strings as parameters and returns a new string consisting of the characters in both strings, sorted alphabetically.",
        "input": "str1 = 'gpt'\nstr2 = 'model'",
        "response": "def merge_sorted_strings(str1, str2):\n    combined = sorted(str1 + str2)\n    return ''.join(combined)\n\n# Usage:\n# merged_string = merge_sorted_strings(str1, str2)",
        "output": "def merge_sorted_strings(str1, str2):\n    combined = sorted(str1 + str2)\n    return ''.join(combined)\n\n# Usage:\n# merged_string = merge_sorted_strings(str1, str2)"
    },
    {
        "instruction": "Create a Java function that takes an array of integers and returns the array with all elements multiplied by a given factor.",
        "input": "int[] numbers = {2, 4, 6, 8};\nint factor = 3;",
        "response": "public static int[] multiplyArray(int[] numbers, int factor) {\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] *= factor;\n    }\n    return numbers;\n}\n\n// Usage:\n// int[] multipliedArray = multiplyArray(numbers, factor);",
        "output": "public static int[] multiplyArray(int[] numbers, int factor) {\n    for (int i = 0; i < numbers.length; i++) {\n        numbers[i] *= factor;\n    }\n    return numbers;\n}\n\n// Usage:\n// int[] multipliedArray = multiplyArray(numbers, factor);"
    },
    {
        "instruction": "Write a Python function that accepts two lists and returns the symmetric difference between them. The symmetric difference of two sets is the set of elements that are in either of the sets, but not in their intersection.",
        "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]",
        "response": "def symmetric_difference(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return list((set1 | set2) - (set1 & set2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nresult = symmetric_difference(list1, list2)\nprint(result)",
        "output": "def symmetric_difference(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return list((set1 | set2) - (set1 & set2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nresult = symmetric_difference(list1, list2)\nprint(result)"
    },
    {
        "instruction": "Translate the following Java code to equivalent C# code: Create a function that takes an integer array and returns the sum of all elements.",
        "input": "public static int sumArray(int[] arr) {\n    int sum = 0;\n    for (int number : arr) {\n        sum += number;\n    }\n    return sum;\n}",
        "response": "public static int SumArray(int[] arr) {\n    int sum = 0;\n    foreach (int number in arr) {\n        sum += number;\n    }\n    return sum;\n}",
        "output": "public static int SumArray(int[] arr) {\n    int sum = 0;\n    foreach (int number in arr) {\n        sum += number;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Can you debug and fix the given JavaScript code? The code is supposed to take an input string and return only the vowels in the string.",
        "input": "function getVowels(str) {\n    let vowels = 'aeiou';\n    let result = '';\n\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.contains(str.charAt(i))) {\n            result += str.charAt(i);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(getVowels('hello'));",
        "response": "function getVowels(str) {\n    let vowels = 'aeiou';\n    let result = '';\n\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.includes(str.charAt(i))) {\n            result += str.charAt(i);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(getVowels('hello'));",
        "output": "function getVowels(str) {\n    let vowels = 'aeiou';\n    let result = '';\n\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.includes(str.charAt(i))) {\n            result += str.charAt(i);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(getVowels('hello'));"
    },
    {
        "instruction": "Write a shell script to check if a given file exists and is readable. If yes, then print 'File is readable', otherwise print 'File is not readable'.",
        "input": "filename.txt",
        "response": "#!/bin/sh\n\nFILENAME='filename.txt'\n\nif [ -e $FILENAME ] && [ -r $FILENAME ]; then\n    echo 'File is readable'\nelse\n    echo 'File is not readable'\nfi",
        "output": "#!/bin/sh\n\nFILENAME='filename.txt'\n\nif [ -e $FILENAME ] && [ -r $FILENAME ]; then\n    echo 'File is readable'\nelse\n    echo 'File is not readable'\nfi"
    },
    {
        "instruction": "Create a Java function that takes an array of integers and returns the highest product of any two numbers in the array.",
        "input": "",
        "response": "public int highestProduct(int[] array) {\n    int maxProduct = Integer.MIN_VALUE;\n    for (int i = 0; i < array.length; i++) {\n        for (int j = i + 1; j < array.length; j++) {\n            int product = array[i] * array[j];\n            if (product > maxProduct) {\n                maxProduct = product;\n            }\n        }\n    }\n    return maxProduct;\n}",
        "output": "public int highestProduct(int[] array) {\n    int maxProduct = Integer.MIN_VALUE;\n    for (int i = 0; i < array.length; i++) {\n        for (int j = i + 1; j < array.length; j++) {\n            int product = array[i] * array[j];\n            if (product > maxProduct) {\n                maxProduct = product;\n            }\n        }\n    }\n    return maxProduct;\n}"
    },
    {
        "instruction": "How would you write a function in Python to check if a given string is a palindrome or not?",
        "input": "",
        "response": "def is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]",
        "output": "def is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]"
    },
    {
        "instruction": "Design a JavaScript function that takes two dates formatted as 'YYYY-MM-DD' and calculates the difference in days between them.",
        "input": "",
        "response": "function dateDifference(date1, date2) {\n  const dateObj1 = new Date(date1);\n  const dateObj2 = new Date(date2);\n  const timeDifference = Math.abs(dateObj2.getTime() - dateObj1.getTime());\n  const dayDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));\n  return dayDifference;\n}",
        "output": "function dateDifference(date1, date2) {\n  const dateObj1 = new Date(date1);\n  const dateObj2 = new Date(date2);\n  const timeDifference = Math.abs(dateObj2.getTime() - dateObj1.getTime());\n  const dayDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));\n  return dayDifference;\n}"
    },
    {
        "instruction": "Write a regular expression in Ruby to match an email address.",
        "input": "",
        "response": "/\\A[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z]{2,}\\z/",
        "output": "/\\A[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z]{2,}\\z/"
    },
    {
        "instruction": "Write a Python function to calculate the area of a circle given the radius. Use the formula area = pi * radius^2.",
        "input": "",
        "response": "def circle_area(radius):\n    import math\n    return math.pi * radius**2",
        "output": "def circle_area(radius):\n    import math\n    return math.pi * radius**2"
    },
    {
        "instruction": "Create a JavaScript function that will reverse the characters of a given string.",
        "input": "",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "How would you write a Java method that takes an integer array as input, and returns the sum of all its elements?",
        "input": "",
        "response": "public int arraySum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}",
        "output": "public int arraySum(int[] arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Provide a Ruby function that takes a list of numbers and returns the highest number in the list.",
        "input": "",
        "response": "def max_number(numbers)\n    return numbers.max\nend",
        "output": "def max_number(numbers)\n    return numbers.max\nend"
    },
    {
        "instruction": "How can you create an HTTP server in Node.js using the 'http' module?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('Hello World!');\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('Hello World!');\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});"
    },
    {
        "instruction": "Translate the following Python code snippet to JavaScript.",
        "input": "def greet(name):\n    return 'Hello, ' + name\n\nresult = greet('Alice')\nprint(result)",
        "response": "function greet(name) {\n    return 'Hello, ' + name;\n}\n\nconst result = greet('Alice');\nconsole.log(result);",
        "output": "function greet(name) {\n    return 'Hello, ' + name;\n}\n\nconst result = greet('Alice');\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ function that accepts a vector of integers and returns the sum of all its elements.",
        "input": "{1, 2, 3, 4, 5}",
        "response": "#include <iostream>\n#include <vector>\n\nint sum_elements(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int element : vec) {\n        sum += element;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> input_vec = {1, 2, 3, 4, 5};\n    int result = sum_elements(input_vec);\n    std::cout << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint sum_elements(const std::vector<int>& vec) {\n    int sum = 0;\n    for (int element : vec) {\n        sum += element;\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> input_vec = {1, 2, 3, 4, 5};\n    int result = sum_elements(input_vec);\n    std::cout << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Remove all vowels from the given string using Python.",
        "input": "The quick brown fox jumps over the lazy dog",
        "response": "def remove_vowels(text):\n    vowels = 'AEIOUaeiou'\n    return ''.join(c for c in text if c not in vowels)\n\ninput_str = 'The quick brown fox jumps over the lazy dog'\nresult = remove_vowels(input_str)\nprint(result)",
        "output": "def remove_vowels(text):\n    vowels = 'AEIOUaeiou'\n    return ''.join(c for c in text if c not in vowels)\n\ninput_str = 'The quick brown fox jumps over the lazy dog'\nresult = remove_vowels(input_str)\nprint(result)"
    },
    {
        "instruction": "Create a Java method that takes an array of integers and returns the sum of all the even numbers in the array.",
        "input": "",
        "response": "public int sumEvenNumbers(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        if (num % 2 == 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Write a Python script that reads a text file and outputs the number of lines, words, and characters in it.",
        "input": "",
        "response": "def file_stats(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n    line_count = len(lines)\n    word_count = sum(len(line.split()) for line in lines)\n    char_count = sum(len(line) for line in lines)\n    return (line_count, word_count, char_count)\n\nfilename = 'input.txt'\nline_count, word_count, char_count = file_stats(filename)\nprint(f'Lines: {line_count}, Words: {word_count}, Characters: {char_count}')",
        "output": "def file_stats(filename):\n    with open(filename, 'r') as file:\n        lines = file.readlines()\n    line_count = len(lines)\n    word_count = sum(len(line.split()) for line in lines)\n    char_count = sum(len(line) for line in lines)\n    return (line_count, word_count, char_count)\n\nfilename = 'input.txt'\nline_count, word_count, char_count = file_stats(filename)\nprint(f'Lines: {line_count}, Words: {word_count}, Characters: {char_count}')"
    },
    {
        "instruction": "What would be the expected output of the following C++ code snippet?",
        "input": "#include <iostream>\n\nint main() {\n    int x = 5;\n    int y = 10;\n    std::cout << (x + y) * (y - x) << std::endl;\n    return 0;\n}",
        "response": "The expected output of the given C++ code snippet is 75. The expression (x + y) * (y - x) evaluates to (5 + 10) * (10 - 5) = 15 * 5 = 75.",
        "output": "The expected output of the given C++ code snippet is 75. The expression (x + y) * (y - x) evaluates to (5 + 10) * (10 - 5) = 15 * 5 = 75."
    },
    {
        "instruction": "Translate the following Python code that initializes a dictionary with keys as numbers and their squares as values, into JavaScript.",
        "input": "squares = {x: x**2 for x in range(1, 6)}\nprint(squares)",
        "response": "const squares = {};\nfor (let x = 1; x <= 5; x++) {\n    squares[x] = x ** 2;\n}\nconsole.log(squares);",
        "output": "const squares = {};\nfor (let x = 1; x <= 5; x++) {\n    squares[x] = x ** 2;\n}\nconsole.log(squares);"
    },
    {
        "instruction": "Create a Java method that reverses a given string and demonstrates its usage within the main function.",
        "input": "hello world!",
        "response": "public class StringReverse {\n\n    public static String reverseString(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello world!\";\n        String result = reverseString(input);\n        System.out.println(result);\n    }\n}",
        "output": "public class StringReverse {\n\n    public static String reverseString(String input) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = input.length() - 1; i >= 0; i--) {\n            reversed.append(input.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello world!\";\n        String result = reverseString(input);\n        System.out.println(result);\n    }\n}"
    },
    {
        "instruction": "How can I generate a list of even numbers from 0 to 20 in Python using list comprehension?",
        "input": "",
        "response": "even_numbers = [i for i in range(21) if i % 2 == 0]\nprint(even_numbers)",
        "output": "even_numbers = [i for i in range(21) if i % 2 == 0]\nprint(even_numbers)"
    },
    {
        "instruction": "Translate the following JavaScript code snippet to a Python equivalent: `const a = [1, 2, 3]; const b = [4, 5, 6]; const c = [...a, ...b]; console.log(c);`",
        "input": "",
        "response": "a = [1, 2, 3]\nb = [4, 5, 6]\nc = a + b\nprint(c)",
        "output": "a = [1, 2, 3]\nb = [4, 5, 6]\nc = a + b\nprint(c)"
    },
    {
        "instruction": "Explain and correct the following Python code snippet that intends to calculate the sum of the square of a list of numbers: `def sum_of_squares(numbers): for num in numbers: sum += num ** 2 return sum`.",
        "input": "[1, 2, 3, 4]",
        "response": "The code contains a few issues: 1) There is no initial value for the variable 'sum'; 2) there is no proper indentation.\n\nHere is the corrected version of the code:\n\ndef sum_of_squares(numbers):\n    sum = 0\n    for num in numbers:\n        sum += num ** 2\n    return sum\n\nnumbers = [1, 2, 3, 4]\nresult = sum_of_squares(numbers)\nprint(result)",
        "output": "The code contains a few issues: 1) There is no initial value for the variable 'sum'; 2) there is no proper indentation.\n\nHere is the corrected version of the code:\n\ndef sum_of_squares(numbers):\n    sum = 0\n    for num in numbers:\n        sum += num ** 2\n    return sum\n\nnumbers = [1, 2, 3, 4]\nresult = sum_of_squares(numbers)\nprint(result)"
    },
    {
        "instruction": "Create a C# function that takes a string input and reverses the characters within the string.",
        "input": "Input: \"OpenAI\"\nOutput: \"IANepo\"",
        "response": "public static string ReverseString(string input)\n{\n    char[] charArray = input.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n}\n\nstring input = \"OpenAI\";\nstring output = ReverseString(input);\nConsole.WriteLine(output);",
        "output": "public static string ReverseString(string input)\n{\n    char[] charArray = input.ToCharArray();\n    Array.Reverse(charArray);\n    return new string(charArray);\n}\n\nstring input = \"OpenAI\";\nstring output = ReverseString(input);\nConsole.WriteLine(output);"
    },
    {
        "instruction": "In JavaScript, how can you remove an element with a given id from the DOM?",
        "input": "Element id: 'remove-me'",
        "response": "var element = document.getElementById('remove-me');\nif (element) {\n    element.parentNode.removeChild(element);\n}",
        "output": "var element = document.getElementById('remove-me');\nif (element) {\n    element.parentNode.removeChild(element);\n}"
    },
    {
        "instruction": "Implement a Python script that takes the file path of a text file as input and prints the number of lines in the file.",
        "input": "File path: '/path/to/textfile.txt'",
        "response": "def count_lines(file_path):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n        return len(lines)\n\nfile_path = '/path/to/textfile.txt'\nline_count = count_lines(file_path)\nprint(line_count)",
        "output": "def count_lines(file_path):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n        return len(lines)\n\nfile_path = '/path/to/textfile.txt'\nline_count = count_lines(file_path)\nprint(line_count)"
    },
    {
        "instruction": "Write a Java function that accepts an array of integers and returns the maximum value in the array.",
        "input": "int[] numbers = {3, 5, 2, 7, 1};",
        "response": "public static int findMax(int[] numbers) {\n    int max = numbers[0];\n\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n\n    return max;\n}\n\nint[] numbers = {3, 5, 2, 7, 1};\nint maxValue = findMax(numbers);\nSystem.out.println(maxValue);",
        "output": "public static int findMax(int[] numbers) {\n    int max = numbers[0];\n\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n\n    return max;\n}\n\nint[] numbers = {3, 5, 2, 7, 1};\nint maxValue = findMax(numbers);\nSystem.out.println(maxValue);"
    },
    {
        "instruction": "Implement a lambda function in Python to calculate the sum of two numbers.",
        "input": "",
        "response": "sum_lambda = lambda x, y: x + y",
        "output": "sum_lambda = lambda x, y: x + y"
    },
    {
        "instruction": "What would be the output of this C++ code snippet, and explain each line briefly.",
        "input": "#include <iostream>\n\nint main() {\n int x = 4;\n int y = 5;\n int z;\n z = x + y;\n std::cout << z;\n return 0;\n}",
        "response": "The output would be '9'. This code initializes two integers 'x' and 'y' with values 4 and 5 respectively. Then it declares an integer 'z' and calculates the sum of 'x' and 'y', assigning the result to 'z'. Finally, it prints the value of 'z' (9) to the console.",
        "output": "The output would be '9'. This code initializes two integers 'x' and 'y' with values 4 and 5 respectively. Then it declares an integer 'z' and calculates the sum of 'x' and 'y', assigning the result to 'z'. Finally, it prints the value of 'z' (9) to the console."
    },
    {
        "instruction": "Given a string containing a date in the format 'YYYY-MM-DD', write a Java function to extract the year, month, and day as integers.",
        "input": "",
        "response": "public static int[] extractYearMonthDay(String date) {\n String[] parts = date.split(\"-\");\n int year = Integer.parseInt(parts[0]);\n int month = Integer.parseInt(parts[1]);\n int day = Integer.parseInt(parts[2]);\n return new int[]{year, month, day};\n}",
        "output": "public static int[] extractYearMonthDay(String date) {\n String[] parts = date.split(\"-\");\n int year = Integer.parseInt(parts[0]);\n int month = Integer.parseInt(parts[1]);\n int day = Integer.parseInt(parts[2]);\n return new int[]{year, month, day};\n}"
    },
    {
        "instruction": "Identify and correct any syntax errors in this JavaScript code which is intended to calculate the factorial of a given number.",
        "input": "function factorial(n) {\n let result = 1;\n if n = 0 {\n return 1;\n } else {\n for (let i = 1; i <= n; i++) {\n results = results * i;\n }\n return results;\n}}",
        "response": "function factorial(n) {\n let result = 1;\n if (n === 0) { // Added parentheses and changed '=' to '==='.\n return 1;\n } else {\n for (let i = 1; i <= n; i++) {\n result = result * i; // Changed 'results' to 'result'.\n }\n return result; // Changed 'results' to 'result'.\n}};",
        "output": "function factorial(n) {\n let result = 1;\n if (n === 0) { // Added parentheses and changed '=' to '==='.\n return 1;\n } else {\n for (let i = 1; i <= n; i++) {\n result = result * i; // Changed 'results' to 'result'.\n }\n return result; // Changed 'results' to 'result'.\n}};"
    },
    {
        "instruction": "Translate the following Python code to its equivalent in JavaScript:",
        "input": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(3, 5)\nprint(result)",
        "response": "function addNumbers(a, b) {\n    return a + b;\n}\n\nconst result = addNumbers(3, 5);\nconsole.log(result);",
        "output": "function addNumbers(a, b) {\n    return a + b;\n}\n\nconst result = addNumbers(3, 5);\nconsole.log(result);"
    },
    {
        "instruction": "Write a program in C++ that calculates the Fibonacci sequence up to the 10th term.",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    int first = 0, second = 1, next, n = 10;\n\n    for (int i = 0; i < n; ++i) {\n        if (i <= 1) {\n            next = i;\n        } else {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        std::cout << next << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int first = 0, second = 1, next, n = 10;\n\n    for (int i = 0; i < n; ++i) {\n        if (i <= 1) {\n            next = i;\n        } else {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        std::cout << next << ' ';\n    }\n    std::cout << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Fix the syntax errors in the following Python code:",
        "input": "def factorial(n):\n    if n == 0:\n       return 1\n    else\n        return n * factorial(n - 1)\n\nprint(factorial(5)",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))"
    },
    {
        "instruction": "Write a Python function that takes in a list of numbers and returns the sum of all even numbers.",
        "input": "",
        "response": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum",
        "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            even_sum += number\n    return even_sum"
    },
    {
        "instruction": "Translate the following Java code to equivalent C++ code: Java code: public static void main(String[] args) { System.out.println(\"Hello, World!\"); }",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "In JavaScript, create a function named 'addNumbers' that takes two parameters 'a' and 'b' and returns their sum.",
        "input": "",
        "response": "function addNumbers(a, b) {\n    return a + b;\n}",
        "output": "function addNumbers(a, b) {\n    return a + b;\n}"
    },
    {
        "instruction": "Fix the following Python code so it properly calculates the factorial of a given number 'n': def factorial(n): if n == 0: return 1 return n * factorial(n-1)",
        "input": "",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
        "instruction": "Create a Python script that connects to a MySQL database, retrieves all records from a table named 'users', and prints them.",
        "input": "",
        "response": "import mysql.connector\n\n# Replace these values with your own MySQL database credentials\ncnx = mysql.connector.connect(user='username', password='password', host='localhost', database='database_name')\ncursor = cnx.cursor()\n\nquery = 'SELECT * FROM users'\ncursor.execute(query)\n\nfor row in cursor:\n  print(row)\n\ncursor.close()\ncnx.close()",
        "output": "import mysql.connector\n\n# Replace these values with your own MySQL database credentials\ncnx = mysql.connector.connect(user='username', password='password', host='localhost', database='database_name')\ncursor = cnx.cursor()\n\nquery = 'SELECT * FROM users'\ncursor.execute(query)\n\nfor row in cursor:\n  print(row)\n\ncursor.close()\ncnx.close()"
    },
    {
        "instruction": "Translate this JavaScript code that calculates the area of a circle to its equivalent in Java:\n\n```javascript\nfunction calcArea(radius) {\n  let area = Math.PI * Math.pow(radius, 2);\n  return area;\n}\n```\n",
        "input": "",
        "response": "public class CircleArea {\n\n  public static double calcArea(double radius) {\n    double area = Math.PI * Math.pow(radius, 2);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    double area = calcArea(5.0);\n    System.out.println(area);\n  }\n}",
        "output": "public class CircleArea {\n\n  public static double calcArea(double radius) {\n    double area = Math.PI * Math.pow(radius, 2);\n    return area;\n  }\n\n  public static void main(String[] args) {\n    double area = calcArea(5.0);\n    System.out.println(area);\n  }\n}"
    },
    {
        "instruction": "How to write a Shell script that lists all the subdirectories and files in the current directory, while ignoring hidden files and directories?",
        "input": "",
        "response": "#!/bin/sh\n\nfor item in *; do\n  if [ -d \"$item\" ]; then\n    echo \"Directory: $item\"\n  elif [ -f \"$item\" ]; then\n    echo \"File: $item\"\n  fi\ndone",
        "output": "#!/bin/sh\n\nfor item in *; do\n  if [ -d \"$item\" ]; then\n    echo \"Directory: $item\"\n  elif [ -f \"$item\" ]; then\n    echo \"File: $item\"\n  fi\ndone"
    },
    {
        "instruction": "Design a C++ class called 'Car' with private member variables 'make', 'model', and 'year'. Create a constructor that sets these values and accessor functions like getMake(), getModel(), and getYear() to retrieve them.",
        "input": "",
        "response": "#include <string>\n\nclass Car {\n  private:\n    std::string make;\n    std::string model;\n    int year;\n\n  public:\n    Car(std::string make, std::string model, int year) : make(make), model(model), year(year) {}\n\n    std::string getMake() {\n      return make;\n    }\n\n    std::string getModel() {\n      return model;\n    }\n\n    int getYear() {\n      return year;\n    }\n};",
        "output": "#include <string>\n\nclass Car {\n  private:\n    std::string make;\n    std::string model;\n    int year;\n\n  public:\n    Car(std::string make, std::string model, int year) : make(make), model(model), year(year) {}\n\n    std::string getMake() {\n      return make;\n    }\n\n    std::string getModel() {\n      return model;\n    }\n\n    int getYear() {\n      return year;\n    }\n};"
    },
    {
        "instruction": "Write a Python function that takes a list of numbers as input and returns the sum of all even numbers in the list.",
        "input": "[2, 7, 8, 3, 4, 1, 0, 6]",
        "response": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum",
        "output": "def sum_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum"
    },
    {
        "instruction": "What is the expected output of the following C++ code snippet?\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 5;\n    int b = 10;\n    int c = a++ + ++b;\n    cout << a << ' ' << b << ' ' << c << endl;\n    return 0;\n}",
        "input": "",
        "response": "The expected output is: '6 11 16'. The code uses the pre-increment (++b) and post-increment (a++) operators, resulting in a being incremented to 6 and b incremented to 11. The value of c is calculated using 5 (a's original value) + 11 = 16.",
        "output": "The expected output is: '6 11 16'. The code uses the pre-increment (++b) and post-increment (a++) operators, resulting in a being incremented to 6 and b incremented to 11. The value of c is calculated using 5 (a's original value) + 11 = 16."
    },
    {
        "instruction": "Create a shell script that takes a file name as an argument and outputs the file's number of lines, words, and characters, similar to the output of the 'wc' Unix command.",
        "input": "file.txt",
        "response": "#!/bin/sh\n\nfile=$1\nlines=$(cat $file | wc -l)\nwords=$(cat $file | wc -w)\ncharacters=$(cat $file | wc -c)\n\necho -e \"${lines} ${words} ${characters} ${file}\"",
        "output": "#!/bin/sh\n\nfile=$1\nlines=$(cat $file | wc -l)\nwords=$(cat $file | wc -w)\ncharacters=$(cat $file | wc -c)\n\necho -e \"${lines} ${words} ${characters} ${file}\""
    },
    {
        "instruction": "Translate the following Java code to C# code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}",
        "input": "",
        "response": "using System;\n\npublic class HelloWorld {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Hello, world!\");\n    }\n}",
        "output": "using System;\n\npublic class HelloWorld {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Hello, world!\");\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function that receives a string and returns the reverse of the input string.",
        "input": "Hello, world!",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconsole.log(reverseString('Hello, world!'));",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}\n\nconsole.log(reverseString('Hello, world!'));"
    },
    {
        "instruction": "Translate the following C++ code snippet to equivalent Python code: 'std::string s = \"hello\"; int length = s.length();'",
        "input": "std::string s = \"hello\"; int length = s.length();",
        "response": "s = 'hello'\nlength = len(s)",
        "output": "s = 'hello'\nlength = len(s)"
    },
    {
        "instruction": "Can you create a Bash shell script that loops from 1 to 10 and echoes the square of each number?",
        "input": "",
        "response": "#!/bin/bash\n\nfor i in {1..10}\ndo\n    square=$((i * i))\n    echo \"Square of $i is $square\"\ndone",
        "output": "#!/bin/bash\n\nfor i in {1..10}\ndo\n    square=$((i * i))\n    echo \"Square of $i is $square\"\ndone"
    },
    {
        "instruction": "Write a Java code that reads a CSV file and prints each row and column. Assume the CSV file is using a comma as a delimiter.",
        "input": "sample.csv: 'Name,Age,Occupation\\nBob,32,Developer\\nAlice,28,Designer\\nCharlie,30,Manager'",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\nclass ReadCSV {\n    public static void main(String[] args) {\n        String csvFile = \"sample.csv\";\n        String line;\n        String csvSeparator = \",\";\n\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n            while ((line = br.readLine()) != null) {\n                String[] columns = line.split(csvSeparator);\n                for (String column : columns) {\n                    System.out.print(column + \" \");\n                }\n                System.out.println();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\nclass ReadCSV {\n    public static void main(String[] args) {\n        String csvFile = \"sample.csv\";\n        String line;\n        String csvSeparator = \",\";\n\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n            while ((line = br.readLine()) != null) {\n                String[] columns = line.split(csvSeparator);\n                for (String column : columns) {\n                    System.out.print(column + \" \");\n                }\n                System.out.println();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
        "instruction": "In Python, how can you find the longest word in a given sentence?",
        "input": "The quick brown fox jumped over the lazy dog.",
        "response": "def find_longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = 'The quick brown fox jumped over the lazy dog.'\nprint(find_longest_word(sentence))",
        "output": "def find_longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = 'The quick brown fox jumped over the lazy dog.'\nprint(find_longest_word(sentence))"
    },
    {
        "instruction": "Write a Java program to print the Fibonacci sequence up to a given number n.",
        "input": "10",
        "response": "public class Fibonacci {\n    public static void main(String[] args) {\n        int n = 10;\n        int a = 0;\n        int b = 1;\n\n        System.out.print(a + \" \");\n        for (int i = 1; i < n; i++) {\n            System.out.print(b + \" \");\n            int temp = b;\n            b = a + b;\n            a = temp;\n        }\n    }\n}",
        "output": "public class Fibonacci {\n    public static void main(String[] args) {\n        int n = 10;\n        int a = 0;\n        int b = 1;\n\n        System.out.print(a + \" \");\n        for (int i = 1; i < n; i++) {\n            System.out.print(b + \" \");\n            int temp = b;\n            b = a + b;\n            a = temp;\n        }\n    }\n}"
    },
    {
        "instruction": "Can you provide a C++ code snippet that calculates and prints the factorial of a given integer?",
        "input": "5",
        "response": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int n = 5;\n    std::cout << \"Factorial of \" << n << \" is \" << factorial(n) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function to calculate the area of a right-angled triangle given the lengths of its legs a and b.",
        "input": "",
        "response": "def right_triangle_area(a, b):\n    return 0.5 * a * b\n\n# Example:\n# a = 3\n# b = 4\n# area = right_triangle_area(a, b)\n# print(area)",
        "output": "def right_triangle_area(a, b):\n    return 0.5 * a * b\n\n# Example:\n# a = 3\n# b = 4\n# area = right_triangle_area(a, b)\n# print(area)"
    },
    {
        "instruction": "How would you implement a simple HTTP server in Node.js that returns 'Hello, World!' for all requests?",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!\\n');\n});\n\nconst port = 8080;\nserver.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!\\n');\n});\n\nconst port = 8080;\nserver.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});"
    },
    {
        "instruction": "Convert the following Python code block into equivalent JavaScript code:",
        "input": "import math\n\ndef square_root(x):\n    return math.sqrt(x)\n\nresult = square_root(16)\nprint(result)",
        "response": "function square_root(x) {\n    return Math.sqrt(x);\n}\n\nconst result = square_root(16);\nconsole.log(result);",
        "output": "function square_root(x) {\n    return Math.sqrt(x);\n}\n\nconst result = square_root(16);\nconsole.log(result);"
    },
    {
        "instruction": "Write a C++ program that finds the perimeter of a rectangle given its length and width.",
        "input": "Let the length be 5 and the width be 3.",
        "response": "#include <iostream>\n\nint main() {\n    int length = 5;\n    int width = 3;\n\n    int perimeter = 2 * (length + width);\n\n    std::cout << \"Perimeter of the rectangle: \" << perimeter << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int length = 5;\n    int width = 3;\n\n    int perimeter = 2 * (length + width);\n\n    std::cout << \"Perimeter of the rectangle: \" << perimeter << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that receives an array of integers and calculates the product of all elements in the array.",
        "input": "[2, 4, 6, 8]",
        "response": "function calculateProduct(numbers) {\n    let product = 1;\n    for (const number of numbers) {\n        product *= number;\n    }\n    return product;\n}\n\nconst result = calculateProduct([2, 4, 6, 8]);\nconsole.log(result);",
        "output": "function calculateProduct(numbers) {\n    let product = 1;\n    for (const number of numbers) {\n        product *= number;\n    }\n    return product;\n}\n\nconst result = calculateProduct([2, 4, 6, 8]);\nconsole.log(result);"
    },
    {
        "instruction": "Provide a Java code snippet that reads a text file line by line and prints each line to the console.",
        "input": "MyFile.txt",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFile {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"MyFile.txt\"))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFile {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"MyFile.txt\"))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
    },
    {
        "instruction": "What would be the output of the following Python code? Explain the logic behind the code.",
        "input": "def calculate(a, b):\n    return a * b - (a + b)\n\nprint(calculate(3, 5))",
        "response": "The output of the code would be 4. The code first multiplies a and b (3 * 5 = 15), then it adds a and b (3 + 5 = 8), and finally subtracts the sum from the product (15 - 8 = 4). The calculate function returns the result of this calculation, which is then printed to the console.",
        "output": "The output of the code would be 4. The code first multiplies a and b (3 * 5 = 15), then it adds a and b (3 + 5 = 8), and finally subtracts the sum from the product (15 - 8 = 4). The calculate function returns the result of this calculation, which is then printed to the console."
    },
    {
        "instruction": "Rewrite the following C++ code into Python, preserving the functionality.",
        "input": "#include <iostream>\n\nint main() {\n    int number = 10;\n    for (int i = 1; i <= number; ++i) {\n        std::cout << i << std::endl;\n    }\n    return 0;\n}",
        "response": "def main():\n    number = 10\n    for i in range(1, number + 1):\n        print(i)\n\nif __name__ == '__main__':\n    main()",
        "output": "def main():\n    number = 10\n    for i in range(1, number + 1):\n        print(i)\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "instruction": "Create a Java function that takes a String as input and returns the number of words in the input string.",
        "input": "",
        "response": "public int countWords(String input) {\n    if (input == null || input.isEmpty()) {\n        return 0;\n    }\n    String[] words = input.split(\"\\\\s+\");\n    return words.length;\n}",
        "output": "public int countWords(String input) {\n    if (input == null || input.isEmpty()) {\n        return 0;\n    }\n    String[] words = input.split(\"\\\\s+\");\n    return words.length;\n}"
    },
    {
        "instruction": "What is the result of running the following JavaScript code?",
        "input": "function sumOfSquares(n) {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\nsumOfSquares(5);",
        "response": "The result of running the given JavaScript code is 30. The sumOfSquares function calculates the sum of the squares of the numbers from 0 to n-1. In this case, n is 5, so it calculates the sum of the squares of the numbers from 0 to 4, which is 0*0 + 1*1 + 2*2 + 3*3 + 4*4 = 0 + 1 + 4 + 9 + 16 = 30.",
        "output": "The result of running the given JavaScript code is 30. The sumOfSquares function calculates the sum of the squares of the numbers from 0 to n-1. In this case, n is 5, so it calculates the sum of the squares of the numbers from 0 to 4, which is 0*0 + 1*1 + 2*2 + 3*3 + 4*4 = 0 + 1 + 4 + 9 + 16 = 30."
    },
    {
        "instruction": "Fix the syntax error in the given Python code and rewrite the code correctly.",
        "input": "def is_palindrome(word):\n    if word == word[::-1\n        return True\n    else:\n        return False",
        "response": "def is_palindrome(word):\n    if word == word[::-1]:\n        return True\n    else:\n        return False",
        "output": "def is_palindrome(word):\n    if word == word[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Create a Java function that would generate the first n Fibonacci numbers in an ArrayList.",
        "input": "",
        "response": "import java.util.ArrayList;\n\npublic ArrayList<Integer> generateFibonacci(int n) {\n    ArrayList<Integer> fibonacciNumbers = new ArrayList<>();\n    if (n <= 0) {\n        return fibonacciNumbers;\n    }\n    fibonacciNumbers.add(0);\n    if (n == 1) {\n        return fibonacciNumbers;\n    }\n    fibonacciNumbers.add(1);\n    for(int i = 2; i < n; i++) {\n        int nextNum = fibonacciNumbers.get(i - 1) + fibonacciNumbers.get(i - 2);\n        fibonacciNumbers.add(nextNum);\n    }\n    return fibonacciNumbers;\n}",
        "output": "import java.util.ArrayList;\n\npublic ArrayList<Integer> generateFibonacci(int n) {\n    ArrayList<Integer> fibonacciNumbers = new ArrayList<>();\n    if (n <= 0) {\n        return fibonacciNumbers;\n    }\n    fibonacciNumbers.add(0);\n    if (n == 1) {\n        return fibonacciNumbers;\n    }\n    fibonacciNumbers.add(1);\n    for(int i = 2; i < n; i++) {\n        int nextNum = fibonacciNumbers.get(i - 1) + fibonacciNumbers.get(i - 2);\n        fibonacciNumbers.add(nextNum);\n    }\n    return fibonacciNumbers;\n}"
    },
    {
        "instruction": "What would be the equivalent of the following JavaScript code in Python? const nums = [1, 2, 3, 4, 5].map(x => x * 2);",
        "input": "",
        "response": "nums = [x * 2 for x in [1, 2, 3, 4, 5]]",
        "output": "nums = [x * 2 for x in [1, 2, 3, 4, 5]]"
    },
    {
        "instruction": "In C++, implement a function that replaces all spaces in a given string with the provided character.",
        "input": "",
        "response": "#include <string>\n\nstd::string replaceSpaces(const std::string& str, char replacement) {\n    std::string result = str;\n    for (size_t i = 0; i < result.length(); i++) {\n        if (result[i] == ' ') {\n            result[i] = replacement;\n        }\n    }\n    return result;\n}",
        "output": "#include <string>\n\nstd::string replaceSpaces(const std::string& str, char replacement) {\n    std::string result = str;\n    for (size_t i = 0; i < result.length(); i++) {\n        if (result[i] == ' ') {\n            result[i] = replacement;\n        }\n    }\n    return result;\n}"
    },
    {
        "instruction": "Debug the following piece of Python code which should calculate the factorial of a given number n:",
        "input": "def factorial(n):\n    result = 0\n    for i in range(n):\n        result *= i\n    return result",
        "response": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
        "output": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"
    },
    {
        "instruction": "Write a function in JavaScript to reverse the order of words in a given string.",
        "input": "Sample string: 'Hello, how are you today?'",
        "response": "function reverseWords(str) {\n  return str.split(' ').reverse().join(' ');\n}\n\nconst inputStr = 'Hello, how are you today?';\nconsole.log(reverseWords(inputStr));",
        "output": "function reverseWords(str) {\n  return str.split(' ').reverse().join(' ');\n}\n\nconst inputStr = 'Hello, how are you today?';\nconsole.log(reverseWords(inputStr));"
    },
    {
        "instruction": "Create a shell script that lists all files in the current directory with a specific extension.",
        "input": "Extension: '.txt'",
        "response": "#!/bin/bash\n\n# List all files with '.txt' extension in the current directory\n\nfor file in *\\.txt; do\n  echo \"$file\"\ndone",
        "output": "#!/bin/bash\n\n# List all files with '.txt' extension in the current directory\n\nfor file in *\\.txt; do\n  echo \"$file\"\ndone"
    },
    {
        "instruction": "How would you implement a recursive function in C++ that calculates the Fibonacci sequence for a given index?",
        "input": "Calculate the 10th number in the Fibonacci sequence.",
        "response": "#include<iostream>\n\nusing namespace std;\n\nint fibonacci(int n) {\n  if (n <=0) return 0;\n  if (n == 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n  int n = 10;\n  cout << \"The 10th Fibonacci number is: \" << fibonacci(n) << endl;\n  return 0;\n}",
        "output": "#include<iostream>\n\nusing namespace std;\n\nint fibonacci(int n) {\n  if (n <=0) return 0;\n  if (n == 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n  int n = 10;\n  cout << \"The 10th Fibonacci number is: \" << fibonacci(n) << endl;\n  return 0;\n}"
    },
    {
        "instruction": "Implement a Java method that removes duplicates from a given ArrayList of integers and returns the result as a new ArrayList.",
        "input": "ArrayList input: [1, 2, 3, 3, 4, 5, 6, 6, 7]",
        "response": "import java.util.ArrayList;\nimport java.util.HashSet;\n\npublic class RemoveDuplicates {\n\n  public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> inputList) {\n    HashSet<Integer> set = new HashSet<>(inputList);\n    ArrayList<Integer> resultList = new ArrayList<>(set);\n    return resultList;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> inputList = new ArrayList<>(List.of(1, 2, 3, 3, 4, 5, 6, 6, 7));\n    System.out.println(removeDuplicates(inputList));\n  }\n}",
        "output": "import java.util.ArrayList;\nimport java.util.HashSet;\n\npublic class RemoveDuplicates {\n\n  public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> inputList) {\n    HashSet<Integer> set = new HashSet<>(inputList);\n    ArrayList<Integer> resultList = new ArrayList<>(set);\n    return resultList;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Integer> inputList = new ArrayList<>(List.of(1, 2, 3, 3, 4, 5, 6, 6, 7));\n    System.out.println(removeDuplicates(inputList));\n  }\n}"
    },
    {
        "instruction": "Write a Python function that takes a list of integers and filters out the even numbers.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "response": "def filter_even_numbers(numbers):\n  even_numbers = [number for number in numbers if number % 2 == 0]\n  return even_numbers\n\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = filter_even_numbers(numbers)\nprint(even_numbers)",
        "output": "def filter_even_numbers(numbers):\n  even_numbers = [number for number in numbers if number % 2 == 0]\n  return even_numbers\n\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = filter_even_numbers(numbers)\nprint(even_numbers)"
    },
    {
        "instruction": "How would you rewrite the following Java code using Java 8 streams?",
        "input": "List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\nList<Integer> evenNumbers = new ArrayList<>();\nfor (Integer number : numbers) {\n  if (number % 2 == 0) {\n    evenNumbers.add(number);\n  }\n}",
        "response": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class EvenNumbers {\n  public static void main(String[] args) {\n    List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n    List<Integer> evenNumbers = numbers.stream()\n                                      .filter(number -> number % 2 == 0)\n                                      .collect(Collectors.toList());\n    System.out.println(evenNumbers);\n  }\n}",
        "output": "import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class EvenNumbers {\n  public static void main(String[] args) {\n    List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n    List<Integer> evenNumbers = numbers.stream()\n                                      .filter(number -> number % 2 == 0)\n                                      .collect(Collectors.toList());\n    System.out.println(evenNumbers);\n  }\n}"
    },
    {
        "instruction": "Create a JavaScript function that accepts a string input and returns the number of occurrences of each character in the input.",
        "input": "\"hello\"",
        "response": "function countCharacters(input) {\n  const charCount = {};\n  for (const char of input) {\n    if (charCount[char]) {\n      charCount[char] += 1;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return charCount;\n}\n\nconst input = 'hello';\nconst charCount = countCharacters(input);\nconsole.log(charCount);",
        "output": "function countCharacters(input) {\n  const charCount = {};\n  for (const char of input) {\n    if (charCount[char]) {\n      charCount[char] += 1;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return charCount;\n}\n\nconst input = 'hello';\nconst charCount = countCharacters(input);\nconsole.log(charCount);"
    },
    {
        "instruction": "Write a C++ program that reads the user's input of three integer values and computes the sum of the three input values.",
        "input": "9 5 2",
        "response": "#include <iostream>\n\nint main() {\n  int a, b, c;\n  std::cout << \"Enter three integer values: \";\n  std::cin >> a >> b >> c;\n\n  int sum = a + b + c;\n  std::cout << \"The sum of the input values is: \" << sum << std::endl;\n\n  return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n  int a, b, c;\n  std::cout << \"Enter three integer values: \";\n  std::cin >> a >> b >> c;\n\n  int sum = a + b + c;\n  std::cout << \"The sum of the input values is: \" << sum << std::endl;\n\n  return 0;\n}"
    },
    {
        "instruction": "Create a function in JavaScript that adds two given numbers and returns the result.",
        "input": "",
        "response": "function addNumbers(num1, num2) {\n  var sum = num1 + num2;\n  return sum;\n}\n\n// Example usage:\n// var result = addNumbers(3, 5);\n// console.log(result); // Output: 8",
        "output": "function addNumbers(num1, num2) {\n  var sum = num1 + num2;\n  return sum;\n}\n\n// Example usage:\n// var result = addNumbers(3, 5);\n// console.log(result); // Output: 8"
    },
    {
        "instruction": "What is a Java code snippet to read strings from a file called 'input.txt'?",
        "input": "File content:\nLine 1\nLine 2\nLine 3",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadStringsFromFile {\n  public static void main(String[] args) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\n      String line;\n      while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n      }\n      reader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadStringsFromFile {\n  public static void main(String[] args) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\n      String line;\n      while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n      }\n      reader.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}"
    },
    {
        "instruction": "Translate the following Python code to C# code to create a program that calculates the sum of numbers from 1 to n:",
        "input": "def sum_of_numbers(n):\n    return (n * (n + 1)) // 2\n\nn = 10\nprint(sum_of_numbers(n))",
        "response": "using System;\n\nnamespace SumOfNumbers\n{\n  class Program\n  {\n    public static int SumOfNumbers(int n)\n    {\n      return (n * (n + 1)) / 2;\n    }\n\n    static void Main(string[] args)\n    {\n      int n = 10;\n      Console.WriteLine(SumOfNumbers(n));\n    }\n  }\n}",
        "output": "using System;\n\nnamespace SumOfNumbers\n{\n  class Program\n  {\n    public static int SumOfNumbers(int n)\n    {\n      return (n * (n + 1)) / 2;\n    }\n\n    static void Main(string[] args)\n    {\n      int n = 10;\n      Console.WriteLine(SumOfNumbers(n));\n    }\n  }\n}"
    },
    {
        "instruction": "Debug the following Python code and fix any syntax or logic errors:",
        "input": "def prime_check(num):\n    if num <= 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0\n            return False\n    return True\n\nprint(prime_check(1)  # False\nprint(prime_check(5)  # True",
        "response": "def prime_check(num):\n    if num <= 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:  # Added a colon\n            return False\n    return True\n\nprint(prime_check(1))  # Fixed parentheses, False\nprint(prime_check(5))  # Fixed parentheses, True",
        "output": "def prime_check(num):\n    if num <= 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:  # Added a colon\n            return False\n    return True\n\nprint(prime_check(1))  # Fixed parentheses, False\nprint(prime_check(5))  # Fixed parentheses, True"
    },
    {
        "instruction": "Create a C++ function that returns the sum of all even numbers from a given input integer vector.",
        "input": "std::vector<int> input_numbers = {1, 2, 3, 4, 5, 6};",
        "response": "#include <iostream>\n#include <vector>\n\nint sumEvenNumbers(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (const int& number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> input_numbers = {1, 2, 3, 4, 5, 6};\n    int result = sumEvenNumbers(input_numbers);\n    std::cout << \"Sum of even numbers: \" << result << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint sumEvenNumbers(const std::vector<int>& numbers) {\n    int sum = 0;\n    for (const int& number : numbers) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}\n\nint main() {\n    std::vector<int> input_numbers = {1, 2, 3, 4, 5, 6};\n    int result = sumEvenNumbers(input_numbers);\n    std::cout << \"Sum of even numbers: \" << result << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you rewrite the following Java code to use a lambda expression instead of an anonymous class?",
        "input": "Collections.sort(employeeList, new Comparator<Employee>() {\n    @Override\n    public int compare(Employee emp1, Employee emp2) {\n        return emp1.getName().compareTo(emp2.getName());\n    }\n});",
        "response": "Collections.sort(employeeList, (Employee emp1, Employee emp2) -> emp1.getName().compareTo(emp2.getName()));",
        "output": "Collections.sort(employeeList, (Employee emp1, Employee emp2) -> emp1.getName().compareTo(emp2.getName()));"
    },
    {
        "instruction": "Given a Python dictionary containing keys as the students' names and the values as their marks, write a function to find the student with the highest marks.",
        "input": "student_marks = {'John': 45, 'Sam': 88, 'Sophia': 90, 'Micheal': 85}",
        "response": "def find_highest_scorer(student_marks):\n    return max(student_marks, key=student_marks.get)\n\nstudent_marks = {'John': 45, 'Sam': 88, 'Sophia': 90, 'Micheal': 85}\nprint(find_highest_scorer(student_marks))",
        "output": "def find_highest_scorer(student_marks):\n    return max(student_marks, key=student_marks.get)\n\nstudent_marks = {'John': 45, 'Sam': 88, 'Sophia': 90, 'Micheal': 85}\nprint(find_highest_scorer(student_marks))"
    },
    {
        "instruction": "Can you provide a shell script that counts the number of lines in a given text file?",
        "input": "filename = 'file.txt'",
        "response": "#!/bin/bash\n\nfilename='file.txt'\ncount=$(wc -l < $filename)\necho \"The file '$filename' has $count lines.\"",
        "output": "#!/bin/bash\n\nfilename='file.txt'\ncount=$(wc -l < $filename)\necho \"The file '$filename' has $count lines.\""
    },
    {
        "instruction": "Create a Python function that accepts a string and reverses the words in it. Test it with the input string provided.",
        "input": "Hello world I am a chatbot",
        "response": "def reverse_words(s):\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\ninput_string = 'Hello world I am a chatbot'\nresult = reverse_words(input_string)\nprint(result)",
        "output": "def reverse_words(s):\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\ninput_string = 'Hello world I am a chatbot'\nresult = reverse_words(input_string)\nprint(result)"
    },
    {
        "instruction": "How would you write a C program that converts a sequence of Celsius temperatures to Fahrenheit? Include the input prompt for the user.",
        "input": "40",
        "response": "#include <stdio.h>\n\nint main() {\n    float celsius, fahrenheit;\n    printf(\"Enter temperature in Celsius: \");\n    scanf(\"%f\", &celsius);\n\n    fahrenheit = (celsius * 9 / 5) + 32;\n    printf(\"%.2f Celsius is equal to %.2f Fahrenheit\\n\", celsius, fahrenheit);\n\n    return 0;\n}",
        "output": "#include <stdio.h>\n\nint main() {\n    float celsius, fahrenheit;\n    printf(\"Enter temperature in Celsius: \");\n    scanf(\"%f\", &celsius);\n\n    fahrenheit = (celsius * 9 / 5) + 32;\n    printf(\"%.2f Celsius is equal to %.2f Fahrenheit\\n\", celsius, fahrenheit);\n\n    return 0;\n}"
    },
    {
        "instruction": "Write a JavaScript program that accepts a list of comma-separated integers and returns the maximum and minimum number in the array.",
        "input": "1,3,10,2,7",
        "response": "function findMaxMin(numbers) {\n    let numArray = numbers.split(',').map(Number);\n    let min = Math.min(...numArray);\n    let max = Math.max(...numArray);\n    return `Minimum: ${min}, Maximum: ${max}`;\n}\n\nlet input = '1,3,10,2,7';\nlet result = findMaxMin(input);\nconsole.log(result);",
        "output": "function findMaxMin(numbers) {\n    let numArray = numbers.split(',').map(Number);\n    let min = Math.min(...numArray);\n    let max = Math.max(...numArray);\n    return `Minimum: ${min}, Maximum: ${max}`;\n}\n\nlet input = '1,3,10,2,7';\nlet result = findMaxMin(input);\nconsole.log(result);"
    },
    {
        "instruction": "Implement a Java function that receives a string of digits and calculates the sum of the digits. Test the function with the example input provided.",
        "input": "12345",
        "response": "public class SumDigits {\n\n    public static int sumDigits(String str) {\n        int sum = 0;\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        String input = \"12345\";\n        int result = sumDigits(input);\n        System.out.println(\"The sum of the digits is: \" + result);\n    }\n}",
        "output": "public class SumDigits {\n\n    public static int sumDigits(String str) {\n        int sum = 0;\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        String input = \"12345\";\n        int result = sumDigits(input);\n        System.out.println(\"The sum of the digits is: \" + result);\n    }\n}"
    },
    {
        "instruction": "Create a Java function that checks if a given word is a palindrome, and returns true if it is, otherwise false.",
        "input": "racecar",
        "response": "public boolean isPalindrome(String word) {\n    int left = 0;\n    int right = word.length() - 1;\n\n    while (left < right) {\n        if (word.charAt(left) != word.charAt(right)) {\n            return false;\n        }\n\n        left++;\n        right--;\n    }\n\n    return true;\n}",
        "output": "public boolean isPalindrome(String word) {\n    int left = 0;\n    int right = word.length() - 1;\n\n    while (left < right) {\n        if (word.charAt(left) != word.charAt(right)) {\n            return false;\n        }\n\n        left++;\n        right--;\n    }\n\n    return true;\n}"
    },
    {
        "instruction": "In JavaScript, how do you filter an array of numbers to obtain a new array containing only even numbers?",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "response": "const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst evenNumbers = numbers.filter(number => number % 2 === 0);\n// evenNumbers: [2, 4, 6, 8, 10]",
        "output": "const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst evenNumbers = numbers.filter(number => number % 2 === 0);\n// evenNumbers: [2, 4, 6, 8, 10]"
    },
    {
        "instruction": "Write a C++ function that takes a vector of integers and calculates the sum of its elements.",
        "input": "vector<int> v = {1, 2, 3, 4, 5};",
        "response": "#include <vector>\n\nint sum_vector(const std::vector<int>& v) {\n    int sum = 0;\n\n    for (const int& num : v) {\n        sum += num;\n    }\n\n    return sum;\n}",
        "output": "#include <vector>\n\nint sum_vector(const std::vector<int>& v) {\n    int sum = 0;\n\n    for (const int& num : v) {\n        sum += num;\n    }\n\n    return sum;\n}"
    },
    {
        "instruction": "Can you provide a Python function that opens a text file, reads its content, and prints out the total number of words?",
        "input": "my_text_file.txt contains: 'Hello, world! How are you? I am fine.'",
        "response": "def count_words(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n        words = content.split()\n        return len(words)\n\n# Usage:\nprint(count_words('my_text_file.txt'))",
        "output": "def count_words(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n        words = content.split()\n        return len(words)\n\n# Usage:\nprint(count_words('my_text_file.txt'))"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns an array containing the square of each number.",
        "input": "[2, 3, 4]",
        "response": "function squareArray(numbers) {\n  return numbers.map(number => number * number);\n}\n\nconsole.log(squareArray([2, 3, 4])); // Output: [4, 9, 16]",
        "output": "function squareArray(numbers) {\n  return numbers.map(number => number * number);\n}\n\nconsole.log(squareArray([2, 3, 4])); // Output: [4, 9, 16]"
    },
    {
        "instruction": "What's the correct way to write a for loop in C++ that iterates over a vector of integers and prints each element?",
        "input": "std::vector<int> numbers = {1, 2, 3, 4, 5};",
        "response": "#include <iostream>\n#include <vector>\n\nint main() {\n  std::vector<int> numbers = {1, 2, 3, 4, 5};\n\n  for (int number : numbers) {\n    std::cout << number << std::endl;\n  }\n\n  return 0;\n}",
        "output": "#include <iostream>\n#include <vector>\n\nint main() {\n  std::vector<int> numbers = {1, 2, 3, 4, 5};\n\n  for (int number : numbers) {\n    std::cout << number << std::endl;\n  }\n\n  return 0;\n}"
    },
    {
        "instruction": "Write a Java code to read the contents of a given text file line by line.",
        "input": "sample.txt",
        "response": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFileLineByLine {\n\n  public static void main(String[] args) {\n    String fileName = \"sample.txt\";\n\n    try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n      String line;\n      while ((line = br.readLine()) != null) {\n        System.out.println(line);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}",
        "output": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadFileLineByLine {\n\n  public static void main(String[] args) {\n    String fileName = \"sample.txt\";\n\n    try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n      String line;\n      while ((line = br.readLine()) != null) {\n        System.out.println(line);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}"
    },
    {
        "instruction": "Implement a Python script that uses the requests library to fetch data from the given API endpoint and save it as a JSON file.",
        "input": "https://api.example.com/data",
        "response": "import requests\nimport json\n\ndef save_data_to_json(api_url, output_file):\n    response = requests.get(api_url)\n    data = response.json()\n\n    with open(output_file, 'w') as f:\n        json.dump(data, f)\n\nif __name__ == '__main__':\n    api_url = 'https://api.example.com/data'\n    output_file = 'data.json'\n    save_data_to_json(api_url, output_file)",
        "output": "import requests\nimport json\n\ndef save_data_to_json(api_url, output_file):\n    response = requests.get(api_url)\n    data = response.json()\n\n    with open(output_file, 'w') as f:\n        json.dump(data, f)\n\nif __name__ == '__main__':\n    api_url = 'https://api.example.com/data'\n    output_file = 'data.json'\n    save_data_to_json(api_url, output_file)"
    },
    {
        "instruction": "Write a shell script that, given a path to a directory, counts the number of files and subdirectories inside it.",
        "input": "/home/user/documents",
        "response": "#!/bin/sh\n\ndir_path='/home/user/documents'\n\nfiles_count=$(find \"$dir_path\" -type f | wc -l)\ndirs_count=$(find \"$dir_path\" -type d | wc -l)\n\necho \"Files: $files_count\"\necho \"Directories: $dirs_count\"",
        "output": "#!/bin/sh\n\ndir_path='/home/user/documents'\n\nfiles_count=$(find \"$dir_path\" -type f | wc -l)\ndirs_count=$(find \"$dir_path\" -type d | wc -l)\n\necho \"Files: $files_count\"\necho \"Directories: $dirs_count\""
    },
    {
        "instruction": "In C++, write a function that calculates the area of a rectangle, given the length and width as arguments.",
        "input": "5, 10",
        "response": "#include <iostream>\n\nfloat area_of_rectangle(float length, float width) {\n    return length * width;\n}\n\nint main() {\n    float length = 5;\n    float width = 10;\n\n    float area = area_of_rectangle(length, width);\n    std::cout << \"Area of rectangle: \" << area << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n\nfloat area_of_rectangle(float length, float width) {\n    return length * width;\n}\n\nint main() {\n    float length = 5;\n    float width = 10;\n\n    float area = area_of_rectangle(length, width);\n    std::cout << \"Area of rectangle: \" << area << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "How would you write a Python function that takes a list of numbers and returns the sum of all the odd numbers in the list?",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "def sum_odd_numbers(numbers):\n    return sum(filter(lambda x: x % 2 == 1, numbers))\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_odd_numbers(my_list)\nprint(result)",
        "output": "def sum_odd_numbers(numbers):\n    return sum(filter(lambda x: x % 2 == 1, numbers))\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = sum_odd_numbers(my_list)\nprint(result)"
    },
    {
        "instruction": "Create a Java program that takes a user input string and reverses it.",
        "input": "Hello, world!",
        "response": "import java.util.Scanner;\n\npublic class ReverseString {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n\n        StringBuilder reversed = new StringBuilder(input);\n        reversed.reverse();\n\n        System.out.println(\"Reversed string: \" + reversed.toString());\n    }\n}",
        "output": "import java.util.Scanner;\n\npublic class ReverseString {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n\n        StringBuilder reversed = new StringBuilder(input);\n        reversed.reverse();\n\n        System.out.println(\"Reversed string: \" + reversed.toString());\n    }\n}"
    },
    {
        "instruction": "Provide a JavaScript function that takes an array of integers and returns an array of the squares of those integers.",
        "input": "",
        "response": "function squareArray(arr) {\n  return arr.map(function(num) {\n    return num * num;\n  });\n}",
        "output": "function squareArray(arr) {\n  return arr.map(function(num) {\n    return num * num;\n  });\n}"
    },
    {
        "instruction": "How can we implement a function in Python that receives a list of strings and returns the longest string in the list?",
        "input": "",
        "response": "def find_longest_string(strings):\n    longest_string = ''\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string",
        "output": "def find_longest_string(strings):\n    longest_string = ''\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"
    },
    {
        "instruction": "Create a C# method to find the factorial of a given positive integer using recursion.",
        "input": "",
        "response": "public static int Factorial(int n)\n{\n    if (n == 1)\n        return 1;\n    else\n        return n * Factorial(n - 1);\n}",
        "output": "public static int Factorial(int n)\n{\n    if (n == 1)\n        return 1;\n    else\n        return n * Factorial(n - 1);\n}"
    },
    {
        "instruction": "Please rewrite the following Java code snippet to use a 'for' loop instead of a 'while' loop: int i = 0; while (i < 10) { System.out.println(i); i++; }",
        "input": "",
        "response": "for (int i = 0; i < 10; i++) {\n    System.out.println(i);\n}",
        "output": "for (int i = 0; i < 10; i++) {\n    System.out.println(i);\n}"
    },
    {
        "instruction": "Write a Python function to find the frequency of each word in a given text string.",
        "input": "text = 'The quick brown fox jumps over the lazy dog'",
        "response": "def word_frequency(text):\n    words = text.split()\n    frequency = {}\n\n    for word in words:\n        if word.lower() in frequency:\n            frequency[word.lower()] += 1\n        else:\n            frequency[word.lower()] = 1\n\n    return frequency\n\n\ntext = 'The quick brown fox jumps over the lazy dog'\nprint(word_frequency(text))",
        "output": "def word_frequency(text):\n    words = text.split()\n    frequency = {}\n\n    for word in words:\n        if word.lower() in frequency:\n            frequency[word.lower()] += 1\n        else:\n            frequency[word.lower()] = 1\n\n    return frequency\n\n\ntext = 'The quick brown fox jumps over the lazy dog'\nprint(word_frequency(text))"
    },
    {
        "instruction": "How can I implement a Java method to calculate the area of a rectangle given its length and width?",
        "input": "length = 5\nwidth = 7",
        "response": "public class Rectangle {\n\n    public static double calculateArea(double length, double width) {\n        return length * width;\n    }\n\n    public static void main(String[] args) {\n        double length = 5;\n        double width = 7;\n        System.out.println(\"Area: \" + calculateArea(length, width));\n    }\n}",
        "output": "public class Rectangle {\n\n    public static double calculateArea(double length, double width) {\n        return length * width;\n    }\n\n    public static void main(String[] args) {\n        double length = 5;\n        double width = 7;\n        System.out.println(\"Area: \" + calculateArea(length, width));\n    }\n}"
    },
    {
        "instruction": "Construct a C++ program that reads a file containing integers and outputs their sum.",
        "input": "contents of input.txt:\n1\n2\n3\n4\n5",
        "response": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream inputFile(\"input.txt\");\n    if (!inputFile) {\n        std::cerr << \"Error opening file.\\n\";\n        return 1;\n    }\n\n    int sum = 0, num;\n    while (inputFile >> num) {\n        sum += num;\n    }\n\n    std::cout << \"Sum: \" << sum << std::endl;\n\n    inputFile.close();\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n\nint main() {\n    std::ifstream inputFile(\"input.txt\");\n    if (!inputFile) {\n        std::cerr << \"Error opening file.\\n\";\n        return 1;\n    }\n\n    int sum = 0, num;\n    while (inputFile >> num) {\n        sum += num;\n    }\n\n    std::cout << \"Sum: \" << sum << std::endl;\n\n    inputFile.close();\n\n    return 0;\n}"
    },
    {
        "instruction": "Develop a JavaScript function which takes a string and reverses the order of words in the sentence.",
        "input": "sentence = 'Reverse the order of these words'",
        "response": "function reverseWords(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.reverse();\n    const reversedSentence = reversedWords.join(' ');\n    return reversedSentence;\n}\n\nconst sentence = 'Reverse the order of these words';\nconsole.log(reverseWords(sentence));",
        "output": "function reverseWords(sentence) {\n    const words = sentence.split(' ');\n    const reversedWords = words.reverse();\n    const reversedSentence = reversedWords.join(' ');\n    return reversedSentence;\n}\n\nconst sentence = 'Reverse the order of these words';\nconsole.log(reverseWords(sentence));"
    },
    {
        "instruction": "Create a Java method to calculate the area of a trapezoid given the lengths of its two parallel sides and its height.",
        "input": "",
        "response": "public double trapezoidArea(double side1, double side2, double height) {\n    return 0.5 * (side1 + side2) * height;\n}",
        "output": "public double trapezoidArea(double side1, double side2, double height) {\n    return 0.5 * (side1 + side2) * height;\n}"
    },
    {
        "instruction": "Write a C++ program that outputs the multiplication table of a given number from 1 to 10.",
        "input": "7",
        "response": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num = 7;\n    cout << \"Multiplication Table of \" << num << \":-\\n\\n\";\n    for (int i = 1; i <= 10; i++) {\n        cout << num << \" * \" << i << \" = \" << num * i << endl;\n    }\n    return 0;\n}",
        "output": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num = 7;\n    cout << \"Multiplication Table of \" << num << \":-\\n\\n\";\n    for (int i = 1; i <= 10; i++) {\n        cout << num << \" * \" << i << \" = \" << num * i << endl;\n    }\n    return 0;\n}"
    },
    {
        "instruction": "How would you create a JavaScript function to remove all occurrences of a specific element from an array?",
        "input": "['apple', 'banana', 'orange', 'apple', 'apple']\n'apple'",
        "response": "function removeElement(array, element) {\n    return array.filter(item => item !== element);\n}\n\nconst fruits = ['apple', 'banana', 'orange', 'apple', 'apple'];\nconst removedApples = removeElement(fruits, 'apple');",
        "output": "function removeElement(array, element) {\n    return array.filter(item => item !== element);\n}\n\nconst fruits = ['apple', 'banana', 'orange', 'apple', 'apple'];\nconst removedApples = removeElement(fruits, 'apple');"
    },
    {
        "instruction": "Implement a Python function to convert a given string to Pig Latin. Pig Latin is a constructed language that works by moving the first letter of a word to the end of the word and appending \"ay\" to the end.",
        "input": "\"Hello\"",
        "response": "def pig_latin(word):\n    return word[1:] + word[0] + 'ay'\n\nprint(pig_latin('Hello'))",
        "output": "def pig_latin(word):\n    return word[1:] + word[0] + 'ay'\n\nprint(pig_latin('Hello'))"
    },
    {
        "instruction": "Implement a Python function that returns a list of first n Fibonacci numbers.",
        "input": "",
        "response": "def generate_fibonacci(n):\n    fib_numbers = [0, 1]\n    for i in range(2, n):\n        next_number = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(next_number)\n    return fib_numbers[:n]",
        "output": "def generate_fibonacci(n):\n    fib_numbers = [0, 1]\n    for i in range(2, n):\n        next_number = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(next_number)\n    return fib_numbers[:n]"
    },
    {
        "instruction": "Write a Java method that takes a string input and returns the number of vowels in the string.",
        "input": "",
        "response": "public int countVowels(String input) {\n    int vowelCount = 0;\n    String vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}",
        "output": "public int countVowels(String input) {\n    int vowelCount = 0;\n    String vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            vowelCount++;\n        }\n    }\n    return vowelCount;\n}"
    },
    {
        "instruction": "Given this buggy JavaScript code, fix the syntax and logic errors: functio calculateArea)width, height{ if width <==0 || height <== 0) return 'Invalid'; return width * heigth; }",
        "input": "",
        "response": "function calculateArea(width, height) {\n    if (width <= 0 || height <= 0) {\n        return 'Invalid';\n    }\n    return width * height;\n}",
        "output": "function calculateArea(width, height) {\n    if (width <= 0 || height <= 0) {\n        return 'Invalid';\n    }\n    return width * height;\n}"
    },
    {
        "instruction": "Translate the following C++ code to Python: #include <iostream> \nusing namespace std; \nint main() { \nint a = 5, b = 2; \nint result = a / b; \ncout << \"The result is: \" << result << endl; \nreturn 0; }",
        "input": "",
        "response": "def main():\n    a = 5\n    b = 2\n    result = a // b\n    print(\"The result is:\", result)\n\nmain()",
        "output": "def main():\n    a = 5\n    b = 2\n    result = a // b\n    print(\"The result is:\", result)\n\nmain()"
    },
    {
        "instruction": "Create a Java function that calculates the sum of all elements in a 2D array.",
        "input": "int[][] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };",
        "response": "public int sumMatrix(int[][] matrix) {\n    int sum = 0;\n    for (int i = 0; i < matrix.length; i++) {\n        for (int j = 0; j < matrix[i].length; j++) {\n            sum += matrix[i][j];\n        }\n    }\n    return sum;\n}",
        "output": "public int sumMatrix(int[][] matrix) {\n    int sum = 0;\n    for (int i = 0; i < matrix.length; i++) {\n        for (int j = 0; j < matrix[i].length; j++) {\n            sum += matrix[i][j];\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "How would you implement a function in JavaScript to find the largest and smallest numbers in a given array?",
        "input": "const arr = [34, 15, 88, 2, 25, 60, 7];",
        "response": "function findMinAndMax(arr) {\n    let min = arr[0], max = arr[0];\n    for (const num of arr) {\n        if (num < min) {\n            min = num;\n        } else if (num > max) {\n            max = num;\n        }\n    }\n    return { min, max };\n}",
        "output": "function findMinAndMax(arr) {\n    let min = arr[0], max = arr[0];\n    for (const num of arr) {\n        if (num < min) {\n            min = num;\n        } else if (num > max) {\n            max = num;\n        }\n    }\n    return { min, max };\n}"
    },
    {
        "instruction": "Write a Python program to remove all instances of a specified character from a given string.",
        "input": "string = 'character'; character_to_remove = 'a';",
        "response": "def remove_char(string, char):\n    return string.replace(char, '')",
        "output": "def remove_char(string, char):\n    return string.replace(char, '')"
    },
    {
        "instruction": "Design a C++ function that accepts a string and calculates the length of the string without using any inbuilt functions.",
        "input": "std::string sample_str = 'Hello, World!';",
        "response": "#include <iostream>\n#include <string>\n\nint string_length(const std::string& str) {\n    int length = 0;\n    for (const char& c : str) {\n        length++;\n    }\n    return length;\n}",
        "output": "#include <iostream>\n#include <string>\n\nint string_length(const std::string& str) {\n    int length = 0;\n    for (const char& c : str) {\n        length++;\n    }\n    return length;\n}"
    },
    {
        "instruction": "Implement a function in JavaScript that takes an array of integers and returns the sum of odd numbers in the array.",
        "input": "",
        "response": "function sumOfOdds(numbers) {\n  return numbers.reduce((acc, num) => {\n    return num % 2 !== 0 ? acc + num : acc;\n  }, 0);\n}",
        "output": "function sumOfOdds(numbers) {\n  return numbers.reduce((acc, num) => {\n    return num % 2 !== 0 ? acc + num : acc;\n  }, 0);\n}"
    },
    {
        "instruction": "Fix the following Python code to properly calculate the factorial of a positive integer using recursion.",
        "input": "def factorial(n):\n  if n == 1:\n    return 1\n  else:\nreturn n * factorial(n-1)",
        "response": "def factorial(n):\n  if n == 1:\n    return 1\n  else:\n    return n * factorial(n-1)",
        "output": "def factorial(n):\n  if n == 1:\n    return 1\n  else:\n    return n * factorial(n-1)"
    },
    {
        "instruction": "Translate the following Java code to C#: 'String greeting = \"Hello, World!\"; System.out.println(greeting);'",
        "input": "",
        "response": "using System;\n\nnamespace TranslationExample\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      string greeting = \"Hello, World!\";\n      Console.WriteLine(greeting);\n    }\n  }\n}",
        "output": "using System;\n\nnamespace TranslationExample\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      string greeting = \"Hello, World!\";\n      Console.WriteLine(greeting);\n    }\n  }\n}"
    },
    {
        "instruction": "What output will the following C++ code produce?",
        "input": "#include <iostream>\n\nint main() {\n  int a = 10;\n  int b = 20;\n  int c = a + b;\n  a = b;\n  b = a - b;\n  std::cout << a << ' ' << b << ' ' << c << ' ' << std::endl;\n  return 0;\n}",
        "response": "The output will be `20 10 30`.",
        "output": "The output will be `20 10 30`."
    },
    {
        "instruction": "How can you write a Python function to calculate the Euclidean distance between two points given by their coordinates?",
        "input": "point1 = (3, 4)\npoint2 = (6, 8)",
        "response": "import math\n\ndef euclidean_distance(p1, p2):\n    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n\npoint1 = (3, 4)\npoint2 = (6, 8)\ndistance = euclidean_distance(point1, point2)\nprint(distance)",
        "output": "import math\n\ndef euclidean_distance(p1, p2):\n    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n\npoint1 = (3, 4)\npoint2 = (6, 8)\ndistance = euclidean_distance(point1, point2)\nprint(distance)"
    },
    {
        "instruction": "Create a Python program that reads a CSV file and prints the sum of the values in a given column.",
        "input": "example.csv:\n\nName, Age, Score\nAlice, 24, 85\nBob, 28, 92\n\ncolumn = 'Score'",
        "response": "import csv\n\ndef sum_csv_column(file_path, column):\n    sum_values = 0\n    with open(file_path, 'r') as csv_file:\n        reader = csv.DictReader(csv_file)\n        for row in reader:\n            sum_values += int(row[column])\n    return sum_values\n\nfile_path = 'example.csv'\ncolumn_name = 'Score'\ntotal_sum = sum_csv_column(file_path, column_name)\nprint('Total sum in column', column_name, ':', total_sum)",
        "output": "import csv\n\ndef sum_csv_column(file_path, column):\n    sum_values = 0\n    with open(file_path, 'r') as csv_file:\n        reader = csv.DictReader(csv_file)\n        for row in reader:\n            sum_values += int(row[column])\n    return sum_values\n\nfile_path = 'example.csv'\ncolumn_name = 'Score'\ntotal_sum = sum_csv_column(file_path, column_name)\nprint('Total sum in column', column_name, ':', total_sum)"
    },
    {
        "instruction": "Write a Java method to convert a binary string to its decimal value.",
        "input": "String binary = \"1011\";",
        "response": "public static int binaryStringToDecimal(String binary) {\n    return Integer.parseInt(binary, 2);\n}\n\nString binary = \"1011\";\nint decimal = binaryStringToDecimal(binary);\nSystem.out.println(decimal);",
        "output": "public static int binaryStringToDecimal(String binary) {\n    return Integer.parseInt(binary, 2);\n}\n\nString binary = \"1011\";\nint decimal = binaryStringToDecimal(binary);\nSystem.out.println(decimal);"
    },
    {
        "instruction": "Develop a C++ function that reverses a string in-place, without using any additional data structures.",
        "input": "std::string input = \"hello\";",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string_in_place(std::string& s) {\n    int len = s.length();\n    for (int i = 0; i < len / 2; ++i) {\n        std::swap(s[i], s[len - i - 1]);\n    }\n}\n\nint main() {\n    std::string input = \"hello\";\n    reverse_string_in_place(input);\n    std::cout << input << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string_in_place(std::string& s) {\n    int len = s.length();\n    for (int i = 0; i < len / 2; ++i) {\n        std::swap(s[i], s[len - i - 1]);\n    }\n}\n\nint main() {\n    std::string input = \"hello\";\n    reverse_string_in_place(input);\n    std::cout << input << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes two arrays as input and returns a new array containing their intersection.",
        "input": "const arr1 = [1, 2, 3, 4, 5];\nconst arr2 = [4, 5, 6, 7, 8];",
        "response": "function arrayIntersection(arr1, arr2) {\n  return arr1.filter(value => arr2.includes(value));\n}\n\nconst intersectingValues = arrayIntersection(arr1, arr2);\nconsole.log(intersectingValues); // Output: [4, 5]",
        "output": "function arrayIntersection(arr1, arr2) {\n  return arr1.filter(value => arr2.includes(value));\n}\n\nconst intersectingValues = arrayIntersection(arr1, arr2);\nconsole.log(intersectingValues); // Output: [4, 5]"
    },
    {
        "instruction": "What is the Python code to extract a specified element from the given nested list?",
        "input": "nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrow = 1\ncol = 2",
        "response": "def extract_element(nested_list, row, col):\n    return nested_list[row][col]\n\nvalue = extract_element(nested_list, row, col)\nprint(value)  # Output: 6",
        "output": "def extract_element(nested_list, row, col):\n    return nested_list[row][col]\n\nvalue = extract_element(nested_list, row, col)\nprint(value)  # Output: 6"
    },
    {
        "instruction": "Write a Java program that calculates the factorial of a given number using recursion.",
        "input": "int number = 5;",
        "response": "public class Factorial {\n\n    public static long factorial(int number) {\n        if (number <= 1) {\n            return 1;\n        } else {\n            return number * factorial(number - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int number = 5;\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n}",
        "output": "public class Factorial {\n\n    public static long factorial(int number) {\n        if (number <= 1) {\n            return 1;\n        } else {\n            return number * factorial(number - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int number = 5;\n        long result = factorial(number);\n        System.out.println(\"Factorial of \" + number + \" is: \" + result);\n    }\n}"
    },
    {
        "instruction": "Fix the following C++ code snippet that has a syntax error.",
        "input": "#include <iostream>\n\nint main() {\n    std::string name = \"John Doe\"\n    std::cout << \"Hello, \" << name << \"!\\n\";\n    return 0;\n}",
        "response": "#include <iostream>\n\nint main() {\n    std::string name = \"John Doe\";\n    std::cout << \"Hello, \" << name << \"!\\n\";\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    std::string name = \"John Doe\";\n    std::cout << \"Hello, \" << name << \"!\\n\";\n    return 0;\n}"
    },
    {
        "instruction": "Create a Python function to calculate the Fibonacci sequence up to the n-th element.",
        "input": "",
        "response": "def fibonacci_sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[:n]",
        "output": "def fibonacci_sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[:n]"
    },
    {
        "instruction": "What JavaScript code would you write to change the text content of an HTML element with the ID 'sample-text' to 'Hello, World!'?",
        "input": "",
        "response": "document.getElementById('sample-text').textContent = 'Hello, World!';",
        "output": "document.getElementById('sample-text').textContent = 'Hello, World!';"
    },
    {
        "instruction": "Write a Java method that receives a string and returns the number of words in the input string. Consider words as sequences of characters separated by spaces.",
        "input": "",
        "response": "public int countWords(String input) {\n    if (input == null || input.trim().isEmpty()) {\n        return 0;\n    }\n    String[] words = input.trim().split('\\s+');\n    return words.length;\n}",
        "output": "public int countWords(String input) {\n    if (input == null || input.trim().isEmpty()) {\n        return 0;\n    }\n    String[] words = input.trim().split('\\s+');\n    return words.length;\n}"
    },
    {
        "instruction": "Debug and fix the following C++ code snippet that is supposed to calculate the factorial of a given non-negative integer n.",
        "input": "int factorial(int n) {\n    int result = 1;\n    for (int i = 0; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n}",
        "response": "int factorial(int n) {\n    int result = 1;\n    for (int i = 1; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n}",
        "output": "int factorial(int n) {\n    int result = 1;\n    for (int i = 1; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n}"
    },
    {
        "instruction": "Create a C++ function that takes a vector of integers and returns their sum.",
        "input": "std::vector<int> numbers = {1, 2, 3, 4, 5};",
        "response": "#include <vector>\n\nint sum_numbers(const std::vector<int>& numbers) {\n  int sum = 0;\n  for (int num : numbers) {\n    sum += num;\n  }\n  return sum;\n}\n\n// Usage\n// std::vector<int> numbers = {1, 2, 3, 4, 5};\n// int result = sum_numbers(numbers);",
        "output": "#include <vector>\n\nint sum_numbers(const std::vector<int>& numbers) {\n  int sum = 0;\n  for (int num : numbers) {\n    sum += num;\n  }\n  return sum;\n}\n\n// Usage\n// std::vector<int> numbers = {1, 2, 3, 4, 5};\n// int result = sum_numbers(numbers);"
    },
    {
        "instruction": "How can I write a JavaScript function that checks if a string contains a specific substring?",
        "input": "let str = 'Hello, World!';\nlet substring = 'World';",
        "response": "function containsSubstring(str, substring) {\n  return str.indexOf(substring) !== -1;\n}\n\n// Usage\n// let str = 'Hello, World!';\n// let substring = 'World';\n// let result = containsSubstring(str, substring);",
        "output": "function containsSubstring(str, substring) {\n  return str.indexOf(substring) !== -1;\n}\n\n// Usage\n// let str = 'Hello, World!';\n// let substring = 'World';\n// let result = containsSubstring(str, substring);"
    },
    {
        "instruction": "Implement a shell script to find all .txt files in the current directory and subdirectories and count the total number of lines in all the files.",
        "input": "",
        "response": "#!/bin/bash\n\nfind . -name '*.txt' -exec wc -l {} + | awk '{sum+=$1} END {print sum}'",
        "output": "#!/bin/bash\n\nfind . -name '*.txt' -exec wc -l {} + | awk '{sum+=$1} END {print sum}'"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns their mean.",
        "input": "[5, 10, 15, 20]",
        "response": "function mean(numbers) {\n    const sum = numbers.reduce((a, b) => a + b, 0);\n    const average = sum / numbers.length;\n    return average;\n}",
        "output": "function mean(numbers) {\n    const sum = numbers.reduce((a, b) => a + b, 0);\n    const average = sum / numbers.length;\n    return average;\n}"
    },
    {
        "instruction": "How would you write a Java method that takes an integer n as input and returns the nth Fibonacci number?",
        "input": "6",
        "response": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}",
        "output": "public int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}"
    },
    {
        "instruction": "Given a simple Python script, identify any syntax errors and suggest corrections.",
        "input": "def greet(name):\n    print('Hello, ' + name)\n\ngreet('Alice'\n\nprint('Goodbye')",
        "response": "def greet(name):\n    print('Hello, ' + name)\n\ngreet('Alice')  # Missing closing parenthesis\n\nprint('Goodbye')  # Extra newline removed",
        "output": "def greet(name):\n    print('Hello, ' + name)\n\ngreet('Alice')  # Missing closing parenthesis\n\nprint('Goodbye')  # Extra newline removed"
    },
    {
        "instruction": "Translate the following Python code to C++ that reverses a string in place.",
        "input": "def reverse_string(s):\n    i, j = 0, len(s) - 1\n    while i < j:\n        s[i], s[j] = s[j], s[i]\n        i += 1\n        j -= 1\n\ns = 'hello'\nreverse_string(s)\nprint(s)",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string(std::string& s) {\n    std::reverse(s.begin(), s.end());\n}\n\nint main() {\n    std::string s = \"hello\";\n    reverse_string(s);\n    std::cout << s << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string(std::string& s) {\n    std::reverse(s.begin(), s.end());\n}\n\nint main() {\n    std::string s = \"hello\";\n    reverse_string(s);\n    std::cout << s << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Develop a Java method for converting a list of integers into a comma-separated string that includes the sum of all integers.",
        "input": "import java.util.List;\n\nList<Integer> numbers = List.of(3, 4, 7, 2, 9);",
        "response": "public String convertListToStringAndSum(List<Integer> numbers) {\n    int sum = 0;\n    StringBuilder result = new StringBuilder();\n\n    for (int number : numbers) {\n        sum += number;\n        result.append(number);\n        result.append(',');\n    }\n    result.deleteCharAt(result.length() - 1);\n    result.append(' ');\n    result.append(sum);\n\n    return result.toString();\n}\n\n// Usage:\n// String result = convertListToStringAndSum(numbers);\n// System.out.println(result);",
        "output": "public String convertListToStringAndSum(List<Integer> numbers) {\n    int sum = 0;\n    StringBuilder result = new StringBuilder();\n\n    for (int number : numbers) {\n        sum += number;\n        result.append(number);\n        result.append(',');\n    }\n    result.deleteCharAt(result.length() - 1);\n    result.append(' ');\n    result.append(sum);\n\n    return result.toString();\n}\n\n// Usage:\n// String result = convertListToStringAndSum(numbers);\n// System.out.println(result);"
    },
    {
        "instruction": "How would I modify a given Python code to replace all even numbers in a list with '-1'?",
        "input": "input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "new_list = [-1 if num % 2 == 0 else num for num in input_list]\n\n# In-place modification:\n# for index, num in enumerate(input_list):\n#     if num % 2 == 0:\n#         input_list[index] = -1",
        "output": "new_list = [-1 if num % 2 == 0 else num for num in input_list]\n\n# In-place modification:\n# for index, num in enumerate(input_list):\n#     if num % 2 == 0:\n#         input_list[index] = -1"
    },
    {
        "instruction": "Detect any syntax errors in the provided C++ code and fix them. Share the corrected code.",
        "input": "#include <iostream>\n\nint main() {\n    int x = 5;\n    int y = 6;\n    int z = x + y;\n    std::cout << \"The sum of x and y is: \" << z;\n    return 0;\n}",
        "response": "There are no syntax errors in the provided code. The code is correct and will print the sum of x and y.",
        "output": "There are no syntax errors in the provided code. The code is correct and will print the sum of x and y."
    },
    {
        "instruction": "Create an example of how to join two dictionaries by using the **update()** method in Python.",
        "input": "dictionary1 = {'a': 1, 'b': 2}\ndictionary2 = {'b': 3, 'c': 4}",
        "response": "merged_dictionary = dictionary1.copy()\nmerged_dictionary.update(dictionary2)\n\n# Now merged_dictionary contains {'a': 1, 'b': 3, 'c': 4}",
        "output": "merged_dictionary = dictionary1.copy()\nmerged_dictionary.update(dictionary2)\n\n# Now merged_dictionary contains {'a': 1, 'b': 3, 'c': 4}"
    },
    {
        "instruction": "How would you write a Java method that finds the largest even number in an array of integers?",
        "input": "int[] numbers = {20, 33, 15, 42, 2, 3};",
        "response": "public int findLargestEven(int[] numbers) {\n  int maxEven = Integer.MIN_VALUE;\n  for (int num : numbers) {\n    if (num % 2 == 0 && num > maxEven) {\n      maxEven = num;\n    }\n  }\n  return maxEven;\n}\n\nint[] numbers = {20, 33, 15, 42, 2, 3};\nint largestEven = findLargestEven(numbers);\nSystem.out.println(largestEven);",
        "output": "public int findLargestEven(int[] numbers) {\n  int maxEven = Integer.MIN_VALUE;\n  for (int num : numbers) {\n    if (num % 2 == 0 && num > maxEven) {\n      maxEven = num;\n    }\n  }\n  return maxEven;\n}\n\nint[] numbers = {20, 33, 15, 42, 2, 3};\nint largestEven = findLargestEven(numbers);\nSystem.out.println(largestEven);"
    },
    {
        "instruction": "Write a Python script to read contents of a text file line by line and append each line to a list.",
        "input": "file.txt: 'This is line 1\nThis is line 2\nThis is line 3'",
        "response": "with open('file.txt', 'r') as file:\n    lines = [line.rstrip() for line in file]\n\nprint(lines)",
        "output": "with open('file.txt', 'r') as file:\n    lines = [line.rstrip() for line in file]\n\nprint(lines)"
    },
    {
        "instruction": "Create a C# function that takes a string input and returns a reversed version of the string.",
        "input": "'Hello World'",
        "response": "public static string ReverseString(string input) {\n  char[] charArray = input.ToCharArray();\n  Array.Reverse(charArray);\n  return new string(charArray);\n}\n\nstring reversedString = ReverseString('Hello World');\nConsole.WriteLine(reversedString);",
        "output": "public static string ReverseString(string input) {\n  char[] charArray = input.ToCharArray();\n  Array.Reverse(charArray);\n  return new string(charArray);\n}\n\nstring reversedString = ReverseString('Hello World');\nConsole.WriteLine(reversedString);"
    },
    {
        "instruction": "Rewrite the JavaScript code block below to use ES6 arrow functions instead of traditional function expressions.",
        "input": "function add(a, b) {\n  return a + b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction subtract(a, b) {\n  return a - b;\n}\n\nfunction divide(a, b) {\n  return a / b;\n}",
        "response": "const add = (a, b) => a + b;\n\nconst multiply = (a, b) => a * b;\n\nconst subtract = (a, b) => a - b;\n\nconst divide = (a, b) => a / b;",
        "output": "const add = (a, b) => a + b;\n\nconst multiply = (a, b) => a * b;\n\nconst subtract = (a, b) => a - b;\n\nconst divide = (a, b) => a / b;"
    },
    {
        "instruction": "Create a Java method that takes a string as input and returns the reversed text.",
        "input": "",
        "response": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder(input);\n    return reversed.reverse().toString();\n}",
        "output": "public String reverseString(String input) {\n    StringBuilder reversed = new StringBuilder(input);\n    return reversed.reverse().toString();\n}"
    },
    {
        "instruction": "Write Python code to perform the basic CRUD (Create, Read, Update, Delete) operations with a SQLite database using the sqlite3 module.",
        "input": "",
        "response": "import sqlite3\n\n# Creating the table and the connection\nconnection = sqlite3.connect('test.db')\ncursor = connection.cursor()\ncursor.execute('''CREATE TABLE example (id INTEGER PRIMARY KEY, name TEXT)''')\n\n# Create (Insert)\ncursor.execute(\"INSERT INTO example (name) VALUES ('John Doe')\")\nconnection.commit()\n\n# Read (Select)\ncursor.execute('SELECT * FROM example')\nprint(cursor.fetchall())\n\n# Update\nupdate_id = 1\nnew_name = 'Jane Doe'\ncursor.execute(f\"UPDATE example SET name = '{new_name}' WHERE id = {update_id}\")\nconnection.commit()\n\n# Delete\ndelete_id = 1\ncursor.execute(f'DELETE FROM example WHERE id = {delete_id}')\nconnection.commit()\n\n# Close connection\nconnection.close()",
        "output": "import sqlite3\n\n# Creating the table and the connection\nconnection = sqlite3.connect('test.db')\ncursor = connection.cursor()\ncursor.execute('''CREATE TABLE example (id INTEGER PRIMARY KEY, name TEXT)''')\n\n# Create (Insert)\ncursor.execute(\"INSERT INTO example (name) VALUES ('John Doe')\")\nconnection.commit()\n\n# Read (Select)\ncursor.execute('SELECT * FROM example')\nprint(cursor.fetchall())\n\n# Update\nupdate_id = 1\nnew_name = 'Jane Doe'\ncursor.execute(f\"UPDATE example SET name = '{new_name}' WHERE id = {update_id}\")\nconnection.commit()\n\n# Delete\ndelete_id = 1\ncursor.execute(f'DELETE FROM example WHERE id = {delete_id}')\nconnection.commit()\n\n# Close connection\nconnection.close()"
    },
    {
        "instruction": "You are given a collection of shell scripts with a bug causing them to crash. All scripts have the same line triggering the issue: 'sleep $random_time'. Replace this line with 'sleep ${random_time}s' in all scripts using a bash one-liner.",
        "input": "",
        "response": "find . -name '*.sh' -exec sed -i 's/sleep \\$random_time/sleep \\${random_time}s/g' {} +",
        "output": "find . -name '*.sh' -exec sed -i 's/sleep \\$random_time/sleep \\${random_time}s/g' {} +"
    },
    {
        "instruction": "Implement a Java method that takes an array of integers as input and returns the sum of all elements.",
        "input": "int[] numbers = {1, 2, 3, 4, 5};",
        "response": "public int sum(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return sum;\n}\n\nint[] numbers = {1, 2, 3, 4, 5};\nSystem.out.println(sum(numbers));",
        "output": "public int sum(int[] numbers) {\n    int sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return sum;\n}\n\nint[] numbers = {1, 2, 3, 4, 5};\nSystem.out.println(sum(numbers));"
    },
    {
        "instruction": "Can you help me fix the following Python code that should reverse a string but throws an error?",
        "input": "def reverse_string(string):\n    reversed_string = ''\n    for i in string:\n        reversed_string = i + reversed_string\n    return reversed_string\n\nprint(reverse_string('Hello, World!'))",
        "response": "The given Python code is actually correct and doesn't throw any errors. It reverses a string by iterating over its characters and adding each character to the beginning of the `reversed_string`. If you run the code, it will correctly output '!dlroW ,olleH'.",
        "output": "The given Python code is actually correct and doesn't throw any errors. It reverses a string by iterating over its characters and adding each character to the beginning of the `reversed_string`. If you run the code, it will correctly output '!dlroW ,olleH'."
    },
    {
        "instruction": "Write a JavaScript function that takes a string and returns an object with the count of each character in the string.",
        "input": "let inputString = 'Hello, World!';",
        "response": "function countCharacters(string) {\n    let characterCount = {};\n\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n        characterCount[char] = (characterCount[char] || 0) + 1;\n    }\n\n    return characterCount;\n}\n\nlet inputString = 'Hello, World!';\nconsole.log(countCharacters(inputString));",
        "output": "function countCharacters(string) {\n    let characterCount = {};\n\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n        characterCount[char] = (characterCount[char] || 0) + 1;\n    }\n\n    return characterCount;\n}\n\nlet inputString = 'Hello, World!';\nconsole.log(countCharacters(inputString));"
    },
    {
        "instruction": "Translate the following C++ code, which calculates the factorial of a number, into the equivalent Python code.",
        "input": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> number;\n    std::cout << \"Factorial of \" << number << \" = \" << factorial(number) << std::endl;\n    return 0;\n}",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\nnumber = int(input('Enter a positive integer: '))\nprint('Factorial of', number, '=', factorial(number))",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\nnumber = int(input('Enter a positive integer: '))\nprint('Factorial of', number, '=', factorial(number))"
    },
    {
        "instruction": "Create a Python function to read a CSV file and return the data as a list of dictionaries, where each row is represented as a dictionary mapping column headers to values.",
        "input": "CSV file content:\nName,Age,Occupation\nAlice,30,Engineer\nBob,25,Designer\nCharlie,22,Student",
        "response": "import csv\n\n\ndef read_csv_data(csv_content):\n    csv_data = csv_content.split('\\n')\n    reader = csv.DictReader(csv_data)\n    result = [row for row in reader]\n    return result\n\n\ncsv_content = \"Name,Age,Occupation\\nAlice,30,Engineer\\nBob,25,Designer\\nCharlie,22,Student\"\ndata = read_csv_data(csv_content)\nprint(data)",
        "output": "import csv\n\n\ndef read_csv_data(csv_content):\n    csv_data = csv_content.split('\\n')\n    reader = csv.DictReader(csv_data)\n    result = [row for row in reader]\n    return result\n\n\ncsv_content = \"Name,Age,Occupation\\nAlice,30,Engineer\\nBob,25,Designer\\nCharlie,22,Student\"\ndata = read_csv_data(csv_content)\nprint(data)"
    },
    {
        "instruction": "How would you refactor the following JavaScript code to use the arrow function syntax and shorten it?",
        "input": "function multiply(a, b) {\n    return a * b;\n}",
        "response": "const multiply = (a, b) => a * b;",
        "output": "const multiply = (a, b) => a * b;"
    },
    {
        "instruction": "Translate the following Java code snippet to equivalent C# code:",
        "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "response": "using System;\n\npublic class HelloWorld {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}",
        "output": "using System;\n\npublic class HelloWorld {\n    public static void Main(string[] args) {\n        Console.WriteLine(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Fix the given SQL query that should return the average age of all employees in a company:",
        "input": "SELECT AVG('age') FROM employees;",
        "response": "SELECT AVG(age) FROM employees;",
        "output": "SELECT AVG(age) FROM employees;"
    },
    {
        "instruction": "Write a Python function to determine the area of a rectangle given its length and width.",
        "input": "length: 10, width: 5",
        "response": "def rectangle_area(length, width):\n    return length * width\n\narea = rectangle_area(10, 5)\nprint(area)",
        "output": "def rectangle_area(length, width):\n    return length * width\n\narea = rectangle_area(10, 5)\nprint(area)"
    },
    {
        "instruction": "Translate the following Python code to C++: def greet(name): return f'Hello, {name}!'",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n\nstd::string greet(const std::string& name) {\n    return \"Hello, \" + name + \"!\";\n}\n\nint main() {\n    std::string name = \"John\";\n    std::cout << greet(name) << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nstd::string greet(const std::string& name) {\n    return \"Hello, \" + name + \"!\";\n}\n\nint main() {\n    std::string name = \"John\";\n    std::cout << greet(name) << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "Debug the following JavaScript code and return the fixed code, which should create an object representing a car with its make, model, and year properties.",
        "input": "const car = {\n    'make': 'Toyota'\n    'model': 'Camry',\n    'year': 2022\n};",
        "response": "const car = {\n    'make': 'Toyota',\n    'model': 'Camry',\n    'year': 2022\n};",
        "output": "const car = {\n    'make': 'Toyota',\n    'model': 'Camry',\n    'year': 2022\n};"
    },
    {
        "instruction": "Explain the working of the following Java code snippet and provide comments for the code: public static int fib(int n) { if (n <= 1) { return n; } else { return fib(n - 1) + fib(n - 2); } }",
        "input": "",
        "response": "public static int fib(int n) {\n    // Base case: if n is 0 or 1, return n itself as the result\n    if (n <= 1) {\n        return n;\n    } else {\n        // Recursive case: return the sum of the two previous Fibonacci numbers\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\n// The above code defines a recursive function to calculate the nth Fibonacci number. It checks for the base case when n is 0 or 1, and directly returns n in that case. For other values of n, it calculates the Fibonacci number by recursively calling the function with n-1 and n-2 as arguments and adding their results.",
        "output": "public static int fib(int n) {\n    // Base case: if n is 0 or 1, return n itself as the result\n    if (n <= 1) {\n        return n;\n    } else {\n        // Recursive case: return the sum of the two previous Fibonacci numbers\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\n// The above code defines a recursive function to calculate the nth Fibonacci number. It checks for the base case when n is 0 or 1, and directly returns n in that case. For other values of n, it calculates the Fibonacci number by recursively calling the function with n-1 and n-2 as arguments and adding their results."
    },
    {
        "instruction": "Create JavaScript code that takes an array of numbers as input and returns a new array with the squares of the original input elements.",
        "input": "[2, 4, 6, 8]",
        "response": "function squareArray(arr) {\n  return arr.map(function(x) {\n    return x * x;\n  });\n}\n\nvar inputArray = [2, 4, 6, 8];\nvar squaredArray = squareArray(inputArray);\nconsole.log(squaredArray);",
        "output": "function squareArray(arr) {\n  return arr.map(function(x) {\n    return x * x;\n  });\n}\n\nvar inputArray = [2, 4, 6, 8];\nvar squaredArray = squareArray(inputArray);\nconsole.log(squaredArray);"
    },
    {
        "instruction": "Write Java code to implement a method that accepts a string and returns the number of vowels (a, e, i, o, u) present in the string.",
        "input": "\"This is a test string\"",
        "response": "public class VowelCounter {\n\n  public static int countVowels(String str) {\n    int count = 0;\n    String vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < str.length(); i++) {\n      if (vowels.indexOf(str.charAt(i)) != -1) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    String input = \"This is a test string\";\n    int vowelCount = countVowels(input);\n    System.out.println(\"Vowel Count: \" + vowelCount);\n  }\n}",
        "output": "public class VowelCounter {\n\n  public static int countVowels(String str) {\n    int count = 0;\n    String vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < str.length(); i++) {\n      if (vowels.indexOf(str.charAt(i)) != -1) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  public static void main(String[] args) {\n    String input = \"This is a test string\";\n    int vowelCount = countVowels(input);\n    System.out.println(\"Vowel Count: \" + vowelCount);\n  }\n}"
    },
    {
        "instruction": "How would you implement a recursive Python function that computes the Nth number in the Fibonacci sequence?",
        "input": "N = 5",
        "response": "def fibonacci(n):\n    if n <= 0:\n        return \"Invalid input. N must be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        # Recursive step\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nN = 5\nresult = fibonacci(N)\nprint(\"The {}th number in the Fibonacci sequence is: {}\".format(N, result))",
        "output": "def fibonacci(n):\n    if n <= 0:\n        return \"Invalid input. N must be a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        # Recursive step\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\nN = 5\nresult = fibonacci(N)\nprint(\"The {}th number in the Fibonacci sequence is: {}\".format(N, result))"
    },
    {
        "instruction": "Write a shell script to extract the file extension from a file name and store it in a variable.",
        "input": "filename=\"example.txt\"",
        "response": "#!/bin/bash\n\nfilename=\"example.txt\"\n\nfile_extension=\"${filename##*.}\"\n\necho \"The file extension is: $file_extension\"",
        "output": "#!/bin/bash\n\nfilename=\"example.txt\"\n\nfile_extension=\"${filename##*.}\"\n\necho \"The file extension is: $file_extension\""
    },
    {
        "instruction": "Write a Python function that takes a list of numbers as input and returns the sum of squares of the numbers.",
        "input": "[1, 2, 3, 4, 5]",
        "response": "def sum_of_squares(numbers):\n    return sum(x**2 for x in numbers)\n\ninput_numbers = [1, 2, 3, 4, 5]\nresult = sum_of_squares(input_numbers)\nprint(result)",
        "output": "def sum_of_squares(numbers):\n    return sum(x**2 for x in numbers)\n\ninput_numbers = [1, 2, 3, 4, 5]\nresult = sum_of_squares(input_numbers)\nprint(result)"
    },
    {
        "instruction": "Translate the following C++ code to equivalent Java code: 'cout << \"Hello, World!\" << endl;'.",
        "input": "cout << \"Hello, World!\" << endl;",
        "response": "System.out.println(\"Hello, World!\");",
        "output": "System.out.println(\"Hello, World!\");"
    },
    {
        "instruction": "How would you go about finding the factorial of a given number using a recursive function in JavaScript?",
        "input": "5",
        "response": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconst number = 5;\nconsole.log(factorial(number));",
        "output": "function factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconst number = 5;\nconsole.log(factorial(number));"
    },
    {
        "instruction": "Write a shell script to count the number of lines in a text file.",
        "input": "file.txt",
        "response": "#!/bin/sh\n\ncount_lines() {\n  file=$1\n  wc -l < \"$file\"\n}\n\nfile_name=\"file.txt\"\nline_count=$(count_lines \"$file_name\")\necho \"Number of lines in $file_name: $line_count\"",
        "output": "#!/bin/sh\n\ncount_lines() {\n  file=$1\n  wc -l < \"$file\"\n}\n\nfile_name=\"file.txt\"\nline_count=$(count_lines \"$file_name\")\necho \"Number of lines in $file_name: $line_count\""
    },
    {
        "instruction": "Create a function in Java that finds the factorial of a given non-negative integer.",
        "input": "",
        "response": "public int factorial(int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"Invalid input: Non-negative integer expected.\");\n    }\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}",
        "output": "public int factorial(int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"Invalid input: Non-negative integer expected.\");\n    }\n    if (n == 0) {\n        return 1;\n    }\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}"
    },
    {
        "instruction": "How can I retrieve the length of an array in JavaScript?",
        "input": "",
        "response": "To retrieve the length of an array in JavaScript, use the `length` property of the array. For example:\n\nlet array = [1, 2, 3, 4];\nlet arrayLength = array.length;\nconsole.log(arrayLength); // Output: 4",
        "output": "To retrieve the length of an array in JavaScript, use the `length` property of the array. For example:\n\nlet array = [1, 2, 3, 4];\nlet arrayLength = array.length;\nconsole.log(arrayLength); // Output: 4"
    },
    {
        "instruction": "Write a C++ program that reads a CSV file and calculates the average of the numbers in the second column.",
        "input": "Assume the CSV file has the following format:\n\n28, 56.3, green\n42, 78.12, blue\n33, 45.6, red\n",
        "response": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"input.csv\");\n    std::string line;\n    double sum = 0;\n    int count = 0;\n\n    while (std::getline(file, line)) {\n        std::istringstream ss(line);\n        std::string token;\n        int col = 0;\n\n        while (std::getline(ss, token, ',')) {\n            if (col == 1) {\n                double value = std::stod(token);\n                sum += value;\n                count++;\n            }\n            col++;\n        }\n    }\n\n    file.close();\n    double average = sum / count;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n\nint main() {\n    std::ifstream file(\"input.csv\");\n    std::string line;\n    double sum = 0;\n    int count = 0;\n\n    while (std::getline(file, line)) {\n        std::istringstream ss(line);\n        std::string token;\n        int col = 0;\n\n        while (std::getline(ss, token, ',')) {\n            if (col == 1) {\n                double value = std::stod(token);\n                sum += value;\n                count++;\n            }\n            col++;\n        }\n    }\n\n    file.close();\n    double average = sum / count;\n    std::cout << \"Average: \" << average << std::endl;\n\n    return 0;\n}"
    },
    {
        "instruction": "Provide a Python code snippet that checks whether a given string is a palindrome by ignoring capitalization and punctuation.",
        "input": "",
        "response": "def is_palindrome(s):\n    import re\n    s = s.lower()\n    s = re.sub(r'[^a-z0-9]+', '', s)\n    return s == s[::-1]",
        "output": "def is_palindrome(s):\n    import re\n    s = s.lower()\n    s = re.sub(r'[^a-z0-9]+', '', s)\n    return s == s[::-1]"
    },
    {
        "instruction": "Create a C++ code snippet that takes an integer as input and outputs the square of the input number.",
        "input": "",
        "response": "#include <iostream>\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    int square = num * num;\n    std::cout << \"Square of the number: \" << square << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n\nint main() {\n    int num;\n    std::cout << \"Enter a number: \";\n    std::cin >> num;\n    int square = num * num;\n    std::cout << \"Square of the number: \" << square << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "How would you implement a JavaScript function that reverses a given string and returns the reversed version?",
        "input": "",
        "response": "function reverseString(str) {\n    // Split the string into an array of characters\n    let charArray = str.split('');\n\n    // Reverse the order of the array elements\n    charArray.reverse();\n\n    // Join the reversed array elements back into a string\n    let reversedStr = charArray.join('');\n    return reversedStr;\n}",
        "output": "function reverseString(str) {\n    // Split the string into an array of characters\n    let charArray = str.split('');\n\n    // Reverse the order of the array elements\n    charArray.reverse();\n\n    // Join the reversed array elements back into a string\n    let reversedStr = charArray.join('');\n    return reversedStr;\n}"
    },
    {
        "instruction": "Fix the syntax errors in the Python code provided and rewrite it correctly.",
        "input": "import randomn\n\nrandon.choice(range 100)\n\npint(\"Random number:\", num)",
        "response": "import random\n\nnum = random.choice(range(100))\n\nprint(\"Random number:\", num)",
        "output": "import random\n\nnum = random.choice(range(100))\n\nprint(\"Random number:\", num)"
    },
    {
        "instruction": "Translate the following Java code into an equivalent Python code that does the same thing.",
        "input": "public class Main {\n    public static void main(String[] args) {\n        int sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of numbers from 1 to 10: \" + sum);\n    }\n}",
        "response": "sum = 0\nfor i in range(1, 11):\n    sum += i\n\nprint(\"Sum of numbers from 1 to 10:\", sum)",
        "output": "sum = 0\nfor i in range(1, 11):\n    sum += i\n\nprint(\"Sum of numbers from 1 to 10:\", sum)"
    },
    {
        "instruction": "Create a JavaScript function that takes a string and reverses its word order while maintaining spaces.",
        "input": "The quick brown fox jumps over the lazy dog.",
        "response": "function reverseWords(str) {\n    return str.split(' ').reverse().join(' ');\n}\n\nlet input = 'The quick brown fox jumps over the lazy dog.';\nconsole.log(reverseWords(input));",
        "output": "function reverseWords(str) {\n    return str.split(' ').reverse().join(' ');\n}\n\nlet input = 'The quick brown fox jumps over the lazy dog.';\nconsole.log(reverseWords(input));"
    },
    {
        "instruction": "Write a Python function that accepts a list of dictionaries and sorts them based on a given key.",
        "input": "sort_dicts([{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 35}], 'age')",
        "response": "def sort_dicts(dicts, key):\n    return sorted(dicts, key=lambda x: x[key])\n\ninput_dicts = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 35}]\nsorted_dicts = sort_dicts(input_dicts, 'age')\nprint(sorted_dicts)",
        "output": "def sort_dicts(dicts, key):\n    return sorted(dicts, key=lambda x: x[key])\n\ninput_dicts = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}, {'name': 'Charlie', 'age': 35}]\nsorted_dicts = sort_dicts(input_dicts, 'age')\nprint(sorted_dicts)"
    },
    {
        "instruction": "Given a sample Java code snippet, detect the syntax error and fix it.",
        "input": "public class HelloWorld {\n    public static void main(String[] args {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "response": "The syntax error is in the method signature of the main() method. The correct syntax should include parentheses after the 'String[] args' parameter. Here's the corrected code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
        "output": "The syntax error is in the method signature of the main() method. The correct syntax should include parentheses after the 'String[] args' parameter. Here's the corrected code:\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}"
    },
    {
        "instruction": "Translate the following C++ code to equivalent Python code.",
        "input": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    for (int i = 0; i < numbers.size(); i++) {\n        std::cout << numbers[i] * 2 << std::endl;\n    }\n    return 0;\n}",
        "response": "The equivalent Python code is:\n\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num * 2)",
        "output": "The equivalent Python code is:\n\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num * 2)"
    },
    {
        "instruction": "Translate the following Python code to Java code: def add(a, b): return a + b",
        "input": "def add(a, b):\n  return a + b",
        "response": "public int add(int a, int b) {\n    return a + b;\n}",
        "output": "public int add(int a, int b) {\n    return a + b;\n}"
    },
    {
        "instruction": "Write a C# function that accepts a string as input and returns the string reversed.",
        "input": "This is a test.",
        "response": "using System;\n\npublic class ReverseString {\n    public static string Reverse(string input) {\n        char[] inputArray = input.ToCharArray();\n        Array.Reverse(inputArray);\n        return new string(inputArray);\n    }\n}\n\nstring reversed = ReverseString.Reverse(\"This is a test.\");\nConsole.WriteLine(reversed);",
        "output": "using System;\n\npublic class ReverseString {\n    public static string Reverse(string input) {\n        char[] inputArray = input.ToCharArray();\n        Array.Reverse(inputArray);\n        return new string(inputArray);\n    }\n}\n\nstring reversed = ReverseString.Reverse(\"This is a test.\");\nConsole.WriteLine(reversed);"
    },
    {
        "instruction": "Explain the following JavaScript code: setInterval(function() {console.log('Hello, World!');}, 1000);",
        "input": "setInterval(function() {console.log('Hello, World!');}, 1000);",
        "response": "The given JavaScript code uses the setInterval() function to execute a function (in this case an anonymous function) repeatedly at specified intervals (in milliseconds). In the provided code snippet, the anonymous function contains a console.log statement that will print 'Hello, World!' to the console. The setInterval() function is called with a time interval of 1000 milliseconds (1 second), which means the anonymous function will be executed every second, and 'Hello, World!' will be printed to the console every second.",
        "output": "The given JavaScript code uses the setInterval() function to execute a function (in this case an anonymous function) repeatedly at specified intervals (in milliseconds). In the provided code snippet, the anonymous function contains a console.log statement that will print 'Hello, World!' to the console. The setInterval() function is called with a time interval of 1000 milliseconds (1 second), which means the anonymous function will be executed every second, and 'Hello, World!' will be printed to the console every second."
    },
    {
        "instruction": "Create a Python script that retrieves a list of JSON objects from a REST API, with an example of parsing one field from the JSON objects.",
        "input": "https://jsonplaceholder.typicode.com/todos",
        "response": "import requests\nimport json\n\nurl = 'https://jsonplaceholder.typicode.com/todos'\nresponse = requests.get(url)\ndata = response.json()\n\nfor item in data:\n    task_title = item['title']\n    print(task_title)",
        "output": "import requests\nimport json\n\nurl = 'https://jsonplaceholder.typicode.com/todos'\nresponse = requests.get(url)\ndata = response.json()\n\nfor item in data:\n    task_title = item['title']\n    print(task_title)"
    },
    {
        "instruction": "Write a Java method that takes in a string and returns the count of vowels in that string.",
        "input": "Example string: \"programming is fun\"",
        "response": "public int countVowels(String input) {\n    int count = 0;\n    String vowels = \"AEIOUaeiou\";\n\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            count++;\n        }\n    }\n\n    return count;\n}",
        "output": "public int countVowels(String input) {\n    int count = 0;\n    String vowels = \"AEIOUaeiou\";\n\n    for (int i = 0; i < input.length(); i++) {\n        if (vowels.indexOf(input.charAt(i)) != -1) {\n            count++;\n        }\n    }\n\n    return count;\n}"
    },
    {
        "instruction": "Could you create a Python function that calculates the nth Fibonacci number using recursion?",
        "input": "Example: nth Fibonacci number is 6",
        "response": "def fibonacci(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)",
        "output": "def fibonacci(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)"
    },
    {
        "instruction": "Write a C++ function that accepts a vector of integers and returns a vector containing the squares of the input integers.",
        "input": "",
        "response": "#include <vector>\n\nstd::vector<int> square_elements(const std::vector<int>& input) {\n    std::vector<int> squares;\n    squares.reserve(input.size());\n\n    for (const int& elem : input) {\n        squares.push_back(elem * elem);\n    }\n\n    return squares;\n}",
        "output": "#include <vector>\n\nstd::vector<int> square_elements(const std::vector<int>& input) {\n    std::vector<int> squares;\n    squares.reserve(input.size());\n\n    for (const int& elem : input) {\n        squares.push_back(elem * elem);\n    }\n\n    return squares;\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of numbers and returns a new array with only the odd numbers.",
        "input": "",
        "response": "function filterOddNumbers(numbers) {\n    return numbers.filter(function(number) {\n        return number % 2 !== 0;\n    });\n}",
        "output": "function filterOddNumbers(numbers) {\n    return numbers.filter(function(number) {\n        return number % 2 !== 0;\n    });\n}"
    },
    {
        "instruction": "Create a C++ function that calculates the distance between two 3D points.",
        "input": "Point A: (2, 4, 6)\nPoint B: (4, 8, 10)",
        "response": "#include <cmath>\n\ndouble distance3D(double x1, double y1, double z1, double x2, double y2, double z2) {\n    double dx = x2 - x1;\n    double dy = y2 - y1;\n    double dz = z2 - z1;\n    return sqrt(dx * dx + dy * dy + dz * dz);\n}",
        "output": "#include <cmath>\n\ndouble distance3D(double x1, double y1, double z1, double x2, double y2, double z2) {\n    double dx = x2 - x1;\n    double dy = y2 - y1;\n    double dz = z2 - z1;\n    return sqrt(dx * dx + dy * dy + dz * dz);\n}"
    },
    {
        "instruction": "Can you write a python code for the Sieve of Eratosthenes algorithm to find all prime numbers up to a given limit?",
        "input": "limit = 30",
        "response": "def sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0], primes[1] = False, False\n    n = 2\n    while n * n <= limit:\n        if primes[n]:\n            for i in range(n * n, limit + 1, n):\n                primes[i] = False\n        n += 1\n    return [x for x in range(2, limit + 1) if primes[x]]",
        "output": "def sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0], primes[1] = False, False\n    n = 2\n    while n * n <= limit:\n        if primes[n]:\n            for i in range(n * n, limit + 1, n):\n                primes[i] = False\n        n += 1\n    return [x for x in range(2, limit + 1) if primes[x]]"
    },
    {
        "instruction": "Create an example Java class demonstrating the Singleton design pattern.",
        "input": "Singleton class: MySingleton",
        "response": "public class MySingleton {\n\n    private static MySingleton instance;\n\n    private MySingleton() {\n    }\n\n    public static MySingleton getInstance() {\n        if (instance == null) {\n            instance = new MySingleton();\n        }\n        return instance;\n    }\n\n    public void doSomething() {\n        System.out.println(\"Doing something...\");\n    }\n}",
        "output": "public class MySingleton {\n\n    private static MySingleton instance;\n\n    private MySingleton() {\n    }\n\n    public static MySingleton getInstance() {\n        if (instance == null) {\n            instance = new MySingleton();\n        }\n        return instance;\n    }\n\n    public void doSomething() {\n        System.out.println(\"Doing something...\");\n    }\n}"
    },
    {
        "instruction": "Write a JavaScript function that converts an object to a query string.",
        "input": "Example object: {name: 'John', age: 28, location: 'New York'}",
        "response": "function objToQueryString(obj) {\n    const keyValuePairs = [];\n    for (const key in obj) {\n        keyValuePairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n    }\n    return keyValuePairs.join('&');\n}\n",
        "output": "function objToQueryString(obj) {\n    const keyValuePairs = [];\n    for (const key in obj) {\n        keyValuePairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n    }\n    return keyValuePairs.join('&');\n}\n"
    },
    {
        "instruction": "Translate the following JavaScript function into Python.",
        "input": "function findMax(arr) {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}",
        "response": "def find_max(arr):\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val",
        "output": "def find_max(arr):\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val"
    },
    {
        "instruction": "Create a Java method that takes a list of strings as input and returns the longest string.",
        "input": "",
        "response": "public String findLongestString(List<String> strings) {\n    String longest = strings.get(0);\n    for (String string : strings) {\n        if (string.length() > longest.length()) {\n            longest = string;\n        }\n    }\n    return longest;\n}",
        "output": "public String findLongestString(List<String> strings) {\n    String longest = strings.get(0);\n    for (String string : strings) {\n        if (string.length() > longest.length()) {\n            longest = string;\n        }\n    }\n    return longest;\n}"
    },
    {
        "instruction": "Write a Bash script that calculates the sum of all integers from 1 to a given number provided as a command-line argument.",
        "input": "",
        "response": "#!/bin/bash\n\nnumber=$1\nsum=0\n\nfor ((i=1; i<=number; i++))\ndo\n    sum=$((sum + i))\ndone\n\necho $sum",
        "output": "#!/bin/bash\n\nnumber=$1\nsum=0\n\nfor ((i=1; i<=number; i++))\ndo\n    sum=$((sum + i))\ndone\n\necho $sum"
    },
    {
        "instruction": "Please provide a code snippet of a simple HTTP server in Node.js that listens on port 3000 and returns 'Hello, World!' as the response.",
        "input": "",
        "response": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!\\n');\n});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');\n});",
        "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello, World!\\n');\n});\n\nserver.listen(3000, () => {\n    console.log('Server running on port 3000');\n});"
    },
    {
        "instruction": "Create a Python function that takes a string as input and counts the occurrences of each character. Return the result as a dictionary with characters as keys and their counts as values.",
        "input": "hello world",
        "response": "def count_characters(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\nresult = count_characters('hello world')\nprint(result)",
        "output": "def count_characters(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\n\nresult = count_characters('hello world')\nprint(result)"
    },
    {
        "instruction": "Explain the steps of this JavaScript code that calculates the factorial of a non-negative integer using recursion.",
        "input": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\nconsole.log(factorial(5));",
        "response": "1. Define a function called 'factorial' that takes a single parameter 'n'.\n2. Check if 'n' is equal to 0 or 1, and if so, return 1. This is the base case for the recursion.\n3. If 'n' is not 0 or 1, return the product of 'n' and the result of calling the 'factorial' function with 'n - 1' as the argument. This is the recursive step.\n4. The recursion continues solving sub-problems until it reaches the base case (n === 0 || n === 1).\n5. Print the result of calling the 'factorial' function with 5 as the argument.",
        "output": "1. Define a function called 'factorial' that takes a single parameter 'n'.\n2. Check if 'n' is equal to 0 or 1, and if so, return 1. This is the base case for the recursion.\n3. If 'n' is not 0 or 1, return the product of 'n' and the result of calling the 'factorial' function with 'n - 1' as the argument. This is the recursive step.\n4. The recursion continues solving sub-problems until it reaches the base case (n === 0 || n === 1).\n5. Print the result of calling the 'factorial' function with 5 as the argument."
    },
    {
        "instruction": "Rewrite the given Java code to use a for loop instead of a while loop.",
        "input": "public class Example {\n  public static void main(String[] args) {\n    int i = 0;\n    while (i < 5) {\n      System.out.println(\"The value of i is: \" + i);\n      i++;\n    }\n  }\n}",
        "response": "public class Example {\n  public static void main(String[] args) {\n    for (int i = 0; i < 5; i++) {\n      System.out.println(\"The value of i is: \" + i);\n    }\n  }\n}",
        "output": "public class Example {\n  public static void main(String[] args) {\n    for (int i = 0; i < 5; i++) {\n      System.out.println(\"The value of i is: \" + i);\n    }\n  }\n}"
    },
    {
        "instruction": "Can you write a Bash script that reads a given directory's files and outputs the file names, file sizes, and file modification dates?",
        "input": "",
        "response": "#!/bin/bash\n\nfor file in *;\ndo\n  file_size=$(stat -c \"%s\" \"$file\")\n  file_modification_date=$(stat -c \"%y\" \"$file\")\n  echo \"File Name: $file\"\n  echo \"File Size: $file_size\"\n  echo \"Modification Date: $file_modification_date\"\n  echo \"\";\ndone",
        "output": "#!/bin/bash\n\nfor file in *;\ndo\n  file_size=$(stat -c \"%s\" \"$file\")\n  file_modification_date=$(stat -c \"%y\" \"$file\")\n  echo \"File Name: $file\"\n  echo \"File Size: $file_size\"\n  echo \"Modification Date: $file_modification_date\"\n  echo \"\";\ndone"
    },
    {
        "instruction": "Create a JavaScript function that takes a string as input and returns the string reversed.",
        "input": "",
        "response": "function reverseString(input) {\n    // Split the input string into an array, reverse it, and join it back\n    return input.split('').reverse().join('');\n}",
        "output": "function reverseString(input) {\n    // Split the input string into an array, reverse it, and join it back\n    return input.split('').reverse().join('');\n}"
    },
    {
        "instruction": "How would you implement a simple stack data structure in Python?",
        "input": "",
        "response": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)",
        "output": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)"
    },
    {
        "instruction": "Translate the following C++ code into equivalent Java code:\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello, World!\" << endl;\n  return 0;\n}",
        "input": "",
        "response": "public class HelloWorld {\n\n    public static void main(String[] args) {\n        // Print the message\n        System.out.println(\"Hello, World!\");\n    }\n\n}",
        "output": "public class HelloWorld {\n\n    public static void main(String[] args) {\n        // Print the message\n        System.out.println(\"Hello, World!\");\n    }\n\n}"
    },
    {
        "instruction": "Write a shell script that checks if a file exists and outputs a message based on the result.",
        "input": "filename='/path/to/yourfile.txt'",
        "response": "#!/bin/sh\n\n# Set the filename\nfilename='/path/to/yourfile.txt'\n\n# Check if the file exists\nif [ -e \"$filename\" ]; then\n    echo \"The file $filename exists.\"\nelse\n    echo \"The file $filename does not exist.\"\nfi",
        "output": "#!/bin/sh\n\n# Set the filename\nfilename='/path/to/yourfile.txt'\n\n# Check if the file exists\nif [ -e \"$filename\" ]; then\n    echo \"The file $filename exists.\"\nelse\n    echo \"The file $filename does not exist.\"\nfi"
    },
    {
        "instruction": "In C++, implement a function that reverses a given string in-place.",
        "input": "Hello, World!",
        "response": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string(std::string &str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nvoid reverse_string(std::string &str) {\n    std::reverse(str.begin(), str.end());\n}\n\nint main() {\n    std::string input = \"Hello, World!\";\n    reverse_string(input);\n    std::cout << input << std::endl;\n    return 0;\n}"
    },
    {
        "instruction": "What would be the output of the following Python code?\n\nx = [i ** 2 for i in range(5)]\nprint(x)",
        "input": "",
        "response": "The output of the given Python code will be:\n\n[0, 1, 4, 9, 16]\n\nThe code creates a list comprehension that calculates the square of each number in the range from 0 to 4 (the range function stops before 5). The result is a list of square numbers.",
        "output": "The output of the given Python code will be:\n\n[0, 1, 4, 9, 16]\n\nThe code creates a list comprehension that calculates the square of each number in the range from 0 to 4 (the range function stops before 5). The result is a list of square numbers."
    },
    {
        "instruction": "Write a shell script that receives a file's path as an argument and prints the number of lines in the file.",
        "input": "example.txt",
        "response": "#!/bin/sh\n\nfile_path=$1\nline_count=$(wc -l < \"$file_path\")\necho \"Number of lines in the file: $line_count\"\n\n# Usage: ./count_lines.sh example.txt",
        "output": "#!/bin/sh\n\nfile_path=$1\nline_count=$(wc -l < \"$file_path\")\necho \"Number of lines in the file: $line_count\"\n\n# Usage: ./count_lines.sh example.txt"
    },
    {
        "instruction": "Write a Python function that calculates the factorial of a given number using recursion.",
        "input": "5",
        "response": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Given a code snippet, identify if there's any syntax error and if so, provide a corrected version of the code.",
        "input": "def list_sum(lst):\n    result = 0\n    for element in lst\n        result += element\n    return result",
        "response": "def list_sum(lst):\n    result = 0\n    for element in lst:\n        result += element\n    return result",
        "output": "def list_sum(lst):\n    result = 0\n    for element in lst:\n        result += element\n    return result"
    },
    {
        "instruction": "Create a C++ program that calculates and prints the squares of integers from 1 to 10.",
        "input": "",
        "response": "#include<iostream>\n\nint main() {\n    for(int i = 1; i <= 10; i++) {\n        std::cout << i << \" squared: \" << i * i << std::endl;\n    }\n\n    return 0;\n}",
        "output": "#include<iostream>\n\nint main() {\n    for(int i = 1; i <= 10; i++) {\n        std::cout << i << \" squared: \" << i * i << std::endl;\n    }\n\n    return 0;\n}"
    },
    {
        "instruction": "Create a Java function that takes an array of integers as input and returns the sum of all even numbers in the array.",
        "input": "Example input array: [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "response": "public int sumEvenNumbers(int[] array) {\n    int sum = 0;\n    for (int number : array) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}",
        "output": "public int sumEvenNumbers(int[] array) {\n    int sum = 0;\n    for (int number : array) {\n        if (number % 2 == 0) {\n            sum += number;\n        }\n    }\n    return sum;\n}"
    },
    {
        "instruction": "How can I write a JavaScript function that takes a string as input and returns the same string reversed?",
        "input": "Example input string: 'hello world'",
        "response": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}",
        "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"
    },
    {
        "instruction": "Translate the following C++ code snippet into Python:",
        "input": "C++ code snippet:\n\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> vec = {1, 2, 3, 4, 5};\n    for (int i = 0; i < vec.size(); ++i) {\n        std::cout << vec[i] << ' ';\n    }\n    return 0;\n}",
        "response": "Python equivalent code snippet:\n\nvec = [1, 2, 3, 4, 5]\nfor i in vec:\n    print(i, end=' ')",
        "output": "Python equivalent code snippet:\n\nvec = [1, 2, 3, 4, 5]\nfor i in vec:\n    print(i, end=' ')"
    },
    {
        "instruction": "Debug the following Python code to make it work correctly for performing string concatenation and return the modified code:",
        "input": "Initial Python code with issues:\n\ndef concatenate_strings(a, b):\n    return a + ' ' +  b\n\nresult = concatenate_string('hello', 'world')\nprint(result)",
        "response": "Modified Python code with issues fixed:\n\ndef concatenate_strings(a, b):\n    return a + ' ' + b\n\nresult = concatenate_strings('hello', 'world')\nprint(result)",
        "output": "Modified Python code with issues fixed:\n\ndef concatenate_strings(a, b):\n    return a + ' ' + b\n\nresult = concatenate_strings('hello', 'world')\nprint(result)"
    },
    {
        "instruction": "Write a C++ program to calculate the sum of integers from 1 to N, where N is provided by the user.",
        "input": "10",
        "response": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N, sum = 0;\n    cout << \"Enter an integer: \";\n    cin >> N;\n\n    for (int i = 1; i <= N; i++) {\n        sum += i;\n    }\n\n    cout << \"The sum of integers from 1 to \" << N << \" is: \" << sum << endl;\n    return 0;\n}",
        "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int N, sum = 0;\n    cout << \"Enter an integer: \";\n    cin >> N;\n\n    for (int i = 1; i <= N; i++) {\n        sum += i;\n    }\n\n    cout << \"The sum of integers from 1 to \" << N << \" is: \" << sum << endl;\n    return 0;\n}"
    },
    {
        "instruction": "What would be the output of this Python code snippet?",
        "input": "grades = {'Sandy': 90, 'Fred': 78, 'Tom': 85}\nsorted_grades = sorted(grades.items(), key=lambda x: x[1], reverse=True)\nprint(sorted_grades)",
        "response": "[('Sandy', 90), ('Tom', 85), ('Fred', 78)]",
        "output": "[('Sandy', 90), ('Tom', 85), ('Fred', 78)]"
    },
    {
        "instruction": "Create a JavaScript function that checks if the provided word is a palindrome or not. A palindrome is a word that reads the same backward as forward, such as 'madam'.",
        "input": "racecar",
        "response": "function isPalindrome(word) {\n    const length = word.length;\n    for (let i = 0; i < length / 2; i++) {\n        if (word[i] !== word[length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(isPalindrome('racecar'));",
        "output": "function isPalindrome(word) {\n    const length = word.length;\n    for (let i = 0; i < length / 2; i++) {\n        if (word[i] !== word[length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(isPalindrome('racecar'));"
    },
    {
        "instruction": "Demonstrate how to use the requests library in Python to make a GET request to an API and parse the JSON response.",
        "input": "https://jsonplaceholder.typicode.com/todos/1",
        "response": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    json_data = response.json()\n    print(json_data)\nelse:\n    print(f'Error: API request failed with status code {response.status_code}')",
        "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/todos/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    json_data = response.json()\n    print(json_data)\nelse:\n    print(f'Error: API request failed with status code {response.status_code}')"
    },
    {
        "instruction": "Create a Java function that takes an integer as input and returns its square.",
        "input": "",
        "response": "public int square(int number) {\n    return number * number;\n}",
        "output": "public int square(int number) {\n    return number * number;\n}"
    },
    {
        "instruction": "What would be the output of the following Python code snippet?\n```python\nx = [1, 2, 3]\ny = x\nx.append(4)\nprint(y)\n```",
        "input": "",
        "response": "The output of the code snippet would be: [1, 2, 3, 4]\n\nExplanation:\n1. x is a list containing 1, 2, and 3.\n2. y is assigned the reference to x, so now both x and y point to the same list.\n3. x.append(4) adds 4 to the end of the list pointed to by x (and y, since they point to the same list).\n4. print(y) prints the contents of the list [1, 2, 3, 4], as both x and y now point to this updated list.",
        "output": "The output of the code snippet would be: [1, 2, 3, 4]\n\nExplanation:\n1. x is a list containing 1, 2, and 3.\n2. y is assigned the reference to x, so now both x and y point to the same list.\n3. x.append(4) adds 4 to the end of the list pointed to by x (and y, since they point to the same list).\n4. print(y) prints the contents of the list [1, 2, 3, 4], as both x and y now point to this updated list."
    },
    {
        "instruction": "Write a JavaScript function that takes an array of numbers and returns the sum of its elements.",
        "input": "",
        "response": "function sumArray(array) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}",
        "output": "function sumArray(array) {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Translate the following C++ code snippet to equivalent Python code:\n```cpp\n#include <iostream>\n\nint main() {\n    int a = 5;\n    int b = 10;\n    int result = a * b;\n    std::cout << result << std::endl;\n    return 0;\n}\n```",
        "input": "",
        "response": "a = 5\nb = 10\nresult = a * b\nprint(result)",
        "output": "a = 5\nb = 10\nresult = a * b\nprint(result)"
    },
    {
        "instruction": "Create a Java function that takes a string as input and returns the number of vowels in the string.",
        "input": "",
        "response": "public int countVowels(String input) {\n int vowelCount = 0;\n String vowels = \"AEIOUaeiou\";\n\n for (int i = 0; i < input.length(); i++) {\n  if (vowels.indexOf(input.charAt(i)) != -1) {\n   vowelCount++;\n  }\n }\n\n return vowelCount;\n}",
        "output": "public int countVowels(String input) {\n int vowelCount = 0;\n String vowels = \"AEIOUaeiou\";\n\n for (int i = 0; i < input.length(); i++) {\n  if (vowels.indexOf(input.charAt(i)) != -1) {\n   vowelCount++;\n  }\n }\n\n return vowelCount;\n}"
    },
    {
        "instruction": "What is the shell script command to get the lines that contain 'error' in a log file and save it into a separate file named 'error_log.txt'?",
        "input": "error_log.log",
        "response": "grep 'error' error_log.log > error_log.txt",
        "output": "grep 'error' error_log.log > error_log.txt"
    },
    {
        "instruction": "Write a Python function that takes a list of integers as input and returns the sum of all even numbers in the list.",
        "input": "",
        "response": "def sum_even_numbers(numbers):\n return sum(num for num in numbers if num % 2 == 0)",
        "output": "def sum_even_numbers(numbers):\n return sum(num for num in numbers if num % 2 == 0)"
    },
    {
        "instruction": "Provide a JavaScript function that takes an array of objects, where each object has a name and age property. The function should return a new array with the same objects sorted by age in ascending order.",
        "input": "",
        "response": "function sortByAge(arr) {\n return arr.sort((a, b) => a.age - b.age);\n}",
        "output": "function sortByAge(arr) {\n return arr.sort((a, b) => a.age - b.age);\n}"
    },
    {
        "instruction": "Write a Java method that takes a string as input and returns the reversed version of that string.",
        "input": "",
        "response": "public String reverseString(String input) {\n StringBuilder sb = new StringBuilder(input);\n return sb.reverse().toString();\n}",
        "output": "public String reverseString(String input) {\n StringBuilder sb = new StringBuilder(input);\n return sb.reverse().toString();\n}"
    },
    {
        "instruction": "Create a JavaScript function that takes an array of integers and returns the sum of all integers within the array.",
        "input": "",
        "response": "function sumArray(arr) {\n let sum = 0;\n arr.forEach(element => {\n sum += element;\n });\n return sum;\n}",
        "output": "function sumArray(arr) {\n let sum = 0;\n arr.forEach(element => {\n sum += element;\n });\n return sum;\n}"
    },
    {
        "instruction": "Can you fix the following Python code snippet to properly remove all occurrences of the word 'spam' from the given string? Input: 'I love spam, spam is so yummy!'. Current code: 's = s.replace('spam', '')'.",
        "input": "s = 'I love spam, spam is so yummy!'\ncurrent_code = \"s = s.replace('spam', '')\"",
        "response": "s = 'I love spam, spam is so yummy!'\nfixed_code = \"s = s.replace('spam', '').strip()\"",
        "output": "s = 'I love spam, spam is so yummy!'\nfixed_code = \"s = s.replace('spam', '').strip()\""
    },
    {
        "instruction": "Translate the following Python code, which calculates the factorial of a given number, into C++: 'def factorial(n): return 1 if n == 0 else n * factorial(n-1)'.",
        "input": "python_code = \"def factorial(n): return 1 if n == 0 else n * factorial(n-1)\"",
        "response": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n return (n == 0) ? 1 : n * factorial(n - 1);\n}\n\nint main() {\n int n;\n cout << \"Enter a number: \";\n cin >> n;\n cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n return 0;\n}",
        "output": "#include<iostream>\nusing namespace std;\n\nint factorial(int n) {\n return (n == 0) ? 1 : n * factorial(n - 1);\n}\n\nint main() {\n int n;\n cout << \"Enter a number: \";\n cin >> n;\n cout << \"Factorial of \" << n << \" is \" << factorial(n) << endl;\n return 0;\n}"
    },
    {
        "instruction": "Create a Python function that takes two lists as input and returns a list containing the common elements between the two lists.",
        "input": "[1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9]",
        "response": "def common_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element in list2:\n            result.append(element)\n    return result\n\ninput_list1 = [1, 2, 3, 4, 5, 6]\ninput_list2 = [4, 5, 6, 7, 8, 9]\n\nprint(common_elements(input_list1, input_list2))",
        "output": "def common_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element in list2:\n            result.append(element)\n    return result\n\ninput_list1 = [1, 2, 3, 4, 5, 6]\ninput_list2 = [4, 5, 6, 7, 8, 9]\n\nprint(common_elements(input_list1, input_list2))"
    },
    {
        "instruction": "Write a C++ code to create a class named 'Person', with member variables for name and age, and a member function to print their details.",
        "input": "",
        "response": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    std::string name;\n    int age;\n\n    void print_details() {\n        std::cout << \"Name: \" << name << std::endl;\n        std::cout << \"Age: \" << age << std::endl;\n    }\n};\n\nint main() {\n    Person p;\n    p.name = \"Alice\";\n    p.age = 30;\n\n    p.print_details();\n\n    return 0;\n}",
        "output": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    std::string name;\n    int age;\n\n    void print_details() {\n        std::cout << \"Name: \" << name << std::endl;\n        std::cout << \"Age: \" << age << std::endl;\n    }\n};\n\nint main() {\n    Person p;\n    p.name = \"Alice\";\n    p.age = 30;\n\n    p.print_details();\n\n    return 0;\n}"
    },
    {
        "instruction": "What would be the JavaScript code to fetch data from the following API endpoint, parse it as JSON, and log it to the console?",
        "input": "https://api.example.com/data",
        "response": "fetch('https://api.example.com/data')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));",
        "output": "fetch('https://api.example.com/data')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.error('Error:', error));"
    },
    {
        "instruction": "Write a SQL query to update the salary of all employees in the 'employees' table by 10%, and then select their names and updated salaries.",
        "input": "",
        "response": "UPDATE employees SET salary = salary * 1.10;\nSELECT name, salary FROM employees;",
        "output": "UPDATE employees SET salary = salary * 1.10;\nSELECT name, salary FROM employees;"
    }
]
